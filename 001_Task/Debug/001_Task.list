
001_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ba4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08008d34  08008d34  00018d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ee0  08008ee0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008ee0  08008ee0  00018ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ee8  08008ee8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ee8  08008ee8  00018ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008eec  08008eec  00018eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00014628  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200146a0  200146a0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018219  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000038cb  00000000  00000000  00038304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001640  00000000  00000000  0003bbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001134  00000000  00000000  0003d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024e4a  00000000  00000000  0003e344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a028  00000000  00000000  0006318e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dc634  00000000  00000000  0007d1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006644  00000000  00000000  001597ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009a  00000000  00000000  0015fe30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d1c 	.word	0x08008d1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08008d1c 	.word	0x08008d1c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f7c 	.word	0x20012f7c
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b970 	b.w	8000608 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	460f      	mov	r7, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4694      	mov	ip, r2
 8000354:	d965      	bls.n	8000422 <__udivmoddi4+0xe2>
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	b143      	cbz	r3, 800036e <__udivmoddi4+0x2e>
 800035c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000360:	f1c3 0220 	rsb	r2, r3, #32
 8000364:	409f      	lsls	r7, r3
 8000366:	fa20 f202 	lsr.w	r2, r0, r2
 800036a:	4317      	orrs	r7, r2
 800036c:	409c      	lsls	r4, r3
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fa1f f58c 	uxth.w	r5, ip
 8000376:	fbb7 f1fe 	udiv	r1, r7, lr
 800037a:	0c22      	lsrs	r2, r4, #16
 800037c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000380:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000384:	fb01 f005 	mul.w	r0, r1, r5
 8000388:	4290      	cmp	r0, r2
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038c:	eb1c 0202 	adds.w	r2, ip, r2
 8000390:	f101 37ff 	add.w	r7, r1, #4294967295
 8000394:	f080 811c 	bcs.w	80005d0 <__udivmoddi4+0x290>
 8000398:	4290      	cmp	r0, r2
 800039a:	f240 8119 	bls.w	80005d0 <__udivmoddi4+0x290>
 800039e:	3902      	subs	r1, #2
 80003a0:	4462      	add	r2, ip
 80003a2:	1a12      	subs	r2, r2, r0
 80003a4:	b2a4      	uxth	r4, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b2:	fb00 f505 	mul.w	r5, r0, r5
 80003b6:	42a5      	cmp	r5, r4
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x90>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c2:	f080 8107 	bcs.w	80005d4 <__udivmoddi4+0x294>
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	f240 8104 	bls.w	80005d4 <__udivmoddi4+0x294>
 80003cc:	4464      	add	r4, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11e      	cbz	r6, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40dc      	lsrs	r4, r3
 80003dc:	2300      	movs	r3, #0
 80003de:	e9c6 4300 	strd	r4, r3, [r6]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0xbc>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80ed 	beq.w	80005ca <__udivmoddi4+0x28a>
 80003f0:	2100      	movs	r1, #0
 80003f2:	e9c6 0500 	strd	r0, r5, [r6]
 80003f6:	4608      	mov	r0, r1
 80003f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fc:	fab3 f183 	clz	r1, r3
 8000400:	2900      	cmp	r1, #0
 8000402:	d149      	bne.n	8000498 <__udivmoddi4+0x158>
 8000404:	42ab      	cmp	r3, r5
 8000406:	d302      	bcc.n	800040e <__udivmoddi4+0xce>
 8000408:	4282      	cmp	r2, r0
 800040a:	f200 80f8 	bhi.w	80005fe <__udivmoddi4+0x2be>
 800040e:	1a84      	subs	r4, r0, r2
 8000410:	eb65 0203 	sbc.w	r2, r5, r3
 8000414:	2001      	movs	r0, #1
 8000416:	4617      	mov	r7, r2
 8000418:	2e00      	cmp	r6, #0
 800041a:	d0e2      	beq.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	e9c6 4700 	strd	r4, r7, [r6]
 8000420:	e7df      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000422:	b902      	cbnz	r2, 8000426 <__udivmoddi4+0xe6>
 8000424:	deff      	udf	#255	; 0xff
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x210>
 8000430:	1a8a      	subs	r2, r1, r2
 8000432:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	2101      	movs	r1, #1
 800043c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000440:	fb07 2015 	mls	r0, r7, r5, r2
 8000444:	0c22      	lsrs	r2, r4, #16
 8000446:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800044a:	fb0e f005 	mul.w	r0, lr, r5
 800044e:	4290      	cmp	r0, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x124>
 8000452:	eb1c 0202 	adds.w	r2, ip, r2
 8000456:	f105 38ff 	add.w	r8, r5, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4290      	cmp	r0, r2
 800045e:	f200 80cb 	bhi.w	80005f8 <__udivmoddi4+0x2b8>
 8000462:	4645      	mov	r5, r8
 8000464:	1a12      	subs	r2, r2, r0
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb2 f0f7 	udiv	r0, r2, r7
 800046c:	fb07 2210 	mls	r2, r7, r0, r2
 8000470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000474:	fb0e fe00 	mul.w	lr, lr, r0
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x14e>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f100 32ff 	add.w	r2, r0, #4294967295
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x14c>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f200 80bb 	bhi.w	8000602 <__udivmoddi4+0x2c2>
 800048c:	4610      	mov	r0, r2
 800048e:	eba4 040e 	sub.w	r4, r4, lr
 8000492:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000496:	e79f      	b.n	80003d8 <__udivmoddi4+0x98>
 8000498:	f1c1 0720 	rsb	r7, r1, #32
 800049c:	408b      	lsls	r3, r1
 800049e:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a6:	fa05 f401 	lsl.w	r4, r5, r1
 80004aa:	fa20 f307 	lsr.w	r3, r0, r7
 80004ae:	40fd      	lsrs	r5, r7
 80004b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b4:	4323      	orrs	r3, r4
 80004b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ba:	fa1f fe8c 	uxth.w	lr, ip
 80004be:	fb09 5518 	mls	r5, r9, r8, r5
 80004c2:	0c1c      	lsrs	r4, r3, #16
 80004c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c8:	fb08 f50e 	mul.w	r5, r8, lr
 80004cc:	42a5      	cmp	r5, r4
 80004ce:	fa02 f201 	lsl.w	r2, r2, r1
 80004d2:	fa00 f001 	lsl.w	r0, r0, r1
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e0:	f080 8088 	bcs.w	80005f4 <__udivmoddi4+0x2b4>
 80004e4:	42a5      	cmp	r5, r4
 80004e6:	f240 8085 	bls.w	80005f4 <__udivmoddi4+0x2b4>
 80004ea:	f1a8 0802 	sub.w	r8, r8, #2
 80004ee:	4464      	add	r4, ip
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	b29d      	uxth	r5, r3
 80004f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f8:	fb09 4413 	mls	r4, r9, r3, r4
 80004fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000500:	fb03 fe0e 	mul.w	lr, r3, lr
 8000504:	45a6      	cmp	lr, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000510:	d26c      	bcs.n	80005ec <__udivmoddi4+0x2ac>
 8000512:	45a6      	cmp	lr, r4
 8000514:	d96a      	bls.n	80005ec <__udivmoddi4+0x2ac>
 8000516:	3b02      	subs	r3, #2
 8000518:	4464      	add	r4, ip
 800051a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051e:	fba3 9502 	umull	r9, r5, r3, r2
 8000522:	eba4 040e 	sub.w	r4, r4, lr
 8000526:	42ac      	cmp	r4, r5
 8000528:	46c8      	mov	r8, r9
 800052a:	46ae      	mov	lr, r5
 800052c:	d356      	bcc.n	80005dc <__udivmoddi4+0x29c>
 800052e:	d053      	beq.n	80005d8 <__udivmoddi4+0x298>
 8000530:	b156      	cbz	r6, 8000548 <__udivmoddi4+0x208>
 8000532:	ebb0 0208 	subs.w	r2, r0, r8
 8000536:	eb64 040e 	sbc.w	r4, r4, lr
 800053a:	fa04 f707 	lsl.w	r7, r4, r7
 800053e:	40ca      	lsrs	r2, r1
 8000540:	40cc      	lsrs	r4, r1
 8000542:	4317      	orrs	r7, r2
 8000544:	e9c6 7400 	strd	r7, r4, [r6]
 8000548:	4618      	mov	r0, r3
 800054a:	2100      	movs	r1, #0
 800054c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000550:	f1c3 0120 	rsb	r1, r3, #32
 8000554:	fa02 fc03 	lsl.w	ip, r2, r3
 8000558:	fa20 f201 	lsr.w	r2, r0, r1
 800055c:	fa25 f101 	lsr.w	r1, r5, r1
 8000560:	409d      	lsls	r5, r3
 8000562:	432a      	orrs	r2, r5
 8000564:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000570:	fb07 1510 	mls	r5, r7, r0, r1
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800057a:	fb00 f50e 	mul.w	r5, r0, lr
 800057e:	428d      	cmp	r5, r1
 8000580:	fa04 f403 	lsl.w	r4, r4, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x258>
 8000586:	eb1c 0101 	adds.w	r1, ip, r1
 800058a:	f100 38ff 	add.w	r8, r0, #4294967295
 800058e:	d22f      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 8000590:	428d      	cmp	r5, r1
 8000592:	d92d      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	1b49      	subs	r1, r1, r5
 800059a:	b292      	uxth	r2, r2
 800059c:	fbb1 f5f7 	udiv	r5, r1, r7
 80005a0:	fb07 1115 	mls	r1, r7, r5, r1
 80005a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ac:	4291      	cmp	r1, r2
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x282>
 80005b0:	eb1c 0202 	adds.w	r2, ip, r2
 80005b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b8:	d216      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 80005ba:	4291      	cmp	r1, r2
 80005bc:	d914      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 80005be:	3d02      	subs	r5, #2
 80005c0:	4462      	add	r2, ip
 80005c2:	1a52      	subs	r2, r2, r1
 80005c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c8:	e738      	b.n	800043c <__udivmoddi4+0xfc>
 80005ca:	4631      	mov	r1, r6
 80005cc:	4630      	mov	r0, r6
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xa2>
 80005d0:	4639      	mov	r1, r7
 80005d2:	e6e6      	b.n	80003a2 <__udivmoddi4+0x62>
 80005d4:	4610      	mov	r0, r2
 80005d6:	e6fb      	b.n	80003d0 <__udivmoddi4+0x90>
 80005d8:	4548      	cmp	r0, r9
 80005da:	d2a9      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005dc:	ebb9 0802 	subs.w	r8, r9, r2
 80005e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e4:	3b01      	subs	r3, #1
 80005e6:	e7a3      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e8:	4645      	mov	r5, r8
 80005ea:	e7ea      	b.n	80005c2 <__udivmoddi4+0x282>
 80005ec:	462b      	mov	r3, r5
 80005ee:	e794      	b.n	800051a <__udivmoddi4+0x1da>
 80005f0:	4640      	mov	r0, r8
 80005f2:	e7d1      	b.n	8000598 <__udivmoddi4+0x258>
 80005f4:	46d0      	mov	r8, sl
 80005f6:	e77b      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f8:	3d02      	subs	r5, #2
 80005fa:	4462      	add	r2, ip
 80005fc:	e732      	b.n	8000464 <__udivmoddi4+0x124>
 80005fe:	4608      	mov	r0, r1
 8000600:	e70a      	b.n	8000418 <__udivmoddi4+0xd8>
 8000602:	4464      	add	r4, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e742      	b.n	800048e <__udivmoddi4+0x14e>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fc3f 	bl	8000e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f855 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f8e7 	bl	80007ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800061e:	f000 f8bb 	bl	8000798 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Enabling cyclic counting
  DWT_CTRL |=(1<<0);
 8000622:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <main+0x98>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a1f      	ldr	r2, [pc, #124]	; (80006a4 <main+0x98>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 800062e:	481e      	ldr	r0, [pc, #120]	; (80006a8 <main+0x9c>)
 8000630:	f004 ff66 	bl	8005500 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000634:	f004 fd8e 	bl	8005154 <SEGGER_SYSVIEW_Conf>

//  SEGGER_SYSVIEW_Start(); it starts in segger_uart.c

  status = xTaskCreate(task1_handler,
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	2302      	movs	r3, #2
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <main+0xa0>)
 8000644:	22c8      	movs	r2, #200	; 0xc8
 8000646:	491a      	ldr	r1, [pc, #104]	; (80006b0 <main+0xa4>)
 8000648:	481a      	ldr	r0, [pc, #104]	; (80006b4 <main+0xa8>)
 800064a:	f002 ff0d 	bl	8003468 <xTaskCreate>
 800064e:	6178      	str	r0, [r7, #20]
              "Hello world from Task-1",
              2,
              &task1_handle
                            );

  configASSERT(status == pdPASS);
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d00a      	beq.n	800066c <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800065a:	f383 8811 	msr	BASEPRI, r3
 800065e:	f3bf 8f6f 	isb	sy
 8000662:	f3bf 8f4f 	dsb	sy
 8000666:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000668:	bf00      	nop
 800066a:	e7fe      	b.n	800066a <main+0x5e>
  status = xTaskCreate(task2_handler,
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	9301      	str	r3, [sp, #4]
 8000670:	2302      	movs	r3, #2
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <main+0xac>)
 8000676:	22c8      	movs	r2, #200	; 0xc8
 8000678:	4910      	ldr	r1, [pc, #64]	; (80006bc <main+0xb0>)
 800067a:	4811      	ldr	r0, [pc, #68]	; (80006c0 <main+0xb4>)
 800067c:	f002 fef4 	bl	8003468 <xTaskCreate>
 8000680:	6178      	str	r0, [r7, #20]
              "Hello world from Task-2",
              2,
              &task2_handle
                            );

  configASSERT(status == pdPASS);
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d00a      	beq.n	800069e <main+0x92>
        __asm volatile
 8000688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800068c:	f383 8811 	msr	BASEPRI, r3
 8000690:	f3bf 8f6f 	isb	sy
 8000694:	f3bf 8f4f 	dsb	sy
 8000698:	60fb      	str	r3, [r7, #12]
    }
 800069a:	bf00      	nop
 800069c:	e7fe      	b.n	800069c <main+0x90>

  //start the FreeRTOS scheduler

  vTaskStartScheduler();
 800069e:	f003 f839 	bl	8003714 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <main+0x96>
 80006a4:	e0001000 	.word	0xe0001000
 80006a8:	0007a120 	.word	0x0007a120
 80006ac:	08008d34 	.word	0x08008d34
 80006b0:	08008d4c 	.word	0x08008d4c
 80006b4:	08000aa9 	.word	0x08000aa9
 80006b8:	08008d54 	.word	0x08008d54
 80006bc:	08008d6c 	.word	0x08008d6c
 80006c0:	08000aed 	.word	0x08000aed

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	; 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f007 fb53 	bl	8007d7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a27      	ldr	r2, [pc, #156]	; (8000790 <SystemClock_Config+0xcc>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemClock_Config+0xd0>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000734:	2308      	movs	r3, #8
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000738:	23a8      	movs	r3, #168	; 0xa8
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073c:	2302      	movs	r3, #2
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000740:	2307      	movs	r3, #7
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fe7d 	bl	8001448 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000754:	f000 f9fe 	bl	8000b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000764:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2105      	movs	r1, #5
 8000776:	4618      	mov	r0, r3
 8000778:	f001 f8de 	bl	8001938 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000782:	f000 f9e7 	bl	8000b54 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	; 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <MX_USART2_UART_Init+0x50>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007d0:	f001 fda6 	bl	8002320 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007da:	f000 f9bb 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000094 	.word	0x20000094
 80007e8:	40004400 	.word	0x40004400

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08c      	sub	sp, #48	; 0x30
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
 8000806:	4ba2      	ldr	r3, [pc, #648]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4aa1      	ldr	r2, [pc, #644]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 800080c:	f043 0310 	orr.w	r3, r3, #16
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b9f      	ldr	r3, [pc, #636]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0310 	and.w	r3, r3, #16
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	4b9b      	ldr	r3, [pc, #620]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a9a      	ldr	r2, [pc, #616]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b98      	ldr	r3, [pc, #608]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4b94      	ldr	r3, [pc, #592]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a93      	ldr	r2, [pc, #588]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b91      	ldr	r3, [pc, #580]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	4b8d      	ldr	r3, [pc, #564]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a8c      	ldr	r2, [pc, #560]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b8a      	ldr	r3, [pc, #552]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b86      	ldr	r3, [pc, #536]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a85      	ldr	r2, [pc, #532]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b83      	ldr	r3, [pc, #524]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b7f      	ldr	r3, [pc, #508]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a7e      	ldr	r2, [pc, #504]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000898:	f043 0308 	orr.w	r3, r3, #8
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b7c      	ldr	r3, [pc, #496]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0308 	and.w	r3, r3, #8
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2108      	movs	r1, #8
 80008ae:	4879      	ldr	r0, [pc, #484]	; (8000a94 <MX_GPIO_Init+0x2a8>)
 80008b0:	f000 fdb0 	bl	8001414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	2101      	movs	r1, #1
 80008b8:	4877      	ldr	r0, [pc, #476]	; (8000a98 <MX_GPIO_Init+0x2ac>)
 80008ba:	f000 fdab 	bl	8001414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008be:	2200      	movs	r2, #0
 80008c0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008c4:	4875      	ldr	r0, [pc, #468]	; (8000a9c <MX_GPIO_Init+0x2b0>)
 80008c6:	f000 fda5 	bl	8001414 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ca:	2308      	movs	r3, #8
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	486c      	ldr	r0, [pc, #432]	; (8000a94 <MX_GPIO_Init+0x2a8>)
 80008e2:	f000 fbfb 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4866      	ldr	r0, [pc, #408]	; (8000a98 <MX_GPIO_Init+0x2ac>)
 80008fe:	f000 fbed 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000902:	2308      	movs	r3, #8
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000912:	2305      	movs	r3, #5
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	485e      	ldr	r0, [pc, #376]	; (8000a98 <MX_GPIO_Init+0x2ac>)
 800091e:	f000 fbdd 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000922:	2301      	movs	r3, #1
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000926:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	485a      	ldr	r0, [pc, #360]	; (8000aa0 <MX_GPIO_Init+0x2b4>)
 8000938:	f000 fbd0 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800093c:	2310      	movs	r3, #16
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800094c:	2306      	movs	r3, #6
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4852      	ldr	r0, [pc, #328]	; (8000aa0 <MX_GPIO_Init+0x2b4>)
 8000958:	f000 fbc0 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800095c:	23e0      	movs	r3, #224	; 0xe0
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800096c:	2305      	movs	r3, #5
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	484a      	ldr	r0, [pc, #296]	; (8000aa0 <MX_GPIO_Init+0x2b4>)
 8000978:	f000 fbb0 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800097c:	2304      	movs	r3, #4
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4845      	ldr	r0, [pc, #276]	; (8000aa4 <MX_GPIO_Init+0x2b8>)
 8000990:	f000 fba4 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009a6:	2305      	movs	r3, #5
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	483c      	ldr	r0, [pc, #240]	; (8000aa4 <MX_GPIO_Init+0x2b8>)
 80009b2:	f000 fb93 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009b6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009ba:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4833      	ldr	r0, [pc, #204]	; (8000a9c <MX_GPIO_Init+0x2b0>)
 80009d0:	f000 fb84 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009d4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009e6:	2306      	movs	r3, #6
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	4829      	ldr	r0, [pc, #164]	; (8000a98 <MX_GPIO_Init+0x2ac>)
 80009f2:	f000 fb73 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fc:	2300      	movs	r3, #0
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4825      	ldr	r0, [pc, #148]	; (8000aa0 <MX_GPIO_Init+0x2b4>)
 8000a0c:	f000 fb66 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a10:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a22:	230a      	movs	r3, #10
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	481c      	ldr	r0, [pc, #112]	; (8000aa0 <MX_GPIO_Init+0x2b4>)
 8000a2e:	f000 fb55 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a32:	2320      	movs	r3, #32
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	4815      	ldr	r0, [pc, #84]	; (8000a9c <MX_GPIO_Init+0x2b0>)
 8000a46:	f000 fb49 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a4a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a50:	2312      	movs	r3, #18
 8000a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	480f      	ldr	r0, [pc, #60]	; (8000aa4 <MX_GPIO_Init+0x2b8>)
 8000a68:	f000 fb38 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a70:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_GPIO_Init+0x2a8>)
 8000a82:	f000 fb2b 	bl	80010dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a86:	bf00      	nop
 8000a88:	3730      	adds	r7, #48	; 0x30
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40020800 	.word	0x40020800
 8000a9c:	40020c00 	.word	0x40020c00
 8000aa0:	40020000 	.word	0x40020000
 8000aa4:	40020400 	.word	0x40020400

08000aa8 <task1_handler>:

/* USER CODE BEGIN 4 */


	static void task1_handler(void* parameters)
	{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b09c      	sub	sp, #112	; 0x70
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
		char msg[100];

		while(1)
		{

			printf("Task!");
 8000ab0:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <task1_handler+0x38>)
 8000ab2:	f007 f8cb 	bl	8007c4c <iprintf>
			snprintf(msg,100,"%s\n",(char*)parameters);
 8000ab6:	f107 000c 	add.w	r0, r7, #12
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a09      	ldr	r2, [pc, #36]	; (8000ae4 <task1_handler+0x3c>)
 8000abe:	2164      	movs	r1, #100	; 0x64
 8000ac0:	f007 f8d6 	bl	8007c70 <sniprintf>
			SEGGER_SYSVIEW_PrintfTarget(msg);
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f006 ff4d 	bl	8007968 <SEGGER_SYSVIEW_PrintfTarget>
			taskYIELD();
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <task1_handler+0x40>)
 8000ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	f3bf 8f4f 	dsb	sy
 8000ada:	f3bf 8f6f 	isb	sy
			printf("Task!");
 8000ade:	e7e7      	b.n	8000ab0 <task1_handler+0x8>
 8000ae0:	08008d74 	.word	0x08008d74
 8000ae4:	08008d7c 	.word	0x08008d7c
 8000ae8:	e000ed04 	.word	0xe000ed04

08000aec <task2_handler>:
		}

	}

	static void task2_handler(void* parameters)
	{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b09c      	sub	sp, #112	; 0x70
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
		char msg[100];
		while(1)
		{
			printf("Task6");
 8000af4:	480b      	ldr	r0, [pc, #44]	; (8000b24 <task2_handler+0x38>)
 8000af6:	f007 f8a9 	bl	8007c4c <iprintf>
			snprintf(msg,100,"%s\n",(char*)parameters);
 8000afa:	f107 000c 	add.w	r0, r7, #12
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a09      	ldr	r2, [pc, #36]	; (8000b28 <task2_handler+0x3c>)
 8000b02:	2164      	movs	r1, #100	; 0x64
 8000b04:	f007 f8b4 	bl	8007c70 <sniprintf>
			SEGGER_SYSVIEW_PrintfTarget(msg);
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f006 ff2b 	bl	8007968 <SEGGER_SYSVIEW_PrintfTarget>
			taskYIELD();
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <task2_handler+0x40>)
 8000b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	f3bf 8f4f 	dsb	sy
 8000b1e:	f3bf 8f6f 	isb	sy
			printf("Task6");
 8000b22:	e7e7      	b.n	8000af4 <task2_handler+0x8>
 8000b24:	08008d80 	.word	0x08008d80
 8000b28:	08008d7c 	.word	0x08008d7c
 8000b2c:	e000ed04 	.word	0xe000ed04

08000b30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d101      	bne.n	8000b46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b42:	f000 f9c9 	bl	8000ed8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40001000 	.word	0x40001000

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
}
 8000b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <Error_Handler+0x8>
	...

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a0f      	ldr	r2, [pc, #60]	; (8000bac <HAL_MspInit+0x4c>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <HAL_MspInit+0x4c>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <HAL_MspInit+0x4c>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000b9e:	f003 ff23 	bl	80049e8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800

08000bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	; 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a19      	ldr	r2, [pc, #100]	; (8000c34 <HAL_UART_MspInit+0x84>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d12b      	bne.n	8000c2a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <HAL_UART_MspInit+0x88>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <HAL_UART_MspInit+0x88>)
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be0:	6413      	str	r3, [r2, #64]	; 0x40
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <HAL_UART_MspInit+0x88>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <HAL_UART_MspInit+0x88>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a10      	ldr	r2, [pc, #64]	; (8000c38 <HAL_UART_MspInit+0x88>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_UART_MspInit+0x88>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c0a:	230c      	movs	r3, #12
 8000c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c1a:	2307      	movs	r3, #7
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <HAL_UART_MspInit+0x8c>)
 8000c26:	f000 fa59 	bl	80010dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	; 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40004400 	.word	0x40004400
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020000 	.word	0x40020000

08000c40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	; 0x38
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	4b33      	ldr	r3, [pc, #204]	; (8000d24 <HAL_InitTick+0xe4>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	4a32      	ldr	r2, [pc, #200]	; (8000d24 <HAL_InitTick+0xe4>)
 8000c5a:	f043 0310 	orr.w	r3, r3, #16
 8000c5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c60:	4b30      	ldr	r3, [pc, #192]	; (8000d24 <HAL_InitTick+0xe4>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	f003 0310 	and.w	r3, r3, #16
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c6c:	f107 0210 	add.w	r2, r7, #16
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4611      	mov	r1, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 f87e 	bl	8001d78 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c7c:	6a3b      	ldr	r3, [r7, #32]
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d103      	bne.n	8000c8e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c86:	f001 f84f 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8000c8a:	6378      	str	r0, [r7, #52]	; 0x34
 8000c8c:	e004      	b.n	8000c98 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c8e:	f001 f84b 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8000c92:	4603      	mov	r3, r0
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c9a:	4a23      	ldr	r2, [pc, #140]	; (8000d28 <HAL_InitTick+0xe8>)
 8000c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca0:	0c9b      	lsrs	r3, r3, #18
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ca6:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <HAL_InitTick+0xec>)
 8000ca8:	4a21      	ldr	r2, [pc, #132]	; (8000d30 <HAL_InitTick+0xf0>)
 8000caa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cac:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <HAL_InitTick+0xec>)
 8000cae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cb2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cb4:	4a1d      	ldr	r2, [pc, #116]	; (8000d2c <HAL_InitTick+0xec>)
 8000cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <HAL_InitTick+0xec>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <HAL_InitTick+0xec>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <HAL_InitTick+0xec>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ccc:	4817      	ldr	r0, [pc, #92]	; (8000d2c <HAL_InitTick+0xec>)
 8000cce:	f001 f885 	bl	8001ddc <HAL_TIM_Base_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000cd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d11b      	bne.n	8000d18 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ce0:	4812      	ldr	r0, [pc, #72]	; (8000d2c <HAL_InitTick+0xec>)
 8000ce2:	f001 f8d5 	bl	8001e90 <HAL_TIM_Base_Start_IT>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000cec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d111      	bne.n	8000d18 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cf4:	2036      	movs	r0, #54	; 0x36
 8000cf6:	f000 f9e3 	bl	80010c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b0f      	cmp	r3, #15
 8000cfe:	d808      	bhi.n	8000d12 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d00:	2200      	movs	r2, #0
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	2036      	movs	r0, #54	; 0x36
 8000d06:	f000 f9bf 	bl	8001088 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <HAL_InitTick+0xf4>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	e002      	b.n	8000d18 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3738      	adds	r7, #56	; 0x38
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40023800 	.word	0x40023800
 8000d28:	431bde83 	.word	0x431bde83
 8000d2c:	200000dc 	.word	0x200000dc
 8000d30:	40001000 	.word	0x40001000
 8000d34:	20000004 	.word	0x20000004

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d3c:	e7fe      	b.n	8000d3c <NMI_Handler+0x4>

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <TIM6_DAC_IRQHandler+0x10>)
 8000d6a:	f001 f901 	bl	8001f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200000dc 	.word	0x200000dc

08000d78 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	e00a      	b.n	8000da0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d8a:	f3af 8000 	nop.w
 8000d8e:	4601      	mov	r1, r0
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	1c5a      	adds	r2, r3, #1
 8000d94:	60ba      	str	r2, [r7, #8]
 8000d96:	b2ca      	uxtb	r2, r1
 8000d98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dbf0      	blt.n	8000d8a <_read+0x12>
  }

  return len;
 8000da8:	687b      	ldr	r3, [r7, #4]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dda:	605a      	str	r2, [r3, #4]
  return 0;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <_isatty>:

int _isatty(int file)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <SystemInit+0x20>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <SystemInit+0x20>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e44:	f7ff ffea 	bl	8000e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e48:	480c      	ldr	r0, [pc, #48]	; (8000e7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e4a:	490d      	ldr	r1, [pc, #52]	; (8000e80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e50:	e002      	b.n	8000e58 <LoopCopyDataInit>

08000e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e56:	3304      	adds	r3, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e5c:	d3f9      	bcc.n	8000e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e60:	4c0a      	ldr	r4, [pc, #40]	; (8000e8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e64:	e001      	b.n	8000e6a <LoopFillZerobss>

08000e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e68:	3204      	adds	r2, #4

08000e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e6c:	d3fb      	bcc.n	8000e66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f006 ffc3 	bl	8007df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e72:	f7ff fbcb 	bl	800060c <main>
  bx  lr    
 8000e76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e84:	08008ef0 	.word	0x08008ef0
  ldr r2, =_sbss
 8000e88:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e8c:	200146a0 	.word	0x200146a0

08000e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC_IRQHandler>
	...

08000e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <HAL_Init+0x40>)
 8000e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <HAL_Init+0x40>)
 8000eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_Init+0x40>)
 8000eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f000 f8d8 	bl	8001072 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec2:	200f      	movs	r0, #15
 8000ec4:	f7ff febc 	bl	8000c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec8:	f7ff fe4a 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023c00 	.word	0x40023c00

08000ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x20>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x24>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_IncTick+0x24>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	20000124 	.word	0x20000124

08000f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <HAL_GetTick+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000124 	.word	0x20000124

08000f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f34:	4013      	ands	r3, r2
 8000f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4a:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	60d3      	str	r3, [r2, #12]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <__NVIC_GetPriorityGrouping+0x18>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	f003 0307 	and.w	r3, r3, #7
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	db0b      	blt.n	8000fa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	f003 021f 	and.w	r2, r3, #31
 8000f94:	4907      	ldr	r1, [pc, #28]	; (8000fb4 <__NVIC_EnableIRQ+0x38>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000e100 	.word	0xe000e100

08000fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	db0a      	blt.n	8000fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	490c      	ldr	r1, [pc, #48]	; (8001004 <__NVIC_SetPriority+0x4c>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe0:	e00a      	b.n	8000ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4908      	ldr	r1, [pc, #32]	; (8001008 <__NVIC_SetPriority+0x50>)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	0112      	lsls	r2, r2, #4
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	761a      	strb	r2, [r3, #24]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000e100 	.word	0xe000e100
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f1c3 0307 	rsb	r3, r3, #7
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf28      	it	cs
 800102a:	2304      	movcs	r3, #4
 800102c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3304      	adds	r3, #4
 8001032:	2b06      	cmp	r3, #6
 8001034:	d902      	bls.n	800103c <NVIC_EncodePriority+0x30>
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3b03      	subs	r3, #3
 800103a:	e000      	b.n	800103e <NVIC_EncodePriority+0x32>
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 32ff 	mov.w	r2, #4294967295
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	f04f 31ff 	mov.w	r1, #4294967295
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43d9      	mvns	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	; 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ff4c 	bl	8000f18 <__NVIC_SetPriorityGrouping>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
 8001094:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800109a:	f7ff ff61 	bl	8000f60 <__NVIC_GetPriorityGrouping>
 800109e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	68b9      	ldr	r1, [r7, #8]
 80010a4:	6978      	ldr	r0, [r7, #20]
 80010a6:	f7ff ffb1 	bl	800100c <NVIC_EncodePriority>
 80010aa:	4602      	mov	r2, r0
 80010ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b0:	4611      	mov	r1, r2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff80 	bl	8000fb8 <__NVIC_SetPriority>
}
 80010b8:	bf00      	nop
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff54 	bl	8000f7c <__NVIC_EnableIRQ>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	; 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
 80010f6:	e16b      	b.n	80013d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010f8:	2201      	movs	r2, #1
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	429a      	cmp	r2, r3
 8001112:	f040 815a 	bne.w	80013ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	2b01      	cmp	r3, #1
 8001120:	d005      	beq.n	800112e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112a:	2b02      	cmp	r3, #2
 800112c:	d130      	bne.n	8001190 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	2203      	movs	r2, #3
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001164:	2201      	movs	r2, #1
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	091b      	lsrs	r3, r3, #4
 800117a:	f003 0201 	and.w	r2, r3, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b03      	cmp	r3, #3
 800119a:	d017      	beq.n	80011cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d123      	bne.n	8001220 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	08da      	lsrs	r2, r3, #3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3208      	adds	r2, #8
 80011e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	220f      	movs	r2, #15
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	691a      	ldr	r2, [r3, #16]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	08da      	lsrs	r2, r3, #3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3208      	adds	r2, #8
 800121a:	69b9      	ldr	r1, [r7, #24]
 800121c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	2203      	movs	r2, #3
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0203 	and.w	r2, r3, #3
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 80b4 	beq.w	80013ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b60      	ldr	r3, [pc, #384]	; (80013e8 <HAL_GPIO_Init+0x30c>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	4a5f      	ldr	r2, [pc, #380]	; (80013e8 <HAL_GPIO_Init+0x30c>)
 800126c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001270:	6453      	str	r3, [r2, #68]	; 0x44
 8001272:	4b5d      	ldr	r3, [pc, #372]	; (80013e8 <HAL_GPIO_Init+0x30c>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800127e:	4a5b      	ldr	r2, [pc, #364]	; (80013ec <HAL_GPIO_Init+0x310>)
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	089b      	lsrs	r3, r3, #2
 8001284:	3302      	adds	r3, #2
 8001286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	220f      	movs	r2, #15
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a52      	ldr	r2, [pc, #328]	; (80013f0 <HAL_GPIO_Init+0x314>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d02b      	beq.n	8001302 <HAL_GPIO_Init+0x226>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a51      	ldr	r2, [pc, #324]	; (80013f4 <HAL_GPIO_Init+0x318>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d025      	beq.n	80012fe <HAL_GPIO_Init+0x222>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a50      	ldr	r2, [pc, #320]	; (80013f8 <HAL_GPIO_Init+0x31c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d01f      	beq.n	80012fa <HAL_GPIO_Init+0x21e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4f      	ldr	r2, [pc, #316]	; (80013fc <HAL_GPIO_Init+0x320>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d019      	beq.n	80012f6 <HAL_GPIO_Init+0x21a>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4e      	ldr	r2, [pc, #312]	; (8001400 <HAL_GPIO_Init+0x324>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d013      	beq.n	80012f2 <HAL_GPIO_Init+0x216>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4d      	ldr	r2, [pc, #308]	; (8001404 <HAL_GPIO_Init+0x328>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d00d      	beq.n	80012ee <HAL_GPIO_Init+0x212>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4c      	ldr	r2, [pc, #304]	; (8001408 <HAL_GPIO_Init+0x32c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d007      	beq.n	80012ea <HAL_GPIO_Init+0x20e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4b      	ldr	r2, [pc, #300]	; (800140c <HAL_GPIO_Init+0x330>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d101      	bne.n	80012e6 <HAL_GPIO_Init+0x20a>
 80012e2:	2307      	movs	r3, #7
 80012e4:	e00e      	b.n	8001304 <HAL_GPIO_Init+0x228>
 80012e6:	2308      	movs	r3, #8
 80012e8:	e00c      	b.n	8001304 <HAL_GPIO_Init+0x228>
 80012ea:	2306      	movs	r3, #6
 80012ec:	e00a      	b.n	8001304 <HAL_GPIO_Init+0x228>
 80012ee:	2305      	movs	r3, #5
 80012f0:	e008      	b.n	8001304 <HAL_GPIO_Init+0x228>
 80012f2:	2304      	movs	r3, #4
 80012f4:	e006      	b.n	8001304 <HAL_GPIO_Init+0x228>
 80012f6:	2303      	movs	r3, #3
 80012f8:	e004      	b.n	8001304 <HAL_GPIO_Init+0x228>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e002      	b.n	8001304 <HAL_GPIO_Init+0x228>
 80012fe:	2301      	movs	r3, #1
 8001300:	e000      	b.n	8001304 <HAL_GPIO_Init+0x228>
 8001302:	2300      	movs	r3, #0
 8001304:	69fa      	ldr	r2, [r7, #28]
 8001306:	f002 0203 	and.w	r2, r2, #3
 800130a:	0092      	lsls	r2, r2, #2
 800130c:	4093      	lsls	r3, r2
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001314:	4935      	ldr	r1, [pc, #212]	; (80013ec <HAL_GPIO_Init+0x310>)
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	3302      	adds	r3, #2
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001322:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <HAL_GPIO_Init+0x334>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001346:	4a32      	ldr	r2, [pc, #200]	; (8001410 <HAL_GPIO_Init+0x334>)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800134c:	4b30      	ldr	r3, [pc, #192]	; (8001410 <HAL_GPIO_Init+0x334>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001370:	4a27      	ldr	r2, [pc, #156]	; (8001410 <HAL_GPIO_Init+0x334>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001376:	4b26      	ldr	r3, [pc, #152]	; (8001410 <HAL_GPIO_Init+0x334>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800139a:	4a1d      	ldr	r2, [pc, #116]	; (8001410 <HAL_GPIO_Init+0x334>)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <HAL_GPIO_Init+0x334>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013c4:	4a12      	ldr	r2, [pc, #72]	; (8001410 <HAL_GPIO_Init+0x334>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3301      	adds	r3, #1
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	2b0f      	cmp	r3, #15
 80013d4:	f67f ae90 	bls.w	80010f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013d8:	bf00      	nop
 80013da:	bf00      	nop
 80013dc:	3724      	adds	r7, #36	; 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40013800 	.word	0x40013800
 80013f0:	40020000 	.word	0x40020000
 80013f4:	40020400 	.word	0x40020400
 80013f8:	40020800 	.word	0x40020800
 80013fc:	40020c00 	.word	0x40020c00
 8001400:	40021000 	.word	0x40021000
 8001404:	40021400 	.word	0x40021400
 8001408:	40021800 	.word	0x40021800
 800140c:	40021c00 	.word	0x40021c00
 8001410:	40013c00 	.word	0x40013c00

08001414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	807b      	strh	r3, [r7, #2]
 8001420:	4613      	mov	r3, r2
 8001422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001424:	787b      	ldrb	r3, [r7, #1]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800142a:	887a      	ldrh	r2, [r7, #2]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001430:	e003      	b.n	800143a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001432:	887b      	ldrh	r3, [r7, #2]
 8001434:	041a      	lsls	r2, r3, #16
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	619a      	str	r2, [r3, #24]
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e267      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d075      	beq.n	8001552 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001466:	4b88      	ldr	r3, [pc, #544]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	2b04      	cmp	r3, #4
 8001470:	d00c      	beq.n	800148c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001472:	4b85      	ldr	r3, [pc, #532]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800147a:	2b08      	cmp	r3, #8
 800147c:	d112      	bne.n	80014a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800147e:	4b82      	ldr	r3, [pc, #520]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800148a:	d10b      	bne.n	80014a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800148c:	4b7e      	ldr	r3, [pc, #504]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d05b      	beq.n	8001550 <HAL_RCC_OscConfig+0x108>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d157      	bne.n	8001550 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e242      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ac:	d106      	bne.n	80014bc <HAL_RCC_OscConfig+0x74>
 80014ae:	4b76      	ldr	r3, [pc, #472]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a75      	ldr	r2, [pc, #468]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 80014b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	e01d      	b.n	80014f8 <HAL_RCC_OscConfig+0xb0>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014c4:	d10c      	bne.n	80014e0 <HAL_RCC_OscConfig+0x98>
 80014c6:	4b70      	ldr	r3, [pc, #448]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a6f      	ldr	r2, [pc, #444]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 80014cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	4b6d      	ldr	r3, [pc, #436]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a6c      	ldr	r2, [pc, #432]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 80014d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	e00b      	b.n	80014f8 <HAL_RCC_OscConfig+0xb0>
 80014e0:	4b69      	ldr	r3, [pc, #420]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a68      	ldr	r2, [pc, #416]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 80014e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	4b66      	ldr	r3, [pc, #408]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a65      	ldr	r2, [pc, #404]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 80014f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d013      	beq.n	8001528 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fcfe 	bl	8000f00 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001508:	f7ff fcfa 	bl	8000f00 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	; 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e207      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151a:	4b5b      	ldr	r3, [pc, #364]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0f0      	beq.n	8001508 <HAL_RCC_OscConfig+0xc0>
 8001526:	e014      	b.n	8001552 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fcea 	bl	8000f00 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001530:	f7ff fce6 	bl	8000f00 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b64      	cmp	r3, #100	; 0x64
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e1f3      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001542:	4b51      	ldr	r3, [pc, #324]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0xe8>
 800154e:	e000      	b.n	8001552 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d063      	beq.n	8001626 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800155e:	4b4a      	ldr	r3, [pc, #296]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 030c 	and.w	r3, r3, #12
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00b      	beq.n	8001582 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800156a:	4b47      	ldr	r3, [pc, #284]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001572:	2b08      	cmp	r3, #8
 8001574:	d11c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001576:	4b44      	ldr	r3, [pc, #272]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d116      	bne.n	80015b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001582:	4b41      	ldr	r3, [pc, #260]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d005      	beq.n	800159a <HAL_RCC_OscConfig+0x152>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d001      	beq.n	800159a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e1c7      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159a:	4b3b      	ldr	r3, [pc, #236]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	4937      	ldr	r1, [pc, #220]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ae:	e03a      	b.n	8001626 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d020      	beq.n	80015fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b8:	4b34      	ldr	r3, [pc, #208]	; (800168c <HAL_RCC_OscConfig+0x244>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015be:	f7ff fc9f 	bl	8000f00 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c6:	f7ff fc9b 	bl	8000f00 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e1a8      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d8:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e4:	4b28      	ldr	r3, [pc, #160]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4925      	ldr	r1, [pc, #148]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	600b      	str	r3, [r1, #0]
 80015f8:	e015      	b.n	8001626 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015fa:	4b24      	ldr	r3, [pc, #144]	; (800168c <HAL_RCC_OscConfig+0x244>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001600:	f7ff fc7e 	bl	8000f00 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001608:	f7ff fc7a 	bl	8000f00 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e187      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161a:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b00      	cmp	r3, #0
 8001630:	d036      	beq.n	80016a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d016      	beq.n	8001668 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <HAL_RCC_OscConfig+0x248>)
 800163c:	2201      	movs	r2, #1
 800163e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001640:	f7ff fc5e 	bl	8000f00 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001648:	f7ff fc5a 	bl	8000f00 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e167      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_RCC_OscConfig+0x240>)
 800165c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x200>
 8001666:	e01b      	b.n	80016a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <HAL_RCC_OscConfig+0x248>)
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166e:	f7ff fc47 	bl	8000f00 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001674:	e00e      	b.n	8001694 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001676:	f7ff fc43 	bl	8000f00 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d907      	bls.n	8001694 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e150      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
 8001688:	40023800 	.word	0x40023800
 800168c:	42470000 	.word	0x42470000
 8001690:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001694:	4b88      	ldr	r3, [pc, #544]	; (80018b8 <HAL_RCC_OscConfig+0x470>)
 8001696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1ea      	bne.n	8001676 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 8097 	beq.w	80017dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ae:	2300      	movs	r3, #0
 80016b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016b2:	4b81      	ldr	r3, [pc, #516]	; (80018b8 <HAL_RCC_OscConfig+0x470>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10f      	bne.n	80016de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	4b7d      	ldr	r3, [pc, #500]	; (80018b8 <HAL_RCC_OscConfig+0x470>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	4a7c      	ldr	r2, [pc, #496]	; (80018b8 <HAL_RCC_OscConfig+0x470>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016cc:	6413      	str	r3, [r2, #64]	; 0x40
 80016ce:	4b7a      	ldr	r3, [pc, #488]	; (80018b8 <HAL_RCC_OscConfig+0x470>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016da:	2301      	movs	r3, #1
 80016dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016de:	4b77      	ldr	r3, [pc, #476]	; (80018bc <HAL_RCC_OscConfig+0x474>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d118      	bne.n	800171c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ea:	4b74      	ldr	r3, [pc, #464]	; (80018bc <HAL_RCC_OscConfig+0x474>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a73      	ldr	r2, [pc, #460]	; (80018bc <HAL_RCC_OscConfig+0x474>)
 80016f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016f6:	f7ff fc03 	bl	8000f00 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016fe:	f7ff fbff 	bl	8000f00 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e10c      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001710:	4b6a      	ldr	r3, [pc, #424]	; (80018bc <HAL_RCC_OscConfig+0x474>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0f0      	beq.n	80016fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d106      	bne.n	8001732 <HAL_RCC_OscConfig+0x2ea>
 8001724:	4b64      	ldr	r3, [pc, #400]	; (80018b8 <HAL_RCC_OscConfig+0x470>)
 8001726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001728:	4a63      	ldr	r2, [pc, #396]	; (80018b8 <HAL_RCC_OscConfig+0x470>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6713      	str	r3, [r2, #112]	; 0x70
 8001730:	e01c      	b.n	800176c <HAL_RCC_OscConfig+0x324>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2b05      	cmp	r3, #5
 8001738:	d10c      	bne.n	8001754 <HAL_RCC_OscConfig+0x30c>
 800173a:	4b5f      	ldr	r3, [pc, #380]	; (80018b8 <HAL_RCC_OscConfig+0x470>)
 800173c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173e:	4a5e      	ldr	r2, [pc, #376]	; (80018b8 <HAL_RCC_OscConfig+0x470>)
 8001740:	f043 0304 	orr.w	r3, r3, #4
 8001744:	6713      	str	r3, [r2, #112]	; 0x70
 8001746:	4b5c      	ldr	r3, [pc, #368]	; (80018b8 <HAL_RCC_OscConfig+0x470>)
 8001748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174a:	4a5b      	ldr	r2, [pc, #364]	; (80018b8 <HAL_RCC_OscConfig+0x470>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6713      	str	r3, [r2, #112]	; 0x70
 8001752:	e00b      	b.n	800176c <HAL_RCC_OscConfig+0x324>
 8001754:	4b58      	ldr	r3, [pc, #352]	; (80018b8 <HAL_RCC_OscConfig+0x470>)
 8001756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001758:	4a57      	ldr	r2, [pc, #348]	; (80018b8 <HAL_RCC_OscConfig+0x470>)
 800175a:	f023 0301 	bic.w	r3, r3, #1
 800175e:	6713      	str	r3, [r2, #112]	; 0x70
 8001760:	4b55      	ldr	r3, [pc, #340]	; (80018b8 <HAL_RCC_OscConfig+0x470>)
 8001762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001764:	4a54      	ldr	r2, [pc, #336]	; (80018b8 <HAL_RCC_OscConfig+0x470>)
 8001766:	f023 0304 	bic.w	r3, r3, #4
 800176a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d015      	beq.n	80017a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001774:	f7ff fbc4 	bl	8000f00 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177a:	e00a      	b.n	8001792 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800177c:	f7ff fbc0 	bl	8000f00 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f241 3288 	movw	r2, #5000	; 0x1388
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e0cb      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001792:	4b49      	ldr	r3, [pc, #292]	; (80018b8 <HAL_RCC_OscConfig+0x470>)
 8001794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0ee      	beq.n	800177c <HAL_RCC_OscConfig+0x334>
 800179e:	e014      	b.n	80017ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a0:	f7ff fbae 	bl	8000f00 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a6:	e00a      	b.n	80017be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a8:	f7ff fbaa 	bl	8000f00 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e0b5      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017be:	4b3e      	ldr	r3, [pc, #248]	; (80018b8 <HAL_RCC_OscConfig+0x470>)
 80017c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1ee      	bne.n	80017a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017ca:	7dfb      	ldrb	r3, [r7, #23]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d105      	bne.n	80017dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d0:	4b39      	ldr	r3, [pc, #228]	; (80018b8 <HAL_RCC_OscConfig+0x470>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	4a38      	ldr	r2, [pc, #224]	; (80018b8 <HAL_RCC_OscConfig+0x470>)
 80017d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 80a1 	beq.w	8001928 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017e6:	4b34      	ldr	r3, [pc, #208]	; (80018b8 <HAL_RCC_OscConfig+0x470>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d05c      	beq.n	80018ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d141      	bne.n	800187e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fa:	4b31      	ldr	r3, [pc, #196]	; (80018c0 <HAL_RCC_OscConfig+0x478>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff fb7e 	bl	8000f00 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001808:	f7ff fb7a 	bl	8000f00 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e087      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800181a:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <HAL_RCC_OscConfig+0x470>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69da      	ldr	r2, [r3, #28]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001834:	019b      	lsls	r3, r3, #6
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183c:	085b      	lsrs	r3, r3, #1
 800183e:	3b01      	subs	r3, #1
 8001840:	041b      	lsls	r3, r3, #16
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	061b      	lsls	r3, r3, #24
 800184a:	491b      	ldr	r1, [pc, #108]	; (80018b8 <HAL_RCC_OscConfig+0x470>)
 800184c:	4313      	orrs	r3, r2
 800184e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <HAL_RCC_OscConfig+0x478>)
 8001852:	2201      	movs	r2, #1
 8001854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001856:	f7ff fb53 	bl	8000f00 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800185e:	f7ff fb4f 	bl	8000f00 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e05c      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <HAL_RCC_OscConfig+0x470>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0f0      	beq.n	800185e <HAL_RCC_OscConfig+0x416>
 800187c:	e054      	b.n	8001928 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <HAL_RCC_OscConfig+0x478>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff fb3c 	bl	8000f00 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800188c:	f7ff fb38 	bl	8000f00 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e045      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_RCC_OscConfig+0x470>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x444>
 80018aa:	e03d      	b.n	8001928 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d107      	bne.n	80018c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e038      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40007000 	.word	0x40007000
 80018c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018c4:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <HAL_RCC_OscConfig+0x4ec>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d028      	beq.n	8001924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018dc:	429a      	cmp	r2, r3
 80018de:	d121      	bne.n	8001924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d11a      	bne.n	8001924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018f4:	4013      	ands	r3, r2
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d111      	bne.n	8001924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190a:	085b      	lsrs	r3, r3, #1
 800190c:	3b01      	subs	r3, #1
 800190e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001910:	429a      	cmp	r2, r3
 8001912:	d107      	bne.n	8001924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001920:	429a      	cmp	r2, r3
 8001922:	d001      	beq.n	8001928 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800

08001938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0cc      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800194c:	4b68      	ldr	r3, [pc, #416]	; (8001af0 <HAL_RCC_ClockConfig+0x1b8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d90c      	bls.n	8001974 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195a:	4b65      	ldr	r3, [pc, #404]	; (8001af0 <HAL_RCC_ClockConfig+0x1b8>)
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	4b63      	ldr	r3, [pc, #396]	; (8001af0 <HAL_RCC_ClockConfig+0x1b8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0b8      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d020      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800198c:	4b59      	ldr	r3, [pc, #356]	; (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	4a58      	ldr	r2, [pc, #352]	; (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001996:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019a4:	4b53      	ldr	r3, [pc, #332]	; (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4a52      	ldr	r2, [pc, #328]	; (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b0:	4b50      	ldr	r3, [pc, #320]	; (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	494d      	ldr	r1, [pc, #308]	; (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d044      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d6:	4b47      	ldr	r3, [pc, #284]	; (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d119      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e07f      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d003      	beq.n	80019f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d107      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f6:	4b3f      	ldr	r3, [pc, #252]	; (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d109      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e06f      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a06:	4b3b      	ldr	r3, [pc, #236]	; (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e067      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a16:	4b37      	ldr	r3, [pc, #220]	; (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f023 0203 	bic.w	r2, r3, #3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	4934      	ldr	r1, [pc, #208]	; (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a28:	f7ff fa6a 	bl	8000f00 <HAL_GetTick>
 8001a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2e:	e00a      	b.n	8001a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a30:	f7ff fa66 	bl	8000f00 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e04f      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a46:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 020c 	and.w	r2, r3, #12
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d1eb      	bne.n	8001a30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a58:	4b25      	ldr	r3, [pc, #148]	; (8001af0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d20c      	bcs.n	8001a80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a66:	4b22      	ldr	r3, [pc, #136]	; (8001af0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6e:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e032      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d008      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a8c:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	4916      	ldr	r1, [pc, #88]	; (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d009      	beq.n	8001abe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	490e      	ldr	r1, [pc, #56]	; (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001abe:	f000 f821 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	490a      	ldr	r1, [pc, #40]	; (8001af8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad0:	5ccb      	ldrb	r3, [r1, r3]
 8001ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad6:	4a09      	ldr	r2, [pc, #36]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff f8ae 	bl	8000c40 <HAL_InitTick>

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023c00 	.word	0x40023c00
 8001af4:	40023800 	.word	0x40023800
 8001af8:	08008e6c 	.word	0x08008e6c
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20000004 	.word	0x20000004

08001b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b08:	b094      	sub	sp, #80	; 0x50
 8001b0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8001b10:	2300      	movs	r3, #0
 8001b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b14:	2300      	movs	r3, #0
 8001b16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b1c:	4b79      	ldr	r3, [pc, #484]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 030c 	and.w	r3, r3, #12
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d00d      	beq.n	8001b44 <HAL_RCC_GetSysClockFreq+0x40>
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	f200 80e1 	bhi.w	8001cf0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d002      	beq.n	8001b38 <HAL_RCC_GetSysClockFreq+0x34>
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d003      	beq.n	8001b3e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b36:	e0db      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b38:	4b73      	ldr	r3, [pc, #460]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b3a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b3c:	e0db      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b3e:	4b73      	ldr	r3, [pc, #460]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x208>)
 8001b40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b42:	e0d8      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b44:	4b6f      	ldr	r3, [pc, #444]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b4c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b4e:	4b6d      	ldr	r3, [pc, #436]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d063      	beq.n	8001c22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b5a:	4b6a      	ldr	r3, [pc, #424]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	099b      	lsrs	r3, r3, #6
 8001b60:	2200      	movs	r2, #0
 8001b62:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b6e:	2300      	movs	r3, #0
 8001b70:	637b      	str	r3, [r7, #52]	; 0x34
 8001b72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b76:	4622      	mov	r2, r4
 8001b78:	462b      	mov	r3, r5
 8001b7a:	f04f 0000 	mov.w	r0, #0
 8001b7e:	f04f 0100 	mov.w	r1, #0
 8001b82:	0159      	lsls	r1, r3, #5
 8001b84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b88:	0150      	lsls	r0, r2, #5
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4621      	mov	r1, r4
 8001b90:	1a51      	subs	r1, r2, r1
 8001b92:	6139      	str	r1, [r7, #16]
 8001b94:	4629      	mov	r1, r5
 8001b96:	eb63 0301 	sbc.w	r3, r3, r1
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ba8:	4659      	mov	r1, fp
 8001baa:	018b      	lsls	r3, r1, #6
 8001bac:	4651      	mov	r1, sl
 8001bae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bb2:	4651      	mov	r1, sl
 8001bb4:	018a      	lsls	r2, r1, #6
 8001bb6:	4651      	mov	r1, sl
 8001bb8:	ebb2 0801 	subs.w	r8, r2, r1
 8001bbc:	4659      	mov	r1, fp
 8001bbe:	eb63 0901 	sbc.w	r9, r3, r1
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bd6:	4690      	mov	r8, r2
 8001bd8:	4699      	mov	r9, r3
 8001bda:	4623      	mov	r3, r4
 8001bdc:	eb18 0303 	adds.w	r3, r8, r3
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	462b      	mov	r3, r5
 8001be4:	eb49 0303 	adc.w	r3, r9, r3
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bf6:	4629      	mov	r1, r5
 8001bf8:	024b      	lsls	r3, r1, #9
 8001bfa:	4621      	mov	r1, r4
 8001bfc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c00:	4621      	mov	r1, r4
 8001c02:	024a      	lsls	r2, r1, #9
 8001c04:	4610      	mov	r0, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c14:	f7fe fb7c 	bl	8000310 <__aeabi_uldivmod>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c20:	e058      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c22:	4b38      	ldr	r3, [pc, #224]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	099b      	lsrs	r3, r3, #6
 8001c28:	2200      	movs	r2, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c32:	623b      	str	r3, [r7, #32]
 8001c34:	2300      	movs	r3, #0
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
 8001c38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c3c:	4642      	mov	r2, r8
 8001c3e:	464b      	mov	r3, r9
 8001c40:	f04f 0000 	mov.w	r0, #0
 8001c44:	f04f 0100 	mov.w	r1, #0
 8001c48:	0159      	lsls	r1, r3, #5
 8001c4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c4e:	0150      	lsls	r0, r2, #5
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4641      	mov	r1, r8
 8001c56:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c5a:	4649      	mov	r1, r9
 8001c5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c74:	ebb2 040a 	subs.w	r4, r2, sl
 8001c78:	eb63 050b 	sbc.w	r5, r3, fp
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	f04f 0300 	mov.w	r3, #0
 8001c84:	00eb      	lsls	r3, r5, #3
 8001c86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c8a:	00e2      	lsls	r2, r4, #3
 8001c8c:	4614      	mov	r4, r2
 8001c8e:	461d      	mov	r5, r3
 8001c90:	4643      	mov	r3, r8
 8001c92:	18e3      	adds	r3, r4, r3
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	464b      	mov	r3, r9
 8001c98:	eb45 0303 	adc.w	r3, r5, r3
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001caa:	4629      	mov	r1, r5
 8001cac:	028b      	lsls	r3, r1, #10
 8001cae:	4621      	mov	r1, r4
 8001cb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cb4:	4621      	mov	r1, r4
 8001cb6:	028a      	lsls	r2, r1, #10
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
 8001cc2:	61fa      	str	r2, [r7, #28]
 8001cc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cc8:	f7fe fb22 	bl	8000310 <__aeabi_uldivmod>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	0c1b      	lsrs	r3, r3, #16
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	3301      	adds	r3, #1
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ce4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cee:	e002      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cf2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3750      	adds	r7, #80	; 0x50
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	00f42400 	.word	0x00f42400
 8001d0c:	007a1200 	.word	0x007a1200

08001d10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000000 	.word	0x20000000

08001d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d2c:	f7ff fff0 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	0a9b      	lsrs	r3, r3, #10
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	4903      	ldr	r1, [pc, #12]	; (8001d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d3e:	5ccb      	ldrb	r3, [r1, r3]
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	08008e7c 	.word	0x08008e7c

08001d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d54:	f7ff ffdc 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	0b5b      	lsrs	r3, r3, #13
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4903      	ldr	r1, [pc, #12]	; (8001d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	08008e7c 	.word	0x08008e7c

08001d78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	220f      	movs	r2, #15
 8001d86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 0203 	and.w	r2, r3, #3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	08db      	lsrs	r3, r3, #3
 8001db2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <HAL_RCC_GetClockConfig+0x60>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0207 	and.w	r2, r3, #7
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	601a      	str	r2, [r3, #0]
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40023c00 	.word	0x40023c00

08001ddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e041      	b.n	8001e72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d106      	bne.n	8001e08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f839 	bl	8001e7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3304      	adds	r3, #4
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	f000 f9c0 	bl	80021a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d001      	beq.n	8001ea8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e04e      	b.n	8001f46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a23      	ldr	r2, [pc, #140]	; (8001f54 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d022      	beq.n	8001f10 <HAL_TIM_Base_Start_IT+0x80>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed2:	d01d      	beq.n	8001f10 <HAL_TIM_Base_Start_IT+0x80>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a1f      	ldr	r2, [pc, #124]	; (8001f58 <HAL_TIM_Base_Start_IT+0xc8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d018      	beq.n	8001f10 <HAL_TIM_Base_Start_IT+0x80>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a1e      	ldr	r2, [pc, #120]	; (8001f5c <HAL_TIM_Base_Start_IT+0xcc>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d013      	beq.n	8001f10 <HAL_TIM_Base_Start_IT+0x80>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a1c      	ldr	r2, [pc, #112]	; (8001f60 <HAL_TIM_Base_Start_IT+0xd0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00e      	beq.n	8001f10 <HAL_TIM_Base_Start_IT+0x80>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a1b      	ldr	r2, [pc, #108]	; (8001f64 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d009      	beq.n	8001f10 <HAL_TIM_Base_Start_IT+0x80>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a19      	ldr	r2, [pc, #100]	; (8001f68 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d004      	beq.n	8001f10 <HAL_TIM_Base_Start_IT+0x80>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a18      	ldr	r2, [pc, #96]	; (8001f6c <HAL_TIM_Base_Start_IT+0xdc>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d111      	bne.n	8001f34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2b06      	cmp	r3, #6
 8001f20:	d010      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f042 0201 	orr.w	r2, r2, #1
 8001f30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f32:	e007      	b.n	8001f44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40010000 	.word	0x40010000
 8001f58:	40000400 	.word	0x40000400
 8001f5c:	40000800 	.word	0x40000800
 8001f60:	40000c00 	.word	0x40000c00
 8001f64:	40010400 	.word	0x40010400
 8001f68:	40014000 	.word	0x40014000
 8001f6c:	40001800 	.word	0x40001800

08001f70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d020      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01b      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0202 	mvn.w	r2, #2
 8001fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f8d2 	bl	8002164 <HAL_TIM_IC_CaptureCallback>
 8001fc0:	e005      	b.n	8001fce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f8c4 	bl	8002150 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f8d5 	bl	8002178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d020      	beq.n	8002020 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d01b      	beq.n	8002020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0204 	mvn.w	r2, #4
 8001ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f8ac 	bl	8002164 <HAL_TIM_IC_CaptureCallback>
 800200c:	e005      	b.n	800201a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f89e 	bl	8002150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f8af 	bl	8002178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d020      	beq.n	800206c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01b      	beq.n	800206c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0208 	mvn.w	r2, #8
 800203c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2204      	movs	r2, #4
 8002042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f886 	bl	8002164 <HAL_TIM_IC_CaptureCallback>
 8002058:	e005      	b.n	8002066 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f878 	bl	8002150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f889 	bl	8002178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	2b00      	cmp	r3, #0
 8002074:	d020      	beq.n	80020b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	2b00      	cmp	r3, #0
 800207e:	d01b      	beq.n	80020b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0210 	mvn.w	r2, #16
 8002088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2208      	movs	r2, #8
 800208e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f860 	bl	8002164 <HAL_TIM_IC_CaptureCallback>
 80020a4:	e005      	b.n	80020b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f852 	bl	8002150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f863 	bl	8002178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00c      	beq.n	80020dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d007      	beq.n	80020dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0201 	mvn.w	r2, #1
 80020d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7fe fd2a 	bl	8000b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00c      	beq.n	8002100 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d007      	beq.n	8002100 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f906 	bl	800230c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00c      	beq.n	8002124 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002110:	2b00      	cmp	r3, #0
 8002112:	d007      	beq.n	8002124 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800211c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f834 	bl	800218c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f003 0320 	and.w	r3, r3, #32
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00c      	beq.n	8002148 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f003 0320 	and.w	r3, r3, #32
 8002134:	2b00      	cmp	r3, #0
 8002136:	d007      	beq.n	8002148 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0220 	mvn.w	r2, #32
 8002140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f8d8 	bl	80022f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002148:	bf00      	nop
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a46      	ldr	r2, [pc, #280]	; (80022cc <TIM_Base_SetConfig+0x12c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d013      	beq.n	80021e0 <TIM_Base_SetConfig+0x40>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021be:	d00f      	beq.n	80021e0 <TIM_Base_SetConfig+0x40>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a43      	ldr	r2, [pc, #268]	; (80022d0 <TIM_Base_SetConfig+0x130>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d00b      	beq.n	80021e0 <TIM_Base_SetConfig+0x40>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a42      	ldr	r2, [pc, #264]	; (80022d4 <TIM_Base_SetConfig+0x134>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d007      	beq.n	80021e0 <TIM_Base_SetConfig+0x40>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a41      	ldr	r2, [pc, #260]	; (80022d8 <TIM_Base_SetConfig+0x138>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d003      	beq.n	80021e0 <TIM_Base_SetConfig+0x40>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a40      	ldr	r2, [pc, #256]	; (80022dc <TIM_Base_SetConfig+0x13c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d108      	bne.n	80021f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a35      	ldr	r2, [pc, #212]	; (80022cc <TIM_Base_SetConfig+0x12c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d02b      	beq.n	8002252 <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002200:	d027      	beq.n	8002252 <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a32      	ldr	r2, [pc, #200]	; (80022d0 <TIM_Base_SetConfig+0x130>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d023      	beq.n	8002252 <TIM_Base_SetConfig+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a31      	ldr	r2, [pc, #196]	; (80022d4 <TIM_Base_SetConfig+0x134>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d01f      	beq.n	8002252 <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a30      	ldr	r2, [pc, #192]	; (80022d8 <TIM_Base_SetConfig+0x138>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d01b      	beq.n	8002252 <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a2f      	ldr	r2, [pc, #188]	; (80022dc <TIM_Base_SetConfig+0x13c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d017      	beq.n	8002252 <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a2e      	ldr	r2, [pc, #184]	; (80022e0 <TIM_Base_SetConfig+0x140>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d013      	beq.n	8002252 <TIM_Base_SetConfig+0xb2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a2d      	ldr	r2, [pc, #180]	; (80022e4 <TIM_Base_SetConfig+0x144>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d00f      	beq.n	8002252 <TIM_Base_SetConfig+0xb2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a2c      	ldr	r2, [pc, #176]	; (80022e8 <TIM_Base_SetConfig+0x148>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d00b      	beq.n	8002252 <TIM_Base_SetConfig+0xb2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a2b      	ldr	r2, [pc, #172]	; (80022ec <TIM_Base_SetConfig+0x14c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d007      	beq.n	8002252 <TIM_Base_SetConfig+0xb2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a2a      	ldr	r2, [pc, #168]	; (80022f0 <TIM_Base_SetConfig+0x150>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d003      	beq.n	8002252 <TIM_Base_SetConfig+0xb2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a29      	ldr	r2, [pc, #164]	; (80022f4 <TIM_Base_SetConfig+0x154>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d108      	bne.n	8002264 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	4313      	orrs	r3, r2
 8002262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	4313      	orrs	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a10      	ldr	r2, [pc, #64]	; (80022cc <TIM_Base_SetConfig+0x12c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d003      	beq.n	8002298 <TIM_Base_SetConfig+0xf8>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a12      	ldr	r2, [pc, #72]	; (80022dc <TIM_Base_SetConfig+0x13c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d103      	bne.n	80022a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d105      	bne.n	80022be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	f023 0201 	bic.w	r2, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	611a      	str	r2, [r3, #16]
  }
}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40010000 	.word	0x40010000
 80022d0:	40000400 	.word	0x40000400
 80022d4:	40000800 	.word	0x40000800
 80022d8:	40000c00 	.word	0x40000c00
 80022dc:	40010400 	.word	0x40010400
 80022e0:	40014000 	.word	0x40014000
 80022e4:	40014400 	.word	0x40014400
 80022e8:	40014800 	.word	0x40014800
 80022ec:	40001800 	.word	0x40001800
 80022f0:	40001c00 	.word	0x40001c00
 80022f4:	40002000 	.word	0x40002000

080022f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e042      	b.n	80023b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d106      	bne.n	800234c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7fe fc32 	bl	8000bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2224      	movs	r2, #36	; 0x24
 8002350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002362:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f82b 	bl	80023c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695a      	ldr	r2, [r3, #20]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002388:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002398:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2220      	movs	r2, #32
 80023a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2220      	movs	r2, #32
 80023ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023c4:	b0c0      	sub	sp, #256	; 0x100
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80023d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023dc:	68d9      	ldr	r1, [r3, #12]
 80023de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	ea40 0301 	orr.w	r3, r0, r1
 80023e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	431a      	orrs	r2, r3
 8002400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	4313      	orrs	r3, r2
 8002408:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800240c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002418:	f021 010c 	bic.w	r1, r1, #12
 800241c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002426:	430b      	orrs	r3, r1
 8002428:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800242a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800243a:	6999      	ldr	r1, [r3, #24]
 800243c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	ea40 0301 	orr.w	r3, r0, r1
 8002446:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	4b8f      	ldr	r3, [pc, #572]	; (800268c <UART_SetConfig+0x2cc>)
 8002450:	429a      	cmp	r2, r3
 8002452:	d005      	beq.n	8002460 <UART_SetConfig+0xa0>
 8002454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	4b8d      	ldr	r3, [pc, #564]	; (8002690 <UART_SetConfig+0x2d0>)
 800245c:	429a      	cmp	r2, r3
 800245e:	d104      	bne.n	800246a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002460:	f7ff fc76 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 8002464:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002468:	e003      	b.n	8002472 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800246a:	f7ff fc5d 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 800246e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800247c:	f040 810c 	bne.w	8002698 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002480:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002484:	2200      	movs	r2, #0
 8002486:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800248a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800248e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002492:	4622      	mov	r2, r4
 8002494:	462b      	mov	r3, r5
 8002496:	1891      	adds	r1, r2, r2
 8002498:	65b9      	str	r1, [r7, #88]	; 0x58
 800249a:	415b      	adcs	r3, r3
 800249c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800249e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80024a2:	4621      	mov	r1, r4
 80024a4:	eb12 0801 	adds.w	r8, r2, r1
 80024a8:	4629      	mov	r1, r5
 80024aa:	eb43 0901 	adc.w	r9, r3, r1
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	f04f 0300 	mov.w	r3, #0
 80024b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024c2:	4690      	mov	r8, r2
 80024c4:	4699      	mov	r9, r3
 80024c6:	4623      	mov	r3, r4
 80024c8:	eb18 0303 	adds.w	r3, r8, r3
 80024cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80024d0:	462b      	mov	r3, r5
 80024d2:	eb49 0303 	adc.w	r3, r9, r3
 80024d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80024da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80024e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80024ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80024ee:	460b      	mov	r3, r1
 80024f0:	18db      	adds	r3, r3, r3
 80024f2:	653b      	str	r3, [r7, #80]	; 0x50
 80024f4:	4613      	mov	r3, r2
 80024f6:	eb42 0303 	adc.w	r3, r2, r3
 80024fa:	657b      	str	r3, [r7, #84]	; 0x54
 80024fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002500:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002504:	f7fd ff04 	bl	8000310 <__aeabi_uldivmod>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4b61      	ldr	r3, [pc, #388]	; (8002694 <UART_SetConfig+0x2d4>)
 800250e:	fba3 2302 	umull	r2, r3, r3, r2
 8002512:	095b      	lsrs	r3, r3, #5
 8002514:	011c      	lsls	r4, r3, #4
 8002516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800251a:	2200      	movs	r2, #0
 800251c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002520:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002524:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002528:	4642      	mov	r2, r8
 800252a:	464b      	mov	r3, r9
 800252c:	1891      	adds	r1, r2, r2
 800252e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002530:	415b      	adcs	r3, r3
 8002532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002534:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002538:	4641      	mov	r1, r8
 800253a:	eb12 0a01 	adds.w	sl, r2, r1
 800253e:	4649      	mov	r1, r9
 8002540:	eb43 0b01 	adc.w	fp, r3, r1
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002550:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002554:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002558:	4692      	mov	sl, r2
 800255a:	469b      	mov	fp, r3
 800255c:	4643      	mov	r3, r8
 800255e:	eb1a 0303 	adds.w	r3, sl, r3
 8002562:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002566:	464b      	mov	r3, r9
 8002568:	eb4b 0303 	adc.w	r3, fp, r3
 800256c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800257c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002580:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002584:	460b      	mov	r3, r1
 8002586:	18db      	adds	r3, r3, r3
 8002588:	643b      	str	r3, [r7, #64]	; 0x40
 800258a:	4613      	mov	r3, r2
 800258c:	eb42 0303 	adc.w	r3, r2, r3
 8002590:	647b      	str	r3, [r7, #68]	; 0x44
 8002592:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002596:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800259a:	f7fd feb9 	bl	8000310 <__aeabi_uldivmod>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	4611      	mov	r1, r2
 80025a4:	4b3b      	ldr	r3, [pc, #236]	; (8002694 <UART_SetConfig+0x2d4>)
 80025a6:	fba3 2301 	umull	r2, r3, r3, r1
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	2264      	movs	r2, #100	; 0x64
 80025ae:	fb02 f303 	mul.w	r3, r2, r3
 80025b2:	1acb      	subs	r3, r1, r3
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80025ba:	4b36      	ldr	r3, [pc, #216]	; (8002694 <UART_SetConfig+0x2d4>)
 80025bc:	fba3 2302 	umull	r2, r3, r3, r2
 80025c0:	095b      	lsrs	r3, r3, #5
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025c8:	441c      	add	r4, r3
 80025ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025ce:	2200      	movs	r2, #0
 80025d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80025d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80025dc:	4642      	mov	r2, r8
 80025de:	464b      	mov	r3, r9
 80025e0:	1891      	adds	r1, r2, r2
 80025e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80025e4:	415b      	adcs	r3, r3
 80025e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025ec:	4641      	mov	r1, r8
 80025ee:	1851      	adds	r1, r2, r1
 80025f0:	6339      	str	r1, [r7, #48]	; 0x30
 80025f2:	4649      	mov	r1, r9
 80025f4:	414b      	adcs	r3, r1
 80025f6:	637b      	str	r3, [r7, #52]	; 0x34
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002604:	4659      	mov	r1, fp
 8002606:	00cb      	lsls	r3, r1, #3
 8002608:	4651      	mov	r1, sl
 800260a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800260e:	4651      	mov	r1, sl
 8002610:	00ca      	lsls	r2, r1, #3
 8002612:	4610      	mov	r0, r2
 8002614:	4619      	mov	r1, r3
 8002616:	4603      	mov	r3, r0
 8002618:	4642      	mov	r2, r8
 800261a:	189b      	adds	r3, r3, r2
 800261c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002620:	464b      	mov	r3, r9
 8002622:	460a      	mov	r2, r1
 8002624:	eb42 0303 	adc.w	r3, r2, r3
 8002628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800262c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002638:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800263c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002640:	460b      	mov	r3, r1
 8002642:	18db      	adds	r3, r3, r3
 8002644:	62bb      	str	r3, [r7, #40]	; 0x28
 8002646:	4613      	mov	r3, r2
 8002648:	eb42 0303 	adc.w	r3, r2, r3
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800264e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002652:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002656:	f7fd fe5b 	bl	8000310 <__aeabi_uldivmod>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4b0d      	ldr	r3, [pc, #52]	; (8002694 <UART_SetConfig+0x2d4>)
 8002660:	fba3 1302 	umull	r1, r3, r3, r2
 8002664:	095b      	lsrs	r3, r3, #5
 8002666:	2164      	movs	r1, #100	; 0x64
 8002668:	fb01 f303 	mul.w	r3, r1, r3
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	3332      	adds	r3, #50	; 0x32
 8002672:	4a08      	ldr	r2, [pc, #32]	; (8002694 <UART_SetConfig+0x2d4>)
 8002674:	fba2 2303 	umull	r2, r3, r2, r3
 8002678:	095b      	lsrs	r3, r3, #5
 800267a:	f003 0207 	and.w	r2, r3, #7
 800267e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4422      	add	r2, r4
 8002686:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002688:	e106      	b.n	8002898 <UART_SetConfig+0x4d8>
 800268a:	bf00      	nop
 800268c:	40011000 	.word	0x40011000
 8002690:	40011400 	.word	0x40011400
 8002694:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800269c:	2200      	movs	r2, #0
 800269e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80026a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80026a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80026aa:	4642      	mov	r2, r8
 80026ac:	464b      	mov	r3, r9
 80026ae:	1891      	adds	r1, r2, r2
 80026b0:	6239      	str	r1, [r7, #32]
 80026b2:	415b      	adcs	r3, r3
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
 80026b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026ba:	4641      	mov	r1, r8
 80026bc:	1854      	adds	r4, r2, r1
 80026be:	4649      	mov	r1, r9
 80026c0:	eb43 0501 	adc.w	r5, r3, r1
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	00eb      	lsls	r3, r5, #3
 80026ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026d2:	00e2      	lsls	r2, r4, #3
 80026d4:	4614      	mov	r4, r2
 80026d6:	461d      	mov	r5, r3
 80026d8:	4643      	mov	r3, r8
 80026da:	18e3      	adds	r3, r4, r3
 80026dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80026e0:	464b      	mov	r3, r9
 80026e2:	eb45 0303 	adc.w	r3, r5, r3
 80026e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80026ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80026f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002706:	4629      	mov	r1, r5
 8002708:	008b      	lsls	r3, r1, #2
 800270a:	4621      	mov	r1, r4
 800270c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002710:	4621      	mov	r1, r4
 8002712:	008a      	lsls	r2, r1, #2
 8002714:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002718:	f7fd fdfa 	bl	8000310 <__aeabi_uldivmod>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4b60      	ldr	r3, [pc, #384]	; (80028a4 <UART_SetConfig+0x4e4>)
 8002722:	fba3 2302 	umull	r2, r3, r3, r2
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	011c      	lsls	r4, r3, #4
 800272a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800272e:	2200      	movs	r2, #0
 8002730:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002734:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002738:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800273c:	4642      	mov	r2, r8
 800273e:	464b      	mov	r3, r9
 8002740:	1891      	adds	r1, r2, r2
 8002742:	61b9      	str	r1, [r7, #24]
 8002744:	415b      	adcs	r3, r3
 8002746:	61fb      	str	r3, [r7, #28]
 8002748:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800274c:	4641      	mov	r1, r8
 800274e:	1851      	adds	r1, r2, r1
 8002750:	6139      	str	r1, [r7, #16]
 8002752:	4649      	mov	r1, r9
 8002754:	414b      	adcs	r3, r1
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002764:	4659      	mov	r1, fp
 8002766:	00cb      	lsls	r3, r1, #3
 8002768:	4651      	mov	r1, sl
 800276a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800276e:	4651      	mov	r1, sl
 8002770:	00ca      	lsls	r2, r1, #3
 8002772:	4610      	mov	r0, r2
 8002774:	4619      	mov	r1, r3
 8002776:	4603      	mov	r3, r0
 8002778:	4642      	mov	r2, r8
 800277a:	189b      	adds	r3, r3, r2
 800277c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002780:	464b      	mov	r3, r9
 8002782:	460a      	mov	r2, r1
 8002784:	eb42 0303 	adc.w	r3, r2, r3
 8002788:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800278c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	67bb      	str	r3, [r7, #120]	; 0x78
 8002796:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80027a4:	4649      	mov	r1, r9
 80027a6:	008b      	lsls	r3, r1, #2
 80027a8:	4641      	mov	r1, r8
 80027aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027ae:	4641      	mov	r1, r8
 80027b0:	008a      	lsls	r2, r1, #2
 80027b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80027b6:	f7fd fdab 	bl	8000310 <__aeabi_uldivmod>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4611      	mov	r1, r2
 80027c0:	4b38      	ldr	r3, [pc, #224]	; (80028a4 <UART_SetConfig+0x4e4>)
 80027c2:	fba3 2301 	umull	r2, r3, r3, r1
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	2264      	movs	r2, #100	; 0x64
 80027ca:	fb02 f303 	mul.w	r3, r2, r3
 80027ce:	1acb      	subs	r3, r1, r3
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	3332      	adds	r3, #50	; 0x32
 80027d4:	4a33      	ldr	r2, [pc, #204]	; (80028a4 <UART_SetConfig+0x4e4>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027e0:	441c      	add	r4, r3
 80027e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027e6:	2200      	movs	r2, #0
 80027e8:	673b      	str	r3, [r7, #112]	; 0x70
 80027ea:	677a      	str	r2, [r7, #116]	; 0x74
 80027ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80027f0:	4642      	mov	r2, r8
 80027f2:	464b      	mov	r3, r9
 80027f4:	1891      	adds	r1, r2, r2
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	415b      	adcs	r3, r3
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002800:	4641      	mov	r1, r8
 8002802:	1851      	adds	r1, r2, r1
 8002804:	6039      	str	r1, [r7, #0]
 8002806:	4649      	mov	r1, r9
 8002808:	414b      	adcs	r3, r1
 800280a:	607b      	str	r3, [r7, #4]
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002818:	4659      	mov	r1, fp
 800281a:	00cb      	lsls	r3, r1, #3
 800281c:	4651      	mov	r1, sl
 800281e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002822:	4651      	mov	r1, sl
 8002824:	00ca      	lsls	r2, r1, #3
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	4603      	mov	r3, r0
 800282c:	4642      	mov	r2, r8
 800282e:	189b      	adds	r3, r3, r2
 8002830:	66bb      	str	r3, [r7, #104]	; 0x68
 8002832:	464b      	mov	r3, r9
 8002834:	460a      	mov	r2, r1
 8002836:	eb42 0303 	adc.w	r3, r2, r3
 800283a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800283c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	663b      	str	r3, [r7, #96]	; 0x60
 8002846:	667a      	str	r2, [r7, #100]	; 0x64
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002854:	4649      	mov	r1, r9
 8002856:	008b      	lsls	r3, r1, #2
 8002858:	4641      	mov	r1, r8
 800285a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800285e:	4641      	mov	r1, r8
 8002860:	008a      	lsls	r2, r1, #2
 8002862:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002866:	f7fd fd53 	bl	8000310 <__aeabi_uldivmod>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <UART_SetConfig+0x4e4>)
 8002870:	fba3 1302 	umull	r1, r3, r3, r2
 8002874:	095b      	lsrs	r3, r3, #5
 8002876:	2164      	movs	r1, #100	; 0x64
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	3332      	adds	r3, #50	; 0x32
 8002882:	4a08      	ldr	r2, [pc, #32]	; (80028a4 <UART_SetConfig+0x4e4>)
 8002884:	fba2 2303 	umull	r2, r3, r2, r3
 8002888:	095b      	lsrs	r3, r3, #5
 800288a:	f003 020f 	and.w	r2, r3, #15
 800288e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4422      	add	r2, r4
 8002896:	609a      	str	r2, [r3, #8]
}
 8002898:	bf00      	nop
 800289a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800289e:	46bd      	mov	sp, r7
 80028a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028a4:	51eb851f 	.word	0x51eb851f

080028a8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f103 0208 	add.w	r2, r3, #8
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f04f 32ff 	mov.w	r2, #4294967295
 80028c0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f103 0208 	add.w	r2, r3, #8
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f103 0208 	add.w	r2, r3, #8
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002902:	b480      	push	{r7}
 8002904:	b085      	sub	sp, #20
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	601a      	str	r2, [r3, #0]
}
 800293e:	bf00      	nop
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800294a:	b480      	push	{r7}
 800294c:	b085      	sub	sp, #20
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002960:	d103      	bne.n	800296a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	e00c      	b.n	8002984 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3308      	adds	r3, #8
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	e002      	b.n	8002978 <vListInsert+0x2e>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	429a      	cmp	r2, r3
 8002982:	d2f6      	bcs.n	8002972 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	601a      	str	r2, [r3, #0]
}
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6892      	ldr	r2, [r2, #8]
 80029d2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6852      	ldr	r2, [r2, #4]
 80029dc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d103      	bne.n	80029f0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	1e5a      	subs	r2, r3, #1
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10a      	bne.n	8002a3a <xQueueGenericReset+0x2a>
        __asm volatile
 8002a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a28:	f383 8811 	msr	BASEPRI, r3
 8002a2c:	f3bf 8f6f 	isb	sy
 8002a30:	f3bf 8f4f 	dsb	sy
 8002a34:	60bb      	str	r3, [r7, #8]
    }
 8002a36:	bf00      	nop
 8002a38:	e7fe      	b.n	8002a38 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002a3a:	f002 f853 	bl	8004ae4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a46:	68f9      	ldr	r1, [r7, #12]
 8002a48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	441a      	add	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	68f9      	ldr	r1, [r7, #12]
 8002a6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	441a      	add	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	22ff      	movs	r2, #255	; 0xff
 8002a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	22ff      	movs	r2, #255	; 0xff
 8002a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d109      	bne.n	8002aa4 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00f      	beq.n	8002ab8 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	3310      	adds	r3, #16
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f001 f8b3 	bl	8003c08 <xTaskRemoveFromEventList>
 8002aa2:	e009      	b.n	8002ab8 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	3310      	adds	r3, #16
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff fefd 	bl	80028a8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	3324      	adds	r3, #36	; 0x24
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fef8 	bl	80028a8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002ab8:	f002 f844 	bl	8004b44 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002abc:	2301      	movs	r3, #1
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b08c      	sub	sp, #48	; 0x30
 8002aca:	af02      	add	r7, sp, #8
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10a      	bne.n	8002af0 <xQueueGenericCreate+0x2a>
        __asm volatile
 8002ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ade:	f383 8811 	msr	BASEPRI, r3
 8002ae2:	f3bf 8f6f 	isb	sy
 8002ae6:	f3bf 8f4f 	dsb	sy
 8002aea:	61bb      	str	r3, [r7, #24]
    }
 8002aec:	bf00      	nop
 8002aee:	e7fe      	b.n	8002aee <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	fb02 f303 	mul.w	r3, r2, r3
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d006      	beq.n	8002b0e <xQueueGenericCreate+0x48>
 8002b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d101      	bne.n	8002b12 <xQueueGenericCreate+0x4c>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <xQueueGenericCreate+0x4e>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10a      	bne.n	8002b2e <xQueueGenericCreate+0x68>
        __asm volatile
 8002b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1c:	f383 8811 	msr	BASEPRI, r3
 8002b20:	f3bf 8f6f 	isb	sy
 8002b24:	f3bf 8f4f 	dsb	sy
 8002b28:	617b      	str	r3, [r7, #20]
    }
 8002b2a:	bf00      	nop
 8002b2c:	e7fe      	b.n	8002b2c <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002b34:	d90a      	bls.n	8002b4c <xQueueGenericCreate+0x86>
        __asm volatile
 8002b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3a:	f383 8811 	msr	BASEPRI, r3
 8002b3e:	f3bf 8f6f 	isb	sy
 8002b42:	f3bf 8f4f 	dsb	sy
 8002b46:	613b      	str	r3, [r7, #16]
    }
 8002b48:	bf00      	nop
 8002b4a:	e7fe      	b.n	8002b4a <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	3350      	adds	r3, #80	; 0x50
 8002b50:	4618      	mov	r0, r3
 8002b52:	f002 f8f3 	bl	8004d3c <pvPortMalloc>
 8002b56:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00d      	beq.n	8002b7a <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3350      	adds	r3, #80	; 0x50
 8002b66:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b68:	79fa      	ldrb	r2, [r7, #7]
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	69fa      	ldr	r2, [r7, #28]
 8002b72:	68b9      	ldr	r1, [r7, #8]
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f805 	bl	8002b84 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
    }
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3728      	adds	r7, #40	; 0x28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d103      	bne.n	8002ba0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	e002      	b.n	8002ba6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	69b8      	ldr	r0, [r7, #24]
 8002bb6:	f7ff ff2b 	bl	8002a10 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	68f9      	ldr	r1, [r7, #12]
 8002bc8:	2073      	movs	r0, #115	; 0x73
 8002bca:	f004 f853 	bl	8006c74 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b090      	sub	sp, #64	; 0x40
 8002bdc:	af02      	add	r7, sp, #8
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
 8002be4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002be6:	2300      	movs	r3, #0
 8002be8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10a      	bne.n	8002c0a <xQueueGenericSend+0x32>
        __asm volatile
 8002bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf8:	f383 8811 	msr	BASEPRI, r3
 8002bfc:	f3bf 8f6f 	isb	sy
 8002c00:	f3bf 8f4f 	dsb	sy
 8002c04:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002c06:	bf00      	nop
 8002c08:	e7fe      	b.n	8002c08 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d103      	bne.n	8002c18 <xQueueGenericSend+0x40>
 8002c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <xQueueGenericSend+0x44>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <xQueueGenericSend+0x46>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10a      	bne.n	8002c38 <xQueueGenericSend+0x60>
        __asm volatile
 8002c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c26:	f383 8811 	msr	BASEPRI, r3
 8002c2a:	f3bf 8f6f 	isb	sy
 8002c2e:	f3bf 8f4f 	dsb	sy
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002c34:	bf00      	nop
 8002c36:	e7fe      	b.n	8002c36 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d103      	bne.n	8002c46 <xQueueGenericSend+0x6e>
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <xQueueGenericSend+0x72>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <xQueueGenericSend+0x74>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10a      	bne.n	8002c66 <xQueueGenericSend+0x8e>
        __asm volatile
 8002c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c54:	f383 8811 	msr	BASEPRI, r3
 8002c58:	f3bf 8f6f 	isb	sy
 8002c5c:	f3bf 8f4f 	dsb	sy
 8002c60:	623b      	str	r3, [r7, #32]
    }
 8002c62:	bf00      	nop
 8002c64:	e7fe      	b.n	8002c64 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c66:	f001 f969 	bl	8003f3c <xTaskGetSchedulerState>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d102      	bne.n	8002c76 <xQueueGenericSend+0x9e>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <xQueueGenericSend+0xa2>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <xQueueGenericSend+0xa4>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10a      	bne.n	8002c96 <xQueueGenericSend+0xbe>
        __asm volatile
 8002c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c84:	f383 8811 	msr	BASEPRI, r3
 8002c88:	f3bf 8f6f 	isb	sy
 8002c8c:	f3bf 8f4f 	dsb	sy
 8002c90:	61fb      	str	r3, [r7, #28]
    }
 8002c92:	bf00      	nop
 8002c94:	e7fe      	b.n	8002c94 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002c96:	f001 ff25 	bl	8004ae4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d302      	bcc.n	8002cac <xQueueGenericSend+0xd4>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d11f      	bne.n	8002cec <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 8002cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f004 fd6e 	bl	8007790 <SEGGER_SYSVIEW_ShrinkId>
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4601      	mov	r1, r0
 8002cc0:	205a      	movs	r0, #90	; 0x5a
 8002cc2:	f004 f84d 	bl	8006d60 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ccc:	f000 fa56 	bl	800317c <prvCopyDataToQueue>
 8002cd0:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d004      	beq.n	8002ce4 <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cdc:	3324      	adds	r3, #36	; 0x24
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 ff92 	bl	8003c08 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002ce4:	f001 ff2e 	bl	8004b44 <vPortExitCritical>
                return pdPASS;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e07d      	b.n	8002de8 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d110      	bne.n	8002d14 <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002cf2:	f001 ff27 	bl	8004b44 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f004 fd49 	bl	8007790 <SEGGER_SYSVIEW_ShrinkId>
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	460b      	mov	r3, r1
 8002d08:	4601      	mov	r1, r0
 8002d0a:	205a      	movs	r0, #90	; 0x5a
 8002d0c:	f004 f828 	bl	8006d60 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e069      	b.n	8002de8 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002d1a:	f107 0314 	add.w	r3, r7, #20
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 ffd8 	bl	8003cd4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002d24:	2301      	movs	r3, #1
 8002d26:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002d28:	f001 ff0c 	bl	8004b44 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002d2c:	f000 fd54 	bl	80037d8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002d30:	f001 fed8 	bl	8004ae4 <vPortEnterCritical>
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d3a:	b25b      	sxtb	r3, r3
 8002d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d40:	d103      	bne.n	8002d4a <xQueueGenericSend+0x172>
 8002d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d50:	b25b      	sxtb	r3, r3
 8002d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d56:	d103      	bne.n	8002d60 <xQueueGenericSend+0x188>
 8002d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d60:	f001 fef0 	bl	8004b44 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d64:	1d3a      	adds	r2, r7, #4
 8002d66:	f107 0314 	add.w	r3, r7, #20
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 ffc7 	bl	8003d00 <xTaskCheckForTimeOut>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d124      	bne.n	8002dc2 <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d7a:	f000 faf7 	bl	800336c <prvIsQueueFull>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d018      	beq.n	8002db6 <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d86:	3310      	adds	r3, #16
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 fee9 	bl	8003b64 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002d92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d94:	f000 fa82 	bl	800329c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002d98:	f000 fd2c 	bl	80037f4 <xTaskResumeAll>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f47f af79 	bne.w	8002c96 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002da4:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <xQueueGenericSend+0x218>)
 8002da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	e76f      	b.n	8002c96 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002db6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002db8:	f000 fa70 	bl	800329c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002dbc:	f000 fd1a 	bl	80037f4 <xTaskResumeAll>
 8002dc0:	e769      	b.n	8002c96 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002dc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dc4:	f000 fa6a 	bl	800329c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002dc8:	f000 fd14 	bl	80037f4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f004 fcde 	bl	8007790 <SEGGER_SYSVIEW_ShrinkId>
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4601      	mov	r1, r0
 8002de0:	205a      	movs	r0, #90	; 0x5a
 8002de2:	f003 ffbd 	bl	8006d60 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002de6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3738      	adds	r7, #56	; 0x38
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	e000ed04 	.word	0xe000ed04

08002df4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b090      	sub	sp, #64	; 0x40
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10a      	bne.n	8002e22 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e10:	f383 8811 	msr	BASEPRI, r3
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002e1e:	bf00      	nop
 8002e20:	e7fe      	b.n	8002e20 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d103      	bne.n	8002e30 <xQueueGenericSendFromISR+0x3c>
 8002e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <xQueueGenericSendFromISR+0x40>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <xQueueGenericSendFromISR+0x42>
 8002e34:	2300      	movs	r3, #0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10a      	bne.n	8002e50 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3e:	f383 8811 	msr	BASEPRI, r3
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002e4c:	bf00      	nop
 8002e4e:	e7fe      	b.n	8002e4e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d103      	bne.n	8002e5e <xQueueGenericSendFromISR+0x6a>
 8002e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <xQueueGenericSendFromISR+0x6e>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <xQueueGenericSendFromISR+0x70>
 8002e62:	2300      	movs	r3, #0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10a      	bne.n	8002e7e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6c:	f383 8811 	msr	BASEPRI, r3
 8002e70:	f3bf 8f6f 	isb	sy
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	623b      	str	r3, [r7, #32]
    }
 8002e7a:	bf00      	nop
 8002e7c:	e7fe      	b.n	8002e7c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e7e:	f001 ff1d 	bl	8004cbc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002e82:	f3ef 8211 	mrs	r2, BASEPRI
 8002e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8a:	f383 8811 	msr	BASEPRI, r3
 8002e8e:	f3bf 8f6f 	isb	sy
 8002e92:	f3bf 8f4f 	dsb	sy
 8002e96:	61fa      	str	r2, [r7, #28]
 8002e98:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002e9a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e9c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d302      	bcc.n	8002eb0 <xQueueGenericSendFromISR+0xbc>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d148      	bne.n	8002f42 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f004 fc64 	bl	8007790 <SEGGER_SYSVIEW_ShrinkId>
 8002ec8:	4601      	mov	r1, r0
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2060      	movs	r0, #96	; 0x60
 8002ed0:	f003 fe76 	bl	8006bc0 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	68b9      	ldr	r1, [r7, #8]
 8002ed8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002eda:	f000 f94f 	bl	800317c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002ede:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee6:	d112      	bne.n	8002f0e <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d025      	beq.n	8002f3c <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef2:	3324      	adds	r3, #36	; 0x24
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 fe87 	bl	8003c08 <xTaskRemoveFromEventList>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d01d      	beq.n	8002f3c <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d01a      	beq.n	8002f3c <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	e016      	b.n	8002f3c <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002f0e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002f12:	2b7f      	cmp	r3, #127	; 0x7f
 8002f14:	d10a      	bne.n	8002f2c <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1a:	f383 8811 	msr	BASEPRI, r3
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	f3bf 8f4f 	dsb	sy
 8002f26:	617b      	str	r3, [r7, #20]
    }
 8002f28:	bf00      	nop
 8002f2a:	e7fe      	b.n	8002f2a <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f30:	3301      	adds	r3, #1
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	b25a      	sxtb	r2, r3
 8002f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002f40:	e00b      	b.n	8002f5a <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f44:	4618      	mov	r0, r3
 8002f46:	f004 fc23 	bl	8007790 <SEGGER_SYSVIEW_ShrinkId>
 8002f4a:	4601      	mov	r1, r0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	2060      	movs	r0, #96	; 0x60
 8002f52:	f003 fe35 	bl	8006bc0 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f5c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002f64:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3740      	adds	r7, #64	; 0x40
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b08f      	sub	sp, #60	; 0x3c
 8002f74:	af02      	add	r7, sp, #8
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10a      	bne.n	8002fa0 <xQueueReceive+0x30>
        __asm volatile
 8002f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8e:	f383 8811 	msr	BASEPRI, r3
 8002f92:	f3bf 8f6f 	isb	sy
 8002f96:	f3bf 8f4f 	dsb	sy
 8002f9a:	623b      	str	r3, [r7, #32]
    }
 8002f9c:	bf00      	nop
 8002f9e:	e7fe      	b.n	8002f9e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d103      	bne.n	8002fae <xQueueReceive+0x3e>
 8002fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <xQueueReceive+0x42>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <xQueueReceive+0x44>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10a      	bne.n	8002fce <xQueueReceive+0x5e>
        __asm volatile
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	61fb      	str	r3, [r7, #28]
    }
 8002fca:	bf00      	nop
 8002fcc:	e7fe      	b.n	8002fcc <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fce:	f000 ffb5 	bl	8003f3c <xTaskGetSchedulerState>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <xQueueReceive+0x6e>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <xQueueReceive+0x72>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <xQueueReceive+0x74>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10a      	bne.n	8002ffe <xQueueReceive+0x8e>
        __asm volatile
 8002fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fec:	f383 8811 	msr	BASEPRI, r3
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	61bb      	str	r3, [r7, #24]
    }
 8002ffa:	bf00      	nop
 8002ffc:	e7fe      	b.n	8002ffc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002ffe:	f001 fd71 	bl	8004ae4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003006:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	2b00      	cmp	r3, #0
 800300c:	d024      	beq.n	8003058 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800300e:	68b9      	ldr	r1, [r7, #8]
 8003010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003012:	f000 f91d 	bl	8003250 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8003016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003018:	4618      	mov	r0, r3
 800301a:	f004 fbb9 	bl	8007790 <SEGGER_SYSVIEW_ShrinkId>
 800301e:	4604      	mov	r4, r0
 8003020:	2000      	movs	r0, #0
 8003022:	f004 fbb5 	bl	8007790 <SEGGER_SYSVIEW_ShrinkId>
 8003026:	4602      	mov	r2, r0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2101      	movs	r1, #1
 800302c:	9100      	str	r1, [sp, #0]
 800302e:	4621      	mov	r1, r4
 8003030:	205c      	movs	r0, #92	; 0x5c
 8003032:	f003 fe95 	bl	8006d60 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	1e5a      	subs	r2, r3, #1
 800303a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800303e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d004      	beq.n	8003050 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	3310      	adds	r3, #16
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fddc 	bl	8003c08 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003050:	f001 fd78 	bl	8004b44 <vPortExitCritical>
                return pdPASS;
 8003054:	2301      	movs	r3, #1
 8003056:	e08a      	b.n	800316e <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d113      	bne.n	8003086 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800305e:	f001 fd71 	bl	8004b44 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003064:	4618      	mov	r0, r3
 8003066:	f004 fb93 	bl	8007790 <SEGGER_SYSVIEW_ShrinkId>
 800306a:	4604      	mov	r4, r0
 800306c:	2000      	movs	r0, #0
 800306e:	f004 fb8f 	bl	8007790 <SEGGER_SYSVIEW_ShrinkId>
 8003072:	4602      	mov	r2, r0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2101      	movs	r1, #1
 8003078:	9100      	str	r1, [sp, #0]
 800307a:	4621      	mov	r1, r4
 800307c:	205c      	movs	r0, #92	; 0x5c
 800307e:	f003 fe6f 	bl	8006d60 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003082:	2300      	movs	r3, #0
 8003084:	e073      	b.n	800316e <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003088:	2b00      	cmp	r3, #0
 800308a:	d106      	bne.n	800309a <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800308c:	f107 0310 	add.w	r3, r7, #16
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fe1f 	bl	8003cd4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003096:	2301      	movs	r3, #1
 8003098:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800309a:	f001 fd53 	bl	8004b44 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800309e:	f000 fb9b 	bl	80037d8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80030a2:	f001 fd1f 	bl	8004ae4 <vPortEnterCritical>
 80030a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030ac:	b25b      	sxtb	r3, r3
 80030ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b2:	d103      	bne.n	80030bc <xQueueReceive+0x14c>
 80030b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030c2:	b25b      	sxtb	r3, r3
 80030c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c8:	d103      	bne.n	80030d2 <xQueueReceive+0x162>
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030d2:	f001 fd37 	bl	8004b44 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030d6:	1d3a      	adds	r2, r7, #4
 80030d8:	f107 0310 	add.w	r3, r7, #16
 80030dc:	4611      	mov	r1, r2
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fe0e 	bl	8003d00 <xTaskCheckForTimeOut>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d124      	bne.n	8003134 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ec:	f000 f928 	bl	8003340 <prvIsQueueEmpty>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d018      	beq.n	8003128 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f8:	3324      	adds	r3, #36	; 0x24
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	4611      	mov	r1, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fd30 	bl	8003b64 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003106:	f000 f8c9 	bl	800329c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800310a:	f000 fb73 	bl	80037f4 <xTaskResumeAll>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	f47f af74 	bne.w	8002ffe <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003116:	4b18      	ldr	r3, [pc, #96]	; (8003178 <xQueueReceive+0x208>)
 8003118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	e76a      	b.n	8002ffe <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800312a:	f000 f8b7 	bl	800329c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800312e:	f000 fb61 	bl	80037f4 <xTaskResumeAll>
 8003132:	e764      	b.n	8002ffe <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003136:	f000 f8b1 	bl	800329c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800313a:	f000 fb5b 	bl	80037f4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800313e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003140:	f000 f8fe 	bl	8003340 <prvIsQueueEmpty>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	f43f af59 	beq.w	8002ffe <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800314c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314e:	4618      	mov	r0, r3
 8003150:	f004 fb1e 	bl	8007790 <SEGGER_SYSVIEW_ShrinkId>
 8003154:	4604      	mov	r4, r0
 8003156:	2000      	movs	r0, #0
 8003158:	f004 fb1a 	bl	8007790 <SEGGER_SYSVIEW_ShrinkId>
 800315c:	4602      	mov	r2, r0
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2101      	movs	r1, #1
 8003162:	9100      	str	r1, [sp, #0]
 8003164:	4621      	mov	r1, r4
 8003166:	205c      	movs	r0, #92	; 0x5c
 8003168:	f003 fdfa 	bl	8006d60 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800316c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800316e:	4618      	mov	r0, r3
 8003170:	3734      	adds	r7, #52	; 0x34
 8003172:	46bd      	mov	sp, r7
 8003174:	bd90      	pop	{r4, r7, pc}
 8003176:	bf00      	nop
 8003178:	e000ed04 	.word	0xe000ed04

0800317c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003190:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10d      	bne.n	80031b6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d14d      	bne.n	800323e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 fee6 	bl	8003f78 <xTaskPriorityDisinherit>
 80031ac:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	609a      	str	r2, [r3, #8]
 80031b4:	e043      	b.n	800323e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d119      	bne.n	80031f0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6858      	ldr	r0, [r3, #4]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	461a      	mov	r2, r3
 80031c6:	68b9      	ldr	r1, [r7, #8]
 80031c8:	f004 fe3d 	bl	8007e46 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	441a      	add	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d32b      	bcc.n	800323e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	e026      	b.n	800323e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	68d8      	ldr	r0, [r3, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	461a      	mov	r2, r3
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	f004 fe23 	bl	8007e46 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	425b      	negs	r3, r3
 800320a:	441a      	add	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d207      	bcs.n	800322c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	425b      	negs	r3, r3
 8003226:	441a      	add	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d105      	bne.n	800323e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	3b01      	subs	r3, #1
 800323c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003246:	697b      	ldr	r3, [r7, #20]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	2b00      	cmp	r3, #0
 8003260:	d018      	beq.n	8003294 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	441a      	add	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	429a      	cmp	r2, r3
 800327a:	d303      	bcc.n	8003284 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68d9      	ldr	r1, [r3, #12]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	461a      	mov	r2, r3
 800328e:	6838      	ldr	r0, [r7, #0]
 8003290:	f004 fdd9 	bl	8007e46 <memcpy>
    }
}
 8003294:	bf00      	nop
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80032a4:	f001 fc1e 	bl	8004ae4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032ae:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80032b0:	e011      	b.n	80032d6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d012      	beq.n	80032e0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3324      	adds	r3, #36	; 0x24
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fca2 	bl	8003c08 <xTaskRemoveFromEventList>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80032ca:	f000 fd7f 	bl	8003dcc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80032d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	dce9      	bgt.n	80032b2 <prvUnlockQueue+0x16>
 80032de:	e000      	b.n	80032e2 <prvUnlockQueue+0x46>
                        break;
 80032e0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	22ff      	movs	r2, #255	; 0xff
 80032e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80032ea:	f001 fc2b 	bl	8004b44 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80032ee:	f001 fbf9 	bl	8004ae4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032f8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80032fa:	e011      	b.n	8003320 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d012      	beq.n	800332a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3310      	adds	r3, #16
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fc7d 	bl	8003c08 <xTaskRemoveFromEventList>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003314:	f000 fd5a 	bl	8003dcc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003318:	7bbb      	ldrb	r3, [r7, #14]
 800331a:	3b01      	subs	r3, #1
 800331c:	b2db      	uxtb	r3, r3
 800331e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003320:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003324:	2b00      	cmp	r3, #0
 8003326:	dce9      	bgt.n	80032fc <prvUnlockQueue+0x60>
 8003328:	e000      	b.n	800332c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800332a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	22ff      	movs	r2, #255	; 0xff
 8003330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003334:	f001 fc06 	bl	8004b44 <vPortExitCritical>
}
 8003338:	bf00      	nop
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003348:	f001 fbcc 	bl	8004ae4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003350:	2b00      	cmp	r3, #0
 8003352:	d102      	bne.n	800335a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003354:	2301      	movs	r3, #1
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	e001      	b.n	800335e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800335e:	f001 fbf1 	bl	8004b44 <vPortExitCritical>

    return xReturn;
 8003362:	68fb      	ldr	r3, [r7, #12]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003374:	f001 fbb6 	bl	8004ae4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003380:	429a      	cmp	r2, r3
 8003382:	d102      	bne.n	800338a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003384:	2301      	movs	r3, #1
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	e001      	b.n	800338e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800338e:	f001 fbd9 	bl	8004b44 <vPortExitCritical>

    return xReturn;
 8003392:	68fb      	ldr	r3, [r7, #12]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	e01e      	b.n	80033ea <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80033ac:	4a13      	ldr	r2, [pc, #76]	; (80033fc <vQueueAddToRegistry+0x60>)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d115      	bne.n	80033e4 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80033b8:	4910      	ldr	r1, [pc, #64]	; (80033fc <vQueueAddToRegistry+0x60>)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80033c2:	4a0e      	ldr	r2, [pc, #56]	; (80033fc <vQueueAddToRegistry+0x60>)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f004 f9dd 	bl	8007790 <SEGGER_SYSVIEW_ShrinkId>
 80033d6:	4601      	mov	r1, r0
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	2071      	movs	r0, #113	; 0x71
 80033de:	f003 fbef 	bl	8006bc0 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 80033e2:	e006      	b.n	80033f2 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	3301      	adds	r3, #1
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2b07      	cmp	r3, #7
 80033ee:	d9dd      	bls.n	80033ac <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80033f0:	bf00      	nop
 80033f2:	bf00      	nop
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20000128 	.word	0x20000128

08003400 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003410:	f001 fb68 	bl	8004ae4 <vPortEnterCritical>
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800341a:	b25b      	sxtb	r3, r3
 800341c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003420:	d103      	bne.n	800342a <vQueueWaitForMessageRestricted+0x2a>
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003430:	b25b      	sxtb	r3, r3
 8003432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003436:	d103      	bne.n	8003440 <vQueueWaitForMessageRestricted+0x40>
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003440:	f001 fb80 	bl	8004b44 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003448:	2b00      	cmp	r3, #0
 800344a:	d106      	bne.n	800345a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	3324      	adds	r3, #36	; 0x24
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	68b9      	ldr	r1, [r7, #8]
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fba9 	bl	8003bac <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800345a:	6978      	ldr	r0, [r7, #20]
 800345c:	f7ff ff1e 	bl	800329c <prvUnlockQueue>
    }
 8003460:	bf00      	nop
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003468:	b580      	push	{r7, lr}
 800346a:	b08c      	sub	sp, #48	; 0x30
 800346c:	af04      	add	r7, sp, #16
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	603b      	str	r3, [r7, #0]
 8003474:	4613      	mov	r3, r2
 8003476:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4618      	mov	r0, r3
 800347e:	f001 fc5d 	bl	8004d3c <pvPortMalloc>
 8003482:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00e      	beq.n	80034a8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800348a:	2058      	movs	r0, #88	; 0x58
 800348c:	f001 fc56 	bl	8004d3c <pvPortMalloc>
 8003490:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	631a      	str	r2, [r3, #48]	; 0x30
 800349e:	e005      	b.n	80034ac <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80034a0:	6978      	ldr	r0, [r7, #20]
 80034a2:	f001 fd2b 	bl	8004efc <vPortFree>
 80034a6:	e001      	b.n	80034ac <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d013      	beq.n	80034da <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034b2:	88fa      	ldrh	r2, [r7, #6]
 80034b4:	2300      	movs	r3, #0
 80034b6:	9303      	str	r3, [sp, #12]
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	9302      	str	r3, [sp, #8]
 80034bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034be:	9301      	str	r3, [sp, #4]
 80034c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f80e 	bl	80034ea <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80034ce:	69f8      	ldr	r0, [r7, #28]
 80034d0:	f000 f8a2 	bl	8003618 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80034d4:	2301      	movs	r3, #1
 80034d6:	61bb      	str	r3, [r7, #24]
 80034d8:	e002      	b.n	80034e0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034da:	f04f 33ff 	mov.w	r3, #4294967295
 80034de:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80034e0:	69bb      	ldr	r3, [r7, #24]
    }
 80034e2:	4618      	mov	r0, r3
 80034e4:	3720      	adds	r7, #32
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b088      	sub	sp, #32
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	461a      	mov	r2, r3
 8003502:	21a5      	movs	r1, #165	; 0xa5
 8003504:	f004 fc3b 	bl	8007d7e <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003512:	3b01      	subs	r3, #1
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	f023 0307 	bic.w	r3, r3, #7
 8003520:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <prvInitialiseNewTask+0x58>
        __asm volatile
 800352c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	617b      	str	r3, [r7, #20]
    }
 800353e:	bf00      	nop
 8003540:	e7fe      	b.n	8003540 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01f      	beq.n	8003588 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003548:	2300      	movs	r3, #0
 800354a:	61fb      	str	r3, [r7, #28]
 800354c:	e012      	b.n	8003574 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	4413      	add	r3, r2
 8003554:	7819      	ldrb	r1, [r3, #0]
 8003556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	4413      	add	r3, r2
 800355c:	3334      	adds	r3, #52	; 0x34
 800355e:	460a      	mov	r2, r1
 8003560:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	4413      	add	r3, r2
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d006      	beq.n	800357c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	3301      	adds	r3, #1
 8003572:	61fb      	str	r3, [r7, #28]
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	2b09      	cmp	r3, #9
 8003578:	d9e9      	bls.n	800354e <prvInitialiseNewTask+0x64>
 800357a:	e000      	b.n	800357e <prvInitialiseNewTask+0x94>
            {
                break;
 800357c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003586:	e003      	b.n	8003590 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003592:	2b04      	cmp	r3, #4
 8003594:	d901      	bls.n	800359a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003596:	2304      	movs	r3, #4
 8003598:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800359a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800359e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80035a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035a4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	2200      	movs	r2, #0
 80035aa:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80035ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ae:	3304      	adds	r3, #4
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff f999 	bl	80028e8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80035b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b8:	3318      	adds	r3, #24
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff f994 	bl	80028e8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80035c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c8:	f1c3 0205 	rsb	r2, r3, #5
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035d4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80035d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d8:	3350      	adds	r3, #80	; 0x50
 80035da:	2204      	movs	r2, #4
 80035dc:	2100      	movs	r1, #0
 80035de:	4618      	mov	r0, r3
 80035e0:	f004 fbcd 	bl	8007d7e <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80035e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e6:	3354      	adds	r3, #84	; 0x54
 80035e8:	2201      	movs	r2, #1
 80035ea:	2100      	movs	r1, #0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f004 fbc6 	bl	8007d7e <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	68f9      	ldr	r1, [r7, #12]
 80035f6:	69b8      	ldr	r0, [r7, #24]
 80035f8:	f001 f8c8 	bl	800478c <pxPortInitialiseStack>
 80035fc:	4602      	mov	r2, r0
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800360c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800360e:	bf00      	nop
 8003610:	3720      	adds	r7, #32
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003618:	b5b0      	push	{r4, r5, r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af02      	add	r7, sp, #8
 800361e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003620:	f001 fa60 	bl	8004ae4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003624:	4b35      	ldr	r3, [pc, #212]	; (80036fc <prvAddNewTaskToReadyList+0xe4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3301      	adds	r3, #1
 800362a:	4a34      	ldr	r2, [pc, #208]	; (80036fc <prvAddNewTaskToReadyList+0xe4>)
 800362c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800362e:	4b34      	ldr	r3, [pc, #208]	; (8003700 <prvAddNewTaskToReadyList+0xe8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d109      	bne.n	800364a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003636:	4a32      	ldr	r2, [pc, #200]	; (8003700 <prvAddNewTaskToReadyList+0xe8>)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800363c:	4b2f      	ldr	r3, [pc, #188]	; (80036fc <prvAddNewTaskToReadyList+0xe4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d110      	bne.n	8003666 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003644:	f000 fbe0 	bl	8003e08 <prvInitialiseTaskLists>
 8003648:	e00d      	b.n	8003666 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800364a:	4b2e      	ldr	r3, [pc, #184]	; (8003704 <prvAddNewTaskToReadyList+0xec>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003652:	4b2b      	ldr	r3, [pc, #172]	; (8003700 <prvAddNewTaskToReadyList+0xe8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	429a      	cmp	r2, r3
 800365e:	d802      	bhi.n	8003666 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003660:	4a27      	ldr	r2, [pc, #156]	; (8003700 <prvAddNewTaskToReadyList+0xe8>)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003666:	4b28      	ldr	r3, [pc, #160]	; (8003708 <prvAddNewTaskToReadyList+0xf0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	3301      	adds	r3, #1
 800366c:	4a26      	ldr	r2, [pc, #152]	; (8003708 <prvAddNewTaskToReadyList+0xf0>)
 800366e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003670:	4b25      	ldr	r3, [pc, #148]	; (8003708 <prvAddNewTaskToReadyList+0xf0>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d016      	beq.n	80036ac <prvAddNewTaskToReadyList+0x94>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4618      	mov	r0, r3
 8003682:	f003 ff5f 	bl	8007544 <SEGGER_SYSVIEW_OnTaskCreate>
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	461d      	mov	r5, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	461c      	mov	r4, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	1ae3      	subs	r3, r4, r3
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	462b      	mov	r3, r5
 80036a8:	f001 fdf6 	bl	8005298 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f003 ffcc 	bl	800764c <SEGGER_SYSVIEW_OnTaskStartReady>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	2201      	movs	r2, #1
 80036ba:	409a      	lsls	r2, r3
 80036bc:	4b13      	ldr	r3, [pc, #76]	; (800370c <prvAddNewTaskToReadyList+0xf4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	4a12      	ldr	r2, [pc, #72]	; (800370c <prvAddNewTaskToReadyList+0xf4>)
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4a0f      	ldr	r2, [pc, #60]	; (8003710 <prvAddNewTaskToReadyList+0xf8>)
 80036d4:	441a      	add	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3304      	adds	r3, #4
 80036da:	4619      	mov	r1, r3
 80036dc:	4610      	mov	r0, r2
 80036de:	f7ff f910 	bl	8002902 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80036e2:	f001 fa2f 	bl	8004b44 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80036e6:	4b07      	ldr	r3, [pc, #28]	; (8003704 <prvAddNewTaskToReadyList+0xec>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80036ee:	4b04      	ldr	r3, [pc, #16]	; (8003700 <prvAddNewTaskToReadyList+0xe8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bdb0      	pop	{r4, r5, r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000240 	.word	0x20000240
 8003700:	20000168 	.word	0x20000168
 8003704:	2000024c 	.word	0x2000024c
 8003708:	2000025c 	.word	0x2000025c
 800370c:	20000248 	.word	0x20000248
 8003710:	2000016c 	.word	0x2000016c

08003714 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800371a:	4b27      	ldr	r3, [pc, #156]	; (80037b8 <vTaskStartScheduler+0xa4>)
 800371c:	9301      	str	r3, [sp, #4]
 800371e:	2300      	movs	r3, #0
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	2300      	movs	r3, #0
 8003724:	2282      	movs	r2, #130	; 0x82
 8003726:	4925      	ldr	r1, [pc, #148]	; (80037bc <vTaskStartScheduler+0xa8>)
 8003728:	4825      	ldr	r0, [pc, #148]	; (80037c0 <vTaskStartScheduler+0xac>)
 800372a:	f7ff fe9d 	bl	8003468 <xTaskCreate>
 800372e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d102      	bne.n	800373c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003736:	f000 fd17 	bl	8004168 <xTimerCreateTimerTask>
 800373a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d124      	bne.n	800378c <vTaskStartScheduler+0x78>
        __asm volatile
 8003742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	60bb      	str	r3, [r7, #8]
    }
 8003754:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003756:	4b1b      	ldr	r3, [pc, #108]	; (80037c4 <vTaskStartScheduler+0xb0>)
 8003758:	f04f 32ff 	mov.w	r2, #4294967295
 800375c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800375e:	4b1a      	ldr	r3, [pc, #104]	; (80037c8 <vTaskStartScheduler+0xb4>)
 8003760:	2201      	movs	r2, #1
 8003762:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003764:	4b19      	ldr	r3, [pc, #100]	; (80037cc <vTaskStartScheduler+0xb8>)
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800376a:	4b19      	ldr	r3, [pc, #100]	; (80037d0 <vTaskStartScheduler+0xbc>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <vTaskStartScheduler+0xa4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d102      	bne.n	800377c <vTaskStartScheduler+0x68>
 8003776:	f003 fec9 	bl	800750c <SEGGER_SYSVIEW_OnIdle>
 800377a:	e004      	b.n	8003786 <vTaskStartScheduler+0x72>
 800377c:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <vTaskStartScheduler+0xbc>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f003 ff21 	bl	80075c8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003786:	f001 f88d 	bl	80048a4 <xPortStartScheduler>
 800378a:	e00e      	b.n	80037aa <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003792:	d10a      	bne.n	80037aa <vTaskStartScheduler+0x96>
        __asm volatile
 8003794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003798:	f383 8811 	msr	BASEPRI, r3
 800379c:	f3bf 8f6f 	isb	sy
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	607b      	str	r3, [r7, #4]
    }
 80037a6:	bf00      	nop
 80037a8:	e7fe      	b.n	80037a8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80037aa:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <vTaskStartScheduler+0xc0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
}
 80037ae:	bf00      	nop
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000264 	.word	0x20000264
 80037bc:	08008d88 	.word	0x08008d88
 80037c0:	08003de5 	.word	0x08003de5
 80037c4:	20000260 	.word	0x20000260
 80037c8:	2000024c 	.word	0x2000024c
 80037cc:	20000244 	.word	0x20000244
 80037d0:	20000168 	.word	0x20000168
 80037d4:	2000000c 	.word	0x2000000c

080037d8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80037dc:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <vTaskSuspendAll+0x18>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3301      	adds	r3, #1
 80037e2:	4a03      	ldr	r2, [pc, #12]	; (80037f0 <vTaskSuspendAll+0x18>)
 80037e4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80037e6:	bf00      	nop
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	20000268 	.word	0x20000268

080037f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80037fe:	2300      	movs	r3, #0
 8003800:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003802:	4b3d      	ldr	r3, [pc, #244]	; (80038f8 <xTaskResumeAll+0x104>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10a      	bne.n	8003820 <xTaskResumeAll+0x2c>
        __asm volatile
 800380a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380e:	f383 8811 	msr	BASEPRI, r3
 8003812:	f3bf 8f6f 	isb	sy
 8003816:	f3bf 8f4f 	dsb	sy
 800381a:	603b      	str	r3, [r7, #0]
    }
 800381c:	bf00      	nop
 800381e:	e7fe      	b.n	800381e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003820:	f001 f960 	bl	8004ae4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003824:	4b34      	ldr	r3, [pc, #208]	; (80038f8 <xTaskResumeAll+0x104>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3b01      	subs	r3, #1
 800382a:	4a33      	ldr	r2, [pc, #204]	; (80038f8 <xTaskResumeAll+0x104>)
 800382c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800382e:	4b32      	ldr	r3, [pc, #200]	; (80038f8 <xTaskResumeAll+0x104>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d159      	bne.n	80038ea <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003836:	4b31      	ldr	r3, [pc, #196]	; (80038fc <xTaskResumeAll+0x108>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d055      	beq.n	80038ea <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800383e:	e032      	b.n	80038a6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003840:	4b2f      	ldr	r3, [pc, #188]	; (8003900 <xTaskResumeAll+0x10c>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	3318      	adds	r3, #24
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff f8b5 	bl	80029bc <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	3304      	adds	r3, #4
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff f8b0 	bl	80029bc <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4618      	mov	r0, r3
 8003860:	f003 fef4 	bl	800764c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	2201      	movs	r2, #1
 800386a:	409a      	lsls	r2, r3
 800386c:	4b25      	ldr	r3, [pc, #148]	; (8003904 <xTaskResumeAll+0x110>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4313      	orrs	r3, r2
 8003872:	4a24      	ldr	r2, [pc, #144]	; (8003904 <xTaskResumeAll+0x110>)
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387a:	4613      	mov	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4a21      	ldr	r2, [pc, #132]	; (8003908 <xTaskResumeAll+0x114>)
 8003884:	441a      	add	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	3304      	adds	r3, #4
 800388a:	4619      	mov	r1, r3
 800388c:	4610      	mov	r0, r2
 800388e:	f7ff f838 	bl	8002902 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003896:	4b1d      	ldr	r3, [pc, #116]	; (800390c <xTaskResumeAll+0x118>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	429a      	cmp	r2, r3
 800389e:	d302      	bcc.n	80038a6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80038a0:	4b1b      	ldr	r3, [pc, #108]	; (8003910 <xTaskResumeAll+0x11c>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038a6:	4b16      	ldr	r3, [pc, #88]	; (8003900 <xTaskResumeAll+0x10c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1c8      	bne.n	8003840 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80038b4:	f000 fb26 	bl	8003f04 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80038b8:	4b16      	ldr	r3, [pc, #88]	; (8003914 <xTaskResumeAll+0x120>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d010      	beq.n	80038e6 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80038c4:	f000 f84a 	bl	800395c <xTaskIncrementTick>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80038ce:	4b10      	ldr	r3, [pc, #64]	; (8003910 <xTaskResumeAll+0x11c>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1f1      	bne.n	80038c4 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80038e0:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <xTaskResumeAll+0x120>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80038e6:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <xTaskResumeAll+0x11c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80038ea:	f001 f92b 	bl	8004b44 <vPortExitCritical>

    return xAlreadyYielded;
 80038ee:	687b      	ldr	r3, [r7, #4]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	20000268 	.word	0x20000268
 80038fc:	20000240 	.word	0x20000240
 8003900:	20000200 	.word	0x20000200
 8003904:	20000248 	.word	0x20000248
 8003908:	2000016c 	.word	0x2000016c
 800390c:	20000168 	.word	0x20000168
 8003910:	20000254 	.word	0x20000254
 8003914:	20000250 	.word	0x20000250

08003918 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800391e:	4b05      	ldr	r3, [pc, #20]	; (8003934 <xTaskGetTickCount+0x1c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003924:	687b      	ldr	r3, [r7, #4]
}
 8003926:	4618      	mov	r0, r3
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20000244 	.word	0x20000244

08003938 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800393e:	f001 f9bd 	bl	8004cbc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003942:	2300      	movs	r3, #0
 8003944:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003946:	4b04      	ldr	r3, [pc, #16]	; (8003958 <xTaskGetTickCountFromISR+0x20>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800394c:	683b      	ldr	r3, [r7, #0]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000244 	.word	0x20000244

0800395c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003966:	4b41      	ldr	r3, [pc, #260]	; (8003a6c <xTaskIncrementTick+0x110>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d173      	bne.n	8003a56 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800396e:	4b40      	ldr	r3, [pc, #256]	; (8003a70 <xTaskIncrementTick+0x114>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3301      	adds	r3, #1
 8003974:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003976:	4a3e      	ldr	r2, [pc, #248]	; (8003a70 <xTaskIncrementTick+0x114>)
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d120      	bne.n	80039c4 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8003982:	4b3c      	ldr	r3, [pc, #240]	; (8003a74 <xTaskIncrementTick+0x118>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <xTaskIncrementTick+0x46>
        __asm volatile
 800398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003990:	f383 8811 	msr	BASEPRI, r3
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	603b      	str	r3, [r7, #0]
    }
 800399e:	bf00      	nop
 80039a0:	e7fe      	b.n	80039a0 <xTaskIncrementTick+0x44>
 80039a2:	4b34      	ldr	r3, [pc, #208]	; (8003a74 <xTaskIncrementTick+0x118>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	4b33      	ldr	r3, [pc, #204]	; (8003a78 <xTaskIncrementTick+0x11c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a31      	ldr	r2, [pc, #196]	; (8003a74 <xTaskIncrementTick+0x118>)
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	4a31      	ldr	r2, [pc, #196]	; (8003a78 <xTaskIncrementTick+0x11c>)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	4b31      	ldr	r3, [pc, #196]	; (8003a7c <xTaskIncrementTick+0x120>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3301      	adds	r3, #1
 80039bc:	4a2f      	ldr	r2, [pc, #188]	; (8003a7c <xTaskIncrementTick+0x120>)
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	f000 faa0 	bl	8003f04 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80039c4:	4b2e      	ldr	r3, [pc, #184]	; (8003a80 <xTaskIncrementTick+0x124>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d348      	bcc.n	8003a60 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039ce:	4b29      	ldr	r3, [pc, #164]	; (8003a74 <xTaskIncrementTick+0x118>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d104      	bne.n	80039e2 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039d8:	4b29      	ldr	r3, [pc, #164]	; (8003a80 <xTaskIncrementTick+0x124>)
 80039da:	f04f 32ff 	mov.w	r2, #4294967295
 80039de:	601a      	str	r2, [r3, #0]
                    break;
 80039e0:	e03e      	b.n	8003a60 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039e2:	4b24      	ldr	r3, [pc, #144]	; (8003a74 <xTaskIncrementTick+0x118>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d203      	bcs.n	8003a02 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80039fa:	4a21      	ldr	r2, [pc, #132]	; (8003a80 <xTaskIncrementTick+0x124>)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003a00:	e02e      	b.n	8003a60 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	3304      	adds	r3, #4
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe ffd8 	bl	80029bc <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d004      	beq.n	8003a1e <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	3318      	adds	r3, #24
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fe ffcf 	bl	80029bc <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f003 fe13 	bl	800764c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	409a      	lsls	r2, r3
 8003a2e:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <xTaskIncrementTick+0x128>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	4a13      	ldr	r2, [pc, #76]	; (8003a84 <xTaskIncrementTick+0x128>)
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4a10      	ldr	r2, [pc, #64]	; (8003a88 <xTaskIncrementTick+0x12c>)
 8003a46:	441a      	add	r2, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	f7fe ff57 	bl	8002902 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a54:	e7bb      	b.n	80039ce <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003a56:	4b0d      	ldr	r3, [pc, #52]	; (8003a8c <xTaskIncrementTick+0x130>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	4a0b      	ldr	r2, [pc, #44]	; (8003a8c <xTaskIncrementTick+0x130>)
 8003a5e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003a60:	697b      	ldr	r3, [r7, #20]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000268 	.word	0x20000268
 8003a70:	20000244 	.word	0x20000244
 8003a74:	200001f8 	.word	0x200001f8
 8003a78:	200001fc 	.word	0x200001fc
 8003a7c:	20000258 	.word	0x20000258
 8003a80:	20000260 	.word	0x20000260
 8003a84:	20000248 	.word	0x20000248
 8003a88:	2000016c 	.word	0x2000016c
 8003a8c:	20000250 	.word	0x20000250

08003a90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a96:	4b2d      	ldr	r3, [pc, #180]	; (8003b4c <vTaskSwitchContext+0xbc>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003a9e:	4b2c      	ldr	r3, [pc, #176]	; (8003b50 <vTaskSwitchContext+0xc0>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003aa4:	e04d      	b.n	8003b42 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003aa6:	4b2a      	ldr	r3, [pc, #168]	; (8003b50 <vTaskSwitchContext+0xc0>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aac:	4b29      	ldr	r3, [pc, #164]	; (8003b54 <vTaskSwitchContext+0xc4>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	fab3 f383 	clz	r3, r3
 8003ab8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003aba:	7afb      	ldrb	r3, [r7, #11]
 8003abc:	f1c3 031f 	rsb	r3, r3, #31
 8003ac0:	617b      	str	r3, [r7, #20]
 8003ac2:	4925      	ldr	r1, [pc, #148]	; (8003b58 <vTaskSwitchContext+0xc8>)
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10a      	bne.n	8003aec <vTaskSwitchContext+0x5c>
        __asm volatile
 8003ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ada:	f383 8811 	msr	BASEPRI, r3
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	607b      	str	r3, [r7, #4]
    }
 8003ae8:	bf00      	nop
 8003aea:	e7fe      	b.n	8003aea <vTaskSwitchContext+0x5a>
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4a18      	ldr	r2, [pc, #96]	; (8003b58 <vTaskSwitchContext+0xc8>)
 8003af8:	4413      	add	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	605a      	str	r2, [r3, #4]
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	3308      	adds	r3, #8
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d104      	bne.n	8003b1c <vTaskSwitchContext+0x8c>
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	605a      	str	r2, [r3, #4]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	4a0e      	ldr	r2, [pc, #56]	; (8003b5c <vTaskSwitchContext+0xcc>)
 8003b24:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003b26:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <vTaskSwitchContext+0xcc>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <vTaskSwitchContext+0xd0>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d102      	bne.n	8003b38 <vTaskSwitchContext+0xa8>
 8003b32:	f003 fceb 	bl	800750c <SEGGER_SYSVIEW_OnIdle>
}
 8003b36:	e004      	b.n	8003b42 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003b38:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <vTaskSwitchContext+0xcc>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f003 fd43 	bl	80075c8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003b42:	bf00      	nop
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20000268 	.word	0x20000268
 8003b50:	20000254 	.word	0x20000254
 8003b54:	20000248 	.word	0x20000248
 8003b58:	2000016c 	.word	0x2000016c
 8003b5c:	20000168 	.word	0x20000168
 8003b60:	20000264 	.word	0x20000264

08003b64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10a      	bne.n	8003b8a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	60fb      	str	r3, [r7, #12]
    }
 8003b86:	bf00      	nop
 8003b88:	e7fe      	b.n	8003b88 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b8a:	4b07      	ldr	r3, [pc, #28]	; (8003ba8 <vTaskPlaceOnEventList+0x44>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3318      	adds	r3, #24
 8003b90:	4619      	mov	r1, r3
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fe fed9 	bl	800294a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b98:	2101      	movs	r1, #1
 8003b9a:	6838      	ldr	r0, [r7, #0]
 8003b9c:	f000 fa6c 	bl	8004078 <prvAddCurrentTaskToDelayedList>
}
 8003ba0:	bf00      	nop
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20000168 	.word	0x20000168

08003bac <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10a      	bne.n	8003bd4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	617b      	str	r3, [r7, #20]
    }
 8003bd0:	bf00      	nop
 8003bd2:	e7fe      	b.n	8003bd2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <vTaskPlaceOnEventListRestricted+0x58>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3318      	adds	r3, #24
 8003bda:	4619      	mov	r1, r3
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f7fe fe90 	bl	8002902 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003be8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bec:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003bee:	2024      	movs	r0, #36	; 0x24
 8003bf0:	f002 ff8c 	bl	8006b0c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	68b8      	ldr	r0, [r7, #8]
 8003bf8:	f000 fa3e 	bl	8004078 <prvAddCurrentTaskToDelayedList>
    }
 8003bfc:	bf00      	nop
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20000168 	.word	0x20000168

08003c08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10a      	bne.n	8003c34 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	60fb      	str	r3, [r7, #12]
    }
 8003c30:	bf00      	nop
 8003c32:	e7fe      	b.n	8003c32 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	3318      	adds	r3, #24
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fe febf 	bl	80029bc <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c3e:	4b1f      	ldr	r3, [pc, #124]	; (8003cbc <xTaskRemoveFromEventList+0xb4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d120      	bne.n	8003c88 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	3304      	adds	r3, #4
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fe feb6 	bl	80029bc <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f003 fcfa 	bl	800764c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	4b17      	ldr	r3, [pc, #92]	; (8003cc0 <xTaskRemoveFromEventList+0xb8>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	4a16      	ldr	r2, [pc, #88]	; (8003cc0 <xTaskRemoveFromEventList+0xb8>)
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4a13      	ldr	r2, [pc, #76]	; (8003cc4 <xTaskRemoveFromEventList+0xbc>)
 8003c78:	441a      	add	r2, r3
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4610      	mov	r0, r2
 8003c82:	f7fe fe3e 	bl	8002902 <vListInsertEnd>
 8003c86:	e005      	b.n	8003c94 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	3318      	adds	r3, #24
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	480e      	ldr	r0, [pc, #56]	; (8003cc8 <xTaskRemoveFromEventList+0xc0>)
 8003c90:	f7fe fe37 	bl	8002902 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c98:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <xTaskRemoveFromEventList+0xc4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d905      	bls.n	8003cae <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <xTaskRemoveFromEventList+0xc8>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	e001      	b.n	8003cb2 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003cb2:	697b      	ldr	r3, [r7, #20]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	20000268 	.word	0x20000268
 8003cc0:	20000248 	.word	0x20000248
 8003cc4:	2000016c 	.word	0x2000016c
 8003cc8:	20000200 	.word	0x20000200
 8003ccc:	20000168 	.word	0x20000168
 8003cd0:	20000254 	.word	0x20000254

08003cd4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003cdc:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <vTaskInternalSetTimeOutState+0x24>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <vTaskInternalSetTimeOutState+0x28>)
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	605a      	str	r2, [r3, #4]
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	20000258 	.word	0x20000258
 8003cfc:	20000244 	.word	0x20000244

08003d00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10a      	bne.n	8003d26 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	613b      	str	r3, [r7, #16]
    }
 8003d22:	bf00      	nop
 8003d24:	e7fe      	b.n	8003d24 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10a      	bne.n	8003d42 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	60fb      	str	r3, [r7, #12]
    }
 8003d3e:	bf00      	nop
 8003d40:	e7fe      	b.n	8003d40 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003d42:	f000 fecf 	bl	8004ae4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003d46:	4b1f      	ldr	r3, [pc, #124]	; (8003dc4 <xTaskCheckForTimeOut+0xc4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5e:	d102      	bne.n	8003d66 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61fb      	str	r3, [r7, #28]
 8003d64:	e026      	b.n	8003db4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	4b17      	ldr	r3, [pc, #92]	; (8003dc8 <xTaskCheckForTimeOut+0xc8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d00a      	beq.n	8003d88 <xTaskCheckForTimeOut+0x88>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d305      	bcc.n	8003d88 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	e015      	b.n	8003db4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d20b      	bcs.n	8003daa <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	1ad2      	subs	r2, r2, r3
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff ff98 	bl	8003cd4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003da4:	2300      	movs	r3, #0
 8003da6:	61fb      	str	r3, [r7, #28]
 8003da8:	e004      	b.n	8003db4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003db0:	2301      	movs	r3, #1
 8003db2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003db4:	f000 fec6 	bl	8004b44 <vPortExitCritical>

    return xReturn;
 8003db8:	69fb      	ldr	r3, [r7, #28]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3720      	adds	r7, #32
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000244 	.word	0x20000244
 8003dc8:	20000258 	.word	0x20000258

08003dcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003dd0:	4b03      	ldr	r3, [pc, #12]	; (8003de0 <vTaskMissedYield+0x14>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]
}
 8003dd6:	bf00      	nop
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	20000254 	.word	0x20000254

08003de4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003dec:	f000 f84c 	bl	8003e88 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003df0:	4b04      	ldr	r3, [pc, #16]	; (8003e04 <prvIdleTask+0x20>)
 8003df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003e00:	e7f4      	b.n	8003dec <prvIdleTask+0x8>
 8003e02:	bf00      	nop
 8003e04:	e000ed04 	.word	0xe000ed04

08003e08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e0e:	2300      	movs	r3, #0
 8003e10:	607b      	str	r3, [r7, #4]
 8003e12:	e00c      	b.n	8003e2e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	4613      	mov	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4a12      	ldr	r2, [pc, #72]	; (8003e68 <prvInitialiseTaskLists+0x60>)
 8003e20:	4413      	add	r3, r2
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe fd40 	bl	80028a8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	607b      	str	r3, [r7, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d9ef      	bls.n	8003e14 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003e34:	480d      	ldr	r0, [pc, #52]	; (8003e6c <prvInitialiseTaskLists+0x64>)
 8003e36:	f7fe fd37 	bl	80028a8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003e3a:	480d      	ldr	r0, [pc, #52]	; (8003e70 <prvInitialiseTaskLists+0x68>)
 8003e3c:	f7fe fd34 	bl	80028a8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003e40:	480c      	ldr	r0, [pc, #48]	; (8003e74 <prvInitialiseTaskLists+0x6c>)
 8003e42:	f7fe fd31 	bl	80028a8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003e46:	480c      	ldr	r0, [pc, #48]	; (8003e78 <prvInitialiseTaskLists+0x70>)
 8003e48:	f7fe fd2e 	bl	80028a8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003e4c:	480b      	ldr	r0, [pc, #44]	; (8003e7c <prvInitialiseTaskLists+0x74>)
 8003e4e:	f7fe fd2b 	bl	80028a8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003e52:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <prvInitialiseTaskLists+0x78>)
 8003e54:	4a05      	ldr	r2, [pc, #20]	; (8003e6c <prvInitialiseTaskLists+0x64>)
 8003e56:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e58:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <prvInitialiseTaskLists+0x7c>)
 8003e5a:	4a05      	ldr	r2, [pc, #20]	; (8003e70 <prvInitialiseTaskLists+0x68>)
 8003e5c:	601a      	str	r2, [r3, #0]
}
 8003e5e:	bf00      	nop
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	2000016c 	.word	0x2000016c
 8003e6c:	200001d0 	.word	0x200001d0
 8003e70:	200001e4 	.word	0x200001e4
 8003e74:	20000200 	.word	0x20000200
 8003e78:	20000214 	.word	0x20000214
 8003e7c:	2000022c 	.word	0x2000022c
 8003e80:	200001f8 	.word	0x200001f8
 8003e84:	200001fc 	.word	0x200001fc

08003e88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e8e:	e019      	b.n	8003ec4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003e90:	f000 fe28 	bl	8004ae4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e94:	4b10      	ldr	r3, [pc, #64]	; (8003ed8 <prvCheckTasksWaitingTermination+0x50>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fe fd8b 	bl	80029bc <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <prvCheckTasksWaitingTermination+0x54>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	4a0b      	ldr	r2, [pc, #44]	; (8003edc <prvCheckTasksWaitingTermination+0x54>)
 8003eae:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <prvCheckTasksWaitingTermination+0x58>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <prvCheckTasksWaitingTermination+0x58>)
 8003eb8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003eba:	f000 fe43 	bl	8004b44 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f810 	bl	8003ee4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ec4:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <prvCheckTasksWaitingTermination+0x58>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1e1      	bne.n	8003e90 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003ecc:	bf00      	nop
 8003ece:	bf00      	nop
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20000214 	.word	0x20000214
 8003edc:	20000240 	.word	0x20000240
 8003ee0:	20000228 	.word	0x20000228

08003ee4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f001 f803 	bl	8004efc <vPortFree>
                vPortFree( pxTCB );
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f001 f800 	bl	8004efc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003efc:	bf00      	nop
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f08:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <prvResetNextTaskUnblockTime+0x30>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d104      	bne.n	8003f1c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003f12:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <prvResetNextTaskUnblockTime+0x34>)
 8003f14:	f04f 32ff 	mov.w	r2, #4294967295
 8003f18:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003f1a:	e005      	b.n	8003f28 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f1c:	4b05      	ldr	r3, [pc, #20]	; (8003f34 <prvResetNextTaskUnblockTime+0x30>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a04      	ldr	r2, [pc, #16]	; (8003f38 <prvResetNextTaskUnblockTime+0x34>)
 8003f26:	6013      	str	r3, [r2, #0]
}
 8003f28:	bf00      	nop
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	200001f8 	.word	0x200001f8
 8003f38:	20000260 	.word	0x20000260

08003f3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003f42:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <xTaskGetSchedulerState+0x34>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d102      	bne.n	8003f50 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	607b      	str	r3, [r7, #4]
 8003f4e:	e008      	b.n	8003f62 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f50:	4b08      	ldr	r3, [pc, #32]	; (8003f74 <xTaskGetSchedulerState+0x38>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d102      	bne.n	8003f5e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003f58:	2302      	movs	r3, #2
 8003f5a:	607b      	str	r3, [r7, #4]
 8003f5c:	e001      	b.n	8003f62 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003f62:	687b      	ldr	r3, [r7, #4]
    }
 8003f64:	4618      	mov	r0, r3
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	2000024c 	.word	0x2000024c
 8003f74:	20000268 	.word	0x20000268

08003f78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d068      	beq.n	8004060 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003f8e:	4b37      	ldr	r3, [pc, #220]	; (800406c <xTaskPriorityDisinherit+0xf4>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d00a      	beq.n	8003fae <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	60fb      	str	r3, [r7, #12]
    }
 8003faa:	bf00      	nop
 8003fac:	e7fe      	b.n	8003fac <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10a      	bne.n	8003fcc <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fba:	f383 8811 	msr	BASEPRI, r3
 8003fbe:	f3bf 8f6f 	isb	sy
 8003fc2:	f3bf 8f4f 	dsb	sy
 8003fc6:	60bb      	str	r3, [r7, #8]
    }
 8003fc8:	bf00      	nop
 8003fca:	e7fe      	b.n	8003fca <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd0:	1e5a      	subs	r2, r3, #1
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d03e      	beq.n	8004060 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d13a      	bne.n	8004060 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	3304      	adds	r3, #4
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fe fce4 	bl	80029bc <uxListRemove>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10a      	bne.n	8004010 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	2201      	movs	r2, #1
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	43da      	mvns	r2, r3
 8004006:	4b1a      	ldr	r3, [pc, #104]	; (8004070 <xTaskPriorityDisinherit+0xf8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4013      	ands	r3, r2
 800400c:	4a18      	ldr	r2, [pc, #96]	; (8004070 <xTaskPriorityDisinherit+0xf8>)
 800400e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4619      	mov	r1, r3
 8004014:	204a      	movs	r0, #74	; 0x4a
 8004016:	f002 fd97 	bl	8006b48 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004026:	f1c3 0205 	rsb	r2, r3, #5
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	2201      	movs	r2, #1
 8004034:	409a      	lsls	r2, r3
 8004036:	4b0e      	ldr	r3, [pc, #56]	; (8004070 <xTaskPriorityDisinherit+0xf8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4313      	orrs	r3, r2
 800403c:	4a0c      	ldr	r2, [pc, #48]	; (8004070 <xTaskPriorityDisinherit+0xf8>)
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4a09      	ldr	r2, [pc, #36]	; (8004074 <xTaskPriorityDisinherit+0xfc>)
 800404e:	441a      	add	r2, r3
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	3304      	adds	r3, #4
 8004054:	4619      	mov	r1, r3
 8004056:	4610      	mov	r0, r2
 8004058:	f7fe fc53 	bl	8002902 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800405c:	2301      	movs	r3, #1
 800405e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004060:	697b      	ldr	r3, [r7, #20]
    }
 8004062:	4618      	mov	r0, r3
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20000168 	.word	0x20000168
 8004070:	20000248 	.word	0x20000248
 8004074:	2000016c 	.word	0x2000016c

08004078 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004082:	4b32      	ldr	r3, [pc, #200]	; (800414c <prvAddCurrentTaskToDelayedList+0xd4>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004088:	4b31      	ldr	r3, [pc, #196]	; (8004150 <prvAddCurrentTaskToDelayedList+0xd8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3304      	adds	r3, #4
 800408e:	4618      	mov	r0, r3
 8004090:	f7fe fc94 	bl	80029bc <uxListRemove>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10b      	bne.n	80040b2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800409a:	4b2d      	ldr	r3, [pc, #180]	; (8004150 <prvAddCurrentTaskToDelayedList+0xd8>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	2201      	movs	r2, #1
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	43da      	mvns	r2, r3
 80040a8:	4b2a      	ldr	r3, [pc, #168]	; (8004154 <prvAddCurrentTaskToDelayedList+0xdc>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4013      	ands	r3, r2
 80040ae:	4a29      	ldr	r2, [pc, #164]	; (8004154 <prvAddCurrentTaskToDelayedList+0xdc>)
 80040b0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d110      	bne.n	80040dc <prvAddCurrentTaskToDelayedList+0x64>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00d      	beq.n	80040dc <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80040c0:	4b23      	ldr	r3, [pc, #140]	; (8004150 <prvAddCurrentTaskToDelayedList+0xd8>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	211b      	movs	r1, #27
 80040c6:	4618      	mov	r0, r3
 80040c8:	f003 fb02 	bl	80076d0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040cc:	4b20      	ldr	r3, [pc, #128]	; (8004150 <prvAddCurrentTaskToDelayedList+0xd8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3304      	adds	r3, #4
 80040d2:	4619      	mov	r1, r3
 80040d4:	4820      	ldr	r0, [pc, #128]	; (8004158 <prvAddCurrentTaskToDelayedList+0xe0>)
 80040d6:	f7fe fc14 	bl	8002902 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80040da:	e032      	b.n	8004142 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4413      	add	r3, r2
 80040e2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80040e4:	4b1a      	ldr	r3, [pc, #104]	; (8004150 <prvAddCurrentTaskToDelayedList+0xd8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d20f      	bcs.n	8004114 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80040f4:	4b16      	ldr	r3, [pc, #88]	; (8004150 <prvAddCurrentTaskToDelayedList+0xd8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2104      	movs	r1, #4
 80040fa:	4618      	mov	r0, r3
 80040fc:	f003 fae8 	bl	80076d0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004100:	4b16      	ldr	r3, [pc, #88]	; (800415c <prvAddCurrentTaskToDelayedList+0xe4>)
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	4b12      	ldr	r3, [pc, #72]	; (8004150 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3304      	adds	r3, #4
 800410a:	4619      	mov	r1, r3
 800410c:	4610      	mov	r0, r2
 800410e:	f7fe fc1c 	bl	800294a <vListInsert>
}
 8004112:	e016      	b.n	8004142 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8004114:	4b0e      	ldr	r3, [pc, #56]	; (8004150 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2104      	movs	r1, #4
 800411a:	4618      	mov	r0, r3
 800411c:	f003 fad8 	bl	80076d0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004120:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3304      	adds	r3, #4
 800412a:	4619      	mov	r1, r3
 800412c:	4610      	mov	r0, r2
 800412e:	f7fe fc0c 	bl	800294a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004132:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <prvAddCurrentTaskToDelayedList+0xec>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	429a      	cmp	r2, r3
 800413a:	d202      	bcs.n	8004142 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800413c:	4a09      	ldr	r2, [pc, #36]	; (8004164 <prvAddCurrentTaskToDelayedList+0xec>)
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	6013      	str	r3, [r2, #0]
}
 8004142:	bf00      	nop
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	20000244 	.word	0x20000244
 8004150:	20000168 	.word	0x20000168
 8004154:	20000248 	.word	0x20000248
 8004158:	2000022c 	.word	0x2000022c
 800415c:	200001fc 	.word	0x200001fc
 8004160:	200001f8 	.word	0x200001f8
 8004164:	20000260 	.word	0x20000260

08004168 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800416e:	2300      	movs	r3, #0
 8004170:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004172:	f000 fad5 	bl	8004720 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004176:	4b11      	ldr	r3, [pc, #68]	; (80041bc <xTimerCreateTimerTask+0x54>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00b      	beq.n	8004196 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800417e:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <xTimerCreateTimerTask+0x58>)
 8004180:	9301      	str	r3, [sp, #4]
 8004182:	2302      	movs	r3, #2
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	2300      	movs	r3, #0
 8004188:	f44f 7282 	mov.w	r2, #260	; 0x104
 800418c:	490d      	ldr	r1, [pc, #52]	; (80041c4 <xTimerCreateTimerTask+0x5c>)
 800418e:	480e      	ldr	r0, [pc, #56]	; (80041c8 <xTimerCreateTimerTask+0x60>)
 8004190:	f7ff f96a 	bl	8003468 <xTaskCreate>
 8004194:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10a      	bne.n	80041b2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800419c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a0:	f383 8811 	msr	BASEPRI, r3
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	603b      	str	r3, [r7, #0]
    }
 80041ae:	bf00      	nop
 80041b0:	e7fe      	b.n	80041b0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80041b2:	687b      	ldr	r3, [r7, #4]
    }
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	2000029c 	.word	0x2000029c
 80041c0:	200002a0 	.word	0x200002a0
 80041c4:	08008d90 	.word	0x08008d90
 80041c8:	08004301 	.word	0x08004301

080041cc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08a      	sub	sp, #40	; 0x28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80041da:	2300      	movs	r3, #0
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10a      	bne.n	80041fa <xTimerGenericCommand+0x2e>
        __asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	623b      	str	r3, [r7, #32]
    }
 80041f6:	bf00      	nop
 80041f8:	e7fe      	b.n	80041f8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80041fa:	4b1a      	ldr	r3, [pc, #104]	; (8004264 <xTimerGenericCommand+0x98>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d02a      	beq.n	8004258 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b05      	cmp	r3, #5
 8004212:	dc18      	bgt.n	8004246 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004214:	f7ff fe92 	bl	8003f3c <xTaskGetSchedulerState>
 8004218:	4603      	mov	r3, r0
 800421a:	2b02      	cmp	r3, #2
 800421c:	d109      	bne.n	8004232 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800421e:	4b11      	ldr	r3, [pc, #68]	; (8004264 <xTimerGenericCommand+0x98>)
 8004220:	6818      	ldr	r0, [r3, #0]
 8004222:	f107 0114 	add.w	r1, r7, #20
 8004226:	2300      	movs	r3, #0
 8004228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800422a:	f7fe fcd5 	bl	8002bd8 <xQueueGenericSend>
 800422e:	6278      	str	r0, [r7, #36]	; 0x24
 8004230:	e012      	b.n	8004258 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004232:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <xTimerGenericCommand+0x98>)
 8004234:	6818      	ldr	r0, [r3, #0]
 8004236:	f107 0114 	add.w	r1, r7, #20
 800423a:	2300      	movs	r3, #0
 800423c:	2200      	movs	r2, #0
 800423e:	f7fe fccb 	bl	8002bd8 <xQueueGenericSend>
 8004242:	6278      	str	r0, [r7, #36]	; 0x24
 8004244:	e008      	b.n	8004258 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004246:	4b07      	ldr	r3, [pc, #28]	; (8004264 <xTimerGenericCommand+0x98>)
 8004248:	6818      	ldr	r0, [r3, #0]
 800424a:	f107 0114 	add.w	r1, r7, #20
 800424e:	2300      	movs	r3, #0
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	f7fe fdcf 	bl	8002df4 <xQueueGenericSendFromISR>
 8004256:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800425a:	4618      	mov	r0, r3
 800425c:	3728      	adds	r7, #40	; 0x28
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	2000029c 	.word	0x2000029c

08004268 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004268:	b580      	push	{r7, lr}
 800426a:	b088      	sub	sp, #32
 800426c:	af02      	add	r7, sp, #8
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004272:	4b22      	ldr	r3, [pc, #136]	; (80042fc <prvProcessExpiredTimer+0x94>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	3304      	adds	r3, #4
 8004280:	4618      	mov	r0, r3
 8004282:	f7fe fb9b 	bl	80029bc <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d022      	beq.n	80042da <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	699a      	ldr	r2, [r3, #24]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	18d1      	adds	r1, r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	6978      	ldr	r0, [r7, #20]
 80042a2:	f000 f8d1 	bl	8004448 <prvInsertTimerInActiveList>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d01f      	beq.n	80042ec <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80042ac:	2300      	movs	r3, #0
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	2300      	movs	r3, #0
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	2100      	movs	r1, #0
 80042b6:	6978      	ldr	r0, [r7, #20]
 80042b8:	f7ff ff88 	bl	80041cc <xTimerGenericCommand>
 80042bc:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d113      	bne.n	80042ec <prvProcessExpiredTimer+0x84>
        __asm volatile
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	60fb      	str	r3, [r7, #12]
    }
 80042d6:	bf00      	nop
 80042d8:	e7fe      	b.n	80042d8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042e0:	f023 0301 	bic.w	r3, r3, #1
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	6978      	ldr	r0, [r7, #20]
 80042f2:	4798      	blx	r3
    }
 80042f4:	bf00      	nop
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	20000294 	.word	0x20000294

08004300 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004308:	f107 0308 	add.w	r3, r7, #8
 800430c:	4618      	mov	r0, r3
 800430e:	f000 f857 	bl	80043c0 <prvGetNextExpireTime>
 8004312:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4619      	mov	r1, r3
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f803 	bl	8004324 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800431e:	f000 f8d5 	bl	80044cc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004322:	e7f1      	b.n	8004308 <prvTimerTask+0x8>

08004324 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800432e:	f7ff fa53 	bl	80037d8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004332:	f107 0308 	add.w	r3, r7, #8
 8004336:	4618      	mov	r0, r3
 8004338:	f000 f866 	bl	8004408 <prvSampleTimeNow>
 800433c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d130      	bne.n	80043a6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10a      	bne.n	8004360 <prvProcessTimerOrBlockTask+0x3c>
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	429a      	cmp	r2, r3
 8004350:	d806      	bhi.n	8004360 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004352:	f7ff fa4f 	bl	80037f4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004356:	68f9      	ldr	r1, [r7, #12]
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff ff85 	bl	8004268 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800435e:	e024      	b.n	80043aa <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d008      	beq.n	8004378 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004366:	4b13      	ldr	r3, [pc, #76]	; (80043b4 <prvProcessTimerOrBlockTask+0x90>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <prvProcessTimerOrBlockTask+0x50>
 8004370:	2301      	movs	r3, #1
 8004372:	e000      	b.n	8004376 <prvProcessTimerOrBlockTask+0x52>
 8004374:	2300      	movs	r3, #0
 8004376:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004378:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <prvProcessTimerOrBlockTask+0x94>)
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	4619      	mov	r1, r3
 8004386:	f7ff f83b 	bl	8003400 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800438a:	f7ff fa33 	bl	80037f4 <xTaskResumeAll>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10a      	bne.n	80043aa <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004394:	4b09      	ldr	r3, [pc, #36]	; (80043bc <prvProcessTimerOrBlockTask+0x98>)
 8004396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	f3bf 8f6f 	isb	sy
    }
 80043a4:	e001      	b.n	80043aa <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80043a6:	f7ff fa25 	bl	80037f4 <xTaskResumeAll>
    }
 80043aa:	bf00      	nop
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20000298 	.word	0x20000298
 80043b8:	2000029c 	.word	0x2000029c
 80043bc:	e000ed04 	.word	0xe000ed04

080043c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80043c8:	4b0e      	ldr	r3, [pc, #56]	; (8004404 <prvGetNextExpireTime+0x44>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <prvGetNextExpireTime+0x16>
 80043d2:	2201      	movs	r2, #1
 80043d4:	e000      	b.n	80043d8 <prvGetNextExpireTime+0x18>
 80043d6:	2200      	movs	r2, #0
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d105      	bne.n	80043f0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043e4:	4b07      	ldr	r3, [pc, #28]	; (8004404 <prvGetNextExpireTime+0x44>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	e001      	b.n	80043f4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80043f4:	68fb      	ldr	r3, [r7, #12]
    }
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20000294 	.word	0x20000294

08004408 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004410:	f7ff fa82 	bl	8003918 <xTaskGetTickCount>
 8004414:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004416:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <prvSampleTimeNow+0x3c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	429a      	cmp	r2, r3
 800441e:	d205      	bcs.n	800442c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004420:	f000 f91a 	bl	8004658 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	e002      	b.n	8004432 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004432:	4a04      	ldr	r2, [pc, #16]	; (8004444 <prvSampleTimeNow+0x3c>)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004438:	68fb      	ldr	r3, [r7, #12]
    }
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	200002a4 	.word	0x200002a4

08004448 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004456:	2300      	movs	r3, #0
 8004458:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	429a      	cmp	r2, r3
 800446c:	d812      	bhi.n	8004494 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	1ad2      	subs	r2, r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	429a      	cmp	r2, r3
 800447a:	d302      	bcc.n	8004482 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800447c:	2301      	movs	r3, #1
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	e01b      	b.n	80044ba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004482:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <prvInsertTimerInActiveList+0x7c>)
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	3304      	adds	r3, #4
 800448a:	4619      	mov	r1, r3
 800448c:	4610      	mov	r0, r2
 800448e:	f7fe fa5c 	bl	800294a <vListInsert>
 8004492:	e012      	b.n	80044ba <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	429a      	cmp	r2, r3
 800449a:	d206      	bcs.n	80044aa <prvInsertTimerInActiveList+0x62>
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d302      	bcc.n	80044aa <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80044a4:	2301      	movs	r3, #1
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	e007      	b.n	80044ba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044aa:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <prvInsertTimerInActiveList+0x80>)
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	3304      	adds	r3, #4
 80044b2:	4619      	mov	r1, r3
 80044b4:	4610      	mov	r0, r2
 80044b6:	f7fe fa48 	bl	800294a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80044ba:	697b      	ldr	r3, [r7, #20]
    }
 80044bc:	4618      	mov	r0, r3
 80044be:	3718      	adds	r7, #24
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	20000298 	.word	0x20000298
 80044c8:	20000294 	.word	0x20000294

080044cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08c      	sub	sp, #48	; 0x30
 80044d0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044d2:	e0ae      	b.n	8004632 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f2c0 80ab 	blt.w	8004632 <prvProcessReceivedCommands+0x166>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d004      	beq.n	80044f2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	3304      	adds	r3, #4
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fe fa65 	bl	80029bc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044f2:	1d3b      	adds	r3, r7, #4
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff ff87 	bl	8004408 <prvSampleTimeNow>
 80044fa:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2b09      	cmp	r3, #9
 8004500:	f200 8096 	bhi.w	8004630 <prvProcessReceivedCommands+0x164>
 8004504:	a201      	add	r2, pc, #4	; (adr r2, 800450c <prvProcessReceivedCommands+0x40>)
 8004506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450a:	bf00      	nop
 800450c:	08004535 	.word	0x08004535
 8004510:	08004535 	.word	0x08004535
 8004514:	08004535 	.word	0x08004535
 8004518:	080045a9 	.word	0x080045a9
 800451c:	080045bd 	.word	0x080045bd
 8004520:	08004607 	.word	0x08004607
 8004524:	08004535 	.word	0x08004535
 8004528:	08004535 	.word	0x08004535
 800452c:	080045a9 	.word	0x080045a9
 8004530:	080045bd 	.word	0x080045bd
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800453a:	f043 0301 	orr.w	r3, r3, #1
 800453e:	b2da      	uxtb	r2, r3
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	18d1      	adds	r1, r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a3a      	ldr	r2, [r7, #32]
 8004552:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004554:	f7ff ff78 	bl	8004448 <prvInsertTimerInActiveList>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d069      	beq.n	8004632 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004564:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d05e      	beq.n	8004632 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	441a      	add	r2, r3
 800457c:	2300      	movs	r3, #0
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	2300      	movs	r3, #0
 8004582:	2100      	movs	r1, #0
 8004584:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004586:	f7ff fe21 	bl	80041cc <xTimerGenericCommand>
 800458a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d14f      	bne.n	8004632 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	61bb      	str	r3, [r7, #24]
    }
 80045a4:	bf00      	nop
 80045a6:	e7fe      	b.n	80045a6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045ae:	f023 0301 	bic.w	r3, r3, #1
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80045ba:	e03a      	b.n	8004632 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10a      	bne.n	80045f2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	617b      	str	r3, [r7, #20]
    }
 80045ee:	bf00      	nop
 80045f0:	e7fe      	b.n	80045f0 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	699a      	ldr	r2, [r3, #24]
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	18d1      	adds	r1, r2, r3
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	6a3a      	ldr	r2, [r7, #32]
 80045fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004600:	f7ff ff22 	bl	8004448 <prvInsertTimerInActiveList>
                        break;
 8004604:	e015      	b.n	8004632 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d103      	bne.n	800461c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004614:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004616:	f000 fc71 	bl	8004efc <vPortFree>
 800461a:	e00a      	b.n	8004632 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004622:	f023 0301 	bic.w	r3, r3, #1
 8004626:	b2da      	uxtb	r2, r3
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800462e:	e000      	b.n	8004632 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004630:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004632:	4b08      	ldr	r3, [pc, #32]	; (8004654 <prvProcessReceivedCommands+0x188>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f107 0108 	add.w	r1, r7, #8
 800463a:	2200      	movs	r2, #0
 800463c:	4618      	mov	r0, r3
 800463e:	f7fe fc97 	bl	8002f70 <xQueueReceive>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	f47f af45 	bne.w	80044d4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800464a:	bf00      	nop
 800464c:	bf00      	nop
 800464e:	3728      	adds	r7, #40	; 0x28
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	2000029c 	.word	0x2000029c

08004658 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800465e:	e048      	b.n	80046f2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004660:	4b2d      	ldr	r3, [pc, #180]	; (8004718 <prvSwitchTimerLists+0xc0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800466a:	4b2b      	ldr	r3, [pc, #172]	; (8004718 <prvSwitchTimerLists+0xc0>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3304      	adds	r3, #4
 8004678:	4618      	mov	r0, r3
 800467a:	f7fe f99f 	bl	80029bc <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d02e      	beq.n	80046f2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	4413      	add	r3, r2
 800469c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d90e      	bls.n	80046c4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046b2:	4b19      	ldr	r3, [pc, #100]	; (8004718 <prvSwitchTimerLists+0xc0>)
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	3304      	adds	r3, #4
 80046ba:	4619      	mov	r1, r3
 80046bc:	4610      	mov	r0, r2
 80046be:	f7fe f944 	bl	800294a <vListInsert>
 80046c2:	e016      	b.n	80046f2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046c4:	2300      	movs	r3, #0
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	2300      	movs	r3, #0
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	2100      	movs	r1, #0
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f7ff fd7c 	bl	80041cc <xTimerGenericCommand>
 80046d4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10a      	bne.n	80046f2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80046dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	603b      	str	r3, [r7, #0]
    }
 80046ee:	bf00      	nop
 80046f0:	e7fe      	b.n	80046f0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046f2:	4b09      	ldr	r3, [pc, #36]	; (8004718 <prvSwitchTimerLists+0xc0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1b1      	bne.n	8004660 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80046fc:	4b06      	ldr	r3, [pc, #24]	; (8004718 <prvSwitchTimerLists+0xc0>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004702:	4b06      	ldr	r3, [pc, #24]	; (800471c <prvSwitchTimerLists+0xc4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a04      	ldr	r2, [pc, #16]	; (8004718 <prvSwitchTimerLists+0xc0>)
 8004708:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800470a:	4a04      	ldr	r2, [pc, #16]	; (800471c <prvSwitchTimerLists+0xc4>)
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	6013      	str	r3, [r2, #0]
    }
 8004710:	bf00      	nop
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	20000294 	.word	0x20000294
 800471c:	20000298 	.word	0x20000298

08004720 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004724:	f000 f9de 	bl	8004ae4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004728:	4b12      	ldr	r3, [pc, #72]	; (8004774 <prvCheckForValidListAndQueue+0x54>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d11d      	bne.n	800476c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004730:	4811      	ldr	r0, [pc, #68]	; (8004778 <prvCheckForValidListAndQueue+0x58>)
 8004732:	f7fe f8b9 	bl	80028a8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004736:	4811      	ldr	r0, [pc, #68]	; (800477c <prvCheckForValidListAndQueue+0x5c>)
 8004738:	f7fe f8b6 	bl	80028a8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800473c:	4b10      	ldr	r3, [pc, #64]	; (8004780 <prvCheckForValidListAndQueue+0x60>)
 800473e:	4a0e      	ldr	r2, [pc, #56]	; (8004778 <prvCheckForValidListAndQueue+0x58>)
 8004740:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004742:	4b10      	ldr	r3, [pc, #64]	; (8004784 <prvCheckForValidListAndQueue+0x64>)
 8004744:	4a0d      	ldr	r2, [pc, #52]	; (800477c <prvCheckForValidListAndQueue+0x5c>)
 8004746:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004748:	2200      	movs	r2, #0
 800474a:	210c      	movs	r1, #12
 800474c:	200a      	movs	r0, #10
 800474e:	f7fe f9ba 	bl	8002ac6 <xQueueGenericCreate>
 8004752:	4603      	mov	r3, r0
 8004754:	4a07      	ldr	r2, [pc, #28]	; (8004774 <prvCheckForValidListAndQueue+0x54>)
 8004756:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004758:	4b06      	ldr	r3, [pc, #24]	; (8004774 <prvCheckForValidListAndQueue+0x54>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d005      	beq.n	800476c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004760:	4b04      	ldr	r3, [pc, #16]	; (8004774 <prvCheckForValidListAndQueue+0x54>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4908      	ldr	r1, [pc, #32]	; (8004788 <prvCheckForValidListAndQueue+0x68>)
 8004766:	4618      	mov	r0, r3
 8004768:	f7fe fe18 	bl	800339c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800476c:	f000 f9ea 	bl	8004b44 <vPortExitCritical>
    }
 8004770:	bf00      	nop
 8004772:	bd80      	pop	{r7, pc}
 8004774:	2000029c 	.word	0x2000029c
 8004778:	2000026c 	.word	0x2000026c
 800477c:	20000280 	.word	0x20000280
 8004780:	20000294 	.word	0x20000294
 8004784:	20000298 	.word	0x20000298
 8004788:	08008d98 	.word	0x08008d98

0800478c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	3b04      	subs	r3, #4
 800479c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3b04      	subs	r3, #4
 80047aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f023 0201 	bic.w	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	3b04      	subs	r3, #4
 80047ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80047bc:	4a0c      	ldr	r2, [pc, #48]	; (80047f0 <pxPortInitialiseStack+0x64>)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3b14      	subs	r3, #20
 80047c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3b04      	subs	r3, #4
 80047d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f06f 0202 	mvn.w	r2, #2
 80047da:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	3b20      	subs	r3, #32
 80047e0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80047e2:	68fb      	ldr	r3, [r7, #12]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	080047f5 	.word	0x080047f5

080047f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80047fe:	4b12      	ldr	r3, [pc, #72]	; (8004848 <prvTaskExitError+0x54>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004806:	d00a      	beq.n	800481e <prvTaskExitError+0x2a>
        __asm volatile
 8004808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480c:	f383 8811 	msr	BASEPRI, r3
 8004810:	f3bf 8f6f 	isb	sy
 8004814:	f3bf 8f4f 	dsb	sy
 8004818:	60fb      	str	r3, [r7, #12]
    }
 800481a:	bf00      	nop
 800481c:	e7fe      	b.n	800481c <prvTaskExitError+0x28>
        __asm volatile
 800481e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	60bb      	str	r3, [r7, #8]
    }
 8004830:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004832:	bf00      	nop
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0fc      	beq.n	8004834 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800483a:	bf00      	nop
 800483c:	bf00      	nop
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	20000010 	.word	0x20000010
 800484c:	00000000 	.word	0x00000000

08004850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004850:	4b07      	ldr	r3, [pc, #28]	; (8004870 <pxCurrentTCBConst2>)
 8004852:	6819      	ldr	r1, [r3, #0]
 8004854:	6808      	ldr	r0, [r1, #0]
 8004856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800485a:	f380 8809 	msr	PSP, r0
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f04f 0000 	mov.w	r0, #0
 8004866:	f380 8811 	msr	BASEPRI, r0
 800486a:	4770      	bx	lr
 800486c:	f3af 8000 	nop.w

08004870 <pxCurrentTCBConst2>:
 8004870:	20000168 	.word	0x20000168
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004874:	bf00      	nop
 8004876:	bf00      	nop

08004878 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004878:	4808      	ldr	r0, [pc, #32]	; (800489c <prvPortStartFirstTask+0x24>)
 800487a:	6800      	ldr	r0, [r0, #0]
 800487c:	6800      	ldr	r0, [r0, #0]
 800487e:	f380 8808 	msr	MSP, r0
 8004882:	f04f 0000 	mov.w	r0, #0
 8004886:	f380 8814 	msr	CONTROL, r0
 800488a:	b662      	cpsie	i
 800488c:	b661      	cpsie	f
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	df00      	svc	0
 8004898:	bf00      	nop
 800489a:	0000      	.short	0x0000
 800489c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80048a0:	bf00      	nop
 80048a2:	bf00      	nop

080048a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048aa:	4b46      	ldr	r3, [pc, #280]	; (80049c4 <xPortStartScheduler+0x120>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a46      	ldr	r2, [pc, #280]	; (80049c8 <xPortStartScheduler+0x124>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d10a      	bne.n	80048ca <xPortStartScheduler+0x26>
        __asm volatile
 80048b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	613b      	str	r3, [r7, #16]
    }
 80048c6:	bf00      	nop
 80048c8:	e7fe      	b.n	80048c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80048ca:	4b3e      	ldr	r3, [pc, #248]	; (80049c4 <xPortStartScheduler+0x120>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a3f      	ldr	r2, [pc, #252]	; (80049cc <xPortStartScheduler+0x128>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d10a      	bne.n	80048ea <xPortStartScheduler+0x46>
        __asm volatile
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	60fb      	str	r3, [r7, #12]
    }
 80048e6:	bf00      	nop
 80048e8:	e7fe      	b.n	80048e8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80048ea:	4b39      	ldr	r3, [pc, #228]	; (80049d0 <xPortStartScheduler+0x12c>)
 80048ec:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	22ff      	movs	r2, #255	; 0xff
 80048fa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	b2db      	uxtb	r3, r3
 8004908:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800490c:	b2da      	uxtb	r2, r3
 800490e:	4b31      	ldr	r3, [pc, #196]	; (80049d4 <xPortStartScheduler+0x130>)
 8004910:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004912:	4b31      	ldr	r3, [pc, #196]	; (80049d8 <xPortStartScheduler+0x134>)
 8004914:	2207      	movs	r2, #7
 8004916:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004918:	e009      	b.n	800492e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800491a:	4b2f      	ldr	r3, [pc, #188]	; (80049d8 <xPortStartScheduler+0x134>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	3b01      	subs	r3, #1
 8004920:	4a2d      	ldr	r2, [pc, #180]	; (80049d8 <xPortStartScheduler+0x134>)
 8004922:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	b2db      	uxtb	r3, r3
 800492c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800492e:	78fb      	ldrb	r3, [r7, #3]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004936:	2b80      	cmp	r3, #128	; 0x80
 8004938:	d0ef      	beq.n	800491a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800493a:	4b27      	ldr	r3, [pc, #156]	; (80049d8 <xPortStartScheduler+0x134>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f1c3 0307 	rsb	r3, r3, #7
 8004942:	2b04      	cmp	r3, #4
 8004944:	d00a      	beq.n	800495c <xPortStartScheduler+0xb8>
        __asm volatile
 8004946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	60bb      	str	r3, [r7, #8]
    }
 8004958:	bf00      	nop
 800495a:	e7fe      	b.n	800495a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800495c:	4b1e      	ldr	r3, [pc, #120]	; (80049d8 <xPortStartScheduler+0x134>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	021b      	lsls	r3, r3, #8
 8004962:	4a1d      	ldr	r2, [pc, #116]	; (80049d8 <xPortStartScheduler+0x134>)
 8004964:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004966:	4b1c      	ldr	r3, [pc, #112]	; (80049d8 <xPortStartScheduler+0x134>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800496e:	4a1a      	ldr	r2, [pc, #104]	; (80049d8 <xPortStartScheduler+0x134>)
 8004970:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	b2da      	uxtb	r2, r3
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800497a:	4b18      	ldr	r3, [pc, #96]	; (80049dc <xPortStartScheduler+0x138>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a17      	ldr	r2, [pc, #92]	; (80049dc <xPortStartScheduler+0x138>)
 8004980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004984:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004986:	4b15      	ldr	r3, [pc, #84]	; (80049dc <xPortStartScheduler+0x138>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a14      	ldr	r2, [pc, #80]	; (80049dc <xPortStartScheduler+0x138>)
 800498c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004990:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004992:	f000 f963 	bl	8004c5c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004996:	4b12      	ldr	r3, [pc, #72]	; (80049e0 <xPortStartScheduler+0x13c>)
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800499c:	f000 f982 	bl	8004ca4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049a0:	4b10      	ldr	r3, [pc, #64]	; (80049e4 <xPortStartScheduler+0x140>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a0f      	ldr	r2, [pc, #60]	; (80049e4 <xPortStartScheduler+0x140>)
 80049a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80049aa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80049ac:	f7ff ff64 	bl	8004878 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80049b0:	f7ff f86e 	bl	8003a90 <vTaskSwitchContext>
    prvTaskExitError();
 80049b4:	f7ff ff1e 	bl	80047f4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	e000ed00 	.word	0xe000ed00
 80049c8:	410fc271 	.word	0x410fc271
 80049cc:	410fc270 	.word	0x410fc270
 80049d0:	e000e400 	.word	0xe000e400
 80049d4:	200002a8 	.word	0x200002a8
 80049d8:	200002ac 	.word	0x200002ac
 80049dc:	e000ed20 	.word	0xe000ed20
 80049e0:	20000010 	.word	0x20000010
 80049e4:	e000ef34 	.word	0xe000ef34

080049e8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80049ee:	4b37      	ldr	r3, [pc, #220]	; (8004acc <vInitPrioGroupValue+0xe4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a37      	ldr	r2, [pc, #220]	; (8004ad0 <vInitPrioGroupValue+0xe8>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d10a      	bne.n	8004a0e <vInitPrioGroupValue+0x26>
        __asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	613b      	str	r3, [r7, #16]
    }
 8004a0a:	bf00      	nop
 8004a0c:	e7fe      	b.n	8004a0c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a0e:	4b2f      	ldr	r3, [pc, #188]	; (8004acc <vInitPrioGroupValue+0xe4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a30      	ldr	r2, [pc, #192]	; (8004ad4 <vInitPrioGroupValue+0xec>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d10a      	bne.n	8004a2e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	60fb      	str	r3, [r7, #12]
    }
 8004a2a:	bf00      	nop
 8004a2c:	e7fe      	b.n	8004a2c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a2e:	4b2a      	ldr	r3, [pc, #168]	; (8004ad8 <vInitPrioGroupValue+0xf0>)
 8004a30:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	22ff      	movs	r2, #255	; 0xff
 8004a3e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a48:	78fb      	ldrb	r3, [r7, #3]
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	4b22      	ldr	r3, [pc, #136]	; (8004adc <vInitPrioGroupValue+0xf4>)
 8004a54:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a56:	4b22      	ldr	r3, [pc, #136]	; (8004ae0 <vInitPrioGroupValue+0xf8>)
 8004a58:	2207      	movs	r2, #7
 8004a5a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a5c:	e009      	b.n	8004a72 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004a5e:	4b20      	ldr	r3, [pc, #128]	; (8004ae0 <vInitPrioGroupValue+0xf8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	4a1e      	ldr	r2, [pc, #120]	; (8004ae0 <vInitPrioGroupValue+0xf8>)
 8004a66:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a68:	78fb      	ldrb	r3, [r7, #3]
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a72:	78fb      	ldrb	r3, [r7, #3]
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7a:	2b80      	cmp	r3, #128	; 0x80
 8004a7c:	d0ef      	beq.n	8004a5e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a7e:	4b18      	ldr	r3, [pc, #96]	; (8004ae0 <vInitPrioGroupValue+0xf8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f1c3 0307 	rsb	r3, r3, #7
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d00a      	beq.n	8004aa0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	60bb      	str	r3, [r7, #8]
    }
 8004a9c:	bf00      	nop
 8004a9e:	e7fe      	b.n	8004a9e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004aa0:	4b0f      	ldr	r3, [pc, #60]	; (8004ae0 <vInitPrioGroupValue+0xf8>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	021b      	lsls	r3, r3, #8
 8004aa6:	4a0e      	ldr	r2, [pc, #56]	; (8004ae0 <vInitPrioGroupValue+0xf8>)
 8004aa8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004aaa:	4b0d      	ldr	r3, [pc, #52]	; (8004ae0 <vInitPrioGroupValue+0xf8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ab2:	4a0b      	ldr	r2, [pc, #44]	; (8004ae0 <vInitPrioGroupValue+0xf8>)
 8004ab4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004abe:	bf00      	nop
 8004ac0:	371c      	adds	r7, #28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	e000ed00 	.word	0xe000ed00
 8004ad0:	410fc271 	.word	0x410fc271
 8004ad4:	410fc270 	.word	0x410fc270
 8004ad8:	e000e400 	.word	0xe000e400
 8004adc:	200002a8 	.word	0x200002a8
 8004ae0:	200002ac 	.word	0x200002ac

08004ae4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
        __asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	607b      	str	r3, [r7, #4]
    }
 8004afc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004afe:	4b0f      	ldr	r3, [pc, #60]	; (8004b3c <vPortEnterCritical+0x58>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	3301      	adds	r3, #1
 8004b04:	4a0d      	ldr	r2, [pc, #52]	; (8004b3c <vPortEnterCritical+0x58>)
 8004b06:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004b08:	4b0c      	ldr	r3, [pc, #48]	; (8004b3c <vPortEnterCritical+0x58>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d10f      	bne.n	8004b30 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <vPortEnterCritical+0x5c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <vPortEnterCritical+0x4c>
        __asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	603b      	str	r3, [r7, #0]
    }
 8004b2c:	bf00      	nop
 8004b2e:	e7fe      	b.n	8004b2e <vPortEnterCritical+0x4a>
    }
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	20000010 	.word	0x20000010
 8004b40:	e000ed04 	.word	0xe000ed04

08004b44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004b4a:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <vPortExitCritical+0x50>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10a      	bne.n	8004b68 <vPortExitCritical+0x24>
        __asm volatile
 8004b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	607b      	str	r3, [r7, #4]
    }
 8004b64:	bf00      	nop
 8004b66:	e7fe      	b.n	8004b66 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004b68:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <vPortExitCritical+0x50>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	4a09      	ldr	r2, [pc, #36]	; (8004b94 <vPortExitCritical+0x50>)
 8004b70:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004b72:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <vPortExitCritical+0x50>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d105      	bne.n	8004b86 <vPortExitCritical+0x42>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	f383 8811 	msr	BASEPRI, r3
    }
 8004b84:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	20000010 	.word	0x20000010
	...

08004ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004ba0:	f3ef 8009 	mrs	r0, PSP
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	4b15      	ldr	r3, [pc, #84]	; (8004c00 <pxCurrentTCBConst>)
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	f01e 0f10 	tst.w	lr, #16
 8004bb0:	bf08      	it	eq
 8004bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bba:	6010      	str	r0, [r2, #0]
 8004bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004bc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004bc4:	f380 8811 	msr	BASEPRI, r0
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f7fe ff5e 	bl	8003a90 <vTaskSwitchContext>
 8004bd4:	f04f 0000 	mov.w	r0, #0
 8004bd8:	f380 8811 	msr	BASEPRI, r0
 8004bdc:	bc09      	pop	{r0, r3}
 8004bde:	6819      	ldr	r1, [r3, #0]
 8004be0:	6808      	ldr	r0, [r1, #0]
 8004be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be6:	f01e 0f10 	tst.w	lr, #16
 8004bea:	bf08      	it	eq
 8004bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004bf0:	f380 8809 	msr	PSP, r0
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	f3af 8000 	nop.w

08004c00 <pxCurrentTCBConst>:
 8004c00:	20000168 	.word	0x20000168
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop

08004c08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
        __asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	607b      	str	r3, [r7, #4]
    }
 8004c20:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004c22:	f002 fbf9 	bl	8007418 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004c26:	f7fe fe99 	bl	800395c <xTaskIncrementTick>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d006      	beq.n	8004c3e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004c30:	f002 fc50 	bl	80074d4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c34:	4b08      	ldr	r3, [pc, #32]	; (8004c58 <SysTick_Handler+0x50>)
 8004c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	e001      	b.n	8004c42 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004c3e:	f002 fc2d 	bl	800749c <SEGGER_SYSVIEW_RecordExitISR>
 8004c42:	2300      	movs	r3, #0
 8004c44:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	f383 8811 	msr	BASEPRI, r3
    }
 8004c4c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004c4e:	bf00      	nop
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	e000ed04 	.word	0xe000ed04

08004c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c60:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <vPortSetupTimerInterrupt+0x34>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c66:	4b0b      	ldr	r3, [pc, #44]	; (8004c94 <vPortSetupTimerInterrupt+0x38>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <vPortSetupTimerInterrupt+0x3c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a0a      	ldr	r2, [pc, #40]	; (8004c9c <vPortSetupTimerInterrupt+0x40>)
 8004c72:	fba2 2303 	umull	r2, r3, r2, r3
 8004c76:	099b      	lsrs	r3, r3, #6
 8004c78:	4a09      	ldr	r2, [pc, #36]	; (8004ca0 <vPortSetupTimerInterrupt+0x44>)
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c7e:	4b04      	ldr	r3, [pc, #16]	; (8004c90 <vPortSetupTimerInterrupt+0x34>)
 8004c80:	2207      	movs	r2, #7
 8004c82:	601a      	str	r2, [r3, #0]
}
 8004c84:	bf00      	nop
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	e000e010 	.word	0xe000e010
 8004c94:	e000e018 	.word	0xe000e018
 8004c98:	20000000 	.word	0x20000000
 8004c9c:	10624dd3 	.word	0x10624dd3
 8004ca0:	e000e014 	.word	0xe000e014

08004ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004cb4 <vPortEnableVFP+0x10>
 8004ca8:	6801      	ldr	r1, [r0, #0]
 8004caa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004cae:	6001      	str	r1, [r0, #0]
 8004cb0:	4770      	bx	lr
 8004cb2:	0000      	.short	0x0000
 8004cb4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004cb8:	bf00      	nop
 8004cba:	bf00      	nop

08004cbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004cc2:	f3ef 8305 	mrs	r3, IPSR
 8004cc6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2b0f      	cmp	r3, #15
 8004ccc:	d914      	bls.n	8004cf8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004cce:	4a17      	ldr	r2, [pc, #92]	; (8004d2c <vPortValidateInterruptPriority+0x70>)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004cd8:	4b15      	ldr	r3, [pc, #84]	; (8004d30 <vPortValidateInterruptPriority+0x74>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	7afa      	ldrb	r2, [r7, #11]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d20a      	bcs.n	8004cf8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	607b      	str	r3, [r7, #4]
    }
 8004cf4:	bf00      	nop
 8004cf6:	e7fe      	b.n	8004cf6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004cf8:	4b0e      	ldr	r3, [pc, #56]	; (8004d34 <vPortValidateInterruptPriority+0x78>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d00:	4b0d      	ldr	r3, [pc, #52]	; (8004d38 <vPortValidateInterruptPriority+0x7c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d90a      	bls.n	8004d1e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	603b      	str	r3, [r7, #0]
    }
 8004d1a:	bf00      	nop
 8004d1c:	e7fe      	b.n	8004d1c <vPortValidateInterruptPriority+0x60>
    }
 8004d1e:	bf00      	nop
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	e000e3f0 	.word	0xe000e3f0
 8004d30:	200002a8 	.word	0x200002a8
 8004d34:	e000ed0c 	.word	0xe000ed0c
 8004d38:	200002ac 	.word	0x200002ac

08004d3c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08a      	sub	sp, #40	; 0x28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004d44:	2300      	movs	r3, #0
 8004d46:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004d48:	f7fe fd46 	bl	80037d8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004d4c:	4b65      	ldr	r3, [pc, #404]	; (8004ee4 <pvPortMalloc+0x1a8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004d54:	f000 f934 	bl	8004fc0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d58:	4b63      	ldr	r3, [pc, #396]	; (8004ee8 <pvPortMalloc+0x1ac>)
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f040 80a7 	bne.w	8004eb4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d02d      	beq.n	8004dc8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004d6c:	2208      	movs	r2, #8
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d227      	bcs.n	8004dc8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004d78:	2208      	movs	r2, #8
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d021      	beq.n	8004dce <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f023 0307 	bic.w	r3, r3, #7
 8004d90:	3308      	adds	r3, #8
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d214      	bcs.n	8004dc2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f023 0307 	bic.w	r3, r3, #7
 8004d9e:	3308      	adds	r3, #8
 8004da0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d010      	beq.n	8004dce <pvPortMalloc+0x92>
        __asm volatile
 8004dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db0:	f383 8811 	msr	BASEPRI, r3
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	617b      	str	r3, [r7, #20]
    }
 8004dbe:	bf00      	nop
 8004dc0:	e7fe      	b.n	8004dc0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004dc6:	e002      	b.n	8004dce <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	607b      	str	r3, [r7, #4]
 8004dcc:	e000      	b.n	8004dd0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004dce:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d06e      	beq.n	8004eb4 <pvPortMalloc+0x178>
 8004dd6:	4b45      	ldr	r3, [pc, #276]	; (8004eec <pvPortMalloc+0x1b0>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d869      	bhi.n	8004eb4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004de0:	4b43      	ldr	r3, [pc, #268]	; (8004ef0 <pvPortMalloc+0x1b4>)
 8004de2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004de4:	4b42      	ldr	r3, [pc, #264]	; (8004ef0 <pvPortMalloc+0x1b4>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dea:	e004      	b.n	8004df6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d903      	bls.n	8004e08 <pvPortMalloc+0xcc>
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1f1      	bne.n	8004dec <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004e08:	4b36      	ldr	r3, [pc, #216]	; (8004ee4 <pvPortMalloc+0x1a8>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d050      	beq.n	8004eb4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2208      	movs	r2, #8
 8004e18:	4413      	add	r3, r2
 8004e1a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	1ad2      	subs	r2, r2, r3
 8004e2c:	2308      	movs	r3, #8
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d91f      	bls.n	8004e74 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4413      	add	r3, r2
 8004e3a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <pvPortMalloc+0x120>
        __asm volatile
 8004e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	613b      	str	r3, [r7, #16]
    }
 8004e58:	bf00      	nop
 8004e5a:	e7fe      	b.n	8004e5a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	1ad2      	subs	r2, r2, r3
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e6e:	69b8      	ldr	r0, [r7, #24]
 8004e70:	f000 f908 	bl	8005084 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e74:	4b1d      	ldr	r3, [pc, #116]	; (8004eec <pvPortMalloc+0x1b0>)
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	4a1b      	ldr	r2, [pc, #108]	; (8004eec <pvPortMalloc+0x1b0>)
 8004e80:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e82:	4b1a      	ldr	r3, [pc, #104]	; (8004eec <pvPortMalloc+0x1b0>)
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	4b1b      	ldr	r3, [pc, #108]	; (8004ef4 <pvPortMalloc+0x1b8>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d203      	bcs.n	8004e96 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e8e:	4b17      	ldr	r3, [pc, #92]	; (8004eec <pvPortMalloc+0x1b0>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a18      	ldr	r2, [pc, #96]	; (8004ef4 <pvPortMalloc+0x1b8>)
 8004e94:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	4b13      	ldr	r3, [pc, #76]	; (8004ee8 <pvPortMalloc+0x1ac>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004eaa:	4b13      	ldr	r3, [pc, #76]	; (8004ef8 <pvPortMalloc+0x1bc>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	4a11      	ldr	r2, [pc, #68]	; (8004ef8 <pvPortMalloc+0x1bc>)
 8004eb2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004eb4:	f7fe fc9e 	bl	80037f4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	f003 0307 	and.w	r3, r3, #7
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <pvPortMalloc+0x19c>
        __asm volatile
 8004ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	60fb      	str	r3, [r7, #12]
    }
 8004ed4:	bf00      	nop
 8004ed6:	e7fe      	b.n	8004ed6 <pvPortMalloc+0x19a>
    return pvReturn;
 8004ed8:	69fb      	ldr	r3, [r7, #28]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3728      	adds	r7, #40	; 0x28
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	20012eb8 	.word	0x20012eb8
 8004ee8:	20012ecc 	.word	0x20012ecc
 8004eec:	20012ebc 	.word	0x20012ebc
 8004ef0:	20012eb0 	.word	0x20012eb0
 8004ef4:	20012ec0 	.word	0x20012ec0
 8004ef8:	20012ec4 	.word	0x20012ec4

08004efc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d04d      	beq.n	8004faa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004f0e:	2308      	movs	r3, #8
 8004f10:	425b      	negs	r3, r3
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4413      	add	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	4b24      	ldr	r3, [pc, #144]	; (8004fb4 <vPortFree+0xb8>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4013      	ands	r3, r2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10a      	bne.n	8004f40 <vPortFree+0x44>
        __asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	60fb      	str	r3, [r7, #12]
    }
 8004f3c:	bf00      	nop
 8004f3e:	e7fe      	b.n	8004f3e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <vPortFree+0x62>
        __asm volatile
 8004f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	60bb      	str	r3, [r7, #8]
    }
 8004f5a:	bf00      	nop
 8004f5c:	e7fe      	b.n	8004f5c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	4b14      	ldr	r3, [pc, #80]	; (8004fb4 <vPortFree+0xb8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d01e      	beq.n	8004faa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d11a      	bne.n	8004faa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	4b0e      	ldr	r3, [pc, #56]	; (8004fb4 <vPortFree+0xb8>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	43db      	mvns	r3, r3
 8004f7e:	401a      	ands	r2, r3
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004f84:	f7fe fc28 	bl	80037d8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <vPortFree+0xbc>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4413      	add	r3, r2
 8004f92:	4a09      	ldr	r2, [pc, #36]	; (8004fb8 <vPortFree+0xbc>)
 8004f94:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f96:	6938      	ldr	r0, [r7, #16]
 8004f98:	f000 f874 	bl	8005084 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004f9c:	4b07      	ldr	r3, [pc, #28]	; (8004fbc <vPortFree+0xc0>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	4a06      	ldr	r2, [pc, #24]	; (8004fbc <vPortFree+0xc0>)
 8004fa4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004fa6:	f7fe fc25 	bl	80037f4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004faa:	bf00      	nop
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20012ecc 	.word	0x20012ecc
 8004fb8:	20012ebc 	.word	0x20012ebc
 8004fbc:	20012ec8 	.word	0x20012ec8

08004fc0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fc6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004fca:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004fcc:	4b27      	ldr	r3, [pc, #156]	; (800506c <prvHeapInit+0xac>)
 8004fce:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00c      	beq.n	8004ff4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	3307      	adds	r3, #7
 8004fde:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 0307 	bic.w	r3, r3, #7
 8004fe6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	4a1f      	ldr	r2, [pc, #124]	; (800506c <prvHeapInit+0xac>)
 8004ff0:	4413      	add	r3, r2
 8004ff2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ff8:	4a1d      	ldr	r2, [pc, #116]	; (8005070 <prvHeapInit+0xb0>)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004ffe:	4b1c      	ldr	r3, [pc, #112]	; (8005070 <prvHeapInit+0xb0>)
 8005000:	2200      	movs	r2, #0
 8005002:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	4413      	add	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800500c:	2208      	movs	r2, #8
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	1a9b      	subs	r3, r3, r2
 8005012:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f023 0307 	bic.w	r3, r3, #7
 800501a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4a15      	ldr	r2, [pc, #84]	; (8005074 <prvHeapInit+0xb4>)
 8005020:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005022:	4b14      	ldr	r3, [pc, #80]	; (8005074 <prvHeapInit+0xb4>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2200      	movs	r2, #0
 8005028:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800502a:	4b12      	ldr	r3, [pc, #72]	; (8005074 <prvHeapInit+0xb4>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2200      	movs	r2, #0
 8005030:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	1ad2      	subs	r2, r2, r3
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005040:	4b0c      	ldr	r3, [pc, #48]	; (8005074 <prvHeapInit+0xb4>)
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	4a0a      	ldr	r2, [pc, #40]	; (8005078 <prvHeapInit+0xb8>)
 800504e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	4a09      	ldr	r2, [pc, #36]	; (800507c <prvHeapInit+0xbc>)
 8005056:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005058:	4b09      	ldr	r3, [pc, #36]	; (8005080 <prvHeapInit+0xc0>)
 800505a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800505e:	601a      	str	r2, [r3, #0]
}
 8005060:	bf00      	nop
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	200002b0 	.word	0x200002b0
 8005070:	20012eb0 	.word	0x20012eb0
 8005074:	20012eb8 	.word	0x20012eb8
 8005078:	20012ec0 	.word	0x20012ec0
 800507c:	20012ebc 	.word	0x20012ebc
 8005080:	20012ecc 	.word	0x20012ecc

08005084 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800508c:	4b28      	ldr	r3, [pc, #160]	; (8005130 <prvInsertBlockIntoFreeList+0xac>)
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	e002      	b.n	8005098 <prvInsertBlockIntoFreeList+0x14>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d8f7      	bhi.n	8005092 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	4413      	add	r3, r2
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d108      	bne.n	80050c6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	441a      	add	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	441a      	add	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d118      	bne.n	800510c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	4b15      	ldr	r3, [pc, #84]	; (8005134 <prvInsertBlockIntoFreeList+0xb0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d00d      	beq.n	8005102 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	441a      	add	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	e008      	b.n	8005114 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005102:	4b0c      	ldr	r3, [pc, #48]	; (8005134 <prvInsertBlockIntoFreeList+0xb0>)
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	e003      	b.n	8005114 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	429a      	cmp	r2, r3
 800511a:	d002      	beq.n	8005122 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005122:	bf00      	nop
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	20012eb0 	.word	0x20012eb0
 8005134:	20012eb8 	.word	0x20012eb8

08005138 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800513c:	4803      	ldr	r0, [pc, #12]	; (800514c <_cbSendSystemDesc+0x14>)
 800513e:	f002 f915 	bl	800736c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005142:	4803      	ldr	r0, [pc, #12]	; (8005150 <_cbSendSystemDesc+0x18>)
 8005144:	f002 f912 	bl	800736c <SEGGER_SYSVIEW_SendSysDesc>
}
 8005148:	bf00      	nop
 800514a:	bd80      	pop	{r7, pc}
 800514c:	08008da0 	.word	0x08008da0
 8005150:	08008de4 	.word	0x08008de4

08005154 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005158:	4b06      	ldr	r3, [pc, #24]	; (8005174 <SEGGER_SYSVIEW_Conf+0x20>)
 800515a:	6818      	ldr	r0, [r3, #0]
 800515c:	4b05      	ldr	r3, [pc, #20]	; (8005174 <SEGGER_SYSVIEW_Conf+0x20>)
 800515e:	6819      	ldr	r1, [r3, #0]
 8005160:	4b05      	ldr	r3, [pc, #20]	; (8005178 <SEGGER_SYSVIEW_Conf+0x24>)
 8005162:	4a06      	ldr	r2, [pc, #24]	; (800517c <SEGGER_SYSVIEW_Conf+0x28>)
 8005164:	f001 fc7e 	bl	8006a64 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005168:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800516c:	f001 fcbe 	bl	8006aec <SEGGER_SYSVIEW_SetRAMBase>
}
 8005170:	bf00      	nop
 8005172:	bd80      	pop	{r7, pc}
 8005174:	20000000 	.word	0x20000000
 8005178:	08005139 	.word	0x08005139
 800517c:	08008e84 	.word	0x08008e84

08005180 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005182:	b085      	sub	sp, #20
 8005184:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005186:	2300      	movs	r3, #0
 8005188:	607b      	str	r3, [r7, #4]
 800518a:	e033      	b.n	80051f4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800518c:	491e      	ldr	r1, [pc, #120]	; (8005208 <_cbSendTaskList+0x88>)
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	4613      	mov	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	440b      	add	r3, r1
 800519a:	6818      	ldr	r0, [r3, #0]
 800519c:	491a      	ldr	r1, [pc, #104]	; (8005208 <_cbSendTaskList+0x88>)
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	4613      	mov	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	440b      	add	r3, r1
 80051aa:	3304      	adds	r3, #4
 80051ac:	6819      	ldr	r1, [r3, #0]
 80051ae:	4c16      	ldr	r4, [pc, #88]	; (8005208 <_cbSendTaskList+0x88>)
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	4613      	mov	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4423      	add	r3, r4
 80051bc:	3308      	adds	r3, #8
 80051be:	681c      	ldr	r4, [r3, #0]
 80051c0:	4d11      	ldr	r5, [pc, #68]	; (8005208 <_cbSendTaskList+0x88>)
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	4613      	mov	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	442b      	add	r3, r5
 80051ce:	330c      	adds	r3, #12
 80051d0:	681d      	ldr	r5, [r3, #0]
 80051d2:	4e0d      	ldr	r6, [pc, #52]	; (8005208 <_cbSendTaskList+0x88>)
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4433      	add	r3, r6
 80051e0:	3310      	adds	r3, #16
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	462b      	mov	r3, r5
 80051e8:	4622      	mov	r2, r4
 80051ea:	f000 f8bd 	bl	8005368 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	3301      	adds	r3, #1
 80051f2:	607b      	str	r3, [r7, #4]
 80051f4:	4b05      	ldr	r3, [pc, #20]	; (800520c <_cbSendTaskList+0x8c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d3c6      	bcc.n	800518c <_cbSendTaskList+0xc>
  }
}
 80051fe:	bf00      	nop
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005208:	20012ed0 	.word	0x20012ed0
 800520c:	20012f70 	.word	0x20012f70

08005210 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005214:	b082      	sub	sp, #8
 8005216:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005218:	f7fe fb8e 	bl	8003938 <xTaskGetTickCountFromISR>
 800521c:	4603      	mov	r3, r0
 800521e:	2200      	movs	r2, #0
 8005220:	469a      	mov	sl, r3
 8005222:	4693      	mov	fp, r2
 8005224:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005228:	e9d7 0100 	ldrd	r0, r1, [r7]
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	f04f 0a00 	mov.w	sl, #0
 8005234:	f04f 0b00 	mov.w	fp, #0
 8005238:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800523c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8005240:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005244:	4652      	mov	r2, sl
 8005246:	465b      	mov	r3, fp
 8005248:	1a14      	subs	r4, r2, r0
 800524a:	eb63 0501 	sbc.w	r5, r3, r1
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	f04f 0300 	mov.w	r3, #0
 8005256:	00ab      	lsls	r3, r5, #2
 8005258:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800525c:	00a2      	lsls	r2, r4, #2
 800525e:	4614      	mov	r4, r2
 8005260:	461d      	mov	r5, r3
 8005262:	eb14 0800 	adds.w	r8, r4, r0
 8005266:	eb45 0901 	adc.w	r9, r5, r1
 800526a:	f04f 0200 	mov.w	r2, #0
 800526e:	f04f 0300 	mov.w	r3, #0
 8005272:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005276:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800527a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800527e:	4690      	mov	r8, r2
 8005280:	4699      	mov	r9, r3
 8005282:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005286:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800528a:	4610      	mov	r0, r2
 800528c:	4619      	mov	r1, r3
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005298 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af02      	add	r7, sp, #8
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80052a6:	2205      	movs	r2, #5
 80052a8:	492b      	ldr	r1, [pc, #172]	; (8005358 <SYSVIEW_AddTask+0xc0>)
 80052aa:	68b8      	ldr	r0, [r7, #8]
 80052ac:	f002 fd57 	bl	8007d5e <memcmp>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d04b      	beq.n	800534e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80052b6:	4b29      	ldr	r3, [pc, #164]	; (800535c <SYSVIEW_AddTask+0xc4>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b07      	cmp	r3, #7
 80052bc:	d903      	bls.n	80052c6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80052be:	4828      	ldr	r0, [pc, #160]	; (8005360 <SYSVIEW_AddTask+0xc8>)
 80052c0:	f002 fb66 	bl	8007990 <SEGGER_SYSVIEW_Warn>
    return;
 80052c4:	e044      	b.n	8005350 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80052c6:	4b25      	ldr	r3, [pc, #148]	; (800535c <SYSVIEW_AddTask+0xc4>)
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4926      	ldr	r1, [pc, #152]	; (8005364 <SYSVIEW_AddTask+0xcc>)
 80052cc:	4613      	mov	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80052da:	4b20      	ldr	r3, [pc, #128]	; (800535c <SYSVIEW_AddTask+0xc4>)
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	4921      	ldr	r1, [pc, #132]	; (8005364 <SYSVIEW_AddTask+0xcc>)
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	440b      	add	r3, r1
 80052ea:	3304      	adds	r3, #4
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80052f0:	4b1a      	ldr	r3, [pc, #104]	; (800535c <SYSVIEW_AddTask+0xc4>)
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	491b      	ldr	r1, [pc, #108]	; (8005364 <SYSVIEW_AddTask+0xcc>)
 80052f6:	4613      	mov	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	440b      	add	r3, r1
 8005300:	3308      	adds	r3, #8
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005306:	4b15      	ldr	r3, [pc, #84]	; (800535c <SYSVIEW_AddTask+0xc4>)
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	4916      	ldr	r1, [pc, #88]	; (8005364 <SYSVIEW_AddTask+0xcc>)
 800530c:	4613      	mov	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	440b      	add	r3, r1
 8005316:	330c      	adds	r3, #12
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800531c:	4b0f      	ldr	r3, [pc, #60]	; (800535c <SYSVIEW_AddTask+0xc4>)
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	4910      	ldr	r1, [pc, #64]	; (8005364 <SYSVIEW_AddTask+0xcc>)
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	3310      	adds	r3, #16
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005332:	4b0a      	ldr	r3, [pc, #40]	; (800535c <SYSVIEW_AddTask+0xc4>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3301      	adds	r3, #1
 8005338:	4a08      	ldr	r2, [pc, #32]	; (800535c <SYSVIEW_AddTask+0xc4>)
 800533a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 f80e 	bl	8005368 <SYSVIEW_SendTaskInfo>
 800534c:	e000      	b.n	8005350 <SYSVIEW_AddTask+0xb8>
    return;
 800534e:	bf00      	nop

}
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	08008df4 	.word	0x08008df4
 800535c:	20012f70 	.word	0x20012f70
 8005360:	08008dfc 	.word	0x08008dfc
 8005364:	20012ed0 	.word	0x20012ed0

08005368 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005368:	b580      	push	{r7, lr}
 800536a:	b08a      	sub	sp, #40	; 0x28
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005376:	f107 0314 	add.w	r3, r7, #20
 800537a:	2214      	movs	r2, #20
 800537c:	2100      	movs	r1, #0
 800537e:	4618      	mov	r0, r3
 8005380:	f002 fcfd 	bl	8007d7e <memset>
  TaskInfo.TaskID     = TaskID;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005398:	f107 0314 	add.w	r3, r7, #20
 800539c:	4618      	mov	r0, r3
 800539e:	f001 feed 	bl	800717c <SEGGER_SYSVIEW_SendTaskInfo>
}
 80053a2:	bf00      	nop
 80053a4:	3728      	adds	r7, #40	; 0x28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <__NVIC_EnableIRQ>:
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	4603      	mov	r3, r0
 80053b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	db0b      	blt.n	80053d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053be:	79fb      	ldrb	r3, [r7, #7]
 80053c0:	f003 021f 	and.w	r2, r3, #31
 80053c4:	4907      	ldr	r1, [pc, #28]	; (80053e4 <__NVIC_EnableIRQ+0x38>)
 80053c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ca:	095b      	lsrs	r3, r3, #5
 80053cc:	2001      	movs	r0, #1
 80053ce:	fa00 f202 	lsl.w	r2, r0, r2
 80053d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80053d6:	bf00      	nop
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	e000e100 	.word	0xe000e100

080053e8 <__NVIC_SetPriority>:
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	4603      	mov	r3, r0
 80053f0:	6039      	str	r1, [r7, #0]
 80053f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	db0a      	blt.n	8005412 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	490c      	ldr	r1, [pc, #48]	; (8005434 <__NVIC_SetPriority+0x4c>)
 8005402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005406:	0112      	lsls	r2, r2, #4
 8005408:	b2d2      	uxtb	r2, r2
 800540a:	440b      	add	r3, r1
 800540c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005410:	e00a      	b.n	8005428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	b2da      	uxtb	r2, r3
 8005416:	4908      	ldr	r1, [pc, #32]	; (8005438 <__NVIC_SetPriority+0x50>)
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	3b04      	subs	r3, #4
 8005420:	0112      	lsls	r2, r2, #4
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	440b      	add	r3, r1
 8005426:	761a      	strb	r2, [r3, #24]
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	e000e100 	.word	0xe000e100
 8005438:	e000ed00 	.word	0xe000ed00

0800543c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8005442:	f002 fb01 	bl	8007a48 <SEGGER_SYSVIEW_IsStarted>
 8005446:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800544e:	f001 fd19 	bl	8006e84 <SEGGER_SYSVIEW_Start>
  }
}
 8005452:	bf00      	nop
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
	...

0800545c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	4603      	mov	r3, r0
 8005464:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8005466:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <_cbOnUARTRx+0x3c>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	2b03      	cmp	r3, #3
 800546c:	d806      	bhi.n	800547c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800546e:	4b0a      	ldr	r3, [pc, #40]	; (8005498 <_cbOnUARTRx+0x3c>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	3301      	adds	r3, #1
 8005474:	b2da      	uxtb	r2, r3
 8005476:	4b08      	ldr	r3, [pc, #32]	; (8005498 <_cbOnUARTRx+0x3c>)
 8005478:	701a      	strb	r2, [r3, #0]
    goto Done;
 800547a:	e009      	b.n	8005490 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800547c:	f7ff ffde 	bl	800543c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005480:	4b05      	ldr	r3, [pc, #20]	; (8005498 <_cbOnUARTRx+0x3c>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	4618      	mov	r0, r3
 8005486:	1dfb      	adds	r3, r7, #7
 8005488:	2201      	movs	r2, #1
 800548a:	4619      	mov	r1, r3
 800548c:	f000 fbea 	bl	8005c64 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005490:	bf00      	nop
}
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	20000014 	.word	0x20000014

0800549c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80054a4:	4b14      	ldr	r3, [pc, #80]	; (80054f8 <_cbOnUARTTx+0x5c>)
 80054a6:	785b      	ldrb	r3, [r3, #1]
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	d80f      	bhi.n	80054cc <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80054ac:	4b12      	ldr	r3, [pc, #72]	; (80054f8 <_cbOnUARTTx+0x5c>)
 80054ae:	785b      	ldrb	r3, [r3, #1]
 80054b0:	461a      	mov	r2, r3
 80054b2:	4b12      	ldr	r3, [pc, #72]	; (80054fc <_cbOnUARTTx+0x60>)
 80054b4:	5c9a      	ldrb	r2, [r3, r2]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80054ba:	4b0f      	ldr	r3, [pc, #60]	; (80054f8 <_cbOnUARTTx+0x5c>)
 80054bc:	785b      	ldrb	r3, [r3, #1]
 80054be:	3301      	adds	r3, #1
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	4b0d      	ldr	r3, [pc, #52]	; (80054f8 <_cbOnUARTTx+0x5c>)
 80054c4:	705a      	strb	r2, [r3, #1]
    r = 1;
 80054c6:	2301      	movs	r3, #1
 80054c8:	60fb      	str	r3, [r7, #12]
    goto Done;
 80054ca:	e00f      	b.n	80054ec <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80054cc:	4b0a      	ldr	r3, [pc, #40]	; (80054f8 <_cbOnUARTTx+0x5c>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 fa19 	bl	800590c <SEGGER_RTT_ReadUpBufferNoLock>
 80054da:	4603      	mov	r3, r0
 80054dc:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	da02      	bge.n	80054ea <_cbOnUARTTx+0x4e>
    r = 0;
 80054e4:	2300      	movs	r3, #0
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	e000      	b.n	80054ec <_cbOnUARTTx+0x50>
  }
Done:
 80054ea:	bf00      	nop
  return r;
 80054ec:	68fb      	ldr	r3, [r7, #12]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	20000014 	.word	0x20000014
 80054fc:	08008e8c 	.word	0x08008e8c

08005500 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005508:	4a04      	ldr	r2, [pc, #16]	; (800551c <SEGGER_UART_init+0x1c>)
 800550a:	4905      	ldr	r1, [pc, #20]	; (8005520 <SEGGER_UART_init+0x20>)
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f863 	bl	80055d8 <HIF_UART_Init>
}
 8005512:	bf00      	nop
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	0800545d 	.word	0x0800545d
 8005520:	0800549d 	.word	0x0800549d

08005524 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800552a:	4b1e      	ldr	r3, [pc, #120]	; (80055a4 <USART2_IRQHandler+0x80>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b00      	cmp	r3, #0
 8005538:	d011      	beq.n	800555e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800553a:	4b1b      	ldr	r3, [pc, #108]	; (80055a8 <USART2_IRQHandler+0x84>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	b2db      	uxtb	r3, r3
 8005540:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f003 030b 	and.w	r3, r3, #11
 8005548:	2b00      	cmp	r3, #0
 800554a:	d108      	bne.n	800555e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800554c:	4b17      	ldr	r3, [pc, #92]	; (80055ac <USART2_IRQHandler+0x88>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d004      	beq.n	800555e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005554:	4b15      	ldr	r3, [pc, #84]	; (80055ac <USART2_IRQHandler+0x88>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	79fa      	ldrb	r2, [r7, #7]
 800555a:	4610      	mov	r0, r2
 800555c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005564:	2b00      	cmp	r3, #0
 8005566:	d01a      	beq.n	800559e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005568:	4b11      	ldr	r3, [pc, #68]	; (80055b0 <USART2_IRQHandler+0x8c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d015      	beq.n	800559c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005570:	4b0f      	ldr	r3, [pc, #60]	; (80055b0 <USART2_IRQHandler+0x8c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	1dfa      	adds	r2, r7, #7
 8005576:	4610      	mov	r0, r2
 8005578:	4798      	blx	r3
 800557a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005582:	4b0c      	ldr	r3, [pc, #48]	; (80055b4 <USART2_IRQHandler+0x90>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a0b      	ldr	r2, [pc, #44]	; (80055b4 <USART2_IRQHandler+0x90>)
 8005588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	e006      	b.n	800559e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005590:	4b04      	ldr	r3, [pc, #16]	; (80055a4 <USART2_IRQHandler+0x80>)
 8005592:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005594:	79fa      	ldrb	r2, [r7, #7]
 8005596:	4b04      	ldr	r3, [pc, #16]	; (80055a8 <USART2_IRQHandler+0x84>)
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	e000      	b.n	800559e <USART2_IRQHandler+0x7a>
      return;
 800559c:	bf00      	nop
    }
  }
}
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	40004400 	.word	0x40004400
 80055a8:	40004404 	.word	0x40004404
 80055ac:	20012f74 	.word	0x20012f74
 80055b0:	20012f78 	.word	0x20012f78
 80055b4:	4000440c 	.word	0x4000440c

080055b8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80055b8:	b480      	push	{r7}
 80055ba:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80055bc:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a04      	ldr	r2, [pc, #16]	; (80055d4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80055c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c6:	6013      	str	r3, [r2, #0]
}
 80055c8:	bf00      	nop
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	4000440c 	.word	0x4000440c

080055d8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80055e4:	4b2e      	ldr	r3, [pc, #184]	; (80056a0 <HIF_UART_Init+0xc8>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a2d      	ldr	r2, [pc, #180]	; (80056a0 <HIF_UART_Init+0xc8>)
 80055ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055ee:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80055f0:	4b2c      	ldr	r3, [pc, #176]	; (80056a4 <HIF_UART_Init+0xcc>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a2b      	ldr	r2, [pc, #172]	; (80056a4 <HIF_UART_Init+0xcc>)
 80055f6:	f043 0301 	orr.w	r3, r3, #1
 80055fa:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80055fc:	4b2a      	ldr	r3, [pc, #168]	; (80056a8 <HIF_UART_Init+0xd0>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005608:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8005610:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005612:	4a25      	ldr	r2, [pc, #148]	; (80056a8 <HIF_UART_Init+0xd0>)
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005618:	4b24      	ldr	r3, [pc, #144]	; (80056ac <HIF_UART_Init+0xd4>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005624:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800562c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800562e:	4a1f      	ldr	r2, [pc, #124]	; (80056ac <HIF_UART_Init+0xd4>)
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005634:	4b1e      	ldr	r3, [pc, #120]	; (80056b0 <HIF_UART_Init+0xd8>)
 8005636:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800563a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800563c:	4b1d      	ldr	r3, [pc, #116]	; (80056b4 <HIF_UART_Init+0xdc>)
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005642:	4b1d      	ldr	r3, [pc, #116]	; (80056b8 <HIF_UART_Init+0xe0>)
 8005644:	2280      	movs	r2, #128	; 0x80
 8005646:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800564e:	4a1b      	ldr	r2, [pc, #108]	; (80056bc <HIF_UART_Init+0xe4>)
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	fbb2 f3f3 	udiv	r3, r2, r3
 8005656:	3301      	adds	r3, #1
 8005658:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	085b      	lsrs	r3, r3, #1
 800565e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005666:	d302      	bcc.n	800566e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005668:	f640 73ff 	movw	r3, #4095	; 0xfff
 800566c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d004      	beq.n	800567e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	4a11      	ldr	r2, [pc, #68]	; (80056c0 <HIF_UART_Init+0xe8>)
 800567a:	b29b      	uxth	r3, r3
 800567c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800567e:	4a11      	ldr	r2, [pc, #68]	; (80056c4 <HIF_UART_Init+0xec>)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005684:	4a10      	ldr	r2, [pc, #64]	; (80056c8 <HIF_UART_Init+0xf0>)
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800568a:	2106      	movs	r1, #6
 800568c:	2026      	movs	r0, #38	; 0x26
 800568e:	f7ff feab 	bl	80053e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005692:	2026      	movs	r0, #38	; 0x26
 8005694:	f7ff fe8a 	bl	80053ac <__NVIC_EnableIRQ>
}
 8005698:	bf00      	nop
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	40023840 	.word	0x40023840
 80056a4:	40023830 	.word	0x40023830
 80056a8:	40020020 	.word	0x40020020
 80056ac:	40020000 	.word	0x40020000
 80056b0:	4000440c 	.word	0x4000440c
 80056b4:	40004410 	.word	0x40004410
 80056b8:	40004414 	.word	0x40004414
 80056bc:	0501bd00 	.word	0x0501bd00
 80056c0:	40004408 	.word	0x40004408
 80056c4:	20012f74 	.word	0x20012f74
 80056c8:	20012f78 	.word	0x20012f78

080056cc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80056d2:	4b24      	ldr	r3, [pc, #144]	; (8005764 <_DoInit+0x98>)
 80056d4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2203      	movs	r2, #3
 80056da:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2203      	movs	r2, #3
 80056e0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a20      	ldr	r2, [pc, #128]	; (8005768 <_DoInit+0x9c>)
 80056e6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a20      	ldr	r2, [pc, #128]	; (800576c <_DoInit+0xa0>)
 80056ec:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056f4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a17      	ldr	r2, [pc, #92]	; (8005768 <_DoInit+0x9c>)
 800570c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a17      	ldr	r2, [pc, #92]	; (8005770 <_DoInit+0xa4>)
 8005712:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2210      	movs	r2, #16
 8005718:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3307      	adds	r3, #7
 8005730:	4a10      	ldr	r2, [pc, #64]	; (8005774 <_DoInit+0xa8>)
 8005732:	6810      	ldr	r0, [r2, #0]
 8005734:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005736:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a0e      	ldr	r2, [pc, #56]	; (8005778 <_DoInit+0xac>)
 800573e:	6810      	ldr	r0, [r2, #0]
 8005740:	6018      	str	r0, [r3, #0]
 8005742:	8891      	ldrh	r1, [r2, #4]
 8005744:	7992      	ldrb	r2, [r2, #6]
 8005746:	8099      	strh	r1, [r3, #4]
 8005748:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800574a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2220      	movs	r2, #32
 8005752:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005754:	f3bf 8f5f 	dmb	sy
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	20012f7c 	.word	0x20012f7c
 8005768:	08008e4c 	.word	0x08008e4c
 800576c:	20013024 	.word	0x20013024
 8005770:	20013424 	.word	0x20013424
 8005774:	08008e58 	.word	0x08008e58
 8005778:	08008e5c 	.word	0x08008e5c

0800577c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800577c:	b580      	push	{r7, lr}
 800577e:	b08a      	sub	sp, #40	; 0x28
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005788:	2300      	movs	r3, #0
 800578a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	429a      	cmp	r2, r3
 800579e:	d905      	bls.n	80057ac <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	3b01      	subs	r3, #1
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24
 80057aa:	e007      	b.n	80057bc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	69b9      	ldr	r1, [r7, #24]
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	1acb      	subs	r3, r1, r3
 80057b6:	4413      	add	r3, r2
 80057b8:	3b01      	subs	r3, #1
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c6:	4293      	cmp	r3, r2
 80057c8:	bf28      	it	cs
 80057ca:	4613      	movcs	r3, r2
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80057ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4293      	cmp	r3, r2
 80057d4:	bf28      	it	cs
 80057d6:	4613      	movcs	r3, r2
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	4413      	add	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80057e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e6:	68b9      	ldr	r1, [r7, #8]
 80057e8:	6978      	ldr	r0, [r7, #20]
 80057ea:	f002 fb2c 	bl	8007e46 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80057ee:	6a3a      	ldr	r2, [r7, #32]
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	4413      	add	r3, r2
 80057f4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	4413      	add	r3, r2
 80057fc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005806:	69fa      	ldr	r2, [r7, #28]
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	4413      	add	r3, r2
 800580c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	69fa      	ldr	r2, [r7, #28]
 8005814:	429a      	cmp	r2, r3
 8005816:	d101      	bne.n	800581c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005818:	2300      	movs	r3, #0
 800581a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800581c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	69fa      	ldr	r2, [r7, #28]
 8005824:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1b2      	bne.n	8005792 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800582c:	6a3b      	ldr	r3, [r7, #32]
}
 800582e:	4618      	mov	r0, r3
 8005830:	3728      	adds	r7, #40	; 0x28
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005836:	b580      	push	{r7, lr}
 8005838:	b088      	sub	sp, #32
 800583a:	af00      	add	r7, sp, #0
 800583c:	60f8      	str	r0, [r7, #12]
 800583e:	60b9      	str	r1, [r7, #8]
 8005840:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	429a      	cmp	r2, r3
 8005858:	d911      	bls.n	800587e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	4413      	add	r3, r2
 8005862:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	68b9      	ldr	r1, [r7, #8]
 8005868:	6938      	ldr	r0, [r7, #16]
 800586a:	f002 faec 	bl	8007e46 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800586e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005872:	69fa      	ldr	r2, [r7, #28]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	441a      	add	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800587c:	e01f      	b.n	80058be <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	4413      	add	r3, r2
 800588a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	68b9      	ldr	r1, [r7, #8]
 8005890:	6938      	ldr	r0, [r7, #16]
 8005892:	f002 fad8 	bl	8007e46 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	4413      	add	r3, r2
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4619      	mov	r1, r3
 80058ae:	6938      	ldr	r0, [r7, #16]
 80058b0:	f002 fac9 	bl	8007e46 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80058b4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	60da      	str	r2, [r3, #12]
}
 80058be:	bf00      	nop
 80058c0:	3720      	adds	r7, #32
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80058c6:	b480      	push	{r7}
 80058c8:	b087      	sub	sp, #28
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d808      	bhi.n	80058f4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	1ad2      	subs	r2, r2, r3
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	4413      	add	r3, r2
 80058ee:	3b01      	subs	r3, #1
 80058f0:	617b      	str	r3, [r7, #20]
 80058f2:	e004      	b.n	80058fe <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	3b01      	subs	r3, #1
 80058fc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80058fe:	697b      	ldr	r3, [r7, #20]
}
 8005900:	4618      	mov	r0, r3
 8005902:	371c      	adds	r7, #28
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800590c:	b580      	push	{r7, lr}
 800590e:	b08c      	sub	sp, #48	; 0x30
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005918:	4b3e      	ldr	r3, [pc, #248]	; (8005a14 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800591a:	623b      	str	r3, [r7, #32]
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005926:	f7ff fed1 	bl	80056cc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	1c5a      	adds	r2, r3, #1
 800592e:	4613      	mov	r3, r2
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	4413      	add	r3, r2
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	4a37      	ldr	r2, [pc, #220]	; (8005a14 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005938:	4413      	add	r3, r2
 800593a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800594c:	2300      	movs	r3, #0
 800594e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	429a      	cmp	r2, r3
 8005956:	d92b      	bls.n	80059b0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4293      	cmp	r3, r2
 8005968:	bf28      	it	cs
 800596a:	4613      	movcs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005974:	4413      	add	r3, r2
 8005976:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	6939      	ldr	r1, [r7, #16]
 800597c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800597e:	f002 fa62 	bl	8007e46 <memcpy>
    NumBytesRead += NumBytesRem;
 8005982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	4413      	add	r3, r2
 8005988:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800598a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	4413      	add	r3, r2
 8005990:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800599a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	4413      	add	r3, r2
 80059a0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d101      	bne.n	80059b0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80059ac:	2300      	movs	r3, #0
 80059ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80059b0:	69ba      	ldr	r2, [r7, #24]
 80059b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4293      	cmp	r3, r2
 80059be:	bf28      	it	cs
 80059c0:	4613      	movcs	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d019      	beq.n	80059fe <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d0:	4413      	add	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	6939      	ldr	r1, [r7, #16]
 80059d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059da:	f002 fa34 	bl	8007e46 <memcpy>
    NumBytesRead += NumBytesRem;
 80059de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	4413      	add	r3, r2
 80059e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80059e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	4413      	add	r3, r2
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80059f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	4413      	add	r3, r2
 80059fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80059fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a08:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3730      	adds	r7, #48	; 0x30
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	20012f7c 	.word	0x20012f7c

08005a18 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08c      	sub	sp, #48	; 0x30
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005a24:	4b3e      	ldr	r3, [pc, #248]	; (8005b20 <SEGGER_RTT_ReadNoLock+0x108>)
 8005a26:	623b      	str	r3, [r7, #32]
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <SEGGER_RTT_ReadNoLock+0x1e>
 8005a32:	f7ff fe4b 	bl	80056cc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	005b      	lsls	r3, r3, #1
 8005a3c:	4413      	add	r3, r2
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	3360      	adds	r3, #96	; 0x60
 8005a42:	4a37      	ldr	r2, [pc, #220]	; (8005b20 <SEGGER_RTT_ReadNoLock+0x108>)
 8005a44:	4413      	add	r3, r2
 8005a46:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005a5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d92b      	bls.n	8005abc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4293      	cmp	r3, r2
 8005a74:	bf28      	it	cs
 8005a76:	4613      	movcs	r3, r2
 8005a78:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a80:	4413      	add	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	6939      	ldr	r1, [r7, #16]
 8005a88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a8a:	f002 f9dc 	bl	8007e46 <memcpy>
    NumBytesRead += NumBytesRem;
 8005a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	4413      	add	r3, r2
 8005a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005aa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	4413      	add	r3, r2
 8005aac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d101      	bne.n	8005abc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	bf28      	it	cs
 8005acc:	4613      	movcs	r3, r2
 8005ace:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d019      	beq.n	8005b0a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005adc:	4413      	add	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	6939      	ldr	r1, [r7, #16]
 8005ae4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ae6:	f002 f9ae 	bl	8007e46 <memcpy>
    NumBytesRead += NumBytesRem;
 8005aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	4413      	add	r3, r2
 8005af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	4413      	add	r3, r2
 8005af8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	4413      	add	r3, r2
 8005b08:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b14:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3730      	adds	r7, #48	; 0x30
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	20012f7c 	.word	0x20012f7c

08005b24 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b088      	sub	sp, #32
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	4613      	mov	r3, r2
 8005b38:	005b      	lsls	r3, r3, #1
 8005b3a:	4413      	add	r3, r2
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	3360      	adds	r3, #96	; 0x60
 8005b40:	4a1f      	ldr	r2, [pc, #124]	; (8005bc0 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005b42:	4413      	add	r3, r2
 8005b44:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d029      	beq.n	8005ba2 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d82e      	bhi.n	8005bb0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d013      	beq.n	8005b82 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005b5a:	e029      	b.n	8005bb0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005b5c:	6978      	ldr	r0, [r7, #20]
 8005b5e:	f7ff feb2 	bl	80058c6 <_GetAvailWriteSpace>
 8005b62:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d202      	bcs.n	8005b72 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005b70:	e021      	b.n	8005bb6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	69b9      	ldr	r1, [r7, #24]
 8005b7a:	6978      	ldr	r0, [r7, #20]
 8005b7c:	f7ff fe5b 	bl	8005836 <_WriteNoCheck>
    break;
 8005b80:	e019      	b.n	8005bb6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005b82:	6978      	ldr	r0, [r7, #20]
 8005b84:	f7ff fe9f 	bl	80058c6 <_GetAvailWriteSpace>
 8005b88:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	bf28      	it	cs
 8005b92:	4613      	movcs	r3, r2
 8005b94:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005b96:	69fa      	ldr	r2, [r7, #28]
 8005b98:	69b9      	ldr	r1, [r7, #24]
 8005b9a:	6978      	ldr	r0, [r7, #20]
 8005b9c:	f7ff fe4b 	bl	8005836 <_WriteNoCheck>
    break;
 8005ba0:	e009      	b.n	8005bb6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	69b9      	ldr	r1, [r7, #24]
 8005ba6:	6978      	ldr	r0, [r7, #20]
 8005ba8:	f7ff fde8 	bl	800577c <_WriteBlocking>
 8005bac:	61f8      	str	r0, [r7, #28]
    break;
 8005bae:	e002      	b.n	8005bb6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	61fb      	str	r3, [r7, #28]
    break;
 8005bb4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005bb6:	69fb      	ldr	r3, [r7, #28]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3720      	adds	r7, #32
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	20012f7c 	.word	0x20012f7c

08005bc4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b088      	sub	sp, #32
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	1c5a      	adds	r2, r3, #1
 8005bd8:	4613      	mov	r3, r2
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	4413      	add	r3, r2
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	4a1f      	ldr	r2, [pc, #124]	; (8005c60 <SEGGER_RTT_WriteNoLock+0x9c>)
 8005be2:	4413      	add	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d029      	beq.n	8005c42 <SEGGER_RTT_WriteNoLock+0x7e>
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d82e      	bhi.n	8005c50 <SEGGER_RTT_WriteNoLock+0x8c>
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d002      	beq.n	8005bfc <SEGGER_RTT_WriteNoLock+0x38>
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d013      	beq.n	8005c22 <SEGGER_RTT_WriteNoLock+0x5e>
 8005bfa:	e029      	b.n	8005c50 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005bfc:	6978      	ldr	r0, [r7, #20]
 8005bfe:	f7ff fe62 	bl	80058c6 <_GetAvailWriteSpace>
 8005c02:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d202      	bcs.n	8005c12 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005c10:	e021      	b.n	8005c56 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	69b9      	ldr	r1, [r7, #24]
 8005c1a:	6978      	ldr	r0, [r7, #20]
 8005c1c:	f7ff fe0b 	bl	8005836 <_WriteNoCheck>
    break;
 8005c20:	e019      	b.n	8005c56 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005c22:	6978      	ldr	r0, [r7, #20]
 8005c24:	f7ff fe4f 	bl	80058c6 <_GetAvailWriteSpace>
 8005c28:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	bf28      	it	cs
 8005c32:	4613      	movcs	r3, r2
 8005c34:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	69b9      	ldr	r1, [r7, #24]
 8005c3a:	6978      	ldr	r0, [r7, #20]
 8005c3c:	f7ff fdfb 	bl	8005836 <_WriteNoCheck>
    break;
 8005c40:	e009      	b.n	8005c56 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	69b9      	ldr	r1, [r7, #24]
 8005c46:	6978      	ldr	r0, [r7, #20]
 8005c48:	f7ff fd98 	bl	800577c <_WriteBlocking>
 8005c4c:	61f8      	str	r0, [r7, #28]
    break;
 8005c4e:	e002      	b.n	8005c56 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8005c50:	2300      	movs	r3, #0
 8005c52:	61fb      	str	r3, [r7, #28]
    break;
 8005c54:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005c56:	69fb      	ldr	r3, [r7, #28]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3720      	adds	r7, #32
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	20012f7c 	.word	0x20012f7c

08005c64 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b088      	sub	sp, #32
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005c70:	4b0e      	ldr	r3, [pc, #56]	; (8005cac <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005c72:	61fb      	str	r3, [r7, #28]
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005c7e:	f7ff fd25 	bl	80056cc <_DoInit>
  SEGGER_RTT_LOCK();
 8005c82:	f3ef 8311 	mrs	r3, BASEPRI
 8005c86:	f04f 0120 	mov.w	r1, #32
 8005c8a:	f381 8811 	msr	BASEPRI, r1
 8005c8e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	68b9      	ldr	r1, [r7, #8]
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f7ff ff45 	bl	8005b24 <SEGGER_RTT_WriteDownBufferNoLock>
 8005c9a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005ca2:	697b      	ldr	r3, [r7, #20]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3720      	adds	r7, #32
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	20012f7c 	.word	0x20012f7c

08005cb0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b088      	sub	sp, #32
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005cbc:	4b0e      	ldr	r3, [pc, #56]	; (8005cf8 <SEGGER_RTT_Write+0x48>)
 8005cbe:	61fb      	str	r3, [r7, #28]
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <SEGGER_RTT_Write+0x1e>
 8005cca:	f7ff fcff 	bl	80056cc <_DoInit>
  SEGGER_RTT_LOCK();
 8005cce:	f3ef 8311 	mrs	r3, BASEPRI
 8005cd2:	f04f 0120 	mov.w	r1, #32
 8005cd6:	f381 8811 	msr	BASEPRI, r1
 8005cda:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	68b9      	ldr	r1, [r7, #8]
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f7ff ff6f 	bl	8005bc4 <SEGGER_RTT_WriteNoLock>
 8005ce6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005cee:	697b      	ldr	r3, [r7, #20]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3720      	adds	r7, #32
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	20012f7c 	.word	0x20012f7c

08005cfc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
 8005d08:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005d0a:	4b3d      	ldr	r3, [pc, #244]	; (8005e00 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005d0c:	61bb      	str	r3, [r7, #24]
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d101      	bne.n	8005d1c <SEGGER_RTT_AllocUpBuffer+0x20>
 8005d18:	f7ff fcd8 	bl	80056cc <_DoInit>
  SEGGER_RTT_LOCK();
 8005d1c:	f3ef 8311 	mrs	r3, BASEPRI
 8005d20:	f04f 0120 	mov.w	r1, #32
 8005d24:	f381 8811 	msr	BASEPRI, r1
 8005d28:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005d2a:	4b35      	ldr	r3, [pc, #212]	; (8005e00 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005d2c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005d32:	6939      	ldr	r1, [r7, #16]
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	4613      	mov	r3, r2
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	4413      	add	r3, r2
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	440b      	add	r3, r1
 8005d42:	3304      	adds	r3, #4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d008      	beq.n	8005d5c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	69fa      	ldr	r2, [r7, #28]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	dbeb      	blt.n	8005d32 <SEGGER_RTT_AllocUpBuffer+0x36>
 8005d5a:	e000      	b.n	8005d5e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005d5c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	69fa      	ldr	r2, [r7, #28]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	da3f      	bge.n	8005de8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005d68:	6939      	ldr	r1, [r7, #16]
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	1c5a      	adds	r2, r3, #1
 8005d6e:	4613      	mov	r3, r2
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	4413      	add	r3, r2
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	440b      	add	r3, r1
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005d7c:	6939      	ldr	r1, [r7, #16]
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	4613      	mov	r3, r2
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	4413      	add	r3, r2
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	440b      	add	r3, r1
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005d92:	6939      	ldr	r1, [r7, #16]
 8005d94:	69fa      	ldr	r2, [r7, #28]
 8005d96:	4613      	mov	r3, r2
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	4413      	add	r3, r2
 8005d9c:	00db      	lsls	r3, r3, #3
 8005d9e:	440b      	add	r3, r1
 8005da0:	3320      	adds	r3, #32
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005da6:	6939      	ldr	r1, [r7, #16]
 8005da8:	69fa      	ldr	r2, [r7, #28]
 8005daa:	4613      	mov	r3, r2
 8005dac:	005b      	lsls	r3, r3, #1
 8005dae:	4413      	add	r3, r2
 8005db0:	00db      	lsls	r3, r3, #3
 8005db2:	440b      	add	r3, r1
 8005db4:	3328      	adds	r3, #40	; 0x28
 8005db6:	2200      	movs	r2, #0
 8005db8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005dba:	6939      	ldr	r1, [r7, #16]
 8005dbc:	69fa      	ldr	r2, [r7, #28]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	4413      	add	r3, r2
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	440b      	add	r3, r1
 8005dc8:	3324      	adds	r3, #36	; 0x24
 8005dca:	2200      	movs	r2, #0
 8005dcc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005dce:	6939      	ldr	r1, [r7, #16]
 8005dd0:	69fa      	ldr	r2, [r7, #28]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	4413      	add	r3, r2
 8005dd8:	00db      	lsls	r3, r3, #3
 8005dda:	440b      	add	r3, r1
 8005ddc:	332c      	adds	r3, #44	; 0x2c
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005de2:	f3bf 8f5f 	dmb	sy
 8005de6:	e002      	b.n	8005dee <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005de8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dec:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005df4:	69fb      	ldr	r3, [r7, #28]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3720      	adds	r7, #32
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	20012f7c 	.word	0x20012f7c

08005e04 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b088      	sub	sp, #32
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005e12:	4b33      	ldr	r3, [pc, #204]	; (8005ee0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005e14:	61bb      	str	r3, [r7, #24]
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005e20:	f7ff fc54 	bl	80056cc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005e24:	4b2e      	ldr	r3, [pc, #184]	; (8005ee0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005e26:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d24d      	bcs.n	8005ed0 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005e34:	f3ef 8311 	mrs	r3, BASEPRI
 8005e38:	f04f 0120 	mov.w	r1, #32
 8005e3c:	f381 8811 	msr	BASEPRI, r1
 8005e40:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d031      	beq.n	8005eac <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005e48:	6979      	ldr	r1, [r7, #20]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	4413      	add	r3, r2
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	440b      	add	r3, r1
 8005e56:	3360      	adds	r3, #96	; 0x60
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005e5c:	6979      	ldr	r1, [r7, #20]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	4613      	mov	r3, r2
 8005e62:	005b      	lsls	r3, r3, #1
 8005e64:	4413      	add	r3, r2
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	440b      	add	r3, r1
 8005e6a:	3364      	adds	r3, #100	; 0x64
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005e70:	6979      	ldr	r1, [r7, #20]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	4613      	mov	r3, r2
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	4413      	add	r3, r2
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	440b      	add	r3, r1
 8005e7e:	3368      	adds	r3, #104	; 0x68
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005e84:	6979      	ldr	r1, [r7, #20]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	4413      	add	r3, r2
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	440b      	add	r3, r1
 8005e92:	3370      	adds	r3, #112	; 0x70
 8005e94:	2200      	movs	r2, #0
 8005e96:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005e98:	6979      	ldr	r1, [r7, #20]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	005b      	lsls	r3, r3, #1
 8005ea0:	4413      	add	r3, r2
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	440b      	add	r3, r1
 8005ea6:	336c      	adds	r3, #108	; 0x6c
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005eac:	6979      	ldr	r1, [r7, #20]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	005b      	lsls	r3, r3, #1
 8005eb4:	4413      	add	r3, r2
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	440b      	add	r3, r1
 8005eba:	3374      	adds	r3, #116	; 0x74
 8005ebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ebe:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005ec0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	61fb      	str	r3, [r7, #28]
 8005ece:	e002      	b.n	8005ed6 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed4:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005ed6:	69fb      	ldr	r3, [r7, #28]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3720      	adds	r7, #32
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20012f7c 	.word	0x20012f7c

08005ee4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005ef4:	e002      	b.n	8005efc <_EncodeStr+0x18>
    Len++;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	4413      	add	r3, r2
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1f6      	bne.n	8005ef6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d901      	bls.n	8005f14 <_EncodeStr+0x30>
    Len = Limit;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	2bfe      	cmp	r3, #254	; 0xfe
 8005f18:	d806      	bhi.n	8005f28 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	60fa      	str	r2, [r7, #12]
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	701a      	strb	r2, [r3, #0]
 8005f26:	e011      	b.n	8005f4c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	60fa      	str	r2, [r7, #12]
 8005f2e:	22ff      	movs	r2, #255	; 0xff
 8005f30:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	60fa      	str	r2, [r7, #12]
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	0a19      	lsrs	r1, r3, #8
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	60fa      	str	r2, [r7, #12]
 8005f48:	b2ca      	uxtb	r2, r1
 8005f4a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005f50:	e00a      	b.n	8005f68 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	1c53      	adds	r3, r2, #1
 8005f56:	60bb      	str	r3, [r7, #8]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	1c59      	adds	r1, r3, #1
 8005f5c:	60f9      	str	r1, [r7, #12]
 8005f5e:	7812      	ldrb	r2, [r2, #0]
 8005f60:	701a      	strb	r2, [r3, #0]
    n++;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	3301      	adds	r3, #1
 8005f66:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d3f0      	bcc.n	8005f52 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005f70:	68fb      	ldr	r3, [r7, #12]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	371c      	adds	r7, #28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	3304      	adds	r3, #4
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
	...

08005f98 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005f9e:	4b35      	ldr	r3, [pc, #212]	; (8006074 <_HandleIncomingPacket+0xdc>)
 8005fa0:	7e1b      	ldrb	r3, [r3, #24]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	1cfb      	adds	r3, r7, #3
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	4619      	mov	r1, r3
 8005faa:	f7ff fd35 	bl	8005a18 <SEGGER_RTT_ReadNoLock>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	dd59      	ble.n	800606c <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005fb8:	78fb      	ldrb	r3, [r7, #3]
 8005fba:	2b80      	cmp	r3, #128	; 0x80
 8005fbc:	d032      	beq.n	8006024 <_HandleIncomingPacket+0x8c>
 8005fbe:	2b80      	cmp	r3, #128	; 0x80
 8005fc0:	dc42      	bgt.n	8006048 <_HandleIncomingPacket+0xb0>
 8005fc2:	2b07      	cmp	r3, #7
 8005fc4:	dc16      	bgt.n	8005ff4 <_HandleIncomingPacket+0x5c>
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	dd3e      	ble.n	8006048 <_HandleIncomingPacket+0xb0>
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	2b06      	cmp	r3, #6
 8005fce:	d83b      	bhi.n	8006048 <_HandleIncomingPacket+0xb0>
 8005fd0:	a201      	add	r2, pc, #4	; (adr r2, 8005fd8 <_HandleIncomingPacket+0x40>)
 8005fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd6:	bf00      	nop
 8005fd8:	08005ffb 	.word	0x08005ffb
 8005fdc:	08006001 	.word	0x08006001
 8005fe0:	08006007 	.word	0x08006007
 8005fe4:	0800600d 	.word	0x0800600d
 8005fe8:	08006013 	.word	0x08006013
 8005fec:	08006019 	.word	0x08006019
 8005ff0:	0800601f 	.word	0x0800601f
 8005ff4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ff6:	d034      	beq.n	8006062 <_HandleIncomingPacket+0xca>
 8005ff8:	e026      	b.n	8006048 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005ffa:	f000 ff43 	bl	8006e84 <SEGGER_SYSVIEW_Start>
      break;
 8005ffe:	e035      	b.n	800606c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006000:	f000 fffc 	bl	8006ffc <SEGGER_SYSVIEW_Stop>
      break;
 8006004:	e032      	b.n	800606c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006006:	f001 f9d5 	bl	80073b4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800600a:	e02f      	b.n	800606c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800600c:	f001 f99a 	bl	8007344 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006010:	e02c      	b.n	800606c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006012:	f001 f819 	bl	8007048 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006016:	e029      	b.n	800606c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006018:	f001 fc68 	bl	80078ec <SEGGER_SYSVIEW_SendNumModules>
      break;
 800601c:	e026      	b.n	800606c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800601e:	f001 fc47 	bl	80078b0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006022:	e023      	b.n	800606c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006024:	4b13      	ldr	r3, [pc, #76]	; (8006074 <_HandleIncomingPacket+0xdc>)
 8006026:	7e1b      	ldrb	r3, [r3, #24]
 8006028:	4618      	mov	r0, r3
 800602a:	1cfb      	adds	r3, r7, #3
 800602c:	2201      	movs	r2, #1
 800602e:	4619      	mov	r1, r3
 8006030:	f7ff fcf2 	bl	8005a18 <SEGGER_RTT_ReadNoLock>
 8006034:	4603      	mov	r3, r0
 8006036:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	dd13      	ble.n	8006066 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800603e:	78fb      	ldrb	r3, [r7, #3]
 8006040:	4618      	mov	r0, r3
 8006042:	f001 fbb5 	bl	80077b0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006046:	e00e      	b.n	8006066 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006048:	78fb      	ldrb	r3, [r7, #3]
 800604a:	b25b      	sxtb	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	da0c      	bge.n	800606a <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006050:	4b08      	ldr	r3, [pc, #32]	; (8006074 <_HandleIncomingPacket+0xdc>)
 8006052:	7e1b      	ldrb	r3, [r3, #24]
 8006054:	4618      	mov	r0, r3
 8006056:	1cfb      	adds	r3, r7, #3
 8006058:	2201      	movs	r2, #1
 800605a:	4619      	mov	r1, r3
 800605c:	f7ff fcdc 	bl	8005a18 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006060:	e003      	b.n	800606a <_HandleIncomingPacket+0xd2>
      break;
 8006062:	bf00      	nop
 8006064:	e002      	b.n	800606c <_HandleIncomingPacket+0xd4>
      break;
 8006066:	bf00      	nop
 8006068:	e000      	b.n	800606c <_HandleIncomingPacket+0xd4>
      break;
 800606a:	bf00      	nop
    }
  }
}
 800606c:	bf00      	nop
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	2001443c 	.word	0x2001443c

08006078 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006078:	b580      	push	{r7, lr}
 800607a:	b08c      	sub	sp, #48	; 0x30
 800607c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800607e:	2301      	movs	r3, #1
 8006080:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006082:	1d3b      	adds	r3, r7, #4
 8006084:	3301      	adds	r3, #1
 8006086:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800608c:	4b32      	ldr	r3, [pc, #200]	; (8006158 <_TrySendOverflowPacket+0xe0>)
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	62bb      	str	r3, [r7, #40]	; 0x28
 8006092:	e00b      	b.n	80060ac <_TrySendOverflowPacket+0x34>
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	b2da      	uxtb	r2, r3
 8006098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609a:	1c59      	adds	r1, r3, #1
 800609c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800609e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060a2:	b2d2      	uxtb	r2, r2
 80060a4:	701a      	strb	r2, [r3, #0]
 80060a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a8:	09db      	lsrs	r3, r3, #7
 80060aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ae:	2b7f      	cmp	r3, #127	; 0x7f
 80060b0:	d8f0      	bhi.n	8006094 <_TrySendOverflowPacket+0x1c>
 80060b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b4:	1c5a      	adds	r2, r3, #1
 80060b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060ba:	b2d2      	uxtb	r2, r2
 80060bc:	701a      	strb	r2, [r3, #0]
 80060be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80060c2:	4b26      	ldr	r3, [pc, #152]	; (800615c <_TrySendOverflowPacket+0xe4>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80060c8:	4b23      	ldr	r3, [pc, #140]	; (8006158 <_TrySendOverflowPacket+0xe0>)
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	627b      	str	r3, [r7, #36]	; 0x24
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	623b      	str	r3, [r7, #32]
 80060da:	e00b      	b.n	80060f4 <_TrySendOverflowPacket+0x7c>
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	1c59      	adds	r1, r3, #1
 80060e4:	6279      	str	r1, [r7, #36]	; 0x24
 80060e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	09db      	lsrs	r3, r3, #7
 80060f2:	623b      	str	r3, [r7, #32]
 80060f4:	6a3b      	ldr	r3, [r7, #32]
 80060f6:	2b7f      	cmp	r3, #127	; 0x7f
 80060f8:	d8f0      	bhi.n	80060dc <_TrySendOverflowPacket+0x64>
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	627a      	str	r2, [r7, #36]	; 0x24
 8006100:	6a3a      	ldr	r2, [r7, #32]
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	701a      	strb	r2, [r3, #0]
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800610a:	4b13      	ldr	r3, [pc, #76]	; (8006158 <_TrySendOverflowPacket+0xe0>)
 800610c:	785b      	ldrb	r3, [r3, #1]
 800610e:	4618      	mov	r0, r3
 8006110:	1d3b      	adds	r3, r7, #4
 8006112:	69fa      	ldr	r2, [r7, #28]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	461a      	mov	r2, r3
 8006118:	1d3b      	adds	r3, r7, #4
 800611a:	4619      	mov	r1, r3
 800611c:	f7fa f858 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006120:	4603      	mov	r3, r0
 8006122:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8006124:	f7ff fa48 	bl	80055b8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d009      	beq.n	8006142 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800612e:	4a0a      	ldr	r2, [pc, #40]	; (8006158 <_TrySendOverflowPacket+0xe0>)
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006134:	4b08      	ldr	r3, [pc, #32]	; (8006158 <_TrySendOverflowPacket+0xe0>)
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	3b01      	subs	r3, #1
 800613a:	b2da      	uxtb	r2, r3
 800613c:	4b06      	ldr	r3, [pc, #24]	; (8006158 <_TrySendOverflowPacket+0xe0>)
 800613e:	701a      	strb	r2, [r3, #0]
 8006140:	e004      	b.n	800614c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006142:	4b05      	ldr	r3, [pc, #20]	; (8006158 <_TrySendOverflowPacket+0xe0>)
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	3301      	adds	r3, #1
 8006148:	4a03      	ldr	r2, [pc, #12]	; (8006158 <_TrySendOverflowPacket+0xe0>)
 800614a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800614c:	693b      	ldr	r3, [r7, #16]
}
 800614e:	4618      	mov	r0, r3
 8006150:	3730      	adds	r7, #48	; 0x30
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	2001443c 	.word	0x2001443c
 800615c:	e0001004 	.word	0xe0001004

08006160 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006160:	b580      	push	{r7, lr}
 8006162:	b08a      	sub	sp, #40	; 0x28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800616c:	4b6d      	ldr	r3, [pc, #436]	; (8006324 <_SendPacket+0x1c4>)
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d010      	beq.n	8006196 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006174:	4b6b      	ldr	r3, [pc, #428]	; (8006324 <_SendPacket+0x1c4>)
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 80a5 	beq.w	80062c8 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800617e:	4b69      	ldr	r3, [pc, #420]	; (8006324 <_SendPacket+0x1c4>)
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	2b02      	cmp	r3, #2
 8006184:	d109      	bne.n	800619a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006186:	f7ff ff77 	bl	8006078 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800618a:	4b66      	ldr	r3, [pc, #408]	; (8006324 <_SendPacket+0x1c4>)
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	2b01      	cmp	r3, #1
 8006190:	f040 809c 	bne.w	80062cc <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8006194:	e001      	b.n	800619a <_SendPacket+0x3a>
    goto Send;
 8006196:	bf00      	nop
 8006198:	e000      	b.n	800619c <_SendPacket+0x3c>
Send:
 800619a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b1f      	cmp	r3, #31
 80061a0:	d809      	bhi.n	80061b6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80061a2:	4b60      	ldr	r3, [pc, #384]	; (8006324 <_SendPacket+0x1c4>)
 80061a4:	69da      	ldr	r2, [r3, #28]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	fa22 f303 	lsr.w	r3, r2, r3
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f040 808d 	bne.w	80062d0 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b17      	cmp	r3, #23
 80061ba:	d807      	bhi.n	80061cc <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	3b01      	subs	r3, #1
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	701a      	strb	r2, [r3, #0]
 80061ca:	e03d      	b.n	8006248 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	2b7f      	cmp	r3, #127	; 0x7f
 80061d8:	d912      	bls.n	8006200 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	09da      	lsrs	r2, r3, #7
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	b2d2      	uxtb	r2, r2
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	3a01      	subs	r2, #1
 80061f2:	60fa      	str	r2, [r7, #12]
 80061f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	701a      	strb	r2, [r3, #0]
 80061fe:	e006      	b.n	800620e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3b01      	subs	r3, #1
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	b2da      	uxtb	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b7f      	cmp	r3, #127	; 0x7f
 8006212:	d912      	bls.n	800623a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	09da      	lsrs	r2, r3, #7
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	3b01      	subs	r3, #1
 800621c:	60fb      	str	r3, [r7, #12]
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	b2db      	uxtb	r3, r3
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	3a01      	subs	r2, #1
 800622c:	60fa      	str	r2, [r7, #12]
 800622e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006232:	b2da      	uxtb	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	701a      	strb	r2, [r3, #0]
 8006238:	e006      	b.n	8006248 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3b01      	subs	r3, #1
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	b2da      	uxtb	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006248:	4b37      	ldr	r3, [pc, #220]	; (8006328 <_SendPacket+0x1c8>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800624e:	4b35      	ldr	r3, [pc, #212]	; (8006324 <_SendPacket+0x1c4>)
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	69ba      	ldr	r2, [r7, #24]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	627b      	str	r3, [r7, #36]	; 0x24
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	623b      	str	r3, [r7, #32]
 8006260:	e00b      	b.n	800627a <_SendPacket+0x11a>
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	b2da      	uxtb	r2, r3
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	1c59      	adds	r1, r3, #1
 800626a:	6279      	str	r1, [r7, #36]	; 0x24
 800626c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006270:	b2d2      	uxtb	r2, r2
 8006272:	701a      	strb	r2, [r3, #0]
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	09db      	lsrs	r3, r3, #7
 8006278:	623b      	str	r3, [r7, #32]
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	2b7f      	cmp	r3, #127	; 0x7f
 800627e:	d8f0      	bhi.n	8006262 <_SendPacket+0x102>
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	627a      	str	r2, [r7, #36]	; 0x24
 8006286:	6a3a      	ldr	r2, [r7, #32]
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8006290:	4b24      	ldr	r3, [pc, #144]	; (8006324 <_SendPacket+0x1c4>)
 8006292:	785b      	ldrb	r3, [r3, #1]
 8006294:	4618      	mov	r0, r3
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	461a      	mov	r2, r3
 800629e:	68f9      	ldr	r1, [r7, #12]
 80062a0:	f7f9 ff96 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80062a4:	4603      	mov	r3, r0
 80062a6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80062a8:	f7ff f986 	bl	80055b8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80062b2:	4a1c      	ldr	r2, [pc, #112]	; (8006324 <_SendPacket+0x1c4>)
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	60d3      	str	r3, [r2, #12]
 80062b8:	e00b      	b.n	80062d2 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80062ba:	4b1a      	ldr	r3, [pc, #104]	; (8006324 <_SendPacket+0x1c4>)
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	3301      	adds	r3, #1
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	4b18      	ldr	r3, [pc, #96]	; (8006324 <_SendPacket+0x1c4>)
 80062c4:	701a      	strb	r2, [r3, #0]
 80062c6:	e004      	b.n	80062d2 <_SendPacket+0x172>
    goto SendDone;
 80062c8:	bf00      	nop
 80062ca:	e002      	b.n	80062d2 <_SendPacket+0x172>
      goto SendDone;
 80062cc:	bf00      	nop
 80062ce:	e000      	b.n	80062d2 <_SendPacket+0x172>
      goto SendDone;
 80062d0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80062d2:	4b14      	ldr	r3, [pc, #80]	; (8006324 <_SendPacket+0x1c4>)
 80062d4:	7e1b      	ldrb	r3, [r3, #24]
 80062d6:	4619      	mov	r1, r3
 80062d8:	4a14      	ldr	r2, [pc, #80]	; (800632c <_SendPacket+0x1cc>)
 80062da:	460b      	mov	r3, r1
 80062dc:	005b      	lsls	r3, r3, #1
 80062de:	440b      	add	r3, r1
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	4413      	add	r3, r2
 80062e4:	336c      	adds	r3, #108	; 0x6c
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	4b0e      	ldr	r3, [pc, #56]	; (8006324 <_SendPacket+0x1c4>)
 80062ea:	7e1b      	ldrb	r3, [r3, #24]
 80062ec:	4618      	mov	r0, r3
 80062ee:	490f      	ldr	r1, [pc, #60]	; (800632c <_SendPacket+0x1cc>)
 80062f0:	4603      	mov	r3, r0
 80062f2:	005b      	lsls	r3, r3, #1
 80062f4:	4403      	add	r3, r0
 80062f6:	00db      	lsls	r3, r3, #3
 80062f8:	440b      	add	r3, r1
 80062fa:	3370      	adds	r3, #112	; 0x70
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d00b      	beq.n	800631a <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006302:	4b08      	ldr	r3, [pc, #32]	; (8006324 <_SendPacket+0x1c4>)
 8006304:	789b      	ldrb	r3, [r3, #2]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d107      	bne.n	800631a <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800630a:	4b06      	ldr	r3, [pc, #24]	; (8006324 <_SendPacket+0x1c4>)
 800630c:	2201      	movs	r2, #1
 800630e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006310:	f7ff fe42 	bl	8005f98 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006314:	4b03      	ldr	r3, [pc, #12]	; (8006324 <_SendPacket+0x1c4>)
 8006316:	2200      	movs	r2, #0
 8006318:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800631a:	bf00      	nop
 800631c:	3728      	adds	r7, #40	; 0x28
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	2001443c 	.word	0x2001443c
 8006328:	e0001004 	.word	0xe0001004
 800632c:	20012f7c 	.word	0x20012f7c

08006330 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8006330:	b580      	push	{r7, lr}
 8006332:	b08a      	sub	sp, #40	; 0x28
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	460b      	mov	r3, r1
 800633a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	3301      	adds	r3, #1
 8006346:	2b80      	cmp	r3, #128	; 0x80
 8006348:	d80a      	bhi.n	8006360 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	1c59      	adds	r1, r3, #1
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6051      	str	r1, [r2, #4]
 8006354:	78fa      	ldrb	r2, [r7, #3]
 8006356:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	2b80      	cmp	r3, #128	; 0x80
 8006366:	d15a      	bne.n	800641e <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691a      	ldr	r2, [r3, #16]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	b2d2      	uxtb	r2, r2
 8006372:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	627b      	str	r3, [r7, #36]	; 0x24
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	623b      	str	r3, [r7, #32]
 8006388:	e00b      	b.n	80063a2 <_StoreChar+0x72>
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	b2da      	uxtb	r2, r3
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	1c59      	adds	r1, r3, #1
 8006392:	6279      	str	r1, [r7, #36]	; 0x24
 8006394:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006398:	b2d2      	uxtb	r2, r2
 800639a:	701a      	strb	r2, [r3, #0]
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	09db      	lsrs	r3, r3, #7
 80063a0:	623b      	str	r3, [r7, #32]
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	2b7f      	cmp	r3, #127	; 0x7f
 80063a6:	d8f0      	bhi.n	800638a <_StoreChar+0x5a>
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	1c5a      	adds	r2, r3, #1
 80063ac:	627a      	str	r2, [r7, #36]	; 0x24
 80063ae:	6a3a      	ldr	r2, [r7, #32]
 80063b0:	b2d2      	uxtb	r2, r2
 80063b2:	701a      	strb	r2, [r3, #0]
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	61fb      	str	r3, [r7, #28]
 80063bc:	2300      	movs	r3, #0
 80063be:	61bb      	str	r3, [r7, #24]
 80063c0:	e00b      	b.n	80063da <_StoreChar+0xaa>
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	1c59      	adds	r1, r3, #1
 80063ca:	61f9      	str	r1, [r7, #28]
 80063cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	701a      	strb	r2, [r3, #0]
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	09db      	lsrs	r3, r3, #7
 80063d8:	61bb      	str	r3, [r7, #24]
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	2b7f      	cmp	r3, #127	; 0x7f
 80063de:	d8f0      	bhi.n	80063c2 <_StoreChar+0x92>
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	61fa      	str	r2, [r7, #28]
 80063e6:	69ba      	ldr	r2, [r7, #24]
 80063e8:	b2d2      	uxtb	r2, r2
 80063ea:	701a      	strb	r2, [r3, #0]
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	221a      	movs	r2, #26
 80063f6:	6939      	ldr	r1, [r7, #16]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7ff feb1 	bl	8006160 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4618      	mov	r0, r3
 8006404:	f7ff fdbb 	bl	8005f7e <_PreparePacket>
 8006408:	4602      	mov	r2, r0
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	611a      	str	r2, [r3, #16]
  }
}
 800641e:	bf00      	nop
 8006420:	3728      	adds	r7, #40	; 0x28
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
	...

08006428 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006428:	b580      	push	{r7, lr}
 800642a:	b08a      	sub	sp, #40	; 0x28
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
 8006434:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800643a:	2301      	movs	r3, #1
 800643c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800643e:	2301      	movs	r3, #1
 8006440:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006442:	e007      	b.n	8006454 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8006444:	6a3a      	ldr	r2, [r7, #32]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	fbb2 f3f3 	udiv	r3, r2, r3
 800644c:	623b      	str	r3, [r7, #32]
    Width++;
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	3301      	adds	r3, #1
 8006452:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006454:	6a3a      	ldr	r2, [r7, #32]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	429a      	cmp	r2, r3
 800645a:	d2f3      	bcs.n	8006444 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	429a      	cmp	r2, r3
 8006462:	d901      	bls.n	8006468 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d11f      	bne.n	80064b2 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	2b00      	cmp	r3, #0
 8006476:	d01c      	beq.n	80064b2 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b00      	cmp	r3, #0
 8006480:	d005      	beq.n	800648e <_PrintUnsigned+0x66>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d102      	bne.n	800648e <_PrintUnsigned+0x66>
        c = '0';
 8006488:	2330      	movs	r3, #48	; 0x30
 800648a:	76fb      	strb	r3, [r7, #27]
 800648c:	e001      	b.n	8006492 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800648e:	2320      	movs	r3, #32
 8006490:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006492:	e007      	b.n	80064a4 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8006494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006496:	3b01      	subs	r3, #1
 8006498:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800649a:	7efb      	ldrb	r3, [r7, #27]
 800649c:	4619      	mov	r1, r3
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f7ff ff46 	bl	8006330 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <_PrintUnsigned+0x8a>
 80064aa:	69fa      	ldr	r2, [r7, #28]
 80064ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d3f0      	bcc.n	8006494 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d903      	bls.n	80064c0 <_PrintUnsigned+0x98>
      NumDigits--;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	3b01      	subs	r3, #1
 80064bc:	603b      	str	r3, [r7, #0]
 80064be:	e009      	b.n	80064d4 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c8:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d200      	bcs.n	80064d4 <_PrintUnsigned+0xac>
        break;
 80064d2:	e005      	b.n	80064e0 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	fb02 f303 	mul.w	r3, r2, r3
 80064dc:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80064de:	e7e8      	b.n	80064b2 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e8:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ee:	fb02 f303 	mul.w	r3, r2, r3
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80064f8:	4a15      	ldr	r2, [pc, #84]	; (8006550 <_PrintUnsigned+0x128>)
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	4413      	add	r3, r2
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	4619      	mov	r1, r3
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f7ff ff14 	bl	8006330 <_StoreChar>
    Digit /= Base;
 8006508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1e3      	bne.n	80064e0 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d011      	beq.n	8006546 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8006522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00e      	beq.n	8006546 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006528:	e006      	b.n	8006538 <_PrintUnsigned+0x110>
        FieldWidth--;
 800652a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652c:	3b01      	subs	r3, #1
 800652e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8006530:	2120      	movs	r1, #32
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f7ff fefc 	bl	8006330 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <_PrintUnsigned+0x11e>
 800653e:	69fa      	ldr	r2, [r7, #28]
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	429a      	cmp	r2, r3
 8006544:	d3f1      	bcc.n	800652a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8006546:	bf00      	nop
 8006548:	3728      	adds	r7, #40	; 0x28
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	08008e9c 	.word	0x08008e9c

08006554 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006554:	b580      	push	{r7, lr}
 8006556:	b088      	sub	sp, #32
 8006558:	af02      	add	r7, sp, #8
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	bfb8      	it	lt
 8006568:	425b      	neglt	r3, r3
 800656a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800656c:	2301      	movs	r3, #1
 800656e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006570:	e007      	b.n	8006582 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	fb92 f3f3 	sdiv	r3, r2, r3
 800657a:	613b      	str	r3, [r7, #16]
    Width++;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	3301      	adds	r3, #1
 8006580:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	429a      	cmp	r2, r3
 8006588:	daf3      	bge.n	8006572 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	429a      	cmp	r2, r3
 8006590:	d901      	bls.n	8006596 <_PrintInt+0x42>
    Width = NumDigits;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <_PrintInt+0x5e>
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	db04      	blt.n	80065ac <_PrintInt+0x58>
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	f003 0304 	and.w	r3, r3, #4
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <_PrintInt+0x5e>
    FieldWidth--;
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d002      	beq.n	80065c2 <_PrintInt+0x6e>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d016      	beq.n	80065f0 <_PrintInt+0x9c>
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d111      	bne.n	80065f0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00e      	beq.n	80065f0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80065d2:	e006      	b.n	80065e2 <_PrintInt+0x8e>
        FieldWidth--;
 80065d4:	6a3b      	ldr	r3, [r7, #32]
 80065d6:	3b01      	subs	r3, #1
 80065d8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80065da:	2120      	movs	r1, #32
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f7ff fea7 	bl	8006330 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80065e2:	6a3b      	ldr	r3, [r7, #32]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <_PrintInt+0x9c>
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d3f1      	bcc.n	80065d4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	da07      	bge.n	8006606 <_PrintInt+0xb2>
    v = -v;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	425b      	negs	r3, r3
 80065fa:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80065fc:	212d      	movs	r1, #45	; 0x2d
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f7ff fe96 	bl	8006330 <_StoreChar>
 8006604:	e008      	b.n	8006618 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	d003      	beq.n	8006618 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006610:	212b      	movs	r1, #43	; 0x2b
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f7ff fe8c 	bl	8006330 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d019      	beq.n	8006656 <_PrintInt+0x102>
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b00      	cmp	r3, #0
 800662a:	d114      	bne.n	8006656 <_PrintInt+0x102>
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d111      	bne.n	8006656 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00e      	beq.n	8006656 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006638:	e006      	b.n	8006648 <_PrintInt+0xf4>
        FieldWidth--;
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	3b01      	subs	r3, #1
 800663e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006640:	2130      	movs	r1, #48	; 0x30
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f7ff fe74 	bl	8006330 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <_PrintInt+0x102>
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	429a      	cmp	r2, r3
 8006654:	d3f1      	bcc.n	800663a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8006656:	68b9      	ldr	r1, [r7, #8]
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	9301      	str	r3, [sp, #4]
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f7ff fedf 	bl	8006428 <_PrintUnsigned>
}
 800666a:	bf00      	nop
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
	...

08006674 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006674:	b580      	push	{r7, lr}
 8006676:	b098      	sub	sp, #96	; 0x60
 8006678:	af02      	add	r7, sp, #8
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006680:	f3ef 8311 	mrs	r3, BASEPRI
 8006684:	f04f 0120 	mov.w	r1, #32
 8006688:	f381 8811 	msr	BASEPRI, r1
 800668c:	633b      	str	r3, [r7, #48]	; 0x30
 800668e:	48b7      	ldr	r0, [pc, #732]	; (800696c <_VPrintTarget+0x2f8>)
 8006690:	f7ff fc75 	bl	8005f7e <_PreparePacket>
 8006694:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8006696:	4bb5      	ldr	r3, [pc, #724]	; (800696c <_VPrintTarget+0x2f8>)
 8006698:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800669a:	2300      	movs	r3, #0
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800669e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a0:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	3301      	adds	r3, #1
 80066a6:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	3301      	adds	r3, #1
 80066b8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80066ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 8183 	beq.w	80069ca <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80066c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066c8:	2b25      	cmp	r3, #37	; 0x25
 80066ca:	f040 8170 	bne.w	80069ae <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80066ce:	2300      	movs	r3, #0
 80066d0:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80066d2:	2301      	movs	r3, #1
 80066d4:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80066de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066e2:	3b23      	subs	r3, #35	; 0x23
 80066e4:	2b0d      	cmp	r3, #13
 80066e6:	d83f      	bhi.n	8006768 <_VPrintTarget+0xf4>
 80066e8:	a201      	add	r2, pc, #4	; (adr r2, 80066f0 <_VPrintTarget+0x7c>)
 80066ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ee:	bf00      	nop
 80066f0:	08006759 	.word	0x08006759
 80066f4:	08006769 	.word	0x08006769
 80066f8:	08006769 	.word	0x08006769
 80066fc:	08006769 	.word	0x08006769
 8006700:	08006769 	.word	0x08006769
 8006704:	08006769 	.word	0x08006769
 8006708:	08006769 	.word	0x08006769
 800670c:	08006769 	.word	0x08006769
 8006710:	08006749 	.word	0x08006749
 8006714:	08006769 	.word	0x08006769
 8006718:	08006729 	.word	0x08006729
 800671c:	08006769 	.word	0x08006769
 8006720:	08006769 	.word	0x08006769
 8006724:	08006739 	.word	0x08006739
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800672a:	f043 0301 	orr.w	r3, r3, #1
 800672e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	3301      	adds	r3, #1
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	e01a      	b.n	800676e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800673a:	f043 0302 	orr.w	r3, r3, #2
 800673e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	3301      	adds	r3, #1
 8006744:	60fb      	str	r3, [r7, #12]
 8006746:	e012      	b.n	800676e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800674a:	f043 0304 	orr.w	r3, r3, #4
 800674e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	3301      	adds	r3, #1
 8006754:	60fb      	str	r3, [r7, #12]
 8006756:	e00a      	b.n	800676e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800675a:	f043 0308 	orr.w	r3, r3, #8
 800675e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	3301      	adds	r3, #1
 8006764:	60fb      	str	r3, [r7, #12]
 8006766:	e002      	b.n	800676e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006768:	2300      	movs	r3, #0
 800676a:	653b      	str	r3, [r7, #80]	; 0x50
 800676c:	bf00      	nop
        }
      } while (v);
 800676e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1b0      	bne.n	80066d6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006774:	2300      	movs	r3, #0
 8006776:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8006780:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006784:	2b2f      	cmp	r3, #47	; 0x2f
 8006786:	d912      	bls.n	80067ae <_VPrintTarget+0x13a>
 8006788:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800678c:	2b39      	cmp	r3, #57	; 0x39
 800678e:	d80e      	bhi.n	80067ae <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	3301      	adds	r3, #1
 8006794:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006798:	4613      	mov	r3, r2
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	005b      	lsls	r3, r3, #1
 80067a0:	461a      	mov	r2, r3
 80067a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067a6:	4413      	add	r3, r2
 80067a8:	3b30      	subs	r3, #48	; 0x30
 80067aa:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80067ac:	e7e4      	b.n	8006778 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80067ae:	2300      	movs	r3, #0
 80067b0:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80067ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067be:	2b2e      	cmp	r3, #46	; 0x2e
 80067c0:	d11d      	bne.n	80067fe <_VPrintTarget+0x18a>
        sFormat++;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	3301      	adds	r3, #1
 80067c6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80067d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067d4:	2b2f      	cmp	r3, #47	; 0x2f
 80067d6:	d912      	bls.n	80067fe <_VPrintTarget+0x18a>
 80067d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067dc:	2b39      	cmp	r3, #57	; 0x39
 80067de:	d80e      	bhi.n	80067fe <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	3301      	adds	r3, #1
 80067e4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80067e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067e8:	4613      	mov	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	005b      	lsls	r3, r3, #1
 80067f0:	461a      	mov	r2, r3
 80067f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067f6:	4413      	add	r3, r2
 80067f8:	3b30      	subs	r3, #48	; 0x30
 80067fa:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80067fc:	e7e4      	b.n	80067c8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006806:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800680a:	2b6c      	cmp	r3, #108	; 0x6c
 800680c:	d003      	beq.n	8006816 <_VPrintTarget+0x1a2>
 800680e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006812:	2b68      	cmp	r3, #104	; 0x68
 8006814:	d107      	bne.n	8006826 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	3301      	adds	r3, #1
 8006822:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006824:	e7ef      	b.n	8006806 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006826:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800682a:	2b25      	cmp	r3, #37	; 0x25
 800682c:	f000 80b3 	beq.w	8006996 <_VPrintTarget+0x322>
 8006830:	2b25      	cmp	r3, #37	; 0x25
 8006832:	f2c0 80b7 	blt.w	80069a4 <_VPrintTarget+0x330>
 8006836:	2b78      	cmp	r3, #120	; 0x78
 8006838:	f300 80b4 	bgt.w	80069a4 <_VPrintTarget+0x330>
 800683c:	2b58      	cmp	r3, #88	; 0x58
 800683e:	f2c0 80b1 	blt.w	80069a4 <_VPrintTarget+0x330>
 8006842:	3b58      	subs	r3, #88	; 0x58
 8006844:	2b20      	cmp	r3, #32
 8006846:	f200 80ad 	bhi.w	80069a4 <_VPrintTarget+0x330>
 800684a:	a201      	add	r2, pc, #4	; (adr r2, 8006850 <_VPrintTarget+0x1dc>)
 800684c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006850:	08006947 	.word	0x08006947
 8006854:	080069a5 	.word	0x080069a5
 8006858:	080069a5 	.word	0x080069a5
 800685c:	080069a5 	.word	0x080069a5
 8006860:	080069a5 	.word	0x080069a5
 8006864:	080069a5 	.word	0x080069a5
 8006868:	080069a5 	.word	0x080069a5
 800686c:	080069a5 	.word	0x080069a5
 8006870:	080069a5 	.word	0x080069a5
 8006874:	080069a5 	.word	0x080069a5
 8006878:	080069a5 	.word	0x080069a5
 800687c:	080068d5 	.word	0x080068d5
 8006880:	080068fb 	.word	0x080068fb
 8006884:	080069a5 	.word	0x080069a5
 8006888:	080069a5 	.word	0x080069a5
 800688c:	080069a5 	.word	0x080069a5
 8006890:	080069a5 	.word	0x080069a5
 8006894:	080069a5 	.word	0x080069a5
 8006898:	080069a5 	.word	0x080069a5
 800689c:	080069a5 	.word	0x080069a5
 80068a0:	080069a5 	.word	0x080069a5
 80068a4:	080069a5 	.word	0x080069a5
 80068a8:	080069a5 	.word	0x080069a5
 80068ac:	080069a5 	.word	0x080069a5
 80068b0:	08006971 	.word	0x08006971
 80068b4:	080069a5 	.word	0x080069a5
 80068b8:	080069a5 	.word	0x080069a5
 80068bc:	080069a5 	.word	0x080069a5
 80068c0:	080069a5 	.word	0x080069a5
 80068c4:	08006921 	.word	0x08006921
 80068c8:	080069a5 	.word	0x080069a5
 80068cc:	080069a5 	.word	0x080069a5
 80068d0:	08006947 	.word	0x08006947
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	1d19      	adds	r1, r3, #4
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	6011      	str	r1, [r2, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80068e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80068e8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80068ec:	f107 0314 	add.w	r3, r7, #20
 80068f0:	4611      	mov	r1, r2
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7ff fd1c 	bl	8006330 <_StoreChar>
        break;
 80068f8:	e055      	b.n	80069a6 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	1d19      	adds	r1, r3, #4
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	6011      	str	r1, [r2, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006908:	f107 0014 	add.w	r0, r7, #20
 800690c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800690e:	9301      	str	r3, [sp, #4]
 8006910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006916:	220a      	movs	r2, #10
 8006918:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800691a:	f7ff fe1b 	bl	8006554 <_PrintInt>
        break;
 800691e:	e042      	b.n	80069a6 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	1d19      	adds	r1, r3, #4
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	6011      	str	r1, [r2, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800692e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006930:	f107 0014 	add.w	r0, r7, #20
 8006934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006936:	9301      	str	r3, [sp, #4]
 8006938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800693e:	220a      	movs	r2, #10
 8006940:	f7ff fd72 	bl	8006428 <_PrintUnsigned>
        break;
 8006944:	e02f      	b.n	80069a6 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	1d19      	adds	r1, r3, #4
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	6011      	str	r1, [r2, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006954:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006956:	f107 0014 	add.w	r0, r7, #20
 800695a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800695c:	9301      	str	r3, [sp, #4]
 800695e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006964:	2210      	movs	r2, #16
 8006966:	f7ff fd5f 	bl	8006428 <_PrintUnsigned>
        break;
 800696a:	e01c      	b.n	80069a6 <_VPrintTarget+0x332>
 800696c:	2001446c 	.word	0x2001446c
      case 'p':
        v = va_arg(*pParamList, int);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	1d19      	adds	r1, r3, #4
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	6011      	str	r1, [r2, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800697e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006980:	f107 0014 	add.w	r0, r7, #20
 8006984:	2300      	movs	r3, #0
 8006986:	9301      	str	r3, [sp, #4]
 8006988:	2308      	movs	r3, #8
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	2308      	movs	r3, #8
 800698e:	2210      	movs	r2, #16
 8006990:	f7ff fd4a 	bl	8006428 <_PrintUnsigned>
        break;
 8006994:	e007      	b.n	80069a6 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006996:	f107 0314 	add.w	r3, r7, #20
 800699a:	2125      	movs	r1, #37	; 0x25
 800699c:	4618      	mov	r0, r3
 800699e:	f7ff fcc7 	bl	8006330 <_StoreChar>
        break;
 80069a2:	e000      	b.n	80069a6 <_VPrintTarget+0x332>
      default:
        break;
 80069a4:	bf00      	nop
      }
      sFormat++;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	3301      	adds	r3, #1
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	e007      	b.n	80069be <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80069ae:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80069b2:	f107 0314 	add.w	r3, r7, #20
 80069b6:	4611      	mov	r1, r2
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7ff fcb9 	bl	8006330 <_StoreChar>
    }
  } while (*sFormat);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f47f ae72 	bne.w	80066ac <_VPrintTarget+0x38>
 80069c8:	e000      	b.n	80069cc <_VPrintTarget+0x358>
      break;
 80069ca:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d041      	beq.n	8006a56 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 80069d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	b2d2      	uxtb	r2, r2
 80069d8:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	643b      	str	r3, [r7, #64]	; 0x40
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069e2:	e00b      	b.n	80069fc <_VPrintTarget+0x388>
 80069e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ea:	1c59      	adds	r1, r3, #1
 80069ec:	6439      	str	r1, [r7, #64]	; 0x40
 80069ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069f2:	b2d2      	uxtb	r2, r2
 80069f4:	701a      	strb	r2, [r3, #0]
 80069f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f8:	09db      	lsrs	r3, r3, #7
 80069fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069fe:	2b7f      	cmp	r3, #127	; 0x7f
 8006a00:	d8f0      	bhi.n	80069e4 <_VPrintTarget+0x370>
 8006a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a04:	1c5a      	adds	r2, r3, #1
 8006a06:	643a      	str	r2, [r7, #64]	; 0x40
 8006a08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	701a      	strb	r2, [r3, #0]
 8006a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a10:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a16:	2300      	movs	r3, #0
 8006a18:	637b      	str	r3, [r7, #52]	; 0x34
 8006a1a:	e00b      	b.n	8006a34 <_VPrintTarget+0x3c0>
 8006a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a22:	1c59      	adds	r1, r3, #1
 8006a24:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a2a:	b2d2      	uxtb	r2, r2
 8006a2c:	701a      	strb	r2, [r3, #0]
 8006a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a30:	09db      	lsrs	r3, r3, #7
 8006a32:	637b      	str	r3, [r7, #52]	; 0x34
 8006a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a36:	2b7f      	cmp	r3, #127	; 0x7f
 8006a38:	d8f0      	bhi.n	8006a1c <_VPrintTarget+0x3a8>
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3c:	1c5a      	adds	r2, r3, #1
 8006a3e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006a40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a42:	b2d2      	uxtb	r2, r2
 8006a44:	701a      	strb	r2, [r3, #0]
 8006a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a48:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	69b9      	ldr	r1, [r7, #24]
 8006a4e:	221a      	movs	r2, #26
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7ff fb85 	bl	8006160 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006a5c:	bf00      	nop
 8006a5e:	3758      	adds	r7, #88	; 0x58
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af02      	add	r7, sp, #8
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
 8006a70:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006a72:	2300      	movs	r3, #0
 8006a74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a78:	4917      	ldr	r1, [pc, #92]	; (8006ad8 <SEGGER_SYSVIEW_Init+0x74>)
 8006a7a:	4818      	ldr	r0, [pc, #96]	; (8006adc <SEGGER_SYSVIEW_Init+0x78>)
 8006a7c:	f7ff f93e 	bl	8005cfc <SEGGER_RTT_AllocUpBuffer>
 8006a80:	4603      	mov	r3, r0
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	4b16      	ldr	r3, [pc, #88]	; (8006ae0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a86:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006a88:	4b15      	ldr	r3, [pc, #84]	; (8006ae0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a8a:	785a      	ldrb	r2, [r3, #1]
 8006a8c:	4b14      	ldr	r3, [pc, #80]	; (8006ae0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a8e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006a90:	4b13      	ldr	r3, [pc, #76]	; (8006ae0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a92:	7e1b      	ldrb	r3, [r3, #24]
 8006a94:	4618      	mov	r0, r3
 8006a96:	2300      	movs	r3, #0
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	2308      	movs	r3, #8
 8006a9c:	4a11      	ldr	r2, [pc, #68]	; (8006ae4 <SEGGER_SYSVIEW_Init+0x80>)
 8006a9e:	490f      	ldr	r1, [pc, #60]	; (8006adc <SEGGER_SYSVIEW_Init+0x78>)
 8006aa0:	f7ff f9b0 	bl	8005e04 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006aa4:	4b0e      	ldr	r3, [pc, #56]	; (8006ae0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006aaa:	4b0f      	ldr	r3, [pc, #60]	; (8006ae8 <SEGGER_SYSVIEW_Init+0x84>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a0c      	ldr	r2, [pc, #48]	; (8006ae0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006ab0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006ab2:	4a0b      	ldr	r2, [pc, #44]	; (8006ae0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006ab8:	4a09      	ldr	r2, [pc, #36]	; (8006ae0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006abe:	4a08      	ldr	r2, [pc, #32]	; (8006ae0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006ac4:	4a06      	ldr	r2, [pc, #24]	; (8006ae0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006aca:	4b05      	ldr	r3, [pc, #20]	; (8006ae0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006ad0:	bf00      	nop
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	20013434 	.word	0x20013434
 8006adc:	08008e64 	.word	0x08008e64
 8006ae0:	2001443c 	.word	0x2001443c
 8006ae4:	20014434 	.word	0x20014434
 8006ae8:	e0001004 	.word	0xe0001004

08006aec <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006af4:	4a04      	ldr	r2, [pc, #16]	; (8006b08 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6113      	str	r3, [r2, #16]
}
 8006afa:	bf00      	nop
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	2001443c 	.word	0x2001443c

08006b0c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b14:	f3ef 8311 	mrs	r3, BASEPRI
 8006b18:	f04f 0120 	mov.w	r1, #32
 8006b1c:	f381 8811 	msr	BASEPRI, r1
 8006b20:	60fb      	str	r3, [r7, #12]
 8006b22:	4808      	ldr	r0, [pc, #32]	; (8006b44 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006b24:	f7ff fa2b 	bl	8005f7e <_PreparePacket>
 8006b28:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	68b9      	ldr	r1, [r7, #8]
 8006b2e:	68b8      	ldr	r0, [r7, #8]
 8006b30:	f7ff fb16 	bl	8006160 <_SendPacket>
  RECORD_END();
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f383 8811 	msr	BASEPRI, r3
}
 8006b3a:	bf00      	nop
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	2001446c 	.word	0x2001446c

08006b48 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b52:	f3ef 8311 	mrs	r3, BASEPRI
 8006b56:	f04f 0120 	mov.w	r1, #32
 8006b5a:	f381 8811 	msr	BASEPRI, r1
 8006b5e:	617b      	str	r3, [r7, #20]
 8006b60:	4816      	ldr	r0, [pc, #88]	; (8006bbc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006b62:	f7ff fa0c 	bl	8005f7e <_PreparePacket>
 8006b66:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	61fb      	str	r3, [r7, #28]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	61bb      	str	r3, [r7, #24]
 8006b74:	e00b      	b.n	8006b8e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	1c59      	adds	r1, r3, #1
 8006b7e:	61f9      	str	r1, [r7, #28]
 8006b80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	701a      	strb	r2, [r3, #0]
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	09db      	lsrs	r3, r3, #7
 8006b8c:	61bb      	str	r3, [r7, #24]
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	2b7f      	cmp	r3, #127	; 0x7f
 8006b92:	d8f0      	bhi.n	8006b76 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	61fa      	str	r2, [r7, #28]
 8006b9a:	69ba      	ldr	r2, [r7, #24]
 8006b9c:	b2d2      	uxtb	r2, r2
 8006b9e:	701a      	strb	r2, [r3, #0]
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	68f9      	ldr	r1, [r7, #12]
 8006ba8:	6938      	ldr	r0, [r7, #16]
 8006baa:	f7ff fad9 	bl	8006160 <_SendPacket>
  RECORD_END();
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f383 8811 	msr	BASEPRI, r3
}
 8006bb4:	bf00      	nop
 8006bb6:	3720      	adds	r7, #32
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	2001446c 	.word	0x2001446c

08006bc0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b08c      	sub	sp, #48	; 0x30
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006bcc:	f3ef 8311 	mrs	r3, BASEPRI
 8006bd0:	f04f 0120 	mov.w	r1, #32
 8006bd4:	f381 8811 	msr	BASEPRI, r1
 8006bd8:	61fb      	str	r3, [r7, #28]
 8006bda:	4825      	ldr	r0, [pc, #148]	; (8006c70 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006bdc:	f7ff f9cf 	bl	8005f7e <_PreparePacket>
 8006be0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bee:	e00b      	b.n	8006c08 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf6:	1c59      	adds	r1, r3, #1
 8006bf8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006bfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bfe:	b2d2      	uxtb	r2, r2
 8006c00:	701a      	strb	r2, [r3, #0]
 8006c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c04:	09db      	lsrs	r3, r3, #7
 8006c06:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c0c:	d8f0      	bhi.n	8006bf0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c16:	b2d2      	uxtb	r2, r2
 8006c18:	701a      	strb	r2, [r3, #0]
 8006c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	627b      	str	r3, [r7, #36]	; 0x24
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	623b      	str	r3, [r7, #32]
 8006c26:	e00b      	b.n	8006c40 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	b2da      	uxtb	r2, r3
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2e:	1c59      	adds	r1, r3, #1
 8006c30:	6279      	str	r1, [r7, #36]	; 0x24
 8006c32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	701a      	strb	r2, [r3, #0]
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	09db      	lsrs	r3, r3, #7
 8006c3e:	623b      	str	r3, [r7, #32]
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	2b7f      	cmp	r3, #127	; 0x7f
 8006c44:	d8f0      	bhi.n	8006c28 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	1c5a      	adds	r2, r3, #1
 8006c4a:	627a      	str	r2, [r7, #36]	; 0x24
 8006c4c:	6a3a      	ldr	r2, [r7, #32]
 8006c4e:	b2d2      	uxtb	r2, r2
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	6979      	ldr	r1, [r7, #20]
 8006c5a:	69b8      	ldr	r0, [r7, #24]
 8006c5c:	f7ff fa80 	bl	8006160 <_SendPacket>
  RECORD_END();
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	f383 8811 	msr	BASEPRI, r3
}
 8006c66:	bf00      	nop
 8006c68:	3730      	adds	r7, #48	; 0x30
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	2001446c 	.word	0x2001446c

08006c74 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08e      	sub	sp, #56	; 0x38
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
 8006c80:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c82:	f3ef 8311 	mrs	r3, BASEPRI
 8006c86:	f04f 0120 	mov.w	r1, #32
 8006c8a:	f381 8811 	msr	BASEPRI, r1
 8006c8e:	61fb      	str	r3, [r7, #28]
 8006c90:	4832      	ldr	r0, [pc, #200]	; (8006d5c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006c92:	f7ff f974 	bl	8005f7e <_PreparePacket>
 8006c96:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	633b      	str	r3, [r7, #48]	; 0x30
 8006ca4:	e00b      	b.n	8006cbe <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cac:	1c59      	adds	r1, r3, #1
 8006cae:	6379      	str	r1, [r7, #52]	; 0x34
 8006cb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cb4:	b2d2      	uxtb	r2, r2
 8006cb6:	701a      	strb	r2, [r3, #0]
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cba:	09db      	lsrs	r3, r3, #7
 8006cbc:	633b      	str	r3, [r7, #48]	; 0x30
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc0:	2b7f      	cmp	r3, #127	; 0x7f
 8006cc2:	d8f0      	bhi.n	8006ca6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	637a      	str	r2, [r7, #52]	; 0x34
 8006cca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ccc:	b2d2      	uxtb	r2, r2
 8006cce:	701a      	strb	r2, [r3, #0]
 8006cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cdc:	e00b      	b.n	8006cf6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce4:	1c59      	adds	r1, r3, #1
 8006ce6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006ce8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cec:	b2d2      	uxtb	r2, r2
 8006cee:	701a      	strb	r2, [r3, #0]
 8006cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf2:	09db      	lsrs	r3, r3, #7
 8006cf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf8:	2b7f      	cmp	r3, #127	; 0x7f
 8006cfa:	d8f0      	bhi.n	8006cde <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d04:	b2d2      	uxtb	r2, r2
 8006d06:	701a      	strb	r2, [r3, #0]
 8006d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	623b      	str	r3, [r7, #32]
 8006d14:	e00b      	b.n	8006d2e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	1c59      	adds	r1, r3, #1
 8006d1e:	6279      	str	r1, [r7, #36]	; 0x24
 8006d20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d24:	b2d2      	uxtb	r2, r2
 8006d26:	701a      	strb	r2, [r3, #0]
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	09db      	lsrs	r3, r3, #7
 8006d2c:	623b      	str	r3, [r7, #32]
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	2b7f      	cmp	r3, #127	; 0x7f
 8006d32:	d8f0      	bhi.n	8006d16 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	1c5a      	adds	r2, r3, #1
 8006d38:	627a      	str	r2, [r7, #36]	; 0x24
 8006d3a:	6a3a      	ldr	r2, [r7, #32]
 8006d3c:	b2d2      	uxtb	r2, r2
 8006d3e:	701a      	strb	r2, [r3, #0]
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	6979      	ldr	r1, [r7, #20]
 8006d48:	69b8      	ldr	r0, [r7, #24]
 8006d4a:	f7ff fa09 	bl	8006160 <_SendPacket>
  RECORD_END();
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	f383 8811 	msr	BASEPRI, r3
}
 8006d54:	bf00      	nop
 8006d56:	3738      	adds	r7, #56	; 0x38
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	2001446c 	.word	0x2001446c

08006d60 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b090      	sub	sp, #64	; 0x40
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
 8006d6c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d6e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d72:	f04f 0120 	mov.w	r1, #32
 8006d76:	f381 8811 	msr	BASEPRI, r1
 8006d7a:	61fb      	str	r3, [r7, #28]
 8006d7c:	4840      	ldr	r0, [pc, #256]	; (8006e80 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006d7e:	f7ff f8fe 	bl	8005f7e <_PreparePacket>
 8006d82:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d90:	e00b      	b.n	8006daa <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d98:	1c59      	adds	r1, r3, #1
 8006d9a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006d9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006da0:	b2d2      	uxtb	r2, r2
 8006da2:	701a      	strb	r2, [r3, #0]
 8006da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da6:	09db      	lsrs	r3, r3, #7
 8006da8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dac:	2b7f      	cmp	r3, #127	; 0x7f
 8006dae:	d8f0      	bhi.n	8006d92 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006db6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006db8:	b2d2      	uxtb	r2, r2
 8006dba:	701a      	strb	r2, [r3, #0]
 8006dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dbe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	633b      	str	r3, [r7, #48]	; 0x30
 8006dc8:	e00b      	b.n	8006de2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dcc:	b2da      	uxtb	r2, r3
 8006dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd0:	1c59      	adds	r1, r3, #1
 8006dd2:	6379      	str	r1, [r7, #52]	; 0x34
 8006dd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dd8:	b2d2      	uxtb	r2, r2
 8006dda:	701a      	strb	r2, [r3, #0]
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dde:	09db      	lsrs	r3, r3, #7
 8006de0:	633b      	str	r3, [r7, #48]	; 0x30
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	2b7f      	cmp	r3, #127	; 0x7f
 8006de6:	d8f0      	bhi.n	8006dca <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	637a      	str	r2, [r7, #52]	; 0x34
 8006dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006df0:	b2d2      	uxtb	r2, r2
 8006df2:	701a      	strb	r2, [r3, #0]
 8006df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e00:	e00b      	b.n	8006e1a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e08:	1c59      	adds	r1, r3, #1
 8006e0a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006e0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e10:	b2d2      	uxtb	r2, r2
 8006e12:	701a      	strb	r2, [r3, #0]
 8006e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e16:	09db      	lsrs	r3, r3, #7
 8006e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e1e:	d8f0      	bhi.n	8006e02 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e28:	b2d2      	uxtb	r2, r2
 8006e2a:	701a      	strb	r2, [r3, #0]
 8006e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	627b      	str	r3, [r7, #36]	; 0x24
 8006e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e36:	623b      	str	r3, [r7, #32]
 8006e38:	e00b      	b.n	8006e52 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	1c59      	adds	r1, r3, #1
 8006e42:	6279      	str	r1, [r7, #36]	; 0x24
 8006e44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e48:	b2d2      	uxtb	r2, r2
 8006e4a:	701a      	strb	r2, [r3, #0]
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	09db      	lsrs	r3, r3, #7
 8006e50:	623b      	str	r3, [r7, #32]
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	2b7f      	cmp	r3, #127	; 0x7f
 8006e56:	d8f0      	bhi.n	8006e3a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	627a      	str	r2, [r7, #36]	; 0x24
 8006e5e:	6a3a      	ldr	r2, [r7, #32]
 8006e60:	b2d2      	uxtb	r2, r2
 8006e62:	701a      	strb	r2, [r3, #0]
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	6979      	ldr	r1, [r7, #20]
 8006e6c:	69b8      	ldr	r0, [r7, #24]
 8006e6e:	f7ff f977 	bl	8006160 <_SendPacket>
  RECORD_END();
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	f383 8811 	msr	BASEPRI, r3
}
 8006e78:	bf00      	nop
 8006e7a:	3740      	adds	r7, #64	; 0x40
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	2001446c 	.word	0x2001446c

08006e84 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08c      	sub	sp, #48	; 0x30
 8006e88:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006e8a:	4b59      	ldr	r3, [pc, #356]	; (8006ff0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006e90:	f3ef 8311 	mrs	r3, BASEPRI
 8006e94:	f04f 0120 	mov.w	r1, #32
 8006e98:	f381 8811 	msr	BASEPRI, r1
 8006e9c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006e9e:	4b54      	ldr	r3, [pc, #336]	; (8006ff0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006ea0:	785b      	ldrb	r3, [r3, #1]
 8006ea2:	220a      	movs	r2, #10
 8006ea4:	4953      	ldr	r1, [pc, #332]	; (8006ff4 <SEGGER_SYSVIEW_Start+0x170>)
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7f9 f992 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006eb2:	f7fe fb81 	bl	80055b8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006eb6:	200a      	movs	r0, #10
 8006eb8:	f7ff fe28 	bl	8006b0c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006ebc:	f3ef 8311 	mrs	r3, BASEPRI
 8006ec0:	f04f 0120 	mov.w	r1, #32
 8006ec4:	f381 8811 	msr	BASEPRI, r1
 8006ec8:	60bb      	str	r3, [r7, #8]
 8006eca:	484b      	ldr	r0, [pc, #300]	; (8006ff8 <SEGGER_SYSVIEW_Start+0x174>)
 8006ecc:	f7ff f857 	bl	8005f7e <_PreparePacket>
 8006ed0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eda:	4b45      	ldr	r3, [pc, #276]	; (8006ff0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ee0:	e00b      	b.n	8006efa <SEGGER_SYSVIEW_Start+0x76>
 8006ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee8:	1c59      	adds	r1, r3, #1
 8006eea:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006eec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ef0:	b2d2      	uxtb	r2, r2
 8006ef2:	701a      	strb	r2, [r3, #0]
 8006ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef6:	09db      	lsrs	r3, r3, #7
 8006ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efc:	2b7f      	cmp	r3, #127	; 0x7f
 8006efe:	d8f0      	bhi.n	8006ee2 <SEGGER_SYSVIEW_Start+0x5e>
 8006f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f08:	b2d2      	uxtb	r2, r2
 8006f0a:	701a      	strb	r2, [r3, #0]
 8006f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	627b      	str	r3, [r7, #36]	; 0x24
 8006f14:	4b36      	ldr	r3, [pc, #216]	; (8006ff0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	623b      	str	r3, [r7, #32]
 8006f1a:	e00b      	b.n	8006f34 <SEGGER_SYSVIEW_Start+0xb0>
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	1c59      	adds	r1, r3, #1
 8006f24:	6279      	str	r1, [r7, #36]	; 0x24
 8006f26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f2a:	b2d2      	uxtb	r2, r2
 8006f2c:	701a      	strb	r2, [r3, #0]
 8006f2e:	6a3b      	ldr	r3, [r7, #32]
 8006f30:	09db      	lsrs	r3, r3, #7
 8006f32:	623b      	str	r3, [r7, #32]
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	2b7f      	cmp	r3, #127	; 0x7f
 8006f38:	d8f0      	bhi.n	8006f1c <SEGGER_SYSVIEW_Start+0x98>
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	627a      	str	r2, [r7, #36]	; 0x24
 8006f40:	6a3a      	ldr	r2, [r7, #32]
 8006f42:	b2d2      	uxtb	r2, r2
 8006f44:	701a      	strb	r2, [r3, #0]
 8006f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f48:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	61fb      	str	r3, [r7, #28]
 8006f4e:	4b28      	ldr	r3, [pc, #160]	; (8006ff0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	61bb      	str	r3, [r7, #24]
 8006f54:	e00b      	b.n	8006f6e <SEGGER_SYSVIEW_Start+0xea>
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	1c59      	adds	r1, r3, #1
 8006f5e:	61f9      	str	r1, [r7, #28]
 8006f60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f64:	b2d2      	uxtb	r2, r2
 8006f66:	701a      	strb	r2, [r3, #0]
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	09db      	lsrs	r3, r3, #7
 8006f6c:	61bb      	str	r3, [r7, #24]
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	2b7f      	cmp	r3, #127	; 0x7f
 8006f72:	d8f0      	bhi.n	8006f56 <SEGGER_SYSVIEW_Start+0xd2>
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	1c5a      	adds	r2, r3, #1
 8006f78:	61fa      	str	r2, [r7, #28]
 8006f7a:	69ba      	ldr	r2, [r7, #24]
 8006f7c:	b2d2      	uxtb	r2, r2
 8006f7e:	701a      	strb	r2, [r3, #0]
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	617b      	str	r3, [r7, #20]
 8006f88:	2300      	movs	r3, #0
 8006f8a:	613b      	str	r3, [r7, #16]
 8006f8c:	e00b      	b.n	8006fa6 <SEGGER_SYSVIEW_Start+0x122>
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	b2da      	uxtb	r2, r3
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	1c59      	adds	r1, r3, #1
 8006f96:	6179      	str	r1, [r7, #20]
 8006f98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f9c:	b2d2      	uxtb	r2, r2
 8006f9e:	701a      	strb	r2, [r3, #0]
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	09db      	lsrs	r3, r3, #7
 8006fa4:	613b      	str	r3, [r7, #16]
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	2b7f      	cmp	r3, #127	; 0x7f
 8006faa:	d8f0      	bhi.n	8006f8e <SEGGER_SYSVIEW_Start+0x10a>
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	1c5a      	adds	r2, r3, #1
 8006fb0:	617a      	str	r2, [r7, #20]
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	b2d2      	uxtb	r2, r2
 8006fb6:	701a      	strb	r2, [r3, #0]
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006fbc:	2218      	movs	r2, #24
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7ff f8cd 	bl	8006160 <_SendPacket>
      RECORD_END();
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006fcc:	4b08      	ldr	r3, [pc, #32]	; (8006ff0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006fd4:	4b06      	ldr	r3, [pc, #24]	; (8006ff0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006fda:	f000 f9eb 	bl	80073b4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006fde:	f000 f9b1 	bl	8007344 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006fe2:	f000 fc83 	bl	80078ec <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006fe6:	bf00      	nop
 8006fe8:	3730      	adds	r7, #48	; 0x30
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	2001443c 	.word	0x2001443c
 8006ff4:	08008e90 	.word	0x08008e90
 8006ff8:	2001446c 	.word	0x2001446c

08006ffc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007002:	f3ef 8311 	mrs	r3, BASEPRI
 8007006:	f04f 0120 	mov.w	r1, #32
 800700a:	f381 8811 	msr	BASEPRI, r1
 800700e:	607b      	str	r3, [r7, #4]
 8007010:	480b      	ldr	r0, [pc, #44]	; (8007040 <SEGGER_SYSVIEW_Stop+0x44>)
 8007012:	f7fe ffb4 	bl	8005f7e <_PreparePacket>
 8007016:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8007018:	4b0a      	ldr	r3, [pc, #40]	; (8007044 <SEGGER_SYSVIEW_Stop+0x48>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d007      	beq.n	8007030 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8007020:	220b      	movs	r2, #11
 8007022:	6839      	ldr	r1, [r7, #0]
 8007024:	6838      	ldr	r0, [r7, #0]
 8007026:	f7ff f89b 	bl	8006160 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800702a:	4b06      	ldr	r3, [pc, #24]	; (8007044 <SEGGER_SYSVIEW_Stop+0x48>)
 800702c:	2200      	movs	r2, #0
 800702e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f383 8811 	msr	BASEPRI, r3
}
 8007036:	bf00      	nop
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	2001446c 	.word	0x2001446c
 8007044:	2001443c 	.word	0x2001443c

08007048 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007048:	b580      	push	{r7, lr}
 800704a:	b08c      	sub	sp, #48	; 0x30
 800704c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800704e:	f3ef 8311 	mrs	r3, BASEPRI
 8007052:	f04f 0120 	mov.w	r1, #32
 8007056:	f381 8811 	msr	BASEPRI, r1
 800705a:	60fb      	str	r3, [r7, #12]
 800705c:	4845      	ldr	r0, [pc, #276]	; (8007174 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800705e:	f7fe ff8e 	bl	8005f7e <_PreparePacket>
 8007062:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800706c:	4b42      	ldr	r3, [pc, #264]	; (8007178 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	62bb      	str	r3, [r7, #40]	; 0x28
 8007072:	e00b      	b.n	800708c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	b2da      	uxtb	r2, r3
 8007078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707a:	1c59      	adds	r1, r3, #1
 800707c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800707e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007082:	b2d2      	uxtb	r2, r2
 8007084:	701a      	strb	r2, [r3, #0]
 8007086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007088:	09db      	lsrs	r3, r3, #7
 800708a:	62bb      	str	r3, [r7, #40]	; 0x28
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	2b7f      	cmp	r3, #127	; 0x7f
 8007090:	d8f0      	bhi.n	8007074 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007094:	1c5a      	adds	r2, r3, #1
 8007096:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007098:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	701a      	strb	r2, [r3, #0]
 800709e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	627b      	str	r3, [r7, #36]	; 0x24
 80070a6:	4b34      	ldr	r3, [pc, #208]	; (8007178 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	623b      	str	r3, [r7, #32]
 80070ac:	e00b      	b.n	80070c6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b4:	1c59      	adds	r1, r3, #1
 80070b6:	6279      	str	r1, [r7, #36]	; 0x24
 80070b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070bc:	b2d2      	uxtb	r2, r2
 80070be:	701a      	strb	r2, [r3, #0]
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	09db      	lsrs	r3, r3, #7
 80070c4:	623b      	str	r3, [r7, #32]
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	2b7f      	cmp	r3, #127	; 0x7f
 80070ca:	d8f0      	bhi.n	80070ae <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80070cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ce:	1c5a      	adds	r2, r3, #1
 80070d0:	627a      	str	r2, [r7, #36]	; 0x24
 80070d2:	6a3a      	ldr	r2, [r7, #32]
 80070d4:	b2d2      	uxtb	r2, r2
 80070d6:	701a      	strb	r2, [r3, #0]
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	61fb      	str	r3, [r7, #28]
 80070e0:	4b25      	ldr	r3, [pc, #148]	; (8007178 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	61bb      	str	r3, [r7, #24]
 80070e6:	e00b      	b.n	8007100 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	1c59      	adds	r1, r3, #1
 80070f0:	61f9      	str	r1, [r7, #28]
 80070f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070f6:	b2d2      	uxtb	r2, r2
 80070f8:	701a      	strb	r2, [r3, #0]
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	09db      	lsrs	r3, r3, #7
 80070fe:	61bb      	str	r3, [r7, #24]
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	2b7f      	cmp	r3, #127	; 0x7f
 8007104:	d8f0      	bhi.n	80070e8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	1c5a      	adds	r2, r3, #1
 800710a:	61fa      	str	r2, [r7, #28]
 800710c:	69ba      	ldr	r2, [r7, #24]
 800710e:	b2d2      	uxtb	r2, r2
 8007110:	701a      	strb	r2, [r3, #0]
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	617b      	str	r3, [r7, #20]
 800711a:	2300      	movs	r3, #0
 800711c:	613b      	str	r3, [r7, #16]
 800711e:	e00b      	b.n	8007138 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	b2da      	uxtb	r2, r3
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	1c59      	adds	r1, r3, #1
 8007128:	6179      	str	r1, [r7, #20]
 800712a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800712e:	b2d2      	uxtb	r2, r2
 8007130:	701a      	strb	r2, [r3, #0]
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	09db      	lsrs	r3, r3, #7
 8007136:	613b      	str	r3, [r7, #16]
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	2b7f      	cmp	r3, #127	; 0x7f
 800713c:	d8f0      	bhi.n	8007120 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	1c5a      	adds	r2, r3, #1
 8007142:	617a      	str	r2, [r7, #20]
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	b2d2      	uxtb	r2, r2
 8007148:	701a      	strb	r2, [r3, #0]
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800714e:	2218      	movs	r2, #24
 8007150:	6879      	ldr	r1, [r7, #4]
 8007152:	68b8      	ldr	r0, [r7, #8]
 8007154:	f7ff f804 	bl	8006160 <_SendPacket>
  RECORD_END();
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800715e:	4b06      	ldr	r3, [pc, #24]	; (8007178 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	2b00      	cmp	r3, #0
 8007164:	d002      	beq.n	800716c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8007166:	4b04      	ldr	r3, [pc, #16]	; (8007178 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716a:	4798      	blx	r3
  }
}
 800716c:	bf00      	nop
 800716e:	3730      	adds	r7, #48	; 0x30
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	2001446c 	.word	0x2001446c
 8007178:	2001443c 	.word	0x2001443c

0800717c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800717c:	b580      	push	{r7, lr}
 800717e:	b092      	sub	sp, #72	; 0x48
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007184:	f3ef 8311 	mrs	r3, BASEPRI
 8007188:	f04f 0120 	mov.w	r1, #32
 800718c:	f381 8811 	msr	BASEPRI, r1
 8007190:	617b      	str	r3, [r7, #20]
 8007192:	486a      	ldr	r0, [pc, #424]	; (800733c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007194:	f7fe fef3 	bl	8005f7e <_PreparePacket>
 8007198:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	647b      	str	r3, [r7, #68]	; 0x44
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	4b66      	ldr	r3, [pc, #408]	; (8007340 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	643b      	str	r3, [r7, #64]	; 0x40
 80071ae:	e00b      	b.n	80071c8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80071b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071b6:	1c59      	adds	r1, r3, #1
 80071b8:	6479      	str	r1, [r7, #68]	; 0x44
 80071ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071be:	b2d2      	uxtb	r2, r2
 80071c0:	701a      	strb	r2, [r3, #0]
 80071c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071c4:	09db      	lsrs	r3, r3, #7
 80071c6:	643b      	str	r3, [r7, #64]	; 0x40
 80071c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071ca:	2b7f      	cmp	r3, #127	; 0x7f
 80071cc:	d8f0      	bhi.n	80071b0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80071ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071d0:	1c5a      	adds	r2, r3, #1
 80071d2:	647a      	str	r2, [r7, #68]	; 0x44
 80071d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071d6:	b2d2      	uxtb	r2, r2
 80071d8:	701a      	strb	r2, [r3, #0]
 80071da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80071e8:	e00b      	b.n	8007202 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80071ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f0:	1c59      	adds	r1, r3, #1
 80071f2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80071f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071f8:	b2d2      	uxtb	r2, r2
 80071fa:	701a      	strb	r2, [r3, #0]
 80071fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fe:	09db      	lsrs	r3, r3, #7
 8007200:	63bb      	str	r3, [r7, #56]	; 0x38
 8007202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007204:	2b7f      	cmp	r3, #127	; 0x7f
 8007206:	d8f0      	bhi.n	80071ea <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800720e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007210:	b2d2      	uxtb	r2, r2
 8007212:	701a      	strb	r2, [r3, #0]
 8007214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007216:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	2220      	movs	r2, #32
 800721e:	4619      	mov	r1, r3
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f7fe fe5f 	bl	8005ee4 <_EncodeStr>
 8007226:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007228:	2209      	movs	r2, #9
 800722a:	68f9      	ldr	r1, [r7, #12]
 800722c:	6938      	ldr	r0, [r7, #16]
 800722e:	f7fe ff97 	bl	8006160 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	637b      	str	r3, [r7, #52]	; 0x34
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	4b40      	ldr	r3, [pc, #256]	; (8007340 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	633b      	str	r3, [r7, #48]	; 0x30
 8007246:	e00b      	b.n	8007260 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724a:	b2da      	uxtb	r2, r3
 800724c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724e:	1c59      	adds	r1, r3, #1
 8007250:	6379      	str	r1, [r7, #52]	; 0x34
 8007252:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007256:	b2d2      	uxtb	r2, r2
 8007258:	701a      	strb	r2, [r3, #0]
 800725a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725c:	09db      	lsrs	r3, r3, #7
 800725e:	633b      	str	r3, [r7, #48]	; 0x30
 8007260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007262:	2b7f      	cmp	r3, #127	; 0x7f
 8007264:	d8f0      	bhi.n	8007248 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	637a      	str	r2, [r7, #52]	; 0x34
 800726c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800726e:	b2d2      	uxtb	r2, r2
 8007270:	701a      	strb	r2, [r3, #0]
 8007272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007274:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007280:	e00b      	b.n	800729a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007284:	b2da      	uxtb	r2, r3
 8007286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007288:	1c59      	adds	r1, r3, #1
 800728a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800728c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007290:	b2d2      	uxtb	r2, r2
 8007292:	701a      	strb	r2, [r3, #0]
 8007294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007296:	09db      	lsrs	r3, r3, #7
 8007298:	62bb      	str	r3, [r7, #40]	; 0x28
 800729a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729c:	2b7f      	cmp	r3, #127	; 0x7f
 800729e:	d8f0      	bhi.n	8007282 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80072a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a2:	1c5a      	adds	r2, r3, #1
 80072a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072a8:	b2d2      	uxtb	r2, r2
 80072aa:	701a      	strb	r2, [r3, #0]
 80072ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	627b      	str	r3, [r7, #36]	; 0x24
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	623b      	str	r3, [r7, #32]
 80072ba:	e00b      	b.n	80072d4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80072bc:	6a3b      	ldr	r3, [r7, #32]
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c2:	1c59      	adds	r1, r3, #1
 80072c4:	6279      	str	r1, [r7, #36]	; 0x24
 80072c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072ca:	b2d2      	uxtb	r2, r2
 80072cc:	701a      	strb	r2, [r3, #0]
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	09db      	lsrs	r3, r3, #7
 80072d2:	623b      	str	r3, [r7, #32]
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	2b7f      	cmp	r3, #127	; 0x7f
 80072d8:	d8f0      	bhi.n	80072bc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	1c5a      	adds	r2, r3, #1
 80072de:	627a      	str	r2, [r7, #36]	; 0x24
 80072e0:	6a3a      	ldr	r2, [r7, #32]
 80072e2:	b2d2      	uxtb	r2, r2
 80072e4:	701a      	strb	r2, [r3, #0]
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	61fb      	str	r3, [r7, #28]
 80072ee:	2300      	movs	r3, #0
 80072f0:	61bb      	str	r3, [r7, #24]
 80072f2:	e00b      	b.n	800730c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	1c59      	adds	r1, r3, #1
 80072fc:	61f9      	str	r1, [r7, #28]
 80072fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007302:	b2d2      	uxtb	r2, r2
 8007304:	701a      	strb	r2, [r3, #0]
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	09db      	lsrs	r3, r3, #7
 800730a:	61bb      	str	r3, [r7, #24]
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	2b7f      	cmp	r3, #127	; 0x7f
 8007310:	d8f0      	bhi.n	80072f4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	1c5a      	adds	r2, r3, #1
 8007316:	61fa      	str	r2, [r7, #28]
 8007318:	69ba      	ldr	r2, [r7, #24]
 800731a:	b2d2      	uxtb	r2, r2
 800731c:	701a      	strb	r2, [r3, #0]
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007322:	2215      	movs	r2, #21
 8007324:	68f9      	ldr	r1, [r7, #12]
 8007326:	6938      	ldr	r0, [r7, #16]
 8007328:	f7fe ff1a 	bl	8006160 <_SendPacket>
  RECORD_END();
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f383 8811 	msr	BASEPRI, r3
}
 8007332:	bf00      	nop
 8007334:	3748      	adds	r7, #72	; 0x48
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	2001446c 	.word	0x2001446c
 8007340:	2001443c 	.word	0x2001443c

08007344 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007344:	b580      	push	{r7, lr}
 8007346:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007348:	4b07      	ldr	r3, [pc, #28]	; (8007368 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800734a:	6a1b      	ldr	r3, [r3, #32]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d008      	beq.n	8007362 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007350:	4b05      	ldr	r3, [pc, #20]	; (8007368 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007352:	6a1b      	ldr	r3, [r3, #32]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800735a:	4b03      	ldr	r3, [pc, #12]	; (8007368 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	4798      	blx	r3
  }
}
 8007362:	bf00      	nop
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	2001443c 	.word	0x2001443c

0800736c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007374:	f3ef 8311 	mrs	r3, BASEPRI
 8007378:	f04f 0120 	mov.w	r1, #32
 800737c:	f381 8811 	msr	BASEPRI, r1
 8007380:	617b      	str	r3, [r7, #20]
 8007382:	480b      	ldr	r0, [pc, #44]	; (80073b0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007384:	f7fe fdfb 	bl	8005f7e <_PreparePacket>
 8007388:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800738a:	2280      	movs	r2, #128	; 0x80
 800738c:	6879      	ldr	r1, [r7, #4]
 800738e:	6938      	ldr	r0, [r7, #16]
 8007390:	f7fe fda8 	bl	8005ee4 <_EncodeStr>
 8007394:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007396:	220e      	movs	r2, #14
 8007398:	68f9      	ldr	r1, [r7, #12]
 800739a:	6938      	ldr	r0, [r7, #16]
 800739c:	f7fe fee0 	bl	8006160 <_SendPacket>
  RECORD_END();
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f383 8811 	msr	BASEPRI, r3
}
 80073a6:	bf00      	nop
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	2001446c 	.word	0x2001446c

080073b4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80073b4:	b590      	push	{r4, r7, lr}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80073ba:	4b15      	ldr	r3, [pc, #84]	; (8007410 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d01a      	beq.n	80073f8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80073c2:	4b13      	ldr	r3, [pc, #76]	; (8007410 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d015      	beq.n	80073f8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80073cc:	4b10      	ldr	r3, [pc, #64]	; (8007410 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4798      	blx	r3
 80073d4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80073d8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80073da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073de:	f04f 0200 	mov.w	r2, #0
 80073e2:	f04f 0300 	mov.w	r3, #0
 80073e6:	000a      	movs	r2, r1
 80073e8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80073ea:	4613      	mov	r3, r2
 80073ec:	461a      	mov	r2, r3
 80073ee:	4621      	mov	r1, r4
 80073f0:	200d      	movs	r0, #13
 80073f2:	f7ff fbe5 	bl	8006bc0 <SEGGER_SYSVIEW_RecordU32x2>
 80073f6:	e006      	b.n	8007406 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80073f8:	4b06      	ldr	r3, [pc, #24]	; (8007414 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4619      	mov	r1, r3
 80073fe:	200c      	movs	r0, #12
 8007400:	f7ff fba2 	bl	8006b48 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007404:	bf00      	nop
 8007406:	bf00      	nop
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	bd90      	pop	{r4, r7, pc}
 800740e:	bf00      	nop
 8007410:	2001443c 	.word	0x2001443c
 8007414:	e0001004 	.word	0xe0001004

08007418 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800741e:	f3ef 8311 	mrs	r3, BASEPRI
 8007422:	f04f 0120 	mov.w	r1, #32
 8007426:	f381 8811 	msr	BASEPRI, r1
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	4819      	ldr	r0, [pc, #100]	; (8007494 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800742e:	f7fe fda6 	bl	8005f7e <_PreparePacket>
 8007432:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007438:	4b17      	ldr	r3, [pc, #92]	; (8007498 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007440:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	617b      	str	r3, [r7, #20]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	613b      	str	r3, [r7, #16]
 800744a:	e00b      	b.n	8007464 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	b2da      	uxtb	r2, r3
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	1c59      	adds	r1, r3, #1
 8007454:	6179      	str	r1, [r7, #20]
 8007456:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800745a:	b2d2      	uxtb	r2, r2
 800745c:	701a      	strb	r2, [r3, #0]
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	09db      	lsrs	r3, r3, #7
 8007462:	613b      	str	r3, [r7, #16]
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	2b7f      	cmp	r3, #127	; 0x7f
 8007468:	d8f0      	bhi.n	800744c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	1c5a      	adds	r2, r3, #1
 800746e:	617a      	str	r2, [r7, #20]
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	b2d2      	uxtb	r2, r2
 8007474:	701a      	strb	r2, [r3, #0]
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800747a:	2202      	movs	r2, #2
 800747c:	6879      	ldr	r1, [r7, #4]
 800747e:	68b8      	ldr	r0, [r7, #8]
 8007480:	f7fe fe6e 	bl	8006160 <_SendPacket>
  RECORD_END();
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f383 8811 	msr	BASEPRI, r3
}
 800748a:	bf00      	nop
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	2001446c 	.word	0x2001446c
 8007498:	e000ed04 	.word	0xe000ed04

0800749c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80074a2:	f3ef 8311 	mrs	r3, BASEPRI
 80074a6:	f04f 0120 	mov.w	r1, #32
 80074aa:	f381 8811 	msr	BASEPRI, r1
 80074ae:	607b      	str	r3, [r7, #4]
 80074b0:	4807      	ldr	r0, [pc, #28]	; (80074d0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80074b2:	f7fe fd64 	bl	8005f7e <_PreparePacket>
 80074b6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80074b8:	2203      	movs	r2, #3
 80074ba:	6839      	ldr	r1, [r7, #0]
 80074bc:	6838      	ldr	r0, [r7, #0]
 80074be:	f7fe fe4f 	bl	8006160 <_SendPacket>
  RECORD_END();
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f383 8811 	msr	BASEPRI, r3
}
 80074c8:	bf00      	nop
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	2001446c 	.word	0x2001446c

080074d4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80074da:	f3ef 8311 	mrs	r3, BASEPRI
 80074de:	f04f 0120 	mov.w	r1, #32
 80074e2:	f381 8811 	msr	BASEPRI, r1
 80074e6:	607b      	str	r3, [r7, #4]
 80074e8:	4807      	ldr	r0, [pc, #28]	; (8007508 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80074ea:	f7fe fd48 	bl	8005f7e <_PreparePacket>
 80074ee:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80074f0:	2212      	movs	r2, #18
 80074f2:	6839      	ldr	r1, [r7, #0]
 80074f4:	6838      	ldr	r0, [r7, #0]
 80074f6:	f7fe fe33 	bl	8006160 <_SendPacket>
  RECORD_END();
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f383 8811 	msr	BASEPRI, r3
}
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	2001446c 	.word	0x2001446c

0800750c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007512:	f3ef 8311 	mrs	r3, BASEPRI
 8007516:	f04f 0120 	mov.w	r1, #32
 800751a:	f381 8811 	msr	BASEPRI, r1
 800751e:	607b      	str	r3, [r7, #4]
 8007520:	4807      	ldr	r0, [pc, #28]	; (8007540 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007522:	f7fe fd2c 	bl	8005f7e <_PreparePacket>
 8007526:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007528:	2211      	movs	r2, #17
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6838      	ldr	r0, [r7, #0]
 800752e:	f7fe fe17 	bl	8006160 <_SendPacket>
  RECORD_END();
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f383 8811 	msr	BASEPRI, r3
}
 8007538:	bf00      	nop
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	2001446c 	.word	0x2001446c

08007544 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007544:	b580      	push	{r7, lr}
 8007546:	b088      	sub	sp, #32
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800754c:	f3ef 8311 	mrs	r3, BASEPRI
 8007550:	f04f 0120 	mov.w	r1, #32
 8007554:	f381 8811 	msr	BASEPRI, r1
 8007558:	617b      	str	r3, [r7, #20]
 800755a:	4819      	ldr	r0, [pc, #100]	; (80075c0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800755c:	f7fe fd0f 	bl	8005f7e <_PreparePacket>
 8007560:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007566:	4b17      	ldr	r3, [pc, #92]	; (80075c4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	61fb      	str	r3, [r7, #28]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	61bb      	str	r3, [r7, #24]
 8007578:	e00b      	b.n	8007592 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	b2da      	uxtb	r2, r3
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	1c59      	adds	r1, r3, #1
 8007582:	61f9      	str	r1, [r7, #28]
 8007584:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007588:	b2d2      	uxtb	r2, r2
 800758a:	701a      	strb	r2, [r3, #0]
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	09db      	lsrs	r3, r3, #7
 8007590:	61bb      	str	r3, [r7, #24]
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	2b7f      	cmp	r3, #127	; 0x7f
 8007596:	d8f0      	bhi.n	800757a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	1c5a      	adds	r2, r3, #1
 800759c:	61fa      	str	r2, [r7, #28]
 800759e:	69ba      	ldr	r2, [r7, #24]
 80075a0:	b2d2      	uxtb	r2, r2
 80075a2:	701a      	strb	r2, [r3, #0]
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80075a8:	2208      	movs	r2, #8
 80075aa:	68f9      	ldr	r1, [r7, #12]
 80075ac:	6938      	ldr	r0, [r7, #16]
 80075ae:	f7fe fdd7 	bl	8006160 <_SendPacket>
  RECORD_END();
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f383 8811 	msr	BASEPRI, r3
}
 80075b8:	bf00      	nop
 80075ba:	3720      	adds	r7, #32
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	2001446c 	.word	0x2001446c
 80075c4:	2001443c 	.word	0x2001443c

080075c8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b088      	sub	sp, #32
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80075d0:	f3ef 8311 	mrs	r3, BASEPRI
 80075d4:	f04f 0120 	mov.w	r1, #32
 80075d8:	f381 8811 	msr	BASEPRI, r1
 80075dc:	617b      	str	r3, [r7, #20]
 80075de:	4819      	ldr	r0, [pc, #100]	; (8007644 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80075e0:	f7fe fccd 	bl	8005f7e <_PreparePacket>
 80075e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80075ea:	4b17      	ldr	r3, [pc, #92]	; (8007648 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	61fb      	str	r3, [r7, #28]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	61bb      	str	r3, [r7, #24]
 80075fc:	e00b      	b.n	8007616 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	b2da      	uxtb	r2, r3
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	1c59      	adds	r1, r3, #1
 8007606:	61f9      	str	r1, [r7, #28]
 8007608:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800760c:	b2d2      	uxtb	r2, r2
 800760e:	701a      	strb	r2, [r3, #0]
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	09db      	lsrs	r3, r3, #7
 8007614:	61bb      	str	r3, [r7, #24]
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	2b7f      	cmp	r3, #127	; 0x7f
 800761a:	d8f0      	bhi.n	80075fe <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	1c5a      	adds	r2, r3, #1
 8007620:	61fa      	str	r2, [r7, #28]
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	b2d2      	uxtb	r2, r2
 8007626:	701a      	strb	r2, [r3, #0]
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800762c:	2204      	movs	r2, #4
 800762e:	68f9      	ldr	r1, [r7, #12]
 8007630:	6938      	ldr	r0, [r7, #16]
 8007632:	f7fe fd95 	bl	8006160 <_SendPacket>
  RECORD_END();
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f383 8811 	msr	BASEPRI, r3
}
 800763c:	bf00      	nop
 800763e:	3720      	adds	r7, #32
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	2001446c 	.word	0x2001446c
 8007648:	2001443c 	.word	0x2001443c

0800764c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800764c:	b580      	push	{r7, lr}
 800764e:	b088      	sub	sp, #32
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007654:	f3ef 8311 	mrs	r3, BASEPRI
 8007658:	f04f 0120 	mov.w	r1, #32
 800765c:	f381 8811 	msr	BASEPRI, r1
 8007660:	617b      	str	r3, [r7, #20]
 8007662:	4819      	ldr	r0, [pc, #100]	; (80076c8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007664:	f7fe fc8b 	bl	8005f7e <_PreparePacket>
 8007668:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800766e:	4b17      	ldr	r3, [pc, #92]	; (80076cc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	61fb      	str	r3, [r7, #28]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	61bb      	str	r3, [r7, #24]
 8007680:	e00b      	b.n	800769a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	b2da      	uxtb	r2, r3
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	1c59      	adds	r1, r3, #1
 800768a:	61f9      	str	r1, [r7, #28]
 800768c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007690:	b2d2      	uxtb	r2, r2
 8007692:	701a      	strb	r2, [r3, #0]
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	09db      	lsrs	r3, r3, #7
 8007698:	61bb      	str	r3, [r7, #24]
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	2b7f      	cmp	r3, #127	; 0x7f
 800769e:	d8f0      	bhi.n	8007682 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	1c5a      	adds	r2, r3, #1
 80076a4:	61fa      	str	r2, [r7, #28]
 80076a6:	69ba      	ldr	r2, [r7, #24]
 80076a8:	b2d2      	uxtb	r2, r2
 80076aa:	701a      	strb	r2, [r3, #0]
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80076b0:	2206      	movs	r2, #6
 80076b2:	68f9      	ldr	r1, [r7, #12]
 80076b4:	6938      	ldr	r0, [r7, #16]
 80076b6:	f7fe fd53 	bl	8006160 <_SendPacket>
  RECORD_END();
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f383 8811 	msr	BASEPRI, r3
}
 80076c0:	bf00      	nop
 80076c2:	3720      	adds	r7, #32
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	2001446c 	.word	0x2001446c
 80076cc:	2001443c 	.word	0x2001443c

080076d0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b08a      	sub	sp, #40	; 0x28
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80076da:	f3ef 8311 	mrs	r3, BASEPRI
 80076de:	f04f 0120 	mov.w	r1, #32
 80076e2:	f381 8811 	msr	BASEPRI, r1
 80076e6:	617b      	str	r3, [r7, #20]
 80076e8:	4827      	ldr	r0, [pc, #156]	; (8007788 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80076ea:	f7fe fc48 	bl	8005f7e <_PreparePacket>
 80076ee:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80076f4:	4b25      	ldr	r3, [pc, #148]	; (800778c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	627b      	str	r3, [r7, #36]	; 0x24
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	623b      	str	r3, [r7, #32]
 8007706:	e00b      	b.n	8007720 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	b2da      	uxtb	r2, r3
 800770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770e:	1c59      	adds	r1, r3, #1
 8007710:	6279      	str	r1, [r7, #36]	; 0x24
 8007712:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007716:	b2d2      	uxtb	r2, r2
 8007718:	701a      	strb	r2, [r3, #0]
 800771a:	6a3b      	ldr	r3, [r7, #32]
 800771c:	09db      	lsrs	r3, r3, #7
 800771e:	623b      	str	r3, [r7, #32]
 8007720:	6a3b      	ldr	r3, [r7, #32]
 8007722:	2b7f      	cmp	r3, #127	; 0x7f
 8007724:	d8f0      	bhi.n	8007708 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	1c5a      	adds	r2, r3, #1
 800772a:	627a      	str	r2, [r7, #36]	; 0x24
 800772c:	6a3a      	ldr	r2, [r7, #32]
 800772e:	b2d2      	uxtb	r2, r2
 8007730:	701a      	strb	r2, [r3, #0]
 8007732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007734:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	61fb      	str	r3, [r7, #28]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	61bb      	str	r3, [r7, #24]
 800773e:	e00b      	b.n	8007758 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	b2da      	uxtb	r2, r3
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	1c59      	adds	r1, r3, #1
 8007748:	61f9      	str	r1, [r7, #28]
 800774a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800774e:	b2d2      	uxtb	r2, r2
 8007750:	701a      	strb	r2, [r3, #0]
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	09db      	lsrs	r3, r3, #7
 8007756:	61bb      	str	r3, [r7, #24]
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	2b7f      	cmp	r3, #127	; 0x7f
 800775c:	d8f0      	bhi.n	8007740 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	1c5a      	adds	r2, r3, #1
 8007762:	61fa      	str	r2, [r7, #28]
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	b2d2      	uxtb	r2, r2
 8007768:	701a      	strb	r2, [r3, #0]
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800776e:	2207      	movs	r2, #7
 8007770:	68f9      	ldr	r1, [r7, #12]
 8007772:	6938      	ldr	r0, [r7, #16]
 8007774:	f7fe fcf4 	bl	8006160 <_SendPacket>
  RECORD_END();
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	f383 8811 	msr	BASEPRI, r3
}
 800777e:	bf00      	nop
 8007780:	3728      	adds	r7, #40	; 0x28
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	2001446c 	.word	0x2001446c
 800778c:	2001443c 	.word	0x2001443c

08007790 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007798:	4b04      	ldr	r3, [pc, #16]	; (80077ac <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	1ad3      	subs	r3, r2, r3
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	2001443c 	.word	0x2001443c

080077b0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b08c      	sub	sp, #48	; 0x30
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	4603      	mov	r3, r0
 80077b8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80077ba:	4b3b      	ldr	r3, [pc, #236]	; (80078a8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d06d      	beq.n	800789e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80077c2:	4b39      	ldr	r3, [pc, #228]	; (80078a8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80077c8:	2300      	movs	r3, #0
 80077ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80077cc:	e008      	b.n	80077e0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80077ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80077d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d007      	beq.n	80077ea <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80077da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077dc:	3301      	adds	r3, #1
 80077de:	62bb      	str	r3, [r7, #40]	; 0x28
 80077e0:	79fb      	ldrb	r3, [r7, #7]
 80077e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d3f2      	bcc.n	80077ce <SEGGER_SYSVIEW_SendModule+0x1e>
 80077e8:	e000      	b.n	80077ec <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80077ea:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80077ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d055      	beq.n	800789e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80077f2:	f3ef 8311 	mrs	r3, BASEPRI
 80077f6:	f04f 0120 	mov.w	r1, #32
 80077fa:	f381 8811 	msr	BASEPRI, r1
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	482a      	ldr	r0, [pc, #168]	; (80078ac <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007802:	f7fe fbbc 	bl	8005f7e <_PreparePacket>
 8007806:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	627b      	str	r3, [r7, #36]	; 0x24
 8007810:	79fb      	ldrb	r3, [r7, #7]
 8007812:	623b      	str	r3, [r7, #32]
 8007814:	e00b      	b.n	800782e <SEGGER_SYSVIEW_SendModule+0x7e>
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	b2da      	uxtb	r2, r3
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	1c59      	adds	r1, r3, #1
 800781e:	6279      	str	r1, [r7, #36]	; 0x24
 8007820:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007824:	b2d2      	uxtb	r2, r2
 8007826:	701a      	strb	r2, [r3, #0]
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	09db      	lsrs	r3, r3, #7
 800782c:	623b      	str	r3, [r7, #32]
 800782e:	6a3b      	ldr	r3, [r7, #32]
 8007830:	2b7f      	cmp	r3, #127	; 0x7f
 8007832:	d8f0      	bhi.n	8007816 <SEGGER_SYSVIEW_SendModule+0x66>
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	1c5a      	adds	r2, r3, #1
 8007838:	627a      	str	r2, [r7, #36]	; 0x24
 800783a:	6a3a      	ldr	r2, [r7, #32]
 800783c:	b2d2      	uxtb	r2, r2
 800783e:	701a      	strb	r2, [r3, #0]
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	61fb      	str	r3, [r7, #28]
 8007848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	61bb      	str	r3, [r7, #24]
 800784e:	e00b      	b.n	8007868 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	b2da      	uxtb	r2, r3
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	1c59      	adds	r1, r3, #1
 8007858:	61f9      	str	r1, [r7, #28]
 800785a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800785e:	b2d2      	uxtb	r2, r2
 8007860:	701a      	strb	r2, [r3, #0]
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	09db      	lsrs	r3, r3, #7
 8007866:	61bb      	str	r3, [r7, #24]
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	2b7f      	cmp	r3, #127	; 0x7f
 800786c:	d8f0      	bhi.n	8007850 <SEGGER_SYSVIEW_SendModule+0xa0>
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	1c5a      	adds	r2, r3, #1
 8007872:	61fa      	str	r2, [r7, #28]
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	b2d2      	uxtb	r2, r2
 8007878:	701a      	strb	r2, [r3, #0]
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2280      	movs	r2, #128	; 0x80
 8007884:	4619      	mov	r1, r3
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f7fe fb2c 	bl	8005ee4 <_EncodeStr>
 800788c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800788e:	2216      	movs	r2, #22
 8007890:	68f9      	ldr	r1, [r7, #12]
 8007892:	6938      	ldr	r0, [r7, #16]
 8007894:	f7fe fc64 	bl	8006160 <_SendPacket>
      RECORD_END();
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800789e:	bf00      	nop
 80078a0:	3730      	adds	r7, #48	; 0x30
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	20014464 	.word	0x20014464
 80078ac:	2001446c 	.word	0x2001446c

080078b0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80078b6:	4b0c      	ldr	r3, [pc, #48]	; (80078e8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00f      	beq.n	80078de <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80078be:	4b0a      	ldr	r3, [pc, #40]	; (80078e8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d002      	beq.n	80078d2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1f2      	bne.n	80078c4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80078de:	bf00      	nop
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	20014464 	.word	0x20014464

080078ec <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80078f2:	f3ef 8311 	mrs	r3, BASEPRI
 80078f6:	f04f 0120 	mov.w	r1, #32
 80078fa:	f381 8811 	msr	BASEPRI, r1
 80078fe:	60fb      	str	r3, [r7, #12]
 8007900:	4817      	ldr	r0, [pc, #92]	; (8007960 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007902:	f7fe fb3c 	bl	8005f7e <_PreparePacket>
 8007906:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	617b      	str	r3, [r7, #20]
 8007910:	4b14      	ldr	r3, [pc, #80]	; (8007964 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	613b      	str	r3, [r7, #16]
 8007916:	e00b      	b.n	8007930 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	b2da      	uxtb	r2, r3
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	1c59      	adds	r1, r3, #1
 8007920:	6179      	str	r1, [r7, #20]
 8007922:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007926:	b2d2      	uxtb	r2, r2
 8007928:	701a      	strb	r2, [r3, #0]
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	09db      	lsrs	r3, r3, #7
 800792e:	613b      	str	r3, [r7, #16]
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	2b7f      	cmp	r3, #127	; 0x7f
 8007934:	d8f0      	bhi.n	8007918 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	1c5a      	adds	r2, r3, #1
 800793a:	617a      	str	r2, [r7, #20]
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	b2d2      	uxtb	r2, r2
 8007940:	701a      	strb	r2, [r3, #0]
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007946:	221b      	movs	r2, #27
 8007948:	6879      	ldr	r1, [r7, #4]
 800794a:	68b8      	ldr	r0, [r7, #8]
 800794c:	f7fe fc08 	bl	8006160 <_SendPacket>
  RECORD_END();
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f383 8811 	msr	BASEPRI, r3
}
 8007956:	bf00      	nop
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	2001446c 	.word	0x2001446c
 8007964:	20014468 	.word	0x20014468

08007968 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007968:	b40f      	push	{r0, r1, r2, r3}
 800796a:	b580      	push	{r7, lr}
 800796c:	b082      	sub	sp, #8
 800796e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007970:	f107 0314 	add.w	r3, r7, #20
 8007974:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007976:	1d3b      	adds	r3, r7, #4
 8007978:	461a      	mov	r2, r3
 800797a:	2100      	movs	r1, #0
 800797c:	6938      	ldr	r0, [r7, #16]
 800797e:	f7fe fe79 	bl	8006674 <_VPrintTarget>
  va_end(ParamList);
}
 8007982:	bf00      	nop
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800798c:	b004      	add	sp, #16
 800798e:	4770      	bx	lr

08007990 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007990:	b580      	push	{r7, lr}
 8007992:	b08a      	sub	sp, #40	; 0x28
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007998:	f3ef 8311 	mrs	r3, BASEPRI
 800799c:	f04f 0120 	mov.w	r1, #32
 80079a0:	f381 8811 	msr	BASEPRI, r1
 80079a4:	617b      	str	r3, [r7, #20]
 80079a6:	4827      	ldr	r0, [pc, #156]	; (8007a44 <SEGGER_SYSVIEW_Warn+0xb4>)
 80079a8:	f7fe fae9 	bl	8005f7e <_PreparePacket>
 80079ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80079ae:	2280      	movs	r2, #128	; 0x80
 80079b0:	6879      	ldr	r1, [r7, #4]
 80079b2:	6938      	ldr	r0, [r7, #16]
 80079b4:	f7fe fa96 	bl	8005ee4 <_EncodeStr>
 80079b8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	627b      	str	r3, [r7, #36]	; 0x24
 80079be:	2301      	movs	r3, #1
 80079c0:	623b      	str	r3, [r7, #32]
 80079c2:	e00b      	b.n	80079dc <SEGGER_SYSVIEW_Warn+0x4c>
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ca:	1c59      	adds	r1, r3, #1
 80079cc:	6279      	str	r1, [r7, #36]	; 0x24
 80079ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079d2:	b2d2      	uxtb	r2, r2
 80079d4:	701a      	strb	r2, [r3, #0]
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	09db      	lsrs	r3, r3, #7
 80079da:	623b      	str	r3, [r7, #32]
 80079dc:	6a3b      	ldr	r3, [r7, #32]
 80079de:	2b7f      	cmp	r3, #127	; 0x7f
 80079e0:	d8f0      	bhi.n	80079c4 <SEGGER_SYSVIEW_Warn+0x34>
 80079e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e4:	1c5a      	adds	r2, r3, #1
 80079e6:	627a      	str	r2, [r7, #36]	; 0x24
 80079e8:	6a3a      	ldr	r2, [r7, #32]
 80079ea:	b2d2      	uxtb	r2, r2
 80079ec:	701a      	strb	r2, [r3, #0]
 80079ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	61fb      	str	r3, [r7, #28]
 80079f6:	2300      	movs	r3, #0
 80079f8:	61bb      	str	r3, [r7, #24]
 80079fa:	e00b      	b.n	8007a14 <SEGGER_SYSVIEW_Warn+0x84>
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	b2da      	uxtb	r2, r3
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	1c59      	adds	r1, r3, #1
 8007a04:	61f9      	str	r1, [r7, #28]
 8007a06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a0a:	b2d2      	uxtb	r2, r2
 8007a0c:	701a      	strb	r2, [r3, #0]
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	09db      	lsrs	r3, r3, #7
 8007a12:	61bb      	str	r3, [r7, #24]
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	2b7f      	cmp	r3, #127	; 0x7f
 8007a18:	d8f0      	bhi.n	80079fc <SEGGER_SYSVIEW_Warn+0x6c>
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	1c5a      	adds	r2, r3, #1
 8007a1e:	61fa      	str	r2, [r7, #28]
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	b2d2      	uxtb	r2, r2
 8007a24:	701a      	strb	r2, [r3, #0]
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007a2a:	221a      	movs	r2, #26
 8007a2c:	68f9      	ldr	r1, [r7, #12]
 8007a2e:	6938      	ldr	r0, [r7, #16]
 8007a30:	f7fe fb96 	bl	8006160 <_SendPacket>
  RECORD_END();
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f383 8811 	msr	BASEPRI, r3
}
 8007a3a:	bf00      	nop
 8007a3c:	3728      	adds	r7, #40	; 0x28
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	2001446c 	.word	0x2001446c

08007a48 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007a4c:	4b13      	ldr	r3, [pc, #76]	; (8007a9c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a4e:	7e1b      	ldrb	r3, [r3, #24]
 8007a50:	4619      	mov	r1, r3
 8007a52:	4a13      	ldr	r2, [pc, #76]	; (8007aa0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007a54:	460b      	mov	r3, r1
 8007a56:	005b      	lsls	r3, r3, #1
 8007a58:	440b      	add	r3, r1
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	4413      	add	r3, r2
 8007a5e:	336c      	adds	r3, #108	; 0x6c
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	4b0e      	ldr	r3, [pc, #56]	; (8007a9c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a64:	7e1b      	ldrb	r3, [r3, #24]
 8007a66:	4618      	mov	r0, r3
 8007a68:	490d      	ldr	r1, [pc, #52]	; (8007aa0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	005b      	lsls	r3, r3, #1
 8007a6e:	4403      	add	r3, r0
 8007a70:	00db      	lsls	r3, r3, #3
 8007a72:	440b      	add	r3, r1
 8007a74:	3370      	adds	r3, #112	; 0x70
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d00b      	beq.n	8007a94 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007a7c:	4b07      	ldr	r3, [pc, #28]	; (8007a9c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a7e:	789b      	ldrb	r3, [r3, #2]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d107      	bne.n	8007a94 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007a84:	4b05      	ldr	r3, [pc, #20]	; (8007a9c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a86:	2201      	movs	r2, #1
 8007a88:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007a8a:	f7fe fa85 	bl	8005f98 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007a8e:	4b03      	ldr	r3, [pc, #12]	; (8007a9c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a90:	2200      	movs	r2, #0
 8007a92:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007a94:	4b01      	ldr	r3, [pc, #4]	; (8007a9c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a96:	781b      	ldrb	r3, [r3, #0]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	2001443c 	.word	0x2001443c
 8007aa0:	20012f7c 	.word	0x20012f7c

08007aa4 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
 8007ab0:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	6879      	ldr	r1, [r7, #4]
 8007ab6:	2000      	movs	r0, #0
 8007ab8:	f7fe f8fa 	bl	8005cb0 <SEGGER_RTT_Write>
  return len;
 8007abc:	683b      	ldr	r3, [r7, #0]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
	...

08007ac8 <std>:
 8007ac8:	2300      	movs	r3, #0
 8007aca:	b510      	push	{r4, lr}
 8007acc:	4604      	mov	r4, r0
 8007ace:	e9c0 3300 	strd	r3, r3, [r0]
 8007ad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ad6:	6083      	str	r3, [r0, #8]
 8007ad8:	8181      	strh	r1, [r0, #12]
 8007ada:	6643      	str	r3, [r0, #100]	; 0x64
 8007adc:	81c2      	strh	r2, [r0, #14]
 8007ade:	6183      	str	r3, [r0, #24]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	2208      	movs	r2, #8
 8007ae4:	305c      	adds	r0, #92	; 0x5c
 8007ae6:	f000 f94a 	bl	8007d7e <memset>
 8007aea:	4b0d      	ldr	r3, [pc, #52]	; (8007b20 <std+0x58>)
 8007aec:	6263      	str	r3, [r4, #36]	; 0x24
 8007aee:	4b0d      	ldr	r3, [pc, #52]	; (8007b24 <std+0x5c>)
 8007af0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007af2:	4b0d      	ldr	r3, [pc, #52]	; (8007b28 <std+0x60>)
 8007af4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007af6:	4b0d      	ldr	r3, [pc, #52]	; (8007b2c <std+0x64>)
 8007af8:	6323      	str	r3, [r4, #48]	; 0x30
 8007afa:	4b0d      	ldr	r3, [pc, #52]	; (8007b30 <std+0x68>)
 8007afc:	6224      	str	r4, [r4, #32]
 8007afe:	429c      	cmp	r4, r3
 8007b00:	d006      	beq.n	8007b10 <std+0x48>
 8007b02:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007b06:	4294      	cmp	r4, r2
 8007b08:	d002      	beq.n	8007b10 <std+0x48>
 8007b0a:	33d0      	adds	r3, #208	; 0xd0
 8007b0c:	429c      	cmp	r4, r3
 8007b0e:	d105      	bne.n	8007b1c <std+0x54>
 8007b10:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b18:	f000 b992 	b.w	8007e40 <__retarget_lock_init_recursive>
 8007b1c:	bd10      	pop	{r4, pc}
 8007b1e:	bf00      	nop
 8007b20:	08007cd9 	.word	0x08007cd9
 8007b24:	08007cfb 	.word	0x08007cfb
 8007b28:	08007d33 	.word	0x08007d33
 8007b2c:	08007d57 	.word	0x08007d57
 8007b30:	20014550 	.word	0x20014550

08007b34 <stdio_exit_handler>:
 8007b34:	4a02      	ldr	r2, [pc, #8]	; (8007b40 <stdio_exit_handler+0xc>)
 8007b36:	4903      	ldr	r1, [pc, #12]	; (8007b44 <stdio_exit_handler+0x10>)
 8007b38:	4803      	ldr	r0, [pc, #12]	; (8007b48 <stdio_exit_handler+0x14>)
 8007b3a:	f000 b869 	b.w	8007c10 <_fwalk_sglue>
 8007b3e:	bf00      	nop
 8007b40:	2000001c 	.word	0x2000001c
 8007b44:	080089b9 	.word	0x080089b9
 8007b48:	20000028 	.word	0x20000028

08007b4c <cleanup_stdio>:
 8007b4c:	6841      	ldr	r1, [r0, #4]
 8007b4e:	4b0c      	ldr	r3, [pc, #48]	; (8007b80 <cleanup_stdio+0x34>)
 8007b50:	4299      	cmp	r1, r3
 8007b52:	b510      	push	{r4, lr}
 8007b54:	4604      	mov	r4, r0
 8007b56:	d001      	beq.n	8007b5c <cleanup_stdio+0x10>
 8007b58:	f000 ff2e 	bl	80089b8 <_fflush_r>
 8007b5c:	68a1      	ldr	r1, [r4, #8]
 8007b5e:	4b09      	ldr	r3, [pc, #36]	; (8007b84 <cleanup_stdio+0x38>)
 8007b60:	4299      	cmp	r1, r3
 8007b62:	d002      	beq.n	8007b6a <cleanup_stdio+0x1e>
 8007b64:	4620      	mov	r0, r4
 8007b66:	f000 ff27 	bl	80089b8 <_fflush_r>
 8007b6a:	68e1      	ldr	r1, [r4, #12]
 8007b6c:	4b06      	ldr	r3, [pc, #24]	; (8007b88 <cleanup_stdio+0x3c>)
 8007b6e:	4299      	cmp	r1, r3
 8007b70:	d004      	beq.n	8007b7c <cleanup_stdio+0x30>
 8007b72:	4620      	mov	r0, r4
 8007b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b78:	f000 bf1e 	b.w	80089b8 <_fflush_r>
 8007b7c:	bd10      	pop	{r4, pc}
 8007b7e:	bf00      	nop
 8007b80:	20014550 	.word	0x20014550
 8007b84:	200145b8 	.word	0x200145b8
 8007b88:	20014620 	.word	0x20014620

08007b8c <global_stdio_init.part.0>:
 8007b8c:	b510      	push	{r4, lr}
 8007b8e:	4b0b      	ldr	r3, [pc, #44]	; (8007bbc <global_stdio_init.part.0+0x30>)
 8007b90:	4c0b      	ldr	r4, [pc, #44]	; (8007bc0 <global_stdio_init.part.0+0x34>)
 8007b92:	4a0c      	ldr	r2, [pc, #48]	; (8007bc4 <global_stdio_init.part.0+0x38>)
 8007b94:	601a      	str	r2, [r3, #0]
 8007b96:	4620      	mov	r0, r4
 8007b98:	2200      	movs	r2, #0
 8007b9a:	2104      	movs	r1, #4
 8007b9c:	f7ff ff94 	bl	8007ac8 <std>
 8007ba0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	2109      	movs	r1, #9
 8007ba8:	f7ff ff8e 	bl	8007ac8 <std>
 8007bac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bb6:	2112      	movs	r1, #18
 8007bb8:	f7ff bf86 	b.w	8007ac8 <std>
 8007bbc:	20014688 	.word	0x20014688
 8007bc0:	20014550 	.word	0x20014550
 8007bc4:	08007b35 	.word	0x08007b35

08007bc8 <__sfp_lock_acquire>:
 8007bc8:	4801      	ldr	r0, [pc, #4]	; (8007bd0 <__sfp_lock_acquire+0x8>)
 8007bca:	f000 b93a 	b.w	8007e42 <__retarget_lock_acquire_recursive>
 8007bce:	bf00      	nop
 8007bd0:	20014691 	.word	0x20014691

08007bd4 <__sfp_lock_release>:
 8007bd4:	4801      	ldr	r0, [pc, #4]	; (8007bdc <__sfp_lock_release+0x8>)
 8007bd6:	f000 b935 	b.w	8007e44 <__retarget_lock_release_recursive>
 8007bda:	bf00      	nop
 8007bdc:	20014691 	.word	0x20014691

08007be0 <__sinit>:
 8007be0:	b510      	push	{r4, lr}
 8007be2:	4604      	mov	r4, r0
 8007be4:	f7ff fff0 	bl	8007bc8 <__sfp_lock_acquire>
 8007be8:	6a23      	ldr	r3, [r4, #32]
 8007bea:	b11b      	cbz	r3, 8007bf4 <__sinit+0x14>
 8007bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bf0:	f7ff bff0 	b.w	8007bd4 <__sfp_lock_release>
 8007bf4:	4b04      	ldr	r3, [pc, #16]	; (8007c08 <__sinit+0x28>)
 8007bf6:	6223      	str	r3, [r4, #32]
 8007bf8:	4b04      	ldr	r3, [pc, #16]	; (8007c0c <__sinit+0x2c>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1f5      	bne.n	8007bec <__sinit+0xc>
 8007c00:	f7ff ffc4 	bl	8007b8c <global_stdio_init.part.0>
 8007c04:	e7f2      	b.n	8007bec <__sinit+0xc>
 8007c06:	bf00      	nop
 8007c08:	08007b4d 	.word	0x08007b4d
 8007c0c:	20014688 	.word	0x20014688

08007c10 <_fwalk_sglue>:
 8007c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c14:	4607      	mov	r7, r0
 8007c16:	4688      	mov	r8, r1
 8007c18:	4614      	mov	r4, r2
 8007c1a:	2600      	movs	r6, #0
 8007c1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c20:	f1b9 0901 	subs.w	r9, r9, #1
 8007c24:	d505      	bpl.n	8007c32 <_fwalk_sglue+0x22>
 8007c26:	6824      	ldr	r4, [r4, #0]
 8007c28:	2c00      	cmp	r4, #0
 8007c2a:	d1f7      	bne.n	8007c1c <_fwalk_sglue+0xc>
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c32:	89ab      	ldrh	r3, [r5, #12]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d907      	bls.n	8007c48 <_fwalk_sglue+0x38>
 8007c38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	d003      	beq.n	8007c48 <_fwalk_sglue+0x38>
 8007c40:	4629      	mov	r1, r5
 8007c42:	4638      	mov	r0, r7
 8007c44:	47c0      	blx	r8
 8007c46:	4306      	orrs	r6, r0
 8007c48:	3568      	adds	r5, #104	; 0x68
 8007c4a:	e7e9      	b.n	8007c20 <_fwalk_sglue+0x10>

08007c4c <iprintf>:
 8007c4c:	b40f      	push	{r0, r1, r2, r3}
 8007c4e:	b507      	push	{r0, r1, r2, lr}
 8007c50:	4906      	ldr	r1, [pc, #24]	; (8007c6c <iprintf+0x20>)
 8007c52:	ab04      	add	r3, sp, #16
 8007c54:	6808      	ldr	r0, [r1, #0]
 8007c56:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c5a:	6881      	ldr	r1, [r0, #8]
 8007c5c:	9301      	str	r3, [sp, #4]
 8007c5e:	f000 fb7b 	bl	8008358 <_vfiprintf_r>
 8007c62:	b003      	add	sp, #12
 8007c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c68:	b004      	add	sp, #16
 8007c6a:	4770      	bx	lr
 8007c6c:	20000074 	.word	0x20000074

08007c70 <sniprintf>:
 8007c70:	b40c      	push	{r2, r3}
 8007c72:	b530      	push	{r4, r5, lr}
 8007c74:	4b17      	ldr	r3, [pc, #92]	; (8007cd4 <sniprintf+0x64>)
 8007c76:	1e0c      	subs	r4, r1, #0
 8007c78:	681d      	ldr	r5, [r3, #0]
 8007c7a:	b09d      	sub	sp, #116	; 0x74
 8007c7c:	da08      	bge.n	8007c90 <sniprintf+0x20>
 8007c7e:	238b      	movs	r3, #139	; 0x8b
 8007c80:	602b      	str	r3, [r5, #0]
 8007c82:	f04f 30ff 	mov.w	r0, #4294967295
 8007c86:	b01d      	add	sp, #116	; 0x74
 8007c88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c8c:	b002      	add	sp, #8
 8007c8e:	4770      	bx	lr
 8007c90:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007c94:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007c98:	bf14      	ite	ne
 8007c9a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007c9e:	4623      	moveq	r3, r4
 8007ca0:	9304      	str	r3, [sp, #16]
 8007ca2:	9307      	str	r3, [sp, #28]
 8007ca4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007ca8:	9002      	str	r0, [sp, #8]
 8007caa:	9006      	str	r0, [sp, #24]
 8007cac:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007cb0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007cb2:	ab21      	add	r3, sp, #132	; 0x84
 8007cb4:	a902      	add	r1, sp, #8
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	9301      	str	r3, [sp, #4]
 8007cba:	f000 fa25 	bl	8008108 <_svfiprintf_r>
 8007cbe:	1c43      	adds	r3, r0, #1
 8007cc0:	bfbc      	itt	lt
 8007cc2:	238b      	movlt	r3, #139	; 0x8b
 8007cc4:	602b      	strlt	r3, [r5, #0]
 8007cc6:	2c00      	cmp	r4, #0
 8007cc8:	d0dd      	beq.n	8007c86 <sniprintf+0x16>
 8007cca:	9b02      	ldr	r3, [sp, #8]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	701a      	strb	r2, [r3, #0]
 8007cd0:	e7d9      	b.n	8007c86 <sniprintf+0x16>
 8007cd2:	bf00      	nop
 8007cd4:	20000074 	.word	0x20000074

08007cd8 <__sread>:
 8007cd8:	b510      	push	{r4, lr}
 8007cda:	460c      	mov	r4, r1
 8007cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ce0:	f000 f878 	bl	8007dd4 <_read_r>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	bfab      	itete	ge
 8007ce8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007cea:	89a3      	ldrhlt	r3, [r4, #12]
 8007cec:	181b      	addge	r3, r3, r0
 8007cee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cf2:	bfac      	ite	ge
 8007cf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007cf6:	81a3      	strhlt	r3, [r4, #12]
 8007cf8:	bd10      	pop	{r4, pc}

08007cfa <__swrite>:
 8007cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cfe:	461f      	mov	r7, r3
 8007d00:	898b      	ldrh	r3, [r1, #12]
 8007d02:	05db      	lsls	r3, r3, #23
 8007d04:	4605      	mov	r5, r0
 8007d06:	460c      	mov	r4, r1
 8007d08:	4616      	mov	r6, r2
 8007d0a:	d505      	bpl.n	8007d18 <__swrite+0x1e>
 8007d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d10:	2302      	movs	r3, #2
 8007d12:	2200      	movs	r2, #0
 8007d14:	f000 f84c 	bl	8007db0 <_lseek_r>
 8007d18:	89a3      	ldrh	r3, [r4, #12]
 8007d1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d22:	81a3      	strh	r3, [r4, #12]
 8007d24:	4632      	mov	r2, r6
 8007d26:	463b      	mov	r3, r7
 8007d28:	4628      	mov	r0, r5
 8007d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d2e:	f7ff beb9 	b.w	8007aa4 <_write_r>

08007d32 <__sseek>:
 8007d32:	b510      	push	{r4, lr}
 8007d34:	460c      	mov	r4, r1
 8007d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d3a:	f000 f839 	bl	8007db0 <_lseek_r>
 8007d3e:	1c43      	adds	r3, r0, #1
 8007d40:	89a3      	ldrh	r3, [r4, #12]
 8007d42:	bf15      	itete	ne
 8007d44:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d4e:	81a3      	strheq	r3, [r4, #12]
 8007d50:	bf18      	it	ne
 8007d52:	81a3      	strhne	r3, [r4, #12]
 8007d54:	bd10      	pop	{r4, pc}

08007d56 <__sclose>:
 8007d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d5a:	f000 b819 	b.w	8007d90 <_close_r>

08007d5e <memcmp>:
 8007d5e:	b510      	push	{r4, lr}
 8007d60:	3901      	subs	r1, #1
 8007d62:	4402      	add	r2, r0
 8007d64:	4290      	cmp	r0, r2
 8007d66:	d101      	bne.n	8007d6c <memcmp+0xe>
 8007d68:	2000      	movs	r0, #0
 8007d6a:	e005      	b.n	8007d78 <memcmp+0x1a>
 8007d6c:	7803      	ldrb	r3, [r0, #0]
 8007d6e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007d72:	42a3      	cmp	r3, r4
 8007d74:	d001      	beq.n	8007d7a <memcmp+0x1c>
 8007d76:	1b18      	subs	r0, r3, r4
 8007d78:	bd10      	pop	{r4, pc}
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	e7f2      	b.n	8007d64 <memcmp+0x6>

08007d7e <memset>:
 8007d7e:	4402      	add	r2, r0
 8007d80:	4603      	mov	r3, r0
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d100      	bne.n	8007d88 <memset+0xa>
 8007d86:	4770      	bx	lr
 8007d88:	f803 1b01 	strb.w	r1, [r3], #1
 8007d8c:	e7f9      	b.n	8007d82 <memset+0x4>
	...

08007d90 <_close_r>:
 8007d90:	b538      	push	{r3, r4, r5, lr}
 8007d92:	4d06      	ldr	r5, [pc, #24]	; (8007dac <_close_r+0x1c>)
 8007d94:	2300      	movs	r3, #0
 8007d96:	4604      	mov	r4, r0
 8007d98:	4608      	mov	r0, r1
 8007d9a:	602b      	str	r3, [r5, #0]
 8007d9c:	f7f9 f809 	bl	8000db2 <_close>
 8007da0:	1c43      	adds	r3, r0, #1
 8007da2:	d102      	bne.n	8007daa <_close_r+0x1a>
 8007da4:	682b      	ldr	r3, [r5, #0]
 8007da6:	b103      	cbz	r3, 8007daa <_close_r+0x1a>
 8007da8:	6023      	str	r3, [r4, #0]
 8007daa:	bd38      	pop	{r3, r4, r5, pc}
 8007dac:	2001468c 	.word	0x2001468c

08007db0 <_lseek_r>:
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	4d07      	ldr	r5, [pc, #28]	; (8007dd0 <_lseek_r+0x20>)
 8007db4:	4604      	mov	r4, r0
 8007db6:	4608      	mov	r0, r1
 8007db8:	4611      	mov	r1, r2
 8007dba:	2200      	movs	r2, #0
 8007dbc:	602a      	str	r2, [r5, #0]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	f7f9 f81e 	bl	8000e00 <_lseek>
 8007dc4:	1c43      	adds	r3, r0, #1
 8007dc6:	d102      	bne.n	8007dce <_lseek_r+0x1e>
 8007dc8:	682b      	ldr	r3, [r5, #0]
 8007dca:	b103      	cbz	r3, 8007dce <_lseek_r+0x1e>
 8007dcc:	6023      	str	r3, [r4, #0]
 8007dce:	bd38      	pop	{r3, r4, r5, pc}
 8007dd0:	2001468c 	.word	0x2001468c

08007dd4 <_read_r>:
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	4d07      	ldr	r5, [pc, #28]	; (8007df4 <_read_r+0x20>)
 8007dd8:	4604      	mov	r4, r0
 8007dda:	4608      	mov	r0, r1
 8007ddc:	4611      	mov	r1, r2
 8007dde:	2200      	movs	r2, #0
 8007de0:	602a      	str	r2, [r5, #0]
 8007de2:	461a      	mov	r2, r3
 8007de4:	f7f8 ffc8 	bl	8000d78 <_read>
 8007de8:	1c43      	adds	r3, r0, #1
 8007dea:	d102      	bne.n	8007df2 <_read_r+0x1e>
 8007dec:	682b      	ldr	r3, [r5, #0]
 8007dee:	b103      	cbz	r3, 8007df2 <_read_r+0x1e>
 8007df0:	6023      	str	r3, [r4, #0]
 8007df2:	bd38      	pop	{r3, r4, r5, pc}
 8007df4:	2001468c 	.word	0x2001468c

08007df8 <__libc_init_array>:
 8007df8:	b570      	push	{r4, r5, r6, lr}
 8007dfa:	4d0d      	ldr	r5, [pc, #52]	; (8007e30 <__libc_init_array+0x38>)
 8007dfc:	4c0d      	ldr	r4, [pc, #52]	; (8007e34 <__libc_init_array+0x3c>)
 8007dfe:	1b64      	subs	r4, r4, r5
 8007e00:	10a4      	asrs	r4, r4, #2
 8007e02:	2600      	movs	r6, #0
 8007e04:	42a6      	cmp	r6, r4
 8007e06:	d109      	bne.n	8007e1c <__libc_init_array+0x24>
 8007e08:	4d0b      	ldr	r5, [pc, #44]	; (8007e38 <__libc_init_array+0x40>)
 8007e0a:	4c0c      	ldr	r4, [pc, #48]	; (8007e3c <__libc_init_array+0x44>)
 8007e0c:	f000 ff86 	bl	8008d1c <_init>
 8007e10:	1b64      	subs	r4, r4, r5
 8007e12:	10a4      	asrs	r4, r4, #2
 8007e14:	2600      	movs	r6, #0
 8007e16:	42a6      	cmp	r6, r4
 8007e18:	d105      	bne.n	8007e26 <__libc_init_array+0x2e>
 8007e1a:	bd70      	pop	{r4, r5, r6, pc}
 8007e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e20:	4798      	blx	r3
 8007e22:	3601      	adds	r6, #1
 8007e24:	e7ee      	b.n	8007e04 <__libc_init_array+0xc>
 8007e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e2a:	4798      	blx	r3
 8007e2c:	3601      	adds	r6, #1
 8007e2e:	e7f2      	b.n	8007e16 <__libc_init_array+0x1e>
 8007e30:	08008ee8 	.word	0x08008ee8
 8007e34:	08008ee8 	.word	0x08008ee8
 8007e38:	08008ee8 	.word	0x08008ee8
 8007e3c:	08008eec 	.word	0x08008eec

08007e40 <__retarget_lock_init_recursive>:
 8007e40:	4770      	bx	lr

08007e42 <__retarget_lock_acquire_recursive>:
 8007e42:	4770      	bx	lr

08007e44 <__retarget_lock_release_recursive>:
 8007e44:	4770      	bx	lr

08007e46 <memcpy>:
 8007e46:	440a      	add	r2, r1
 8007e48:	4291      	cmp	r1, r2
 8007e4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e4e:	d100      	bne.n	8007e52 <memcpy+0xc>
 8007e50:	4770      	bx	lr
 8007e52:	b510      	push	{r4, lr}
 8007e54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e5c:	4291      	cmp	r1, r2
 8007e5e:	d1f9      	bne.n	8007e54 <memcpy+0xe>
 8007e60:	bd10      	pop	{r4, pc}
	...

08007e64 <_free_r>:
 8007e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e66:	2900      	cmp	r1, #0
 8007e68:	d044      	beq.n	8007ef4 <_free_r+0x90>
 8007e6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e6e:	9001      	str	r0, [sp, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f1a1 0404 	sub.w	r4, r1, #4
 8007e76:	bfb8      	it	lt
 8007e78:	18e4      	addlt	r4, r4, r3
 8007e7a:	f000 f8df 	bl	800803c <__malloc_lock>
 8007e7e:	4a1e      	ldr	r2, [pc, #120]	; (8007ef8 <_free_r+0x94>)
 8007e80:	9801      	ldr	r0, [sp, #4]
 8007e82:	6813      	ldr	r3, [r2, #0]
 8007e84:	b933      	cbnz	r3, 8007e94 <_free_r+0x30>
 8007e86:	6063      	str	r3, [r4, #4]
 8007e88:	6014      	str	r4, [r2, #0]
 8007e8a:	b003      	add	sp, #12
 8007e8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e90:	f000 b8da 	b.w	8008048 <__malloc_unlock>
 8007e94:	42a3      	cmp	r3, r4
 8007e96:	d908      	bls.n	8007eaa <_free_r+0x46>
 8007e98:	6825      	ldr	r5, [r4, #0]
 8007e9a:	1961      	adds	r1, r4, r5
 8007e9c:	428b      	cmp	r3, r1
 8007e9e:	bf01      	itttt	eq
 8007ea0:	6819      	ldreq	r1, [r3, #0]
 8007ea2:	685b      	ldreq	r3, [r3, #4]
 8007ea4:	1949      	addeq	r1, r1, r5
 8007ea6:	6021      	streq	r1, [r4, #0]
 8007ea8:	e7ed      	b.n	8007e86 <_free_r+0x22>
 8007eaa:	461a      	mov	r2, r3
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	b10b      	cbz	r3, 8007eb4 <_free_r+0x50>
 8007eb0:	42a3      	cmp	r3, r4
 8007eb2:	d9fa      	bls.n	8007eaa <_free_r+0x46>
 8007eb4:	6811      	ldr	r1, [r2, #0]
 8007eb6:	1855      	adds	r5, r2, r1
 8007eb8:	42a5      	cmp	r5, r4
 8007eba:	d10b      	bne.n	8007ed4 <_free_r+0x70>
 8007ebc:	6824      	ldr	r4, [r4, #0]
 8007ebe:	4421      	add	r1, r4
 8007ec0:	1854      	adds	r4, r2, r1
 8007ec2:	42a3      	cmp	r3, r4
 8007ec4:	6011      	str	r1, [r2, #0]
 8007ec6:	d1e0      	bne.n	8007e8a <_free_r+0x26>
 8007ec8:	681c      	ldr	r4, [r3, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	6053      	str	r3, [r2, #4]
 8007ece:	440c      	add	r4, r1
 8007ed0:	6014      	str	r4, [r2, #0]
 8007ed2:	e7da      	b.n	8007e8a <_free_r+0x26>
 8007ed4:	d902      	bls.n	8007edc <_free_r+0x78>
 8007ed6:	230c      	movs	r3, #12
 8007ed8:	6003      	str	r3, [r0, #0]
 8007eda:	e7d6      	b.n	8007e8a <_free_r+0x26>
 8007edc:	6825      	ldr	r5, [r4, #0]
 8007ede:	1961      	adds	r1, r4, r5
 8007ee0:	428b      	cmp	r3, r1
 8007ee2:	bf04      	itt	eq
 8007ee4:	6819      	ldreq	r1, [r3, #0]
 8007ee6:	685b      	ldreq	r3, [r3, #4]
 8007ee8:	6063      	str	r3, [r4, #4]
 8007eea:	bf04      	itt	eq
 8007eec:	1949      	addeq	r1, r1, r5
 8007eee:	6021      	streq	r1, [r4, #0]
 8007ef0:	6054      	str	r4, [r2, #4]
 8007ef2:	e7ca      	b.n	8007e8a <_free_r+0x26>
 8007ef4:	b003      	add	sp, #12
 8007ef6:	bd30      	pop	{r4, r5, pc}
 8007ef8:	20014694 	.word	0x20014694

08007efc <sbrk_aligned>:
 8007efc:	b570      	push	{r4, r5, r6, lr}
 8007efe:	4e0e      	ldr	r6, [pc, #56]	; (8007f38 <sbrk_aligned+0x3c>)
 8007f00:	460c      	mov	r4, r1
 8007f02:	6831      	ldr	r1, [r6, #0]
 8007f04:	4605      	mov	r5, r0
 8007f06:	b911      	cbnz	r1, 8007f0e <sbrk_aligned+0x12>
 8007f08:	f000 fe2e 	bl	8008b68 <_sbrk_r>
 8007f0c:	6030      	str	r0, [r6, #0]
 8007f0e:	4621      	mov	r1, r4
 8007f10:	4628      	mov	r0, r5
 8007f12:	f000 fe29 	bl	8008b68 <_sbrk_r>
 8007f16:	1c43      	adds	r3, r0, #1
 8007f18:	d00a      	beq.n	8007f30 <sbrk_aligned+0x34>
 8007f1a:	1cc4      	adds	r4, r0, #3
 8007f1c:	f024 0403 	bic.w	r4, r4, #3
 8007f20:	42a0      	cmp	r0, r4
 8007f22:	d007      	beq.n	8007f34 <sbrk_aligned+0x38>
 8007f24:	1a21      	subs	r1, r4, r0
 8007f26:	4628      	mov	r0, r5
 8007f28:	f000 fe1e 	bl	8008b68 <_sbrk_r>
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	d101      	bne.n	8007f34 <sbrk_aligned+0x38>
 8007f30:	f04f 34ff 	mov.w	r4, #4294967295
 8007f34:	4620      	mov	r0, r4
 8007f36:	bd70      	pop	{r4, r5, r6, pc}
 8007f38:	20014698 	.word	0x20014698

08007f3c <_malloc_r>:
 8007f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f40:	1ccd      	adds	r5, r1, #3
 8007f42:	f025 0503 	bic.w	r5, r5, #3
 8007f46:	3508      	adds	r5, #8
 8007f48:	2d0c      	cmp	r5, #12
 8007f4a:	bf38      	it	cc
 8007f4c:	250c      	movcc	r5, #12
 8007f4e:	2d00      	cmp	r5, #0
 8007f50:	4607      	mov	r7, r0
 8007f52:	db01      	blt.n	8007f58 <_malloc_r+0x1c>
 8007f54:	42a9      	cmp	r1, r5
 8007f56:	d905      	bls.n	8007f64 <_malloc_r+0x28>
 8007f58:	230c      	movs	r3, #12
 8007f5a:	603b      	str	r3, [r7, #0]
 8007f5c:	2600      	movs	r6, #0
 8007f5e:	4630      	mov	r0, r6
 8007f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008038 <_malloc_r+0xfc>
 8007f68:	f000 f868 	bl	800803c <__malloc_lock>
 8007f6c:	f8d8 3000 	ldr.w	r3, [r8]
 8007f70:	461c      	mov	r4, r3
 8007f72:	bb5c      	cbnz	r4, 8007fcc <_malloc_r+0x90>
 8007f74:	4629      	mov	r1, r5
 8007f76:	4638      	mov	r0, r7
 8007f78:	f7ff ffc0 	bl	8007efc <sbrk_aligned>
 8007f7c:	1c43      	adds	r3, r0, #1
 8007f7e:	4604      	mov	r4, r0
 8007f80:	d155      	bne.n	800802e <_malloc_r+0xf2>
 8007f82:	f8d8 4000 	ldr.w	r4, [r8]
 8007f86:	4626      	mov	r6, r4
 8007f88:	2e00      	cmp	r6, #0
 8007f8a:	d145      	bne.n	8008018 <_malloc_r+0xdc>
 8007f8c:	2c00      	cmp	r4, #0
 8007f8e:	d048      	beq.n	8008022 <_malloc_r+0xe6>
 8007f90:	6823      	ldr	r3, [r4, #0]
 8007f92:	4631      	mov	r1, r6
 8007f94:	4638      	mov	r0, r7
 8007f96:	eb04 0903 	add.w	r9, r4, r3
 8007f9a:	f000 fde5 	bl	8008b68 <_sbrk_r>
 8007f9e:	4581      	cmp	r9, r0
 8007fa0:	d13f      	bne.n	8008022 <_malloc_r+0xe6>
 8007fa2:	6821      	ldr	r1, [r4, #0]
 8007fa4:	1a6d      	subs	r5, r5, r1
 8007fa6:	4629      	mov	r1, r5
 8007fa8:	4638      	mov	r0, r7
 8007faa:	f7ff ffa7 	bl	8007efc <sbrk_aligned>
 8007fae:	3001      	adds	r0, #1
 8007fb0:	d037      	beq.n	8008022 <_malloc_r+0xe6>
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	442b      	add	r3, r5
 8007fb6:	6023      	str	r3, [r4, #0]
 8007fb8:	f8d8 3000 	ldr.w	r3, [r8]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d038      	beq.n	8008032 <_malloc_r+0xf6>
 8007fc0:	685a      	ldr	r2, [r3, #4]
 8007fc2:	42a2      	cmp	r2, r4
 8007fc4:	d12b      	bne.n	800801e <_malloc_r+0xe2>
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	605a      	str	r2, [r3, #4]
 8007fca:	e00f      	b.n	8007fec <_malloc_r+0xb0>
 8007fcc:	6822      	ldr	r2, [r4, #0]
 8007fce:	1b52      	subs	r2, r2, r5
 8007fd0:	d41f      	bmi.n	8008012 <_malloc_r+0xd6>
 8007fd2:	2a0b      	cmp	r2, #11
 8007fd4:	d917      	bls.n	8008006 <_malloc_r+0xca>
 8007fd6:	1961      	adds	r1, r4, r5
 8007fd8:	42a3      	cmp	r3, r4
 8007fda:	6025      	str	r5, [r4, #0]
 8007fdc:	bf18      	it	ne
 8007fde:	6059      	strne	r1, [r3, #4]
 8007fe0:	6863      	ldr	r3, [r4, #4]
 8007fe2:	bf08      	it	eq
 8007fe4:	f8c8 1000 	streq.w	r1, [r8]
 8007fe8:	5162      	str	r2, [r4, r5]
 8007fea:	604b      	str	r3, [r1, #4]
 8007fec:	4638      	mov	r0, r7
 8007fee:	f104 060b 	add.w	r6, r4, #11
 8007ff2:	f000 f829 	bl	8008048 <__malloc_unlock>
 8007ff6:	f026 0607 	bic.w	r6, r6, #7
 8007ffa:	1d23      	adds	r3, r4, #4
 8007ffc:	1af2      	subs	r2, r6, r3
 8007ffe:	d0ae      	beq.n	8007f5e <_malloc_r+0x22>
 8008000:	1b9b      	subs	r3, r3, r6
 8008002:	50a3      	str	r3, [r4, r2]
 8008004:	e7ab      	b.n	8007f5e <_malloc_r+0x22>
 8008006:	42a3      	cmp	r3, r4
 8008008:	6862      	ldr	r2, [r4, #4]
 800800a:	d1dd      	bne.n	8007fc8 <_malloc_r+0x8c>
 800800c:	f8c8 2000 	str.w	r2, [r8]
 8008010:	e7ec      	b.n	8007fec <_malloc_r+0xb0>
 8008012:	4623      	mov	r3, r4
 8008014:	6864      	ldr	r4, [r4, #4]
 8008016:	e7ac      	b.n	8007f72 <_malloc_r+0x36>
 8008018:	4634      	mov	r4, r6
 800801a:	6876      	ldr	r6, [r6, #4]
 800801c:	e7b4      	b.n	8007f88 <_malloc_r+0x4c>
 800801e:	4613      	mov	r3, r2
 8008020:	e7cc      	b.n	8007fbc <_malloc_r+0x80>
 8008022:	230c      	movs	r3, #12
 8008024:	603b      	str	r3, [r7, #0]
 8008026:	4638      	mov	r0, r7
 8008028:	f000 f80e 	bl	8008048 <__malloc_unlock>
 800802c:	e797      	b.n	8007f5e <_malloc_r+0x22>
 800802e:	6025      	str	r5, [r4, #0]
 8008030:	e7dc      	b.n	8007fec <_malloc_r+0xb0>
 8008032:	605b      	str	r3, [r3, #4]
 8008034:	deff      	udf	#255	; 0xff
 8008036:	bf00      	nop
 8008038:	20014694 	.word	0x20014694

0800803c <__malloc_lock>:
 800803c:	4801      	ldr	r0, [pc, #4]	; (8008044 <__malloc_lock+0x8>)
 800803e:	f7ff bf00 	b.w	8007e42 <__retarget_lock_acquire_recursive>
 8008042:	bf00      	nop
 8008044:	20014690 	.word	0x20014690

08008048 <__malloc_unlock>:
 8008048:	4801      	ldr	r0, [pc, #4]	; (8008050 <__malloc_unlock+0x8>)
 800804a:	f7ff befb 	b.w	8007e44 <__retarget_lock_release_recursive>
 800804e:	bf00      	nop
 8008050:	20014690 	.word	0x20014690

08008054 <__ssputs_r>:
 8008054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008058:	688e      	ldr	r6, [r1, #8]
 800805a:	461f      	mov	r7, r3
 800805c:	42be      	cmp	r6, r7
 800805e:	680b      	ldr	r3, [r1, #0]
 8008060:	4682      	mov	sl, r0
 8008062:	460c      	mov	r4, r1
 8008064:	4690      	mov	r8, r2
 8008066:	d82c      	bhi.n	80080c2 <__ssputs_r+0x6e>
 8008068:	898a      	ldrh	r2, [r1, #12]
 800806a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800806e:	d026      	beq.n	80080be <__ssputs_r+0x6a>
 8008070:	6965      	ldr	r5, [r4, #20]
 8008072:	6909      	ldr	r1, [r1, #16]
 8008074:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008078:	eba3 0901 	sub.w	r9, r3, r1
 800807c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008080:	1c7b      	adds	r3, r7, #1
 8008082:	444b      	add	r3, r9
 8008084:	106d      	asrs	r5, r5, #1
 8008086:	429d      	cmp	r5, r3
 8008088:	bf38      	it	cc
 800808a:	461d      	movcc	r5, r3
 800808c:	0553      	lsls	r3, r2, #21
 800808e:	d527      	bpl.n	80080e0 <__ssputs_r+0x8c>
 8008090:	4629      	mov	r1, r5
 8008092:	f7ff ff53 	bl	8007f3c <_malloc_r>
 8008096:	4606      	mov	r6, r0
 8008098:	b360      	cbz	r0, 80080f4 <__ssputs_r+0xa0>
 800809a:	6921      	ldr	r1, [r4, #16]
 800809c:	464a      	mov	r2, r9
 800809e:	f7ff fed2 	bl	8007e46 <memcpy>
 80080a2:	89a3      	ldrh	r3, [r4, #12]
 80080a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ac:	81a3      	strh	r3, [r4, #12]
 80080ae:	6126      	str	r6, [r4, #16]
 80080b0:	6165      	str	r5, [r4, #20]
 80080b2:	444e      	add	r6, r9
 80080b4:	eba5 0509 	sub.w	r5, r5, r9
 80080b8:	6026      	str	r6, [r4, #0]
 80080ba:	60a5      	str	r5, [r4, #8]
 80080bc:	463e      	mov	r6, r7
 80080be:	42be      	cmp	r6, r7
 80080c0:	d900      	bls.n	80080c4 <__ssputs_r+0x70>
 80080c2:	463e      	mov	r6, r7
 80080c4:	6820      	ldr	r0, [r4, #0]
 80080c6:	4632      	mov	r2, r6
 80080c8:	4641      	mov	r1, r8
 80080ca:	f000 fd33 	bl	8008b34 <memmove>
 80080ce:	68a3      	ldr	r3, [r4, #8]
 80080d0:	1b9b      	subs	r3, r3, r6
 80080d2:	60a3      	str	r3, [r4, #8]
 80080d4:	6823      	ldr	r3, [r4, #0]
 80080d6:	4433      	add	r3, r6
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	2000      	movs	r0, #0
 80080dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e0:	462a      	mov	r2, r5
 80080e2:	f000 fd51 	bl	8008b88 <_realloc_r>
 80080e6:	4606      	mov	r6, r0
 80080e8:	2800      	cmp	r0, #0
 80080ea:	d1e0      	bne.n	80080ae <__ssputs_r+0x5a>
 80080ec:	6921      	ldr	r1, [r4, #16]
 80080ee:	4650      	mov	r0, sl
 80080f0:	f7ff feb8 	bl	8007e64 <_free_r>
 80080f4:	230c      	movs	r3, #12
 80080f6:	f8ca 3000 	str.w	r3, [sl]
 80080fa:	89a3      	ldrh	r3, [r4, #12]
 80080fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008100:	81a3      	strh	r3, [r4, #12]
 8008102:	f04f 30ff 	mov.w	r0, #4294967295
 8008106:	e7e9      	b.n	80080dc <__ssputs_r+0x88>

08008108 <_svfiprintf_r>:
 8008108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800810c:	4698      	mov	r8, r3
 800810e:	898b      	ldrh	r3, [r1, #12]
 8008110:	061b      	lsls	r3, r3, #24
 8008112:	b09d      	sub	sp, #116	; 0x74
 8008114:	4607      	mov	r7, r0
 8008116:	460d      	mov	r5, r1
 8008118:	4614      	mov	r4, r2
 800811a:	d50e      	bpl.n	800813a <_svfiprintf_r+0x32>
 800811c:	690b      	ldr	r3, [r1, #16]
 800811e:	b963      	cbnz	r3, 800813a <_svfiprintf_r+0x32>
 8008120:	2140      	movs	r1, #64	; 0x40
 8008122:	f7ff ff0b 	bl	8007f3c <_malloc_r>
 8008126:	6028      	str	r0, [r5, #0]
 8008128:	6128      	str	r0, [r5, #16]
 800812a:	b920      	cbnz	r0, 8008136 <_svfiprintf_r+0x2e>
 800812c:	230c      	movs	r3, #12
 800812e:	603b      	str	r3, [r7, #0]
 8008130:	f04f 30ff 	mov.w	r0, #4294967295
 8008134:	e0d0      	b.n	80082d8 <_svfiprintf_r+0x1d0>
 8008136:	2340      	movs	r3, #64	; 0x40
 8008138:	616b      	str	r3, [r5, #20]
 800813a:	2300      	movs	r3, #0
 800813c:	9309      	str	r3, [sp, #36]	; 0x24
 800813e:	2320      	movs	r3, #32
 8008140:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008144:	f8cd 800c 	str.w	r8, [sp, #12]
 8008148:	2330      	movs	r3, #48	; 0x30
 800814a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80082f0 <_svfiprintf_r+0x1e8>
 800814e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008152:	f04f 0901 	mov.w	r9, #1
 8008156:	4623      	mov	r3, r4
 8008158:	469a      	mov	sl, r3
 800815a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800815e:	b10a      	cbz	r2, 8008164 <_svfiprintf_r+0x5c>
 8008160:	2a25      	cmp	r2, #37	; 0x25
 8008162:	d1f9      	bne.n	8008158 <_svfiprintf_r+0x50>
 8008164:	ebba 0b04 	subs.w	fp, sl, r4
 8008168:	d00b      	beq.n	8008182 <_svfiprintf_r+0x7a>
 800816a:	465b      	mov	r3, fp
 800816c:	4622      	mov	r2, r4
 800816e:	4629      	mov	r1, r5
 8008170:	4638      	mov	r0, r7
 8008172:	f7ff ff6f 	bl	8008054 <__ssputs_r>
 8008176:	3001      	adds	r0, #1
 8008178:	f000 80a9 	beq.w	80082ce <_svfiprintf_r+0x1c6>
 800817c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800817e:	445a      	add	r2, fp
 8008180:	9209      	str	r2, [sp, #36]	; 0x24
 8008182:	f89a 3000 	ldrb.w	r3, [sl]
 8008186:	2b00      	cmp	r3, #0
 8008188:	f000 80a1 	beq.w	80082ce <_svfiprintf_r+0x1c6>
 800818c:	2300      	movs	r3, #0
 800818e:	f04f 32ff 	mov.w	r2, #4294967295
 8008192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008196:	f10a 0a01 	add.w	sl, sl, #1
 800819a:	9304      	str	r3, [sp, #16]
 800819c:	9307      	str	r3, [sp, #28]
 800819e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081a2:	931a      	str	r3, [sp, #104]	; 0x68
 80081a4:	4654      	mov	r4, sl
 80081a6:	2205      	movs	r2, #5
 80081a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ac:	4850      	ldr	r0, [pc, #320]	; (80082f0 <_svfiprintf_r+0x1e8>)
 80081ae:	f7f8 f85f 	bl	8000270 <memchr>
 80081b2:	9a04      	ldr	r2, [sp, #16]
 80081b4:	b9d8      	cbnz	r0, 80081ee <_svfiprintf_r+0xe6>
 80081b6:	06d0      	lsls	r0, r2, #27
 80081b8:	bf44      	itt	mi
 80081ba:	2320      	movmi	r3, #32
 80081bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081c0:	0711      	lsls	r1, r2, #28
 80081c2:	bf44      	itt	mi
 80081c4:	232b      	movmi	r3, #43	; 0x2b
 80081c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081ca:	f89a 3000 	ldrb.w	r3, [sl]
 80081ce:	2b2a      	cmp	r3, #42	; 0x2a
 80081d0:	d015      	beq.n	80081fe <_svfiprintf_r+0xf6>
 80081d2:	9a07      	ldr	r2, [sp, #28]
 80081d4:	4654      	mov	r4, sl
 80081d6:	2000      	movs	r0, #0
 80081d8:	f04f 0c0a 	mov.w	ip, #10
 80081dc:	4621      	mov	r1, r4
 80081de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081e2:	3b30      	subs	r3, #48	; 0x30
 80081e4:	2b09      	cmp	r3, #9
 80081e6:	d94d      	bls.n	8008284 <_svfiprintf_r+0x17c>
 80081e8:	b1b0      	cbz	r0, 8008218 <_svfiprintf_r+0x110>
 80081ea:	9207      	str	r2, [sp, #28]
 80081ec:	e014      	b.n	8008218 <_svfiprintf_r+0x110>
 80081ee:	eba0 0308 	sub.w	r3, r0, r8
 80081f2:	fa09 f303 	lsl.w	r3, r9, r3
 80081f6:	4313      	orrs	r3, r2
 80081f8:	9304      	str	r3, [sp, #16]
 80081fa:	46a2      	mov	sl, r4
 80081fc:	e7d2      	b.n	80081a4 <_svfiprintf_r+0x9c>
 80081fe:	9b03      	ldr	r3, [sp, #12]
 8008200:	1d19      	adds	r1, r3, #4
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	9103      	str	r1, [sp, #12]
 8008206:	2b00      	cmp	r3, #0
 8008208:	bfbb      	ittet	lt
 800820a:	425b      	neglt	r3, r3
 800820c:	f042 0202 	orrlt.w	r2, r2, #2
 8008210:	9307      	strge	r3, [sp, #28]
 8008212:	9307      	strlt	r3, [sp, #28]
 8008214:	bfb8      	it	lt
 8008216:	9204      	strlt	r2, [sp, #16]
 8008218:	7823      	ldrb	r3, [r4, #0]
 800821a:	2b2e      	cmp	r3, #46	; 0x2e
 800821c:	d10c      	bne.n	8008238 <_svfiprintf_r+0x130>
 800821e:	7863      	ldrb	r3, [r4, #1]
 8008220:	2b2a      	cmp	r3, #42	; 0x2a
 8008222:	d134      	bne.n	800828e <_svfiprintf_r+0x186>
 8008224:	9b03      	ldr	r3, [sp, #12]
 8008226:	1d1a      	adds	r2, r3, #4
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	9203      	str	r2, [sp, #12]
 800822c:	2b00      	cmp	r3, #0
 800822e:	bfb8      	it	lt
 8008230:	f04f 33ff 	movlt.w	r3, #4294967295
 8008234:	3402      	adds	r4, #2
 8008236:	9305      	str	r3, [sp, #20]
 8008238:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008300 <_svfiprintf_r+0x1f8>
 800823c:	7821      	ldrb	r1, [r4, #0]
 800823e:	2203      	movs	r2, #3
 8008240:	4650      	mov	r0, sl
 8008242:	f7f8 f815 	bl	8000270 <memchr>
 8008246:	b138      	cbz	r0, 8008258 <_svfiprintf_r+0x150>
 8008248:	9b04      	ldr	r3, [sp, #16]
 800824a:	eba0 000a 	sub.w	r0, r0, sl
 800824e:	2240      	movs	r2, #64	; 0x40
 8008250:	4082      	lsls	r2, r0
 8008252:	4313      	orrs	r3, r2
 8008254:	3401      	adds	r4, #1
 8008256:	9304      	str	r3, [sp, #16]
 8008258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800825c:	4825      	ldr	r0, [pc, #148]	; (80082f4 <_svfiprintf_r+0x1ec>)
 800825e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008262:	2206      	movs	r2, #6
 8008264:	f7f8 f804 	bl	8000270 <memchr>
 8008268:	2800      	cmp	r0, #0
 800826a:	d038      	beq.n	80082de <_svfiprintf_r+0x1d6>
 800826c:	4b22      	ldr	r3, [pc, #136]	; (80082f8 <_svfiprintf_r+0x1f0>)
 800826e:	bb1b      	cbnz	r3, 80082b8 <_svfiprintf_r+0x1b0>
 8008270:	9b03      	ldr	r3, [sp, #12]
 8008272:	3307      	adds	r3, #7
 8008274:	f023 0307 	bic.w	r3, r3, #7
 8008278:	3308      	adds	r3, #8
 800827a:	9303      	str	r3, [sp, #12]
 800827c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800827e:	4433      	add	r3, r6
 8008280:	9309      	str	r3, [sp, #36]	; 0x24
 8008282:	e768      	b.n	8008156 <_svfiprintf_r+0x4e>
 8008284:	fb0c 3202 	mla	r2, ip, r2, r3
 8008288:	460c      	mov	r4, r1
 800828a:	2001      	movs	r0, #1
 800828c:	e7a6      	b.n	80081dc <_svfiprintf_r+0xd4>
 800828e:	2300      	movs	r3, #0
 8008290:	3401      	adds	r4, #1
 8008292:	9305      	str	r3, [sp, #20]
 8008294:	4619      	mov	r1, r3
 8008296:	f04f 0c0a 	mov.w	ip, #10
 800829a:	4620      	mov	r0, r4
 800829c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082a0:	3a30      	subs	r2, #48	; 0x30
 80082a2:	2a09      	cmp	r2, #9
 80082a4:	d903      	bls.n	80082ae <_svfiprintf_r+0x1a6>
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d0c6      	beq.n	8008238 <_svfiprintf_r+0x130>
 80082aa:	9105      	str	r1, [sp, #20]
 80082ac:	e7c4      	b.n	8008238 <_svfiprintf_r+0x130>
 80082ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80082b2:	4604      	mov	r4, r0
 80082b4:	2301      	movs	r3, #1
 80082b6:	e7f0      	b.n	800829a <_svfiprintf_r+0x192>
 80082b8:	ab03      	add	r3, sp, #12
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	462a      	mov	r2, r5
 80082be:	4b0f      	ldr	r3, [pc, #60]	; (80082fc <_svfiprintf_r+0x1f4>)
 80082c0:	a904      	add	r1, sp, #16
 80082c2:	4638      	mov	r0, r7
 80082c4:	f3af 8000 	nop.w
 80082c8:	1c42      	adds	r2, r0, #1
 80082ca:	4606      	mov	r6, r0
 80082cc:	d1d6      	bne.n	800827c <_svfiprintf_r+0x174>
 80082ce:	89ab      	ldrh	r3, [r5, #12]
 80082d0:	065b      	lsls	r3, r3, #25
 80082d2:	f53f af2d 	bmi.w	8008130 <_svfiprintf_r+0x28>
 80082d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082d8:	b01d      	add	sp, #116	; 0x74
 80082da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082de:	ab03      	add	r3, sp, #12
 80082e0:	9300      	str	r3, [sp, #0]
 80082e2:	462a      	mov	r2, r5
 80082e4:	4b05      	ldr	r3, [pc, #20]	; (80082fc <_svfiprintf_r+0x1f4>)
 80082e6:	a904      	add	r1, sp, #16
 80082e8:	4638      	mov	r0, r7
 80082ea:	f000 f9bd 	bl	8008668 <_printf_i>
 80082ee:	e7eb      	b.n	80082c8 <_svfiprintf_r+0x1c0>
 80082f0:	08008eac 	.word	0x08008eac
 80082f4:	08008eb6 	.word	0x08008eb6
 80082f8:	00000000 	.word	0x00000000
 80082fc:	08008055 	.word	0x08008055
 8008300:	08008eb2 	.word	0x08008eb2

08008304 <__sfputc_r>:
 8008304:	6893      	ldr	r3, [r2, #8]
 8008306:	3b01      	subs	r3, #1
 8008308:	2b00      	cmp	r3, #0
 800830a:	b410      	push	{r4}
 800830c:	6093      	str	r3, [r2, #8]
 800830e:	da08      	bge.n	8008322 <__sfputc_r+0x1e>
 8008310:	6994      	ldr	r4, [r2, #24]
 8008312:	42a3      	cmp	r3, r4
 8008314:	db01      	blt.n	800831a <__sfputc_r+0x16>
 8008316:	290a      	cmp	r1, #10
 8008318:	d103      	bne.n	8008322 <__sfputc_r+0x1e>
 800831a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800831e:	f000 bb73 	b.w	8008a08 <__swbuf_r>
 8008322:	6813      	ldr	r3, [r2, #0]
 8008324:	1c58      	adds	r0, r3, #1
 8008326:	6010      	str	r0, [r2, #0]
 8008328:	7019      	strb	r1, [r3, #0]
 800832a:	4608      	mov	r0, r1
 800832c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008330:	4770      	bx	lr

08008332 <__sfputs_r>:
 8008332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008334:	4606      	mov	r6, r0
 8008336:	460f      	mov	r7, r1
 8008338:	4614      	mov	r4, r2
 800833a:	18d5      	adds	r5, r2, r3
 800833c:	42ac      	cmp	r4, r5
 800833e:	d101      	bne.n	8008344 <__sfputs_r+0x12>
 8008340:	2000      	movs	r0, #0
 8008342:	e007      	b.n	8008354 <__sfputs_r+0x22>
 8008344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008348:	463a      	mov	r2, r7
 800834a:	4630      	mov	r0, r6
 800834c:	f7ff ffda 	bl	8008304 <__sfputc_r>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d1f3      	bne.n	800833c <__sfputs_r+0xa>
 8008354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008358 <_vfiprintf_r>:
 8008358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835c:	460d      	mov	r5, r1
 800835e:	b09d      	sub	sp, #116	; 0x74
 8008360:	4614      	mov	r4, r2
 8008362:	4698      	mov	r8, r3
 8008364:	4606      	mov	r6, r0
 8008366:	b118      	cbz	r0, 8008370 <_vfiprintf_r+0x18>
 8008368:	6a03      	ldr	r3, [r0, #32]
 800836a:	b90b      	cbnz	r3, 8008370 <_vfiprintf_r+0x18>
 800836c:	f7ff fc38 	bl	8007be0 <__sinit>
 8008370:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008372:	07d9      	lsls	r1, r3, #31
 8008374:	d405      	bmi.n	8008382 <_vfiprintf_r+0x2a>
 8008376:	89ab      	ldrh	r3, [r5, #12]
 8008378:	059a      	lsls	r2, r3, #22
 800837a:	d402      	bmi.n	8008382 <_vfiprintf_r+0x2a>
 800837c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800837e:	f7ff fd60 	bl	8007e42 <__retarget_lock_acquire_recursive>
 8008382:	89ab      	ldrh	r3, [r5, #12]
 8008384:	071b      	lsls	r3, r3, #28
 8008386:	d501      	bpl.n	800838c <_vfiprintf_r+0x34>
 8008388:	692b      	ldr	r3, [r5, #16]
 800838a:	b99b      	cbnz	r3, 80083b4 <_vfiprintf_r+0x5c>
 800838c:	4629      	mov	r1, r5
 800838e:	4630      	mov	r0, r6
 8008390:	f000 fb78 	bl	8008a84 <__swsetup_r>
 8008394:	b170      	cbz	r0, 80083b4 <_vfiprintf_r+0x5c>
 8008396:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008398:	07dc      	lsls	r4, r3, #31
 800839a:	d504      	bpl.n	80083a6 <_vfiprintf_r+0x4e>
 800839c:	f04f 30ff 	mov.w	r0, #4294967295
 80083a0:	b01d      	add	sp, #116	; 0x74
 80083a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083a6:	89ab      	ldrh	r3, [r5, #12]
 80083a8:	0598      	lsls	r0, r3, #22
 80083aa:	d4f7      	bmi.n	800839c <_vfiprintf_r+0x44>
 80083ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083ae:	f7ff fd49 	bl	8007e44 <__retarget_lock_release_recursive>
 80083b2:	e7f3      	b.n	800839c <_vfiprintf_r+0x44>
 80083b4:	2300      	movs	r3, #0
 80083b6:	9309      	str	r3, [sp, #36]	; 0x24
 80083b8:	2320      	movs	r3, #32
 80083ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083be:	f8cd 800c 	str.w	r8, [sp, #12]
 80083c2:	2330      	movs	r3, #48	; 0x30
 80083c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008578 <_vfiprintf_r+0x220>
 80083c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083cc:	f04f 0901 	mov.w	r9, #1
 80083d0:	4623      	mov	r3, r4
 80083d2:	469a      	mov	sl, r3
 80083d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083d8:	b10a      	cbz	r2, 80083de <_vfiprintf_r+0x86>
 80083da:	2a25      	cmp	r2, #37	; 0x25
 80083dc:	d1f9      	bne.n	80083d2 <_vfiprintf_r+0x7a>
 80083de:	ebba 0b04 	subs.w	fp, sl, r4
 80083e2:	d00b      	beq.n	80083fc <_vfiprintf_r+0xa4>
 80083e4:	465b      	mov	r3, fp
 80083e6:	4622      	mov	r2, r4
 80083e8:	4629      	mov	r1, r5
 80083ea:	4630      	mov	r0, r6
 80083ec:	f7ff ffa1 	bl	8008332 <__sfputs_r>
 80083f0:	3001      	adds	r0, #1
 80083f2:	f000 80a9 	beq.w	8008548 <_vfiprintf_r+0x1f0>
 80083f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083f8:	445a      	add	r2, fp
 80083fa:	9209      	str	r2, [sp, #36]	; 0x24
 80083fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 80a1 	beq.w	8008548 <_vfiprintf_r+0x1f0>
 8008406:	2300      	movs	r3, #0
 8008408:	f04f 32ff 	mov.w	r2, #4294967295
 800840c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008410:	f10a 0a01 	add.w	sl, sl, #1
 8008414:	9304      	str	r3, [sp, #16]
 8008416:	9307      	str	r3, [sp, #28]
 8008418:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800841c:	931a      	str	r3, [sp, #104]	; 0x68
 800841e:	4654      	mov	r4, sl
 8008420:	2205      	movs	r2, #5
 8008422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008426:	4854      	ldr	r0, [pc, #336]	; (8008578 <_vfiprintf_r+0x220>)
 8008428:	f7f7 ff22 	bl	8000270 <memchr>
 800842c:	9a04      	ldr	r2, [sp, #16]
 800842e:	b9d8      	cbnz	r0, 8008468 <_vfiprintf_r+0x110>
 8008430:	06d1      	lsls	r1, r2, #27
 8008432:	bf44      	itt	mi
 8008434:	2320      	movmi	r3, #32
 8008436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800843a:	0713      	lsls	r3, r2, #28
 800843c:	bf44      	itt	mi
 800843e:	232b      	movmi	r3, #43	; 0x2b
 8008440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008444:	f89a 3000 	ldrb.w	r3, [sl]
 8008448:	2b2a      	cmp	r3, #42	; 0x2a
 800844a:	d015      	beq.n	8008478 <_vfiprintf_r+0x120>
 800844c:	9a07      	ldr	r2, [sp, #28]
 800844e:	4654      	mov	r4, sl
 8008450:	2000      	movs	r0, #0
 8008452:	f04f 0c0a 	mov.w	ip, #10
 8008456:	4621      	mov	r1, r4
 8008458:	f811 3b01 	ldrb.w	r3, [r1], #1
 800845c:	3b30      	subs	r3, #48	; 0x30
 800845e:	2b09      	cmp	r3, #9
 8008460:	d94d      	bls.n	80084fe <_vfiprintf_r+0x1a6>
 8008462:	b1b0      	cbz	r0, 8008492 <_vfiprintf_r+0x13a>
 8008464:	9207      	str	r2, [sp, #28]
 8008466:	e014      	b.n	8008492 <_vfiprintf_r+0x13a>
 8008468:	eba0 0308 	sub.w	r3, r0, r8
 800846c:	fa09 f303 	lsl.w	r3, r9, r3
 8008470:	4313      	orrs	r3, r2
 8008472:	9304      	str	r3, [sp, #16]
 8008474:	46a2      	mov	sl, r4
 8008476:	e7d2      	b.n	800841e <_vfiprintf_r+0xc6>
 8008478:	9b03      	ldr	r3, [sp, #12]
 800847a:	1d19      	adds	r1, r3, #4
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	9103      	str	r1, [sp, #12]
 8008480:	2b00      	cmp	r3, #0
 8008482:	bfbb      	ittet	lt
 8008484:	425b      	neglt	r3, r3
 8008486:	f042 0202 	orrlt.w	r2, r2, #2
 800848a:	9307      	strge	r3, [sp, #28]
 800848c:	9307      	strlt	r3, [sp, #28]
 800848e:	bfb8      	it	lt
 8008490:	9204      	strlt	r2, [sp, #16]
 8008492:	7823      	ldrb	r3, [r4, #0]
 8008494:	2b2e      	cmp	r3, #46	; 0x2e
 8008496:	d10c      	bne.n	80084b2 <_vfiprintf_r+0x15a>
 8008498:	7863      	ldrb	r3, [r4, #1]
 800849a:	2b2a      	cmp	r3, #42	; 0x2a
 800849c:	d134      	bne.n	8008508 <_vfiprintf_r+0x1b0>
 800849e:	9b03      	ldr	r3, [sp, #12]
 80084a0:	1d1a      	adds	r2, r3, #4
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	9203      	str	r2, [sp, #12]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	bfb8      	it	lt
 80084aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80084ae:	3402      	adds	r4, #2
 80084b0:	9305      	str	r3, [sp, #20]
 80084b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008588 <_vfiprintf_r+0x230>
 80084b6:	7821      	ldrb	r1, [r4, #0]
 80084b8:	2203      	movs	r2, #3
 80084ba:	4650      	mov	r0, sl
 80084bc:	f7f7 fed8 	bl	8000270 <memchr>
 80084c0:	b138      	cbz	r0, 80084d2 <_vfiprintf_r+0x17a>
 80084c2:	9b04      	ldr	r3, [sp, #16]
 80084c4:	eba0 000a 	sub.w	r0, r0, sl
 80084c8:	2240      	movs	r2, #64	; 0x40
 80084ca:	4082      	lsls	r2, r0
 80084cc:	4313      	orrs	r3, r2
 80084ce:	3401      	adds	r4, #1
 80084d0:	9304      	str	r3, [sp, #16]
 80084d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084d6:	4829      	ldr	r0, [pc, #164]	; (800857c <_vfiprintf_r+0x224>)
 80084d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084dc:	2206      	movs	r2, #6
 80084de:	f7f7 fec7 	bl	8000270 <memchr>
 80084e2:	2800      	cmp	r0, #0
 80084e4:	d03f      	beq.n	8008566 <_vfiprintf_r+0x20e>
 80084e6:	4b26      	ldr	r3, [pc, #152]	; (8008580 <_vfiprintf_r+0x228>)
 80084e8:	bb1b      	cbnz	r3, 8008532 <_vfiprintf_r+0x1da>
 80084ea:	9b03      	ldr	r3, [sp, #12]
 80084ec:	3307      	adds	r3, #7
 80084ee:	f023 0307 	bic.w	r3, r3, #7
 80084f2:	3308      	adds	r3, #8
 80084f4:	9303      	str	r3, [sp, #12]
 80084f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084f8:	443b      	add	r3, r7
 80084fa:	9309      	str	r3, [sp, #36]	; 0x24
 80084fc:	e768      	b.n	80083d0 <_vfiprintf_r+0x78>
 80084fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008502:	460c      	mov	r4, r1
 8008504:	2001      	movs	r0, #1
 8008506:	e7a6      	b.n	8008456 <_vfiprintf_r+0xfe>
 8008508:	2300      	movs	r3, #0
 800850a:	3401      	adds	r4, #1
 800850c:	9305      	str	r3, [sp, #20]
 800850e:	4619      	mov	r1, r3
 8008510:	f04f 0c0a 	mov.w	ip, #10
 8008514:	4620      	mov	r0, r4
 8008516:	f810 2b01 	ldrb.w	r2, [r0], #1
 800851a:	3a30      	subs	r2, #48	; 0x30
 800851c:	2a09      	cmp	r2, #9
 800851e:	d903      	bls.n	8008528 <_vfiprintf_r+0x1d0>
 8008520:	2b00      	cmp	r3, #0
 8008522:	d0c6      	beq.n	80084b2 <_vfiprintf_r+0x15a>
 8008524:	9105      	str	r1, [sp, #20]
 8008526:	e7c4      	b.n	80084b2 <_vfiprintf_r+0x15a>
 8008528:	fb0c 2101 	mla	r1, ip, r1, r2
 800852c:	4604      	mov	r4, r0
 800852e:	2301      	movs	r3, #1
 8008530:	e7f0      	b.n	8008514 <_vfiprintf_r+0x1bc>
 8008532:	ab03      	add	r3, sp, #12
 8008534:	9300      	str	r3, [sp, #0]
 8008536:	462a      	mov	r2, r5
 8008538:	4b12      	ldr	r3, [pc, #72]	; (8008584 <_vfiprintf_r+0x22c>)
 800853a:	a904      	add	r1, sp, #16
 800853c:	4630      	mov	r0, r6
 800853e:	f3af 8000 	nop.w
 8008542:	4607      	mov	r7, r0
 8008544:	1c78      	adds	r0, r7, #1
 8008546:	d1d6      	bne.n	80084f6 <_vfiprintf_r+0x19e>
 8008548:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800854a:	07d9      	lsls	r1, r3, #31
 800854c:	d405      	bmi.n	800855a <_vfiprintf_r+0x202>
 800854e:	89ab      	ldrh	r3, [r5, #12]
 8008550:	059a      	lsls	r2, r3, #22
 8008552:	d402      	bmi.n	800855a <_vfiprintf_r+0x202>
 8008554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008556:	f7ff fc75 	bl	8007e44 <__retarget_lock_release_recursive>
 800855a:	89ab      	ldrh	r3, [r5, #12]
 800855c:	065b      	lsls	r3, r3, #25
 800855e:	f53f af1d 	bmi.w	800839c <_vfiprintf_r+0x44>
 8008562:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008564:	e71c      	b.n	80083a0 <_vfiprintf_r+0x48>
 8008566:	ab03      	add	r3, sp, #12
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	462a      	mov	r2, r5
 800856c:	4b05      	ldr	r3, [pc, #20]	; (8008584 <_vfiprintf_r+0x22c>)
 800856e:	a904      	add	r1, sp, #16
 8008570:	4630      	mov	r0, r6
 8008572:	f000 f879 	bl	8008668 <_printf_i>
 8008576:	e7e4      	b.n	8008542 <_vfiprintf_r+0x1ea>
 8008578:	08008eac 	.word	0x08008eac
 800857c:	08008eb6 	.word	0x08008eb6
 8008580:	00000000 	.word	0x00000000
 8008584:	08008333 	.word	0x08008333
 8008588:	08008eb2 	.word	0x08008eb2

0800858c <_printf_common>:
 800858c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008590:	4616      	mov	r6, r2
 8008592:	4699      	mov	r9, r3
 8008594:	688a      	ldr	r2, [r1, #8]
 8008596:	690b      	ldr	r3, [r1, #16]
 8008598:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800859c:	4293      	cmp	r3, r2
 800859e:	bfb8      	it	lt
 80085a0:	4613      	movlt	r3, r2
 80085a2:	6033      	str	r3, [r6, #0]
 80085a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085a8:	4607      	mov	r7, r0
 80085aa:	460c      	mov	r4, r1
 80085ac:	b10a      	cbz	r2, 80085b2 <_printf_common+0x26>
 80085ae:	3301      	adds	r3, #1
 80085b0:	6033      	str	r3, [r6, #0]
 80085b2:	6823      	ldr	r3, [r4, #0]
 80085b4:	0699      	lsls	r1, r3, #26
 80085b6:	bf42      	ittt	mi
 80085b8:	6833      	ldrmi	r3, [r6, #0]
 80085ba:	3302      	addmi	r3, #2
 80085bc:	6033      	strmi	r3, [r6, #0]
 80085be:	6825      	ldr	r5, [r4, #0]
 80085c0:	f015 0506 	ands.w	r5, r5, #6
 80085c4:	d106      	bne.n	80085d4 <_printf_common+0x48>
 80085c6:	f104 0a19 	add.w	sl, r4, #25
 80085ca:	68e3      	ldr	r3, [r4, #12]
 80085cc:	6832      	ldr	r2, [r6, #0]
 80085ce:	1a9b      	subs	r3, r3, r2
 80085d0:	42ab      	cmp	r3, r5
 80085d2:	dc26      	bgt.n	8008622 <_printf_common+0x96>
 80085d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085d8:	1e13      	subs	r3, r2, #0
 80085da:	6822      	ldr	r2, [r4, #0]
 80085dc:	bf18      	it	ne
 80085de:	2301      	movne	r3, #1
 80085e0:	0692      	lsls	r2, r2, #26
 80085e2:	d42b      	bmi.n	800863c <_printf_common+0xb0>
 80085e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085e8:	4649      	mov	r1, r9
 80085ea:	4638      	mov	r0, r7
 80085ec:	47c0      	blx	r8
 80085ee:	3001      	adds	r0, #1
 80085f0:	d01e      	beq.n	8008630 <_printf_common+0xa4>
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	6922      	ldr	r2, [r4, #16]
 80085f6:	f003 0306 	and.w	r3, r3, #6
 80085fa:	2b04      	cmp	r3, #4
 80085fc:	bf02      	ittt	eq
 80085fe:	68e5      	ldreq	r5, [r4, #12]
 8008600:	6833      	ldreq	r3, [r6, #0]
 8008602:	1aed      	subeq	r5, r5, r3
 8008604:	68a3      	ldr	r3, [r4, #8]
 8008606:	bf0c      	ite	eq
 8008608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800860c:	2500      	movne	r5, #0
 800860e:	4293      	cmp	r3, r2
 8008610:	bfc4      	itt	gt
 8008612:	1a9b      	subgt	r3, r3, r2
 8008614:	18ed      	addgt	r5, r5, r3
 8008616:	2600      	movs	r6, #0
 8008618:	341a      	adds	r4, #26
 800861a:	42b5      	cmp	r5, r6
 800861c:	d11a      	bne.n	8008654 <_printf_common+0xc8>
 800861e:	2000      	movs	r0, #0
 8008620:	e008      	b.n	8008634 <_printf_common+0xa8>
 8008622:	2301      	movs	r3, #1
 8008624:	4652      	mov	r2, sl
 8008626:	4649      	mov	r1, r9
 8008628:	4638      	mov	r0, r7
 800862a:	47c0      	blx	r8
 800862c:	3001      	adds	r0, #1
 800862e:	d103      	bne.n	8008638 <_printf_common+0xac>
 8008630:	f04f 30ff 	mov.w	r0, #4294967295
 8008634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008638:	3501      	adds	r5, #1
 800863a:	e7c6      	b.n	80085ca <_printf_common+0x3e>
 800863c:	18e1      	adds	r1, r4, r3
 800863e:	1c5a      	adds	r2, r3, #1
 8008640:	2030      	movs	r0, #48	; 0x30
 8008642:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008646:	4422      	add	r2, r4
 8008648:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800864c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008650:	3302      	adds	r3, #2
 8008652:	e7c7      	b.n	80085e4 <_printf_common+0x58>
 8008654:	2301      	movs	r3, #1
 8008656:	4622      	mov	r2, r4
 8008658:	4649      	mov	r1, r9
 800865a:	4638      	mov	r0, r7
 800865c:	47c0      	blx	r8
 800865e:	3001      	adds	r0, #1
 8008660:	d0e6      	beq.n	8008630 <_printf_common+0xa4>
 8008662:	3601      	adds	r6, #1
 8008664:	e7d9      	b.n	800861a <_printf_common+0x8e>
	...

08008668 <_printf_i>:
 8008668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800866c:	7e0f      	ldrb	r7, [r1, #24]
 800866e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008670:	2f78      	cmp	r7, #120	; 0x78
 8008672:	4691      	mov	r9, r2
 8008674:	4680      	mov	r8, r0
 8008676:	460c      	mov	r4, r1
 8008678:	469a      	mov	sl, r3
 800867a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800867e:	d807      	bhi.n	8008690 <_printf_i+0x28>
 8008680:	2f62      	cmp	r7, #98	; 0x62
 8008682:	d80a      	bhi.n	800869a <_printf_i+0x32>
 8008684:	2f00      	cmp	r7, #0
 8008686:	f000 80d4 	beq.w	8008832 <_printf_i+0x1ca>
 800868a:	2f58      	cmp	r7, #88	; 0x58
 800868c:	f000 80c0 	beq.w	8008810 <_printf_i+0x1a8>
 8008690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008694:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008698:	e03a      	b.n	8008710 <_printf_i+0xa8>
 800869a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800869e:	2b15      	cmp	r3, #21
 80086a0:	d8f6      	bhi.n	8008690 <_printf_i+0x28>
 80086a2:	a101      	add	r1, pc, #4	; (adr r1, 80086a8 <_printf_i+0x40>)
 80086a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086a8:	08008701 	.word	0x08008701
 80086ac:	08008715 	.word	0x08008715
 80086b0:	08008691 	.word	0x08008691
 80086b4:	08008691 	.word	0x08008691
 80086b8:	08008691 	.word	0x08008691
 80086bc:	08008691 	.word	0x08008691
 80086c0:	08008715 	.word	0x08008715
 80086c4:	08008691 	.word	0x08008691
 80086c8:	08008691 	.word	0x08008691
 80086cc:	08008691 	.word	0x08008691
 80086d0:	08008691 	.word	0x08008691
 80086d4:	08008819 	.word	0x08008819
 80086d8:	08008741 	.word	0x08008741
 80086dc:	080087d3 	.word	0x080087d3
 80086e0:	08008691 	.word	0x08008691
 80086e4:	08008691 	.word	0x08008691
 80086e8:	0800883b 	.word	0x0800883b
 80086ec:	08008691 	.word	0x08008691
 80086f0:	08008741 	.word	0x08008741
 80086f4:	08008691 	.word	0x08008691
 80086f8:	08008691 	.word	0x08008691
 80086fc:	080087db 	.word	0x080087db
 8008700:	682b      	ldr	r3, [r5, #0]
 8008702:	1d1a      	adds	r2, r3, #4
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	602a      	str	r2, [r5, #0]
 8008708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800870c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008710:	2301      	movs	r3, #1
 8008712:	e09f      	b.n	8008854 <_printf_i+0x1ec>
 8008714:	6820      	ldr	r0, [r4, #0]
 8008716:	682b      	ldr	r3, [r5, #0]
 8008718:	0607      	lsls	r7, r0, #24
 800871a:	f103 0104 	add.w	r1, r3, #4
 800871e:	6029      	str	r1, [r5, #0]
 8008720:	d501      	bpl.n	8008726 <_printf_i+0xbe>
 8008722:	681e      	ldr	r6, [r3, #0]
 8008724:	e003      	b.n	800872e <_printf_i+0xc6>
 8008726:	0646      	lsls	r6, r0, #25
 8008728:	d5fb      	bpl.n	8008722 <_printf_i+0xba>
 800872a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800872e:	2e00      	cmp	r6, #0
 8008730:	da03      	bge.n	800873a <_printf_i+0xd2>
 8008732:	232d      	movs	r3, #45	; 0x2d
 8008734:	4276      	negs	r6, r6
 8008736:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800873a:	485a      	ldr	r0, [pc, #360]	; (80088a4 <_printf_i+0x23c>)
 800873c:	230a      	movs	r3, #10
 800873e:	e012      	b.n	8008766 <_printf_i+0xfe>
 8008740:	682b      	ldr	r3, [r5, #0]
 8008742:	6820      	ldr	r0, [r4, #0]
 8008744:	1d19      	adds	r1, r3, #4
 8008746:	6029      	str	r1, [r5, #0]
 8008748:	0605      	lsls	r5, r0, #24
 800874a:	d501      	bpl.n	8008750 <_printf_i+0xe8>
 800874c:	681e      	ldr	r6, [r3, #0]
 800874e:	e002      	b.n	8008756 <_printf_i+0xee>
 8008750:	0641      	lsls	r1, r0, #25
 8008752:	d5fb      	bpl.n	800874c <_printf_i+0xe4>
 8008754:	881e      	ldrh	r6, [r3, #0]
 8008756:	4853      	ldr	r0, [pc, #332]	; (80088a4 <_printf_i+0x23c>)
 8008758:	2f6f      	cmp	r7, #111	; 0x6f
 800875a:	bf0c      	ite	eq
 800875c:	2308      	moveq	r3, #8
 800875e:	230a      	movne	r3, #10
 8008760:	2100      	movs	r1, #0
 8008762:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008766:	6865      	ldr	r5, [r4, #4]
 8008768:	60a5      	str	r5, [r4, #8]
 800876a:	2d00      	cmp	r5, #0
 800876c:	bfa2      	ittt	ge
 800876e:	6821      	ldrge	r1, [r4, #0]
 8008770:	f021 0104 	bicge.w	r1, r1, #4
 8008774:	6021      	strge	r1, [r4, #0]
 8008776:	b90e      	cbnz	r6, 800877c <_printf_i+0x114>
 8008778:	2d00      	cmp	r5, #0
 800877a:	d04b      	beq.n	8008814 <_printf_i+0x1ac>
 800877c:	4615      	mov	r5, r2
 800877e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008782:	fb03 6711 	mls	r7, r3, r1, r6
 8008786:	5dc7      	ldrb	r7, [r0, r7]
 8008788:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800878c:	4637      	mov	r7, r6
 800878e:	42bb      	cmp	r3, r7
 8008790:	460e      	mov	r6, r1
 8008792:	d9f4      	bls.n	800877e <_printf_i+0x116>
 8008794:	2b08      	cmp	r3, #8
 8008796:	d10b      	bne.n	80087b0 <_printf_i+0x148>
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	07de      	lsls	r6, r3, #31
 800879c:	d508      	bpl.n	80087b0 <_printf_i+0x148>
 800879e:	6923      	ldr	r3, [r4, #16]
 80087a0:	6861      	ldr	r1, [r4, #4]
 80087a2:	4299      	cmp	r1, r3
 80087a4:	bfde      	ittt	le
 80087a6:	2330      	movle	r3, #48	; 0x30
 80087a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087b0:	1b52      	subs	r2, r2, r5
 80087b2:	6122      	str	r2, [r4, #16]
 80087b4:	f8cd a000 	str.w	sl, [sp]
 80087b8:	464b      	mov	r3, r9
 80087ba:	aa03      	add	r2, sp, #12
 80087bc:	4621      	mov	r1, r4
 80087be:	4640      	mov	r0, r8
 80087c0:	f7ff fee4 	bl	800858c <_printf_common>
 80087c4:	3001      	adds	r0, #1
 80087c6:	d14a      	bne.n	800885e <_printf_i+0x1f6>
 80087c8:	f04f 30ff 	mov.w	r0, #4294967295
 80087cc:	b004      	add	sp, #16
 80087ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	f043 0320 	orr.w	r3, r3, #32
 80087d8:	6023      	str	r3, [r4, #0]
 80087da:	4833      	ldr	r0, [pc, #204]	; (80088a8 <_printf_i+0x240>)
 80087dc:	2778      	movs	r7, #120	; 0x78
 80087de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	6829      	ldr	r1, [r5, #0]
 80087e6:	061f      	lsls	r7, r3, #24
 80087e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80087ec:	d402      	bmi.n	80087f4 <_printf_i+0x18c>
 80087ee:	065f      	lsls	r7, r3, #25
 80087f0:	bf48      	it	mi
 80087f2:	b2b6      	uxthmi	r6, r6
 80087f4:	07df      	lsls	r7, r3, #31
 80087f6:	bf48      	it	mi
 80087f8:	f043 0320 	orrmi.w	r3, r3, #32
 80087fc:	6029      	str	r1, [r5, #0]
 80087fe:	bf48      	it	mi
 8008800:	6023      	strmi	r3, [r4, #0]
 8008802:	b91e      	cbnz	r6, 800880c <_printf_i+0x1a4>
 8008804:	6823      	ldr	r3, [r4, #0]
 8008806:	f023 0320 	bic.w	r3, r3, #32
 800880a:	6023      	str	r3, [r4, #0]
 800880c:	2310      	movs	r3, #16
 800880e:	e7a7      	b.n	8008760 <_printf_i+0xf8>
 8008810:	4824      	ldr	r0, [pc, #144]	; (80088a4 <_printf_i+0x23c>)
 8008812:	e7e4      	b.n	80087de <_printf_i+0x176>
 8008814:	4615      	mov	r5, r2
 8008816:	e7bd      	b.n	8008794 <_printf_i+0x12c>
 8008818:	682b      	ldr	r3, [r5, #0]
 800881a:	6826      	ldr	r6, [r4, #0]
 800881c:	6961      	ldr	r1, [r4, #20]
 800881e:	1d18      	adds	r0, r3, #4
 8008820:	6028      	str	r0, [r5, #0]
 8008822:	0635      	lsls	r5, r6, #24
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	d501      	bpl.n	800882c <_printf_i+0x1c4>
 8008828:	6019      	str	r1, [r3, #0]
 800882a:	e002      	b.n	8008832 <_printf_i+0x1ca>
 800882c:	0670      	lsls	r0, r6, #25
 800882e:	d5fb      	bpl.n	8008828 <_printf_i+0x1c0>
 8008830:	8019      	strh	r1, [r3, #0]
 8008832:	2300      	movs	r3, #0
 8008834:	6123      	str	r3, [r4, #16]
 8008836:	4615      	mov	r5, r2
 8008838:	e7bc      	b.n	80087b4 <_printf_i+0x14c>
 800883a:	682b      	ldr	r3, [r5, #0]
 800883c:	1d1a      	adds	r2, r3, #4
 800883e:	602a      	str	r2, [r5, #0]
 8008840:	681d      	ldr	r5, [r3, #0]
 8008842:	6862      	ldr	r2, [r4, #4]
 8008844:	2100      	movs	r1, #0
 8008846:	4628      	mov	r0, r5
 8008848:	f7f7 fd12 	bl	8000270 <memchr>
 800884c:	b108      	cbz	r0, 8008852 <_printf_i+0x1ea>
 800884e:	1b40      	subs	r0, r0, r5
 8008850:	6060      	str	r0, [r4, #4]
 8008852:	6863      	ldr	r3, [r4, #4]
 8008854:	6123      	str	r3, [r4, #16]
 8008856:	2300      	movs	r3, #0
 8008858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800885c:	e7aa      	b.n	80087b4 <_printf_i+0x14c>
 800885e:	6923      	ldr	r3, [r4, #16]
 8008860:	462a      	mov	r2, r5
 8008862:	4649      	mov	r1, r9
 8008864:	4640      	mov	r0, r8
 8008866:	47d0      	blx	sl
 8008868:	3001      	adds	r0, #1
 800886a:	d0ad      	beq.n	80087c8 <_printf_i+0x160>
 800886c:	6823      	ldr	r3, [r4, #0]
 800886e:	079b      	lsls	r3, r3, #30
 8008870:	d413      	bmi.n	800889a <_printf_i+0x232>
 8008872:	68e0      	ldr	r0, [r4, #12]
 8008874:	9b03      	ldr	r3, [sp, #12]
 8008876:	4298      	cmp	r0, r3
 8008878:	bfb8      	it	lt
 800887a:	4618      	movlt	r0, r3
 800887c:	e7a6      	b.n	80087cc <_printf_i+0x164>
 800887e:	2301      	movs	r3, #1
 8008880:	4632      	mov	r2, r6
 8008882:	4649      	mov	r1, r9
 8008884:	4640      	mov	r0, r8
 8008886:	47d0      	blx	sl
 8008888:	3001      	adds	r0, #1
 800888a:	d09d      	beq.n	80087c8 <_printf_i+0x160>
 800888c:	3501      	adds	r5, #1
 800888e:	68e3      	ldr	r3, [r4, #12]
 8008890:	9903      	ldr	r1, [sp, #12]
 8008892:	1a5b      	subs	r3, r3, r1
 8008894:	42ab      	cmp	r3, r5
 8008896:	dcf2      	bgt.n	800887e <_printf_i+0x216>
 8008898:	e7eb      	b.n	8008872 <_printf_i+0x20a>
 800889a:	2500      	movs	r5, #0
 800889c:	f104 0619 	add.w	r6, r4, #25
 80088a0:	e7f5      	b.n	800888e <_printf_i+0x226>
 80088a2:	bf00      	nop
 80088a4:	08008ebd 	.word	0x08008ebd
 80088a8:	08008ece 	.word	0x08008ece

080088ac <__sflush_r>:
 80088ac:	898a      	ldrh	r2, [r1, #12]
 80088ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b2:	4605      	mov	r5, r0
 80088b4:	0710      	lsls	r0, r2, #28
 80088b6:	460c      	mov	r4, r1
 80088b8:	d458      	bmi.n	800896c <__sflush_r+0xc0>
 80088ba:	684b      	ldr	r3, [r1, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	dc05      	bgt.n	80088cc <__sflush_r+0x20>
 80088c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	dc02      	bgt.n	80088cc <__sflush_r+0x20>
 80088c6:	2000      	movs	r0, #0
 80088c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088ce:	2e00      	cmp	r6, #0
 80088d0:	d0f9      	beq.n	80088c6 <__sflush_r+0x1a>
 80088d2:	2300      	movs	r3, #0
 80088d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088d8:	682f      	ldr	r7, [r5, #0]
 80088da:	6a21      	ldr	r1, [r4, #32]
 80088dc:	602b      	str	r3, [r5, #0]
 80088de:	d032      	beq.n	8008946 <__sflush_r+0x9a>
 80088e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088e2:	89a3      	ldrh	r3, [r4, #12]
 80088e4:	075a      	lsls	r2, r3, #29
 80088e6:	d505      	bpl.n	80088f4 <__sflush_r+0x48>
 80088e8:	6863      	ldr	r3, [r4, #4]
 80088ea:	1ac0      	subs	r0, r0, r3
 80088ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088ee:	b10b      	cbz	r3, 80088f4 <__sflush_r+0x48>
 80088f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088f2:	1ac0      	subs	r0, r0, r3
 80088f4:	2300      	movs	r3, #0
 80088f6:	4602      	mov	r2, r0
 80088f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088fa:	6a21      	ldr	r1, [r4, #32]
 80088fc:	4628      	mov	r0, r5
 80088fe:	47b0      	blx	r6
 8008900:	1c43      	adds	r3, r0, #1
 8008902:	89a3      	ldrh	r3, [r4, #12]
 8008904:	d106      	bne.n	8008914 <__sflush_r+0x68>
 8008906:	6829      	ldr	r1, [r5, #0]
 8008908:	291d      	cmp	r1, #29
 800890a:	d82b      	bhi.n	8008964 <__sflush_r+0xb8>
 800890c:	4a29      	ldr	r2, [pc, #164]	; (80089b4 <__sflush_r+0x108>)
 800890e:	410a      	asrs	r2, r1
 8008910:	07d6      	lsls	r6, r2, #31
 8008912:	d427      	bmi.n	8008964 <__sflush_r+0xb8>
 8008914:	2200      	movs	r2, #0
 8008916:	6062      	str	r2, [r4, #4]
 8008918:	04d9      	lsls	r1, r3, #19
 800891a:	6922      	ldr	r2, [r4, #16]
 800891c:	6022      	str	r2, [r4, #0]
 800891e:	d504      	bpl.n	800892a <__sflush_r+0x7e>
 8008920:	1c42      	adds	r2, r0, #1
 8008922:	d101      	bne.n	8008928 <__sflush_r+0x7c>
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	b903      	cbnz	r3, 800892a <__sflush_r+0x7e>
 8008928:	6560      	str	r0, [r4, #84]	; 0x54
 800892a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800892c:	602f      	str	r7, [r5, #0]
 800892e:	2900      	cmp	r1, #0
 8008930:	d0c9      	beq.n	80088c6 <__sflush_r+0x1a>
 8008932:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008936:	4299      	cmp	r1, r3
 8008938:	d002      	beq.n	8008940 <__sflush_r+0x94>
 800893a:	4628      	mov	r0, r5
 800893c:	f7ff fa92 	bl	8007e64 <_free_r>
 8008940:	2000      	movs	r0, #0
 8008942:	6360      	str	r0, [r4, #52]	; 0x34
 8008944:	e7c0      	b.n	80088c8 <__sflush_r+0x1c>
 8008946:	2301      	movs	r3, #1
 8008948:	4628      	mov	r0, r5
 800894a:	47b0      	blx	r6
 800894c:	1c41      	adds	r1, r0, #1
 800894e:	d1c8      	bne.n	80088e2 <__sflush_r+0x36>
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d0c5      	beq.n	80088e2 <__sflush_r+0x36>
 8008956:	2b1d      	cmp	r3, #29
 8008958:	d001      	beq.n	800895e <__sflush_r+0xb2>
 800895a:	2b16      	cmp	r3, #22
 800895c:	d101      	bne.n	8008962 <__sflush_r+0xb6>
 800895e:	602f      	str	r7, [r5, #0]
 8008960:	e7b1      	b.n	80088c6 <__sflush_r+0x1a>
 8008962:	89a3      	ldrh	r3, [r4, #12]
 8008964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008968:	81a3      	strh	r3, [r4, #12]
 800896a:	e7ad      	b.n	80088c8 <__sflush_r+0x1c>
 800896c:	690f      	ldr	r7, [r1, #16]
 800896e:	2f00      	cmp	r7, #0
 8008970:	d0a9      	beq.n	80088c6 <__sflush_r+0x1a>
 8008972:	0793      	lsls	r3, r2, #30
 8008974:	680e      	ldr	r6, [r1, #0]
 8008976:	bf08      	it	eq
 8008978:	694b      	ldreq	r3, [r1, #20]
 800897a:	600f      	str	r7, [r1, #0]
 800897c:	bf18      	it	ne
 800897e:	2300      	movne	r3, #0
 8008980:	eba6 0807 	sub.w	r8, r6, r7
 8008984:	608b      	str	r3, [r1, #8]
 8008986:	f1b8 0f00 	cmp.w	r8, #0
 800898a:	dd9c      	ble.n	80088c6 <__sflush_r+0x1a>
 800898c:	6a21      	ldr	r1, [r4, #32]
 800898e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008990:	4643      	mov	r3, r8
 8008992:	463a      	mov	r2, r7
 8008994:	4628      	mov	r0, r5
 8008996:	47b0      	blx	r6
 8008998:	2800      	cmp	r0, #0
 800899a:	dc06      	bgt.n	80089aa <__sflush_r+0xfe>
 800899c:	89a3      	ldrh	r3, [r4, #12]
 800899e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089a2:	81a3      	strh	r3, [r4, #12]
 80089a4:	f04f 30ff 	mov.w	r0, #4294967295
 80089a8:	e78e      	b.n	80088c8 <__sflush_r+0x1c>
 80089aa:	4407      	add	r7, r0
 80089ac:	eba8 0800 	sub.w	r8, r8, r0
 80089b0:	e7e9      	b.n	8008986 <__sflush_r+0xda>
 80089b2:	bf00      	nop
 80089b4:	dfbffffe 	.word	0xdfbffffe

080089b8 <_fflush_r>:
 80089b8:	b538      	push	{r3, r4, r5, lr}
 80089ba:	690b      	ldr	r3, [r1, #16]
 80089bc:	4605      	mov	r5, r0
 80089be:	460c      	mov	r4, r1
 80089c0:	b913      	cbnz	r3, 80089c8 <_fflush_r+0x10>
 80089c2:	2500      	movs	r5, #0
 80089c4:	4628      	mov	r0, r5
 80089c6:	bd38      	pop	{r3, r4, r5, pc}
 80089c8:	b118      	cbz	r0, 80089d2 <_fflush_r+0x1a>
 80089ca:	6a03      	ldr	r3, [r0, #32]
 80089cc:	b90b      	cbnz	r3, 80089d2 <_fflush_r+0x1a>
 80089ce:	f7ff f907 	bl	8007be0 <__sinit>
 80089d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d0f3      	beq.n	80089c2 <_fflush_r+0xa>
 80089da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089dc:	07d0      	lsls	r0, r2, #31
 80089de:	d404      	bmi.n	80089ea <_fflush_r+0x32>
 80089e0:	0599      	lsls	r1, r3, #22
 80089e2:	d402      	bmi.n	80089ea <_fflush_r+0x32>
 80089e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089e6:	f7ff fa2c 	bl	8007e42 <__retarget_lock_acquire_recursive>
 80089ea:	4628      	mov	r0, r5
 80089ec:	4621      	mov	r1, r4
 80089ee:	f7ff ff5d 	bl	80088ac <__sflush_r>
 80089f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089f4:	07da      	lsls	r2, r3, #31
 80089f6:	4605      	mov	r5, r0
 80089f8:	d4e4      	bmi.n	80089c4 <_fflush_r+0xc>
 80089fa:	89a3      	ldrh	r3, [r4, #12]
 80089fc:	059b      	lsls	r3, r3, #22
 80089fe:	d4e1      	bmi.n	80089c4 <_fflush_r+0xc>
 8008a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a02:	f7ff fa1f 	bl	8007e44 <__retarget_lock_release_recursive>
 8008a06:	e7dd      	b.n	80089c4 <_fflush_r+0xc>

08008a08 <__swbuf_r>:
 8008a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0a:	460e      	mov	r6, r1
 8008a0c:	4614      	mov	r4, r2
 8008a0e:	4605      	mov	r5, r0
 8008a10:	b118      	cbz	r0, 8008a1a <__swbuf_r+0x12>
 8008a12:	6a03      	ldr	r3, [r0, #32]
 8008a14:	b90b      	cbnz	r3, 8008a1a <__swbuf_r+0x12>
 8008a16:	f7ff f8e3 	bl	8007be0 <__sinit>
 8008a1a:	69a3      	ldr	r3, [r4, #24]
 8008a1c:	60a3      	str	r3, [r4, #8]
 8008a1e:	89a3      	ldrh	r3, [r4, #12]
 8008a20:	071a      	lsls	r2, r3, #28
 8008a22:	d525      	bpl.n	8008a70 <__swbuf_r+0x68>
 8008a24:	6923      	ldr	r3, [r4, #16]
 8008a26:	b31b      	cbz	r3, 8008a70 <__swbuf_r+0x68>
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	6922      	ldr	r2, [r4, #16]
 8008a2c:	1a98      	subs	r0, r3, r2
 8008a2e:	6963      	ldr	r3, [r4, #20]
 8008a30:	b2f6      	uxtb	r6, r6
 8008a32:	4283      	cmp	r3, r0
 8008a34:	4637      	mov	r7, r6
 8008a36:	dc04      	bgt.n	8008a42 <__swbuf_r+0x3a>
 8008a38:	4621      	mov	r1, r4
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	f7ff ffbc 	bl	80089b8 <_fflush_r>
 8008a40:	b9e0      	cbnz	r0, 8008a7c <__swbuf_r+0x74>
 8008a42:	68a3      	ldr	r3, [r4, #8]
 8008a44:	3b01      	subs	r3, #1
 8008a46:	60a3      	str	r3, [r4, #8]
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	1c5a      	adds	r2, r3, #1
 8008a4c:	6022      	str	r2, [r4, #0]
 8008a4e:	701e      	strb	r6, [r3, #0]
 8008a50:	6962      	ldr	r2, [r4, #20]
 8008a52:	1c43      	adds	r3, r0, #1
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d004      	beq.n	8008a62 <__swbuf_r+0x5a>
 8008a58:	89a3      	ldrh	r3, [r4, #12]
 8008a5a:	07db      	lsls	r3, r3, #31
 8008a5c:	d506      	bpl.n	8008a6c <__swbuf_r+0x64>
 8008a5e:	2e0a      	cmp	r6, #10
 8008a60:	d104      	bne.n	8008a6c <__swbuf_r+0x64>
 8008a62:	4621      	mov	r1, r4
 8008a64:	4628      	mov	r0, r5
 8008a66:	f7ff ffa7 	bl	80089b8 <_fflush_r>
 8008a6a:	b938      	cbnz	r0, 8008a7c <__swbuf_r+0x74>
 8008a6c:	4638      	mov	r0, r7
 8008a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a70:	4621      	mov	r1, r4
 8008a72:	4628      	mov	r0, r5
 8008a74:	f000 f806 	bl	8008a84 <__swsetup_r>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	d0d5      	beq.n	8008a28 <__swbuf_r+0x20>
 8008a7c:	f04f 37ff 	mov.w	r7, #4294967295
 8008a80:	e7f4      	b.n	8008a6c <__swbuf_r+0x64>
	...

08008a84 <__swsetup_r>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	4b2a      	ldr	r3, [pc, #168]	; (8008b30 <__swsetup_r+0xac>)
 8008a88:	4605      	mov	r5, r0
 8008a8a:	6818      	ldr	r0, [r3, #0]
 8008a8c:	460c      	mov	r4, r1
 8008a8e:	b118      	cbz	r0, 8008a98 <__swsetup_r+0x14>
 8008a90:	6a03      	ldr	r3, [r0, #32]
 8008a92:	b90b      	cbnz	r3, 8008a98 <__swsetup_r+0x14>
 8008a94:	f7ff f8a4 	bl	8007be0 <__sinit>
 8008a98:	89a3      	ldrh	r3, [r4, #12]
 8008a9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a9e:	0718      	lsls	r0, r3, #28
 8008aa0:	d422      	bmi.n	8008ae8 <__swsetup_r+0x64>
 8008aa2:	06d9      	lsls	r1, r3, #27
 8008aa4:	d407      	bmi.n	8008ab6 <__swsetup_r+0x32>
 8008aa6:	2309      	movs	r3, #9
 8008aa8:	602b      	str	r3, [r5, #0]
 8008aaa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008aae:	81a3      	strh	r3, [r4, #12]
 8008ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab4:	e034      	b.n	8008b20 <__swsetup_r+0x9c>
 8008ab6:	0758      	lsls	r0, r3, #29
 8008ab8:	d512      	bpl.n	8008ae0 <__swsetup_r+0x5c>
 8008aba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008abc:	b141      	cbz	r1, 8008ad0 <__swsetup_r+0x4c>
 8008abe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ac2:	4299      	cmp	r1, r3
 8008ac4:	d002      	beq.n	8008acc <__swsetup_r+0x48>
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	f7ff f9cc 	bl	8007e64 <_free_r>
 8008acc:	2300      	movs	r3, #0
 8008ace:	6363      	str	r3, [r4, #52]	; 0x34
 8008ad0:	89a3      	ldrh	r3, [r4, #12]
 8008ad2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ad6:	81a3      	strh	r3, [r4, #12]
 8008ad8:	2300      	movs	r3, #0
 8008ada:	6063      	str	r3, [r4, #4]
 8008adc:	6923      	ldr	r3, [r4, #16]
 8008ade:	6023      	str	r3, [r4, #0]
 8008ae0:	89a3      	ldrh	r3, [r4, #12]
 8008ae2:	f043 0308 	orr.w	r3, r3, #8
 8008ae6:	81a3      	strh	r3, [r4, #12]
 8008ae8:	6923      	ldr	r3, [r4, #16]
 8008aea:	b94b      	cbnz	r3, 8008b00 <__swsetup_r+0x7c>
 8008aec:	89a3      	ldrh	r3, [r4, #12]
 8008aee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008af6:	d003      	beq.n	8008b00 <__swsetup_r+0x7c>
 8008af8:	4621      	mov	r1, r4
 8008afa:	4628      	mov	r0, r5
 8008afc:	f000 f899 	bl	8008c32 <__smakebuf_r>
 8008b00:	89a0      	ldrh	r0, [r4, #12]
 8008b02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b06:	f010 0301 	ands.w	r3, r0, #1
 8008b0a:	d00a      	beq.n	8008b22 <__swsetup_r+0x9e>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	60a3      	str	r3, [r4, #8]
 8008b10:	6963      	ldr	r3, [r4, #20]
 8008b12:	425b      	negs	r3, r3
 8008b14:	61a3      	str	r3, [r4, #24]
 8008b16:	6923      	ldr	r3, [r4, #16]
 8008b18:	b943      	cbnz	r3, 8008b2c <__swsetup_r+0xa8>
 8008b1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b1e:	d1c4      	bne.n	8008aaa <__swsetup_r+0x26>
 8008b20:	bd38      	pop	{r3, r4, r5, pc}
 8008b22:	0781      	lsls	r1, r0, #30
 8008b24:	bf58      	it	pl
 8008b26:	6963      	ldrpl	r3, [r4, #20]
 8008b28:	60a3      	str	r3, [r4, #8]
 8008b2a:	e7f4      	b.n	8008b16 <__swsetup_r+0x92>
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	e7f7      	b.n	8008b20 <__swsetup_r+0x9c>
 8008b30:	20000074 	.word	0x20000074

08008b34 <memmove>:
 8008b34:	4288      	cmp	r0, r1
 8008b36:	b510      	push	{r4, lr}
 8008b38:	eb01 0402 	add.w	r4, r1, r2
 8008b3c:	d902      	bls.n	8008b44 <memmove+0x10>
 8008b3e:	4284      	cmp	r4, r0
 8008b40:	4623      	mov	r3, r4
 8008b42:	d807      	bhi.n	8008b54 <memmove+0x20>
 8008b44:	1e43      	subs	r3, r0, #1
 8008b46:	42a1      	cmp	r1, r4
 8008b48:	d008      	beq.n	8008b5c <memmove+0x28>
 8008b4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b52:	e7f8      	b.n	8008b46 <memmove+0x12>
 8008b54:	4402      	add	r2, r0
 8008b56:	4601      	mov	r1, r0
 8008b58:	428a      	cmp	r2, r1
 8008b5a:	d100      	bne.n	8008b5e <memmove+0x2a>
 8008b5c:	bd10      	pop	{r4, pc}
 8008b5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b66:	e7f7      	b.n	8008b58 <memmove+0x24>

08008b68 <_sbrk_r>:
 8008b68:	b538      	push	{r3, r4, r5, lr}
 8008b6a:	4d06      	ldr	r5, [pc, #24]	; (8008b84 <_sbrk_r+0x1c>)
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	4604      	mov	r4, r0
 8008b70:	4608      	mov	r0, r1
 8008b72:	602b      	str	r3, [r5, #0]
 8008b74:	f000 f8c4 	bl	8008d00 <_sbrk>
 8008b78:	1c43      	adds	r3, r0, #1
 8008b7a:	d102      	bne.n	8008b82 <_sbrk_r+0x1a>
 8008b7c:	682b      	ldr	r3, [r5, #0]
 8008b7e:	b103      	cbz	r3, 8008b82 <_sbrk_r+0x1a>
 8008b80:	6023      	str	r3, [r4, #0]
 8008b82:	bd38      	pop	{r3, r4, r5, pc}
 8008b84:	2001468c 	.word	0x2001468c

08008b88 <_realloc_r>:
 8008b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b8c:	4680      	mov	r8, r0
 8008b8e:	4614      	mov	r4, r2
 8008b90:	460e      	mov	r6, r1
 8008b92:	b921      	cbnz	r1, 8008b9e <_realloc_r+0x16>
 8008b94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b98:	4611      	mov	r1, r2
 8008b9a:	f7ff b9cf 	b.w	8007f3c <_malloc_r>
 8008b9e:	b92a      	cbnz	r2, 8008bac <_realloc_r+0x24>
 8008ba0:	f7ff f960 	bl	8007e64 <_free_r>
 8008ba4:	4625      	mov	r5, r4
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bac:	f000 f8a0 	bl	8008cf0 <_malloc_usable_size_r>
 8008bb0:	4284      	cmp	r4, r0
 8008bb2:	4607      	mov	r7, r0
 8008bb4:	d802      	bhi.n	8008bbc <_realloc_r+0x34>
 8008bb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008bba:	d812      	bhi.n	8008be2 <_realloc_r+0x5a>
 8008bbc:	4621      	mov	r1, r4
 8008bbe:	4640      	mov	r0, r8
 8008bc0:	f7ff f9bc 	bl	8007f3c <_malloc_r>
 8008bc4:	4605      	mov	r5, r0
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d0ed      	beq.n	8008ba6 <_realloc_r+0x1e>
 8008bca:	42bc      	cmp	r4, r7
 8008bcc:	4622      	mov	r2, r4
 8008bce:	4631      	mov	r1, r6
 8008bd0:	bf28      	it	cs
 8008bd2:	463a      	movcs	r2, r7
 8008bd4:	f7ff f937 	bl	8007e46 <memcpy>
 8008bd8:	4631      	mov	r1, r6
 8008bda:	4640      	mov	r0, r8
 8008bdc:	f7ff f942 	bl	8007e64 <_free_r>
 8008be0:	e7e1      	b.n	8008ba6 <_realloc_r+0x1e>
 8008be2:	4635      	mov	r5, r6
 8008be4:	e7df      	b.n	8008ba6 <_realloc_r+0x1e>

08008be6 <__swhatbuf_r>:
 8008be6:	b570      	push	{r4, r5, r6, lr}
 8008be8:	460c      	mov	r4, r1
 8008bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bee:	2900      	cmp	r1, #0
 8008bf0:	b096      	sub	sp, #88	; 0x58
 8008bf2:	4615      	mov	r5, r2
 8008bf4:	461e      	mov	r6, r3
 8008bf6:	da0d      	bge.n	8008c14 <__swhatbuf_r+0x2e>
 8008bf8:	89a3      	ldrh	r3, [r4, #12]
 8008bfa:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008bfe:	f04f 0100 	mov.w	r1, #0
 8008c02:	bf0c      	ite	eq
 8008c04:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008c08:	2340      	movne	r3, #64	; 0x40
 8008c0a:	2000      	movs	r0, #0
 8008c0c:	6031      	str	r1, [r6, #0]
 8008c0e:	602b      	str	r3, [r5, #0]
 8008c10:	b016      	add	sp, #88	; 0x58
 8008c12:	bd70      	pop	{r4, r5, r6, pc}
 8008c14:	466a      	mov	r2, sp
 8008c16:	f000 f849 	bl	8008cac <_fstat_r>
 8008c1a:	2800      	cmp	r0, #0
 8008c1c:	dbec      	blt.n	8008bf8 <__swhatbuf_r+0x12>
 8008c1e:	9901      	ldr	r1, [sp, #4]
 8008c20:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008c24:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008c28:	4259      	negs	r1, r3
 8008c2a:	4159      	adcs	r1, r3
 8008c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c30:	e7eb      	b.n	8008c0a <__swhatbuf_r+0x24>

08008c32 <__smakebuf_r>:
 8008c32:	898b      	ldrh	r3, [r1, #12]
 8008c34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c36:	079d      	lsls	r5, r3, #30
 8008c38:	4606      	mov	r6, r0
 8008c3a:	460c      	mov	r4, r1
 8008c3c:	d507      	bpl.n	8008c4e <__smakebuf_r+0x1c>
 8008c3e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c42:	6023      	str	r3, [r4, #0]
 8008c44:	6123      	str	r3, [r4, #16]
 8008c46:	2301      	movs	r3, #1
 8008c48:	6163      	str	r3, [r4, #20]
 8008c4a:	b002      	add	sp, #8
 8008c4c:	bd70      	pop	{r4, r5, r6, pc}
 8008c4e:	ab01      	add	r3, sp, #4
 8008c50:	466a      	mov	r2, sp
 8008c52:	f7ff ffc8 	bl	8008be6 <__swhatbuf_r>
 8008c56:	9900      	ldr	r1, [sp, #0]
 8008c58:	4605      	mov	r5, r0
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	f7ff f96e 	bl	8007f3c <_malloc_r>
 8008c60:	b948      	cbnz	r0, 8008c76 <__smakebuf_r+0x44>
 8008c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c66:	059a      	lsls	r2, r3, #22
 8008c68:	d4ef      	bmi.n	8008c4a <__smakebuf_r+0x18>
 8008c6a:	f023 0303 	bic.w	r3, r3, #3
 8008c6e:	f043 0302 	orr.w	r3, r3, #2
 8008c72:	81a3      	strh	r3, [r4, #12]
 8008c74:	e7e3      	b.n	8008c3e <__smakebuf_r+0xc>
 8008c76:	89a3      	ldrh	r3, [r4, #12]
 8008c78:	6020      	str	r0, [r4, #0]
 8008c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c7e:	81a3      	strh	r3, [r4, #12]
 8008c80:	9b00      	ldr	r3, [sp, #0]
 8008c82:	6163      	str	r3, [r4, #20]
 8008c84:	9b01      	ldr	r3, [sp, #4]
 8008c86:	6120      	str	r0, [r4, #16]
 8008c88:	b15b      	cbz	r3, 8008ca2 <__smakebuf_r+0x70>
 8008c8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c8e:	4630      	mov	r0, r6
 8008c90:	f000 f81e 	bl	8008cd0 <_isatty_r>
 8008c94:	b128      	cbz	r0, 8008ca2 <__smakebuf_r+0x70>
 8008c96:	89a3      	ldrh	r3, [r4, #12]
 8008c98:	f023 0303 	bic.w	r3, r3, #3
 8008c9c:	f043 0301 	orr.w	r3, r3, #1
 8008ca0:	81a3      	strh	r3, [r4, #12]
 8008ca2:	89a3      	ldrh	r3, [r4, #12]
 8008ca4:	431d      	orrs	r5, r3
 8008ca6:	81a5      	strh	r5, [r4, #12]
 8008ca8:	e7cf      	b.n	8008c4a <__smakebuf_r+0x18>
	...

08008cac <_fstat_r>:
 8008cac:	b538      	push	{r3, r4, r5, lr}
 8008cae:	4d07      	ldr	r5, [pc, #28]	; (8008ccc <_fstat_r+0x20>)
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	4604      	mov	r4, r0
 8008cb4:	4608      	mov	r0, r1
 8008cb6:	4611      	mov	r1, r2
 8008cb8:	602b      	str	r3, [r5, #0]
 8008cba:	f7f8 f886 	bl	8000dca <_fstat>
 8008cbe:	1c43      	adds	r3, r0, #1
 8008cc0:	d102      	bne.n	8008cc8 <_fstat_r+0x1c>
 8008cc2:	682b      	ldr	r3, [r5, #0]
 8008cc4:	b103      	cbz	r3, 8008cc8 <_fstat_r+0x1c>
 8008cc6:	6023      	str	r3, [r4, #0]
 8008cc8:	bd38      	pop	{r3, r4, r5, pc}
 8008cca:	bf00      	nop
 8008ccc:	2001468c 	.word	0x2001468c

08008cd0 <_isatty_r>:
 8008cd0:	b538      	push	{r3, r4, r5, lr}
 8008cd2:	4d06      	ldr	r5, [pc, #24]	; (8008cec <_isatty_r+0x1c>)
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	4604      	mov	r4, r0
 8008cd8:	4608      	mov	r0, r1
 8008cda:	602b      	str	r3, [r5, #0]
 8008cdc:	f7f8 f885 	bl	8000dea <_isatty>
 8008ce0:	1c43      	adds	r3, r0, #1
 8008ce2:	d102      	bne.n	8008cea <_isatty_r+0x1a>
 8008ce4:	682b      	ldr	r3, [r5, #0]
 8008ce6:	b103      	cbz	r3, 8008cea <_isatty_r+0x1a>
 8008ce8:	6023      	str	r3, [r4, #0]
 8008cea:	bd38      	pop	{r3, r4, r5, pc}
 8008cec:	2001468c 	.word	0x2001468c

08008cf0 <_malloc_usable_size_r>:
 8008cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cf4:	1f18      	subs	r0, r3, #4
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	bfbc      	itt	lt
 8008cfa:	580b      	ldrlt	r3, [r1, r0]
 8008cfc:	18c0      	addlt	r0, r0, r3
 8008cfe:	4770      	bx	lr

08008d00 <_sbrk>:
 8008d00:	4a04      	ldr	r2, [pc, #16]	; (8008d14 <_sbrk+0x14>)
 8008d02:	6811      	ldr	r1, [r2, #0]
 8008d04:	4603      	mov	r3, r0
 8008d06:	b909      	cbnz	r1, 8008d0c <_sbrk+0xc>
 8008d08:	4903      	ldr	r1, [pc, #12]	; (8008d18 <_sbrk+0x18>)
 8008d0a:	6011      	str	r1, [r2, #0]
 8008d0c:	6810      	ldr	r0, [r2, #0]
 8008d0e:	4403      	add	r3, r0
 8008d10:	6013      	str	r3, [r2, #0]
 8008d12:	4770      	bx	lr
 8008d14:	2001469c 	.word	0x2001469c
 8008d18:	200146a0 	.word	0x200146a0

08008d1c <_init>:
 8008d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1e:	bf00      	nop
 8008d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d22:	bc08      	pop	{r3}
 8008d24:	469e      	mov	lr, r3
 8008d26:	4770      	bx	lr

08008d28 <_fini>:
 8008d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d2a:	bf00      	nop
 8008d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d2e:	bc08      	pop	{r3}
 8008d30:	469e      	mov	lr, r3
 8008d32:	4770      	bx	lr
