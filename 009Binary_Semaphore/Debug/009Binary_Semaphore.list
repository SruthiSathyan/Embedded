
009Binary_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08006f20  08006f20  00016f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ffc  08006ffc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006ffc  08006ffc  00016ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007004  08007004  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007004  08007004  00017004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007008  08007008  00017008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800700c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000134dc  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200134f0  200134f0  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   000172c6  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000347e  00000000  00000000  0003734d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001540  00000000  00000000  0003a7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001083  00000000  00000000  0003bd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023f01  00000000  00000000  0003cd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018689  00000000  00000000  00060c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dac5e  00000000  00000000  0007931d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000059e8  00000000  00000000  00153f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000d8  00000000  00000000  00159964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f08 	.word	0x08006f08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08006f08 	.word	0x08006f08

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f24 	.word	0x20012f24

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b970 	b.w	800056c <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9e08      	ldr	r6, [sp, #32]
 80002aa:	460d      	mov	r5, r1
 80002ac:	4604      	mov	r4, r0
 80002ae:	460f      	mov	r7, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14a      	bne.n	800034a <__udivmoddi4+0xa6>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4694      	mov	ip, r2
 80002b8:	d965      	bls.n	8000386 <__udivmoddi4+0xe2>
 80002ba:	fab2 f382 	clz	r3, r2
 80002be:	b143      	cbz	r3, 80002d2 <__udivmoddi4+0x2e>
 80002c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c4:	f1c3 0220 	rsb	r2, r3, #32
 80002c8:	409f      	lsls	r7, r3
 80002ca:	fa20 f202 	lsr.w	r2, r0, r2
 80002ce:	4317      	orrs	r7, r2
 80002d0:	409c      	lsls	r4, r3
 80002d2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d6:	fa1f f58c 	uxth.w	r5, ip
 80002da:	fbb7 f1fe 	udiv	r1, r7, lr
 80002de:	0c22      	lsrs	r2, r4, #16
 80002e0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e8:	fb01 f005 	mul.w	r0, r1, r5
 80002ec:	4290      	cmp	r0, r2
 80002ee:	d90a      	bls.n	8000306 <__udivmoddi4+0x62>
 80002f0:	eb1c 0202 	adds.w	r2, ip, r2
 80002f4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f8:	f080 811c 	bcs.w	8000534 <__udivmoddi4+0x290>
 80002fc:	4290      	cmp	r0, r2
 80002fe:	f240 8119 	bls.w	8000534 <__udivmoddi4+0x290>
 8000302:	3902      	subs	r1, #2
 8000304:	4462      	add	r2, ip
 8000306:	1a12      	subs	r2, r2, r0
 8000308:	b2a4      	uxth	r4, r4
 800030a:	fbb2 f0fe 	udiv	r0, r2, lr
 800030e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000312:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000316:	fb00 f505 	mul.w	r5, r0, r5
 800031a:	42a5      	cmp	r5, r4
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x90>
 800031e:	eb1c 0404 	adds.w	r4, ip, r4
 8000322:	f100 32ff 	add.w	r2, r0, #4294967295
 8000326:	f080 8107 	bcs.w	8000538 <__udivmoddi4+0x294>
 800032a:	42a5      	cmp	r5, r4
 800032c:	f240 8104 	bls.w	8000538 <__udivmoddi4+0x294>
 8000330:	4464      	add	r4, ip
 8000332:	3802      	subs	r0, #2
 8000334:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000338:	1b64      	subs	r4, r4, r5
 800033a:	2100      	movs	r1, #0
 800033c:	b11e      	cbz	r6, 8000346 <__udivmoddi4+0xa2>
 800033e:	40dc      	lsrs	r4, r3
 8000340:	2300      	movs	r3, #0
 8000342:	e9c6 4300 	strd	r4, r3, [r6]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0xbc>
 800034e:	2e00      	cmp	r6, #0
 8000350:	f000 80ed 	beq.w	800052e <__udivmoddi4+0x28a>
 8000354:	2100      	movs	r1, #0
 8000356:	e9c6 0500 	strd	r0, r5, [r6]
 800035a:	4608      	mov	r0, r1
 800035c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d149      	bne.n	80003fc <__udivmoddi4+0x158>
 8000368:	42ab      	cmp	r3, r5
 800036a:	d302      	bcc.n	8000372 <__udivmoddi4+0xce>
 800036c:	4282      	cmp	r2, r0
 800036e:	f200 80f8 	bhi.w	8000562 <__udivmoddi4+0x2be>
 8000372:	1a84      	subs	r4, r0, r2
 8000374:	eb65 0203 	sbc.w	r2, r5, r3
 8000378:	2001      	movs	r0, #1
 800037a:	4617      	mov	r7, r2
 800037c:	2e00      	cmp	r6, #0
 800037e:	d0e2      	beq.n	8000346 <__udivmoddi4+0xa2>
 8000380:	e9c6 4700 	strd	r4, r7, [r6]
 8000384:	e7df      	b.n	8000346 <__udivmoddi4+0xa2>
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xe6>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f382 	clz	r3, r2
 800038e:	2b00      	cmp	r3, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x210>
 8000394:	1a8a      	subs	r2, r1, r2
 8000396:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	2101      	movs	r1, #1
 80003a0:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a4:	fb07 2015 	mls	r0, r7, r5, r2
 80003a8:	0c22      	lsrs	r2, r4, #16
 80003aa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ae:	fb0e f005 	mul.w	r0, lr, r5
 80003b2:	4290      	cmp	r0, r2
 80003b4:	d908      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003b6:	eb1c 0202 	adds.w	r2, ip, r2
 80003ba:	f105 38ff 	add.w	r8, r5, #4294967295
 80003be:	d202      	bcs.n	80003c6 <__udivmoddi4+0x122>
 80003c0:	4290      	cmp	r0, r2
 80003c2:	f200 80cb 	bhi.w	800055c <__udivmoddi4+0x2b8>
 80003c6:	4645      	mov	r5, r8
 80003c8:	1a12      	subs	r2, r2, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d0:	fb07 2210 	mls	r2, r7, r0, r2
 80003d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d8:	fb0e fe00 	mul.w	lr, lr, r0
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x14e>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e8:	d202      	bcs.n	80003f0 <__udivmoddi4+0x14c>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	f200 80bb 	bhi.w	8000566 <__udivmoddi4+0x2c2>
 80003f0:	4610      	mov	r0, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003fa:	e79f      	b.n	800033c <__udivmoddi4+0x98>
 80003fc:	f1c1 0720 	rsb	r7, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 fc07 	lsr.w	ip, r2, r7
 8000406:	ea4c 0c03 	orr.w	ip, ip, r3
 800040a:	fa05 f401 	lsl.w	r4, r5, r1
 800040e:	fa20 f307 	lsr.w	r3, r0, r7
 8000412:	40fd      	lsrs	r5, r7
 8000414:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fbb5 f8f9 	udiv	r8, r5, r9
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	fb09 5518 	mls	r5, r9, r8, r5
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800042c:	fb08 f50e 	mul.w	r5, r8, lr
 8000430:	42a5      	cmp	r5, r4
 8000432:	fa02 f201 	lsl.w	r2, r2, r1
 8000436:	fa00 f001 	lsl.w	r0, r0, r1
 800043a:	d90b      	bls.n	8000454 <__udivmoddi4+0x1b0>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f108 3aff 	add.w	sl, r8, #4294967295
 8000444:	f080 8088 	bcs.w	8000558 <__udivmoddi4+0x2b4>
 8000448:	42a5      	cmp	r5, r4
 800044a:	f240 8085 	bls.w	8000558 <__udivmoddi4+0x2b4>
 800044e:	f1a8 0802 	sub.w	r8, r8, #2
 8000452:	4464      	add	r4, ip
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	b29d      	uxth	r5, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000464:	fb03 fe0e 	mul.w	lr, r3, lr
 8000468:	45a6      	cmp	lr, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1da>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f103 35ff 	add.w	r5, r3, #4294967295
 8000474:	d26c      	bcs.n	8000550 <__udivmoddi4+0x2ac>
 8000476:	45a6      	cmp	lr, r4
 8000478:	d96a      	bls.n	8000550 <__udivmoddi4+0x2ac>
 800047a:	3b02      	subs	r3, #2
 800047c:	4464      	add	r4, ip
 800047e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000482:	fba3 9502 	umull	r9, r5, r3, r2
 8000486:	eba4 040e 	sub.w	r4, r4, lr
 800048a:	42ac      	cmp	r4, r5
 800048c:	46c8      	mov	r8, r9
 800048e:	46ae      	mov	lr, r5
 8000490:	d356      	bcc.n	8000540 <__udivmoddi4+0x29c>
 8000492:	d053      	beq.n	800053c <__udivmoddi4+0x298>
 8000494:	b156      	cbz	r6, 80004ac <__udivmoddi4+0x208>
 8000496:	ebb0 0208 	subs.w	r2, r0, r8
 800049a:	eb64 040e 	sbc.w	r4, r4, lr
 800049e:	fa04 f707 	lsl.w	r7, r4, r7
 80004a2:	40ca      	lsrs	r2, r1
 80004a4:	40cc      	lsrs	r4, r1
 80004a6:	4317      	orrs	r7, r2
 80004a8:	e9c6 7400 	strd	r7, r4, [r6]
 80004ac:	4618      	mov	r0, r3
 80004ae:	2100      	movs	r1, #0
 80004b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b4:	f1c3 0120 	rsb	r1, r3, #32
 80004b8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004bc:	fa20 f201 	lsr.w	r2, r0, r1
 80004c0:	fa25 f101 	lsr.w	r1, r5, r1
 80004c4:	409d      	lsls	r5, r3
 80004c6:	432a      	orrs	r2, r5
 80004c8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004cc:	fa1f fe8c 	uxth.w	lr, ip
 80004d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d4:	fb07 1510 	mls	r5, r7, r0, r1
 80004d8:	0c11      	lsrs	r1, r2, #16
 80004da:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004de:	fb00 f50e 	mul.w	r5, r0, lr
 80004e2:	428d      	cmp	r5, r1
 80004e4:	fa04 f403 	lsl.w	r4, r4, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x258>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f2:	d22f      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 80004f4:	428d      	cmp	r5, r1
 80004f6:	d92d      	bls.n	8000554 <__udivmoddi4+0x2b0>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	1b49      	subs	r1, r1, r5
 80004fe:	b292      	uxth	r2, r2
 8000500:	fbb1 f5f7 	udiv	r5, r1, r7
 8000504:	fb07 1115 	mls	r1, r7, r5, r1
 8000508:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800050c:	fb05 f10e 	mul.w	r1, r5, lr
 8000510:	4291      	cmp	r1, r2
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x282>
 8000514:	eb1c 0202 	adds.w	r2, ip, r2
 8000518:	f105 38ff 	add.w	r8, r5, #4294967295
 800051c:	d216      	bcs.n	800054c <__udivmoddi4+0x2a8>
 800051e:	4291      	cmp	r1, r2
 8000520:	d914      	bls.n	800054c <__udivmoddi4+0x2a8>
 8000522:	3d02      	subs	r5, #2
 8000524:	4462      	add	r2, ip
 8000526:	1a52      	subs	r2, r2, r1
 8000528:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800052c:	e738      	b.n	80003a0 <__udivmoddi4+0xfc>
 800052e:	4631      	mov	r1, r6
 8000530:	4630      	mov	r0, r6
 8000532:	e708      	b.n	8000346 <__udivmoddi4+0xa2>
 8000534:	4639      	mov	r1, r7
 8000536:	e6e6      	b.n	8000306 <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e6fb      	b.n	8000334 <__udivmoddi4+0x90>
 800053c:	4548      	cmp	r0, r9
 800053e:	d2a9      	bcs.n	8000494 <__udivmoddi4+0x1f0>
 8000540:	ebb9 0802 	subs.w	r8, r9, r2
 8000544:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000548:	3b01      	subs	r3, #1
 800054a:	e7a3      	b.n	8000494 <__udivmoddi4+0x1f0>
 800054c:	4645      	mov	r5, r8
 800054e:	e7ea      	b.n	8000526 <__udivmoddi4+0x282>
 8000550:	462b      	mov	r3, r5
 8000552:	e794      	b.n	800047e <__udivmoddi4+0x1da>
 8000554:	4640      	mov	r0, r8
 8000556:	e7d1      	b.n	80004fc <__udivmoddi4+0x258>
 8000558:	46d0      	mov	r8, sl
 800055a:	e77b      	b.n	8000454 <__udivmoddi4+0x1b0>
 800055c:	3d02      	subs	r5, #2
 800055e:	4462      	add	r2, ip
 8000560:	e732      	b.n	80003c8 <__udivmoddi4+0x124>
 8000562:	4608      	mov	r0, r1
 8000564:	e70a      	b.n	800037c <__udivmoddi4+0xd8>
 8000566:	4464      	add	r4, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e742      	b.n	80003f2 <__udivmoddi4+0x14e>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fc05 	bl	8000d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f85b 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f8ed 	bl	800075c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f8c1 	bl	8000708 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  xBinarySemaphore = xSemaphoreCreateBinary();
 8000586:	2203      	movs	r2, #3
 8000588:	2100      	movs	r1, #0
 800058a:	2001      	movs	r0, #1
 800058c:	f002 fb68 	bl	8002c60 <xQueueGenericCreate>
 8000590:	4603      	mov	r3, r0
 8000592:	4a21      	ldr	r2, [pc, #132]	; (8000618 <main+0xa8>)
 8000594:	6013      	str	r3, [r2, #0]
  if(xBinarySemaphore != NULL)
 8000596:	4b20      	ldr	r3, [pc, #128]	; (8000618 <main+0xa8>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d03a      	beq.n	8000614 <main+0xa4>
  {
//	  char str1="Semaphore Creation succesfull \n";
//	  HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 100);
	  //  task creation
	  status = xTaskCreate(Task_1_handler,
 800059e:	4b1f      	ldr	r3, [pc, #124]	; (800061c <main+0xac>)
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2301      	movs	r3, #1
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2300      	movs	r3, #0
 80005a8:	22c8      	movs	r2, #200	; 0xc8
 80005aa:	491d      	ldr	r1, [pc, #116]	; (8000620 <main+0xb0>)
 80005ac:	481d      	ldr	r0, [pc, #116]	; (8000624 <main+0xb4>)
 80005ae:	f003 f99d 	bl	80038ec <xTaskCreate>
 80005b2:	60f8      	str	r0, [r7, #12]
	                  NULL,
	                  1,
	                  &task1_handle
	                                );

	  	 configASSERT(status == pdPASS);
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d00a      	beq.n	80005d0 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005be:	f383 8811 	msr	BASEPRI, r3
 80005c2:	f3bf 8f6f 	isb	sy
 80005c6:	f3bf 8f4f 	dsb	sy
 80005ca:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005cc:	bf00      	nop
 80005ce:	e7fe      	b.n	80005ce <main+0x5e>

	  	 status = xTaskCreate(Task_2_handler,
 80005d0:	4b15      	ldr	r3, [pc, #84]	; (8000628 <main+0xb8>)
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	2301      	movs	r3, #1
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2300      	movs	r3, #0
 80005da:	22c8      	movs	r2, #200	; 0xc8
 80005dc:	4913      	ldr	r1, [pc, #76]	; (800062c <main+0xbc>)
 80005de:	4814      	ldr	r0, [pc, #80]	; (8000630 <main+0xc0>)
 80005e0:	f003 f984 	bl	80038ec <xTaskCreate>
 80005e4:	60f8      	str	r0, [r7, #12]
	                    NULL,
	                    1,
	                    &task2_handle
	                                  );

	  	 configASSERT(status == pdPASS);
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d00a      	beq.n	8000602 <main+0x92>
        __asm volatile
 80005ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f0:	f383 8811 	msr	BASEPRI, r3
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	f3bf 8f4f 	dsb	sy
 80005fc:	607b      	str	r3, [r7, #4]
    }
 80005fe:	bf00      	nop
 8000600:	e7fe      	b.n	8000600 <main+0x90>

	  	 xSemaphoreGive(xBinarySemaphore);
 8000602:	4b05      	ldr	r3, [pc, #20]	; (8000618 <main+0xa8>)
 8000604:	6818      	ldr	r0, [r3, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	2200      	movs	r2, #0
 800060a:	2100      	movs	r1, #0
 800060c:	f002 fbb0 	bl	8002d70 <xQueueGenericSend>

	  	 vTaskStartScheduler();
 8000610:	f003 fb08 	bl	8003c24 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	e7fe      	b.n	8000614 <main+0xa4>
 8000616:	bf00      	nop
 8000618:	20000080 	.word	0x20000080
 800061c:	20000078 	.word	0x20000078
 8000620:	08006f20 	.word	0x08006f20
 8000624:	08000a19 	.word	0x08000a19
 8000628:	2000007c 	.word	0x2000007c
 800062c:	08006f28 	.word	0x08006f28
 8000630:	08000a71 	.word	0x08000a71

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	; 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f006 fc26 	bl	8006e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b28      	ldr	r3, [pc, #160]	; (8000700 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	4a27      	ldr	r2, [pc, #156]	; (8000700 <SystemClock_Config+0xcc>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	; 0x40
 8000668:	4b25      	ldr	r3, [pc, #148]	; (8000700 <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b22      	ldr	r3, [pc, #136]	; (8000704 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a21      	ldr	r2, [pc, #132]	; (8000704 <SystemClock_Config+0xd0>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a4:	2308      	movs	r3, #8
 80006a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006a8:	2332      	movs	r3, #50	; 0x32
 80006aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b0:	2307      	movs	r3, #7
 80006b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 fe3d 	bl	8001338 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c4:	f000 fa10 	bl	8000ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 f89e 	bl	8001828 <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f2:	f000 f9f9 	bl	8000ae8 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	; 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 800070e:	4a12      	ldr	r2, [pc, #72]	; (8000758 <MX_USART2_UART_Init+0x50>)
 8000710:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000718:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000740:	f001 fd66 	bl	8002210 <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800074a:	f000 f9cd 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000030 	.word	0x20000030
 8000758:	40004400 	.word	0x40004400

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08c      	sub	sp, #48	; 0x30
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
 8000776:	4ba2      	ldr	r3, [pc, #648]	; (8000a00 <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4aa1      	ldr	r2, [pc, #644]	; (8000a00 <MX_GPIO_Init+0x2a4>)
 800077c:	f043 0310 	orr.w	r3, r3, #16
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b9f      	ldr	r3, [pc, #636]	; (8000a00 <MX_GPIO_Init+0x2a4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0310 	and.w	r3, r3, #16
 800078a:	61bb      	str	r3, [r7, #24]
 800078c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	4b9b      	ldr	r3, [pc, #620]	; (8000a00 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a9a      	ldr	r2, [pc, #616]	; (8000a00 <MX_GPIO_Init+0x2a4>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b98      	ldr	r3, [pc, #608]	; (8000a00 <MX_GPIO_Init+0x2a4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	4b94      	ldr	r3, [pc, #592]	; (8000a00 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a93      	ldr	r2, [pc, #588]	; (8000a00 <MX_GPIO_Init+0x2a4>)
 80007b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b91      	ldr	r3, [pc, #580]	; (8000a00 <MX_GPIO_Init+0x2a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	4b8d      	ldr	r3, [pc, #564]	; (8000a00 <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a8c      	ldr	r2, [pc, #560]	; (8000a00 <MX_GPIO_Init+0x2a4>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b8a      	ldr	r3, [pc, #552]	; (8000a00 <MX_GPIO_Init+0x2a4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	4b86      	ldr	r3, [pc, #536]	; (8000a00 <MX_GPIO_Init+0x2a4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a85      	ldr	r2, [pc, #532]	; (8000a00 <MX_GPIO_Init+0x2a4>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b83      	ldr	r3, [pc, #524]	; (8000a00 <MX_GPIO_Init+0x2a4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b7f      	ldr	r3, [pc, #508]	; (8000a00 <MX_GPIO_Init+0x2a4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a7e      	ldr	r2, [pc, #504]	; (8000a00 <MX_GPIO_Init+0x2a4>)
 8000808:	f043 0308 	orr.w	r3, r3, #8
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b7c      	ldr	r3, [pc, #496]	; (8000a00 <MX_GPIO_Init+0x2a4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0308 	and.w	r3, r3, #8
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2108      	movs	r1, #8
 800081e:	4879      	ldr	r0, [pc, #484]	; (8000a04 <MX_GPIO_Init+0x2a8>)
 8000820:	f000 fd70 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000824:	2201      	movs	r2, #1
 8000826:	2101      	movs	r1, #1
 8000828:	4877      	ldr	r0, [pc, #476]	; (8000a08 <MX_GPIO_Init+0x2ac>)
 800082a:	f000 fd6b 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800082e:	2200      	movs	r2, #0
 8000830:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000834:	4875      	ldr	r0, [pc, #468]	; (8000a0c <MX_GPIO_Init+0x2b0>)
 8000836:	f000 fd65 	bl	8001304 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800083a:	2308      	movs	r3, #8
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	486c      	ldr	r0, [pc, #432]	; (8000a04 <MX_GPIO_Init+0x2a8>)
 8000852:	f000 fbbb 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000856:	2301      	movs	r3, #1
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4866      	ldr	r0, [pc, #408]	; (8000a08 <MX_GPIO_Init+0x2ac>)
 800086e:	f000 fbad 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000872:	2308      	movs	r3, #8
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000882:	2305      	movs	r3, #5
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	485e      	ldr	r0, [pc, #376]	; (8000a08 <MX_GPIO_Init+0x2ac>)
 800088e:	f000 fb9d 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000892:	2301      	movs	r3, #1
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000896:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	485a      	ldr	r0, [pc, #360]	; (8000a10 <MX_GPIO_Init+0x2b4>)
 80008a8:	f000 fb90 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008ac:	2310      	movs	r3, #16
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008bc:	2306      	movs	r3, #6
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4852      	ldr	r0, [pc, #328]	; (8000a10 <MX_GPIO_Init+0x2b4>)
 80008c8:	f000 fb80 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008cc:	23e0      	movs	r3, #224	; 0xe0
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008dc:	2305      	movs	r3, #5
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	484a      	ldr	r0, [pc, #296]	; (8000a10 <MX_GPIO_Init+0x2b4>)
 80008e8:	f000 fb70 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008ec:	2304      	movs	r3, #4
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4845      	ldr	r0, [pc, #276]	; (8000a14 <MX_GPIO_Init+0x2b8>)
 8000900:	f000 fb64 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000916:	2305      	movs	r3, #5
 8000918:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	483c      	ldr	r0, [pc, #240]	; (8000a14 <MX_GPIO_Init+0x2b8>)
 8000922:	f000 fb53 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000926:	f24f 0310 	movw	r3, #61456	; 0xf010
 800092a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4833      	ldr	r0, [pc, #204]	; (8000a0c <MX_GPIO_Init+0x2b0>)
 8000940:	f000 fb44 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000944:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000956:	2306      	movs	r3, #6
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4829      	ldr	r0, [pc, #164]	; (8000a08 <MX_GPIO_Init+0x2ac>)
 8000962:	f000 fb33 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000966:	f44f 7300 	mov.w	r3, #512	; 0x200
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4825      	ldr	r0, [pc, #148]	; (8000a10 <MX_GPIO_Init+0x2b4>)
 800097c:	f000 fb26 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000980:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000992:	230a      	movs	r3, #10
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	481c      	ldr	r0, [pc, #112]	; (8000a10 <MX_GPIO_Init+0x2b4>)
 800099e:	f000 fb15 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009a2:	2320      	movs	r3, #32
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4815      	ldr	r0, [pc, #84]	; (8000a0c <MX_GPIO_Init+0x2b0>)
 80009b6:	f000 fb09 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ba:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c0:	2312      	movs	r3, #18
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009cc:	2304      	movs	r3, #4
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	480f      	ldr	r0, [pc, #60]	; (8000a14 <MX_GPIO_Init+0x2b8>)
 80009d8:	f000 faf8 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009dc:	2302      	movs	r3, #2
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009e0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <MX_GPIO_Init+0x2a8>)
 80009f2:	f000 faeb 	bl	8000fcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009f6:	bf00      	nop
 80009f8:	3730      	adds	r7, #48	; 0x30
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40020800 	.word	0x40020800
 8000a0c:	40020c00 	.word	0x40020c00
 8000a10:	40020000 	.word	0x40020000
 8000a14:	40020400 	.word	0x40020400

08000a18 <Task_1_handler>:

/* USER CODE BEGIN 4 */


static void Task_1_handler(void* parameters)
{
 8000a18:	b590      	push	{r4, r7, lr}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake( xBinarySemaphore, portMAX_DELAY );
 8000a20:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <Task_1_handler+0x4c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f04f 31ff 	mov.w	r1, #4294967295
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f002 fc95 	bl	8003358 <xQueueSemaphoreTake>

		char str3 ="Inside Task 1";
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <Task_1_handler+0x50>)
 8000a30:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)str3, strlen(str3), 100);
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	461c      	mov	r4, r3
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fc13 	bl	8000264 <strlen>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	2364      	movs	r3, #100	; 0x64
 8000a44:	4621      	mov	r1, r4
 8000a46:	4809      	ldr	r0, [pc, #36]	; (8000a6c <Task_1_handler+0x54>)
 8000a48:	f001 fc32 	bl	80022b0 <HAL_UART_Transmit>

		xSemaphoreGive(xBinarySemaphore);
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <Task_1_handler+0x4c>)
 8000a4e:	6818      	ldr	r0, [r3, #0]
 8000a50:	2300      	movs	r3, #0
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	f002 f98b 	bl	8002d70 <xQueueGenericSend>

		vTaskDelay( pdMS_TO_TICKS(500));
 8000a5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a5e:	f003 f8a9 	bl	8003bb4 <vTaskDelay>
	{
 8000a62:	e7dd      	b.n	8000a20 <Task_1_handler+0x8>
 8000a64:	20000080 	.word	0x20000080
 8000a68:	08006f30 	.word	0x08006f30
 8000a6c:	20000030 	.word	0x20000030

08000a70 <Task_2_handler>:
	}
}

static void Task_2_handler(void* parameters)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake( xBinarySemaphore, portMAX_DELAY );
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <Task_2_handler+0x48>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a80:	4618      	mov	r0, r3
 8000a82:	f002 fc69 	bl	8003358 <xQueueSemaphoreTake>

		char str2 ="Inside Task 2";
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <Task_2_handler+0x4c>)
 8000a88:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)str2, strlen(str2), 500);
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
 8000a8c:	461c      	mov	r4, r3
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fbe7 	bl	8000264 <strlen>
 8000a96:	4603      	mov	r3, r0
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a9e:	4621      	mov	r1, r4
 8000aa0:	4807      	ldr	r0, [pc, #28]	; (8000ac0 <Task_2_handler+0x50>)
 8000aa2:	f001 fc05 	bl	80022b0 <HAL_UART_Transmit>


		xSemaphoreGive(xBinarySemaphore);
 8000aa6:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <Task_2_handler+0x48>)
 8000aa8:	6818      	ldr	r0, [r3, #0]
 8000aaa:	2300      	movs	r3, #0
 8000aac:	2200      	movs	r2, #0
 8000aae:	2100      	movs	r1, #0
 8000ab0:	f002 f95e 	bl	8002d70 <xQueueGenericSend>
	{
 8000ab4:	e7e0      	b.n	8000a78 <Task_2_handler+0x8>
 8000ab6:	bf00      	nop
 8000ab8:	20000080 	.word	0x20000080
 8000abc:	08006f40 	.word	0x08006f40
 8000ac0:	20000030 	.word	0x20000030

08000ac4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d101      	bne.n	8000ada <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ad6:	f000 f977 	bl	8000dc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40001000 	.word	0x40001000

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <Error_Handler+0x8>
	...

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b08:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a19      	ldr	r2, [pc, #100]	; (8000bc8 <HAL_UART_MspInit+0x84>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d12b      	bne.n	8000bbe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <HAL_UART_MspInit+0x88>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	4a17      	ldr	r2, [pc, #92]	; (8000bcc <HAL_UART_MspInit+0x88>)
 8000b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b74:	6413      	str	r3, [r2, #64]	; 0x40
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <HAL_UART_MspInit+0x88>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <HAL_UART_MspInit+0x88>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <HAL_UART_MspInit+0x88>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_UART_MspInit+0x88>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b9e:	230c      	movs	r3, #12
 8000ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bae:	2307      	movs	r3, #7
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <HAL_UART_MspInit+0x8c>)
 8000bba:	f000 fa07 	bl	8000fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	; 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40004400 	.word	0x40004400
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08e      	sub	sp, #56	; 0x38
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	4b33      	ldr	r3, [pc, #204]	; (8000cb8 <HAL_InitTick+0xe4>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	4a32      	ldr	r2, [pc, #200]	; (8000cb8 <HAL_InitTick+0xe4>)
 8000bee:	f043 0310 	orr.w	r3, r3, #16
 8000bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf4:	4b30      	ldr	r3, [pc, #192]	; (8000cb8 <HAL_InitTick+0xe4>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	f003 0310 	and.w	r3, r3, #16
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c00:	f107 0210 	add.w	r2, r7, #16
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f001 f82c 	bl	8001c68 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c10:	6a3b      	ldr	r3, [r7, #32]
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d103      	bne.n	8000c22 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c1a:	f000 fffd 	bl	8001c18 <HAL_RCC_GetPCLK1Freq>
 8000c1e:	6378      	str	r0, [r7, #52]	; 0x34
 8000c20:	e004      	b.n	8000c2c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c22:	f000 fff9 	bl	8001c18 <HAL_RCC_GetPCLK1Freq>
 8000c26:	4603      	mov	r3, r0
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c2e:	4a23      	ldr	r2, [pc, #140]	; (8000cbc <HAL_InitTick+0xe8>)
 8000c30:	fba2 2303 	umull	r2, r3, r2, r3
 8000c34:	0c9b      	lsrs	r3, r3, #18
 8000c36:	3b01      	subs	r3, #1
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c3a:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <HAL_InitTick+0xec>)
 8000c3c:	4a21      	ldr	r2, [pc, #132]	; (8000cc4 <HAL_InitTick+0xf0>)
 8000c3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c40:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <HAL_InitTick+0xec>)
 8000c42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c46:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c48:	4a1d      	ldr	r2, [pc, #116]	; (8000cc0 <HAL_InitTick+0xec>)
 8000c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c4c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <HAL_InitTick+0xec>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c54:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <HAL_InitTick+0xec>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <HAL_InitTick+0xec>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c60:	4817      	ldr	r0, [pc, #92]	; (8000cc0 <HAL_InitTick+0xec>)
 8000c62:	f001 f833 	bl	8001ccc <HAL_TIM_Base_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d11b      	bne.n	8000cac <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c74:	4812      	ldr	r0, [pc, #72]	; (8000cc0 <HAL_InitTick+0xec>)
 8000c76:	f001 f883 	bl	8001d80 <HAL_TIM_Base_Start_IT>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d111      	bne.n	8000cac <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c88:	2036      	movs	r0, #54	; 0x36
 8000c8a:	f000 f991 	bl	8000fb0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b0f      	cmp	r3, #15
 8000c92:	d808      	bhi.n	8000ca6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c94:	2200      	movs	r2, #0
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	2036      	movs	r0, #54	; 0x36
 8000c9a:	f000 f96d 	bl	8000f78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_InitTick+0xf4>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	e002      	b.n	8000cac <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3738      	adds	r7, #56	; 0x38
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	431bde83 	.word	0x431bde83
 8000cc0:	20000084 	.word	0x20000084
 8000cc4:	40001000 	.word	0x40001000
 8000cc8:	20000004 	.word	0x20000004

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <NMI_Handler+0x4>

08000cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <MemManage_Handler+0x4>

08000cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <TIM6_DAC_IRQHandler+0x10>)
 8000cfe:	f001 f8af 	bl	8001e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000084 	.word	0x20000084

08000d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <SystemInit+0x20>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <SystemInit+0x20>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d34:	f7ff ffea 	bl	8000d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d3a:	490d      	ldr	r1, [pc, #52]	; (8000d70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d3c:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d40:	e002      	b.n	8000d48 <LoopCopyDataInit>

08000d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d46:	3304      	adds	r3, #4

08000d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d4c:	d3f9      	bcc.n	8000d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d50:	4c0a      	ldr	r4, [pc, #40]	; (8000d7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d54:	e001      	b.n	8000d5a <LoopFillZerobss>

08000d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d58:	3204      	adds	r2, #4

08000d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d5c:	d3fb      	bcc.n	8000d56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f006 f8a1 	bl	8006ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d62:	f7ff fc05 	bl	8000570 <main>
  bx  lr    
 8000d66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000d74:	0800700c 	.word	0x0800700c
  ldr r2, =_sbss
 8000d78:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000d7c:	200134f0 	.word	0x200134f0

08000d80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC_IRQHandler>
	...

08000d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <HAL_Init+0x40>)
 8000d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <HAL_Init+0x40>)
 8000d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <HAL_Init+0x40>)
 8000da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dac:	2003      	movs	r0, #3
 8000dae:	f000 f8d8 	bl	8000f62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f7ff ff0e 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db8:	f7ff fe9c 	bl	8000af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023c00 	.word	0x40023c00

08000dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x20>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x24>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <HAL_IncTick+0x24>)
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000008 	.word	0x20000008
 8000dec:	200000cc 	.word	0x200000cc

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <HAL_GetTick+0x14>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	200000cc 	.word	0x200000cc

08000e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e24:	4013      	ands	r3, r2
 8000e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3a:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	60d3      	str	r3, [r2, #12]
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <__NVIC_GetPriorityGrouping+0x18>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	f003 0307 	and.w	r3, r3, #7
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	db0b      	blt.n	8000e96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	f003 021f 	and.w	r2, r3, #31
 8000e84:	4907      	ldr	r1, [pc, #28]	; (8000ea4 <__NVIC_EnableIRQ+0x38>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	095b      	lsrs	r3, r3, #5
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000e100 	.word	0xe000e100

08000ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	db0a      	blt.n	8000ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	490c      	ldr	r1, [pc, #48]	; (8000ef4 <__NVIC_SetPriority+0x4c>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	0112      	lsls	r2, r2, #4
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	440b      	add	r3, r1
 8000ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed0:	e00a      	b.n	8000ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4908      	ldr	r1, [pc, #32]	; (8000ef8 <__NVIC_SetPriority+0x50>)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	3b04      	subs	r3, #4
 8000ee0:	0112      	lsls	r2, r2, #4
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	761a      	strb	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	; 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f1c3 0307 	rsb	r3, r3, #7
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	bf28      	it	cs
 8000f1a:	2304      	movcs	r3, #4
 8000f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3304      	adds	r3, #4
 8000f22:	2b06      	cmp	r3, #6
 8000f24:	d902      	bls.n	8000f2c <NVIC_EncodePriority+0x30>
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3b03      	subs	r3, #3
 8000f2a:	e000      	b.n	8000f2e <NVIC_EncodePriority+0x32>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	f04f 32ff 	mov.w	r2, #4294967295
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f44:	f04f 31ff 	mov.w	r1, #4294967295
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	43d9      	mvns	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	4313      	orrs	r3, r2
         );
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3724      	adds	r7, #36	; 0x24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ff4c 	bl	8000e08 <__NVIC_SetPriorityGrouping>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
 8000f84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8a:	f7ff ff61 	bl	8000e50 <__NVIC_GetPriorityGrouping>
 8000f8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	68b9      	ldr	r1, [r7, #8]
 8000f94:	6978      	ldr	r0, [r7, #20]
 8000f96:	f7ff ffb1 	bl	8000efc <NVIC_EncodePriority>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff80 	bl	8000ea8 <__NVIC_SetPriority>
}
 8000fa8:	bf00      	nop
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ff54 	bl	8000e6c <__NVIC_EnableIRQ>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
 8000fe6:	e16b      	b.n	80012c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	429a      	cmp	r2, r3
 8001002:	f040 815a 	bne.w	80012ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b01      	cmp	r3, #1
 8001010:	d005      	beq.n	800101e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101a:	2b02      	cmp	r3, #2
 800101c:	d130      	bne.n	8001080 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	68da      	ldr	r2, [r3, #12]
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001054:	2201      	movs	r2, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	091b      	lsrs	r3, r3, #4
 800106a:	f003 0201 	and.w	r2, r3, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b03      	cmp	r3, #3
 800108a:	d017      	beq.n	80010bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d123      	bne.n	8001110 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	08da      	lsrs	r2, r3, #3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3208      	adds	r2, #8
 80010d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	220f      	movs	r2, #15
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	691a      	ldr	r2, [r3, #16]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	69b9      	ldr	r1, [r7, #24]
 800110c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0203 	and.w	r2, r3, #3
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 80b4 	beq.w	80012ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b60      	ldr	r3, [pc, #384]	; (80012d8 <HAL_GPIO_Init+0x30c>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a5f      	ldr	r2, [pc, #380]	; (80012d8 <HAL_GPIO_Init+0x30c>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b5d      	ldr	r3, [pc, #372]	; (80012d8 <HAL_GPIO_Init+0x30c>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800116e:	4a5b      	ldr	r2, [pc, #364]	; (80012dc <HAL_GPIO_Init+0x310>)
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3302      	adds	r3, #2
 8001176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a52      	ldr	r2, [pc, #328]	; (80012e0 <HAL_GPIO_Init+0x314>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d02b      	beq.n	80011f2 <HAL_GPIO_Init+0x226>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a51      	ldr	r2, [pc, #324]	; (80012e4 <HAL_GPIO_Init+0x318>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d025      	beq.n	80011ee <HAL_GPIO_Init+0x222>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a50      	ldr	r2, [pc, #320]	; (80012e8 <HAL_GPIO_Init+0x31c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d01f      	beq.n	80011ea <HAL_GPIO_Init+0x21e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4f      	ldr	r2, [pc, #316]	; (80012ec <HAL_GPIO_Init+0x320>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d019      	beq.n	80011e6 <HAL_GPIO_Init+0x21a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4e      	ldr	r2, [pc, #312]	; (80012f0 <HAL_GPIO_Init+0x324>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d013      	beq.n	80011e2 <HAL_GPIO_Init+0x216>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4d      	ldr	r2, [pc, #308]	; (80012f4 <HAL_GPIO_Init+0x328>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d00d      	beq.n	80011de <HAL_GPIO_Init+0x212>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4c      	ldr	r2, [pc, #304]	; (80012f8 <HAL_GPIO_Init+0x32c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d007      	beq.n	80011da <HAL_GPIO_Init+0x20e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4b      	ldr	r2, [pc, #300]	; (80012fc <HAL_GPIO_Init+0x330>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d101      	bne.n	80011d6 <HAL_GPIO_Init+0x20a>
 80011d2:	2307      	movs	r3, #7
 80011d4:	e00e      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011d6:	2308      	movs	r3, #8
 80011d8:	e00c      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011da:	2306      	movs	r3, #6
 80011dc:	e00a      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011de:	2305      	movs	r3, #5
 80011e0:	e008      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011e2:	2304      	movs	r3, #4
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011e6:	2303      	movs	r3, #3
 80011e8:	e004      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011f2:	2300      	movs	r3, #0
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	f002 0203 	and.w	r2, r2, #3
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4093      	lsls	r3, r2
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001204:	4935      	ldr	r1, [pc, #212]	; (80012dc <HAL_GPIO_Init+0x310>)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001212:	4b3b      	ldr	r3, [pc, #236]	; (8001300 <HAL_GPIO_Init+0x334>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001236:	4a32      	ldr	r2, [pc, #200]	; (8001300 <HAL_GPIO_Init+0x334>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800123c:	4b30      	ldr	r3, [pc, #192]	; (8001300 <HAL_GPIO_Init+0x334>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001260:	4a27      	ldr	r2, [pc, #156]	; (8001300 <HAL_GPIO_Init+0x334>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <HAL_GPIO_Init+0x334>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800128a:	4a1d      	ldr	r2, [pc, #116]	; (8001300 <HAL_GPIO_Init+0x334>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_GPIO_Init+0x334>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b4:	4a12      	ldr	r2, [pc, #72]	; (8001300 <HAL_GPIO_Init+0x334>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3301      	adds	r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	2b0f      	cmp	r3, #15
 80012c4:	f67f ae90 	bls.w	8000fe8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40013800 	.word	0x40013800
 80012e0:	40020000 	.word	0x40020000
 80012e4:	40020400 	.word	0x40020400
 80012e8:	40020800 	.word	0x40020800
 80012ec:	40020c00 	.word	0x40020c00
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40021400 	.word	0x40021400
 80012f8:	40021800 	.word	0x40021800
 80012fc:	40021c00 	.word	0x40021c00
 8001300:	40013c00 	.word	0x40013c00

08001304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
 8001310:	4613      	mov	r3, r2
 8001312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001314:	787b      	ldrb	r3, [r7, #1]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800131a:	887a      	ldrh	r2, [r7, #2]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001320:	e003      	b.n	800132a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001322:	887b      	ldrh	r3, [r7, #2]
 8001324:	041a      	lsls	r2, r3, #16
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	619a      	str	r2, [r3, #24]
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e267      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d075      	beq.n	8001442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001356:	4b88      	ldr	r3, [pc, #544]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	2b04      	cmp	r3, #4
 8001360:	d00c      	beq.n	800137c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001362:	4b85      	ldr	r3, [pc, #532]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800136a:	2b08      	cmp	r3, #8
 800136c:	d112      	bne.n	8001394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800136e:	4b82      	ldr	r3, [pc, #520]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800137a:	d10b      	bne.n	8001394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137c:	4b7e      	ldr	r3, [pc, #504]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d05b      	beq.n	8001440 <HAL_RCC_OscConfig+0x108>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d157      	bne.n	8001440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e242      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800139c:	d106      	bne.n	80013ac <HAL_RCC_OscConfig+0x74>
 800139e:	4b76      	ldr	r3, [pc, #472]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a75      	ldr	r2, [pc, #468]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 80013a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	e01d      	b.n	80013e8 <HAL_RCC_OscConfig+0xb0>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013b4:	d10c      	bne.n	80013d0 <HAL_RCC_OscConfig+0x98>
 80013b6:	4b70      	ldr	r3, [pc, #448]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a6f      	ldr	r2, [pc, #444]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 80013bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	4b6d      	ldr	r3, [pc, #436]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a6c      	ldr	r2, [pc, #432]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 80013c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	e00b      	b.n	80013e8 <HAL_RCC_OscConfig+0xb0>
 80013d0:	4b69      	ldr	r3, [pc, #420]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a68      	ldr	r2, [pc, #416]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 80013d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	4b66      	ldr	r3, [pc, #408]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a65      	ldr	r2, [pc, #404]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 80013e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d013      	beq.n	8001418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fcfe 	bl	8000df0 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f8:	f7ff fcfa 	bl	8000df0 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b64      	cmp	r3, #100	; 0x64
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e207      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140a:	4b5b      	ldr	r3, [pc, #364]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0f0      	beq.n	80013f8 <HAL_RCC_OscConfig+0xc0>
 8001416:	e014      	b.n	8001442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fcea 	bl	8000df0 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001420:	f7ff fce6 	bl	8000df0 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b64      	cmp	r3, #100	; 0x64
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e1f3      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001432:	4b51      	ldr	r3, [pc, #324]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0xe8>
 800143e:	e000      	b.n	8001442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d063      	beq.n	8001516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800144e:	4b4a      	ldr	r3, [pc, #296]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00b      	beq.n	8001472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800145a:	4b47      	ldr	r3, [pc, #284]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001462:	2b08      	cmp	r3, #8
 8001464:	d11c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001466:	4b44      	ldr	r3, [pc, #272]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d116      	bne.n	80014a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001472:	4b41      	ldr	r3, [pc, #260]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d005      	beq.n	800148a <HAL_RCC_OscConfig+0x152>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d001      	beq.n	800148a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e1c7      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148a:	4b3b      	ldr	r3, [pc, #236]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	4937      	ldr	r1, [pc, #220]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 800149a:	4313      	orrs	r3, r2
 800149c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149e:	e03a      	b.n	8001516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d020      	beq.n	80014ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a8:	4b34      	ldr	r3, [pc, #208]	; (800157c <HAL_RCC_OscConfig+0x244>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ae:	f7ff fc9f 	bl	8000df0 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b6:	f7ff fc9b 	bl	8000df0 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e1a8      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c8:	4b2b      	ldr	r3, [pc, #172]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d4:	4b28      	ldr	r3, [pc, #160]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	4925      	ldr	r1, [pc, #148]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	600b      	str	r3, [r1, #0]
 80014e8:	e015      	b.n	8001516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ea:	4b24      	ldr	r3, [pc, #144]	; (800157c <HAL_RCC_OscConfig+0x244>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f0:	f7ff fc7e 	bl	8000df0 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f8:	f7ff fc7a 	bl	8000df0 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e187      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b00      	cmp	r3, #0
 8001520:	d036      	beq.n	8001590 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d016      	beq.n	8001558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_RCC_OscConfig+0x248>)
 800152c:	2201      	movs	r2, #1
 800152e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001530:	f7ff fc5e 	bl	8000df0 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001538:	f7ff fc5a 	bl	8000df0 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e167      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_RCC_OscConfig+0x240>)
 800154c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0x200>
 8001556:	e01b      	b.n	8001590 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_RCC_OscConfig+0x248>)
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155e:	f7ff fc47 	bl	8000df0 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001564:	e00e      	b.n	8001584 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001566:	f7ff fc43 	bl	8000df0 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d907      	bls.n	8001584 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e150      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
 8001578:	40023800 	.word	0x40023800
 800157c:	42470000 	.word	0x42470000
 8001580:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001584:	4b88      	ldr	r3, [pc, #544]	; (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1ea      	bne.n	8001566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 8097 	beq.w	80016cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a2:	4b81      	ldr	r3, [pc, #516]	; (80017a8 <HAL_RCC_OscConfig+0x470>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10f      	bne.n	80015ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	4b7d      	ldr	r3, [pc, #500]	; (80017a8 <HAL_RCC_OscConfig+0x470>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	4a7c      	ldr	r2, [pc, #496]	; (80017a8 <HAL_RCC_OscConfig+0x470>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	6413      	str	r3, [r2, #64]	; 0x40
 80015be:	4b7a      	ldr	r3, [pc, #488]	; (80017a8 <HAL_RCC_OscConfig+0x470>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ca:	2301      	movs	r3, #1
 80015cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ce:	4b77      	ldr	r3, [pc, #476]	; (80017ac <HAL_RCC_OscConfig+0x474>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d118      	bne.n	800160c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015da:	4b74      	ldr	r3, [pc, #464]	; (80017ac <HAL_RCC_OscConfig+0x474>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a73      	ldr	r2, [pc, #460]	; (80017ac <HAL_RCC_OscConfig+0x474>)
 80015e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e6:	f7ff fc03 	bl	8000df0 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ee:	f7ff fbff 	bl	8000df0 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e10c      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001600:	4b6a      	ldr	r3, [pc, #424]	; (80017ac <HAL_RCC_OscConfig+0x474>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d106      	bne.n	8001622 <HAL_RCC_OscConfig+0x2ea>
 8001614:	4b64      	ldr	r3, [pc, #400]	; (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001618:	4a63      	ldr	r2, [pc, #396]	; (80017a8 <HAL_RCC_OscConfig+0x470>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6713      	str	r3, [r2, #112]	; 0x70
 8001620:	e01c      	b.n	800165c <HAL_RCC_OscConfig+0x324>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b05      	cmp	r3, #5
 8001628:	d10c      	bne.n	8001644 <HAL_RCC_OscConfig+0x30c>
 800162a:	4b5f      	ldr	r3, [pc, #380]	; (80017a8 <HAL_RCC_OscConfig+0x470>)
 800162c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162e:	4a5e      	ldr	r2, [pc, #376]	; (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	6713      	str	r3, [r2, #112]	; 0x70
 8001636:	4b5c      	ldr	r3, [pc, #368]	; (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163a:	4a5b      	ldr	r2, [pc, #364]	; (80017a8 <HAL_RCC_OscConfig+0x470>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6713      	str	r3, [r2, #112]	; 0x70
 8001642:	e00b      	b.n	800165c <HAL_RCC_OscConfig+0x324>
 8001644:	4b58      	ldr	r3, [pc, #352]	; (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001648:	4a57      	ldr	r2, [pc, #348]	; (80017a8 <HAL_RCC_OscConfig+0x470>)
 800164a:	f023 0301 	bic.w	r3, r3, #1
 800164e:	6713      	str	r3, [r2, #112]	; 0x70
 8001650:	4b55      	ldr	r3, [pc, #340]	; (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001654:	4a54      	ldr	r2, [pc, #336]	; (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001656:	f023 0304 	bic.w	r3, r3, #4
 800165a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d015      	beq.n	8001690 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001664:	f7ff fbc4 	bl	8000df0 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800166a:	e00a      	b.n	8001682 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800166c:	f7ff fbc0 	bl	8000df0 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f241 3288 	movw	r2, #5000	; 0x1388
 800167a:	4293      	cmp	r3, r2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e0cb      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001682:	4b49      	ldr	r3, [pc, #292]	; (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0ee      	beq.n	800166c <HAL_RCC_OscConfig+0x334>
 800168e:	e014      	b.n	80016ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001690:	f7ff fbae 	bl	8000df0 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001696:	e00a      	b.n	80016ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001698:	f7ff fbaa 	bl	8000df0 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e0b5      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ae:	4b3e      	ldr	r3, [pc, #248]	; (80017a8 <HAL_RCC_OscConfig+0x470>)
 80016b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1ee      	bne.n	8001698 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016ba:	7dfb      	ldrb	r3, [r7, #23]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d105      	bne.n	80016cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c0:	4b39      	ldr	r3, [pc, #228]	; (80017a8 <HAL_RCC_OscConfig+0x470>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	4a38      	ldr	r2, [pc, #224]	; (80017a8 <HAL_RCC_OscConfig+0x470>)
 80016c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 80a1 	beq.w	8001818 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016d6:	4b34      	ldr	r3, [pc, #208]	; (80017a8 <HAL_RCC_OscConfig+0x470>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d05c      	beq.n	800179c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d141      	bne.n	800176e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ea:	4b31      	ldr	r3, [pc, #196]	; (80017b0 <HAL_RCC_OscConfig+0x478>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7ff fb7e 	bl	8000df0 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f8:	f7ff fb7a 	bl	8000df0 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e087      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170a:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <HAL_RCC_OscConfig+0x470>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69da      	ldr	r2, [r3, #28]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	019b      	lsls	r3, r3, #6
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172c:	085b      	lsrs	r3, r3, #1
 800172e:	3b01      	subs	r3, #1
 8001730:	041b      	lsls	r3, r3, #16
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	061b      	lsls	r3, r3, #24
 800173a:	491b      	ldr	r1, [pc, #108]	; (80017a8 <HAL_RCC_OscConfig+0x470>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001740:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <HAL_RCC_OscConfig+0x478>)
 8001742:	2201      	movs	r2, #1
 8001744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001746:	f7ff fb53 	bl	8000df0 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174e:	f7ff fb4f 	bl	8000df0 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e05c      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0x416>
 800176c:	e054      	b.n	8001818 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <HAL_RCC_OscConfig+0x478>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff fb3c 	bl	8000df0 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177c:	f7ff fb38 	bl	8000df0 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e045      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x444>
 800179a:	e03d      	b.n	8001818 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d107      	bne.n	80017b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e038      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40007000 	.word	0x40007000
 80017b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <HAL_RCC_OscConfig+0x4ec>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d028      	beq.n	8001814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d121      	bne.n	8001814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017da:	429a      	cmp	r2, r3
 80017dc:	d11a      	bne.n	8001814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017e4:	4013      	ands	r3, r2
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d111      	bne.n	8001814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fa:	085b      	lsrs	r3, r3, #1
 80017fc:	3b01      	subs	r3, #1
 80017fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001800:	429a      	cmp	r2, r3
 8001802:	d107      	bne.n	8001814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800

08001828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0cc      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800183c:	4b68      	ldr	r3, [pc, #416]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d90c      	bls.n	8001864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184a:	4b65      	ldr	r3, [pc, #404]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001852:	4b63      	ldr	r3, [pc, #396]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0b8      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d020      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800187c:	4b59      	ldr	r3, [pc, #356]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	4a58      	ldr	r2, [pc, #352]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001886:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001894:	4b53      	ldr	r3, [pc, #332]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	4a52      	ldr	r2, [pc, #328]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800189e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a0:	4b50      	ldr	r3, [pc, #320]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	494d      	ldr	r1, [pc, #308]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d044      	beq.n	8001948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d107      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c6:	4b47      	ldr	r3, [pc, #284]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d119      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e07f      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d003      	beq.n	80018e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e6:	4b3f      	ldr	r3, [pc, #252]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d109      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e06f      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f6:	4b3b      	ldr	r3, [pc, #236]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e067      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001906:	4b37      	ldr	r3, [pc, #220]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f023 0203 	bic.w	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4934      	ldr	r1, [pc, #208]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001914:	4313      	orrs	r3, r2
 8001916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001918:	f7ff fa6a 	bl	8000df0 <HAL_GetTick>
 800191c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191e:	e00a      	b.n	8001936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001920:	f7ff fa66 	bl	8000df0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f241 3288 	movw	r2, #5000	; 0x1388
 800192e:	4293      	cmp	r3, r2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e04f      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001936:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 020c 	and.w	r2, r3, #12
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	429a      	cmp	r2, r3
 8001946:	d1eb      	bne.n	8001920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001948:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d20c      	bcs.n	8001970 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001956:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e032      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d008      	beq.n	800198e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800197c:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4916      	ldr	r1, [pc, #88]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	4313      	orrs	r3, r2
 800198c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d009      	beq.n	80019ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	490e      	ldr	r1, [pc, #56]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ae:	f000 f821 	bl	80019f4 <HAL_RCC_GetSysClockFreq>
 80019b2:	4602      	mov	r2, r0
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	091b      	lsrs	r3, r3, #4
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	490a      	ldr	r1, [pc, #40]	; (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 80019c0:	5ccb      	ldrb	r3, [r1, r3]
 80019c2:	fa22 f303 	lsr.w	r3, r2, r3
 80019c6:	4a09      	ldr	r2, [pc, #36]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80019c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff f900 	bl	8000bd4 <HAL_InitTick>

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023c00 	.word	0x40023c00
 80019e4:	40023800 	.word	0x40023800
 80019e8:	08006fd8 	.word	0x08006fd8
 80019ec:	20000000 	.word	0x20000000
 80019f0:	20000004 	.word	0x20000004

080019f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019f8:	b094      	sub	sp, #80	; 0x50
 80019fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	647b      	str	r3, [r7, #68]	; 0x44
 8001a00:	2300      	movs	r3, #0
 8001a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a04:	2300      	movs	r3, #0
 8001a06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a0c:	4b79      	ldr	r3, [pc, #484]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d00d      	beq.n	8001a34 <HAL_RCC_GetSysClockFreq+0x40>
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	f200 80e1 	bhi.w	8001be0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <HAL_RCC_GetSysClockFreq+0x34>
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d003      	beq.n	8001a2e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a26:	e0db      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a28:	4b73      	ldr	r3, [pc, #460]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a2c:	e0db      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a2e:	4b73      	ldr	r3, [pc, #460]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x208>)
 8001a30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a32:	e0d8      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a34:	4b6f      	ldr	r3, [pc, #444]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a3e:	4b6d      	ldr	r3, [pc, #436]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d063      	beq.n	8001b12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4a:	4b6a      	ldr	r3, [pc, #424]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	099b      	lsrs	r3, r3, #6
 8001a50:	2200      	movs	r2, #0
 8001a52:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a5e:	2300      	movs	r3, #0
 8001a60:	637b      	str	r3, [r7, #52]	; 0x34
 8001a62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a66:	4622      	mov	r2, r4
 8001a68:	462b      	mov	r3, r5
 8001a6a:	f04f 0000 	mov.w	r0, #0
 8001a6e:	f04f 0100 	mov.w	r1, #0
 8001a72:	0159      	lsls	r1, r3, #5
 8001a74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a78:	0150      	lsls	r0, r2, #5
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4621      	mov	r1, r4
 8001a80:	1a51      	subs	r1, r2, r1
 8001a82:	6139      	str	r1, [r7, #16]
 8001a84:	4629      	mov	r1, r5
 8001a86:	eb63 0301 	sbc.w	r3, r3, r1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a98:	4659      	mov	r1, fp
 8001a9a:	018b      	lsls	r3, r1, #6
 8001a9c:	4651      	mov	r1, sl
 8001a9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aa2:	4651      	mov	r1, sl
 8001aa4:	018a      	lsls	r2, r1, #6
 8001aa6:	4651      	mov	r1, sl
 8001aa8:	ebb2 0801 	subs.w	r8, r2, r1
 8001aac:	4659      	mov	r1, fp
 8001aae:	eb63 0901 	sbc.w	r9, r3, r1
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ac6:	4690      	mov	r8, r2
 8001ac8:	4699      	mov	r9, r3
 8001aca:	4623      	mov	r3, r4
 8001acc:	eb18 0303 	adds.w	r3, r8, r3
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	462b      	mov	r3, r5
 8001ad4:	eb49 0303 	adc.w	r3, r9, r3
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ae6:	4629      	mov	r1, r5
 8001ae8:	024b      	lsls	r3, r1, #9
 8001aea:	4621      	mov	r1, r4
 8001aec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001af0:	4621      	mov	r1, r4
 8001af2:	024a      	lsls	r2, r1, #9
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001afa:	2200      	movs	r2, #0
 8001afc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001afe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b04:	f7fe fbb6 	bl	8000274 <__aeabi_uldivmod>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b10:	e058      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b12:	4b38      	ldr	r3, [pc, #224]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	099b      	lsrs	r3, r3, #6
 8001b18:	2200      	movs	r2, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b22:	623b      	str	r3, [r7, #32]
 8001b24:	2300      	movs	r3, #0
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
 8001b28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b2c:	4642      	mov	r2, r8
 8001b2e:	464b      	mov	r3, r9
 8001b30:	f04f 0000 	mov.w	r0, #0
 8001b34:	f04f 0100 	mov.w	r1, #0
 8001b38:	0159      	lsls	r1, r3, #5
 8001b3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b3e:	0150      	lsls	r0, r2, #5
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4641      	mov	r1, r8
 8001b46:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b4a:	4649      	mov	r1, r9
 8001b4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b64:	ebb2 040a 	subs.w	r4, r2, sl
 8001b68:	eb63 050b 	sbc.w	r5, r3, fp
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	f04f 0300 	mov.w	r3, #0
 8001b74:	00eb      	lsls	r3, r5, #3
 8001b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b7a:	00e2      	lsls	r2, r4, #3
 8001b7c:	4614      	mov	r4, r2
 8001b7e:	461d      	mov	r5, r3
 8001b80:	4643      	mov	r3, r8
 8001b82:	18e3      	adds	r3, r4, r3
 8001b84:	603b      	str	r3, [r7, #0]
 8001b86:	464b      	mov	r3, r9
 8001b88:	eb45 0303 	adc.w	r3, r5, r3
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b9a:	4629      	mov	r1, r5
 8001b9c:	028b      	lsls	r3, r1, #10
 8001b9e:	4621      	mov	r1, r4
 8001ba0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ba4:	4621      	mov	r1, r4
 8001ba6:	028a      	lsls	r2, r1, #10
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61bb      	str	r3, [r7, #24]
 8001bb2:	61fa      	str	r2, [r7, #28]
 8001bb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bb8:	f7fe fb5c 	bl	8000274 <__aeabi_uldivmod>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	0c1b      	lsrs	r3, r3, #16
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001bd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bde:	e002      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001be2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3750      	adds	r7, #80	; 0x50
 8001bec:	46bd      	mov	sp, r7
 8001bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	00f42400 	.word	0x00f42400
 8001bfc:	007a1200 	.word	0x007a1200

08001c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c04:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000000 	.word	0x20000000

08001c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c1c:	f7ff fff0 	bl	8001c00 <HAL_RCC_GetHCLKFreq>
 8001c20:	4602      	mov	r2, r0
 8001c22:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	0a9b      	lsrs	r3, r3, #10
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	4903      	ldr	r1, [pc, #12]	; (8001c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c2e:	5ccb      	ldrb	r3, [r1, r3]
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	08006fe8 	.word	0x08006fe8

08001c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c44:	f7ff ffdc 	bl	8001c00 <HAL_RCC_GetHCLKFreq>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	0b5b      	lsrs	r3, r3, #13
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	4903      	ldr	r1, [pc, #12]	; (8001c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c56:	5ccb      	ldrb	r3, [r1, r3]
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800
 8001c64:	08006fe8 	.word	0x08006fe8

08001c68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	220f      	movs	r2, #15
 8001c76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 0203 	and.w	r2, r3, #3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	08db      	lsrs	r3, r3, #3
 8001ca2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001caa:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <HAL_RCC_GetClockConfig+0x60>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0207 	and.w	r2, r3, #7
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	601a      	str	r2, [r3, #0]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40023c00 	.word	0x40023c00

08001ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e041      	b.n	8001d62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d106      	bne.n	8001cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f839 	bl	8001d6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3304      	adds	r3, #4
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	f000 f9c0 	bl	8002090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
	...

08001d80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d001      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e04e      	b.n	8001e36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a23      	ldr	r2, [pc, #140]	; (8001e44 <HAL_TIM_Base_Start_IT+0xc4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d022      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc2:	d01d      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a1f      	ldr	r2, [pc, #124]	; (8001e48 <HAL_TIM_Base_Start_IT+0xc8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d018      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1e      	ldr	r2, [pc, #120]	; (8001e4c <HAL_TIM_Base_Start_IT+0xcc>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d013      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00e      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <HAL_TIM_Base_Start_IT+0xd4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d009      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a19      	ldr	r2, [pc, #100]	; (8001e58 <HAL_TIM_Base_Start_IT+0xd8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d004      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a18      	ldr	r2, [pc, #96]	; (8001e5c <HAL_TIM_Base_Start_IT+0xdc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d111      	bne.n	8001e24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d010      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0201 	orr.w	r2, r2, #1
 8001e20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e22:	e007      	b.n	8001e34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40010000 	.word	0x40010000
 8001e48:	40000400 	.word	0x40000400
 8001e4c:	40000800 	.word	0x40000800
 8001e50:	40000c00 	.word	0x40000c00
 8001e54:	40010400 	.word	0x40010400
 8001e58:	40014000 	.word	0x40014000
 8001e5c:	40001800 	.word	0x40001800

08001e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d020      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d01b      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0202 	mvn.w	r2, #2
 8001e94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f8d2 	bl	8002054 <HAL_TIM_IC_CaptureCallback>
 8001eb0:	e005      	b.n	8001ebe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f8c4 	bl	8002040 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f8d5 	bl	8002068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d020      	beq.n	8001f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d01b      	beq.n	8001f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0204 	mvn.w	r2, #4
 8001ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f8ac 	bl	8002054 <HAL_TIM_IC_CaptureCallback>
 8001efc:	e005      	b.n	8001f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f89e 	bl	8002040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f8af 	bl	8002068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d020      	beq.n	8001f5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01b      	beq.n	8001f5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0208 	mvn.w	r2, #8
 8001f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2204      	movs	r2, #4
 8001f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f886 	bl	8002054 <HAL_TIM_IC_CaptureCallback>
 8001f48:	e005      	b.n	8001f56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f878 	bl	8002040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f889 	bl	8002068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f003 0310 	and.w	r3, r3, #16
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d020      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f003 0310 	and.w	r3, r3, #16
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d01b      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0210 	mvn.w	r2, #16
 8001f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2208      	movs	r2, #8
 8001f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f860 	bl	8002054 <HAL_TIM_IC_CaptureCallback>
 8001f94:	e005      	b.n	8001fa2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f852 	bl	8002040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f863 	bl	8002068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00c      	beq.n	8001fcc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d007      	beq.n	8001fcc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0201 	mvn.w	r2, #1
 8001fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7fe fd7c 	bl	8000ac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00c      	beq.n	8001ff0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d007      	beq.n	8001ff0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f906 	bl	80021fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00c      	beq.n	8002014 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002000:	2b00      	cmp	r3, #0
 8002002:	d007      	beq.n	8002014 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800200c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f834 	bl	800207c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00c      	beq.n	8002038 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f003 0320 	and.w	r3, r3, #32
 8002024:	2b00      	cmp	r3, #0
 8002026:	d007      	beq.n	8002038 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0220 	mvn.w	r2, #32
 8002030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f8d8 	bl	80021e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002038:	bf00      	nop
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a46      	ldr	r2, [pc, #280]	; (80021bc <TIM_Base_SetConfig+0x12c>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d013      	beq.n	80020d0 <TIM_Base_SetConfig+0x40>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ae:	d00f      	beq.n	80020d0 <TIM_Base_SetConfig+0x40>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a43      	ldr	r2, [pc, #268]	; (80021c0 <TIM_Base_SetConfig+0x130>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d00b      	beq.n	80020d0 <TIM_Base_SetConfig+0x40>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a42      	ldr	r2, [pc, #264]	; (80021c4 <TIM_Base_SetConfig+0x134>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d007      	beq.n	80020d0 <TIM_Base_SetConfig+0x40>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a41      	ldr	r2, [pc, #260]	; (80021c8 <TIM_Base_SetConfig+0x138>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d003      	beq.n	80020d0 <TIM_Base_SetConfig+0x40>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a40      	ldr	r2, [pc, #256]	; (80021cc <TIM_Base_SetConfig+0x13c>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d108      	bne.n	80020e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4313      	orrs	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a35      	ldr	r2, [pc, #212]	; (80021bc <TIM_Base_SetConfig+0x12c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d02b      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f0:	d027      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a32      	ldr	r2, [pc, #200]	; (80021c0 <TIM_Base_SetConfig+0x130>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d023      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a31      	ldr	r2, [pc, #196]	; (80021c4 <TIM_Base_SetConfig+0x134>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d01f      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a30      	ldr	r2, [pc, #192]	; (80021c8 <TIM_Base_SetConfig+0x138>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d01b      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a2f      	ldr	r2, [pc, #188]	; (80021cc <TIM_Base_SetConfig+0x13c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d017      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a2e      	ldr	r2, [pc, #184]	; (80021d0 <TIM_Base_SetConfig+0x140>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d013      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a2d      	ldr	r2, [pc, #180]	; (80021d4 <TIM_Base_SetConfig+0x144>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00f      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a2c      	ldr	r2, [pc, #176]	; (80021d8 <TIM_Base_SetConfig+0x148>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00b      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a2b      	ldr	r2, [pc, #172]	; (80021dc <TIM_Base_SetConfig+0x14c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d007      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a2a      	ldr	r2, [pc, #168]	; (80021e0 <TIM_Base_SetConfig+0x150>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d003      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a29      	ldr	r2, [pc, #164]	; (80021e4 <TIM_Base_SetConfig+0x154>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d108      	bne.n	8002154 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4313      	orrs	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	4313      	orrs	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a10      	ldr	r2, [pc, #64]	; (80021bc <TIM_Base_SetConfig+0x12c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d003      	beq.n	8002188 <TIM_Base_SetConfig+0xf8>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a12      	ldr	r2, [pc, #72]	; (80021cc <TIM_Base_SetConfig+0x13c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d103      	bne.n	8002190 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d105      	bne.n	80021ae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f023 0201 	bic.w	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	611a      	str	r2, [r3, #16]
  }
}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40010000 	.word	0x40010000
 80021c0:	40000400 	.word	0x40000400
 80021c4:	40000800 	.word	0x40000800
 80021c8:	40000c00 	.word	0x40000c00
 80021cc:	40010400 	.word	0x40010400
 80021d0:	40014000 	.word	0x40014000
 80021d4:	40014400 	.word	0x40014400
 80021d8:	40014800 	.word	0x40014800
 80021dc:	40001800 	.word	0x40001800
 80021e0:	40001c00 	.word	0x40001c00
 80021e4:	40002000 	.word	0x40002000

080021e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e042      	b.n	80022a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d106      	bne.n	800223c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7fe fc84 	bl	8000b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2224      	movs	r2, #36	; 0x24
 8002240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002252:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f973 	bl	8002540 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002268:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695a      	ldr	r2, [r3, #20]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002278:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002288:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2220      	movs	r2, #32
 8002294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2220      	movs	r2, #32
 800229c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	; 0x28
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	603b      	str	r3, [r7, #0]
 80022bc:	4613      	mov	r3, r2
 80022be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b20      	cmp	r3, #32
 80022ce:	d175      	bne.n	80023bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <HAL_UART_Transmit+0x2c>
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e06e      	b.n	80023be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2221      	movs	r2, #33	; 0x21
 80022ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022ee:	f7fe fd7f 	bl	8000df0 <HAL_GetTick>
 80022f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	88fa      	ldrh	r2, [r7, #6]
 80022f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	88fa      	ldrh	r2, [r7, #6]
 80022fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002308:	d108      	bne.n	800231c <HAL_UART_Transmit+0x6c>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d104      	bne.n	800231c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	e003      	b.n	8002324 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002320:	2300      	movs	r3, #0
 8002322:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002324:	e02e      	b.n	8002384 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2200      	movs	r2, #0
 800232e:	2180      	movs	r1, #128	; 0x80
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 f848 	bl	80023c6 <UART_WaitOnFlagUntilTimeout>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e03a      	b.n	80023be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10b      	bne.n	8002366 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800235c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	3302      	adds	r3, #2
 8002362:	61bb      	str	r3, [r7, #24]
 8002364:	e007      	b.n	8002376 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	781a      	ldrb	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	3301      	adds	r3, #1
 8002374:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800237a:	b29b      	uxth	r3, r3
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002388:	b29b      	uxth	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1cb      	bne.n	8002326 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2200      	movs	r2, #0
 8002396:	2140      	movs	r1, #64	; 0x40
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 f814 	bl	80023c6 <UART_WaitOnFlagUntilTimeout>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e006      	b.n	80023be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	e000      	b.n	80023be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80023bc:	2302      	movs	r3, #2
  }
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3720      	adds	r7, #32
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b086      	sub	sp, #24
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	4613      	mov	r3, r2
 80023d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023d6:	e03b      	b.n	8002450 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023de:	d037      	beq.n	8002450 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e0:	f7fe fd06 	bl	8000df0 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	6a3a      	ldr	r2, [r7, #32]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d302      	bcc.n	80023f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e03a      	b.n	8002470 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d023      	beq.n	8002450 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b80      	cmp	r3, #128	; 0x80
 800240c:	d020      	beq.n	8002450 <UART_WaitOnFlagUntilTimeout+0x8a>
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b40      	cmp	r3, #64	; 0x40
 8002412:	d01d      	beq.n	8002450 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b08      	cmp	r3, #8
 8002420:	d116      	bne.n	8002450 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 f81d 	bl	8002478 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2208      	movs	r2, #8
 8002442:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e00f      	b.n	8002470 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	4013      	ands	r3, r2
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	429a      	cmp	r2, r3
 800245e:	bf0c      	ite	eq
 8002460:	2301      	moveq	r3, #1
 8002462:	2300      	movne	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	429a      	cmp	r2, r3
 800246c:	d0b4      	beq.n	80023d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002478:	b480      	push	{r7}
 800247a:	b095      	sub	sp, #84	; 0x54
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	330c      	adds	r3, #12
 8002486:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248a:	e853 3f00 	ldrex	r3, [r3]
 800248e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002492:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	330c      	adds	r3, #12
 800249e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024a0:	643a      	str	r2, [r7, #64]	; 0x40
 80024a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80024a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024a8:	e841 2300 	strex	r3, r2, [r1]
 80024ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80024ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1e5      	bne.n	8002480 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	3314      	adds	r3, #20
 80024ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	e853 3f00 	ldrex	r3, [r3]
 80024c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f023 0301 	bic.w	r3, r3, #1
 80024ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	3314      	adds	r3, #20
 80024d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024dc:	e841 2300 	strex	r3, r2, [r1]
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1e5      	bne.n	80024b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d119      	bne.n	8002524 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	330c      	adds	r3, #12
 80024f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	e853 3f00 	ldrex	r3, [r3]
 80024fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f023 0310 	bic.w	r3, r3, #16
 8002506:	647b      	str	r3, [r7, #68]	; 0x44
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	330c      	adds	r3, #12
 800250e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002510:	61ba      	str	r2, [r7, #24]
 8002512:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002514:	6979      	ldr	r1, [r7, #20]
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	e841 2300 	strex	r3, r2, [r1]
 800251c:	613b      	str	r3, [r7, #16]
   return(result);
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1e5      	bne.n	80024f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002532:	bf00      	nop
 8002534:	3754      	adds	r7, #84	; 0x54
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002544:	b0c0      	sub	sp, #256	; 0x100
 8002546:	af00      	add	r7, sp, #0
 8002548:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800254c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800255c:	68d9      	ldr	r1, [r3, #12]
 800255e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	ea40 0301 	orr.w	r3, r0, r1
 8002568:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800256a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	431a      	orrs	r2, r3
 8002578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	431a      	orrs	r2, r3
 8002580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800258c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002598:	f021 010c 	bic.w	r1, r1, #12
 800259c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80025a6:	430b      	orrs	r3, r1
 80025a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ba:	6999      	ldr	r1, [r3, #24]
 80025bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	ea40 0301 	orr.w	r3, r0, r1
 80025c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4b8f      	ldr	r3, [pc, #572]	; (800280c <UART_SetConfig+0x2cc>)
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d005      	beq.n	80025e0 <UART_SetConfig+0xa0>
 80025d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	4b8d      	ldr	r3, [pc, #564]	; (8002810 <UART_SetConfig+0x2d0>)
 80025dc:	429a      	cmp	r2, r3
 80025de:	d104      	bne.n	80025ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025e0:	f7ff fb2e 	bl	8001c40 <HAL_RCC_GetPCLK2Freq>
 80025e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80025e8:	e003      	b.n	80025f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025ea:	f7ff fb15 	bl	8001c18 <HAL_RCC_GetPCLK1Freq>
 80025ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025fc:	f040 810c 	bne.w	8002818 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002604:	2200      	movs	r2, #0
 8002606:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800260a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800260e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002612:	4622      	mov	r2, r4
 8002614:	462b      	mov	r3, r5
 8002616:	1891      	adds	r1, r2, r2
 8002618:	65b9      	str	r1, [r7, #88]	; 0x58
 800261a:	415b      	adcs	r3, r3
 800261c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800261e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002622:	4621      	mov	r1, r4
 8002624:	eb12 0801 	adds.w	r8, r2, r1
 8002628:	4629      	mov	r1, r5
 800262a:	eb43 0901 	adc.w	r9, r3, r1
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800263a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800263e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002642:	4690      	mov	r8, r2
 8002644:	4699      	mov	r9, r3
 8002646:	4623      	mov	r3, r4
 8002648:	eb18 0303 	adds.w	r3, r8, r3
 800264c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002650:	462b      	mov	r3, r5
 8002652:	eb49 0303 	adc.w	r3, r9, r3
 8002656:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800265a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002666:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800266a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800266e:	460b      	mov	r3, r1
 8002670:	18db      	adds	r3, r3, r3
 8002672:	653b      	str	r3, [r7, #80]	; 0x50
 8002674:	4613      	mov	r3, r2
 8002676:	eb42 0303 	adc.w	r3, r2, r3
 800267a:	657b      	str	r3, [r7, #84]	; 0x54
 800267c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002680:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002684:	f7fd fdf6 	bl	8000274 <__aeabi_uldivmod>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4b61      	ldr	r3, [pc, #388]	; (8002814 <UART_SetConfig+0x2d4>)
 800268e:	fba3 2302 	umull	r2, r3, r3, r2
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	011c      	lsls	r4, r3, #4
 8002696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800269a:	2200      	movs	r2, #0
 800269c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80026a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80026a8:	4642      	mov	r2, r8
 80026aa:	464b      	mov	r3, r9
 80026ac:	1891      	adds	r1, r2, r2
 80026ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80026b0:	415b      	adcs	r3, r3
 80026b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026b8:	4641      	mov	r1, r8
 80026ba:	eb12 0a01 	adds.w	sl, r2, r1
 80026be:	4649      	mov	r1, r9
 80026c0:	eb43 0b01 	adc.w	fp, r3, r1
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026d8:	4692      	mov	sl, r2
 80026da:	469b      	mov	fp, r3
 80026dc:	4643      	mov	r3, r8
 80026de:	eb1a 0303 	adds.w	r3, sl, r3
 80026e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026e6:	464b      	mov	r3, r9
 80026e8:	eb4b 0303 	adc.w	r3, fp, r3
 80026ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80026f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002700:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002704:	460b      	mov	r3, r1
 8002706:	18db      	adds	r3, r3, r3
 8002708:	643b      	str	r3, [r7, #64]	; 0x40
 800270a:	4613      	mov	r3, r2
 800270c:	eb42 0303 	adc.w	r3, r2, r3
 8002710:	647b      	str	r3, [r7, #68]	; 0x44
 8002712:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002716:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800271a:	f7fd fdab 	bl	8000274 <__aeabi_uldivmod>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4611      	mov	r1, r2
 8002724:	4b3b      	ldr	r3, [pc, #236]	; (8002814 <UART_SetConfig+0x2d4>)
 8002726:	fba3 2301 	umull	r2, r3, r3, r1
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	2264      	movs	r2, #100	; 0x64
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	1acb      	subs	r3, r1, r3
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800273a:	4b36      	ldr	r3, [pc, #216]	; (8002814 <UART_SetConfig+0x2d4>)
 800273c:	fba3 2302 	umull	r2, r3, r3, r2
 8002740:	095b      	lsrs	r3, r3, #5
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002748:	441c      	add	r4, r3
 800274a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800274e:	2200      	movs	r2, #0
 8002750:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002754:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002758:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800275c:	4642      	mov	r2, r8
 800275e:	464b      	mov	r3, r9
 8002760:	1891      	adds	r1, r2, r2
 8002762:	63b9      	str	r1, [r7, #56]	; 0x38
 8002764:	415b      	adcs	r3, r3
 8002766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002768:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800276c:	4641      	mov	r1, r8
 800276e:	1851      	adds	r1, r2, r1
 8002770:	6339      	str	r1, [r7, #48]	; 0x30
 8002772:	4649      	mov	r1, r9
 8002774:	414b      	adcs	r3, r1
 8002776:	637b      	str	r3, [r7, #52]	; 0x34
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002784:	4659      	mov	r1, fp
 8002786:	00cb      	lsls	r3, r1, #3
 8002788:	4651      	mov	r1, sl
 800278a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800278e:	4651      	mov	r1, sl
 8002790:	00ca      	lsls	r2, r1, #3
 8002792:	4610      	mov	r0, r2
 8002794:	4619      	mov	r1, r3
 8002796:	4603      	mov	r3, r0
 8002798:	4642      	mov	r2, r8
 800279a:	189b      	adds	r3, r3, r2
 800279c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027a0:	464b      	mov	r3, r9
 80027a2:	460a      	mov	r2, r1
 80027a4:	eb42 0303 	adc.w	r3, r2, r3
 80027a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80027b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80027bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80027c0:	460b      	mov	r3, r1
 80027c2:	18db      	adds	r3, r3, r3
 80027c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80027c6:	4613      	mov	r3, r2
 80027c8:	eb42 0303 	adc.w	r3, r2, r3
 80027cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80027d6:	f7fd fd4d 	bl	8000274 <__aeabi_uldivmod>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <UART_SetConfig+0x2d4>)
 80027e0:	fba3 1302 	umull	r1, r3, r3, r2
 80027e4:	095b      	lsrs	r3, r3, #5
 80027e6:	2164      	movs	r1, #100	; 0x64
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	3332      	adds	r3, #50	; 0x32
 80027f2:	4a08      	ldr	r2, [pc, #32]	; (8002814 <UART_SetConfig+0x2d4>)
 80027f4:	fba2 2303 	umull	r2, r3, r2, r3
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	f003 0207 	and.w	r2, r3, #7
 80027fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4422      	add	r2, r4
 8002806:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002808:	e106      	b.n	8002a18 <UART_SetConfig+0x4d8>
 800280a:	bf00      	nop
 800280c:	40011000 	.word	0x40011000
 8002810:	40011400 	.word	0x40011400
 8002814:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800281c:	2200      	movs	r2, #0
 800281e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002822:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002826:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800282a:	4642      	mov	r2, r8
 800282c:	464b      	mov	r3, r9
 800282e:	1891      	adds	r1, r2, r2
 8002830:	6239      	str	r1, [r7, #32]
 8002832:	415b      	adcs	r3, r3
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
 8002836:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800283a:	4641      	mov	r1, r8
 800283c:	1854      	adds	r4, r2, r1
 800283e:	4649      	mov	r1, r9
 8002840:	eb43 0501 	adc.w	r5, r3, r1
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	00eb      	lsls	r3, r5, #3
 800284e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002852:	00e2      	lsls	r2, r4, #3
 8002854:	4614      	mov	r4, r2
 8002856:	461d      	mov	r5, r3
 8002858:	4643      	mov	r3, r8
 800285a:	18e3      	adds	r3, r4, r3
 800285c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002860:	464b      	mov	r3, r9
 8002862:	eb45 0303 	adc.w	r3, r5, r3
 8002866:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800286a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002876:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002886:	4629      	mov	r1, r5
 8002888:	008b      	lsls	r3, r1, #2
 800288a:	4621      	mov	r1, r4
 800288c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002890:	4621      	mov	r1, r4
 8002892:	008a      	lsls	r2, r1, #2
 8002894:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002898:	f7fd fcec 	bl	8000274 <__aeabi_uldivmod>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4b60      	ldr	r3, [pc, #384]	; (8002a24 <UART_SetConfig+0x4e4>)
 80028a2:	fba3 2302 	umull	r2, r3, r3, r2
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	011c      	lsls	r4, r3, #4
 80028aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028ae:	2200      	movs	r2, #0
 80028b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80028bc:	4642      	mov	r2, r8
 80028be:	464b      	mov	r3, r9
 80028c0:	1891      	adds	r1, r2, r2
 80028c2:	61b9      	str	r1, [r7, #24]
 80028c4:	415b      	adcs	r3, r3
 80028c6:	61fb      	str	r3, [r7, #28]
 80028c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028cc:	4641      	mov	r1, r8
 80028ce:	1851      	adds	r1, r2, r1
 80028d0:	6139      	str	r1, [r7, #16]
 80028d2:	4649      	mov	r1, r9
 80028d4:	414b      	adcs	r3, r1
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028e4:	4659      	mov	r1, fp
 80028e6:	00cb      	lsls	r3, r1, #3
 80028e8:	4651      	mov	r1, sl
 80028ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028ee:	4651      	mov	r1, sl
 80028f0:	00ca      	lsls	r2, r1, #3
 80028f2:	4610      	mov	r0, r2
 80028f4:	4619      	mov	r1, r3
 80028f6:	4603      	mov	r3, r0
 80028f8:	4642      	mov	r2, r8
 80028fa:	189b      	adds	r3, r3, r2
 80028fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002900:	464b      	mov	r3, r9
 8002902:	460a      	mov	r2, r1
 8002904:	eb42 0303 	adc.w	r3, r2, r3
 8002908:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800290c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	67bb      	str	r3, [r7, #120]	; 0x78
 8002916:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002924:	4649      	mov	r1, r9
 8002926:	008b      	lsls	r3, r1, #2
 8002928:	4641      	mov	r1, r8
 800292a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800292e:	4641      	mov	r1, r8
 8002930:	008a      	lsls	r2, r1, #2
 8002932:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002936:	f7fd fc9d 	bl	8000274 <__aeabi_uldivmod>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4611      	mov	r1, r2
 8002940:	4b38      	ldr	r3, [pc, #224]	; (8002a24 <UART_SetConfig+0x4e4>)
 8002942:	fba3 2301 	umull	r2, r3, r3, r1
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	2264      	movs	r2, #100	; 0x64
 800294a:	fb02 f303 	mul.w	r3, r2, r3
 800294e:	1acb      	subs	r3, r1, r3
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	3332      	adds	r3, #50	; 0x32
 8002954:	4a33      	ldr	r2, [pc, #204]	; (8002a24 <UART_SetConfig+0x4e4>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002960:	441c      	add	r4, r3
 8002962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002966:	2200      	movs	r2, #0
 8002968:	673b      	str	r3, [r7, #112]	; 0x70
 800296a:	677a      	str	r2, [r7, #116]	; 0x74
 800296c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002970:	4642      	mov	r2, r8
 8002972:	464b      	mov	r3, r9
 8002974:	1891      	adds	r1, r2, r2
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	415b      	adcs	r3, r3
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002980:	4641      	mov	r1, r8
 8002982:	1851      	adds	r1, r2, r1
 8002984:	6039      	str	r1, [r7, #0]
 8002986:	4649      	mov	r1, r9
 8002988:	414b      	adcs	r3, r1
 800298a:	607b      	str	r3, [r7, #4]
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002998:	4659      	mov	r1, fp
 800299a:	00cb      	lsls	r3, r1, #3
 800299c:	4651      	mov	r1, sl
 800299e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029a2:	4651      	mov	r1, sl
 80029a4:	00ca      	lsls	r2, r1, #3
 80029a6:	4610      	mov	r0, r2
 80029a8:	4619      	mov	r1, r3
 80029aa:	4603      	mov	r3, r0
 80029ac:	4642      	mov	r2, r8
 80029ae:	189b      	adds	r3, r3, r2
 80029b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80029b2:	464b      	mov	r3, r9
 80029b4:	460a      	mov	r2, r1
 80029b6:	eb42 0303 	adc.w	r3, r2, r3
 80029ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	663b      	str	r3, [r7, #96]	; 0x60
 80029c6:	667a      	str	r2, [r7, #100]	; 0x64
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80029d4:	4649      	mov	r1, r9
 80029d6:	008b      	lsls	r3, r1, #2
 80029d8:	4641      	mov	r1, r8
 80029da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029de:	4641      	mov	r1, r8
 80029e0:	008a      	lsls	r2, r1, #2
 80029e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80029e6:	f7fd fc45 	bl	8000274 <__aeabi_uldivmod>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <UART_SetConfig+0x4e4>)
 80029f0:	fba3 1302 	umull	r1, r3, r3, r2
 80029f4:	095b      	lsrs	r3, r3, #5
 80029f6:	2164      	movs	r1, #100	; 0x64
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	3332      	adds	r3, #50	; 0x32
 8002a02:	4a08      	ldr	r2, [pc, #32]	; (8002a24 <UART_SetConfig+0x4e4>)
 8002a04:	fba2 2303 	umull	r2, r3, r2, r3
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	f003 020f 	and.w	r2, r3, #15
 8002a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4422      	add	r2, r4
 8002a16:	609a      	str	r2, [r3, #8]
}
 8002a18:	bf00      	nop
 8002a1a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a24:	51eb851f 	.word	0x51eb851f

08002a28 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f103 0208 	add.w	r2, r3, #8
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a40:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f103 0208 	add.w	r2, r3, #8
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f103 0208 	add.w	r2, r3, #8
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002a82:	b480      	push	{r7}
 8002a84:	b085      	sub	sp, #20
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	601a      	str	r2, [r3, #0]
}
 8002abe:	bf00      	nop
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002aca:	b480      	push	{r7}
 8002acc:	b085      	sub	sp, #20
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae0:	d103      	bne.n	8002aea <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	e00c      	b.n	8002b04 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3308      	adds	r3, #8
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	e002      	b.n	8002af8 <vListInsert+0x2e>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d2f6      	bcs.n	8002af2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	601a      	str	r2, [r3, #0]
}
 8002b30:	bf00      	nop
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6892      	ldr	r2, [r2, #8]
 8002b52:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6852      	ldr	r2, [r2, #4]
 8002b5c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d103      	bne.n	8002b70 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	1e5a      	subs	r2, r3, #1
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10a      	bne.n	8002bba <xQueueGenericReset+0x2a>
        __asm volatile
 8002ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	f3bf 8f6f 	isb	sy
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	60bb      	str	r3, [r7, #8]
    }
 8002bb6:	bf00      	nop
 8002bb8:	e7fe      	b.n	8002bb8 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002bba:	f002 fae5 	bl	8005188 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc6:	68f9      	ldr	r1, [r7, #12]
 8002bc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	441a      	add	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bea:	3b01      	subs	r3, #1
 8002bec:	68f9      	ldr	r1, [r7, #12]
 8002bee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	441a      	add	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	22ff      	movs	r2, #255	; 0xff
 8002bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	22ff      	movs	r2, #255	; 0xff
 8002c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d114      	bne.n	8002c3a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d01a      	beq.n	8002c4e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	3310      	adds	r3, #16
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f001 fa99 	bl	8004154 <xTaskRemoveFromEventList>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d012      	beq.n	8002c4e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <xQueueGenericReset+0xcc>)
 8002c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	e009      	b.n	8002c4e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	3310      	adds	r3, #16
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fef2 	bl	8002a28 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	3324      	adds	r3, #36	; 0x24
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff feed 	bl	8002a28 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002c4e:	f002 facb 	bl	80051e8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002c52:	2301      	movs	r3, #1
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	e000ed04 	.word	0xe000ed04

08002c60 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08c      	sub	sp, #48	; 0x30
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10a      	bne.n	8002c8a <xQueueGenericCreate+0x2a>
        __asm volatile
 8002c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c78:	f383 8811 	msr	BASEPRI, r3
 8002c7c:	f3bf 8f6f 	isb	sy
 8002c80:	f3bf 8f4f 	dsb	sy
 8002c84:	61bb      	str	r3, [r7, #24]
    }
 8002c86:	bf00      	nop
 8002c88:	e7fe      	b.n	8002c88 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	fb02 f303 	mul.w	r3, r2, r3
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d006      	beq.n	8002ca8 <xQueueGenericCreate+0x48>
 8002c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d101      	bne.n	8002cac <xQueueGenericCreate+0x4c>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <xQueueGenericCreate+0x4e>
 8002cac:	2300      	movs	r3, #0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10a      	bne.n	8002cc8 <xQueueGenericCreate+0x68>
        __asm volatile
 8002cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb6:	f383 8811 	msr	BASEPRI, r3
 8002cba:	f3bf 8f6f 	isb	sy
 8002cbe:	f3bf 8f4f 	dsb	sy
 8002cc2:	617b      	str	r3, [r7, #20]
    }
 8002cc4:	bf00      	nop
 8002cc6:	e7fe      	b.n	8002cc6 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002cce:	d90a      	bls.n	8002ce6 <xQueueGenericCreate+0x86>
        __asm volatile
 8002cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	613b      	str	r3, [r7, #16]
    }
 8002ce2:	bf00      	nop
 8002ce4:	e7fe      	b.n	8002ce4 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	3350      	adds	r3, #80	; 0x50
 8002cea:	4618      	mov	r0, r3
 8002cec:	f002 fb76 	bl	80053dc <pvPortMalloc>
 8002cf0:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00d      	beq.n	8002d14 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	3350      	adds	r3, #80	; 0x50
 8002d00:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d02:	79fa      	ldrb	r2, [r7, #7]
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	69fa      	ldr	r2, [r7, #28]
 8002d0c:	68b9      	ldr	r1, [r7, #8]
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 f805 	bl	8002d1e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002d14:	6a3b      	ldr	r3, [r7, #32]
    }
 8002d16:	4618      	mov	r0, r3
 8002d18:	3728      	adds	r7, #40	; 0x28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
 8002d2a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d103      	bne.n	8002d3a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	e002      	b.n	8002d40 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	69b8      	ldr	r0, [r7, #24]
 8002d50:	f7ff ff1e 	bl	8002b90 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	68f9      	ldr	r1, [r7, #12]
 8002d62:	2073      	movs	r0, #115	; 0x73
 8002d64:	f003 f9d4 	bl	8006110 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002d68:	bf00      	nop
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b090      	sub	sp, #64	; 0x40
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10a      	bne.n	8002da2 <xQueueGenericSend+0x32>
        __asm volatile
 8002d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002d9e:	bf00      	nop
 8002da0:	e7fe      	b.n	8002da0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d103      	bne.n	8002db0 <xQueueGenericSend+0x40>
 8002da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <xQueueGenericSend+0x44>
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <xQueueGenericSend+0x46>
 8002db4:	2300      	movs	r3, #0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10a      	bne.n	8002dd0 <xQueueGenericSend+0x60>
        __asm volatile
 8002dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbe:	f383 8811 	msr	BASEPRI, r3
 8002dc2:	f3bf 8f6f 	isb	sy
 8002dc6:	f3bf 8f4f 	dsb	sy
 8002dca:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002dcc:	bf00      	nop
 8002dce:	e7fe      	b.n	8002dce <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d103      	bne.n	8002dde <xQueueGenericSend+0x6e>
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <xQueueGenericSend+0x72>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <xQueueGenericSend+0x74>
 8002de2:	2300      	movs	r3, #0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10a      	bne.n	8002dfe <xQueueGenericSend+0x8e>
        __asm volatile
 8002de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dec:	f383 8811 	msr	BASEPRI, r3
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	623b      	str	r3, [r7, #32]
    }
 8002dfa:	bf00      	nop
 8002dfc:	e7fe      	b.n	8002dfc <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dfe:	f001 fb49 	bl	8004494 <xTaskGetSchedulerState>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d102      	bne.n	8002e0e <xQueueGenericSend+0x9e>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <xQueueGenericSend+0xa2>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <xQueueGenericSend+0xa4>
 8002e12:	2300      	movs	r3, #0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10a      	bne.n	8002e2e <xQueueGenericSend+0xbe>
        __asm volatile
 8002e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1c:	f383 8811 	msr	BASEPRI, r3
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	61fb      	str	r3, [r7, #28]
    }
 8002e2a:	bf00      	nop
 8002e2c:	e7fe      	b.n	8002e2c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002e2e:	f002 f9ab 	bl	8005188 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d302      	bcc.n	8002e44 <xQueueGenericSend+0xd4>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d136      	bne.n	8002eb2 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e46:	4618      	mov	r0, r3
 8002e48:	f003 fecc 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	460b      	mov	r3, r1
 8002e56:	4601      	mov	r1, r0
 8002e58:	205a      	movs	r0, #90	; 0x5a
 8002e5a:	f003 f9cf 	bl	80061fc <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	68b9      	ldr	r1, [r7, #8]
 8002e62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e64:	f000 fbcc 	bl	8003600 <prvCopyDataToQueue>
 8002e68:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d010      	beq.n	8002e94 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e74:	3324      	adds	r3, #36	; 0x24
 8002e76:	4618      	mov	r0, r3
 8002e78:	f001 f96c 	bl	8004154 <xTaskRemoveFromEventList>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d013      	beq.n	8002eaa <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002e82:	4b4d      	ldr	r3, [pc, #308]	; (8002fb8 <xQueueGenericSend+0x248>)
 8002e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	f3bf 8f6f 	isb	sy
 8002e92:	e00a      	b.n	8002eaa <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d007      	beq.n	8002eaa <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002e9a:	4b47      	ldr	r3, [pc, #284]	; (8002fb8 <xQueueGenericSend+0x248>)
 8002e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002eaa:	f002 f99d 	bl	80051e8 <vPortExitCritical>
                return pdPASS;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e07d      	b.n	8002fae <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d110      	bne.n	8002eda <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002eb8:	f002 f996 	bl	80051e8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f003 fe90 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4601      	mov	r1, r0
 8002ed0:	205a      	movs	r0, #90	; 0x5a
 8002ed2:	f003 f993 	bl	80061fc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	e069      	b.n	8002fae <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d106      	bne.n	8002eee <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002ee0:	f107 0314 	add.w	r3, r7, #20
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f001 f99b 	bl	8004220 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002eea:	2301      	movs	r3, #1
 8002eec:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002eee:	f002 f97b 	bl	80051e8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002ef2:	f000 fef9 	bl	8003ce8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002ef6:	f002 f947 	bl	8005188 <vPortEnterCritical>
 8002efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f00:	b25b      	sxtb	r3, r3
 8002f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f06:	d103      	bne.n	8002f10 <xQueueGenericSend+0x1a0>
 8002f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f16:	b25b      	sxtb	r3, r3
 8002f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1c:	d103      	bne.n	8002f26 <xQueueGenericSend+0x1b6>
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f26:	f002 f95f 	bl	80051e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f2a:	1d3a      	adds	r2, r7, #4
 8002f2c:	f107 0314 	add.w	r3, r7, #20
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f001 f98a 	bl	800424c <xTaskCheckForTimeOut>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d124      	bne.n	8002f88 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f40:	f000 fc56 	bl	80037f0 <prvIsQueueFull>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d018      	beq.n	8002f7c <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4c:	3310      	adds	r3, #16
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	4611      	mov	r1, r2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f001 f8ac 	bl	80040b0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f5a:	f000 fbe1 	bl	8003720 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002f5e:	f000 fed1 	bl	8003d04 <xTaskResumeAll>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f47f af62 	bne.w	8002e2e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002f6a:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <xQueueGenericSend+0x248>)
 8002f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	f3bf 8f4f 	dsb	sy
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	e758      	b.n	8002e2e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002f7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f7e:	f000 fbcf 	bl	8003720 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002f82:	f000 febf 	bl	8003d04 <xTaskResumeAll>
 8002f86:	e752      	b.n	8002e2e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002f88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f8a:	f000 fbc9 	bl	8003720 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002f8e:	f000 feb9 	bl	8003d04 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	4618      	mov	r0, r3
 8002f96:	f003 fe25 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4601      	mov	r1, r0
 8002fa6:	205a      	movs	r0, #90	; 0x5a
 8002fa8:	f003 f928 	bl	80061fc <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002fac:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3738      	adds	r7, #56	; 0x38
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	e000ed04 	.word	0xe000ed04

08002fbc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b090      	sub	sp, #64	; 0x40
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10a      	bne.n	8002fea <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002fe6:	bf00      	nop
 8002fe8:	e7fe      	b.n	8002fe8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d103      	bne.n	8002ff8 <xQueueGenericSendFromISR+0x3c>
 8002ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <xQueueGenericSendFromISR+0x40>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <xQueueGenericSendFromISR+0x42>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10a      	bne.n	8003018 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8003002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003006:	f383 8811 	msr	BASEPRI, r3
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003014:	bf00      	nop
 8003016:	e7fe      	b.n	8003016 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d103      	bne.n	8003026 <xQueueGenericSendFromISR+0x6a>
 800301e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <xQueueGenericSendFromISR+0x6e>
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <xQueueGenericSendFromISR+0x70>
 800302a:	2300      	movs	r3, #0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10a      	bne.n	8003046 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8003030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003034:	f383 8811 	msr	BASEPRI, r3
 8003038:	f3bf 8f6f 	isb	sy
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	623b      	str	r3, [r7, #32]
    }
 8003042:	bf00      	nop
 8003044:	e7fe      	b.n	8003044 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003046:	f002 f989 	bl	800535c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800304a:	f3ef 8211 	mrs	r2, BASEPRI
 800304e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003052:	f383 8811 	msr	BASEPRI, r3
 8003056:	f3bf 8f6f 	isb	sy
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	61fa      	str	r2, [r7, #28]
 8003060:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003062:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003064:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306e:	429a      	cmp	r2, r3
 8003070:	d302      	bcc.n	8003078 <xQueueGenericSendFromISR+0xbc>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d148      	bne.n	800310a <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800307e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003086:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8003088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308a:	4618      	mov	r0, r3
 800308c:	f003 fdaa 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 8003090:	4601      	mov	r1, r0
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	461a      	mov	r2, r3
 8003096:	2060      	movs	r0, #96	; 0x60
 8003098:	f002 ffe0 	bl	800605c <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	68b9      	ldr	r1, [r7, #8]
 80030a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80030a2:	f000 faad 	bl	8003600 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80030a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80030aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ae:	d112      	bne.n	80030d6 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d025      	beq.n	8003104 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ba:	3324      	adds	r3, #36	; 0x24
 80030bc:	4618      	mov	r0, r3
 80030be:	f001 f849 	bl	8004154 <xTaskRemoveFromEventList>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d01d      	beq.n	8003104 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d01a      	beq.n	8003104 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	e016      	b.n	8003104 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80030d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80030da:	2b7f      	cmp	r3, #127	; 0x7f
 80030dc:	d10a      	bne.n	80030f4 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80030de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e2:	f383 8811 	msr	BASEPRI, r3
 80030e6:	f3bf 8f6f 	isb	sy
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	617b      	str	r3, [r7, #20]
    }
 80030f0:	bf00      	nop
 80030f2:	e7fe      	b.n	80030f2 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80030f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030f8:	3301      	adds	r3, #1
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	b25a      	sxtb	r2, r3
 80030fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003104:	2301      	movs	r3, #1
 8003106:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003108:	e00b      	b.n	8003122 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800310a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310c:	4618      	mov	r0, r3
 800310e:	f003 fd69 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 8003112:	4601      	mov	r1, r0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	461a      	mov	r2, r3
 8003118:	2060      	movs	r0, #96	; 0x60
 800311a:	f002 ff9f 	bl	800605c <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800311e:	2300      	movs	r3, #0
 8003120:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003124:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800312c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800312e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003130:	4618      	mov	r0, r3
 8003132:	3740      	adds	r7, #64	; 0x40
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	b08f      	sub	sp, #60	; 0x3c
 800313c:	af02      	add	r7, sp, #8
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003144:	2300      	movs	r3, #0
 8003146:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800314c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10a      	bne.n	8003168 <xQueueReceive+0x30>
        __asm volatile
 8003152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003156:	f383 8811 	msr	BASEPRI, r3
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	623b      	str	r3, [r7, #32]
    }
 8003164:	bf00      	nop
 8003166:	e7fe      	b.n	8003166 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d103      	bne.n	8003176 <xQueueReceive+0x3e>
 800316e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <xQueueReceive+0x42>
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <xQueueReceive+0x44>
 800317a:	2300      	movs	r3, #0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10a      	bne.n	8003196 <xQueueReceive+0x5e>
        __asm volatile
 8003180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	61fb      	str	r3, [r7, #28]
    }
 8003192:	bf00      	nop
 8003194:	e7fe      	b.n	8003194 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003196:	f001 f97d 	bl	8004494 <xTaskGetSchedulerState>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d102      	bne.n	80031a6 <xQueueReceive+0x6e>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <xQueueReceive+0x72>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <xQueueReceive+0x74>
 80031aa:	2300      	movs	r3, #0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10a      	bne.n	80031c6 <xQueueReceive+0x8e>
        __asm volatile
 80031b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b4:	f383 8811 	msr	BASEPRI, r3
 80031b8:	f3bf 8f6f 	isb	sy
 80031bc:	f3bf 8f4f 	dsb	sy
 80031c0:	61bb      	str	r3, [r7, #24]
    }
 80031c2:	bf00      	nop
 80031c4:	e7fe      	b.n	80031c4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80031c6:	f001 ffdf 	bl	8005188 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d02f      	beq.n	8003236 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031da:	f000 fa7b 	bl	80036d4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80031de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e0:	4618      	mov	r0, r3
 80031e2:	f003 fcff 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 80031e6:	4604      	mov	r4, r0
 80031e8:	2000      	movs	r0, #0
 80031ea:	f003 fcfb 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 80031ee:	4602      	mov	r2, r0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2101      	movs	r1, #1
 80031f4:	9100      	str	r1, [sp, #0]
 80031f6:	4621      	mov	r1, r4
 80031f8:	205c      	movs	r0, #92	; 0x5c
 80031fa:	f002 ffff 	bl	80061fc <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	1e5a      	subs	r2, r3, #1
 8003202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003204:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00f      	beq.n	800322e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800320e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003210:	3310      	adds	r3, #16
 8003212:	4618      	mov	r0, r3
 8003214:	f000 ff9e 	bl	8004154 <xTaskRemoveFromEventList>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d007      	beq.n	800322e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800321e:	4b4d      	ldr	r3, [pc, #308]	; (8003354 <xQueueReceive+0x21c>)
 8003220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	f3bf 8f4f 	dsb	sy
 800322a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800322e:	f001 ffdb 	bl	80051e8 <vPortExitCritical>
                return pdPASS;
 8003232:	2301      	movs	r3, #1
 8003234:	e08a      	b.n	800334c <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d113      	bne.n	8003264 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800323c:	f001 ffd4 	bl	80051e8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003242:	4618      	mov	r0, r3
 8003244:	f003 fcce 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 8003248:	4604      	mov	r4, r0
 800324a:	2000      	movs	r0, #0
 800324c:	f003 fcca 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 8003250:	4602      	mov	r2, r0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2101      	movs	r1, #1
 8003256:	9100      	str	r1, [sp, #0]
 8003258:	4621      	mov	r1, r4
 800325a:	205c      	movs	r0, #92	; 0x5c
 800325c:	f002 ffce 	bl	80061fc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003260:	2300      	movs	r3, #0
 8003262:	e073      	b.n	800334c <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800326a:	f107 0310 	add.w	r3, r7, #16
 800326e:	4618      	mov	r0, r3
 8003270:	f000 ffd6 	bl	8004220 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003274:	2301      	movs	r3, #1
 8003276:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003278:	f001 ffb6 	bl	80051e8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800327c:	f000 fd34 	bl	8003ce8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003280:	f001 ff82 	bl	8005188 <vPortEnterCritical>
 8003284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003286:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800328a:	b25b      	sxtb	r3, r3
 800328c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003290:	d103      	bne.n	800329a <xQueueReceive+0x162>
 8003292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800329a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032a0:	b25b      	sxtb	r3, r3
 80032a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a6:	d103      	bne.n	80032b0 <xQueueReceive+0x178>
 80032a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032b0:	f001 ff9a 	bl	80051e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032b4:	1d3a      	adds	r2, r7, #4
 80032b6:	f107 0310 	add.w	r3, r7, #16
 80032ba:	4611      	mov	r1, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 ffc5 	bl	800424c <xTaskCheckForTimeOut>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d124      	bne.n	8003312 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032ca:	f000 fa7b 	bl	80037c4 <prvIsQueueEmpty>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d018      	beq.n	8003306 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d6:	3324      	adds	r3, #36	; 0x24
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fee7 	bl	80040b0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80032e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032e4:	f000 fa1c 	bl	8003720 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80032e8:	f000 fd0c 	bl	8003d04 <xTaskResumeAll>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f47f af69 	bne.w	80031c6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80032f4:	4b17      	ldr	r3, [pc, #92]	; (8003354 <xQueueReceive+0x21c>)
 80032f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	e75f      	b.n	80031c6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003306:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003308:	f000 fa0a 	bl	8003720 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800330c:	f000 fcfa 	bl	8003d04 <xTaskResumeAll>
 8003310:	e759      	b.n	80031c6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003314:	f000 fa04 	bl	8003720 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003318:	f000 fcf4 	bl	8003d04 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800331c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800331e:	f000 fa51 	bl	80037c4 <prvIsQueueEmpty>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	f43f af4e 	beq.w	80031c6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332c:	4618      	mov	r0, r3
 800332e:	f003 fc59 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 8003332:	4604      	mov	r4, r0
 8003334:	2000      	movs	r0, #0
 8003336:	f003 fc55 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 800333a:	4602      	mov	r2, r0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2101      	movs	r1, #1
 8003340:	9100      	str	r1, [sp, #0]
 8003342:	4621      	mov	r1, r4
 8003344:	205c      	movs	r0, #92	; 0x5c
 8003346:	f002 ff59 	bl	80061fc <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800334a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800334c:	4618      	mov	r0, r3
 800334e:	3734      	adds	r7, #52	; 0x34
 8003350:	46bd      	mov	sp, r7
 8003352:	bd90      	pop	{r4, r7, pc}
 8003354:	e000ed04 	.word	0xe000ed04

08003358 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003358:	b590      	push	{r4, r7, lr}
 800335a:	b091      	sub	sp, #68	; 0x44
 800335c:	af02      	add	r7, sp, #8
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003362:	2300      	movs	r3, #0
 8003364:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800336a:	2300      	movs	r3, #0
 800336c:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800336e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10a      	bne.n	800338a <xQueueSemaphoreTake+0x32>
        __asm volatile
 8003374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003378:	f383 8811 	msr	BASEPRI, r3
 800337c:	f3bf 8f6f 	isb	sy
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	623b      	str	r3, [r7, #32]
    }
 8003386:	bf00      	nop
 8003388:	e7fe      	b.n	8003388 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800338a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8003392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	61fb      	str	r3, [r7, #28]
    }
 80033a4:	bf00      	nop
 80033a6:	e7fe      	b.n	80033a6 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033a8:	f001 f874 	bl	8004494 <xTaskGetSchedulerState>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d102      	bne.n	80033b8 <xQueueSemaphoreTake+0x60>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <xQueueSemaphoreTake+0x64>
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <xQueueSemaphoreTake+0x66>
 80033bc:	2300      	movs	r3, #0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10a      	bne.n	80033d8 <xQueueSemaphoreTake+0x80>
        __asm volatile
 80033c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c6:	f383 8811 	msr	BASEPRI, r3
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	f3bf 8f4f 	dsb	sy
 80033d2:	61bb      	str	r3, [r7, #24]
    }
 80033d4:	bf00      	nop
 80033d6:	e7fe      	b.n	80033d6 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80033d8:	f001 fed6 	bl	8005188 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80033dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d034      	beq.n	8003452 <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 80033e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ea:	4618      	mov	r0, r3
 80033ec:	f003 fbfa 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 80033f0:	4604      	mov	r4, r0
 80033f2:	2000      	movs	r0, #0
 80033f4:	f003 fbf6 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 80033f8:	4602      	mov	r2, r0
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2101      	movs	r1, #1
 80033fe:	9100      	str	r1, [sp, #0]
 8003400:	4621      	mov	r1, r4
 8003402:	205c      	movs	r0, #92	; 0x5c
 8003404:	f002 fefa 	bl	80061fc <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340a:	1e5a      	subs	r2, r3, #1
 800340c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340e:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d104      	bne.n	8003422 <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003418:	f001 f9ec 	bl	80047f4 <pvTaskIncrementMutexHeldCount>
 800341c:	4602      	mov	r2, r0
 800341e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003420:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00f      	beq.n	800344a <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800342a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342c:	3310      	adds	r3, #16
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fe90 	bl	8004154 <xTaskRemoveFromEventList>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d007      	beq.n	800344a <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800343a:	4b64      	ldr	r3, [pc, #400]	; (80035cc <xQueueSemaphoreTake+0x274>)
 800343c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800344a:	f001 fecd 	bl	80051e8 <vPortExitCritical>
                return pdPASS;
 800344e:	2301      	movs	r3, #1
 8003450:	e0b7      	b.n	80035c2 <xQueueSemaphoreTake+0x26a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d121      	bne.n	800349c <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8003458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <xQueueSemaphoreTake+0x11c>
        __asm volatile
 800345e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003462:	f383 8811 	msr	BASEPRI, r3
 8003466:	f3bf 8f6f 	isb	sy
 800346a:	f3bf 8f4f 	dsb	sy
 800346e:	617b      	str	r3, [r7, #20]
    }
 8003470:	bf00      	nop
 8003472:	e7fe      	b.n	8003472 <xQueueSemaphoreTake+0x11a>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003474:	f001 feb8 	bl	80051e8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347a:	4618      	mov	r0, r3
 800347c:	f003 fbb2 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 8003480:	4604      	mov	r4, r0
 8003482:	2000      	movs	r0, #0
 8003484:	f003 fbae 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 8003488:	4602      	mov	r2, r0
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2101      	movs	r1, #1
 800348e:	9100      	str	r1, [sp, #0]
 8003490:	4621      	mov	r1, r4
 8003492:	205c      	movs	r0, #92	; 0x5c
 8003494:	f002 feb2 	bl	80061fc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003498:	2300      	movs	r3, #0
 800349a:	e092      	b.n	80035c2 <xQueueSemaphoreTake+0x26a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800349c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80034a2:	f107 030c 	add.w	r3, r7, #12
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 feba 	bl	8004220 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80034ac:	2301      	movs	r3, #1
 80034ae:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80034b0:	f001 fe9a 	bl	80051e8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80034b4:	f000 fc18 	bl	8003ce8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80034b8:	f001 fe66 	bl	8005188 <vPortEnterCritical>
 80034bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034c2:	b25b      	sxtb	r3, r3
 80034c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c8:	d103      	bne.n	80034d2 <xQueueSemaphoreTake+0x17a>
 80034ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034d8:	b25b      	sxtb	r3, r3
 80034da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034de:	d103      	bne.n	80034e8 <xQueueSemaphoreTake+0x190>
 80034e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034e8:	f001 fe7e 	bl	80051e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034ec:	463a      	mov	r2, r7
 80034ee:	f107 030c 	add.w	r3, r7, #12
 80034f2:	4611      	mov	r1, r2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fea9 	bl	800424c <xTaskCheckForTimeOut>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d132      	bne.n	8003566 <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003500:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003502:	f000 f95f 	bl	80037c4 <prvIsQueueEmpty>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d026      	beq.n	800355a <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800350c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d109      	bne.n	8003528 <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 8003514:	f001 fe38 	bl	8005188 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4618      	mov	r0, r3
 800351e:	f000 ffd7 	bl	80044d0 <xTaskPriorityInherit>
 8003522:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8003524:	f001 fe60 	bl	80051e8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352a:	3324      	adds	r3, #36	; 0x24
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	4611      	mov	r1, r2
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fdbd 	bl	80040b0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003536:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003538:	f000 f8f2 	bl	8003720 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800353c:	f000 fbe2 	bl	8003d04 <xTaskResumeAll>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	f47f af48 	bne.w	80033d8 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8003548:	4b20      	ldr	r3, [pc, #128]	; (80035cc <xQueueSemaphoreTake+0x274>)
 800354a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	e73e      	b.n	80033d8 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800355a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800355c:	f000 f8e0 	bl	8003720 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003560:	f000 fbd0 	bl	8003d04 <xTaskResumeAll>
 8003564:	e738      	b.n	80033d8 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003566:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003568:	f000 f8da 	bl	8003720 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800356c:	f000 fbca 	bl	8003d04 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003570:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003572:	f000 f927 	bl	80037c4 <prvIsQueueEmpty>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	f43f af2d 	beq.w	80033d8 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00d      	beq.n	80035a0 <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 8003584:	f001 fe00 	bl	8005188 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003588:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800358a:	f000 f821 	bl	80035d0 <prvGetDisinheritPriorityAfterTimeout>
 800358e:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003596:	4618      	mov	r0, r3
 8003598:	f001 f894 	bl	80046c4 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 800359c:	f001 fe24 	bl	80051e8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80035a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a2:	4618      	mov	r0, r3
 80035a4:	f003 fb1e 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 80035a8:	4604      	mov	r4, r0
 80035aa:	2000      	movs	r0, #0
 80035ac:	f003 fb1a 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 80035b0:	4602      	mov	r2, r0
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2101      	movs	r1, #1
 80035b6:	9100      	str	r1, [sp, #0]
 80035b8:	4621      	mov	r1, r4
 80035ba:	205c      	movs	r0, #92	; 0x5c
 80035bc:	f002 fe1e 	bl	80061fc <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80035c0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	373c      	adds	r7, #60	; 0x3c
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd90      	pop	{r4, r7, pc}
 80035ca:	bf00      	nop
 80035cc:	e000ed04 	.word	0xe000ed04

080035d0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d006      	beq.n	80035ee <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f1c3 0305 	rsb	r3, r3, #5
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	e001      	b.n	80035f2 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80035f2:	68fb      	ldr	r3, [r7, #12]
    }
 80035f4:	4618      	mov	r0, r3
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003614:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10d      	bne.n	800363a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d14d      	bne.n	80036c2 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	4618      	mov	r0, r3
 800362c:	f000 ffca 	bl	80045c4 <xTaskPriorityDisinherit>
 8003630:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	609a      	str	r2, [r3, #8]
 8003638:	e043      	b.n	80036c2 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d119      	bne.n	8003674 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6858      	ldr	r0, [r3, #4]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	461a      	mov	r2, r3
 800364a:	68b9      	ldr	r1, [r7, #8]
 800364c:	f003 fc4e 	bl	8006eec <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	441a      	add	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	429a      	cmp	r2, r3
 8003668:	d32b      	bcc.n	80036c2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	e026      	b.n	80036c2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	68d8      	ldr	r0, [r3, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	461a      	mov	r2, r3
 800367e:	68b9      	ldr	r1, [r7, #8]
 8003680:	f003 fc34 	bl	8006eec <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	425b      	negs	r3, r3
 800368e:	441a      	add	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d207      	bcs.n	80036b0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	425b      	negs	r3, r3
 80036aa:	441a      	add	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d105      	bne.n	80036c2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	3b01      	subs	r3, #1
 80036c0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80036ca:	697b      	ldr	r3, [r7, #20]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d018      	beq.n	8003718 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	441a      	add	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d303      	bcc.n	8003708 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68d9      	ldr	r1, [r3, #12]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	461a      	mov	r2, r3
 8003712:	6838      	ldr	r0, [r7, #0]
 8003714:	f003 fbea 	bl	8006eec <memcpy>
    }
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003728:	f001 fd2e 	bl	8005188 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003732:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003734:	e011      	b.n	800375a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	2b00      	cmp	r3, #0
 800373c:	d012      	beq.n	8003764 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3324      	adds	r3, #36	; 0x24
 8003742:	4618      	mov	r0, r3
 8003744:	f000 fd06 	bl	8004154 <xTaskRemoveFromEventList>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800374e:	f000 fde3 	bl	8004318 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	3b01      	subs	r3, #1
 8003756:	b2db      	uxtb	r3, r3
 8003758:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800375a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800375e:	2b00      	cmp	r3, #0
 8003760:	dce9      	bgt.n	8003736 <prvUnlockQueue+0x16>
 8003762:	e000      	b.n	8003766 <prvUnlockQueue+0x46>
                        break;
 8003764:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	22ff      	movs	r2, #255	; 0xff
 800376a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800376e:	f001 fd3b 	bl	80051e8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003772:	f001 fd09 	bl	8005188 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800377c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800377e:	e011      	b.n	80037a4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d012      	beq.n	80037ae <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3310      	adds	r3, #16
 800378c:	4618      	mov	r0, r3
 800378e:	f000 fce1 	bl	8004154 <xTaskRemoveFromEventList>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003798:	f000 fdbe 	bl	8004318 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800379c:	7bbb      	ldrb	r3, [r7, #14]
 800379e:	3b01      	subs	r3, #1
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80037a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	dce9      	bgt.n	8003780 <prvUnlockQueue+0x60>
 80037ac:	e000      	b.n	80037b0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80037ae:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	22ff      	movs	r2, #255	; 0xff
 80037b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80037b8:	f001 fd16 	bl	80051e8 <vPortExitCritical>
}
 80037bc:	bf00      	nop
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80037cc:	f001 fcdc 	bl	8005188 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80037d8:	2301      	movs	r3, #1
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	e001      	b.n	80037e2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80037e2:	f001 fd01 	bl	80051e8 <vPortExitCritical>

    return xReturn;
 80037e6:	68fb      	ldr	r3, [r7, #12]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80037f8:	f001 fcc6 	bl	8005188 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003804:	429a      	cmp	r2, r3
 8003806:	d102      	bne.n	800380e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003808:	2301      	movs	r3, #1
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	e001      	b.n	8003812 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800380e:	2300      	movs	r3, #0
 8003810:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003812:	f001 fce9 	bl	80051e8 <vPortExitCritical>

    return xReturn;
 8003816:	68fb      	ldr	r3, [r7, #12]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800382a:	2300      	movs	r3, #0
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	e01e      	b.n	800386e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003830:	4a13      	ldr	r2, [pc, #76]	; (8003880 <vQueueAddToRegistry+0x60>)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d115      	bne.n	8003868 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800383c:	4910      	ldr	r1, [pc, #64]	; (8003880 <vQueueAddToRegistry+0x60>)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003846:	4a0e      	ldr	r2, [pc, #56]	; (8003880 <vQueueAddToRegistry+0x60>)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	4413      	add	r3, r2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4618      	mov	r0, r3
 8003856:	f003 f9c5 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 800385a:	4601      	mov	r1, r0
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	2071      	movs	r0, #113	; 0x71
 8003862:	f002 fbfb 	bl	800605c <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8003866:	e006      	b.n	8003876 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	3301      	adds	r3, #1
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b07      	cmp	r3, #7
 8003872:	d9dd      	bls.n	8003830 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003874:	bf00      	nop
 8003876:	bf00      	nop
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	200000d0 	.word	0x200000d0

08003884 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003894:	f001 fc78 	bl	8005188 <vPortEnterCritical>
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800389e:	b25b      	sxtb	r3, r3
 80038a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a4:	d103      	bne.n	80038ae <vQueueWaitForMessageRestricted+0x2a>
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038b4:	b25b      	sxtb	r3, r3
 80038b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ba:	d103      	bne.n	80038c4 <vQueueWaitForMessageRestricted+0x40>
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038c4:	f001 fc90 	bl	80051e8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d106      	bne.n	80038de <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	3324      	adds	r3, #36	; 0x24
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	68b9      	ldr	r1, [r7, #8]
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 fc0d 	bl	80040f8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80038de:	6978      	ldr	r0, [r7, #20]
 80038e0:	f7ff ff1e 	bl	8003720 <prvUnlockQueue>
    }
 80038e4:	bf00      	nop
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08c      	sub	sp, #48	; 0x30
 80038f0:	af04      	add	r7, sp, #16
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	4613      	mov	r3, r2
 80038fa:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80038fc:	88fb      	ldrh	r3, [r7, #6]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4618      	mov	r0, r3
 8003902:	f001 fd6b 	bl	80053dc <pvPortMalloc>
 8003906:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00e      	beq.n	800392c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800390e:	2058      	movs	r0, #88	; 0x58
 8003910:	f001 fd64 	bl	80053dc <pvPortMalloc>
 8003914:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	631a      	str	r2, [r3, #48]	; 0x30
 8003922:	e005      	b.n	8003930 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003924:	6978      	ldr	r0, [r7, #20]
 8003926:	f001 fe39 	bl	800559c <vPortFree>
 800392a:	e001      	b.n	8003930 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800392c:	2300      	movs	r3, #0
 800392e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d013      	beq.n	800395e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003936:	88fa      	ldrh	r2, [r7, #6]
 8003938:	2300      	movs	r3, #0
 800393a:	9303      	str	r3, [sp, #12]
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	9302      	str	r3, [sp, #8]
 8003940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003942:	9301      	str	r3, [sp, #4]
 8003944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	68b9      	ldr	r1, [r7, #8]
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 f80e 	bl	800396e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003952:	69f8      	ldr	r0, [r7, #28]
 8003954:	f000 f8a2 	bl	8003a9c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003958:	2301      	movs	r3, #1
 800395a:	61bb      	str	r3, [r7, #24]
 800395c:	e002      	b.n	8003964 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800395e:	f04f 33ff 	mov.w	r3, #4294967295
 8003962:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003964:	69bb      	ldr	r3, [r7, #24]
    }
 8003966:	4618      	mov	r0, r3
 8003968:	3720      	adds	r7, #32
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b088      	sub	sp, #32
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	607a      	str	r2, [r7, #4]
 800397a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800397c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	461a      	mov	r2, r3
 8003986:	21a5      	movs	r1, #165	; 0xa5
 8003988:	f003 fa84 	bl	8006e94 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800398c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003996:	3b01      	subs	r3, #1
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	f023 0307 	bic.w	r3, r3, #7
 80039a4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00a      	beq.n	80039c6 <prvInitialiseNewTask+0x58>
        __asm volatile
 80039b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	617b      	str	r3, [r7, #20]
    }
 80039c2:	bf00      	nop
 80039c4:	e7fe      	b.n	80039c4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01f      	beq.n	8003a0c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039cc:	2300      	movs	r3, #0
 80039ce:	61fb      	str	r3, [r7, #28]
 80039d0:	e012      	b.n	80039f8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	4413      	add	r3, r2
 80039d8:	7819      	ldrb	r1, [r3, #0]
 80039da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	4413      	add	r3, r2
 80039e0:	3334      	adds	r3, #52	; 0x34
 80039e2:	460a      	mov	r2, r1
 80039e4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	4413      	add	r3, r2
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d006      	beq.n	8003a00 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	3301      	adds	r3, #1
 80039f6:	61fb      	str	r3, [r7, #28]
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	2b09      	cmp	r3, #9
 80039fc:	d9e9      	bls.n	80039d2 <prvInitialiseNewTask+0x64>
 80039fe:	e000      	b.n	8003a02 <prvInitialiseNewTask+0x94>
            {
                break;
 8003a00:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a0a:	e003      	b.n	8003a14 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d901      	bls.n	8003a1e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a1a:	2304      	movs	r3, #4
 8003a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a22:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a28:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a32:	3304      	adds	r3, #4
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff f817 	bl	8002a68 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3c:	3318      	adds	r3, #24
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff f812 	bl	8002a68 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a48:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4c:	f1c3 0205 	rsb	r2, r3, #5
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a58:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5c:	3350      	adds	r3, #80	; 0x50
 8003a5e:	2204      	movs	r2, #4
 8003a60:	2100      	movs	r1, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	f003 fa16 	bl	8006e94 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6a:	3354      	adds	r3, #84	; 0x54
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4618      	mov	r0, r3
 8003a72:	f003 fa0f 	bl	8006e94 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	68f9      	ldr	r1, [r7, #12]
 8003a7a:	69b8      	ldr	r0, [r7, #24]
 8003a7c:	f001 fa58 	bl	8004f30 <pxPortInitialiseStack>
 8003a80:	4602      	mov	r2, r0
 8003a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a84:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a90:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003a92:	bf00      	nop
 8003a94:	3720      	adds	r7, #32
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003a9c:	b5b0      	push	{r4, r5, r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003aa4:	f001 fb70 	bl	8005188 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003aa8:	4b3b      	ldr	r3, [pc, #236]	; (8003b98 <prvAddNewTaskToReadyList+0xfc>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3301      	adds	r3, #1
 8003aae:	4a3a      	ldr	r2, [pc, #232]	; (8003b98 <prvAddNewTaskToReadyList+0xfc>)
 8003ab0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003ab2:	4b3a      	ldr	r3, [pc, #232]	; (8003b9c <prvAddNewTaskToReadyList+0x100>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d109      	bne.n	8003ace <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003aba:	4a38      	ldr	r2, [pc, #224]	; (8003b9c <prvAddNewTaskToReadyList+0x100>)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ac0:	4b35      	ldr	r3, [pc, #212]	; (8003b98 <prvAddNewTaskToReadyList+0xfc>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d110      	bne.n	8003aea <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003ac8:	f000 fc4a 	bl	8004360 <prvInitialiseTaskLists>
 8003acc:	e00d      	b.n	8003aea <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003ace:	4b34      	ldr	r3, [pc, #208]	; (8003ba0 <prvAddNewTaskToReadyList+0x104>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d109      	bne.n	8003aea <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ad6:	4b31      	ldr	r3, [pc, #196]	; (8003b9c <prvAddNewTaskToReadyList+0x100>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d802      	bhi.n	8003aea <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003ae4:	4a2d      	ldr	r2, [pc, #180]	; (8003b9c <prvAddNewTaskToReadyList+0x100>)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003aea:	4b2e      	ldr	r3, [pc, #184]	; (8003ba4 <prvAddNewTaskToReadyList+0x108>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3301      	adds	r3, #1
 8003af0:	4a2c      	ldr	r2, [pc, #176]	; (8003ba4 <prvAddNewTaskToReadyList+0x108>)
 8003af2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003af4:	4b2b      	ldr	r3, [pc, #172]	; (8003ba4 <prvAddNewTaskToReadyList+0x108>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d016      	beq.n	8003b30 <prvAddNewTaskToReadyList+0x94>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f002 ff47 	bl	8006998 <SEGGER_SYSVIEW_OnTaskCreate>
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	461d      	mov	r5, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	461c      	mov	r4, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	1ae3      	subs	r3, r4, r3
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	462b      	mov	r3, r5
 8003b2c:	f001 fe54 	bl	80057d8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f002 ffb4 	bl	8006aa0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	4b19      	ldr	r3, [pc, #100]	; (8003ba8 <prvAddNewTaskToReadyList+0x10c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	4a18      	ldr	r2, [pc, #96]	; (8003ba8 <prvAddNewTaskToReadyList+0x10c>)
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4a15      	ldr	r2, [pc, #84]	; (8003bac <prvAddNewTaskToReadyList+0x110>)
 8003b58:	441a      	add	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4610      	mov	r0, r2
 8003b62:	f7fe ff8e 	bl	8002a82 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003b66:	f001 fb3f 	bl	80051e8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003b6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ba0 <prvAddNewTaskToReadyList+0x104>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00e      	beq.n	8003b90 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b72:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <prvAddNewTaskToReadyList+0x100>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d207      	bcs.n	8003b90 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003b80:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <prvAddNewTaskToReadyList+0x114>)
 8003b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003b90:	bf00      	nop
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bdb0      	pop	{r4, r5, r7, pc}
 8003b98:	200001e8 	.word	0x200001e8
 8003b9c:	20000110 	.word	0x20000110
 8003ba0:	200001f4 	.word	0x200001f4
 8003ba4:	20000204 	.word	0x20000204
 8003ba8:	200001f0 	.word	0x200001f0
 8003bac:	20000114 	.word	0x20000114
 8003bb0:	e000ed04 	.word	0xe000ed04

08003bb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d01b      	beq.n	8003bfe <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003bc6:	4b15      	ldr	r3, [pc, #84]	; (8003c1c <vTaskDelay+0x68>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <vTaskDelay+0x30>
        __asm volatile
 8003bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd2:	f383 8811 	msr	BASEPRI, r3
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	60bb      	str	r3, [r7, #8]
    }
 8003be0:	bf00      	nop
 8003be2:	e7fe      	b.n	8003be2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003be4:	f000 f880 	bl	8003ce8 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	2023      	movs	r0, #35	; 0x23
 8003bec:	f002 f9fa 	bl	8005fe4 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 fe12 	bl	800481c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003bf8:	f000 f884 	bl	8003d04 <xTaskResumeAll>
 8003bfc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d107      	bne.n	8003c14 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8003c04:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <vTaskDelay+0x6c>)
 8003c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003c14:	bf00      	nop
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20000210 	.word	0x20000210
 8003c20:	e000ed04 	.word	0xe000ed04

08003c24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003c2a:	4b27      	ldr	r3, [pc, #156]	; (8003cc8 <vTaskStartScheduler+0xa4>)
 8003c2c:	9301      	str	r3, [sp, #4]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	2300      	movs	r3, #0
 8003c34:	2282      	movs	r2, #130	; 0x82
 8003c36:	4925      	ldr	r1, [pc, #148]	; (8003ccc <vTaskStartScheduler+0xa8>)
 8003c38:	4825      	ldr	r0, [pc, #148]	; (8003cd0 <vTaskStartScheduler+0xac>)
 8003c3a:	f7ff fe57 	bl	80038ec <xTaskCreate>
 8003c3e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d102      	bne.n	8003c4c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003c46:	f000 fe61 	bl	800490c <xTimerCreateTimerTask>
 8003c4a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d124      	bne.n	8003c9c <vTaskStartScheduler+0x78>
        __asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	60bb      	str	r3, [r7, #8]
    }
 8003c64:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003c66:	4b1b      	ldr	r3, [pc, #108]	; (8003cd4 <vTaskStartScheduler+0xb0>)
 8003c68:	f04f 32ff 	mov.w	r2, #4294967295
 8003c6c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003c6e:	4b1a      	ldr	r3, [pc, #104]	; (8003cd8 <vTaskStartScheduler+0xb4>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c74:	4b19      	ldr	r3, [pc, #100]	; (8003cdc <vTaskStartScheduler+0xb8>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003c7a:	4b19      	ldr	r3, [pc, #100]	; (8003ce0 <vTaskStartScheduler+0xbc>)
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <vTaskStartScheduler+0xa4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d102      	bne.n	8003c8c <vTaskStartScheduler+0x68>
 8003c86:	f002 fe6b 	bl	8006960 <SEGGER_SYSVIEW_OnIdle>
 8003c8a:	e004      	b.n	8003c96 <vTaskStartScheduler+0x72>
 8003c8c:	4b14      	ldr	r3, [pc, #80]	; (8003ce0 <vTaskStartScheduler+0xbc>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f002 fec3 	bl	8006a1c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003c96:	f001 f9d5 	bl	8005044 <xPortStartScheduler>
 8003c9a:	e00e      	b.n	8003cba <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca2:	d10a      	bne.n	8003cba <vTaskStartScheduler+0x96>
        __asm volatile
 8003ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	607b      	str	r3, [r7, #4]
    }
 8003cb6:	bf00      	nop
 8003cb8:	e7fe      	b.n	8003cb8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003cba:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <vTaskStartScheduler+0xc0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
}
 8003cbe:	bf00      	nop
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	2000020c 	.word	0x2000020c
 8003ccc:	08006f50 	.word	0x08006f50
 8003cd0:	08004331 	.word	0x08004331
 8003cd4:	20000208 	.word	0x20000208
 8003cd8:	200001f4 	.word	0x200001f4
 8003cdc:	200001ec 	.word	0x200001ec
 8003ce0:	20000110 	.word	0x20000110
 8003ce4:	2000000c 	.word	0x2000000c

08003ce8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003cec:	4b04      	ldr	r3, [pc, #16]	; (8003d00 <vTaskSuspendAll+0x18>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	4a03      	ldr	r2, [pc, #12]	; (8003d00 <vTaskSuspendAll+0x18>)
 8003cf4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003cf6:	bf00      	nop
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	20000210 	.word	0x20000210

08003d04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003d12:	4b43      	ldr	r3, [pc, #268]	; (8003e20 <xTaskResumeAll+0x11c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10a      	bne.n	8003d30 <xTaskResumeAll+0x2c>
        __asm volatile
 8003d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1e:	f383 8811 	msr	BASEPRI, r3
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	603b      	str	r3, [r7, #0]
    }
 8003d2c:	bf00      	nop
 8003d2e:	e7fe      	b.n	8003d2e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003d30:	f001 fa2a 	bl	8005188 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003d34:	4b3a      	ldr	r3, [pc, #232]	; (8003e20 <xTaskResumeAll+0x11c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	4a39      	ldr	r2, [pc, #228]	; (8003e20 <xTaskResumeAll+0x11c>)
 8003d3c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d3e:	4b38      	ldr	r3, [pc, #224]	; (8003e20 <xTaskResumeAll+0x11c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d165      	bne.n	8003e12 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d46:	4b37      	ldr	r3, [pc, #220]	; (8003e24 <xTaskResumeAll+0x120>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d061      	beq.n	8003e12 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d4e:	e032      	b.n	8003db6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d50:	4b35      	ldr	r3, [pc, #212]	; (8003e28 <xTaskResumeAll+0x124>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	3318      	adds	r3, #24
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fe feed 	bl	8002b3c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	3304      	adds	r3, #4
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fe fee8 	bl	8002b3c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f002 fe96 	bl	8006aa0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	2201      	movs	r2, #1
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	4b2b      	ldr	r3, [pc, #172]	; (8003e2c <xTaskResumeAll+0x128>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	4a2a      	ldr	r2, [pc, #168]	; (8003e2c <xTaskResumeAll+0x128>)
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4a27      	ldr	r2, [pc, #156]	; (8003e30 <xTaskResumeAll+0x12c>)
 8003d94:	441a      	add	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	f7fe fe70 	bl	8002a82 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da6:	4b23      	ldr	r3, [pc, #140]	; (8003e34 <xTaskResumeAll+0x130>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d302      	bcc.n	8003db6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003db0:	4b21      	ldr	r3, [pc, #132]	; (8003e38 <xTaskResumeAll+0x134>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003db6:	4b1c      	ldr	r3, [pc, #112]	; (8003e28 <xTaskResumeAll+0x124>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1c8      	bne.n	8003d50 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003dc4:	f000 fb4a 	bl	800445c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003dc8:	4b1c      	ldr	r3, [pc, #112]	; (8003e3c <xTaskResumeAll+0x138>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d010      	beq.n	8003df6 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003dd4:	f000 f846 	bl	8003e64 <xTaskIncrementTick>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8003dde:	4b16      	ldr	r3, [pc, #88]	; (8003e38 <xTaskResumeAll+0x134>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f1      	bne.n	8003dd4 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003df0:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <xTaskResumeAll+0x138>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003df6:	4b10      	ldr	r3, [pc, #64]	; (8003e38 <xTaskResumeAll+0x134>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d009      	beq.n	8003e12 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003e02:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <xTaskResumeAll+0x13c>)
 8003e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003e12:	f001 f9e9 	bl	80051e8 <vPortExitCritical>

    return xAlreadyYielded;
 8003e16:	68bb      	ldr	r3, [r7, #8]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	20000210 	.word	0x20000210
 8003e24:	200001e8 	.word	0x200001e8
 8003e28:	200001a8 	.word	0x200001a8
 8003e2c:	200001f0 	.word	0x200001f0
 8003e30:	20000114 	.word	0x20000114
 8003e34:	20000110 	.word	0x20000110
 8003e38:	200001fc 	.word	0x200001fc
 8003e3c:	200001f8 	.word	0x200001f8
 8003e40:	e000ed04 	.word	0xe000ed04

08003e44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003e4a:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <xTaskGetTickCount+0x1c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003e50:	687b      	ldr	r3, [r7, #4]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	200001ec 	.word	0x200001ec

08003e64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e6e:	4b50      	ldr	r3, [pc, #320]	; (8003fb0 <xTaskIncrementTick+0x14c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f040 8092 	bne.w	8003f9c <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e78:	4b4e      	ldr	r3, [pc, #312]	; (8003fb4 <xTaskIncrementTick+0x150>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003e80:	4a4c      	ldr	r2, [pc, #304]	; (8003fb4 <xTaskIncrementTick+0x150>)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d120      	bne.n	8003ece <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003e8c:	4b4a      	ldr	r3, [pc, #296]	; (8003fb8 <xTaskIncrementTick+0x154>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <xTaskIncrementTick+0x48>
        __asm volatile
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	603b      	str	r3, [r7, #0]
    }
 8003ea8:	bf00      	nop
 8003eaa:	e7fe      	b.n	8003eaa <xTaskIncrementTick+0x46>
 8003eac:	4b42      	ldr	r3, [pc, #264]	; (8003fb8 <xTaskIncrementTick+0x154>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	4b42      	ldr	r3, [pc, #264]	; (8003fbc <xTaskIncrementTick+0x158>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a40      	ldr	r2, [pc, #256]	; (8003fb8 <xTaskIncrementTick+0x154>)
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	4a40      	ldr	r2, [pc, #256]	; (8003fbc <xTaskIncrementTick+0x158>)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	4b3f      	ldr	r3, [pc, #252]	; (8003fc0 <xTaskIncrementTick+0x15c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	4a3e      	ldr	r2, [pc, #248]	; (8003fc0 <xTaskIncrementTick+0x15c>)
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	f000 fac7 	bl	800445c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003ece:	4b3d      	ldr	r3, [pc, #244]	; (8003fc4 <xTaskIncrementTick+0x160>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d34c      	bcc.n	8003f72 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ed8:	4b37      	ldr	r3, [pc, #220]	; (8003fb8 <xTaskIncrementTick+0x154>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d104      	bne.n	8003eec <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ee2:	4b38      	ldr	r3, [pc, #224]	; (8003fc4 <xTaskIncrementTick+0x160>)
 8003ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee8:	601a      	str	r2, [r3, #0]
                    break;
 8003eea:	e042      	b.n	8003f72 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eec:	4b32      	ldr	r3, [pc, #200]	; (8003fb8 <xTaskIncrementTick+0x154>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d203      	bcs.n	8003f0c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003f04:	4a2f      	ldr	r2, [pc, #188]	; (8003fc4 <xTaskIncrementTick+0x160>)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f0a:	e032      	b.n	8003f72 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe fe13 	bl	8002b3c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d004      	beq.n	8003f28 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	3318      	adds	r3, #24
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fe fe0a 	bl	8002b3c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f002 fdb8 	bl	8006aa0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	2201      	movs	r2, #1
 8003f36:	409a      	lsls	r2, r3
 8003f38:	4b23      	ldr	r3, [pc, #140]	; (8003fc8 <xTaskIncrementTick+0x164>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	4a22      	ldr	r2, [pc, #136]	; (8003fc8 <xTaskIncrementTick+0x164>)
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f46:	4613      	mov	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4a1f      	ldr	r2, [pc, #124]	; (8003fcc <xTaskIncrementTick+0x168>)
 8003f50:	441a      	add	r2, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	3304      	adds	r3, #4
 8003f56:	4619      	mov	r1, r3
 8003f58:	4610      	mov	r0, r2
 8003f5a:	f7fe fd92 	bl	8002a82 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f62:	4b1b      	ldr	r3, [pc, #108]	; (8003fd0 <xTaskIncrementTick+0x16c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d3b5      	bcc.n	8003ed8 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f70:	e7b2      	b.n	8003ed8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f72:	4b17      	ldr	r3, [pc, #92]	; (8003fd0 <xTaskIncrementTick+0x16c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f78:	4914      	ldr	r1, [pc, #80]	; (8003fcc <xTaskIncrementTick+0x168>)
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d901      	bls.n	8003f8e <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003f8e:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <xTaskIncrementTick+0x170>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d007      	beq.n	8003fa6 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003f96:	2301      	movs	r3, #1
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	e004      	b.n	8003fa6 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003f9c:	4b0e      	ldr	r3, [pc, #56]	; (8003fd8 <xTaskIncrementTick+0x174>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	4a0d      	ldr	r2, [pc, #52]	; (8003fd8 <xTaskIncrementTick+0x174>)
 8003fa4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003fa6:	697b      	ldr	r3, [r7, #20]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20000210 	.word	0x20000210
 8003fb4:	200001ec 	.word	0x200001ec
 8003fb8:	200001a0 	.word	0x200001a0
 8003fbc:	200001a4 	.word	0x200001a4
 8003fc0:	20000200 	.word	0x20000200
 8003fc4:	20000208 	.word	0x20000208
 8003fc8:	200001f0 	.word	0x200001f0
 8003fcc:	20000114 	.word	0x20000114
 8003fd0:	20000110 	.word	0x20000110
 8003fd4:	200001fc 	.word	0x200001fc
 8003fd8:	200001f8 	.word	0x200001f8

08003fdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fe2:	4b2d      	ldr	r3, [pc, #180]	; (8004098 <vTaskSwitchContext+0xbc>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003fea:	4b2c      	ldr	r3, [pc, #176]	; (800409c <vTaskSwitchContext+0xc0>)
 8003fec:	2201      	movs	r2, #1
 8003fee:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003ff0:	e04d      	b.n	800408e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003ff2:	4b2a      	ldr	r3, [pc, #168]	; (800409c <vTaskSwitchContext+0xc0>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ff8:	4b29      	ldr	r3, [pc, #164]	; (80040a0 <vTaskSwitchContext+0xc4>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	fab3 f383 	clz	r3, r3
 8004004:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004006:	7afb      	ldrb	r3, [r7, #11]
 8004008:	f1c3 031f 	rsb	r3, r3, #31
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	4925      	ldr	r1, [pc, #148]	; (80040a4 <vTaskSwitchContext+0xc8>)
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	4613      	mov	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10a      	bne.n	8004038 <vTaskSwitchContext+0x5c>
        __asm volatile
 8004022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	607b      	str	r3, [r7, #4]
    }
 8004034:	bf00      	nop
 8004036:	e7fe      	b.n	8004036 <vTaskSwitchContext+0x5a>
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	4613      	mov	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <vTaskSwitchContext+0xc8>)
 8004044:	4413      	add	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	3308      	adds	r3, #8
 800405a:	429a      	cmp	r2, r3
 800405c:	d104      	bne.n	8004068 <vTaskSwitchContext+0x8c>
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	605a      	str	r2, [r3, #4]
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	4a0e      	ldr	r2, [pc, #56]	; (80040a8 <vTaskSwitchContext+0xcc>)
 8004070:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8004072:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <vTaskSwitchContext+0xcc>)
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	4b0d      	ldr	r3, [pc, #52]	; (80040ac <vTaskSwitchContext+0xd0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d102      	bne.n	8004084 <vTaskSwitchContext+0xa8>
 800407e:	f002 fc6f 	bl	8006960 <SEGGER_SYSVIEW_OnIdle>
}
 8004082:	e004      	b.n	800408e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8004084:	4b08      	ldr	r3, [pc, #32]	; (80040a8 <vTaskSwitchContext+0xcc>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f002 fcc7 	bl	8006a1c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800408e:	bf00      	nop
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20000210 	.word	0x20000210
 800409c:	200001fc 	.word	0x200001fc
 80040a0:	200001f0 	.word	0x200001f0
 80040a4:	20000114 	.word	0x20000114
 80040a8:	20000110 	.word	0x20000110
 80040ac:	2000020c 	.word	0x2000020c

080040b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10a      	bne.n	80040d6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	60fb      	str	r3, [r7, #12]
    }
 80040d2:	bf00      	nop
 80040d4:	e7fe      	b.n	80040d4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040d6:	4b07      	ldr	r3, [pc, #28]	; (80040f4 <vTaskPlaceOnEventList+0x44>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3318      	adds	r3, #24
 80040dc:	4619      	mov	r1, r3
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fe fcf3 	bl	8002aca <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040e4:	2101      	movs	r1, #1
 80040e6:	6838      	ldr	r0, [r7, #0]
 80040e8:	f000 fb98 	bl	800481c <prvAddCurrentTaskToDelayedList>
}
 80040ec:	bf00      	nop
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	20000110 	.word	0x20000110

080040f8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10a      	bne.n	8004120 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800410a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	617b      	str	r3, [r7, #20]
    }
 800411c:	bf00      	nop
 800411e:	e7fe      	b.n	800411e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004120:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <vTaskPlaceOnEventListRestricted+0x58>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3318      	adds	r3, #24
 8004126:	4619      	mov	r1, r3
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f7fe fcaa 	bl	8002a82 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004134:	f04f 33ff 	mov.w	r3, #4294967295
 8004138:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800413a:	2024      	movs	r0, #36	; 0x24
 800413c:	f001 ff34 	bl	8005fa8 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	68b8      	ldr	r0, [r7, #8]
 8004144:	f000 fb6a 	bl	800481c <prvAddCurrentTaskToDelayedList>
    }
 8004148:	bf00      	nop
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	20000110 	.word	0x20000110

08004154 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10a      	bne.n	8004180 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800416a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	60fb      	str	r3, [r7, #12]
    }
 800417c:	bf00      	nop
 800417e:	e7fe      	b.n	800417e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	3318      	adds	r3, #24
 8004184:	4618      	mov	r0, r3
 8004186:	f7fe fcd9 	bl	8002b3c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800418a:	4b1f      	ldr	r3, [pc, #124]	; (8004208 <xTaskRemoveFromEventList+0xb4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d120      	bne.n	80041d4 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	3304      	adds	r3, #4
 8004196:	4618      	mov	r0, r3
 8004198:	f7fe fcd0 	bl	8002b3c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	4618      	mov	r0, r3
 80041a0:	f002 fc7e 	bl	8006aa0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	2201      	movs	r2, #1
 80041aa:	409a      	lsls	r2, r3
 80041ac:	4b17      	ldr	r3, [pc, #92]	; (800420c <xTaskRemoveFromEventList+0xb8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	4a16      	ldr	r2, [pc, #88]	; (800420c <xTaskRemoveFromEventList+0xb8>)
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ba:	4613      	mov	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4a13      	ldr	r2, [pc, #76]	; (8004210 <xTaskRemoveFromEventList+0xbc>)
 80041c4:	441a      	add	r2, r3
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	3304      	adds	r3, #4
 80041ca:	4619      	mov	r1, r3
 80041cc:	4610      	mov	r0, r2
 80041ce:	f7fe fc58 	bl	8002a82 <vListInsertEnd>
 80041d2:	e005      	b.n	80041e0 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	3318      	adds	r3, #24
 80041d8:	4619      	mov	r1, r3
 80041da:	480e      	ldr	r0, [pc, #56]	; (8004214 <xTaskRemoveFromEventList+0xc0>)
 80041dc:	f7fe fc51 	bl	8002a82 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e4:	4b0c      	ldr	r3, [pc, #48]	; (8004218 <xTaskRemoveFromEventList+0xc4>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d905      	bls.n	80041fa <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80041ee:	2301      	movs	r3, #1
 80041f0:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80041f2:	4b0a      	ldr	r3, [pc, #40]	; (800421c <xTaskRemoveFromEventList+0xc8>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	e001      	b.n	80041fe <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80041fe:	697b      	ldr	r3, [r7, #20]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	20000210 	.word	0x20000210
 800420c:	200001f0 	.word	0x200001f0
 8004210:	20000114 	.word	0x20000114
 8004214:	200001a8 	.word	0x200001a8
 8004218:	20000110 	.word	0x20000110
 800421c:	200001fc 	.word	0x200001fc

08004220 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004228:	4b06      	ldr	r3, [pc, #24]	; (8004244 <vTaskInternalSetTimeOutState+0x24>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004230:	4b05      	ldr	r3, [pc, #20]	; (8004248 <vTaskInternalSetTimeOutState+0x28>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	605a      	str	r2, [r3, #4]
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	20000200 	.word	0x20000200
 8004248:	200001ec 	.word	0x200001ec

0800424c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10a      	bne.n	8004272 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800425c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	613b      	str	r3, [r7, #16]
    }
 800426e:	bf00      	nop
 8004270:	e7fe      	b.n	8004270 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	60fb      	str	r3, [r7, #12]
    }
 800428a:	bf00      	nop
 800428c:	e7fe      	b.n	800428c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800428e:	f000 ff7b 	bl	8005188 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004292:	4b1f      	ldr	r3, [pc, #124]	; (8004310 <xTaskCheckForTimeOut+0xc4>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042aa:	d102      	bne.n	80042b2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80042ac:	2300      	movs	r3, #0
 80042ae:	61fb      	str	r3, [r7, #28]
 80042b0:	e026      	b.n	8004300 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	4b17      	ldr	r3, [pc, #92]	; (8004314 <xTaskCheckForTimeOut+0xc8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d00a      	beq.n	80042d4 <xTaskCheckForTimeOut+0x88>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d305      	bcc.n	80042d4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80042c8:	2301      	movs	r3, #1
 80042ca:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	e015      	b.n	8004300 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d20b      	bcs.n	80042f6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	1ad2      	subs	r2, r2, r3
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7ff ff98 	bl	8004220 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80042f0:	2300      	movs	r3, #0
 80042f2:	61fb      	str	r3, [r7, #28]
 80042f4:	e004      	b.n	8004300 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80042fc:	2301      	movs	r3, #1
 80042fe:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004300:	f000 ff72 	bl	80051e8 <vPortExitCritical>

    return xReturn;
 8004304:	69fb      	ldr	r3, [r7, #28]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3720      	adds	r7, #32
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	200001ec 	.word	0x200001ec
 8004314:	20000200 	.word	0x20000200

08004318 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800431c:	4b03      	ldr	r3, [pc, #12]	; (800432c <vTaskMissedYield+0x14>)
 800431e:	2201      	movs	r2, #1
 8004320:	601a      	str	r2, [r3, #0]
}
 8004322:	bf00      	nop
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	200001fc 	.word	0x200001fc

08004330 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004338:	f000 f852 	bl	80043e0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <prvIdleTask+0x28>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d9f9      	bls.n	8004338 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004344:	4b05      	ldr	r3, [pc, #20]	; (800435c <prvIdleTask+0x2c>)
 8004346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004354:	e7f0      	b.n	8004338 <prvIdleTask+0x8>
 8004356:	bf00      	nop
 8004358:	20000114 	.word	0x20000114
 800435c:	e000ed04 	.word	0xe000ed04

08004360 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004366:	2300      	movs	r3, #0
 8004368:	607b      	str	r3, [r7, #4]
 800436a:	e00c      	b.n	8004386 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	4613      	mov	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4a12      	ldr	r2, [pc, #72]	; (80043c0 <prvInitialiseTaskLists+0x60>)
 8004378:	4413      	add	r3, r2
 800437a:	4618      	mov	r0, r3
 800437c:	f7fe fb54 	bl	8002a28 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3301      	adds	r3, #1
 8004384:	607b      	str	r3, [r7, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b04      	cmp	r3, #4
 800438a:	d9ef      	bls.n	800436c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800438c:	480d      	ldr	r0, [pc, #52]	; (80043c4 <prvInitialiseTaskLists+0x64>)
 800438e:	f7fe fb4b 	bl	8002a28 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004392:	480d      	ldr	r0, [pc, #52]	; (80043c8 <prvInitialiseTaskLists+0x68>)
 8004394:	f7fe fb48 	bl	8002a28 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004398:	480c      	ldr	r0, [pc, #48]	; (80043cc <prvInitialiseTaskLists+0x6c>)
 800439a:	f7fe fb45 	bl	8002a28 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800439e:	480c      	ldr	r0, [pc, #48]	; (80043d0 <prvInitialiseTaskLists+0x70>)
 80043a0:	f7fe fb42 	bl	8002a28 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80043a4:	480b      	ldr	r0, [pc, #44]	; (80043d4 <prvInitialiseTaskLists+0x74>)
 80043a6:	f7fe fb3f 	bl	8002a28 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80043aa:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <prvInitialiseTaskLists+0x78>)
 80043ac:	4a05      	ldr	r2, [pc, #20]	; (80043c4 <prvInitialiseTaskLists+0x64>)
 80043ae:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043b0:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <prvInitialiseTaskLists+0x7c>)
 80043b2:	4a05      	ldr	r2, [pc, #20]	; (80043c8 <prvInitialiseTaskLists+0x68>)
 80043b4:	601a      	str	r2, [r3, #0]
}
 80043b6:	bf00      	nop
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	20000114 	.word	0x20000114
 80043c4:	20000178 	.word	0x20000178
 80043c8:	2000018c 	.word	0x2000018c
 80043cc:	200001a8 	.word	0x200001a8
 80043d0:	200001bc 	.word	0x200001bc
 80043d4:	200001d4 	.word	0x200001d4
 80043d8:	200001a0 	.word	0x200001a0
 80043dc:	200001a4 	.word	0x200001a4

080043e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043e6:	e019      	b.n	800441c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80043e8:	f000 fece 	bl	8005188 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043ec:	4b10      	ldr	r3, [pc, #64]	; (8004430 <prvCheckTasksWaitingTermination+0x50>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3304      	adds	r3, #4
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7fe fb9f 	bl	8002b3c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80043fe:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <prvCheckTasksWaitingTermination+0x54>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3b01      	subs	r3, #1
 8004404:	4a0b      	ldr	r2, [pc, #44]	; (8004434 <prvCheckTasksWaitingTermination+0x54>)
 8004406:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004408:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <prvCheckTasksWaitingTermination+0x58>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3b01      	subs	r3, #1
 800440e:	4a0a      	ldr	r2, [pc, #40]	; (8004438 <prvCheckTasksWaitingTermination+0x58>)
 8004410:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004412:	f000 fee9 	bl	80051e8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f810 	bl	800443c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800441c:	4b06      	ldr	r3, [pc, #24]	; (8004438 <prvCheckTasksWaitingTermination+0x58>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1e1      	bne.n	80043e8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	200001bc 	.word	0x200001bc
 8004434:	200001e8 	.word	0x200001e8
 8004438:	200001d0 	.word	0x200001d0

0800443c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004448:	4618      	mov	r0, r3
 800444a:	f001 f8a7 	bl	800559c <vPortFree>
                vPortFree( pxTCB );
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f001 f8a4 	bl	800559c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004454:	bf00      	nop
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004460:	4b0a      	ldr	r3, [pc, #40]	; (800448c <prvResetNextTaskUnblockTime+0x30>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d104      	bne.n	8004474 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800446a:	4b09      	ldr	r3, [pc, #36]	; (8004490 <prvResetNextTaskUnblockTime+0x34>)
 800446c:	f04f 32ff 	mov.w	r2, #4294967295
 8004470:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004472:	e005      	b.n	8004480 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004474:	4b05      	ldr	r3, [pc, #20]	; (800448c <prvResetNextTaskUnblockTime+0x30>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a04      	ldr	r2, [pc, #16]	; (8004490 <prvResetNextTaskUnblockTime+0x34>)
 800447e:	6013      	str	r3, [r2, #0]
}
 8004480:	bf00      	nop
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	200001a0 	.word	0x200001a0
 8004490:	20000208 	.word	0x20000208

08004494 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800449a:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <xTaskGetSchedulerState+0x34>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d102      	bne.n	80044a8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80044a2:	2301      	movs	r3, #1
 80044a4:	607b      	str	r3, [r7, #4]
 80044a6:	e008      	b.n	80044ba <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044a8:	4b08      	ldr	r3, [pc, #32]	; (80044cc <xTaskGetSchedulerState+0x38>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d102      	bne.n	80044b6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80044b0:	2302      	movs	r3, #2
 80044b2:	607b      	str	r3, [r7, #4]
 80044b4:	e001      	b.n	80044ba <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80044b6:	2300      	movs	r3, #0
 80044b8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80044ba:	687b      	ldr	r3, [r7, #4]
    }
 80044bc:	4618      	mov	r0, r3
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	200001f4 	.word	0x200001f4
 80044cc:	20000210 	.word	0x20000210

080044d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80044dc:	2300      	movs	r3, #0
 80044de:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d063      	beq.n	80045ae <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ea:	4b33      	ldr	r3, [pc, #204]	; (80045b8 <xTaskPriorityInherit+0xe8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d253      	bcs.n	800459c <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	db06      	blt.n	800450a <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044fc:	4b2e      	ldr	r3, [pc, #184]	; (80045b8 <xTaskPriorityInherit+0xe8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	f1c3 0205 	rsb	r2, r3, #5
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	6959      	ldr	r1, [r3, #20]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4a28      	ldr	r2, [pc, #160]	; (80045bc <xTaskPriorityInherit+0xec>)
 800451c:	4413      	add	r3, r2
 800451e:	4299      	cmp	r1, r3
 8004520:	d12f      	bne.n	8004582 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	3304      	adds	r3, #4
 8004526:	4618      	mov	r0, r3
 8004528:	f7fe fb08 	bl	8002b3c <uxListRemove>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004536:	2201      	movs	r2, #1
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	43da      	mvns	r2, r3
 800453e:	4b20      	ldr	r3, [pc, #128]	; (80045c0 <xTaskPriorityInherit+0xf0>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4013      	ands	r3, r2
 8004544:	4a1e      	ldr	r2, [pc, #120]	; (80045c0 <xTaskPriorityInherit+0xf0>)
 8004546:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004548:	4b1b      	ldr	r3, [pc, #108]	; (80045b8 <xTaskPriorityInherit+0xe8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004556:	2201      	movs	r2, #1
 8004558:	409a      	lsls	r2, r3
 800455a:	4b19      	ldr	r3, [pc, #100]	; (80045c0 <xTaskPriorityInherit+0xf0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4313      	orrs	r3, r2
 8004560:	4a17      	ldr	r2, [pc, #92]	; (80045c0 <xTaskPriorityInherit+0xf0>)
 8004562:	6013      	str	r3, [r2, #0]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004568:	4613      	mov	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4a12      	ldr	r2, [pc, #72]	; (80045bc <xTaskPriorityInherit+0xec>)
 8004572:	441a      	add	r2, r3
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	3304      	adds	r3, #4
 8004578:	4619      	mov	r1, r3
 800457a:	4610      	mov	r0, r2
 800457c:	f7fe fa81 	bl	8002a82 <vListInsertEnd>
 8004580:	e004      	b.n	800458c <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004582:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <xTaskPriorityInherit+0xe8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4619      	mov	r1, r3
 8004590:	2049      	movs	r0, #73	; 0x49
 8004592:	f001 fd27 	bl	8005fe4 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004596:	2301      	movs	r3, #1
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	e008      	b.n	80045ae <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <xTaskPriorityInherit+0xe8>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d201      	bcs.n	80045ae <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80045aa:	2301      	movs	r3, #1
 80045ac:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80045ae:	68fb      	ldr	r3, [r7, #12]
    }
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	20000110 	.word	0x20000110
 80045bc:	20000114 	.word	0x20000114
 80045c0:	200001f0 	.word	0x200001f0

080045c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d068      	beq.n	80046ac <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80045da:	4b37      	ldr	r3, [pc, #220]	; (80046b8 <xTaskPriorityDisinherit+0xf4>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d00a      	beq.n	80045fa <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80045e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	60fb      	str	r3, [r7, #12]
    }
 80045f6:	bf00      	nop
 80045f8:	e7fe      	b.n	80045f8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	60bb      	str	r3, [r7, #8]
    }
 8004614:	bf00      	nop
 8004616:	e7fe      	b.n	8004616 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461c:	1e5a      	subs	r2, r3, #1
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800462a:	429a      	cmp	r2, r3
 800462c:	d03e      	beq.n	80046ac <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004632:	2b00      	cmp	r3, #0
 8004634:	d13a      	bne.n	80046ac <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	3304      	adds	r3, #4
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe fa7e 	bl	8002b3c <uxListRemove>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10a      	bne.n	800465c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	2201      	movs	r2, #1
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	43da      	mvns	r2, r3
 8004652:	4b1a      	ldr	r3, [pc, #104]	; (80046bc <xTaskPriorityDisinherit+0xf8>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4013      	ands	r3, r2
 8004658:	4a18      	ldr	r2, [pc, #96]	; (80046bc <xTaskPriorityDisinherit+0xf8>)
 800465a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4619      	mov	r1, r3
 8004660:	204a      	movs	r0, #74	; 0x4a
 8004662:	f001 fcbf 	bl	8005fe4 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004672:	f1c3 0205 	rsb	r2, r3, #5
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	2201      	movs	r2, #1
 8004680:	409a      	lsls	r2, r3
 8004682:	4b0e      	ldr	r3, [pc, #56]	; (80046bc <xTaskPriorityDisinherit+0xf8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4313      	orrs	r3, r2
 8004688:	4a0c      	ldr	r2, [pc, #48]	; (80046bc <xTaskPriorityDisinherit+0xf8>)
 800468a:	6013      	str	r3, [r2, #0]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004690:	4613      	mov	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4a09      	ldr	r2, [pc, #36]	; (80046c0 <xTaskPriorityDisinherit+0xfc>)
 800469a:	441a      	add	r2, r3
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	3304      	adds	r3, #4
 80046a0:	4619      	mov	r1, r3
 80046a2:	4610      	mov	r0, r2
 80046a4:	f7fe f9ed 	bl	8002a82 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80046a8:	2301      	movs	r3, #1
 80046aa:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80046ac:	697b      	ldr	r3, [r7, #20]
    }
 80046ae:	4618      	mov	r0, r3
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20000110 	.word	0x20000110
 80046bc:	200001f0 	.word	0x200001f0
 80046c0:	20000114 	.word	0x20000114

080046c4 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80046d2:	2301      	movs	r3, #1
 80046d4:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 8081 	beq.w	80047e0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10a      	bne.n	80046fc <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 80046e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ea:	f383 8811 	msr	BASEPRI, r3
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	60fb      	str	r3, [r7, #12]
    }
 80046f8:	bf00      	nop
 80046fa:	e7fe      	b.n	80046fa <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d902      	bls.n	800470c <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	e002      	b.n	8004712 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004710:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	429a      	cmp	r2, r3
 800471a:	d061      	beq.n	80047e0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	429a      	cmp	r2, r3
 8004724:	d15c      	bne.n	80047e0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004726:	4b30      	ldr	r3, [pc, #192]	; (80047e8 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	429a      	cmp	r2, r3
 800472e:	d10a      	bne.n	8004746 <vTaskPriorityDisinheritAfterTimeout+0x82>
        __asm volatile
 8004730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004734:	f383 8811 	msr	BASEPRI, r3
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	60bb      	str	r3, [r7, #8]
    }
 8004742:	bf00      	nop
 8004744:	e7fe      	b.n	8004744 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4619      	mov	r1, r3
 800474a:	204a      	movs	r0, #74	; 0x4a
 800474c:	f001 fc4a 	bl	8005fe4 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004754:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	69fa      	ldr	r2, [r7, #28]
 800475a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	2b00      	cmp	r3, #0
 8004762:	db04      	blt.n	800476e <vTaskPriorityDisinheritAfterTimeout+0xaa>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f1c3 0205 	rsb	r2, r3, #5
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	6959      	ldr	r1, [r3, #20]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4613      	mov	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4a1b      	ldr	r2, [pc, #108]	; (80047ec <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800477e:	4413      	add	r3, r2
 8004780:	4299      	cmp	r1, r3
 8004782:	d12d      	bne.n	80047e0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	3304      	adds	r3, #4
 8004788:	4618      	mov	r0, r3
 800478a:	f7fe f9d7 	bl	8002b3c <uxListRemove>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10a      	bne.n	80047aa <vTaskPriorityDisinheritAfterTimeout+0xe6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	2201      	movs	r2, #1
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	43da      	mvns	r2, r3
 80047a0:	4b13      	ldr	r3, [pc, #76]	; (80047f0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4013      	ands	r3, r2
 80047a6:	4a12      	ldr	r2, [pc, #72]	; (80047f0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80047a8:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f002 f977 	bl	8006aa0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b6:	2201      	movs	r2, #1
 80047b8:	409a      	lsls	r2, r3
 80047ba:	4b0d      	ldr	r3, [pc, #52]	; (80047f0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4313      	orrs	r3, r2
 80047c0:	4a0b      	ldr	r2, [pc, #44]	; (80047f0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80047c2:	6013      	str	r3, [r2, #0]
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4a06      	ldr	r2, [pc, #24]	; (80047ec <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80047d2:	441a      	add	r2, r3
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	3304      	adds	r3, #4
 80047d8:	4619      	mov	r1, r3
 80047da:	4610      	mov	r0, r2
 80047dc:	f7fe f951 	bl	8002a82 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80047e0:	bf00      	nop
 80047e2:	3720      	adds	r7, #32
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	20000110 	.word	0x20000110
 80047ec:	20000114 	.word	0x20000114
 80047f0:	200001f0 	.word	0x200001f0

080047f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80047f8:	4b07      	ldr	r3, [pc, #28]	; (8004818 <pvTaskIncrementMutexHeldCount+0x24>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d004      	beq.n	800480a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <pvTaskIncrementMutexHeldCount+0x24>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004806:	3201      	adds	r2, #1
 8004808:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 800480a:	4b03      	ldr	r3, [pc, #12]	; (8004818 <pvTaskIncrementMutexHeldCount+0x24>)
 800480c:	681b      	ldr	r3, [r3, #0]
    }
 800480e:	4618      	mov	r0, r3
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	20000110 	.word	0x20000110

0800481c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004826:	4b32      	ldr	r3, [pc, #200]	; (80048f0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800482c:	4b31      	ldr	r3, [pc, #196]	; (80048f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3304      	adds	r3, #4
 8004832:	4618      	mov	r0, r3
 8004834:	f7fe f982 	bl	8002b3c <uxListRemove>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10b      	bne.n	8004856 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800483e:	4b2d      	ldr	r3, [pc, #180]	; (80048f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	2201      	movs	r2, #1
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43da      	mvns	r2, r3
 800484c:	4b2a      	ldr	r3, [pc, #168]	; (80048f8 <prvAddCurrentTaskToDelayedList+0xdc>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4013      	ands	r3, r2
 8004852:	4a29      	ldr	r2, [pc, #164]	; (80048f8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004854:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485c:	d110      	bne.n	8004880 <prvAddCurrentTaskToDelayedList+0x64>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00d      	beq.n	8004880 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8004864:	4b23      	ldr	r3, [pc, #140]	; (80048f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	211b      	movs	r1, #27
 800486a:	4618      	mov	r0, r3
 800486c:	f002 f95a 	bl	8006b24 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004870:	4b20      	ldr	r3, [pc, #128]	; (80048f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3304      	adds	r3, #4
 8004876:	4619      	mov	r1, r3
 8004878:	4820      	ldr	r0, [pc, #128]	; (80048fc <prvAddCurrentTaskToDelayedList+0xe0>)
 800487a:	f7fe f902 	bl	8002a82 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800487e:	e032      	b.n	80048e6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4413      	add	r3, r2
 8004886:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004888:	4b1a      	ldr	r3, [pc, #104]	; (80048f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	429a      	cmp	r2, r3
 8004896:	d20f      	bcs.n	80048b8 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004898:	4b16      	ldr	r3, [pc, #88]	; (80048f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2104      	movs	r1, #4
 800489e:	4618      	mov	r0, r3
 80048a0:	f002 f940 	bl	8006b24 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048a4:	4b16      	ldr	r3, [pc, #88]	; (8004900 <prvAddCurrentTaskToDelayedList+0xe4>)
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	4b12      	ldr	r3, [pc, #72]	; (80048f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	3304      	adds	r3, #4
 80048ae:	4619      	mov	r1, r3
 80048b0:	4610      	mov	r0, r2
 80048b2:	f7fe f90a 	bl	8002aca <vListInsert>
}
 80048b6:	e016      	b.n	80048e6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80048b8:	4b0e      	ldr	r3, [pc, #56]	; (80048f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2104      	movs	r1, #4
 80048be:	4618      	mov	r0, r3
 80048c0:	f002 f930 	bl	8006b24 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048c4:	4b0f      	ldr	r3, [pc, #60]	; (8004904 <prvAddCurrentTaskToDelayedList+0xe8>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3304      	adds	r3, #4
 80048ce:	4619      	mov	r1, r3
 80048d0:	4610      	mov	r0, r2
 80048d2:	f7fe f8fa 	bl	8002aca <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80048d6:	4b0c      	ldr	r3, [pc, #48]	; (8004908 <prvAddCurrentTaskToDelayedList+0xec>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d202      	bcs.n	80048e6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80048e0:	4a09      	ldr	r2, [pc, #36]	; (8004908 <prvAddCurrentTaskToDelayedList+0xec>)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	6013      	str	r3, [r2, #0]
}
 80048e6:	bf00      	nop
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	200001ec 	.word	0x200001ec
 80048f4:	20000110 	.word	0x20000110
 80048f8:	200001f0 	.word	0x200001f0
 80048fc:	200001d4 	.word	0x200001d4
 8004900:	200001a4 	.word	0x200001a4
 8004904:	200001a0 	.word	0x200001a0
 8004908:	20000208 	.word	0x20000208

0800490c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004912:	2300      	movs	r3, #0
 8004914:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004916:	f000 fad5 	bl	8004ec4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800491a:	4b11      	ldr	r3, [pc, #68]	; (8004960 <xTimerCreateTimerTask+0x54>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00b      	beq.n	800493a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004922:	4b10      	ldr	r3, [pc, #64]	; (8004964 <xTimerCreateTimerTask+0x58>)
 8004924:	9301      	str	r3, [sp, #4]
 8004926:	2302      	movs	r3, #2
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	2300      	movs	r3, #0
 800492c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004930:	490d      	ldr	r1, [pc, #52]	; (8004968 <xTimerCreateTimerTask+0x5c>)
 8004932:	480e      	ldr	r0, [pc, #56]	; (800496c <xTimerCreateTimerTask+0x60>)
 8004934:	f7fe ffda 	bl	80038ec <xTaskCreate>
 8004938:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10a      	bne.n	8004956 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	603b      	str	r3, [r7, #0]
    }
 8004952:	bf00      	nop
 8004954:	e7fe      	b.n	8004954 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004956:	687b      	ldr	r3, [r7, #4]
    }
 8004958:	4618      	mov	r0, r3
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	20000244 	.word	0x20000244
 8004964:	20000248 	.word	0x20000248
 8004968:	08006f58 	.word	0x08006f58
 800496c:	08004aa5 	.word	0x08004aa5

08004970 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004970:	b580      	push	{r7, lr}
 8004972:	b08a      	sub	sp, #40	; 0x28
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800497e:	2300      	movs	r3, #0
 8004980:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10a      	bne.n	800499e <xTimerGenericCommand+0x2e>
        __asm volatile
 8004988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	623b      	str	r3, [r7, #32]
    }
 800499a:	bf00      	nop
 800499c:	e7fe      	b.n	800499c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800499e:	4b1a      	ldr	r3, [pc, #104]	; (8004a08 <xTimerGenericCommand+0x98>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d02a      	beq.n	80049fc <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b05      	cmp	r3, #5
 80049b6:	dc18      	bgt.n	80049ea <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80049b8:	f7ff fd6c 	bl	8004494 <xTaskGetSchedulerState>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d109      	bne.n	80049d6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80049c2:	4b11      	ldr	r3, [pc, #68]	; (8004a08 <xTimerGenericCommand+0x98>)
 80049c4:	6818      	ldr	r0, [r3, #0]
 80049c6:	f107 0114 	add.w	r1, r7, #20
 80049ca:	2300      	movs	r3, #0
 80049cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ce:	f7fe f9cf 	bl	8002d70 <xQueueGenericSend>
 80049d2:	6278      	str	r0, [r7, #36]	; 0x24
 80049d4:	e012      	b.n	80049fc <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80049d6:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <xTimerGenericCommand+0x98>)
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	f107 0114 	add.w	r1, r7, #20
 80049de:	2300      	movs	r3, #0
 80049e0:	2200      	movs	r2, #0
 80049e2:	f7fe f9c5 	bl	8002d70 <xQueueGenericSend>
 80049e6:	6278      	str	r0, [r7, #36]	; 0x24
 80049e8:	e008      	b.n	80049fc <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80049ea:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <xTimerGenericCommand+0x98>)
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	f107 0114 	add.w	r1, r7, #20
 80049f2:	2300      	movs	r3, #0
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	f7fe fae1 	bl	8002fbc <xQueueGenericSendFromISR>
 80049fa:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80049fe:	4618      	mov	r0, r3
 8004a00:	3728      	adds	r7, #40	; 0x28
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000244 	.word	0x20000244

08004a0c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af02      	add	r7, sp, #8
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a16:	4b22      	ldr	r3, [pc, #136]	; (8004aa0 <prvProcessExpiredTimer+0x94>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	3304      	adds	r3, #4
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fe f889 	bl	8002b3c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d022      	beq.n	8004a7e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	699a      	ldr	r2, [r3, #24]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	18d1      	adds	r1, r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	6978      	ldr	r0, [r7, #20]
 8004a46:	f000 f8d1 	bl	8004bec <prvInsertTimerInActiveList>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d01f      	beq.n	8004a90 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a50:	2300      	movs	r3, #0
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	2300      	movs	r3, #0
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	2100      	movs	r1, #0
 8004a5a:	6978      	ldr	r0, [r7, #20]
 8004a5c:	f7ff ff88 	bl	8004970 <xTimerGenericCommand>
 8004a60:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d113      	bne.n	8004a90 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6c:	f383 8811 	msr	BASEPRI, r3
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	60fb      	str	r3, [r7, #12]
    }
 8004a7a:	bf00      	nop
 8004a7c:	e7fe      	b.n	8004a7c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a84:	f023 0301 	bic.w	r3, r3, #1
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	6978      	ldr	r0, [r7, #20]
 8004a96:	4798      	blx	r3
    }
 8004a98:	bf00      	nop
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	2000023c 	.word	0x2000023c

08004aa4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004aac:	f107 0308 	add.w	r3, r7, #8
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 f857 	bl	8004b64 <prvGetNextExpireTime>
 8004ab6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	4619      	mov	r1, r3
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 f803 	bl	8004ac8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004ac2:	f000 f8d5 	bl	8004c70 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ac6:	e7f1      	b.n	8004aac <prvTimerTask+0x8>

08004ac8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004ad2:	f7ff f909 	bl	8003ce8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ad6:	f107 0308 	add.w	r3, r7, #8
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 f866 	bl	8004bac <prvSampleTimeNow>
 8004ae0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d130      	bne.n	8004b4a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10a      	bne.n	8004b04 <prvProcessTimerOrBlockTask+0x3c>
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d806      	bhi.n	8004b04 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004af6:	f7ff f905 	bl	8003d04 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004afa:	68f9      	ldr	r1, [r7, #12]
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7ff ff85 	bl	8004a0c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004b02:	e024      	b.n	8004b4e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d008      	beq.n	8004b1c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b0a:	4b13      	ldr	r3, [pc, #76]	; (8004b58 <prvProcessTimerOrBlockTask+0x90>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <prvProcessTimerOrBlockTask+0x50>
 8004b14:	2301      	movs	r3, #1
 8004b16:	e000      	b.n	8004b1a <prvProcessTimerOrBlockTask+0x52>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b1c:	4b0f      	ldr	r3, [pc, #60]	; (8004b5c <prvProcessTimerOrBlockTask+0x94>)
 8004b1e:	6818      	ldr	r0, [r3, #0]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	4619      	mov	r1, r3
 8004b2a:	f7fe feab 	bl	8003884 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004b2e:	f7ff f8e9 	bl	8003d04 <xTaskResumeAll>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10a      	bne.n	8004b4e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004b38:	4b09      	ldr	r3, [pc, #36]	; (8004b60 <prvProcessTimerOrBlockTask+0x98>)
 8004b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	f3bf 8f6f 	isb	sy
    }
 8004b48:	e001      	b.n	8004b4e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004b4a:	f7ff f8db 	bl	8003d04 <xTaskResumeAll>
    }
 8004b4e:	bf00      	nop
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	20000240 	.word	0x20000240
 8004b5c:	20000244 	.word	0x20000244
 8004b60:	e000ed04 	.word	0xe000ed04

08004b64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ba8 <prvGetNextExpireTime+0x44>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <prvGetNextExpireTime+0x16>
 8004b76:	2201      	movs	r2, #1
 8004b78:	e000      	b.n	8004b7c <prvGetNextExpireTime+0x18>
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d105      	bne.n	8004b94 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b88:	4b07      	ldr	r3, [pc, #28]	; (8004ba8 <prvGetNextExpireTime+0x44>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	60fb      	str	r3, [r7, #12]
 8004b92:	e001      	b.n	8004b98 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004b98:	68fb      	ldr	r3, [r7, #12]
    }
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	2000023c 	.word	0x2000023c

08004bac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004bb4:	f7ff f946 	bl	8003e44 <xTaskGetTickCount>
 8004bb8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004bba:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <prvSampleTimeNow+0x3c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d205      	bcs.n	8004bd0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004bc4:	f000 f91a 	bl	8004dfc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	e002      	b.n	8004bd6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004bd6:	4a04      	ldr	r2, [pc, #16]	; (8004be8 <prvSampleTimeNow+0x3c>)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
    }
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	2000024c 	.word	0x2000024c

08004bec <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d812      	bhi.n	8004c38 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	1ad2      	subs	r2, r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d302      	bcc.n	8004c26 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004c20:	2301      	movs	r3, #1
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	e01b      	b.n	8004c5e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c26:	4b10      	ldr	r3, [pc, #64]	; (8004c68 <prvInsertTimerInActiveList+0x7c>)
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	4619      	mov	r1, r3
 8004c30:	4610      	mov	r0, r2
 8004c32:	f7fd ff4a 	bl	8002aca <vListInsert>
 8004c36:	e012      	b.n	8004c5e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d206      	bcs.n	8004c4e <prvInsertTimerInActiveList+0x62>
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d302      	bcc.n	8004c4e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	e007      	b.n	8004c5e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c4e:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <prvInsertTimerInActiveList+0x80>)
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	3304      	adds	r3, #4
 8004c56:	4619      	mov	r1, r3
 8004c58:	4610      	mov	r0, r2
 8004c5a:	f7fd ff36 	bl	8002aca <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004c5e:	697b      	ldr	r3, [r7, #20]
    }
 8004c60:	4618      	mov	r0, r3
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	20000240 	.word	0x20000240
 8004c6c:	2000023c 	.word	0x2000023c

08004c70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b08c      	sub	sp, #48	; 0x30
 8004c74:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c76:	e0ae      	b.n	8004dd6 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f2c0 80ab 	blt.w	8004dd6 <prvProcessReceivedCommands+0x166>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d004      	beq.n	8004c96 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	3304      	adds	r3, #4
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fd ff53 	bl	8002b3c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c96:	1d3b      	adds	r3, r7, #4
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff ff87 	bl	8004bac <prvSampleTimeNow>
 8004c9e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b09      	cmp	r3, #9
 8004ca4:	f200 8096 	bhi.w	8004dd4 <prvProcessReceivedCommands+0x164>
 8004ca8:	a201      	add	r2, pc, #4	; (adr r2, 8004cb0 <prvProcessReceivedCommands+0x40>)
 8004caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cae:	bf00      	nop
 8004cb0:	08004cd9 	.word	0x08004cd9
 8004cb4:	08004cd9 	.word	0x08004cd9
 8004cb8:	08004cd9 	.word	0x08004cd9
 8004cbc:	08004d4d 	.word	0x08004d4d
 8004cc0:	08004d61 	.word	0x08004d61
 8004cc4:	08004dab 	.word	0x08004dab
 8004cc8:	08004cd9 	.word	0x08004cd9
 8004ccc:	08004cd9 	.word	0x08004cd9
 8004cd0:	08004d4d 	.word	0x08004d4d
 8004cd4:	08004d61 	.word	0x08004d61
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cde:	f043 0301 	orr.w	r3, r3, #1
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	18d1      	adds	r1, r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a3a      	ldr	r2, [r7, #32]
 8004cf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cf8:	f7ff ff78 	bl	8004bec <prvInsertTimerInActiveList>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d069      	beq.n	8004dd6 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d08:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d05e      	beq.n	8004dd6 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	441a      	add	r2, r3
 8004d20:	2300      	movs	r3, #0
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	2300      	movs	r3, #0
 8004d26:	2100      	movs	r1, #0
 8004d28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d2a:	f7ff fe21 	bl	8004970 <xTimerGenericCommand>
 8004d2e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d14f      	bne.n	8004dd6 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	61bb      	str	r3, [r7, #24]
    }
 8004d48:	bf00      	nop
 8004d4a:	e7fe      	b.n	8004d4a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d52:	f023 0301 	bic.w	r3, r3, #1
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004d5e:	e03a      	b.n	8004dd6 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d66:	f043 0301 	orr.w	r3, r3, #1
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	617b      	str	r3, [r7, #20]
    }
 8004d92:	bf00      	nop
 8004d94:	e7fe      	b.n	8004d94 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	699a      	ldr	r2, [r3, #24]
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	18d1      	adds	r1, r2, r3
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	6a3a      	ldr	r2, [r7, #32]
 8004da2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004da4:	f7ff ff22 	bl	8004bec <prvInsertTimerInActiveList>
                        break;
 8004da8:	e015      	b.n	8004dd6 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d103      	bne.n	8004dc0 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004db8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dba:	f000 fbef 	bl	800559c <vPortFree>
 8004dbe:	e00a      	b.n	8004dd6 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dc6:	f023 0301 	bic.w	r3, r3, #1
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004dd2:	e000      	b.n	8004dd6 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004dd4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004dd6:	4b08      	ldr	r3, [pc, #32]	; (8004df8 <prvProcessReceivedCommands+0x188>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f107 0108 	add.w	r1, r7, #8
 8004dde:	2200      	movs	r2, #0
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fe f9a9 	bl	8003138 <xQueueReceive>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f47f af45 	bne.w	8004c78 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004dee:	bf00      	nop
 8004df0:	bf00      	nop
 8004df2:	3728      	adds	r7, #40	; 0x28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	20000244 	.word	0x20000244

08004dfc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b088      	sub	sp, #32
 8004e00:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e02:	e048      	b.n	8004e96 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e04:	4b2d      	ldr	r3, [pc, #180]	; (8004ebc <prvSwitchTimerLists+0xc0>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e0e:	4b2b      	ldr	r3, [pc, #172]	; (8004ebc <prvSwitchTimerLists+0xc0>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fd fe8d 	bl	8002b3c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d02e      	beq.n	8004e96 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4413      	add	r3, r2
 8004e40:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d90e      	bls.n	8004e68 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e56:	4b19      	ldr	r3, [pc, #100]	; (8004ebc <prvSwitchTimerLists+0xc0>)
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4610      	mov	r0, r2
 8004e62:	f7fd fe32 	bl	8002aca <vListInsert>
 8004e66:	e016      	b.n	8004e96 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e68:	2300      	movs	r3, #0
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	2100      	movs	r1, #0
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f7ff fd7c 	bl	8004970 <xTimerGenericCommand>
 8004e78:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	603b      	str	r3, [r7, #0]
    }
 8004e92:	bf00      	nop
 8004e94:	e7fe      	b.n	8004e94 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e96:	4b09      	ldr	r3, [pc, #36]	; (8004ebc <prvSwitchTimerLists+0xc0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1b1      	bne.n	8004e04 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004ea0:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <prvSwitchTimerLists+0xc0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004ea6:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <prvSwitchTimerLists+0xc4>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a04      	ldr	r2, [pc, #16]	; (8004ebc <prvSwitchTimerLists+0xc0>)
 8004eac:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004eae:	4a04      	ldr	r2, [pc, #16]	; (8004ec0 <prvSwitchTimerLists+0xc4>)
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	6013      	str	r3, [r2, #0]
    }
 8004eb4:	bf00      	nop
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	2000023c 	.word	0x2000023c
 8004ec0:	20000240 	.word	0x20000240

08004ec4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004ec8:	f000 f95e 	bl	8005188 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004ecc:	4b12      	ldr	r3, [pc, #72]	; (8004f18 <prvCheckForValidListAndQueue+0x54>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d11d      	bne.n	8004f10 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004ed4:	4811      	ldr	r0, [pc, #68]	; (8004f1c <prvCheckForValidListAndQueue+0x58>)
 8004ed6:	f7fd fda7 	bl	8002a28 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004eda:	4811      	ldr	r0, [pc, #68]	; (8004f20 <prvCheckForValidListAndQueue+0x5c>)
 8004edc:	f7fd fda4 	bl	8002a28 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004ee0:	4b10      	ldr	r3, [pc, #64]	; (8004f24 <prvCheckForValidListAndQueue+0x60>)
 8004ee2:	4a0e      	ldr	r2, [pc, #56]	; (8004f1c <prvCheckForValidListAndQueue+0x58>)
 8004ee4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004ee6:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <prvCheckForValidListAndQueue+0x64>)
 8004ee8:	4a0d      	ldr	r2, [pc, #52]	; (8004f20 <prvCheckForValidListAndQueue+0x5c>)
 8004eea:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004eec:	2200      	movs	r2, #0
 8004eee:	210c      	movs	r1, #12
 8004ef0:	200a      	movs	r0, #10
 8004ef2:	f7fd feb5 	bl	8002c60 <xQueueGenericCreate>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	4a07      	ldr	r2, [pc, #28]	; (8004f18 <prvCheckForValidListAndQueue+0x54>)
 8004efa:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004efc:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <prvCheckForValidListAndQueue+0x54>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d005      	beq.n	8004f10 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f04:	4b04      	ldr	r3, [pc, #16]	; (8004f18 <prvCheckForValidListAndQueue+0x54>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4908      	ldr	r1, [pc, #32]	; (8004f2c <prvCheckForValidListAndQueue+0x68>)
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fe fc88 	bl	8003820 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004f10:	f000 f96a 	bl	80051e8 <vPortExitCritical>
    }
 8004f14:	bf00      	nop
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	20000244 	.word	0x20000244
 8004f1c:	20000214 	.word	0x20000214
 8004f20:	20000228 	.word	0x20000228
 8004f24:	2000023c 	.word	0x2000023c
 8004f28:	20000240 	.word	0x20000240
 8004f2c:	08006f60 	.word	0x08006f60

08004f30 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	3b04      	subs	r3, #4
 8004f40:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f48:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3b04      	subs	r3, #4
 8004f4e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f023 0201 	bic.w	r2, r3, #1
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3b04      	subs	r3, #4
 8004f5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004f60:	4a0c      	ldr	r2, [pc, #48]	; (8004f94 <pxPortInitialiseStack+0x64>)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	3b14      	subs	r3, #20
 8004f6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	3b04      	subs	r3, #4
 8004f76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f06f 0202 	mvn.w	r2, #2
 8004f7e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3b20      	subs	r3, #32
 8004f84:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004f86:	68fb      	ldr	r3, [r7, #12]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	08004f99 	.word	0x08004f99

08004f98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004fa2:	4b12      	ldr	r3, [pc, #72]	; (8004fec <prvTaskExitError+0x54>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004faa:	d00a      	beq.n	8004fc2 <prvTaskExitError+0x2a>
        __asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	60fb      	str	r3, [r7, #12]
    }
 8004fbe:	bf00      	nop
 8004fc0:	e7fe      	b.n	8004fc0 <prvTaskExitError+0x28>
        __asm volatile
 8004fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	60bb      	str	r3, [r7, #8]
    }
 8004fd4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004fd6:	bf00      	nop
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0fc      	beq.n	8004fd8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004fde:	bf00      	nop
 8004fe0:	bf00      	nop
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	20000010 	.word	0x20000010

08004ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004ff0:	4b07      	ldr	r3, [pc, #28]	; (8005010 <pxCurrentTCBConst2>)
 8004ff2:	6819      	ldr	r1, [r3, #0]
 8004ff4:	6808      	ldr	r0, [r1, #0]
 8004ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ffa:	f380 8809 	msr	PSP, r0
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f04f 0000 	mov.w	r0, #0
 8005006:	f380 8811 	msr	BASEPRI, r0
 800500a:	4770      	bx	lr
 800500c:	f3af 8000 	nop.w

08005010 <pxCurrentTCBConst2>:
 8005010:	20000110 	.word	0x20000110
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop

08005018 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005018:	4808      	ldr	r0, [pc, #32]	; (800503c <prvPortStartFirstTask+0x24>)
 800501a:	6800      	ldr	r0, [r0, #0]
 800501c:	6800      	ldr	r0, [r0, #0]
 800501e:	f380 8808 	msr	MSP, r0
 8005022:	f04f 0000 	mov.w	r0, #0
 8005026:	f380 8814 	msr	CONTROL, r0
 800502a:	b662      	cpsie	i
 800502c:	b661      	cpsie	f
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	df00      	svc	0
 8005038:	bf00      	nop
 800503a:	0000      	.short	0x0000
 800503c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005040:	bf00      	nop
 8005042:	bf00      	nop

08005044 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800504a:	4b46      	ldr	r3, [pc, #280]	; (8005164 <xPortStartScheduler+0x120>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a46      	ldr	r2, [pc, #280]	; (8005168 <xPortStartScheduler+0x124>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d10a      	bne.n	800506a <xPortStartScheduler+0x26>
        __asm volatile
 8005054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005058:	f383 8811 	msr	BASEPRI, r3
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	613b      	str	r3, [r7, #16]
    }
 8005066:	bf00      	nop
 8005068:	e7fe      	b.n	8005068 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800506a:	4b3e      	ldr	r3, [pc, #248]	; (8005164 <xPortStartScheduler+0x120>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a3f      	ldr	r2, [pc, #252]	; (800516c <xPortStartScheduler+0x128>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d10a      	bne.n	800508a <xPortStartScheduler+0x46>
        __asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	60fb      	str	r3, [r7, #12]
    }
 8005086:	bf00      	nop
 8005088:	e7fe      	b.n	8005088 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800508a:	4b39      	ldr	r3, [pc, #228]	; (8005170 <xPortStartScheduler+0x12c>)
 800508c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	b2db      	uxtb	r3, r3
 8005094:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	22ff      	movs	r2, #255	; 0xff
 800509a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050a4:	78fb      	ldrb	r3, [r7, #3]
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	4b31      	ldr	r3, [pc, #196]	; (8005174 <xPortStartScheduler+0x130>)
 80050b0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050b2:	4b31      	ldr	r3, [pc, #196]	; (8005178 <xPortStartScheduler+0x134>)
 80050b4:	2207      	movs	r2, #7
 80050b6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050b8:	e009      	b.n	80050ce <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80050ba:	4b2f      	ldr	r3, [pc, #188]	; (8005178 <xPortStartScheduler+0x134>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3b01      	subs	r3, #1
 80050c0:	4a2d      	ldr	r2, [pc, #180]	; (8005178 <xPortStartScheduler+0x134>)
 80050c2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050c4:	78fb      	ldrb	r3, [r7, #3]
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050ce:	78fb      	ldrb	r3, [r7, #3]
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d6:	2b80      	cmp	r3, #128	; 0x80
 80050d8:	d0ef      	beq.n	80050ba <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050da:	4b27      	ldr	r3, [pc, #156]	; (8005178 <xPortStartScheduler+0x134>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f1c3 0307 	rsb	r3, r3, #7
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d00a      	beq.n	80050fc <xPortStartScheduler+0xb8>
        __asm volatile
 80050e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ea:	f383 8811 	msr	BASEPRI, r3
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	60bb      	str	r3, [r7, #8]
    }
 80050f8:	bf00      	nop
 80050fa:	e7fe      	b.n	80050fa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050fc:	4b1e      	ldr	r3, [pc, #120]	; (8005178 <xPortStartScheduler+0x134>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	021b      	lsls	r3, r3, #8
 8005102:	4a1d      	ldr	r2, [pc, #116]	; (8005178 <xPortStartScheduler+0x134>)
 8005104:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005106:	4b1c      	ldr	r3, [pc, #112]	; (8005178 <xPortStartScheduler+0x134>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800510e:	4a1a      	ldr	r2, [pc, #104]	; (8005178 <xPortStartScheduler+0x134>)
 8005110:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	b2da      	uxtb	r2, r3
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800511a:	4b18      	ldr	r3, [pc, #96]	; (800517c <xPortStartScheduler+0x138>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a17      	ldr	r2, [pc, #92]	; (800517c <xPortStartScheduler+0x138>)
 8005120:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005124:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005126:	4b15      	ldr	r3, [pc, #84]	; (800517c <xPortStartScheduler+0x138>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a14      	ldr	r2, [pc, #80]	; (800517c <xPortStartScheduler+0x138>)
 800512c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005130:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005132:	f000 f8e3 	bl	80052fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005136:	4b12      	ldr	r3, [pc, #72]	; (8005180 <xPortStartScheduler+0x13c>)
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800513c:	f000 f902 	bl	8005344 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005140:	4b10      	ldr	r3, [pc, #64]	; (8005184 <xPortStartScheduler+0x140>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a0f      	ldr	r2, [pc, #60]	; (8005184 <xPortStartScheduler+0x140>)
 8005146:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800514a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800514c:	f7ff ff64 	bl	8005018 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005150:	f7fe ff44 	bl	8003fdc <vTaskSwitchContext>
    prvTaskExitError();
 8005154:	f7ff ff20 	bl	8004f98 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	e000ed00 	.word	0xe000ed00
 8005168:	410fc271 	.word	0x410fc271
 800516c:	410fc270 	.word	0x410fc270
 8005170:	e000e400 	.word	0xe000e400
 8005174:	20000250 	.word	0x20000250
 8005178:	20000254 	.word	0x20000254
 800517c:	e000ed20 	.word	0xe000ed20
 8005180:	20000010 	.word	0x20000010
 8005184:	e000ef34 	.word	0xe000ef34

08005188 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
        __asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	607b      	str	r3, [r7, #4]
    }
 80051a0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80051a2:	4b0f      	ldr	r3, [pc, #60]	; (80051e0 <vPortEnterCritical+0x58>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3301      	adds	r3, #1
 80051a8:	4a0d      	ldr	r2, [pc, #52]	; (80051e0 <vPortEnterCritical+0x58>)
 80051aa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80051ac:	4b0c      	ldr	r3, [pc, #48]	; (80051e0 <vPortEnterCritical+0x58>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d10f      	bne.n	80051d4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051b4:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <vPortEnterCritical+0x5c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <vPortEnterCritical+0x4c>
        __asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	603b      	str	r3, [r7, #0]
    }
 80051d0:	bf00      	nop
 80051d2:	e7fe      	b.n	80051d2 <vPortEnterCritical+0x4a>
    }
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	20000010 	.word	0x20000010
 80051e4:	e000ed04 	.word	0xe000ed04

080051e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80051ee:	4b12      	ldr	r3, [pc, #72]	; (8005238 <vPortExitCritical+0x50>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10a      	bne.n	800520c <vPortExitCritical+0x24>
        __asm volatile
 80051f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fa:	f383 8811 	msr	BASEPRI, r3
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	607b      	str	r3, [r7, #4]
    }
 8005208:	bf00      	nop
 800520a:	e7fe      	b.n	800520a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800520c:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <vPortExitCritical+0x50>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	3b01      	subs	r3, #1
 8005212:	4a09      	ldr	r2, [pc, #36]	; (8005238 <vPortExitCritical+0x50>)
 8005214:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005216:	4b08      	ldr	r3, [pc, #32]	; (8005238 <vPortExitCritical+0x50>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d105      	bne.n	800522a <vPortExitCritical+0x42>
 800521e:	2300      	movs	r3, #0
 8005220:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	f383 8811 	msr	BASEPRI, r3
    }
 8005228:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	20000010 	.word	0x20000010
 800523c:	00000000 	.word	0x00000000

08005240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005240:	f3ef 8009 	mrs	r0, PSP
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	4b15      	ldr	r3, [pc, #84]	; (80052a0 <pxCurrentTCBConst>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	f01e 0f10 	tst.w	lr, #16
 8005250:	bf08      	it	eq
 8005252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525a:	6010      	str	r0, [r2, #0]
 800525c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005260:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005264:	f380 8811 	msr	BASEPRI, r0
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f7fe feb4 	bl	8003fdc <vTaskSwitchContext>
 8005274:	f04f 0000 	mov.w	r0, #0
 8005278:	f380 8811 	msr	BASEPRI, r0
 800527c:	bc09      	pop	{r0, r3}
 800527e:	6819      	ldr	r1, [r3, #0]
 8005280:	6808      	ldr	r0, [r1, #0]
 8005282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005286:	f01e 0f10 	tst.w	lr, #16
 800528a:	bf08      	it	eq
 800528c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005290:	f380 8809 	msr	PSP, r0
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	f3af 8000 	nop.w

080052a0 <pxCurrentTCBConst>:
 80052a0:	20000110 	.word	0x20000110
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80052a4:	bf00      	nop
 80052a6:	bf00      	nop

080052a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
        __asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	607b      	str	r3, [r7, #4]
    }
 80052c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80052c2:	f001 fad3 	bl	800686c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80052c6:	f7fe fdcd 	bl	8003e64 <xTaskIncrementTick>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d006      	beq.n	80052de <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80052d0:	f001 fb2a 	bl	8006928 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052d4:	4b08      	ldr	r3, [pc, #32]	; (80052f8 <SysTick_Handler+0x50>)
 80052d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	e001      	b.n	80052e2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80052de:	f001 fb07 	bl	80068f0 <SEGGER_SYSVIEW_RecordExitISR>
 80052e2:	2300      	movs	r3, #0
 80052e4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	f383 8811 	msr	BASEPRI, r3
    }
 80052ec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80052ee:	bf00      	nop
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	e000ed04 	.word	0xe000ed04

080052fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005300:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <vPortSetupTimerInterrupt+0x34>)
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005306:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <vPortSetupTimerInterrupt+0x38>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800530c:	4b0a      	ldr	r3, [pc, #40]	; (8005338 <vPortSetupTimerInterrupt+0x3c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a0a      	ldr	r2, [pc, #40]	; (800533c <vPortSetupTimerInterrupt+0x40>)
 8005312:	fba2 2303 	umull	r2, r3, r2, r3
 8005316:	099b      	lsrs	r3, r3, #6
 8005318:	4a09      	ldr	r2, [pc, #36]	; (8005340 <vPortSetupTimerInterrupt+0x44>)
 800531a:	3b01      	subs	r3, #1
 800531c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800531e:	4b04      	ldr	r3, [pc, #16]	; (8005330 <vPortSetupTimerInterrupt+0x34>)
 8005320:	2207      	movs	r2, #7
 8005322:	601a      	str	r2, [r3, #0]
}
 8005324:	bf00      	nop
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	e000e010 	.word	0xe000e010
 8005334:	e000e018 	.word	0xe000e018
 8005338:	20000000 	.word	0x20000000
 800533c:	10624dd3 	.word	0x10624dd3
 8005340:	e000e014 	.word	0xe000e014

08005344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005344:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005354 <vPortEnableVFP+0x10>
 8005348:	6801      	ldr	r1, [r0, #0]
 800534a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800534e:	6001      	str	r1, [r0, #0]
 8005350:	4770      	bx	lr
 8005352:	0000      	.short	0x0000
 8005354:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005358:	bf00      	nop
 800535a:	bf00      	nop

0800535c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005362:	f3ef 8305 	mrs	r3, IPSR
 8005366:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b0f      	cmp	r3, #15
 800536c:	d914      	bls.n	8005398 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800536e:	4a17      	ldr	r2, [pc, #92]	; (80053cc <vPortValidateInterruptPriority+0x70>)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4413      	add	r3, r2
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005378:	4b15      	ldr	r3, [pc, #84]	; (80053d0 <vPortValidateInterruptPriority+0x74>)
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	7afa      	ldrb	r2, [r7, #11]
 800537e:	429a      	cmp	r2, r3
 8005380:	d20a      	bcs.n	8005398 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	607b      	str	r3, [r7, #4]
    }
 8005394:	bf00      	nop
 8005396:	e7fe      	b.n	8005396 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005398:	4b0e      	ldr	r3, [pc, #56]	; (80053d4 <vPortValidateInterruptPriority+0x78>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80053a0:	4b0d      	ldr	r3, [pc, #52]	; (80053d8 <vPortValidateInterruptPriority+0x7c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d90a      	bls.n	80053be <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80053a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	603b      	str	r3, [r7, #0]
    }
 80053ba:	bf00      	nop
 80053bc:	e7fe      	b.n	80053bc <vPortValidateInterruptPriority+0x60>
    }
 80053be:	bf00      	nop
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	e000e3f0 	.word	0xe000e3f0
 80053d0:	20000250 	.word	0x20000250
 80053d4:	e000ed0c 	.word	0xe000ed0c
 80053d8:	20000254 	.word	0x20000254

080053dc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b08a      	sub	sp, #40	; 0x28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80053e4:	2300      	movs	r3, #0
 80053e6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80053e8:	f7fe fc7e 	bl	8003ce8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80053ec:	4b65      	ldr	r3, [pc, #404]	; (8005584 <pvPortMalloc+0x1a8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80053f4:	f000 f934 	bl	8005660 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80053f8:	4b63      	ldr	r3, [pc, #396]	; (8005588 <pvPortMalloc+0x1ac>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4013      	ands	r3, r2
 8005400:	2b00      	cmp	r3, #0
 8005402:	f040 80a7 	bne.w	8005554 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d02d      	beq.n	8005468 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800540c:	2208      	movs	r2, #8
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	429a      	cmp	r2, r3
 8005416:	d227      	bcs.n	8005468 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005418:	2208      	movs	r2, #8
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4413      	add	r3, r2
 800541e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f003 0307 	and.w	r3, r3, #7
 8005426:	2b00      	cmp	r3, #0
 8005428:	d021      	beq.n	800546e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f023 0307 	bic.w	r3, r3, #7
 8005430:	3308      	adds	r3, #8
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	429a      	cmp	r2, r3
 8005436:	d214      	bcs.n	8005462 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f023 0307 	bic.w	r3, r3, #7
 800543e:	3308      	adds	r3, #8
 8005440:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	2b00      	cmp	r3, #0
 800544a:	d010      	beq.n	800546e <pvPortMalloc+0x92>
        __asm volatile
 800544c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	617b      	str	r3, [r7, #20]
    }
 800545e:	bf00      	nop
 8005460:	e7fe      	b.n	8005460 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005462:	2300      	movs	r3, #0
 8005464:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005466:	e002      	b.n	800546e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005468:	2300      	movs	r3, #0
 800546a:	607b      	str	r3, [r7, #4]
 800546c:	e000      	b.n	8005470 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800546e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d06e      	beq.n	8005554 <pvPortMalloc+0x178>
 8005476:	4b45      	ldr	r3, [pc, #276]	; (800558c <pvPortMalloc+0x1b0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	429a      	cmp	r2, r3
 800547e:	d869      	bhi.n	8005554 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005480:	4b43      	ldr	r3, [pc, #268]	; (8005590 <pvPortMalloc+0x1b4>)
 8005482:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005484:	4b42      	ldr	r3, [pc, #264]	; (8005590 <pvPortMalloc+0x1b4>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800548a:	e004      	b.n	8005496 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	429a      	cmp	r2, r3
 800549e:	d903      	bls.n	80054a8 <pvPortMalloc+0xcc>
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1f1      	bne.n	800548c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80054a8:	4b36      	ldr	r3, [pc, #216]	; (8005584 <pvPortMalloc+0x1a8>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d050      	beq.n	8005554 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2208      	movs	r2, #8
 80054b8:	4413      	add	r3, r2
 80054ba:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	1ad2      	subs	r2, r2, r3
 80054cc:	2308      	movs	r3, #8
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d91f      	bls.n	8005514 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4413      	add	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <pvPortMalloc+0x120>
        __asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	613b      	str	r3, [r7, #16]
    }
 80054f8:	bf00      	nop
 80054fa:	e7fe      	b.n	80054fa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	1ad2      	subs	r2, r2, r3
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800550e:	69b8      	ldr	r0, [r7, #24]
 8005510:	f000 f908 	bl	8005724 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005514:	4b1d      	ldr	r3, [pc, #116]	; (800558c <pvPortMalloc+0x1b0>)
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	4a1b      	ldr	r2, [pc, #108]	; (800558c <pvPortMalloc+0x1b0>)
 8005520:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005522:	4b1a      	ldr	r3, [pc, #104]	; (800558c <pvPortMalloc+0x1b0>)
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	4b1b      	ldr	r3, [pc, #108]	; (8005594 <pvPortMalloc+0x1b8>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d203      	bcs.n	8005536 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800552e:	4b17      	ldr	r3, [pc, #92]	; (800558c <pvPortMalloc+0x1b0>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a18      	ldr	r2, [pc, #96]	; (8005594 <pvPortMalloc+0x1b8>)
 8005534:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	4b13      	ldr	r3, [pc, #76]	; (8005588 <pvPortMalloc+0x1ac>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	431a      	orrs	r2, r3
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800554a:	4b13      	ldr	r3, [pc, #76]	; (8005598 <pvPortMalloc+0x1bc>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	3301      	adds	r3, #1
 8005550:	4a11      	ldr	r2, [pc, #68]	; (8005598 <pvPortMalloc+0x1bc>)
 8005552:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005554:	f7fe fbd6 	bl	8003d04 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <pvPortMalloc+0x19c>
        __asm volatile
 8005562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	60fb      	str	r3, [r7, #12]
    }
 8005574:	bf00      	nop
 8005576:	e7fe      	b.n	8005576 <pvPortMalloc+0x19a>
    return pvReturn;
 8005578:	69fb      	ldr	r3, [r7, #28]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3728      	adds	r7, #40	; 0x28
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20012e60 	.word	0x20012e60
 8005588:	20012e74 	.word	0x20012e74
 800558c:	20012e64 	.word	0x20012e64
 8005590:	20012e58 	.word	0x20012e58
 8005594:	20012e68 	.word	0x20012e68
 8005598:	20012e6c 	.word	0x20012e6c

0800559c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d04d      	beq.n	800564a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80055ae:	2308      	movs	r3, #8
 80055b0:	425b      	negs	r3, r3
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4413      	add	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	4b24      	ldr	r3, [pc, #144]	; (8005654 <vPortFree+0xb8>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4013      	ands	r3, r2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10a      	bne.n	80055e0 <vPortFree+0x44>
        __asm volatile
 80055ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	60fb      	str	r3, [r7, #12]
    }
 80055dc:	bf00      	nop
 80055de:	e7fe      	b.n	80055de <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00a      	beq.n	80055fe <vPortFree+0x62>
        __asm volatile
 80055e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	60bb      	str	r3, [r7, #8]
    }
 80055fa:	bf00      	nop
 80055fc:	e7fe      	b.n	80055fc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	4b14      	ldr	r3, [pc, #80]	; (8005654 <vPortFree+0xb8>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4013      	ands	r3, r2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d01e      	beq.n	800564a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d11a      	bne.n	800564a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	4b0e      	ldr	r3, [pc, #56]	; (8005654 <vPortFree+0xb8>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	43db      	mvns	r3, r3
 800561e:	401a      	ands	r2, r3
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005624:	f7fe fb60 	bl	8003ce8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	4b0a      	ldr	r3, [pc, #40]	; (8005658 <vPortFree+0xbc>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4413      	add	r3, r2
 8005632:	4a09      	ldr	r2, [pc, #36]	; (8005658 <vPortFree+0xbc>)
 8005634:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005636:	6938      	ldr	r0, [r7, #16]
 8005638:	f000 f874 	bl	8005724 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800563c:	4b07      	ldr	r3, [pc, #28]	; (800565c <vPortFree+0xc0>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3301      	adds	r3, #1
 8005642:	4a06      	ldr	r2, [pc, #24]	; (800565c <vPortFree+0xc0>)
 8005644:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005646:	f7fe fb5d 	bl	8003d04 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800564a:	bf00      	nop
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20012e74 	.word	0x20012e74
 8005658:	20012e64 	.word	0x20012e64
 800565c:	20012e70 	.word	0x20012e70

08005660 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005666:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800566a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800566c:	4b27      	ldr	r3, [pc, #156]	; (800570c <prvHeapInit+0xac>)
 800566e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00c      	beq.n	8005694 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	3307      	adds	r3, #7
 800567e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 0307 	bic.w	r3, r3, #7
 8005686:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	4a1f      	ldr	r2, [pc, #124]	; (800570c <prvHeapInit+0xac>)
 8005690:	4413      	add	r3, r2
 8005692:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005698:	4a1d      	ldr	r2, [pc, #116]	; (8005710 <prvHeapInit+0xb0>)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800569e:	4b1c      	ldr	r3, [pc, #112]	; (8005710 <prvHeapInit+0xb0>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	4413      	add	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80056ac:	2208      	movs	r2, #8
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	1a9b      	subs	r3, r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0307 	bic.w	r3, r3, #7
 80056ba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4a15      	ldr	r2, [pc, #84]	; (8005714 <prvHeapInit+0xb4>)
 80056c0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80056c2:	4b14      	ldr	r3, [pc, #80]	; (8005714 <prvHeapInit+0xb4>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2200      	movs	r2, #0
 80056c8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80056ca:	4b12      	ldr	r3, [pc, #72]	; (8005714 <prvHeapInit+0xb4>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	1ad2      	subs	r2, r2, r3
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056e0:	4b0c      	ldr	r3, [pc, #48]	; (8005714 <prvHeapInit+0xb4>)
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	4a0a      	ldr	r2, [pc, #40]	; (8005718 <prvHeapInit+0xb8>)
 80056ee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	4a09      	ldr	r2, [pc, #36]	; (800571c <prvHeapInit+0xbc>)
 80056f6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056f8:	4b09      	ldr	r3, [pc, #36]	; (8005720 <prvHeapInit+0xc0>)
 80056fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80056fe:	601a      	str	r2, [r3, #0]
}
 8005700:	bf00      	nop
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	20000258 	.word	0x20000258
 8005710:	20012e58 	.word	0x20012e58
 8005714:	20012e60 	.word	0x20012e60
 8005718:	20012e68 	.word	0x20012e68
 800571c:	20012e64 	.word	0x20012e64
 8005720:	20012e74 	.word	0x20012e74

08005724 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800572c:	4b28      	ldr	r3, [pc, #160]	; (80057d0 <prvInsertBlockIntoFreeList+0xac>)
 800572e:	60fb      	str	r3, [r7, #12]
 8005730:	e002      	b.n	8005738 <prvInsertBlockIntoFreeList+0x14>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	429a      	cmp	r2, r3
 8005740:	d8f7      	bhi.n	8005732 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	4413      	add	r3, r2
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	429a      	cmp	r2, r3
 8005752:	d108      	bne.n	8005766 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	441a      	add	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	441a      	add	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d118      	bne.n	80057ac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	4b15      	ldr	r3, [pc, #84]	; (80057d4 <prvInsertBlockIntoFreeList+0xb0>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	429a      	cmp	r2, r3
 8005784:	d00d      	beq.n	80057a2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	441a      	add	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	e008      	b.n	80057b4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057a2:	4b0c      	ldr	r3, [pc, #48]	; (80057d4 <prvInsertBlockIntoFreeList+0xb0>)
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	601a      	str	r2, [r3, #0]
 80057aa:	e003      	b.n	80057b4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d002      	beq.n	80057c2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80057c2:	bf00      	nop
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	20012e58 	.word	0x20012e58
 80057d4:	20012e60 	.word	0x20012e60

080057d8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af02      	add	r7, sp, #8
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80057e6:	2205      	movs	r2, #5
 80057e8:	492b      	ldr	r1, [pc, #172]	; (8005898 <SYSVIEW_AddTask+0xc0>)
 80057ea:	68b8      	ldr	r0, [r7, #8]
 80057ec:	f001 fb42 	bl	8006e74 <memcmp>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d04b      	beq.n	800588e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80057f6:	4b29      	ldr	r3, [pc, #164]	; (800589c <SYSVIEW_AddTask+0xc4>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b07      	cmp	r3, #7
 80057fc:	d903      	bls.n	8005806 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80057fe:	4828      	ldr	r0, [pc, #160]	; (80058a0 <SYSVIEW_AddTask+0xc8>)
 8005800:	f001 fadc 	bl	8006dbc <SEGGER_SYSVIEW_Warn>
    return;
 8005804:	e044      	b.n	8005890 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005806:	4b25      	ldr	r3, [pc, #148]	; (800589c <SYSVIEW_AddTask+0xc4>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	4926      	ldr	r1, [pc, #152]	; (80058a4 <SYSVIEW_AddTask+0xcc>)
 800580c:	4613      	mov	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800581a:	4b20      	ldr	r3, [pc, #128]	; (800589c <SYSVIEW_AddTask+0xc4>)
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	4921      	ldr	r1, [pc, #132]	; (80058a4 <SYSVIEW_AddTask+0xcc>)
 8005820:	4613      	mov	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	440b      	add	r3, r1
 800582a:	3304      	adds	r3, #4
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005830:	4b1a      	ldr	r3, [pc, #104]	; (800589c <SYSVIEW_AddTask+0xc4>)
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	491b      	ldr	r1, [pc, #108]	; (80058a4 <SYSVIEW_AddTask+0xcc>)
 8005836:	4613      	mov	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	440b      	add	r3, r1
 8005840:	3308      	adds	r3, #8
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005846:	4b15      	ldr	r3, [pc, #84]	; (800589c <SYSVIEW_AddTask+0xc4>)
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	4916      	ldr	r1, [pc, #88]	; (80058a4 <SYSVIEW_AddTask+0xcc>)
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	440b      	add	r3, r1
 8005856:	330c      	adds	r3, #12
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800585c:	4b0f      	ldr	r3, [pc, #60]	; (800589c <SYSVIEW_AddTask+0xc4>)
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	4910      	ldr	r1, [pc, #64]	; (80058a4 <SYSVIEW_AddTask+0xcc>)
 8005862:	4613      	mov	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	440b      	add	r3, r1
 800586c:	3310      	adds	r3, #16
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005872:	4b0a      	ldr	r3, [pc, #40]	; (800589c <SYSVIEW_AddTask+0xc4>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3301      	adds	r3, #1
 8005878:	4a08      	ldr	r2, [pc, #32]	; (800589c <SYSVIEW_AddTask+0xc4>)
 800587a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	68b9      	ldr	r1, [r7, #8]
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 f80e 	bl	80058a8 <SYSVIEW_SendTaskInfo>
 800588c:	e000      	b.n	8005890 <SYSVIEW_AddTask+0xb8>
    return;
 800588e:	bf00      	nop

}
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	08006f68 	.word	0x08006f68
 800589c:	20012f18 	.word	0x20012f18
 80058a0:	08006f70 	.word	0x08006f70
 80058a4:	20012e78 	.word	0x20012e78

080058a8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08a      	sub	sp, #40	; 0x28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80058b6:	f107 0314 	add.w	r3, r7, #20
 80058ba:	2214      	movs	r2, #20
 80058bc:	2100      	movs	r1, #0
 80058be:	4618      	mov	r0, r3
 80058c0:	f001 fae8 	bl	8006e94 <memset>
  TaskInfo.TaskID     = TaskID;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80058d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80058d8:	f107 0314 	add.w	r3, r7, #20
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 fe9b 	bl	8006618 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80058e2:	bf00      	nop
 80058e4:	3728      	adds	r7, #40	; 0x28
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80058f2:	4b1e      	ldr	r3, [pc, #120]	; (800596c <USART2_IRQHandler+0x80>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f003 0320 	and.w	r3, r3, #32
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d011      	beq.n	8005926 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8005902:	4b1b      	ldr	r3, [pc, #108]	; (8005970 <USART2_IRQHandler+0x84>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	b2db      	uxtb	r3, r3
 8005908:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f003 030b 	and.w	r3, r3, #11
 8005910:	2b00      	cmp	r3, #0
 8005912:	d108      	bne.n	8005926 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005914:	4b17      	ldr	r3, [pc, #92]	; (8005974 <USART2_IRQHandler+0x88>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d004      	beq.n	8005926 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800591c:	4b15      	ldr	r3, [pc, #84]	; (8005974 <USART2_IRQHandler+0x88>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	79fa      	ldrb	r2, [r7, #7]
 8005922:	4610      	mov	r0, r2
 8005924:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01a      	beq.n	8005966 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005930:	4b11      	ldr	r3, [pc, #68]	; (8005978 <USART2_IRQHandler+0x8c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d015      	beq.n	8005964 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005938:	4b0f      	ldr	r3, [pc, #60]	; (8005978 <USART2_IRQHandler+0x8c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	1dfa      	adds	r2, r7, #7
 800593e:	4610      	mov	r0, r2
 8005940:	4798      	blx	r3
 8005942:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d106      	bne.n	8005958 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800594a:	4b0c      	ldr	r3, [pc, #48]	; (800597c <USART2_IRQHandler+0x90>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a0b      	ldr	r2, [pc, #44]	; (800597c <USART2_IRQHandler+0x90>)
 8005950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005954:	6013      	str	r3, [r2, #0]
 8005956:	e006      	b.n	8005966 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005958:	4b04      	ldr	r3, [pc, #16]	; (800596c <USART2_IRQHandler+0x80>)
 800595a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 800595c:	79fa      	ldrb	r2, [r7, #7]
 800595e:	4b04      	ldr	r3, [pc, #16]	; (8005970 <USART2_IRQHandler+0x84>)
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	e000      	b.n	8005966 <USART2_IRQHandler+0x7a>
      return;
 8005964:	bf00      	nop
    }
  }
}
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	40004400 	.word	0x40004400
 8005970:	40004404 	.word	0x40004404
 8005974:	20012f1c 	.word	0x20012f1c
 8005978:	20012f20 	.word	0x20012f20
 800597c:	4000440c 	.word	0x4000440c

08005980 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005984:	4b05      	ldr	r3, [pc, #20]	; (800599c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a04      	ldr	r2, [pc, #16]	; (800599c <HIF_UART_EnableTXEInterrupt+0x1c>)
 800598a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800598e:	6013      	str	r3, [r2, #0]
}
 8005990:	bf00      	nop
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	4000440c 	.word	0x4000440c

080059a0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80059a6:	4b24      	ldr	r3, [pc, #144]	; (8005a38 <_DoInit+0x98>)
 80059a8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2203      	movs	r2, #3
 80059ae:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2203      	movs	r2, #3
 80059b4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a20      	ldr	r2, [pc, #128]	; (8005a3c <_DoInit+0x9c>)
 80059ba:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a20      	ldr	r2, [pc, #128]	; (8005a40 <_DoInit+0xa0>)
 80059c0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80059c8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a17      	ldr	r2, [pc, #92]	; (8005a3c <_DoInit+0x9c>)
 80059e0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a17      	ldr	r2, [pc, #92]	; (8005a44 <_DoInit+0xa4>)
 80059e6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2210      	movs	r2, #16
 80059ec:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3307      	adds	r3, #7
 8005a04:	4a10      	ldr	r2, [pc, #64]	; (8005a48 <_DoInit+0xa8>)
 8005a06:	6810      	ldr	r0, [r2, #0]
 8005a08:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005a0a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a0e      	ldr	r2, [pc, #56]	; (8005a4c <_DoInit+0xac>)
 8005a12:	6810      	ldr	r0, [r2, #0]
 8005a14:	6018      	str	r0, [r3, #0]
 8005a16:	8891      	ldrh	r1, [r2, #4]
 8005a18:	7992      	ldrb	r2, [r2, #6]
 8005a1a:	8099      	strh	r1, [r3, #4]
 8005a1c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005a1e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2220      	movs	r2, #32
 8005a26:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005a28:	f3bf 8f5f 	dmb	sy
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	20012f24 	.word	0x20012f24
 8005a3c:	08006fc0 	.word	0x08006fc0
 8005a40:	20012fcc 	.word	0x20012fcc
 8005a44:	200133cc 	.word	0x200133cc
 8005a48:	08006fcc 	.word	0x08006fcc
 8005a4c:	08006fd0 	.word	0x08006fd0

08005a50 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08c      	sub	sp, #48	; 0x30
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005a5c:	4b3e      	ldr	r3, [pc, #248]	; (8005b58 <SEGGER_RTT_ReadNoLock+0x108>)
 8005a5e:	623b      	str	r3, [r7, #32]
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <SEGGER_RTT_ReadNoLock+0x1e>
 8005a6a:	f7ff ff99 	bl	80059a0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	4613      	mov	r3, r2
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	4413      	add	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	3360      	adds	r3, #96	; 0x60
 8005a7a:	4a37      	ldr	r2, [pc, #220]	; (8005b58 <SEGGER_RTT_ReadNoLock+0x108>)
 8005a7c:	4413      	add	r3, r2
 8005a7e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005a90:	2300      	movs	r3, #0
 8005a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d92b      	bls.n	8005af4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	689a      	ldr	r2, [r3, #8]
 8005aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	bf28      	it	cs
 8005aae:	4613      	movcs	r3, r2
 8005ab0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab8:	4413      	add	r3, r2
 8005aba:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	6939      	ldr	r1, [r7, #16]
 8005ac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ac2:	f001 fa13 	bl	8006eec <memcpy>
    NumBytesRead += NumBytesRem;
 8005ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	4413      	add	r3, r2
 8005acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005ade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d101      	bne.n	8005af4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005af0:	2300      	movs	r3, #0
 8005af2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4293      	cmp	r3, r2
 8005b02:	bf28      	it	cs
 8005b04:	4613      	movcs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d019      	beq.n	8005b42 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b14:	4413      	add	r3, r2
 8005b16:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	6939      	ldr	r1, [r7, #16]
 8005b1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b1e:	f001 f9e5 	bl	8006eec <memcpy>
    NumBytesRead += NumBytesRem;
 8005b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	4413      	add	r3, r2
 8005b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	4413      	add	r3, r2
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	4413      	add	r3, r2
 8005b40:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b4c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3730      	adds	r7, #48	; 0x30
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	20012f24 	.word	0x20012f24

08005b5c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005b6c:	e002      	b.n	8005b74 <_EncodeStr+0x18>
    Len++;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	3301      	adds	r3, #1
 8005b72:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	4413      	add	r3, r2
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1f6      	bne.n	8005b6e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d901      	bls.n	8005b8c <_EncodeStr+0x30>
    Len = Limit;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	2bfe      	cmp	r3, #254	; 0xfe
 8005b90:	d806      	bhi.n	8005ba0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	60fa      	str	r2, [r7, #12]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	b2d2      	uxtb	r2, r2
 8005b9c:	701a      	strb	r2, [r3, #0]
 8005b9e:	e011      	b.n	8005bc4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	1c5a      	adds	r2, r3, #1
 8005ba4:	60fa      	str	r2, [r7, #12]
 8005ba6:	22ff      	movs	r2, #255	; 0xff
 8005ba8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	1c5a      	adds	r2, r3, #1
 8005bae:	60fa      	str	r2, [r7, #12]
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	0a19      	lsrs	r1, r3, #8
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	60fa      	str	r2, [r7, #12]
 8005bc0:	b2ca      	uxtb	r2, r1
 8005bc2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005bc8:	e00a      	b.n	8005be0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	1c53      	adds	r3, r2, #1
 8005bce:	60bb      	str	r3, [r7, #8]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	1c59      	adds	r1, r3, #1
 8005bd4:	60f9      	str	r1, [r7, #12]
 8005bd6:	7812      	ldrb	r2, [r2, #0]
 8005bd8:	701a      	strb	r2, [r3, #0]
    n++;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d3f0      	bcc.n	8005bca <_EncodeStr+0x6e>
  }
  return pPayload;
 8005be8:	68fb      	ldr	r3, [r7, #12]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	3304      	adds	r3, #4
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
	...

08005c10 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c16:	4b35      	ldr	r3, [pc, #212]	; (8005cec <_HandleIncomingPacket+0xdc>)
 8005c18:	7e1b      	ldrb	r3, [r3, #24]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	1cfb      	adds	r3, r7, #3
 8005c1e:	2201      	movs	r2, #1
 8005c20:	4619      	mov	r1, r3
 8005c22:	f7ff ff15 	bl	8005a50 <SEGGER_RTT_ReadNoLock>
 8005c26:	4603      	mov	r3, r0
 8005c28:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	dd59      	ble.n	8005ce4 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	2b80      	cmp	r3, #128	; 0x80
 8005c34:	d032      	beq.n	8005c9c <_HandleIncomingPacket+0x8c>
 8005c36:	2b80      	cmp	r3, #128	; 0x80
 8005c38:	dc42      	bgt.n	8005cc0 <_HandleIncomingPacket+0xb0>
 8005c3a:	2b07      	cmp	r3, #7
 8005c3c:	dc16      	bgt.n	8005c6c <_HandleIncomingPacket+0x5c>
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	dd3e      	ble.n	8005cc0 <_HandleIncomingPacket+0xb0>
 8005c42:	3b01      	subs	r3, #1
 8005c44:	2b06      	cmp	r3, #6
 8005c46:	d83b      	bhi.n	8005cc0 <_HandleIncomingPacket+0xb0>
 8005c48:	a201      	add	r2, pc, #4	; (adr r2, 8005c50 <_HandleIncomingPacket+0x40>)
 8005c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4e:	bf00      	nop
 8005c50:	08005c73 	.word	0x08005c73
 8005c54:	08005c79 	.word	0x08005c79
 8005c58:	08005c7f 	.word	0x08005c7f
 8005c5c:	08005c85 	.word	0x08005c85
 8005c60:	08005c8b 	.word	0x08005c8b
 8005c64:	08005c91 	.word	0x08005c91
 8005c68:	08005c97 	.word	0x08005c97
 8005c6c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c6e:	d034      	beq.n	8005cda <_HandleIncomingPacket+0xca>
 8005c70:	e026      	b.n	8005cc0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005c72:	f000 fb55 	bl	8006320 <SEGGER_SYSVIEW_Start>
      break;
 8005c76:	e035      	b.n	8005ce4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005c78:	f000 fc0e 	bl	8006498 <SEGGER_SYSVIEW_Stop>
      break;
 8005c7c:	e032      	b.n	8005ce4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005c7e:	f000 fdc3 	bl	8006808 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005c82:	e02f      	b.n	8005ce4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005c84:	f000 fdac 	bl	80067e0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005c88:	e02c      	b.n	8005ce4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005c8a:	f000 fc2b 	bl	80064e4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005c8e:	e029      	b.n	8005ce4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005c90:	f001 f856 	bl	8006d40 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005c94:	e026      	b.n	8005ce4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005c96:	f001 f835 	bl	8006d04 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005c9a:	e023      	b.n	8005ce4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c9c:	4b13      	ldr	r3, [pc, #76]	; (8005cec <_HandleIncomingPacket+0xdc>)
 8005c9e:	7e1b      	ldrb	r3, [r3, #24]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	1cfb      	adds	r3, r7, #3
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	f7ff fed2 	bl	8005a50 <SEGGER_RTT_ReadNoLock>
 8005cac:	4603      	mov	r3, r0
 8005cae:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	dd13      	ble.n	8005cde <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005cb6:	78fb      	ldrb	r3, [r7, #3]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 ffa3 	bl	8006c04 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005cbe:	e00e      	b.n	8005cde <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005cc0:	78fb      	ldrb	r3, [r7, #3]
 8005cc2:	b25b      	sxtb	r3, r3
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	da0c      	bge.n	8005ce2 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005cc8:	4b08      	ldr	r3, [pc, #32]	; (8005cec <_HandleIncomingPacket+0xdc>)
 8005cca:	7e1b      	ldrb	r3, [r3, #24]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	1cfb      	adds	r3, r7, #3
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	f7ff febc 	bl	8005a50 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005cd8:	e003      	b.n	8005ce2 <_HandleIncomingPacket+0xd2>
      break;
 8005cda:	bf00      	nop
 8005cdc:	e002      	b.n	8005ce4 <_HandleIncomingPacket+0xd4>
      break;
 8005cde:	bf00      	nop
 8005ce0:	e000      	b.n	8005ce4 <_HandleIncomingPacket+0xd4>
      break;
 8005ce2:	bf00      	nop
    }
  }
}
 8005ce4:	bf00      	nop
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	200133dc 	.word	0x200133dc

08005cf0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b08c      	sub	sp, #48	; 0x30
 8005cf4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005cfa:	1d3b      	adds	r3, r7, #4
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d04:	4b32      	ldr	r3, [pc, #200]	; (8005dd0 <_TrySendOverflowPacket+0xe0>)
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d0a:	e00b      	b.n	8005d24 <_TrySendOverflowPacket+0x34>
 8005d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d12:	1c59      	adds	r1, r3, #1
 8005d14:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d1a:	b2d2      	uxtb	r2, r2
 8005d1c:	701a      	strb	r2, [r3, #0]
 8005d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d20:	09db      	lsrs	r3, r3, #7
 8005d22:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d26:	2b7f      	cmp	r3, #127	; 0x7f
 8005d28:	d8f0      	bhi.n	8005d0c <_TrySendOverflowPacket+0x1c>
 8005d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d38:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d3a:	4b26      	ldr	r3, [pc, #152]	; (8005dd4 <_TrySendOverflowPacket+0xe4>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005d40:	4b23      	ldr	r3, [pc, #140]	; (8005dd0 <_TrySendOverflowPacket+0xe0>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	623b      	str	r3, [r7, #32]
 8005d52:	e00b      	b.n	8005d6c <_TrySendOverflowPacket+0x7c>
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	1c59      	adds	r1, r3, #1
 8005d5c:	6279      	str	r1, [r7, #36]	; 0x24
 8005d5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	09db      	lsrs	r3, r3, #7
 8005d6a:	623b      	str	r3, [r7, #32]
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d70:	d8f0      	bhi.n	8005d54 <_TrySendOverflowPacket+0x64>
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	627a      	str	r2, [r7, #36]	; 0x24
 8005d78:	6a3a      	ldr	r2, [r7, #32]
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005d82:	4b13      	ldr	r3, [pc, #76]	; (8005dd0 <_TrySendOverflowPacket+0xe0>)
 8005d84:	785b      	ldrb	r3, [r3, #1]
 8005d86:	4618      	mov	r0, r3
 8005d88:	1d3b      	adds	r3, r7, #4
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	461a      	mov	r2, r3
 8005d90:	1d3b      	adds	r3, r7, #4
 8005d92:	4619      	mov	r1, r3
 8005d94:	f7fa fa1c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005d9c:	f7ff fdf0 	bl	8005980 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d009      	beq.n	8005dba <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005da6:	4a0a      	ldr	r2, [pc, #40]	; (8005dd0 <_TrySendOverflowPacket+0xe0>)
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005dac:	4b08      	ldr	r3, [pc, #32]	; (8005dd0 <_TrySendOverflowPacket+0xe0>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	3b01      	subs	r3, #1
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <_TrySendOverflowPacket+0xe0>)
 8005db6:	701a      	strb	r2, [r3, #0]
 8005db8:	e004      	b.n	8005dc4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005dba:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <_TrySendOverflowPacket+0xe0>)
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	4a03      	ldr	r2, [pc, #12]	; (8005dd0 <_TrySendOverflowPacket+0xe0>)
 8005dc2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005dc4:	693b      	ldr	r3, [r7, #16]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3730      	adds	r7, #48	; 0x30
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	200133dc 	.word	0x200133dc
 8005dd4:	e0001004 	.word	0xe0001004

08005dd8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b08a      	sub	sp, #40	; 0x28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005de4:	4b6d      	ldr	r3, [pc, #436]	; (8005f9c <_SendPacket+0x1c4>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d010      	beq.n	8005e0e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005dec:	4b6b      	ldr	r3, [pc, #428]	; (8005f9c <_SendPacket+0x1c4>)
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 80a5 	beq.w	8005f40 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005df6:	4b69      	ldr	r3, [pc, #420]	; (8005f9c <_SendPacket+0x1c4>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d109      	bne.n	8005e12 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005dfe:	f7ff ff77 	bl	8005cf0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005e02:	4b66      	ldr	r3, [pc, #408]	; (8005f9c <_SendPacket+0x1c4>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	f040 809c 	bne.w	8005f44 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005e0c:	e001      	b.n	8005e12 <_SendPacket+0x3a>
    goto Send;
 8005e0e:	bf00      	nop
 8005e10:	e000      	b.n	8005e14 <_SendPacket+0x3c>
Send:
 8005e12:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b1f      	cmp	r3, #31
 8005e18:	d809      	bhi.n	8005e2e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005e1a:	4b60      	ldr	r3, [pc, #384]	; (8005f9c <_SendPacket+0x1c4>)
 8005e1c:	69da      	ldr	r2, [r3, #28]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	fa22 f303 	lsr.w	r3, r2, r3
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f040 808d 	bne.w	8005f48 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b17      	cmp	r3, #23
 8005e32:	d807      	bhi.n	8005e44 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	3b01      	subs	r3, #1
 8005e38:	60fb      	str	r3, [r7, #12]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	701a      	strb	r2, [r3, #0]
 8005e42:	e03d      	b.n	8005ec0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e50:	d912      	bls.n	8005e78 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	09da      	lsrs	r2, r3, #7
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	b2d2      	uxtb	r2, r2
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	3a01      	subs	r2, #1
 8005e6a:	60fa      	str	r2, [r7, #12]
 8005e6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	701a      	strb	r2, [r3, #0]
 8005e76:	e006      	b.n	8005e86 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	60fb      	str	r3, [r7, #12]
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b7f      	cmp	r3, #127	; 0x7f
 8005e8a:	d912      	bls.n	8005eb2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	09da      	lsrs	r2, r3, #7
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	3b01      	subs	r3, #1
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	3a01      	subs	r2, #1
 8005ea4:	60fa      	str	r2, [r7, #12]
 8005ea6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	701a      	strb	r2, [r3, #0]
 8005eb0:	e006      	b.n	8005ec0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005ec0:	4b37      	ldr	r3, [pc, #220]	; (8005fa0 <_SendPacket+0x1c8>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005ec6:	4b35      	ldr	r3, [pc, #212]	; (8005f9c <_SendPacket+0x1c4>)
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	623b      	str	r3, [r7, #32]
 8005ed8:	e00b      	b.n	8005ef2 <_SendPacket+0x11a>
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	1c59      	adds	r1, r3, #1
 8005ee2:	6279      	str	r1, [r7, #36]	; 0x24
 8005ee4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	701a      	strb	r2, [r3, #0]
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	09db      	lsrs	r3, r3, #7
 8005ef0:	623b      	str	r3, [r7, #32]
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ef6:	d8f0      	bhi.n	8005eda <_SendPacket+0x102>
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	627a      	str	r2, [r7, #36]	; 0x24
 8005efe:	6a3a      	ldr	r2, [r7, #32]
 8005f00:	b2d2      	uxtb	r2, r2
 8005f02:	701a      	strb	r2, [r3, #0]
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005f08:	4b24      	ldr	r3, [pc, #144]	; (8005f9c <_SendPacket+0x1c4>)
 8005f0a:	785b      	ldrb	r3, [r3, #1]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	461a      	mov	r2, r3
 8005f16:	68f9      	ldr	r1, [r7, #12]
 8005f18:	f7fa f95a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005f20:	f7ff fd2e 	bl	8005980 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005f2a:	4a1c      	ldr	r2, [pc, #112]	; (8005f9c <_SendPacket+0x1c4>)
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	60d3      	str	r3, [r2, #12]
 8005f30:	e00b      	b.n	8005f4a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005f32:	4b1a      	ldr	r3, [pc, #104]	; (8005f9c <_SendPacket+0x1c4>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	3301      	adds	r3, #1
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	4b18      	ldr	r3, [pc, #96]	; (8005f9c <_SendPacket+0x1c4>)
 8005f3c:	701a      	strb	r2, [r3, #0]
 8005f3e:	e004      	b.n	8005f4a <_SendPacket+0x172>
    goto SendDone;
 8005f40:	bf00      	nop
 8005f42:	e002      	b.n	8005f4a <_SendPacket+0x172>
      goto SendDone;
 8005f44:	bf00      	nop
 8005f46:	e000      	b.n	8005f4a <_SendPacket+0x172>
      goto SendDone;
 8005f48:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005f4a:	4b14      	ldr	r3, [pc, #80]	; (8005f9c <_SendPacket+0x1c4>)
 8005f4c:	7e1b      	ldrb	r3, [r3, #24]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4a14      	ldr	r2, [pc, #80]	; (8005fa4 <_SendPacket+0x1cc>)
 8005f52:	460b      	mov	r3, r1
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	440b      	add	r3, r1
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	4413      	add	r3, r2
 8005f5c:	336c      	adds	r3, #108	; 0x6c
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	4b0e      	ldr	r3, [pc, #56]	; (8005f9c <_SendPacket+0x1c4>)
 8005f62:	7e1b      	ldrb	r3, [r3, #24]
 8005f64:	4618      	mov	r0, r3
 8005f66:	490f      	ldr	r1, [pc, #60]	; (8005fa4 <_SendPacket+0x1cc>)
 8005f68:	4603      	mov	r3, r0
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	4403      	add	r3, r0
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	440b      	add	r3, r1
 8005f72:	3370      	adds	r3, #112	; 0x70
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d00b      	beq.n	8005f92 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005f7a:	4b08      	ldr	r3, [pc, #32]	; (8005f9c <_SendPacket+0x1c4>)
 8005f7c:	789b      	ldrb	r3, [r3, #2]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d107      	bne.n	8005f92 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005f82:	4b06      	ldr	r3, [pc, #24]	; (8005f9c <_SendPacket+0x1c4>)
 8005f84:	2201      	movs	r2, #1
 8005f86:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005f88:	f7ff fe42 	bl	8005c10 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005f8c:	4b03      	ldr	r3, [pc, #12]	; (8005f9c <_SendPacket+0x1c4>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005f92:	bf00      	nop
 8005f94:	3728      	adds	r7, #40	; 0x28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	200133dc 	.word	0x200133dc
 8005fa0:	e0001004 	.word	0xe0001004
 8005fa4:	20012f24 	.word	0x20012f24

08005fa8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005fb0:	f3ef 8311 	mrs	r3, BASEPRI
 8005fb4:	f04f 0120 	mov.w	r1, #32
 8005fb8:	f381 8811 	msr	BASEPRI, r1
 8005fbc:	60fb      	str	r3, [r7, #12]
 8005fbe:	4808      	ldr	r0, [pc, #32]	; (8005fe0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005fc0:	f7ff fe19 	bl	8005bf6 <_PreparePacket>
 8005fc4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	68b9      	ldr	r1, [r7, #8]
 8005fca:	68b8      	ldr	r0, [r7, #8]
 8005fcc:	f7ff ff04 	bl	8005dd8 <_SendPacket>
  RECORD_END();
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f383 8811 	msr	BASEPRI, r3
}
 8005fd6:	bf00      	nop
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	2001340c 	.word	0x2001340c

08005fe4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fee:	f3ef 8311 	mrs	r3, BASEPRI
 8005ff2:	f04f 0120 	mov.w	r1, #32
 8005ff6:	f381 8811 	msr	BASEPRI, r1
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	4816      	ldr	r0, [pc, #88]	; (8006058 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005ffe:	f7ff fdfa 	bl	8005bf6 <_PreparePacket>
 8006002:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	61fb      	str	r3, [r7, #28]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	61bb      	str	r3, [r7, #24]
 8006010:	e00b      	b.n	800602a <SEGGER_SYSVIEW_RecordU32+0x46>
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	b2da      	uxtb	r2, r3
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	1c59      	adds	r1, r3, #1
 800601a:	61f9      	str	r1, [r7, #28]
 800601c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006020:	b2d2      	uxtb	r2, r2
 8006022:	701a      	strb	r2, [r3, #0]
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	09db      	lsrs	r3, r3, #7
 8006028:	61bb      	str	r3, [r7, #24]
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	2b7f      	cmp	r3, #127	; 0x7f
 800602e:	d8f0      	bhi.n	8006012 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	1c5a      	adds	r2, r3, #1
 8006034:	61fa      	str	r2, [r7, #28]
 8006036:	69ba      	ldr	r2, [r7, #24]
 8006038:	b2d2      	uxtb	r2, r2
 800603a:	701a      	strb	r2, [r3, #0]
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	68f9      	ldr	r1, [r7, #12]
 8006044:	6938      	ldr	r0, [r7, #16]
 8006046:	f7ff fec7 	bl	8005dd8 <_SendPacket>
  RECORD_END();
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f383 8811 	msr	BASEPRI, r3
}
 8006050:	bf00      	nop
 8006052:	3720      	adds	r7, #32
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	2001340c 	.word	0x2001340c

0800605c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800605c:	b580      	push	{r7, lr}
 800605e:	b08c      	sub	sp, #48	; 0x30
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006068:	f3ef 8311 	mrs	r3, BASEPRI
 800606c:	f04f 0120 	mov.w	r1, #32
 8006070:	f381 8811 	msr	BASEPRI, r1
 8006074:	61fb      	str	r3, [r7, #28]
 8006076:	4825      	ldr	r0, [pc, #148]	; (800610c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006078:	f7ff fdbd 	bl	8005bf6 <_PreparePacket>
 800607c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	62bb      	str	r3, [r7, #40]	; 0x28
 800608a:	e00b      	b.n	80060a4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800608c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608e:	b2da      	uxtb	r2, r3
 8006090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006092:	1c59      	adds	r1, r3, #1
 8006094:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006096:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800609a:	b2d2      	uxtb	r2, r2
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a0:	09db      	lsrs	r3, r3, #7
 80060a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80060a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a6:	2b7f      	cmp	r3, #127	; 0x7f
 80060a8:	d8f0      	bhi.n	800608c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80060aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060b2:	b2d2      	uxtb	r2, r2
 80060b4:	701a      	strb	r2, [r3, #0]
 80060b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	627b      	str	r3, [r7, #36]	; 0x24
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	623b      	str	r3, [r7, #32]
 80060c2:	e00b      	b.n	80060dc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	1c59      	adds	r1, r3, #1
 80060cc:	6279      	str	r1, [r7, #36]	; 0x24
 80060ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	09db      	lsrs	r3, r3, #7
 80060da:	623b      	str	r3, [r7, #32]
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	2b7f      	cmp	r3, #127	; 0x7f
 80060e0:	d8f0      	bhi.n	80060c4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	1c5a      	adds	r2, r3, #1
 80060e6:	627a      	str	r2, [r7, #36]	; 0x24
 80060e8:	6a3a      	ldr	r2, [r7, #32]
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	6979      	ldr	r1, [r7, #20]
 80060f6:	69b8      	ldr	r0, [r7, #24]
 80060f8:	f7ff fe6e 	bl	8005dd8 <_SendPacket>
  RECORD_END();
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	f383 8811 	msr	BASEPRI, r3
}
 8006102:	bf00      	nop
 8006104:	3730      	adds	r7, #48	; 0x30
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	2001340c 	.word	0x2001340c

08006110 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006110:	b580      	push	{r7, lr}
 8006112:	b08e      	sub	sp, #56	; 0x38
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
 800611c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800611e:	f3ef 8311 	mrs	r3, BASEPRI
 8006122:	f04f 0120 	mov.w	r1, #32
 8006126:	f381 8811 	msr	BASEPRI, r1
 800612a:	61fb      	str	r3, [r7, #28]
 800612c:	4832      	ldr	r0, [pc, #200]	; (80061f8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800612e:	f7ff fd62 	bl	8005bf6 <_PreparePacket>
 8006132:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	637b      	str	r3, [r7, #52]	; 0x34
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	633b      	str	r3, [r7, #48]	; 0x30
 8006140:	e00b      	b.n	800615a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	b2da      	uxtb	r2, r3
 8006146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006148:	1c59      	adds	r1, r3, #1
 800614a:	6379      	str	r1, [r7, #52]	; 0x34
 800614c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	701a      	strb	r2, [r3, #0]
 8006154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006156:	09db      	lsrs	r3, r3, #7
 8006158:	633b      	str	r3, [r7, #48]	; 0x30
 800615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615c:	2b7f      	cmp	r3, #127	; 0x7f
 800615e:	d8f0      	bhi.n	8006142 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	637a      	str	r2, [r7, #52]	; 0x34
 8006166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	701a      	strb	r2, [r3, #0]
 800616c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	62bb      	str	r3, [r7, #40]	; 0x28
 8006178:	e00b      	b.n	8006192 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617c:	b2da      	uxtb	r2, r3
 800617e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006180:	1c59      	adds	r1, r3, #1
 8006182:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006184:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	701a      	strb	r2, [r3, #0]
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	09db      	lsrs	r3, r3, #7
 8006190:	62bb      	str	r3, [r7, #40]	; 0x28
 8006192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006194:	2b7f      	cmp	r3, #127	; 0x7f
 8006196:	d8f0      	bhi.n	800617a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800619e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061a0:	b2d2      	uxtb	r2, r2
 80061a2:	701a      	strb	r2, [r3, #0]
 80061a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	627b      	str	r3, [r7, #36]	; 0x24
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	623b      	str	r3, [r7, #32]
 80061b0:	e00b      	b.n	80061ca <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	1c59      	adds	r1, r3, #1
 80061ba:	6279      	str	r1, [r7, #36]	; 0x24
 80061bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061c0:	b2d2      	uxtb	r2, r2
 80061c2:	701a      	strb	r2, [r3, #0]
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	09db      	lsrs	r3, r3, #7
 80061c8:	623b      	str	r3, [r7, #32]
 80061ca:	6a3b      	ldr	r3, [r7, #32]
 80061cc:	2b7f      	cmp	r3, #127	; 0x7f
 80061ce:	d8f0      	bhi.n	80061b2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80061d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	627a      	str	r2, [r7, #36]	; 0x24
 80061d6:	6a3a      	ldr	r2, [r7, #32]
 80061d8:	b2d2      	uxtb	r2, r2
 80061da:	701a      	strb	r2, [r3, #0]
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	6979      	ldr	r1, [r7, #20]
 80061e4:	69b8      	ldr	r0, [r7, #24]
 80061e6:	f7ff fdf7 	bl	8005dd8 <_SendPacket>
  RECORD_END();
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	f383 8811 	msr	BASEPRI, r3
}
 80061f0:	bf00      	nop
 80061f2:	3738      	adds	r7, #56	; 0x38
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	2001340c 	.word	0x2001340c

080061fc <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b090      	sub	sp, #64	; 0x40
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
 8006208:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800620a:	f3ef 8311 	mrs	r3, BASEPRI
 800620e:	f04f 0120 	mov.w	r1, #32
 8006212:	f381 8811 	msr	BASEPRI, r1
 8006216:	61fb      	str	r3, [r7, #28]
 8006218:	4840      	ldr	r0, [pc, #256]	; (800631c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800621a:	f7ff fcec 	bl	8005bf6 <_PreparePacket>
 800621e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	63bb      	str	r3, [r7, #56]	; 0x38
 800622c:	e00b      	b.n	8006246 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800622e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006230:	b2da      	uxtb	r2, r3
 8006232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006234:	1c59      	adds	r1, r3, #1
 8006236:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006238:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800623c:	b2d2      	uxtb	r2, r2
 800623e:	701a      	strb	r2, [r3, #0]
 8006240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006242:	09db      	lsrs	r3, r3, #7
 8006244:	63bb      	str	r3, [r7, #56]	; 0x38
 8006246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006248:	2b7f      	cmp	r3, #127	; 0x7f
 800624a:	d8f0      	bhi.n	800622e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800624c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800624e:	1c5a      	adds	r2, r3, #1
 8006250:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006252:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006254:	b2d2      	uxtb	r2, r2
 8006256:	701a      	strb	r2, [r3, #0]
 8006258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800625a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	637b      	str	r3, [r7, #52]	; 0x34
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	633b      	str	r3, [r7, #48]	; 0x30
 8006264:	e00b      	b.n	800627e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	b2da      	uxtb	r2, r3
 800626a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626c:	1c59      	adds	r1, r3, #1
 800626e:	6379      	str	r1, [r7, #52]	; 0x34
 8006270:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006274:	b2d2      	uxtb	r2, r2
 8006276:	701a      	strb	r2, [r3, #0]
 8006278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627a:	09db      	lsrs	r3, r3, #7
 800627c:	633b      	str	r3, [r7, #48]	; 0x30
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	2b7f      	cmp	r3, #127	; 0x7f
 8006282:	d8f0      	bhi.n	8006266 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	637a      	str	r2, [r7, #52]	; 0x34
 800628a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800628c:	b2d2      	uxtb	r2, r2
 800628e:	701a      	strb	r2, [r3, #0]
 8006290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006292:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	62bb      	str	r3, [r7, #40]	; 0x28
 800629c:	e00b      	b.n	80062b6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a4:	1c59      	adds	r1, r3, #1
 80062a6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80062a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	701a      	strb	r2, [r3, #0]
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	09db      	lsrs	r3, r3, #7
 80062b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	2b7f      	cmp	r3, #127	; 0x7f
 80062ba:	d8f0      	bhi.n	800629e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80062bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062be:	1c5a      	adds	r2, r3, #1
 80062c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062c4:	b2d2      	uxtb	r2, r2
 80062c6:	701a      	strb	r2, [r3, #0]
 80062c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	627b      	str	r3, [r7, #36]	; 0x24
 80062d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062d2:	623b      	str	r3, [r7, #32]
 80062d4:	e00b      	b.n	80062ee <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80062d6:	6a3b      	ldr	r3, [r7, #32]
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	1c59      	adds	r1, r3, #1
 80062de:	6279      	str	r1, [r7, #36]	; 0x24
 80062e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	701a      	strb	r2, [r3, #0]
 80062e8:	6a3b      	ldr	r3, [r7, #32]
 80062ea:	09db      	lsrs	r3, r3, #7
 80062ec:	623b      	str	r3, [r7, #32]
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	2b7f      	cmp	r3, #127	; 0x7f
 80062f2:	d8f0      	bhi.n	80062d6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	1c5a      	adds	r2, r3, #1
 80062f8:	627a      	str	r2, [r7, #36]	; 0x24
 80062fa:	6a3a      	ldr	r2, [r7, #32]
 80062fc:	b2d2      	uxtb	r2, r2
 80062fe:	701a      	strb	r2, [r3, #0]
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	6979      	ldr	r1, [r7, #20]
 8006308:	69b8      	ldr	r0, [r7, #24]
 800630a:	f7ff fd65 	bl	8005dd8 <_SendPacket>
  RECORD_END();
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	f383 8811 	msr	BASEPRI, r3
}
 8006314:	bf00      	nop
 8006316:	3740      	adds	r7, #64	; 0x40
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	2001340c 	.word	0x2001340c

08006320 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006320:	b580      	push	{r7, lr}
 8006322:	b08c      	sub	sp, #48	; 0x30
 8006324:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006326:	4b59      	ldr	r3, [pc, #356]	; (800648c <SEGGER_SYSVIEW_Start+0x16c>)
 8006328:	2201      	movs	r2, #1
 800632a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800632c:	f3ef 8311 	mrs	r3, BASEPRI
 8006330:	f04f 0120 	mov.w	r1, #32
 8006334:	f381 8811 	msr	BASEPRI, r1
 8006338:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800633a:	4b54      	ldr	r3, [pc, #336]	; (800648c <SEGGER_SYSVIEW_Start+0x16c>)
 800633c:	785b      	ldrb	r3, [r3, #1]
 800633e:	220a      	movs	r2, #10
 8006340:	4953      	ldr	r1, [pc, #332]	; (8006490 <SEGGER_SYSVIEW_Start+0x170>)
 8006342:	4618      	mov	r0, r3
 8006344:	f7f9 ff44 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800634e:	f7ff fb17 	bl	8005980 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006352:	200a      	movs	r0, #10
 8006354:	f7ff fe28 	bl	8005fa8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006358:	f3ef 8311 	mrs	r3, BASEPRI
 800635c:	f04f 0120 	mov.w	r1, #32
 8006360:	f381 8811 	msr	BASEPRI, r1
 8006364:	60bb      	str	r3, [r7, #8]
 8006366:	484b      	ldr	r0, [pc, #300]	; (8006494 <SEGGER_SYSVIEW_Start+0x174>)
 8006368:	f7ff fc45 	bl	8005bf6 <_PreparePacket>
 800636c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006376:	4b45      	ldr	r3, [pc, #276]	; (800648c <SEGGER_SYSVIEW_Start+0x16c>)
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	62bb      	str	r3, [r7, #40]	; 0x28
 800637c:	e00b      	b.n	8006396 <SEGGER_SYSVIEW_Start+0x76>
 800637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006380:	b2da      	uxtb	r2, r3
 8006382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006384:	1c59      	adds	r1, r3, #1
 8006386:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006388:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	701a      	strb	r2, [r3, #0]
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	09db      	lsrs	r3, r3, #7
 8006394:	62bb      	str	r3, [r7, #40]	; 0x28
 8006396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006398:	2b7f      	cmp	r3, #127	; 0x7f
 800639a:	d8f0      	bhi.n	800637e <SEGGER_SYSVIEW_Start+0x5e>
 800639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639e:	1c5a      	adds	r2, r3, #1
 80063a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063a4:	b2d2      	uxtb	r2, r2
 80063a6:	701a      	strb	r2, [r3, #0]
 80063a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063aa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
 80063b0:	4b36      	ldr	r3, [pc, #216]	; (800648c <SEGGER_SYSVIEW_Start+0x16c>)
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	623b      	str	r3, [r7, #32]
 80063b6:	e00b      	b.n	80063d0 <SEGGER_SYSVIEW_Start+0xb0>
 80063b8:	6a3b      	ldr	r3, [r7, #32]
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	1c59      	adds	r1, r3, #1
 80063c0:	6279      	str	r1, [r7, #36]	; 0x24
 80063c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	701a      	strb	r2, [r3, #0]
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	09db      	lsrs	r3, r3, #7
 80063ce:	623b      	str	r3, [r7, #32]
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	2b7f      	cmp	r3, #127	; 0x7f
 80063d4:	d8f0      	bhi.n	80063b8 <SEGGER_SYSVIEW_Start+0x98>
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	1c5a      	adds	r2, r3, #1
 80063da:	627a      	str	r2, [r7, #36]	; 0x24
 80063dc:	6a3a      	ldr	r2, [r7, #32]
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	701a      	strb	r2, [r3, #0]
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	61fb      	str	r3, [r7, #28]
 80063ea:	4b28      	ldr	r3, [pc, #160]	; (800648c <SEGGER_SYSVIEW_Start+0x16c>)
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	61bb      	str	r3, [r7, #24]
 80063f0:	e00b      	b.n	800640a <SEGGER_SYSVIEW_Start+0xea>
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	1c59      	adds	r1, r3, #1
 80063fa:	61f9      	str	r1, [r7, #28]
 80063fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006400:	b2d2      	uxtb	r2, r2
 8006402:	701a      	strb	r2, [r3, #0]
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	09db      	lsrs	r3, r3, #7
 8006408:	61bb      	str	r3, [r7, #24]
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	2b7f      	cmp	r3, #127	; 0x7f
 800640e:	d8f0      	bhi.n	80063f2 <SEGGER_SYSVIEW_Start+0xd2>
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	61fa      	str	r2, [r7, #28]
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	b2d2      	uxtb	r2, r2
 800641a:	701a      	strb	r2, [r3, #0]
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	617b      	str	r3, [r7, #20]
 8006424:	2300      	movs	r3, #0
 8006426:	613b      	str	r3, [r7, #16]
 8006428:	e00b      	b.n	8006442 <SEGGER_SYSVIEW_Start+0x122>
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	b2da      	uxtb	r2, r3
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	1c59      	adds	r1, r3, #1
 8006432:	6179      	str	r1, [r7, #20]
 8006434:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006438:	b2d2      	uxtb	r2, r2
 800643a:	701a      	strb	r2, [r3, #0]
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	09db      	lsrs	r3, r3, #7
 8006440:	613b      	str	r3, [r7, #16]
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b7f      	cmp	r3, #127	; 0x7f
 8006446:	d8f0      	bhi.n	800642a <SEGGER_SYSVIEW_Start+0x10a>
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	1c5a      	adds	r2, r3, #1
 800644c:	617a      	str	r2, [r7, #20]
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	b2d2      	uxtb	r2, r2
 8006452:	701a      	strb	r2, [r3, #0]
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006458:	2218      	movs	r2, #24
 800645a:	6839      	ldr	r1, [r7, #0]
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff fcbb 	bl	8005dd8 <_SendPacket>
      RECORD_END();
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006468:	4b08      	ldr	r3, [pc, #32]	; (800648c <SEGGER_SYSVIEW_Start+0x16c>)
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006470:	4b06      	ldr	r3, [pc, #24]	; (800648c <SEGGER_SYSVIEW_Start+0x16c>)
 8006472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006474:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006476:	f000 f9c7 	bl	8006808 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800647a:	f000 f9b1 	bl	80067e0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800647e:	f000 fc5f 	bl	8006d40 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006482:	bf00      	nop
 8006484:	3730      	adds	r7, #48	; 0x30
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	200133dc 	.word	0x200133dc
 8006490:	08006ff0 	.word	0x08006ff0
 8006494:	2001340c 	.word	0x2001340c

08006498 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800649e:	f3ef 8311 	mrs	r3, BASEPRI
 80064a2:	f04f 0120 	mov.w	r1, #32
 80064a6:	f381 8811 	msr	BASEPRI, r1
 80064aa:	607b      	str	r3, [r7, #4]
 80064ac:	480b      	ldr	r0, [pc, #44]	; (80064dc <SEGGER_SYSVIEW_Stop+0x44>)
 80064ae:	f7ff fba2 	bl	8005bf6 <_PreparePacket>
 80064b2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80064b4:	4b0a      	ldr	r3, [pc, #40]	; (80064e0 <SEGGER_SYSVIEW_Stop+0x48>)
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d007      	beq.n	80064cc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80064bc:	220b      	movs	r2, #11
 80064be:	6839      	ldr	r1, [r7, #0]
 80064c0:	6838      	ldr	r0, [r7, #0]
 80064c2:	f7ff fc89 	bl	8005dd8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80064c6:	4b06      	ldr	r3, [pc, #24]	; (80064e0 <SEGGER_SYSVIEW_Stop+0x48>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f383 8811 	msr	BASEPRI, r3
}
 80064d2:	bf00      	nop
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	2001340c 	.word	0x2001340c
 80064e0:	200133dc 	.word	0x200133dc

080064e4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08c      	sub	sp, #48	; 0x30
 80064e8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80064ea:	f3ef 8311 	mrs	r3, BASEPRI
 80064ee:	f04f 0120 	mov.w	r1, #32
 80064f2:	f381 8811 	msr	BASEPRI, r1
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	4845      	ldr	r0, [pc, #276]	; (8006610 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80064fa:	f7ff fb7c 	bl	8005bf6 <_PreparePacket>
 80064fe:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006508:	4b42      	ldr	r3, [pc, #264]	; (8006614 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	62bb      	str	r3, [r7, #40]	; 0x28
 800650e:	e00b      	b.n	8006528 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006512:	b2da      	uxtb	r2, r3
 8006514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006516:	1c59      	adds	r1, r3, #1
 8006518:	62f9      	str	r1, [r7, #44]	; 0x2c
 800651a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800651e:	b2d2      	uxtb	r2, r2
 8006520:	701a      	strb	r2, [r3, #0]
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006524:	09db      	lsrs	r3, r3, #7
 8006526:	62bb      	str	r3, [r7, #40]	; 0x28
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	2b7f      	cmp	r3, #127	; 0x7f
 800652c:	d8f0      	bhi.n	8006510 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800652e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006530:	1c5a      	adds	r2, r3, #1
 8006532:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006536:	b2d2      	uxtb	r2, r2
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	627b      	str	r3, [r7, #36]	; 0x24
 8006542:	4b34      	ldr	r3, [pc, #208]	; (8006614 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	623b      	str	r3, [r7, #32]
 8006548:	e00b      	b.n	8006562 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	b2da      	uxtb	r2, r3
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	1c59      	adds	r1, r3, #1
 8006552:	6279      	str	r1, [r7, #36]	; 0x24
 8006554:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006558:	b2d2      	uxtb	r2, r2
 800655a:	701a      	strb	r2, [r3, #0]
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	09db      	lsrs	r3, r3, #7
 8006560:	623b      	str	r3, [r7, #32]
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	2b7f      	cmp	r3, #127	; 0x7f
 8006566:	d8f0      	bhi.n	800654a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	627a      	str	r2, [r7, #36]	; 0x24
 800656e:	6a3a      	ldr	r2, [r7, #32]
 8006570:	b2d2      	uxtb	r2, r2
 8006572:	701a      	strb	r2, [r3, #0]
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	61fb      	str	r3, [r7, #28]
 800657c:	4b25      	ldr	r3, [pc, #148]	; (8006614 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	61bb      	str	r3, [r7, #24]
 8006582:	e00b      	b.n	800659c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	b2da      	uxtb	r2, r3
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	1c59      	adds	r1, r3, #1
 800658c:	61f9      	str	r1, [r7, #28]
 800658e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	09db      	lsrs	r3, r3, #7
 800659a:	61bb      	str	r3, [r7, #24]
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	2b7f      	cmp	r3, #127	; 0x7f
 80065a0:	d8f0      	bhi.n	8006584 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	61fa      	str	r2, [r7, #28]
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	b2d2      	uxtb	r2, r2
 80065ac:	701a      	strb	r2, [r3, #0]
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	617b      	str	r3, [r7, #20]
 80065b6:	2300      	movs	r3, #0
 80065b8:	613b      	str	r3, [r7, #16]
 80065ba:	e00b      	b.n	80065d4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	1c59      	adds	r1, r3, #1
 80065c4:	6179      	str	r1, [r7, #20]
 80065c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ca:	b2d2      	uxtb	r2, r2
 80065cc:	701a      	strb	r2, [r3, #0]
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	09db      	lsrs	r3, r3, #7
 80065d2:	613b      	str	r3, [r7, #16]
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	2b7f      	cmp	r3, #127	; 0x7f
 80065d8:	d8f0      	bhi.n	80065bc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	1c5a      	adds	r2, r3, #1
 80065de:	617a      	str	r2, [r7, #20]
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	b2d2      	uxtb	r2, r2
 80065e4:	701a      	strb	r2, [r3, #0]
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80065ea:	2218      	movs	r2, #24
 80065ec:	6879      	ldr	r1, [r7, #4]
 80065ee:	68b8      	ldr	r0, [r7, #8]
 80065f0:	f7ff fbf2 	bl	8005dd8 <_SendPacket>
  RECORD_END();
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80065fa:	4b06      	ldr	r3, [pc, #24]	; (8006614 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006602:	4b04      	ldr	r3, [pc, #16]	; (8006614 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	4798      	blx	r3
  }
}
 8006608:	bf00      	nop
 800660a:	3730      	adds	r7, #48	; 0x30
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	2001340c 	.word	0x2001340c
 8006614:	200133dc 	.word	0x200133dc

08006618 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006618:	b580      	push	{r7, lr}
 800661a:	b092      	sub	sp, #72	; 0x48
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006620:	f3ef 8311 	mrs	r3, BASEPRI
 8006624:	f04f 0120 	mov.w	r1, #32
 8006628:	f381 8811 	msr	BASEPRI, r1
 800662c:	617b      	str	r3, [r7, #20]
 800662e:	486a      	ldr	r0, [pc, #424]	; (80067d8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006630:	f7ff fae1 	bl	8005bf6 <_PreparePacket>
 8006634:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	647b      	str	r3, [r7, #68]	; 0x44
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	4b66      	ldr	r3, [pc, #408]	; (80067dc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	643b      	str	r3, [r7, #64]	; 0x40
 800664a:	e00b      	b.n	8006664 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800664c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800664e:	b2da      	uxtb	r2, r3
 8006650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006652:	1c59      	adds	r1, r3, #1
 8006654:	6479      	str	r1, [r7, #68]	; 0x44
 8006656:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800665a:	b2d2      	uxtb	r2, r2
 800665c:	701a      	strb	r2, [r3, #0]
 800665e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006660:	09db      	lsrs	r3, r3, #7
 8006662:	643b      	str	r3, [r7, #64]	; 0x40
 8006664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006666:	2b7f      	cmp	r3, #127	; 0x7f
 8006668:	d8f0      	bhi.n	800664c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800666a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	647a      	str	r2, [r7, #68]	; 0x44
 8006670:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006672:	b2d2      	uxtb	r2, r2
 8006674:	701a      	strb	r2, [r3, #0]
 8006676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006678:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	63bb      	str	r3, [r7, #56]	; 0x38
 8006684:	e00b      	b.n	800669e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006688:	b2da      	uxtb	r2, r3
 800668a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800668c:	1c59      	adds	r1, r3, #1
 800668e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006690:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006694:	b2d2      	uxtb	r2, r2
 8006696:	701a      	strb	r2, [r3, #0]
 8006698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669a:	09db      	lsrs	r3, r3, #7
 800669c:	63bb      	str	r3, [r7, #56]	; 0x38
 800669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a0:	2b7f      	cmp	r3, #127	; 0x7f
 80066a2:	d8f0      	bhi.n	8006686 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80066a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a6:	1c5a      	adds	r2, r3, #1
 80066a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80066aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066ac:	b2d2      	uxtb	r2, r2
 80066ae:	701a      	strb	r2, [r3, #0]
 80066b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066b2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	2220      	movs	r2, #32
 80066ba:	4619      	mov	r1, r3
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f7ff fa4d 	bl	8005b5c <_EncodeStr>
 80066c2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80066c4:	2209      	movs	r2, #9
 80066c6:	68f9      	ldr	r1, [r7, #12]
 80066c8:	6938      	ldr	r0, [r7, #16]
 80066ca:	f7ff fb85 	bl	8005dd8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	637b      	str	r3, [r7, #52]	; 0x34
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	4b40      	ldr	r3, [pc, #256]	; (80067dc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	633b      	str	r3, [r7, #48]	; 0x30
 80066e2:	e00b      	b.n	80066fc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80066e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ea:	1c59      	adds	r1, r3, #1
 80066ec:	6379      	str	r1, [r7, #52]	; 0x34
 80066ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066f2:	b2d2      	uxtb	r2, r2
 80066f4:	701a      	strb	r2, [r3, #0]
 80066f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f8:	09db      	lsrs	r3, r3, #7
 80066fa:	633b      	str	r3, [r7, #48]	; 0x30
 80066fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fe:	2b7f      	cmp	r3, #127	; 0x7f
 8006700:	d8f0      	bhi.n	80066e4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006704:	1c5a      	adds	r2, r3, #1
 8006706:	637a      	str	r2, [r7, #52]	; 0x34
 8006708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	701a      	strb	r2, [r3, #0]
 800670e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006710:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	62bb      	str	r3, [r7, #40]	; 0x28
 800671c:	e00b      	b.n	8006736 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800671e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006720:	b2da      	uxtb	r2, r3
 8006722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006724:	1c59      	adds	r1, r3, #1
 8006726:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006728:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800672c:	b2d2      	uxtb	r2, r2
 800672e:	701a      	strb	r2, [r3, #0]
 8006730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006732:	09db      	lsrs	r3, r3, #7
 8006734:	62bb      	str	r3, [r7, #40]	; 0x28
 8006736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006738:	2b7f      	cmp	r3, #127	; 0x7f
 800673a:	d8f0      	bhi.n	800671e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800673c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673e:	1c5a      	adds	r2, r3, #1
 8006740:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006744:	b2d2      	uxtb	r2, r2
 8006746:	701a      	strb	r2, [r3, #0]
 8006748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	627b      	str	r3, [r7, #36]	; 0x24
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	623b      	str	r3, [r7, #32]
 8006756:	e00b      	b.n	8006770 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	b2da      	uxtb	r2, r3
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	1c59      	adds	r1, r3, #1
 8006760:	6279      	str	r1, [r7, #36]	; 0x24
 8006762:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	701a      	strb	r2, [r3, #0]
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	09db      	lsrs	r3, r3, #7
 800676e:	623b      	str	r3, [r7, #32]
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	2b7f      	cmp	r3, #127	; 0x7f
 8006774:	d8f0      	bhi.n	8006758 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	627a      	str	r2, [r7, #36]	; 0x24
 800677c:	6a3a      	ldr	r2, [r7, #32]
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	701a      	strb	r2, [r3, #0]
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006784:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	61fb      	str	r3, [r7, #28]
 800678a:	2300      	movs	r3, #0
 800678c:	61bb      	str	r3, [r7, #24]
 800678e:	e00b      	b.n	80067a8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	b2da      	uxtb	r2, r3
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	1c59      	adds	r1, r3, #1
 8006798:	61f9      	str	r1, [r7, #28]
 800679a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	09db      	lsrs	r3, r3, #7
 80067a6:	61bb      	str	r3, [r7, #24]
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	2b7f      	cmp	r3, #127	; 0x7f
 80067ac:	d8f0      	bhi.n	8006790 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	61fa      	str	r2, [r7, #28]
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	b2d2      	uxtb	r2, r2
 80067b8:	701a      	strb	r2, [r3, #0]
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80067be:	2215      	movs	r2, #21
 80067c0:	68f9      	ldr	r1, [r7, #12]
 80067c2:	6938      	ldr	r0, [r7, #16]
 80067c4:	f7ff fb08 	bl	8005dd8 <_SendPacket>
  RECORD_END();
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f383 8811 	msr	BASEPRI, r3
}
 80067ce:	bf00      	nop
 80067d0:	3748      	adds	r7, #72	; 0x48
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	2001340c 	.word	0x2001340c
 80067dc:	200133dc 	.word	0x200133dc

080067e0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80067e4:	4b07      	ldr	r3, [pc, #28]	; (8006804 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d008      	beq.n	80067fe <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80067ec:	4b05      	ldr	r3, [pc, #20]	; (8006804 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80067f6:	4b03      	ldr	r3, [pc, #12]	; (8006804 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	4798      	blx	r3
  }
}
 80067fe:	bf00      	nop
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	200133dc 	.word	0x200133dc

08006808 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006808:	b590      	push	{r4, r7, lr}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800680e:	4b15      	ldr	r3, [pc, #84]	; (8006864 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d01a      	beq.n	800684c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006816:	4b13      	ldr	r3, [pc, #76]	; (8006864 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d015      	beq.n	800684c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006820:	4b10      	ldr	r3, [pc, #64]	; (8006864 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4798      	blx	r3
 8006828:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800682c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800682e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006832:	f04f 0200 	mov.w	r2, #0
 8006836:	f04f 0300 	mov.w	r3, #0
 800683a:	000a      	movs	r2, r1
 800683c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800683e:	4613      	mov	r3, r2
 8006840:	461a      	mov	r2, r3
 8006842:	4621      	mov	r1, r4
 8006844:	200d      	movs	r0, #13
 8006846:	f7ff fc09 	bl	800605c <SEGGER_SYSVIEW_RecordU32x2>
 800684a:	e006      	b.n	800685a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800684c:	4b06      	ldr	r3, [pc, #24]	; (8006868 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4619      	mov	r1, r3
 8006852:	200c      	movs	r0, #12
 8006854:	f7ff fbc6 	bl	8005fe4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006858:	bf00      	nop
 800685a:	bf00      	nop
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	bd90      	pop	{r4, r7, pc}
 8006862:	bf00      	nop
 8006864:	200133dc 	.word	0x200133dc
 8006868:	e0001004 	.word	0xe0001004

0800686c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006872:	f3ef 8311 	mrs	r3, BASEPRI
 8006876:	f04f 0120 	mov.w	r1, #32
 800687a:	f381 8811 	msr	BASEPRI, r1
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	4819      	ldr	r0, [pc, #100]	; (80068e8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006882:	f7ff f9b8 	bl	8005bf6 <_PreparePacket>
 8006886:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800688c:	4b17      	ldr	r3, [pc, #92]	; (80068ec <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006894:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	617b      	str	r3, [r7, #20]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	613b      	str	r3, [r7, #16]
 800689e:	e00b      	b.n	80068b8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	1c59      	adds	r1, r3, #1
 80068a8:	6179      	str	r1, [r7, #20]
 80068aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068ae:	b2d2      	uxtb	r2, r2
 80068b0:	701a      	strb	r2, [r3, #0]
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	09db      	lsrs	r3, r3, #7
 80068b6:	613b      	str	r3, [r7, #16]
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	2b7f      	cmp	r3, #127	; 0x7f
 80068bc:	d8f0      	bhi.n	80068a0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	617a      	str	r2, [r7, #20]
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	701a      	strb	r2, [r3, #0]
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80068ce:	2202      	movs	r2, #2
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	68b8      	ldr	r0, [r7, #8]
 80068d4:	f7ff fa80 	bl	8005dd8 <_SendPacket>
  RECORD_END();
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f383 8811 	msr	BASEPRI, r3
}
 80068de:	bf00      	nop
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	2001340c 	.word	0x2001340c
 80068ec:	e000ed04 	.word	0xe000ed04

080068f0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80068f6:	f3ef 8311 	mrs	r3, BASEPRI
 80068fa:	f04f 0120 	mov.w	r1, #32
 80068fe:	f381 8811 	msr	BASEPRI, r1
 8006902:	607b      	str	r3, [r7, #4]
 8006904:	4807      	ldr	r0, [pc, #28]	; (8006924 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006906:	f7ff f976 	bl	8005bf6 <_PreparePacket>
 800690a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800690c:	2203      	movs	r2, #3
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	6838      	ldr	r0, [r7, #0]
 8006912:	f7ff fa61 	bl	8005dd8 <_SendPacket>
  RECORD_END();
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f383 8811 	msr	BASEPRI, r3
}
 800691c:	bf00      	nop
 800691e:	3708      	adds	r7, #8
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	2001340c 	.word	0x2001340c

08006928 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800692e:	f3ef 8311 	mrs	r3, BASEPRI
 8006932:	f04f 0120 	mov.w	r1, #32
 8006936:	f381 8811 	msr	BASEPRI, r1
 800693a:	607b      	str	r3, [r7, #4]
 800693c:	4807      	ldr	r0, [pc, #28]	; (800695c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800693e:	f7ff f95a 	bl	8005bf6 <_PreparePacket>
 8006942:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006944:	2212      	movs	r2, #18
 8006946:	6839      	ldr	r1, [r7, #0]
 8006948:	6838      	ldr	r0, [r7, #0]
 800694a:	f7ff fa45 	bl	8005dd8 <_SendPacket>
  RECORD_END();
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f383 8811 	msr	BASEPRI, r3
}
 8006954:	bf00      	nop
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	2001340c 	.word	0x2001340c

08006960 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006966:	f3ef 8311 	mrs	r3, BASEPRI
 800696a:	f04f 0120 	mov.w	r1, #32
 800696e:	f381 8811 	msr	BASEPRI, r1
 8006972:	607b      	str	r3, [r7, #4]
 8006974:	4807      	ldr	r0, [pc, #28]	; (8006994 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006976:	f7ff f93e 	bl	8005bf6 <_PreparePacket>
 800697a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800697c:	2211      	movs	r2, #17
 800697e:	6839      	ldr	r1, [r7, #0]
 8006980:	6838      	ldr	r0, [r7, #0]
 8006982:	f7ff fa29 	bl	8005dd8 <_SendPacket>
  RECORD_END();
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f383 8811 	msr	BASEPRI, r3
}
 800698c:	bf00      	nop
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	2001340c 	.word	0x2001340c

08006998 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006998:	b580      	push	{r7, lr}
 800699a:	b088      	sub	sp, #32
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069a0:	f3ef 8311 	mrs	r3, BASEPRI
 80069a4:	f04f 0120 	mov.w	r1, #32
 80069a8:	f381 8811 	msr	BASEPRI, r1
 80069ac:	617b      	str	r3, [r7, #20]
 80069ae:	4819      	ldr	r0, [pc, #100]	; (8006a14 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80069b0:	f7ff f921 	bl	8005bf6 <_PreparePacket>
 80069b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80069ba:	4b17      	ldr	r3, [pc, #92]	; (8006a18 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	61fb      	str	r3, [r7, #28]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	61bb      	str	r3, [r7, #24]
 80069cc:	e00b      	b.n	80069e6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	1c59      	adds	r1, r3, #1
 80069d6:	61f9      	str	r1, [r7, #28]
 80069d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069dc:	b2d2      	uxtb	r2, r2
 80069de:	701a      	strb	r2, [r3, #0]
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	09db      	lsrs	r3, r3, #7
 80069e4:	61bb      	str	r3, [r7, #24]
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	2b7f      	cmp	r3, #127	; 0x7f
 80069ea:	d8f0      	bhi.n	80069ce <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	1c5a      	adds	r2, r3, #1
 80069f0:	61fa      	str	r2, [r7, #28]
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	b2d2      	uxtb	r2, r2
 80069f6:	701a      	strb	r2, [r3, #0]
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80069fc:	2208      	movs	r2, #8
 80069fe:	68f9      	ldr	r1, [r7, #12]
 8006a00:	6938      	ldr	r0, [r7, #16]
 8006a02:	f7ff f9e9 	bl	8005dd8 <_SendPacket>
  RECORD_END();
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f383 8811 	msr	BASEPRI, r3
}
 8006a0c:	bf00      	nop
 8006a0e:	3720      	adds	r7, #32
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	2001340c 	.word	0x2001340c
 8006a18:	200133dc 	.word	0x200133dc

08006a1c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b088      	sub	sp, #32
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a24:	f3ef 8311 	mrs	r3, BASEPRI
 8006a28:	f04f 0120 	mov.w	r1, #32
 8006a2c:	f381 8811 	msr	BASEPRI, r1
 8006a30:	617b      	str	r3, [r7, #20]
 8006a32:	4819      	ldr	r0, [pc, #100]	; (8006a98 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006a34:	f7ff f8df 	bl	8005bf6 <_PreparePacket>
 8006a38:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a3e:	4b17      	ldr	r3, [pc, #92]	; (8006a9c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	61fb      	str	r3, [r7, #28]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	61bb      	str	r3, [r7, #24]
 8006a50:	e00b      	b.n	8006a6a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	1c59      	adds	r1, r3, #1
 8006a5a:	61f9      	str	r1, [r7, #28]
 8006a5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a60:	b2d2      	uxtb	r2, r2
 8006a62:	701a      	strb	r2, [r3, #0]
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	09db      	lsrs	r3, r3, #7
 8006a68:	61bb      	str	r3, [r7, #24]
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a6e:	d8f0      	bhi.n	8006a52 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	1c5a      	adds	r2, r3, #1
 8006a74:	61fa      	str	r2, [r7, #28]
 8006a76:	69ba      	ldr	r2, [r7, #24]
 8006a78:	b2d2      	uxtb	r2, r2
 8006a7a:	701a      	strb	r2, [r3, #0]
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006a80:	2204      	movs	r2, #4
 8006a82:	68f9      	ldr	r1, [r7, #12]
 8006a84:	6938      	ldr	r0, [r7, #16]
 8006a86:	f7ff f9a7 	bl	8005dd8 <_SendPacket>
  RECORD_END();
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f383 8811 	msr	BASEPRI, r3
}
 8006a90:	bf00      	nop
 8006a92:	3720      	adds	r7, #32
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	2001340c 	.word	0x2001340c
 8006a9c:	200133dc 	.word	0x200133dc

08006aa0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b088      	sub	sp, #32
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006aa8:	f3ef 8311 	mrs	r3, BASEPRI
 8006aac:	f04f 0120 	mov.w	r1, #32
 8006ab0:	f381 8811 	msr	BASEPRI, r1
 8006ab4:	617b      	str	r3, [r7, #20]
 8006ab6:	4819      	ldr	r0, [pc, #100]	; (8006b1c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006ab8:	f7ff f89d 	bl	8005bf6 <_PreparePacket>
 8006abc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ac2:	4b17      	ldr	r3, [pc, #92]	; (8006b20 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	61fb      	str	r3, [r7, #28]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	61bb      	str	r3, [r7, #24]
 8006ad4:	e00b      	b.n	8006aee <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	1c59      	adds	r1, r3, #1
 8006ade:	61f9      	str	r1, [r7, #28]
 8006ae0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ae4:	b2d2      	uxtb	r2, r2
 8006ae6:	701a      	strb	r2, [r3, #0]
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	09db      	lsrs	r3, r3, #7
 8006aec:	61bb      	str	r3, [r7, #24]
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	2b7f      	cmp	r3, #127	; 0x7f
 8006af2:	d8f0      	bhi.n	8006ad6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	1c5a      	adds	r2, r3, #1
 8006af8:	61fa      	str	r2, [r7, #28]
 8006afa:	69ba      	ldr	r2, [r7, #24]
 8006afc:	b2d2      	uxtb	r2, r2
 8006afe:	701a      	strb	r2, [r3, #0]
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006b04:	2206      	movs	r2, #6
 8006b06:	68f9      	ldr	r1, [r7, #12]
 8006b08:	6938      	ldr	r0, [r7, #16]
 8006b0a:	f7ff f965 	bl	8005dd8 <_SendPacket>
  RECORD_END();
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f383 8811 	msr	BASEPRI, r3
}
 8006b14:	bf00      	nop
 8006b16:	3720      	adds	r7, #32
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	2001340c 	.word	0x2001340c
 8006b20:	200133dc 	.word	0x200133dc

08006b24 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b08a      	sub	sp, #40	; 0x28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b2e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b32:	f04f 0120 	mov.w	r1, #32
 8006b36:	f381 8811 	msr	BASEPRI, r1
 8006b3a:	617b      	str	r3, [r7, #20]
 8006b3c:	4827      	ldr	r0, [pc, #156]	; (8006bdc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006b3e:	f7ff f85a 	bl	8005bf6 <_PreparePacket>
 8006b42:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b48:	4b25      	ldr	r3, [pc, #148]	; (8006be0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	627b      	str	r3, [r7, #36]	; 0x24
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	623b      	str	r3, [r7, #32]
 8006b5a:	e00b      	b.n	8006b74 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	1c59      	adds	r1, r3, #1
 8006b64:	6279      	str	r1, [r7, #36]	; 0x24
 8006b66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b6a:	b2d2      	uxtb	r2, r2
 8006b6c:	701a      	strb	r2, [r3, #0]
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	09db      	lsrs	r3, r3, #7
 8006b72:	623b      	str	r3, [r7, #32]
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	2b7f      	cmp	r3, #127	; 0x7f
 8006b78:	d8f0      	bhi.n	8006b5c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	627a      	str	r2, [r7, #36]	; 0x24
 8006b80:	6a3a      	ldr	r2, [r7, #32]
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	701a      	strb	r2, [r3, #0]
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	61fb      	str	r3, [r7, #28]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	61bb      	str	r3, [r7, #24]
 8006b92:	e00b      	b.n	8006bac <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	1c59      	adds	r1, r3, #1
 8006b9c:	61f9      	str	r1, [r7, #28]
 8006b9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ba2:	b2d2      	uxtb	r2, r2
 8006ba4:	701a      	strb	r2, [r3, #0]
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	09db      	lsrs	r3, r3, #7
 8006baa:	61bb      	str	r3, [r7, #24]
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	2b7f      	cmp	r3, #127	; 0x7f
 8006bb0:	d8f0      	bhi.n	8006b94 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	1c5a      	adds	r2, r3, #1
 8006bb6:	61fa      	str	r2, [r7, #28]
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	b2d2      	uxtb	r2, r2
 8006bbc:	701a      	strb	r2, [r3, #0]
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006bc2:	2207      	movs	r2, #7
 8006bc4:	68f9      	ldr	r1, [r7, #12]
 8006bc6:	6938      	ldr	r0, [r7, #16]
 8006bc8:	f7ff f906 	bl	8005dd8 <_SendPacket>
  RECORD_END();
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f383 8811 	msr	BASEPRI, r3
}
 8006bd2:	bf00      	nop
 8006bd4:	3728      	adds	r7, #40	; 0x28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	2001340c 	.word	0x2001340c
 8006be0:	200133dc 	.word	0x200133dc

08006be4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006bec:	4b04      	ldr	r3, [pc, #16]	; (8006c00 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	1ad3      	subs	r3, r2, r3
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr
 8006c00:	200133dc 	.word	0x200133dc

08006c04 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b08c      	sub	sp, #48	; 0x30
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006c0e:	4b3b      	ldr	r3, [pc, #236]	; (8006cfc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d06d      	beq.n	8006cf2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006c16:	4b39      	ldr	r3, [pc, #228]	; (8006cfc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c20:	e008      	b.n	8006c34 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d007      	beq.n	8006c3e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c30:	3301      	adds	r3, #1
 8006c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c34:	79fb      	ldrb	r3, [r7, #7]
 8006c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d3f2      	bcc.n	8006c22 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006c3c:	e000      	b.n	8006c40 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006c3e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d055      	beq.n	8006cf2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c46:	f3ef 8311 	mrs	r3, BASEPRI
 8006c4a:	f04f 0120 	mov.w	r1, #32
 8006c4e:	f381 8811 	msr	BASEPRI, r1
 8006c52:	617b      	str	r3, [r7, #20]
 8006c54:	482a      	ldr	r0, [pc, #168]	; (8006d00 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006c56:	f7fe ffce 	bl	8005bf6 <_PreparePacket>
 8006c5a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	627b      	str	r3, [r7, #36]	; 0x24
 8006c64:	79fb      	ldrb	r3, [r7, #7]
 8006c66:	623b      	str	r3, [r7, #32]
 8006c68:	e00b      	b.n	8006c82 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	1c59      	adds	r1, r3, #1
 8006c72:	6279      	str	r1, [r7, #36]	; 0x24
 8006c74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c78:	b2d2      	uxtb	r2, r2
 8006c7a:	701a      	strb	r2, [r3, #0]
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	09db      	lsrs	r3, r3, #7
 8006c80:	623b      	str	r3, [r7, #32]
 8006c82:	6a3b      	ldr	r3, [r7, #32]
 8006c84:	2b7f      	cmp	r3, #127	; 0x7f
 8006c86:	d8f0      	bhi.n	8006c6a <SEGGER_SYSVIEW_SendModule+0x66>
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	627a      	str	r2, [r7, #36]	; 0x24
 8006c8e:	6a3a      	ldr	r2, [r7, #32]
 8006c90:	b2d2      	uxtb	r2, r2
 8006c92:	701a      	strb	r2, [r3, #0]
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	61fb      	str	r3, [r7, #28]
 8006c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	61bb      	str	r3, [r7, #24]
 8006ca2:	e00b      	b.n	8006cbc <SEGGER_SYSVIEW_SendModule+0xb8>
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	1c59      	adds	r1, r3, #1
 8006cac:	61f9      	str	r1, [r7, #28]
 8006cae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cb2:	b2d2      	uxtb	r2, r2
 8006cb4:	701a      	strb	r2, [r3, #0]
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	09db      	lsrs	r3, r3, #7
 8006cba:	61bb      	str	r3, [r7, #24]
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	2b7f      	cmp	r3, #127	; 0x7f
 8006cc0:	d8f0      	bhi.n	8006ca4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	1c5a      	adds	r2, r3, #1
 8006cc6:	61fa      	str	r2, [r7, #28]
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	b2d2      	uxtb	r2, r2
 8006ccc:	701a      	strb	r2, [r3, #0]
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2280      	movs	r2, #128	; 0x80
 8006cd8:	4619      	mov	r1, r3
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f7fe ff3e 	bl	8005b5c <_EncodeStr>
 8006ce0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006ce2:	2216      	movs	r2, #22
 8006ce4:	68f9      	ldr	r1, [r7, #12]
 8006ce6:	6938      	ldr	r0, [r7, #16]
 8006ce8:	f7ff f876 	bl	8005dd8 <_SendPacket>
      RECORD_END();
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006cf2:	bf00      	nop
 8006cf4:	3730      	adds	r7, #48	; 0x30
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	20013404 	.word	0x20013404
 8006d00:	2001340c 	.word	0x2001340c

08006d04 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006d0a:	4b0c      	ldr	r3, [pc, #48]	; (8006d3c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00f      	beq.n	8006d32 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006d12:	4b0a      	ldr	r3, [pc, #40]	; (8006d3c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d002      	beq.n	8006d26 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1f2      	bne.n	8006d18 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006d32:	bf00      	nop
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	20013404 	.word	0x20013404

08006d40 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006d46:	f3ef 8311 	mrs	r3, BASEPRI
 8006d4a:	f04f 0120 	mov.w	r1, #32
 8006d4e:	f381 8811 	msr	BASEPRI, r1
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	4817      	ldr	r0, [pc, #92]	; (8006db4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006d56:	f7fe ff4e 	bl	8005bf6 <_PreparePacket>
 8006d5a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	617b      	str	r3, [r7, #20]
 8006d64:	4b14      	ldr	r3, [pc, #80]	; (8006db8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	613b      	str	r3, [r7, #16]
 8006d6a:	e00b      	b.n	8006d84 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	1c59      	adds	r1, r3, #1
 8006d74:	6179      	str	r1, [r7, #20]
 8006d76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d7a:	b2d2      	uxtb	r2, r2
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	09db      	lsrs	r3, r3, #7
 8006d82:	613b      	str	r3, [r7, #16]
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	2b7f      	cmp	r3, #127	; 0x7f
 8006d88:	d8f0      	bhi.n	8006d6c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	1c5a      	adds	r2, r3, #1
 8006d8e:	617a      	str	r2, [r7, #20]
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	b2d2      	uxtb	r2, r2
 8006d94:	701a      	strb	r2, [r3, #0]
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006d9a:	221b      	movs	r2, #27
 8006d9c:	6879      	ldr	r1, [r7, #4]
 8006d9e:	68b8      	ldr	r0, [r7, #8]
 8006da0:	f7ff f81a 	bl	8005dd8 <_SendPacket>
  RECORD_END();
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f383 8811 	msr	BASEPRI, r3
}
 8006daa:	bf00      	nop
 8006dac:	3718      	adds	r7, #24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	2001340c 	.word	0x2001340c
 8006db8:	20013408 	.word	0x20013408

08006dbc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b08a      	sub	sp, #40	; 0x28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006dc4:	f3ef 8311 	mrs	r3, BASEPRI
 8006dc8:	f04f 0120 	mov.w	r1, #32
 8006dcc:	f381 8811 	msr	BASEPRI, r1
 8006dd0:	617b      	str	r3, [r7, #20]
 8006dd2:	4827      	ldr	r0, [pc, #156]	; (8006e70 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006dd4:	f7fe ff0f 	bl	8005bf6 <_PreparePacket>
 8006dd8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006dda:	2280      	movs	r2, #128	; 0x80
 8006ddc:	6879      	ldr	r1, [r7, #4]
 8006dde:	6938      	ldr	r0, [r7, #16]
 8006de0:	f7fe febc 	bl	8005b5c <_EncodeStr>
 8006de4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dea:	2301      	movs	r3, #1
 8006dec:	623b      	str	r3, [r7, #32]
 8006dee:	e00b      	b.n	8006e08 <SEGGER_SYSVIEW_Warn+0x4c>
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	b2da      	uxtb	r2, r3
 8006df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df6:	1c59      	adds	r1, r3, #1
 8006df8:	6279      	str	r1, [r7, #36]	; 0x24
 8006dfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dfe:	b2d2      	uxtb	r2, r2
 8006e00:	701a      	strb	r2, [r3, #0]
 8006e02:	6a3b      	ldr	r3, [r7, #32]
 8006e04:	09db      	lsrs	r3, r3, #7
 8006e06:	623b      	str	r3, [r7, #32]
 8006e08:	6a3b      	ldr	r3, [r7, #32]
 8006e0a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e0c:	d8f0      	bhi.n	8006df0 <SEGGER_SYSVIEW_Warn+0x34>
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	627a      	str	r2, [r7, #36]	; 0x24
 8006e14:	6a3a      	ldr	r2, [r7, #32]
 8006e16:	b2d2      	uxtb	r2, r2
 8006e18:	701a      	strb	r2, [r3, #0]
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	61fb      	str	r3, [r7, #28]
 8006e22:	2300      	movs	r3, #0
 8006e24:	61bb      	str	r3, [r7, #24]
 8006e26:	e00b      	b.n	8006e40 <SEGGER_SYSVIEW_Warn+0x84>
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	1c59      	adds	r1, r3, #1
 8006e30:	61f9      	str	r1, [r7, #28]
 8006e32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e36:	b2d2      	uxtb	r2, r2
 8006e38:	701a      	strb	r2, [r3, #0]
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	09db      	lsrs	r3, r3, #7
 8006e3e:	61bb      	str	r3, [r7, #24]
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	2b7f      	cmp	r3, #127	; 0x7f
 8006e44:	d8f0      	bhi.n	8006e28 <SEGGER_SYSVIEW_Warn+0x6c>
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	1c5a      	adds	r2, r3, #1
 8006e4a:	61fa      	str	r2, [r7, #28]
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	b2d2      	uxtb	r2, r2
 8006e50:	701a      	strb	r2, [r3, #0]
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006e56:	221a      	movs	r2, #26
 8006e58:	68f9      	ldr	r1, [r7, #12]
 8006e5a:	6938      	ldr	r0, [r7, #16]
 8006e5c:	f7fe ffbc 	bl	8005dd8 <_SendPacket>
  RECORD_END();
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f383 8811 	msr	BASEPRI, r3
}
 8006e66:	bf00      	nop
 8006e68:	3728      	adds	r7, #40	; 0x28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	2001340c 	.word	0x2001340c

08006e74 <memcmp>:
 8006e74:	b510      	push	{r4, lr}
 8006e76:	3901      	subs	r1, #1
 8006e78:	4402      	add	r2, r0
 8006e7a:	4290      	cmp	r0, r2
 8006e7c:	d101      	bne.n	8006e82 <memcmp+0xe>
 8006e7e:	2000      	movs	r0, #0
 8006e80:	e005      	b.n	8006e8e <memcmp+0x1a>
 8006e82:	7803      	ldrb	r3, [r0, #0]
 8006e84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006e88:	42a3      	cmp	r3, r4
 8006e8a:	d001      	beq.n	8006e90 <memcmp+0x1c>
 8006e8c:	1b18      	subs	r0, r3, r4
 8006e8e:	bd10      	pop	{r4, pc}
 8006e90:	3001      	adds	r0, #1
 8006e92:	e7f2      	b.n	8006e7a <memcmp+0x6>

08006e94 <memset>:
 8006e94:	4402      	add	r2, r0
 8006e96:	4603      	mov	r3, r0
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d100      	bne.n	8006e9e <memset+0xa>
 8006e9c:	4770      	bx	lr
 8006e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8006ea2:	e7f9      	b.n	8006e98 <memset+0x4>

08006ea4 <__libc_init_array>:
 8006ea4:	b570      	push	{r4, r5, r6, lr}
 8006ea6:	4d0d      	ldr	r5, [pc, #52]	; (8006edc <__libc_init_array+0x38>)
 8006ea8:	4c0d      	ldr	r4, [pc, #52]	; (8006ee0 <__libc_init_array+0x3c>)
 8006eaa:	1b64      	subs	r4, r4, r5
 8006eac:	10a4      	asrs	r4, r4, #2
 8006eae:	2600      	movs	r6, #0
 8006eb0:	42a6      	cmp	r6, r4
 8006eb2:	d109      	bne.n	8006ec8 <__libc_init_array+0x24>
 8006eb4:	4d0b      	ldr	r5, [pc, #44]	; (8006ee4 <__libc_init_array+0x40>)
 8006eb6:	4c0c      	ldr	r4, [pc, #48]	; (8006ee8 <__libc_init_array+0x44>)
 8006eb8:	f000 f826 	bl	8006f08 <_init>
 8006ebc:	1b64      	subs	r4, r4, r5
 8006ebe:	10a4      	asrs	r4, r4, #2
 8006ec0:	2600      	movs	r6, #0
 8006ec2:	42a6      	cmp	r6, r4
 8006ec4:	d105      	bne.n	8006ed2 <__libc_init_array+0x2e>
 8006ec6:	bd70      	pop	{r4, r5, r6, pc}
 8006ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ecc:	4798      	blx	r3
 8006ece:	3601      	adds	r6, #1
 8006ed0:	e7ee      	b.n	8006eb0 <__libc_init_array+0xc>
 8006ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed6:	4798      	blx	r3
 8006ed8:	3601      	adds	r6, #1
 8006eda:	e7f2      	b.n	8006ec2 <__libc_init_array+0x1e>
 8006edc:	08007004 	.word	0x08007004
 8006ee0:	08007004 	.word	0x08007004
 8006ee4:	08007004 	.word	0x08007004
 8006ee8:	08007008 	.word	0x08007008

08006eec <memcpy>:
 8006eec:	440a      	add	r2, r1
 8006eee:	4291      	cmp	r1, r2
 8006ef0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ef4:	d100      	bne.n	8006ef8 <memcpy+0xc>
 8006ef6:	4770      	bx	lr
 8006ef8:	b510      	push	{r4, lr}
 8006efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006efe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f02:	4291      	cmp	r1, r2
 8006f04:	d1f9      	bne.n	8006efa <memcpy+0xe>
 8006f06:	bd10      	pop	{r4, pc}

08006f08 <_init>:
 8006f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0a:	bf00      	nop
 8006f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f0e:	bc08      	pop	{r3}
 8006f10:	469e      	mov	lr, r3
 8006f12:	4770      	bx	lr

08006f14 <_fini>:
 8006f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f16:	bf00      	nop
 8006f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f1a:	bc08      	pop	{r3}
 8006f1c:	469e      	mov	lr, r3
 8006f1e:	4770      	bx	lr
