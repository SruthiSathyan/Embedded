
007LED_Interrupt_Continous.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08007834  08007834  00017834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007990  08007990  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08007990  08007990  00017990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007998  08007998  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007998  08007998  00017998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800799c  0800799c  0001799c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080079a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00014494  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200144b0  200144b0  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013fd1  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000031bf  00000000  00000000  00034060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001370  00000000  00000000  00037220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000eee  00000000  00000000  00038590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023a91  00000000  00000000  0003947e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000163e3  00000000  00000000  0005cf0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d8195  00000000  00000000  000732f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005120  00000000  00000000  0014b488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000da  00000000  00000000  001505a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800781c 	.word	0x0800781c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	0800781c 	.word	0x0800781c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012edc 	.word	0x20012edc

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b970 	b.w	800056c <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9e08      	ldr	r6, [sp, #32]
 80002aa:	460d      	mov	r5, r1
 80002ac:	4604      	mov	r4, r0
 80002ae:	460f      	mov	r7, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14a      	bne.n	800034a <__udivmoddi4+0xa6>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4694      	mov	ip, r2
 80002b8:	d965      	bls.n	8000386 <__udivmoddi4+0xe2>
 80002ba:	fab2 f382 	clz	r3, r2
 80002be:	b143      	cbz	r3, 80002d2 <__udivmoddi4+0x2e>
 80002c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c4:	f1c3 0220 	rsb	r2, r3, #32
 80002c8:	409f      	lsls	r7, r3
 80002ca:	fa20 f202 	lsr.w	r2, r0, r2
 80002ce:	4317      	orrs	r7, r2
 80002d0:	409c      	lsls	r4, r3
 80002d2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d6:	fa1f f58c 	uxth.w	r5, ip
 80002da:	fbb7 f1fe 	udiv	r1, r7, lr
 80002de:	0c22      	lsrs	r2, r4, #16
 80002e0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e8:	fb01 f005 	mul.w	r0, r1, r5
 80002ec:	4290      	cmp	r0, r2
 80002ee:	d90a      	bls.n	8000306 <__udivmoddi4+0x62>
 80002f0:	eb1c 0202 	adds.w	r2, ip, r2
 80002f4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f8:	f080 811c 	bcs.w	8000534 <__udivmoddi4+0x290>
 80002fc:	4290      	cmp	r0, r2
 80002fe:	f240 8119 	bls.w	8000534 <__udivmoddi4+0x290>
 8000302:	3902      	subs	r1, #2
 8000304:	4462      	add	r2, ip
 8000306:	1a12      	subs	r2, r2, r0
 8000308:	b2a4      	uxth	r4, r4
 800030a:	fbb2 f0fe 	udiv	r0, r2, lr
 800030e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000312:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000316:	fb00 f505 	mul.w	r5, r0, r5
 800031a:	42a5      	cmp	r5, r4
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x90>
 800031e:	eb1c 0404 	adds.w	r4, ip, r4
 8000322:	f100 32ff 	add.w	r2, r0, #4294967295
 8000326:	f080 8107 	bcs.w	8000538 <__udivmoddi4+0x294>
 800032a:	42a5      	cmp	r5, r4
 800032c:	f240 8104 	bls.w	8000538 <__udivmoddi4+0x294>
 8000330:	4464      	add	r4, ip
 8000332:	3802      	subs	r0, #2
 8000334:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000338:	1b64      	subs	r4, r4, r5
 800033a:	2100      	movs	r1, #0
 800033c:	b11e      	cbz	r6, 8000346 <__udivmoddi4+0xa2>
 800033e:	40dc      	lsrs	r4, r3
 8000340:	2300      	movs	r3, #0
 8000342:	e9c6 4300 	strd	r4, r3, [r6]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0xbc>
 800034e:	2e00      	cmp	r6, #0
 8000350:	f000 80ed 	beq.w	800052e <__udivmoddi4+0x28a>
 8000354:	2100      	movs	r1, #0
 8000356:	e9c6 0500 	strd	r0, r5, [r6]
 800035a:	4608      	mov	r0, r1
 800035c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d149      	bne.n	80003fc <__udivmoddi4+0x158>
 8000368:	42ab      	cmp	r3, r5
 800036a:	d302      	bcc.n	8000372 <__udivmoddi4+0xce>
 800036c:	4282      	cmp	r2, r0
 800036e:	f200 80f8 	bhi.w	8000562 <__udivmoddi4+0x2be>
 8000372:	1a84      	subs	r4, r0, r2
 8000374:	eb65 0203 	sbc.w	r2, r5, r3
 8000378:	2001      	movs	r0, #1
 800037a:	4617      	mov	r7, r2
 800037c:	2e00      	cmp	r6, #0
 800037e:	d0e2      	beq.n	8000346 <__udivmoddi4+0xa2>
 8000380:	e9c6 4700 	strd	r4, r7, [r6]
 8000384:	e7df      	b.n	8000346 <__udivmoddi4+0xa2>
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xe6>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f382 	clz	r3, r2
 800038e:	2b00      	cmp	r3, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x210>
 8000394:	1a8a      	subs	r2, r1, r2
 8000396:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	2101      	movs	r1, #1
 80003a0:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a4:	fb07 2015 	mls	r0, r7, r5, r2
 80003a8:	0c22      	lsrs	r2, r4, #16
 80003aa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ae:	fb0e f005 	mul.w	r0, lr, r5
 80003b2:	4290      	cmp	r0, r2
 80003b4:	d908      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003b6:	eb1c 0202 	adds.w	r2, ip, r2
 80003ba:	f105 38ff 	add.w	r8, r5, #4294967295
 80003be:	d202      	bcs.n	80003c6 <__udivmoddi4+0x122>
 80003c0:	4290      	cmp	r0, r2
 80003c2:	f200 80cb 	bhi.w	800055c <__udivmoddi4+0x2b8>
 80003c6:	4645      	mov	r5, r8
 80003c8:	1a12      	subs	r2, r2, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d0:	fb07 2210 	mls	r2, r7, r0, r2
 80003d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d8:	fb0e fe00 	mul.w	lr, lr, r0
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x14e>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e8:	d202      	bcs.n	80003f0 <__udivmoddi4+0x14c>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	f200 80bb 	bhi.w	8000566 <__udivmoddi4+0x2c2>
 80003f0:	4610      	mov	r0, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003fa:	e79f      	b.n	800033c <__udivmoddi4+0x98>
 80003fc:	f1c1 0720 	rsb	r7, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 fc07 	lsr.w	ip, r2, r7
 8000406:	ea4c 0c03 	orr.w	ip, ip, r3
 800040a:	fa05 f401 	lsl.w	r4, r5, r1
 800040e:	fa20 f307 	lsr.w	r3, r0, r7
 8000412:	40fd      	lsrs	r5, r7
 8000414:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fbb5 f8f9 	udiv	r8, r5, r9
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	fb09 5518 	mls	r5, r9, r8, r5
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800042c:	fb08 f50e 	mul.w	r5, r8, lr
 8000430:	42a5      	cmp	r5, r4
 8000432:	fa02 f201 	lsl.w	r2, r2, r1
 8000436:	fa00 f001 	lsl.w	r0, r0, r1
 800043a:	d90b      	bls.n	8000454 <__udivmoddi4+0x1b0>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f108 3aff 	add.w	sl, r8, #4294967295
 8000444:	f080 8088 	bcs.w	8000558 <__udivmoddi4+0x2b4>
 8000448:	42a5      	cmp	r5, r4
 800044a:	f240 8085 	bls.w	8000558 <__udivmoddi4+0x2b4>
 800044e:	f1a8 0802 	sub.w	r8, r8, #2
 8000452:	4464      	add	r4, ip
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	b29d      	uxth	r5, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000464:	fb03 fe0e 	mul.w	lr, r3, lr
 8000468:	45a6      	cmp	lr, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1da>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f103 35ff 	add.w	r5, r3, #4294967295
 8000474:	d26c      	bcs.n	8000550 <__udivmoddi4+0x2ac>
 8000476:	45a6      	cmp	lr, r4
 8000478:	d96a      	bls.n	8000550 <__udivmoddi4+0x2ac>
 800047a:	3b02      	subs	r3, #2
 800047c:	4464      	add	r4, ip
 800047e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000482:	fba3 9502 	umull	r9, r5, r3, r2
 8000486:	eba4 040e 	sub.w	r4, r4, lr
 800048a:	42ac      	cmp	r4, r5
 800048c:	46c8      	mov	r8, r9
 800048e:	46ae      	mov	lr, r5
 8000490:	d356      	bcc.n	8000540 <__udivmoddi4+0x29c>
 8000492:	d053      	beq.n	800053c <__udivmoddi4+0x298>
 8000494:	b156      	cbz	r6, 80004ac <__udivmoddi4+0x208>
 8000496:	ebb0 0208 	subs.w	r2, r0, r8
 800049a:	eb64 040e 	sbc.w	r4, r4, lr
 800049e:	fa04 f707 	lsl.w	r7, r4, r7
 80004a2:	40ca      	lsrs	r2, r1
 80004a4:	40cc      	lsrs	r4, r1
 80004a6:	4317      	orrs	r7, r2
 80004a8:	e9c6 7400 	strd	r7, r4, [r6]
 80004ac:	4618      	mov	r0, r3
 80004ae:	2100      	movs	r1, #0
 80004b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b4:	f1c3 0120 	rsb	r1, r3, #32
 80004b8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004bc:	fa20 f201 	lsr.w	r2, r0, r1
 80004c0:	fa25 f101 	lsr.w	r1, r5, r1
 80004c4:	409d      	lsls	r5, r3
 80004c6:	432a      	orrs	r2, r5
 80004c8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004cc:	fa1f fe8c 	uxth.w	lr, ip
 80004d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d4:	fb07 1510 	mls	r5, r7, r0, r1
 80004d8:	0c11      	lsrs	r1, r2, #16
 80004da:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004de:	fb00 f50e 	mul.w	r5, r0, lr
 80004e2:	428d      	cmp	r5, r1
 80004e4:	fa04 f403 	lsl.w	r4, r4, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x258>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f2:	d22f      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 80004f4:	428d      	cmp	r5, r1
 80004f6:	d92d      	bls.n	8000554 <__udivmoddi4+0x2b0>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	1b49      	subs	r1, r1, r5
 80004fe:	b292      	uxth	r2, r2
 8000500:	fbb1 f5f7 	udiv	r5, r1, r7
 8000504:	fb07 1115 	mls	r1, r7, r5, r1
 8000508:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800050c:	fb05 f10e 	mul.w	r1, r5, lr
 8000510:	4291      	cmp	r1, r2
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x282>
 8000514:	eb1c 0202 	adds.w	r2, ip, r2
 8000518:	f105 38ff 	add.w	r8, r5, #4294967295
 800051c:	d216      	bcs.n	800054c <__udivmoddi4+0x2a8>
 800051e:	4291      	cmp	r1, r2
 8000520:	d914      	bls.n	800054c <__udivmoddi4+0x2a8>
 8000522:	3d02      	subs	r5, #2
 8000524:	4462      	add	r2, ip
 8000526:	1a52      	subs	r2, r2, r1
 8000528:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800052c:	e738      	b.n	80003a0 <__udivmoddi4+0xfc>
 800052e:	4631      	mov	r1, r6
 8000530:	4630      	mov	r0, r6
 8000532:	e708      	b.n	8000346 <__udivmoddi4+0xa2>
 8000534:	4639      	mov	r1, r7
 8000536:	e6e6      	b.n	8000306 <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e6fb      	b.n	8000334 <__udivmoddi4+0x90>
 800053c:	4548      	cmp	r0, r9
 800053e:	d2a9      	bcs.n	8000494 <__udivmoddi4+0x1f0>
 8000540:	ebb9 0802 	subs.w	r8, r9, r2
 8000544:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000548:	3b01      	subs	r3, #1
 800054a:	e7a3      	b.n	8000494 <__udivmoddi4+0x1f0>
 800054c:	4645      	mov	r5, r8
 800054e:	e7ea      	b.n	8000526 <__udivmoddi4+0x282>
 8000550:	462b      	mov	r3, r5
 8000552:	e794      	b.n	800047e <__udivmoddi4+0x1da>
 8000554:	4640      	mov	r0, r8
 8000556:	e7d1      	b.n	80004fc <__udivmoddi4+0x258>
 8000558:	46d0      	mov	r8, sl
 800055a:	e77b      	b.n	8000454 <__udivmoddi4+0x1b0>
 800055c:	3d02      	subs	r5, #2
 800055e:	4462      	add	r2, ip
 8000560:	e732      	b.n	80003c8 <__udivmoddi4+0x124>
 8000562:	4608      	mov	r0, r1
 8000564:	e70a      	b.n	800037c <__udivmoddi4+0xd8>
 8000566:	4464      	add	r4, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e742      	b.n	80003f2 <__udivmoddi4+0x14e>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fbc7 	bl	8000d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f84f 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f8b7 	bl	80006f0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 8000582:	4820      	ldr	r0, [pc, #128]	; (8000604 <main+0x94>)
 8000584:	f004 fea4 	bl	80052d0 <SEGGER_UART_init>

  //  Cyclic count enable
    DWT_CTRL |=(1<<0);
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <main+0x98>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a1e      	ldr	r2, [pc, #120]	; (8000608 <main+0x98>)
 800058e:	f043 0301 	orr.w	r3, r3, #1
 8000592:	6013      	str	r3, [r2, #0]

    SEGGER_SYSVIEW_Conf();
 8000594:	f004 fc56 	bl	8004e44 <SEGGER_SYSVIEW_Conf>

  //  task creation
    status = xTaskCreate(led_green_handler,
 8000598:	f107 0308 	add.w	r3, r7, #8
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2303      	movs	r3, #3
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2300      	movs	r3, #0
 80005a4:	22c8      	movs	r2, #200	; 0xc8
 80005a6:	4919      	ldr	r1, [pc, #100]	; (800060c <main+0x9c>)
 80005a8:	4819      	ldr	r0, [pc, #100]	; (8000610 <main+0xa0>)
 80005aa:	f002 fc4f 	bl	8002e4c <xTaskCreate>
 80005ae:	6178      	str	r0, [r7, #20]
                NULL,
                3,
                &ledg_task_handle
                              );

    configASSERT(status == pdPASS);
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d00a      	beq.n	80005cc <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ba:	f383 8811 	msr	BASEPRI, r3
 80005be:	f3bf 8f6f 	isb	sy
 80005c2:	f3bf 8f4f 	dsb	sy
 80005c6:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c8:	bf00      	nop
 80005ca:	e7fe      	b.n	80005ca <main+0x5a>



    status = xTaskCreate(led_red_handler,
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	2302      	movs	r3, #2
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2300      	movs	r3, #0
 80005d6:	22c8      	movs	r2, #200	; 0xc8
 80005d8:	490e      	ldr	r1, [pc, #56]	; (8000614 <main+0xa4>)
 80005da:	480f      	ldr	r0, [pc, #60]	; (8000618 <main+0xa8>)
 80005dc:	f002 fc36 	bl	8002e4c <xTaskCreate>
 80005e0:	6178      	str	r0, [r7, #20]
                  NULL,
                  2,
                  &ledr_task_handle
                                );

    configASSERT(status == pdPASS);
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d00a      	beq.n	80005fe <main+0x8e>
        __asm volatile
 80005e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ec:	f383 8811 	msr	BASEPRI, r3
 80005f0:	f3bf 8f6f 	isb	sy
 80005f4:	f3bf 8f4f 	dsb	sy
 80005f8:	60fb      	str	r3, [r7, #12]
    }
 80005fa:	bf00      	nop
 80005fc:	e7fe      	b.n	80005fc <main+0x8c>


     vTaskStartScheduler();
 80005fe:	f002 fe63 	bl	80032c8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000602:	e7fe      	b.n	8000602 <main+0x92>
 8000604:	0007a120 	.word	0x0007a120
 8000608:	e0001000 	.word	0xe0001000
 800060c:	08007834 	.word	0x08007834
 8000610:	08000a4d 	.word	0x08000a4d
 8000614:	0800783c 	.word	0x0800783c
 8000618:	08000a79 	.word	0x08000a79

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f007 f8bc 	bl	80077a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a27      	ldr	r2, [pc, #156]	; (80006e8 <SystemClock_Config+0xcc>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemClock_Config+0xd0>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800068c:	2308      	movs	r3, #8
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000690:	2332      	movs	r3, #50	; 0x32
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000694:	2304      	movs	r3, #4
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000698:	2307      	movs	r3, #7
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fe6d 	bl	8001380 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ac:	f000 fa1c 	bl	8000ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f8ce 	bl	8001870 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006da:	f000 fa05 	bl	8000ae8 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08c      	sub	sp, #48	; 0x30
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
 800070a:	4ba6      	ldr	r3, [pc, #664]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4aa5      	ldr	r2, [pc, #660]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 8000710:	f043 0310 	orr.w	r3, r3, #16
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4ba3      	ldr	r3, [pc, #652]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0310 	and.w	r3, r3, #16
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
 8000726:	4b9f      	ldr	r3, [pc, #636]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a9e      	ldr	r2, [pc, #632]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b9c      	ldr	r3, [pc, #624]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	617b      	str	r3, [r7, #20]
 800073c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4b98      	ldr	r3, [pc, #608]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a97      	ldr	r2, [pc, #604]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b95      	ldr	r3, [pc, #596]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	4b91      	ldr	r3, [pc, #580]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a90      	ldr	r2, [pc, #576]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b8e      	ldr	r3, [pc, #568]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b8a      	ldr	r3, [pc, #552]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a89      	ldr	r2, [pc, #548]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b87      	ldr	r3, [pc, #540]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b83      	ldr	r3, [pc, #524]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a82      	ldr	r2, [pc, #520]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 800079c:	f043 0308 	orr.w	r3, r3, #8
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b80      	ldr	r3, [pc, #512]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2108      	movs	r1, #8
 80007b2:	487d      	ldr	r0, [pc, #500]	; (80009a8 <MX_GPIO_Init+0x2b8>)
 80007b4:	f000 fd8c 	bl	80012d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2101      	movs	r1, #1
 80007bc:	487b      	ldr	r0, [pc, #492]	; (80009ac <MX_GPIO_Init+0x2bc>)
 80007be:	f000 fd87 	bl	80012d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007c2:	2200      	movs	r2, #0
 80007c4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007c8:	4879      	ldr	r0, [pc, #484]	; (80009b0 <MX_GPIO_Init+0x2c0>)
 80007ca:	f000 fd81 	bl	80012d0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007ce:	2308      	movs	r3, #8
 80007d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	4619      	mov	r1, r3
 80007e4:	4870      	ldr	r0, [pc, #448]	; (80009a8 <MX_GPIO_Init+0x2b8>)
 80007e6:	f000 fbd7 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007ea:	2301      	movs	r3, #1
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	486a      	ldr	r0, [pc, #424]	; (80009ac <MX_GPIO_Init+0x2bc>)
 8000802:	f000 fbc9 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000806:	2308      	movs	r3, #8
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000816:	2305      	movs	r3, #5
 8000818:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	4862      	ldr	r0, [pc, #392]	; (80009ac <MX_GPIO_Init+0x2bc>)
 8000822:	f000 fbb9 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000826:	2301      	movs	r3, #1
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800082a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	485e      	ldr	r0, [pc, #376]	; (80009b4 <MX_GPIO_Init+0x2c4>)
 800083c:	f000 fbac 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000840:	2310      	movs	r3, #16
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000850:	2306      	movs	r3, #6
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	4856      	ldr	r0, [pc, #344]	; (80009b4 <MX_GPIO_Init+0x2c4>)
 800085c:	f000 fb9c 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000860:	23e0      	movs	r3, #224	; 0xe0
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000870:	2305      	movs	r3, #5
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	484e      	ldr	r0, [pc, #312]	; (80009b4 <MX_GPIO_Init+0x2c4>)
 800087c:	f000 fb8c 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000880:	2304      	movs	r3, #4
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4849      	ldr	r0, [pc, #292]	; (80009b8 <MX_GPIO_Init+0x2c8>)
 8000894:	f000 fb80 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008aa:	2305      	movs	r3, #5
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4840      	ldr	r0, [pc, #256]	; (80009b8 <MX_GPIO_Init+0x2c8>)
 80008b6:	f000 fb6f 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ba:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008be:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4837      	ldr	r0, [pc, #220]	; (80009b0 <MX_GPIO_Init+0x2c0>)
 80008d4:	f000 fb60 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008d8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008ea:	2306      	movs	r3, #6
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	482d      	ldr	r0, [pc, #180]	; (80009ac <MX_GPIO_Init+0x2bc>)
 80008f6:	f000 fb4f 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4829      	ldr	r0, [pc, #164]	; (80009b4 <MX_GPIO_Init+0x2c4>)
 8000910:	f000 fb42 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000914:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000926:	230a      	movs	r3, #10
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4820      	ldr	r0, [pc, #128]	; (80009b4 <MX_GPIO_Init+0x2c4>)
 8000932:	f000 fb31 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000936:	2320      	movs	r3, #32
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4819      	ldr	r0, [pc, #100]	; (80009b0 <MX_GPIO_Init+0x2c0>)
 800094a:	f000 fb25 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800094e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000954:	2312      	movs	r3, #18
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000960:	2304      	movs	r3, #4
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	4813      	ldr	r0, [pc, #76]	; (80009b8 <MX_GPIO_Init+0x2c8>)
 800096c:	f000 fb14 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000970:	2302      	movs	r3, #2
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000974:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4808      	ldr	r0, [pc, #32]	; (80009a8 <MX_GPIO_Init+0x2b8>)
 8000986:	f000 fb07 	bl	8000f98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2105      	movs	r1, #5
 800098e:	2006      	movs	r0, #6
 8000990:	f000 fad8 	bl	8000f44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000994:	2006      	movs	r0, #6
 8000996:	f000 faf1 	bl	8000f7c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800099a:	bf00      	nop
 800099c:	3730      	adds	r7, #48	; 0x30
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40020800 	.word	0x40020800
 80009b0:	40020c00 	.word	0x40020c00
 80009b4:	40020000 	.word	0x40020000
 80009b8:	40020400 	.word	0x40020400

080009bc <switch_priority>:

/* USER CODE BEGIN 4 */

void switch_priority(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
	UBaseType_t p1,p2;
	xTaskHandle t1,t2,curr;

	BaseType_t switch_priority = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
	portENTER_CRITICAL();
 80009c6:	f003 ff07 	bl	80047d8 <vPortEnterCritical>
	if(status_button)
 80009ca:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <switch_priority+0x84>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d004      	beq.n	80009dc <switch_priority+0x20>
	{
		status_button = 0;
 80009d2:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <switch_priority+0x84>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
		switch_priority=1;
 80009d8:	2301      	movs	r3, #1
 80009da:	617b      	str	r3, [r7, #20]
	}
	portEXIT_CRITICAL();
 80009dc:	f003 ff2c 	bl	8004838 <vPortExitCritical>
	if(switch_priority)
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d027      	beq.n	8000a36 <switch_priority+0x7a>
	{
		t1=xTaskGetHandle("Task-1");
 80009e6:	4817      	ldr	r0, [pc, #92]	; (8000a44 <switch_priority+0x88>)
 80009e8:	f002 fe0e 	bl	8003608 <xTaskGetHandle>
 80009ec:	6138      	str	r0, [r7, #16]
		t2=xTaskGetHandle("Task-2");
 80009ee:	4816      	ldr	r0, [pc, #88]	; (8000a48 <switch_priority+0x8c>)
 80009f0:	f002 fe0a 	bl	8003608 <xTaskGetHandle>
 80009f4:	60f8      	str	r0, [r7, #12]

		p1 = uxTaskPriorityGet(t1);
 80009f6:	6938      	ldr	r0, [r7, #16]
 80009f8:	f002 fb8c 	bl	8003114 <uxTaskPriorityGet>
 80009fc:	60b8      	str	r0, [r7, #8]
		p2 = uxTaskPriorityGet(t2);
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f002 fb88 	bl	8003114 <uxTaskPriorityGet>
 8000a04:	6078      	str	r0, [r7, #4]

		curr = xTaskGetCurrentTaskHandle();
 8000a06:	f003 f97d 	bl	8003d04 <xTaskGetCurrentTaskHandle>
 8000a0a:	6038      	str	r0, [r7, #0]

		if(curr == t1)
 8000a0c:	683a      	ldr	r2, [r7, #0]
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d108      	bne.n	8000a26 <switch_priority+0x6a>
		{
			vTaskPrioritySet(t1, p2);
 8000a14:	6879      	ldr	r1, [r7, #4]
 8000a16:	6938      	ldr	r0, [r7, #16]
 8000a18:	f002 fb96 	bl	8003148 <vTaskPrioritySet>
			vTaskPrioritySet(t2, p1);
 8000a1c:	68b9      	ldr	r1, [r7, #8]
 8000a1e:	68f8      	ldr	r0, [r7, #12]
 8000a20:	f002 fb92 	bl	8003148 <vTaskPrioritySet>
		{
			vTaskPrioritySet(t2, p1);
			vTaskPrioritySet(t1, p2);
		}
	}
}
 8000a24:	e007      	b.n	8000a36 <switch_priority+0x7a>
			vTaskPrioritySet(t2, p1);
 8000a26:	68b9      	ldr	r1, [r7, #8]
 8000a28:	68f8      	ldr	r0, [r7, #12]
 8000a2a:	f002 fb8d 	bl	8003148 <vTaskPrioritySet>
			vTaskPrioritySet(t1, p2);
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	6938      	ldr	r0, [r7, #16]
 8000a32:	f002 fb89 	bl	8003148 <vTaskPrioritySet>
}
 8000a36:	bf00      	nop
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000038 	.word	0x20000038
 8000a44:	08007834 	.word	0x08007834
 8000a48:	0800783c 	.word	0x0800783c

08000a4c <led_green_handler>:

static void led_green_handler(void* parameters)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a54:	4806      	ldr	r0, [pc, #24]	; (8000a70 <led_green_handler+0x24>)
 8000a56:	f006 fdf9 	bl	800764c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <led_green_handler+0x28>)
 8000a60:	f000 fc4f 	bl	8001302 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000a64:	2064      	movs	r0, #100	; 0x64
 8000a66:	f000 f991 	bl	8000d8c <HAL_Delay>
		switch_priority();
 8000a6a:	f7ff ffa7 	bl	80009bc <switch_priority>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a6e:	e7f1      	b.n	8000a54 <led_green_handler+0x8>
 8000a70:	08007844 	.word	0x08007844
 8000a74:	40020c00 	.word	0x40020c00

08000a78 <led_red_handler>:

	}
}

static void led_red_handler(void* parameters)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a80:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <led_red_handler+0x28>)
 8000a82:	f006 fde3 	bl	800764c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a8a:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <led_red_handler+0x2c>)
 8000a8c:	f000 fc39 	bl	8001302 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000a90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a94:	f000 f97a 	bl	8000d8c <HAL_Delay>
		switch_priority();
 8000a98:	f7ff ff90 	bl	80009bc <switch_priority>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a9c:	e7f0      	b.n	8000a80 <led_red_handler+0x8>
 8000a9e:	bf00      	nop
 8000aa0:	08007858 	.word	0x08007858
 8000aa4:	40020c00 	.word	0x40020c00

08000aa8 <button_interrupt_handler>:

	}
}

void button_interrupt_handler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	traceISR_ENTER();
 8000aac:	f006 fb26 	bl	80070fc <SEGGER_SYSVIEW_RecordEnterISR>
	status_button = 1;
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <button_interrupt_handler+0x18>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	601a      	str	r2, [r3, #0]
	traceISR_EXIT();
 8000ab6:	f006 fb63 	bl	8007180 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000038 	.word	0x20000038

08000ac4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d101      	bne.n	8000ada <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ad6:	f000 f939 	bl	8000d4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  /* USER CODE END Callback 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40001000 	.word	0x40001000

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <Error_Handler+0x8>
	...

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b08:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08e      	sub	sp, #56	; 0x38
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	4b33      	ldr	r3, [pc, #204]	; (8000c28 <HAL_InitTick+0xe4>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	4a32      	ldr	r2, [pc, #200]	; (8000c28 <HAL_InitTick+0xe4>)
 8000b5e:	f043 0310 	orr.w	r3, r3, #16
 8000b62:	6413      	str	r3, [r2, #64]	; 0x40
 8000b64:	4b30      	ldr	r3, [pc, #192]	; (8000c28 <HAL_InitTick+0xe4>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	f003 0310 	and.w	r3, r3, #16
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b70:	f107 0210 	add.w	r2, r7, #16
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f001 f884 	bl	8001c88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b80:	6a3b      	ldr	r3, [r7, #32]
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d103      	bne.n	8000b92 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b8a:	f001 f869 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 8000b8e:	6378      	str	r0, [r7, #52]	; 0x34
 8000b90:	e004      	b.n	8000b9c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b92:	f001 f865 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 8000b96:	4603      	mov	r3, r0
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b9e:	4a23      	ldr	r2, [pc, #140]	; (8000c2c <HAL_InitTick+0xe8>)
 8000ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba4:	0c9b      	lsrs	r3, r3, #18
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000baa:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <HAL_InitTick+0xec>)
 8000bac:	4a21      	ldr	r2, [pc, #132]	; (8000c34 <HAL_InitTick+0xf0>)
 8000bae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <HAL_InitTick+0xec>)
 8000bb2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bb8:	4a1d      	ldr	r2, [pc, #116]	; (8000c30 <HAL_InitTick+0xec>)
 8000bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bbc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <HAL_InitTick+0xec>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <HAL_InitTick+0xec>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <HAL_InitTick+0xec>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bd0:	4817      	ldr	r0, [pc, #92]	; (8000c30 <HAL_InitTick+0xec>)
 8000bd2:	f001 f88b 	bl	8001cec <HAL_TIM_Base_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000bdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d11b      	bne.n	8000c1c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000be4:	4812      	ldr	r0, [pc, #72]	; (8000c30 <HAL_InitTick+0xec>)
 8000be6:	f001 f8db 	bl	8001da0 <HAL_TIM_Base_Start_IT>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bf0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d111      	bne.n	8000c1c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bf8:	2036      	movs	r0, #54	; 0x36
 8000bfa:	f000 f9bf 	bl	8000f7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b0f      	cmp	r3, #15
 8000c02:	d808      	bhi.n	8000c16 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c04:	2200      	movs	r2, #0
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	2036      	movs	r0, #54	; 0x36
 8000c0a:	f000 f99b 	bl	8000f44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <HAL_InitTick+0xf4>)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6013      	str	r3, [r2, #0]
 8000c14:	e002      	b.n	8000c1c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3738      	adds	r7, #56	; 0x38
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	431bde83 	.word	0x431bde83
 8000c30:	2000003c 	.word	0x2000003c
 8000c34:	40001000 	.word	0x40001000
 8000c38:	20000004 	.word	0x20000004

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c40:	e7fe      	b.n	8000c40 <NMI_Handler+0x4>

08000c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <MemManage_Handler+0x4>

08000c4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	button_interrupt_handler();
 8000c6c:	f7ff ff1c 	bl	8000aa8 <button_interrupt_handler>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c70:	2001      	movs	r0, #1
 8000c72:	f000 fb61 	bl	8001338 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <TIM6_DAC_IRQHandler+0x10>)
 8000c82:	f001 f8fd 	bl	8001e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000003c 	.word	0x2000003c

08000c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <SystemInit+0x20>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <SystemInit+0x20>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cb8:	f7ff ffea 	bl	8000c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cbc:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cbe:	490d      	ldr	r1, [pc, #52]	; (8000cf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cd4:	4c0a      	ldr	r4, [pc, #40]	; (8000d00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f006 fd69 	bl	80077b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce6:	f7ff fc43 	bl	8000570 <main>
  bx  lr    
 8000cea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000cf8:	080079a0 	.word	0x080079a0
  ldr r2, =_sbss
 8000cfc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000d00:	200144b0 	.word	0x200144b0

08000d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC_IRQHandler>
	...

08000d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <HAL_Init+0x40>)
 8000d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_Init+0x40>)
 8000d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <HAL_Init+0x40>)
 8000d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d30:	2003      	movs	r0, #3
 8000d32:	f000 f8fc 	bl	8000f2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff ff04 	bl	8000b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d3c:	f7ff feda 	bl	8000af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023c00 	.word	0x40023c00

08000d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_IncTick+0x20>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_IncTick+0x24>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <HAL_IncTick+0x24>)
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000084 	.word	0x20000084

08000d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return uwTick;
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <HAL_GetTick+0x14>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000084 	.word	0x20000084

08000d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d94:	f7ff ffee 	bl	8000d74 <HAL_GetTick>
 8000d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da4:	d005      	beq.n	8000db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_Delay+0x44>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4413      	add	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000db2:	bf00      	nop
 8000db4:	f7ff ffde 	bl	8000d74 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d8f7      	bhi.n	8000db4 <HAL_Delay+0x28>
  {
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008

08000dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df0:	4013      	ands	r3, r2
 8000df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e06:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	60d3      	str	r3, [r2, #12]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <__NVIC_GetPriorityGrouping+0x18>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	f003 0307 	and.w	r3, r3, #7
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	db0b      	blt.n	8000e62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	f003 021f 	and.w	r2, r3, #31
 8000e50:	4907      	ldr	r1, [pc, #28]	; (8000e70 <__NVIC_EnableIRQ+0x38>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	095b      	lsrs	r3, r3, #5
 8000e58:	2001      	movs	r0, #1
 8000e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000e100 	.word	0xe000e100

08000e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	db0a      	blt.n	8000e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	490c      	ldr	r1, [pc, #48]	; (8000ec0 <__NVIC_SetPriority+0x4c>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	440b      	add	r3, r1
 8000e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e9c:	e00a      	b.n	8000eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4908      	ldr	r1, [pc, #32]	; (8000ec4 <__NVIC_SetPriority+0x50>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	761a      	strb	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f1c3 0307 	rsb	r3, r3, #7
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	bf28      	it	cs
 8000ee6:	2304      	movcs	r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3304      	adds	r3, #4
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d902      	bls.n	8000ef8 <NVIC_EncodePriority+0x30>
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	e000      	b.n	8000efa <NVIC_EncodePriority+0x32>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43d9      	mvns	r1, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	4313      	orrs	r3, r2
         );
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3724      	adds	r7, #36	; 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ff4c 	bl	8000dd4 <__NVIC_SetPriorityGrouping>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
 8000f50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f56:	f7ff ff61 	bl	8000e1c <__NVIC_GetPriorityGrouping>
 8000f5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	68b9      	ldr	r1, [r7, #8]
 8000f60:	6978      	ldr	r0, [r7, #20]
 8000f62:	f7ff ffb1 	bl	8000ec8 <NVIC_EncodePriority>
 8000f66:	4602      	mov	r2, r0
 8000f68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ff80 	bl	8000e74 <__NVIC_SetPriority>
}
 8000f74:	bf00      	nop
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ff54 	bl	8000e38 <__NVIC_EnableIRQ>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
 8000fb2:	e16b      	b.n	800128c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	f040 815a 	bne.w	8001286 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d005      	beq.n	8000fea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d130      	bne.n	800104c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	68da      	ldr	r2, [r3, #12]
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001020:	2201      	movs	r2, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	091b      	lsrs	r3, r3, #4
 8001036:	f003 0201 	and.w	r2, r3, #1
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b03      	cmp	r3, #3
 8001056:	d017      	beq.n	8001088 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d123      	bne.n	80010dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	08da      	lsrs	r2, r3, #3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3208      	adds	r2, #8
 800109c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	220f      	movs	r2, #15
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	691a      	ldr	r2, [r3, #16]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	08da      	lsrs	r2, r3, #3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3208      	adds	r2, #8
 80010d6:	69b9      	ldr	r1, [r7, #24]
 80010d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0203 	and.w	r2, r3, #3
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 80b4 	beq.w	8001286 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b60      	ldr	r3, [pc, #384]	; (80012a4 <HAL_GPIO_Init+0x30c>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	4a5f      	ldr	r2, [pc, #380]	; (80012a4 <HAL_GPIO_Init+0x30c>)
 8001128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112c:	6453      	str	r3, [r2, #68]	; 0x44
 800112e:	4b5d      	ldr	r3, [pc, #372]	; (80012a4 <HAL_GPIO_Init+0x30c>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800113a:	4a5b      	ldr	r2, [pc, #364]	; (80012a8 <HAL_GPIO_Init+0x310>)
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	089b      	lsrs	r3, r3, #2
 8001140:	3302      	adds	r3, #2
 8001142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	220f      	movs	r2, #15
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a52      	ldr	r2, [pc, #328]	; (80012ac <HAL_GPIO_Init+0x314>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d02b      	beq.n	80011be <HAL_GPIO_Init+0x226>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a51      	ldr	r2, [pc, #324]	; (80012b0 <HAL_GPIO_Init+0x318>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d025      	beq.n	80011ba <HAL_GPIO_Init+0x222>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a50      	ldr	r2, [pc, #320]	; (80012b4 <HAL_GPIO_Init+0x31c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d01f      	beq.n	80011b6 <HAL_GPIO_Init+0x21e>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4f      	ldr	r2, [pc, #316]	; (80012b8 <HAL_GPIO_Init+0x320>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d019      	beq.n	80011b2 <HAL_GPIO_Init+0x21a>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4e      	ldr	r2, [pc, #312]	; (80012bc <HAL_GPIO_Init+0x324>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d013      	beq.n	80011ae <HAL_GPIO_Init+0x216>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4d      	ldr	r2, [pc, #308]	; (80012c0 <HAL_GPIO_Init+0x328>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d00d      	beq.n	80011aa <HAL_GPIO_Init+0x212>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4c      	ldr	r2, [pc, #304]	; (80012c4 <HAL_GPIO_Init+0x32c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d007      	beq.n	80011a6 <HAL_GPIO_Init+0x20e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4b      	ldr	r2, [pc, #300]	; (80012c8 <HAL_GPIO_Init+0x330>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d101      	bne.n	80011a2 <HAL_GPIO_Init+0x20a>
 800119e:	2307      	movs	r3, #7
 80011a0:	e00e      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011a2:	2308      	movs	r3, #8
 80011a4:	e00c      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011a6:	2306      	movs	r3, #6
 80011a8:	e00a      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011aa:	2305      	movs	r3, #5
 80011ac:	e008      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011ae:	2304      	movs	r3, #4
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011b2:	2303      	movs	r3, #3
 80011b4:	e004      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e002      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011be:	2300      	movs	r3, #0
 80011c0:	69fa      	ldr	r2, [r7, #28]
 80011c2:	f002 0203 	and.w	r2, r2, #3
 80011c6:	0092      	lsls	r2, r2, #2
 80011c8:	4093      	lsls	r3, r2
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d0:	4935      	ldr	r1, [pc, #212]	; (80012a8 <HAL_GPIO_Init+0x310>)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	089b      	lsrs	r3, r3, #2
 80011d6:	3302      	adds	r3, #2
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011de:	4b3b      	ldr	r3, [pc, #236]	; (80012cc <HAL_GPIO_Init+0x334>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001202:	4a32      	ldr	r2, [pc, #200]	; (80012cc <HAL_GPIO_Init+0x334>)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001208:	4b30      	ldr	r3, [pc, #192]	; (80012cc <HAL_GPIO_Init+0x334>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800122c:	4a27      	ldr	r2, [pc, #156]	; (80012cc <HAL_GPIO_Init+0x334>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001232:	4b26      	ldr	r3, [pc, #152]	; (80012cc <HAL_GPIO_Init+0x334>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001256:	4a1d      	ldr	r2, [pc, #116]	; (80012cc <HAL_GPIO_Init+0x334>)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <HAL_GPIO_Init+0x334>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001280:	4a12      	ldr	r2, [pc, #72]	; (80012cc <HAL_GPIO_Init+0x334>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3301      	adds	r3, #1
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	2b0f      	cmp	r3, #15
 8001290:	f67f ae90 	bls.w	8000fb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3724      	adds	r7, #36	; 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40013800 	.word	0x40013800
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020400 	.word	0x40020400
 80012b4:	40020800 	.word	0x40020800
 80012b8:	40020c00 	.word	0x40020c00
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40021400 	.word	0x40021400
 80012c4:	40021800 	.word	0x40021800
 80012c8:	40021c00 	.word	0x40021c00
 80012cc:	40013c00 	.word	0x40013c00

080012d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	807b      	strh	r3, [r7, #2]
 80012dc:	4613      	mov	r3, r2
 80012de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e0:	787b      	ldrb	r3, [r7, #1]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012ec:	e003      	b.n	80012f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ee:	887b      	ldrh	r3, [r7, #2]
 80012f0:	041a      	lsls	r2, r3, #16
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	619a      	str	r2, [r3, #24]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001302:	b480      	push	{r7}
 8001304:	b085      	sub	sp, #20
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	460b      	mov	r3, r1
 800130c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001314:	887a      	ldrh	r2, [r7, #2]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4013      	ands	r3, r2
 800131a:	041a      	lsls	r2, r3, #16
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	43d9      	mvns	r1, r3
 8001320:	887b      	ldrh	r3, [r7, #2]
 8001322:	400b      	ands	r3, r1
 8001324:	431a      	orrs	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	619a      	str	r2, [r3, #24]
}
 800132a:	bf00      	nop
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001344:	695a      	ldr	r2, [r3, #20]
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	4013      	ands	r3, r2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d006      	beq.n	800135c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f806 	bl	8001368 <HAL_GPIO_EXTI_Callback>
  }
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40013c00 	.word	0x40013c00

08001368 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e267      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d075      	beq.n	800148a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800139e:	4b88      	ldr	r3, [pc, #544]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d00c      	beq.n	80013c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013aa:	4b85      	ldr	r3, [pc, #532]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d112      	bne.n	80013dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013b6:	4b82      	ldr	r3, [pc, #520]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013c2:	d10b      	bne.n	80013dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	4b7e      	ldr	r3, [pc, #504]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d05b      	beq.n	8001488 <HAL_RCC_OscConfig+0x108>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d157      	bne.n	8001488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e242      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e4:	d106      	bne.n	80013f4 <HAL_RCC_OscConfig+0x74>
 80013e6:	4b76      	ldr	r3, [pc, #472]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a75      	ldr	r2, [pc, #468]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80013ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e01d      	b.n	8001430 <HAL_RCC_OscConfig+0xb0>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013fc:	d10c      	bne.n	8001418 <HAL_RCC_OscConfig+0x98>
 80013fe:	4b70      	ldr	r3, [pc, #448]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a6f      	ldr	r2, [pc, #444]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	4b6d      	ldr	r3, [pc, #436]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a6c      	ldr	r2, [pc, #432]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e00b      	b.n	8001430 <HAL_RCC_OscConfig+0xb0>
 8001418:	4b69      	ldr	r3, [pc, #420]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a68      	ldr	r2, [pc, #416]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 800141e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b66      	ldr	r3, [pc, #408]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a65      	ldr	r2, [pc, #404]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 800142a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d013      	beq.n	8001460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fc9c 	bl	8000d74 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fc98 	bl	8000d74 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	; 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e207      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001452:	4b5b      	ldr	r3, [pc, #364]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0xc0>
 800145e:	e014      	b.n	800148a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fc88 	bl	8000d74 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fc84 	bl	8000d74 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	; 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e1f3      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147a:	4b51      	ldr	r3, [pc, #324]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0xe8>
 8001486:	e000      	b.n	800148a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d063      	beq.n	800155e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001496:	4b4a      	ldr	r3, [pc, #296]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00b      	beq.n	80014ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014a2:	4b47      	ldr	r3, [pc, #284]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d11c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ae:	4b44      	ldr	r3, [pc, #272]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d116      	bne.n	80014e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ba:	4b41      	ldr	r3, [pc, #260]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d005      	beq.n	80014d2 <HAL_RCC_OscConfig+0x152>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e1c7      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d2:	4b3b      	ldr	r3, [pc, #236]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4937      	ldr	r1, [pc, #220]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e6:	e03a      	b.n	800155e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d020      	beq.n	8001532 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f0:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <HAL_RCC_OscConfig+0x244>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f6:	f7ff fc3d 	bl	8000d74 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014fe:	f7ff fc39 	bl	8000d74 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e1a8      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001510:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151c:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	4925      	ldr	r1, [pc, #148]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 800152c:	4313      	orrs	r3, r2
 800152e:	600b      	str	r3, [r1, #0]
 8001530:	e015      	b.n	800155e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001532:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <HAL_RCC_OscConfig+0x244>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001538:	f7ff fc1c 	bl	8000d74 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001540:	f7ff fc18 	bl	8000d74 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e187      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001552:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d036      	beq.n	80015d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d016      	beq.n	80015a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <HAL_RCC_OscConfig+0x248>)
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001578:	f7ff fbfc 	bl	8000d74 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001580:	f7ff fbf8 	bl	8000d74 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e167      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x200>
 800159e:	e01b      	b.n	80015d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_RCC_OscConfig+0x248>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a6:	f7ff fbe5 	bl	8000d74 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ac:	e00e      	b.n	80015cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ae:	f7ff fbe1 	bl	8000d74 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d907      	bls.n	80015cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e150      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
 80015c0:	40023800 	.word	0x40023800
 80015c4:	42470000 	.word	0x42470000
 80015c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015cc:	4b88      	ldr	r3, [pc, #544]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 80015ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1ea      	bne.n	80015ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 8097 	beq.w	8001714 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ea:	4b81      	ldr	r3, [pc, #516]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10f      	bne.n	8001616 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	4b7d      	ldr	r3, [pc, #500]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a7c      	ldr	r2, [pc, #496]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
 8001606:	4b7a      	ldr	r3, [pc, #488]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001612:	2301      	movs	r3, #1
 8001614:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001616:	4b77      	ldr	r3, [pc, #476]	; (80017f4 <HAL_RCC_OscConfig+0x474>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161e:	2b00      	cmp	r3, #0
 8001620:	d118      	bne.n	8001654 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001622:	4b74      	ldr	r3, [pc, #464]	; (80017f4 <HAL_RCC_OscConfig+0x474>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a73      	ldr	r2, [pc, #460]	; (80017f4 <HAL_RCC_OscConfig+0x474>)
 8001628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162e:	f7ff fba1 	bl	8000d74 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001636:	f7ff fb9d 	bl	8000d74 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e10c      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001648:	4b6a      	ldr	r3, [pc, #424]	; (80017f4 <HAL_RCC_OscConfig+0x474>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d106      	bne.n	800166a <HAL_RCC_OscConfig+0x2ea>
 800165c:	4b64      	ldr	r3, [pc, #400]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 800165e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001660:	4a63      	ldr	r2, [pc, #396]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6713      	str	r3, [r2, #112]	; 0x70
 8001668:	e01c      	b.n	80016a4 <HAL_RCC_OscConfig+0x324>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	2b05      	cmp	r3, #5
 8001670:	d10c      	bne.n	800168c <HAL_RCC_OscConfig+0x30c>
 8001672:	4b5f      	ldr	r3, [pc, #380]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001676:	4a5e      	ldr	r2, [pc, #376]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001678:	f043 0304 	orr.w	r3, r3, #4
 800167c:	6713      	str	r3, [r2, #112]	; 0x70
 800167e:	4b5c      	ldr	r3, [pc, #368]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001682:	4a5b      	ldr	r2, [pc, #364]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6713      	str	r3, [r2, #112]	; 0x70
 800168a:	e00b      	b.n	80016a4 <HAL_RCC_OscConfig+0x324>
 800168c:	4b58      	ldr	r3, [pc, #352]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001690:	4a57      	ldr	r2, [pc, #348]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001692:	f023 0301 	bic.w	r3, r3, #1
 8001696:	6713      	str	r3, [r2, #112]	; 0x70
 8001698:	4b55      	ldr	r3, [pc, #340]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 800169a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169c:	4a54      	ldr	r2, [pc, #336]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 800169e:	f023 0304 	bic.w	r3, r3, #4
 80016a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d015      	beq.n	80016d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ac:	f7ff fb62 	bl	8000d74 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b2:	e00a      	b.n	80016ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b4:	f7ff fb5e 	bl	8000d74 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e0cb      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ca:	4b49      	ldr	r3, [pc, #292]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 80016cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0ee      	beq.n	80016b4 <HAL_RCC_OscConfig+0x334>
 80016d6:	e014      	b.n	8001702 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d8:	f7ff fb4c 	bl	8000d74 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016de:	e00a      	b.n	80016f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e0:	f7ff fb48 	bl	8000d74 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e0b5      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f6:	4b3e      	ldr	r3, [pc, #248]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 80016f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1ee      	bne.n	80016e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001702:	7dfb      	ldrb	r3, [r7, #23]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d105      	bne.n	8001714 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001708:	4b39      	ldr	r3, [pc, #228]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	4a38      	ldr	r2, [pc, #224]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 800170e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001712:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 80a1 	beq.w	8001860 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800171e:	4b34      	ldr	r3, [pc, #208]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b08      	cmp	r3, #8
 8001728:	d05c      	beq.n	80017e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d141      	bne.n	80017b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001732:	4b31      	ldr	r3, [pc, #196]	; (80017f8 <HAL_RCC_OscConfig+0x478>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff fb1c 	bl	8000d74 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001740:	f7ff fb18 	bl	8000d74 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e087      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001752:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69da      	ldr	r2, [r3, #28]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	019b      	lsls	r3, r3, #6
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001774:	085b      	lsrs	r3, r3, #1
 8001776:	3b01      	subs	r3, #1
 8001778:	041b      	lsls	r3, r3, #16
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	061b      	lsls	r3, r3, #24
 8001782:	491b      	ldr	r1, [pc, #108]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001784:	4313      	orrs	r3, r2
 8001786:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_RCC_OscConfig+0x478>)
 800178a:	2201      	movs	r2, #1
 800178c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178e:	f7ff faf1 	bl	8000d74 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001796:	f7ff faed 	bl	8000d74 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e05c      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0f0      	beq.n	8001796 <HAL_RCC_OscConfig+0x416>
 80017b4:	e054      	b.n	8001860 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <HAL_RCC_OscConfig+0x478>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fada 	bl	8000d74 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c4:	f7ff fad6 	bl	8000d74 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e045      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x444>
 80017e2:	e03d      	b.n	8001860 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d107      	bne.n	80017fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e038      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40007000 	.word	0x40007000
 80017f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_RCC_OscConfig+0x4ec>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d028      	beq.n	800185c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001814:	429a      	cmp	r2, r3
 8001816:	d121      	bne.n	800185c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001822:	429a      	cmp	r2, r3
 8001824:	d11a      	bne.n	800185c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800182c:	4013      	ands	r3, r2
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001832:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001834:	4293      	cmp	r3, r2
 8001836:	d111      	bne.n	800185c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001842:	085b      	lsrs	r3, r3, #1
 8001844:	3b01      	subs	r3, #1
 8001846:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001848:	429a      	cmp	r2, r3
 800184a:	d107      	bne.n	800185c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001856:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800

08001870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0cc      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001884:	4b68      	ldr	r3, [pc, #416]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d90c      	bls.n	80018ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b65      	ldr	r3, [pc, #404]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189a:	4b63      	ldr	r3, [pc, #396]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0b8      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d020      	beq.n	80018fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c4:	4b59      	ldr	r3, [pc, #356]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	4a58      	ldr	r2, [pc, #352]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018dc:	4b53      	ldr	r3, [pc, #332]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4a52      	ldr	r2, [pc, #328]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e8:	4b50      	ldr	r3, [pc, #320]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	494d      	ldr	r1, [pc, #308]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d044      	beq.n	8001990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d107      	bne.n	800191e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	4b47      	ldr	r3, [pc, #284]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d119      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e07f      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d003      	beq.n	800192e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800192a:	2b03      	cmp	r3, #3
 800192c:	d107      	bne.n	800193e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192e:	4b3f      	ldr	r3, [pc, #252]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e06f      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193e:	4b3b      	ldr	r3, [pc, #236]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e067      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800194e:	4b37      	ldr	r3, [pc, #220]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f023 0203 	bic.w	r2, r3, #3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4934      	ldr	r1, [pc, #208]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	4313      	orrs	r3, r2
 800195e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001960:	f7ff fa08 	bl	8000d74 <HAL_GetTick>
 8001964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001966:	e00a      	b.n	800197e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001968:	f7ff fa04 	bl	8000d74 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f241 3288 	movw	r2, #5000	; 0x1388
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e04f      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197e:	4b2b      	ldr	r3, [pc, #172]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 020c 	and.w	r2, r3, #12
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	429a      	cmp	r2, r3
 800198e:	d1eb      	bne.n	8001968 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001990:	4b25      	ldr	r3, [pc, #148]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d20c      	bcs.n	80019b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199e:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e032      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d008      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c4:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4916      	ldr	r1, [pc, #88]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d009      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	490e      	ldr	r1, [pc, #56]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019f6:	f000 f821 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80019fa:	4602      	mov	r2, r0
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	490a      	ldr	r1, [pc, #40]	; (8001a30 <HAL_RCC_ClockConfig+0x1c0>)
 8001a08:	5ccb      	ldrb	r3, [r1, r3]
 8001a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0e:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_RCC_ClockConfig+0x1c8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff f894 	bl	8000b44 <HAL_InitTick>

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023c00 	.word	0x40023c00
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	08007950 	.word	0x08007950
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000004 	.word	0x20000004

08001a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a40:	b094      	sub	sp, #80	; 0x50
 8001a42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	647b      	str	r3, [r7, #68]	; 0x44
 8001a48:	2300      	movs	r3, #0
 8001a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a54:	4b79      	ldr	r3, [pc, #484]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 030c 	and.w	r3, r3, #12
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d00d      	beq.n	8001a7c <HAL_RCC_GetSysClockFreq+0x40>
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	f200 80e1 	bhi.w	8001c28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d002      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0x34>
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d003      	beq.n	8001a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a6e:	e0db      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a70:	4b73      	ldr	r3, [pc, #460]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a74:	e0db      	b.n	8001c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a76:	4b73      	ldr	r3, [pc, #460]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a7a:	e0d8      	b.n	8001c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a7c:	4b6f      	ldr	r3, [pc, #444]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a86:	4b6d      	ldr	r3, [pc, #436]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d063      	beq.n	8001b5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a92:	4b6a      	ldr	r3, [pc, #424]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	099b      	lsrs	r3, r3, #6
 8001a98:	2200      	movs	r2, #0
 8001a9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aa4:	633b      	str	r3, [r7, #48]	; 0x30
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8001aaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001aae:	4622      	mov	r2, r4
 8001ab0:	462b      	mov	r3, r5
 8001ab2:	f04f 0000 	mov.w	r0, #0
 8001ab6:	f04f 0100 	mov.w	r1, #0
 8001aba:	0159      	lsls	r1, r3, #5
 8001abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac0:	0150      	lsls	r0, r2, #5
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4621      	mov	r1, r4
 8001ac8:	1a51      	subs	r1, r2, r1
 8001aca:	6139      	str	r1, [r7, #16]
 8001acc:	4629      	mov	r1, r5
 8001ace:	eb63 0301 	sbc.w	r3, r3, r1
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ae0:	4659      	mov	r1, fp
 8001ae2:	018b      	lsls	r3, r1, #6
 8001ae4:	4651      	mov	r1, sl
 8001ae6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aea:	4651      	mov	r1, sl
 8001aec:	018a      	lsls	r2, r1, #6
 8001aee:	4651      	mov	r1, sl
 8001af0:	ebb2 0801 	subs.w	r8, r2, r1
 8001af4:	4659      	mov	r1, fp
 8001af6:	eb63 0901 	sbc.w	r9, r3, r1
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b0e:	4690      	mov	r8, r2
 8001b10:	4699      	mov	r9, r3
 8001b12:	4623      	mov	r3, r4
 8001b14:	eb18 0303 	adds.w	r3, r8, r3
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	462b      	mov	r3, r5
 8001b1c:	eb49 0303 	adc.w	r3, r9, r3
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b2e:	4629      	mov	r1, r5
 8001b30:	024b      	lsls	r3, r1, #9
 8001b32:	4621      	mov	r1, r4
 8001b34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b38:	4621      	mov	r1, r4
 8001b3a:	024a      	lsls	r2, r1, #9
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b42:	2200      	movs	r2, #0
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b4c:	f7fe fb92 	bl	8000274 <__aeabi_uldivmod>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4613      	mov	r3, r2
 8001b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b58:	e058      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b5a:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	099b      	lsrs	r3, r3, #6
 8001b60:	2200      	movs	r2, #0
 8001b62:	4618      	mov	r0, r3
 8001b64:	4611      	mov	r1, r2
 8001b66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b6a:	623b      	str	r3, [r7, #32]
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b74:	4642      	mov	r2, r8
 8001b76:	464b      	mov	r3, r9
 8001b78:	f04f 0000 	mov.w	r0, #0
 8001b7c:	f04f 0100 	mov.w	r1, #0
 8001b80:	0159      	lsls	r1, r3, #5
 8001b82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b86:	0150      	lsls	r0, r2, #5
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4641      	mov	r1, r8
 8001b8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b92:	4649      	mov	r1, r9
 8001b94:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ba4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ba8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bac:	ebb2 040a 	subs.w	r4, r2, sl
 8001bb0:	eb63 050b 	sbc.w	r5, r3, fp
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	00eb      	lsls	r3, r5, #3
 8001bbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bc2:	00e2      	lsls	r2, r4, #3
 8001bc4:	4614      	mov	r4, r2
 8001bc6:	461d      	mov	r5, r3
 8001bc8:	4643      	mov	r3, r8
 8001bca:	18e3      	adds	r3, r4, r3
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	464b      	mov	r3, r9
 8001bd0:	eb45 0303 	adc.w	r3, r5, r3
 8001bd4:	607b      	str	r3, [r7, #4]
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001be2:	4629      	mov	r1, r5
 8001be4:	028b      	lsls	r3, r1, #10
 8001be6:	4621      	mov	r1, r4
 8001be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bec:	4621      	mov	r1, r4
 8001bee:	028a      	lsls	r2, r1, #10
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	61fa      	str	r2, [r7, #28]
 8001bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c00:	f7fe fb38 	bl	8000274 <__aeabi_uldivmod>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4613      	mov	r3, r2
 8001c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	0c1b      	lsrs	r3, r3, #16
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	3301      	adds	r3, #1
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c26:	e002      	b.n	8001c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3750      	adds	r7, #80	; 0x50
 8001c34:	46bd      	mov	sp, r7
 8001c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	00f42400 	.word	0x00f42400
 8001c44:	007a1200 	.word	0x007a1200

08001c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000000 	.word	0x20000000

08001c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c64:	f7ff fff0 	bl	8001c48 <HAL_RCC_GetHCLKFreq>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	0a9b      	lsrs	r3, r3, #10
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	4903      	ldr	r1, [pc, #12]	; (8001c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c76:	5ccb      	ldrb	r3, [r1, r3]
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40023800 	.word	0x40023800
 8001c84:	08007960 	.word	0x08007960

08001c88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	220f      	movs	r2, #15
 8001c96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0203 	and.w	r2, r3, #3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	08db      	lsrs	r3, r3, #3
 8001cc2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <HAL_RCC_GetClockConfig+0x60>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0207 	and.w	r2, r3, #7
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	601a      	str	r2, [r3, #0]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40023c00 	.word	0x40023c00

08001cec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e041      	b.n	8001d82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f839 	bl	8001d8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3304      	adds	r3, #4
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	f000 f9c0 	bl	80020b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d001      	beq.n	8001db8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e04e      	b.n	8001e56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a23      	ldr	r2, [pc, #140]	; (8001e64 <HAL_TIM_Base_Start_IT+0xc4>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d022      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x80>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de2:	d01d      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x80>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a1f      	ldr	r2, [pc, #124]	; (8001e68 <HAL_TIM_Base_Start_IT+0xc8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d018      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x80>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a1e      	ldr	r2, [pc, #120]	; (8001e6c <HAL_TIM_Base_Start_IT+0xcc>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d013      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x80>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a1c      	ldr	r2, [pc, #112]	; (8001e70 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00e      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x80>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a1b      	ldr	r2, [pc, #108]	; (8001e74 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d009      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x80>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a19      	ldr	r2, [pc, #100]	; (8001e78 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d004      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x80>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a18      	ldr	r2, [pc, #96]	; (8001e7c <HAL_TIM_Base_Start_IT+0xdc>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d111      	bne.n	8001e44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b06      	cmp	r3, #6
 8001e30:	d010      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 0201 	orr.w	r2, r2, #1
 8001e40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e42:	e007      	b.n	8001e54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0201 	orr.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40010000 	.word	0x40010000
 8001e68:	40000400 	.word	0x40000400
 8001e6c:	40000800 	.word	0x40000800
 8001e70:	40000c00 	.word	0x40000c00
 8001e74:	40010400 	.word	0x40010400
 8001e78:	40014000 	.word	0x40014000
 8001e7c:	40001800 	.word	0x40001800

08001e80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d020      	beq.n	8001ee4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d01b      	beq.n	8001ee4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0202 	mvn.w	r2, #2
 8001eb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f8d2 	bl	8002074 <HAL_TIM_IC_CaptureCallback>
 8001ed0:	e005      	b.n	8001ede <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f8c4 	bl	8002060 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f8d5 	bl	8002088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d020      	beq.n	8001f30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d01b      	beq.n	8001f30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0204 	mvn.w	r2, #4
 8001f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2202      	movs	r2, #2
 8001f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f8ac 	bl	8002074 <HAL_TIM_IC_CaptureCallback>
 8001f1c:	e005      	b.n	8001f2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f89e 	bl	8002060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f8af 	bl	8002088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d020      	beq.n	8001f7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01b      	beq.n	8001f7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0208 	mvn.w	r2, #8
 8001f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2204      	movs	r2, #4
 8001f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f886 	bl	8002074 <HAL_TIM_IC_CaptureCallback>
 8001f68:	e005      	b.n	8001f76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f878 	bl	8002060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f889 	bl	8002088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d020      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01b      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0210 	mvn.w	r2, #16
 8001f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f860 	bl	8002074 <HAL_TIM_IC_CaptureCallback>
 8001fb4:	e005      	b.n	8001fc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f852 	bl	8002060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f863 	bl	8002088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00c      	beq.n	8001fec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d007      	beq.n	8001fec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0201 	mvn.w	r2, #1
 8001fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7fe fd6c 	bl	8000ac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00c      	beq.n	8002010 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d007      	beq.n	8002010 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f906 	bl	800221c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00c      	beq.n	8002034 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002020:	2b00      	cmp	r3, #0
 8002022:	d007      	beq.n	8002034 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800202c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f834 	bl	800209c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f003 0320 	and.w	r3, r3, #32
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00c      	beq.n	8002058 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f003 0320 	and.w	r3, r3, #32
 8002044:	2b00      	cmp	r3, #0
 8002046:	d007      	beq.n	8002058 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0220 	mvn.w	r2, #32
 8002050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f8d8 	bl	8002208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002058:	bf00      	nop
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a46      	ldr	r2, [pc, #280]	; (80021dc <TIM_Base_SetConfig+0x12c>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d013      	beq.n	80020f0 <TIM_Base_SetConfig+0x40>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ce:	d00f      	beq.n	80020f0 <TIM_Base_SetConfig+0x40>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a43      	ldr	r2, [pc, #268]	; (80021e0 <TIM_Base_SetConfig+0x130>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d00b      	beq.n	80020f0 <TIM_Base_SetConfig+0x40>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a42      	ldr	r2, [pc, #264]	; (80021e4 <TIM_Base_SetConfig+0x134>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d007      	beq.n	80020f0 <TIM_Base_SetConfig+0x40>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a41      	ldr	r2, [pc, #260]	; (80021e8 <TIM_Base_SetConfig+0x138>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d003      	beq.n	80020f0 <TIM_Base_SetConfig+0x40>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a40      	ldr	r2, [pc, #256]	; (80021ec <TIM_Base_SetConfig+0x13c>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d108      	bne.n	8002102 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a35      	ldr	r2, [pc, #212]	; (80021dc <TIM_Base_SetConfig+0x12c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d02b      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002110:	d027      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <TIM_Base_SetConfig+0x130>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d023      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a31      	ldr	r2, [pc, #196]	; (80021e4 <TIM_Base_SetConfig+0x134>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d01f      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a30      	ldr	r2, [pc, #192]	; (80021e8 <TIM_Base_SetConfig+0x138>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d01b      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a2f      	ldr	r2, [pc, #188]	; (80021ec <TIM_Base_SetConfig+0x13c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d017      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a2e      	ldr	r2, [pc, #184]	; (80021f0 <TIM_Base_SetConfig+0x140>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d013      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a2d      	ldr	r2, [pc, #180]	; (80021f4 <TIM_Base_SetConfig+0x144>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d00f      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a2c      	ldr	r2, [pc, #176]	; (80021f8 <TIM_Base_SetConfig+0x148>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00b      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a2b      	ldr	r2, [pc, #172]	; (80021fc <TIM_Base_SetConfig+0x14c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d007      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a2a      	ldr	r2, [pc, #168]	; (8002200 <TIM_Base_SetConfig+0x150>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d003      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a29      	ldr	r2, [pc, #164]	; (8002204 <TIM_Base_SetConfig+0x154>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d108      	bne.n	8002174 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4313      	orrs	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	4313      	orrs	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a10      	ldr	r2, [pc, #64]	; (80021dc <TIM_Base_SetConfig+0x12c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d003      	beq.n	80021a8 <TIM_Base_SetConfig+0xf8>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a12      	ldr	r2, [pc, #72]	; (80021ec <TIM_Base_SetConfig+0x13c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d103      	bne.n	80021b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d105      	bne.n	80021ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f023 0201 	bic.w	r2, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	611a      	str	r2, [r3, #16]
  }
}
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40010000 	.word	0x40010000
 80021e0:	40000400 	.word	0x40000400
 80021e4:	40000800 	.word	0x40000800
 80021e8:	40000c00 	.word	0x40000c00
 80021ec:	40010400 	.word	0x40010400
 80021f0:	40014000 	.word	0x40014000
 80021f4:	40014400 	.word	0x40014400
 80021f8:	40014800 	.word	0x40014800
 80021fc:	40001800 	.word	0x40001800
 8002200:	40001c00 	.word	0x40001c00
 8002204:	40002000 	.word	0x40002000

08002208 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f103 0208 	add.w	r2, r3, #8
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f04f 32ff 	mov.w	r2, #4294967295
 8002248:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f103 0208 	add.w	r2, r3, #8
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f103 0208 	add.w	r2, r3, #8
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800228a:	b480      	push	{r7}
 800228c:	b085      	sub	sp, #20
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	601a      	str	r2, [r3, #0]
}
 80022c6:	bf00      	nop
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80022d2:	b480      	push	{r7}
 80022d4:	b085      	sub	sp, #20
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e8:	d103      	bne.n	80022f2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	e00c      	b.n	800230c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3308      	adds	r3, #8
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	e002      	b.n	8002300 <vListInsert+0x2e>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	429a      	cmp	r2, r3
 800230a:	d2f6      	bcs.n	80022fa <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	601a      	str	r2, [r3, #0]
}
 8002338:	bf00      	nop
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6892      	ldr	r2, [r2, #8]
 800235a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6852      	ldr	r2, [r2, #4]
 8002364:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	429a      	cmp	r2, r3
 800236e:	d103      	bne.n	8002378 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	1e5a      	subs	r2, r3, #1
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10a      	bne.n	80023c2 <xQueueGenericReset+0x2a>
        __asm volatile
 80023ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b0:	f383 8811 	msr	BASEPRI, r3
 80023b4:	f3bf 8f6f 	isb	sy
 80023b8:	f3bf 8f4f 	dsb	sy
 80023bc:	60bb      	str	r3, [r7, #8]
    }
 80023be:	bf00      	nop
 80023c0:	e7fe      	b.n	80023c0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80023c2:	f002 fa09 	bl	80047d8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ce:	68f9      	ldr	r1, [r7, #12]
 80023d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023d2:	fb01 f303 	mul.w	r3, r1, r3
 80023d6:	441a      	add	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f2:	3b01      	subs	r3, #1
 80023f4:	68f9      	ldr	r1, [r7, #12]
 80023f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	441a      	add	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	22ff      	movs	r2, #255	; 0xff
 8002406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	22ff      	movs	r2, #255	; 0xff
 800240e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d114      	bne.n	8002442 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d01a      	beq.n	8002456 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	3310      	adds	r3, #16
 8002424:	4618      	mov	r0, r3
 8002426:	f001 facd 	bl	80039c4 <xTaskRemoveFromEventList>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d012      	beq.n	8002456 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002430:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <xQueueGenericReset+0xcc>)
 8002432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	f3bf 8f4f 	dsb	sy
 800243c:	f3bf 8f6f 	isb	sy
 8002440:	e009      	b.n	8002456 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	3310      	adds	r3, #16
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fef2 	bl	8002230 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	3324      	adds	r3, #36	; 0x24
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff feed 	bl	8002230 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002456:	f002 f9ef 	bl	8004838 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800245a:	2301      	movs	r3, #1
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	e000ed04 	.word	0xe000ed04

08002468 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002468:	b580      	push	{r7, lr}
 800246a:	b08c      	sub	sp, #48	; 0x30
 800246c:	af02      	add	r7, sp, #8
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	4613      	mov	r3, r2
 8002474:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10a      	bne.n	8002492 <xQueueGenericCreate+0x2a>
        __asm volatile
 800247c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002480:	f383 8811 	msr	BASEPRI, r3
 8002484:	f3bf 8f6f 	isb	sy
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	61bb      	str	r3, [r7, #24]
    }
 800248e:	bf00      	nop
 8002490:	e7fe      	b.n	8002490 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d006      	beq.n	80024b0 <xQueueGenericCreate+0x48>
 80024a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d101      	bne.n	80024b4 <xQueueGenericCreate+0x4c>
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <xQueueGenericCreate+0x4e>
 80024b4:	2300      	movs	r3, #0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10a      	bne.n	80024d0 <xQueueGenericCreate+0x68>
        __asm volatile
 80024ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024be:	f383 8811 	msr	BASEPRI, r3
 80024c2:	f3bf 8f6f 	isb	sy
 80024c6:	f3bf 8f4f 	dsb	sy
 80024ca:	617b      	str	r3, [r7, #20]
    }
 80024cc:	bf00      	nop
 80024ce:	e7fe      	b.n	80024ce <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80024d6:	d90a      	bls.n	80024ee <xQueueGenericCreate+0x86>
        __asm volatile
 80024d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024dc:	f383 8811 	msr	BASEPRI, r3
 80024e0:	f3bf 8f6f 	isb	sy
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	613b      	str	r3, [r7, #16]
    }
 80024ea:	bf00      	nop
 80024ec:	e7fe      	b.n	80024ec <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	3350      	adds	r3, #80	; 0x50
 80024f2:	4618      	mov	r0, r3
 80024f4:	f002 fa9a 	bl	8004a2c <pvPortMalloc>
 80024f8:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00d      	beq.n	800251c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	3350      	adds	r3, #80	; 0x50
 8002508:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800250a:	79fa      	ldrb	r2, [r7, #7]
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	4613      	mov	r3, r2
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 f805 	bl	8002526 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800251c:	6a3b      	ldr	r3, [r7, #32]
    }
 800251e:	4618      	mov	r0, r3
 8002520:	3728      	adds	r7, #40	; 0x28
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d103      	bne.n	8002542 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e002      	b.n	8002548 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002554:	2101      	movs	r1, #1
 8002556:	69b8      	ldr	r0, [r7, #24]
 8002558:	f7ff ff1e 	bl	8002398 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	78fa      	ldrb	r2, [r7, #3]
 8002560:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002564:	78fb      	ldrb	r3, [r7, #3]
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	68f9      	ldr	r1, [r7, #12]
 800256a:	2073      	movs	r0, #115	; 0x73
 800256c:	f004 f9f4 	bl	8006958 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002570:	bf00      	nop
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b090      	sub	sp, #64	; 0x40
 800257c:	af02      	add	r7, sp, #8
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002586:	2300      	movs	r3, #0
 8002588:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800258e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10a      	bne.n	80025aa <xQueueGenericSend+0x32>
        __asm volatile
 8002594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002598:	f383 8811 	msr	BASEPRI, r3
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80025a6:	bf00      	nop
 80025a8:	e7fe      	b.n	80025a8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d103      	bne.n	80025b8 <xQueueGenericSend+0x40>
 80025b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <xQueueGenericSend+0x44>
 80025b8:	2301      	movs	r3, #1
 80025ba:	e000      	b.n	80025be <xQueueGenericSend+0x46>
 80025bc:	2300      	movs	r3, #0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10a      	bne.n	80025d8 <xQueueGenericSend+0x60>
        __asm volatile
 80025c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c6:	f383 8811 	msr	BASEPRI, r3
 80025ca:	f3bf 8f6f 	isb	sy
 80025ce:	f3bf 8f4f 	dsb	sy
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80025d4:	bf00      	nop
 80025d6:	e7fe      	b.n	80025d6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d103      	bne.n	80025e6 <xQueueGenericSend+0x6e>
 80025de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <xQueueGenericSend+0x72>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <xQueueGenericSend+0x74>
 80025ea:	2300      	movs	r3, #0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10a      	bne.n	8002606 <xQueueGenericSend+0x8e>
        __asm volatile
 80025f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f4:	f383 8811 	msr	BASEPRI, r3
 80025f8:	f3bf 8f6f 	isb	sy
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	623b      	str	r3, [r7, #32]
    }
 8002602:	bf00      	nop
 8002604:	e7fe      	b.n	8002604 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002606:	f001 fb8d 	bl	8003d24 <xTaskGetSchedulerState>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d102      	bne.n	8002616 <xQueueGenericSend+0x9e>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <xQueueGenericSend+0xa2>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <xQueueGenericSend+0xa4>
 800261a:	2300      	movs	r3, #0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10a      	bne.n	8002636 <xQueueGenericSend+0xbe>
        __asm volatile
 8002620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002624:	f383 8811 	msr	BASEPRI, r3
 8002628:	f3bf 8f6f 	isb	sy
 800262c:	f3bf 8f4f 	dsb	sy
 8002630:	61fb      	str	r3, [r7, #28]
    }
 8002632:	bf00      	nop
 8002634:	e7fe      	b.n	8002634 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002636:	f002 f8cf 	bl	80047d8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800263a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002642:	429a      	cmp	r2, r3
 8002644:	d302      	bcc.n	800264c <xQueueGenericSend+0xd4>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b02      	cmp	r3, #2
 800264a:	d136      	bne.n	80026ba <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 800264c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264e:	4618      	mov	r0, r3
 8002650:	f004 ff10 	bl	8007474 <SEGGER_SYSVIEW_ShrinkId>
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	460b      	mov	r3, r1
 800265e:	4601      	mov	r1, r0
 8002660:	205a      	movs	r0, #90	; 0x5a
 8002662:	f004 f9ef 	bl	8006a44 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	68b9      	ldr	r1, [r7, #8]
 800266a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800266c:	f000 fa78 	bl	8002b60 <prvCopyDataToQueue>
 8002670:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	2b00      	cmp	r3, #0
 8002678:	d010      	beq.n	800269c <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800267a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267c:	3324      	adds	r3, #36	; 0x24
 800267e:	4618      	mov	r0, r3
 8002680:	f001 f9a0 	bl	80039c4 <xTaskRemoveFromEventList>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d013      	beq.n	80026b2 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800268a:	4b4d      	ldr	r3, [pc, #308]	; (80027c0 <xQueueGenericSend+0x248>)
 800268c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	f3bf 8f4f 	dsb	sy
 8002696:	f3bf 8f6f 	isb	sy
 800269a:	e00a      	b.n	80026b2 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800269c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d007      	beq.n	80026b2 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80026a2:	4b47      	ldr	r3, [pc, #284]	; (80027c0 <xQueueGenericSend+0x248>)
 80026a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	f3bf 8f4f 	dsb	sy
 80026ae:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80026b2:	f002 f8c1 	bl	8004838 <vPortExitCritical>
                return pdPASS;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e07d      	b.n	80027b6 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d110      	bne.n	80026e2 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80026c0:	f002 f8ba 	bl	8004838 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80026c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c6:	4618      	mov	r0, r3
 80026c8:	f004 fed4 	bl	8007474 <SEGGER_SYSVIEW_ShrinkId>
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	460b      	mov	r3, r1
 80026d6:	4601      	mov	r1, r0
 80026d8:	205a      	movs	r0, #90	; 0x5a
 80026da:	f004 f9b3 	bl	8006a44 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	e069      	b.n	80027b6 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80026e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d106      	bne.n	80026f6 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80026e8:	f107 0314 	add.w	r3, r7, #20
 80026ec:	4618      	mov	r0, r3
 80026ee:	f001 f9cf 	bl	8003a90 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80026f2:	2301      	movs	r3, #1
 80026f4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80026f6:	f002 f89f 	bl	8004838 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80026fa:	f000 fe47 	bl	800338c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80026fe:	f002 f86b 	bl	80047d8 <vPortEnterCritical>
 8002702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002704:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002708:	b25b      	sxtb	r3, r3
 800270a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270e:	d103      	bne.n	8002718 <xQueueGenericSend+0x1a0>
 8002710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800271e:	b25b      	sxtb	r3, r3
 8002720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002724:	d103      	bne.n	800272e <xQueueGenericSend+0x1b6>
 8002726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800272e:	f002 f883 	bl	8004838 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002732:	1d3a      	adds	r2, r7, #4
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	4611      	mov	r1, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f001 f9be 	bl	8003abc <xTaskCheckForTimeOut>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d124      	bne.n	8002790 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002746:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002748:	f000 fb02 	bl	8002d50 <prvIsQueueFull>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d018      	beq.n	8002784 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002754:	3310      	adds	r3, #16
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	4611      	mov	r1, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f001 f8e0 	bl	8003920 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002762:	f000 fa8d 	bl	8002c80 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002766:	f000 fe1f 	bl	80033a8 <xTaskResumeAll>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	f47f af62 	bne.w	8002636 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002772:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <xQueueGenericSend+0x248>)
 8002774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	f3bf 8f4f 	dsb	sy
 800277e:	f3bf 8f6f 	isb	sy
 8002782:	e758      	b.n	8002636 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002786:	f000 fa7b 	bl	8002c80 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800278a:	f000 fe0d 	bl	80033a8 <xTaskResumeAll>
 800278e:	e752      	b.n	8002636 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002792:	f000 fa75 	bl	8002c80 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002796:	f000 fe07 	bl	80033a8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800279a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279c:	4618      	mov	r0, r3
 800279e:	f004 fe69 	bl	8007474 <SEGGER_SYSVIEW_ShrinkId>
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	460b      	mov	r3, r1
 80027ac:	4601      	mov	r1, r0
 80027ae:	205a      	movs	r0, #90	; 0x5a
 80027b0:	f004 f948 	bl	8006a44 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80027b4:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3738      	adds	r7, #56	; 0x38
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	e000ed04 	.word	0xe000ed04

080027c4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b090      	sub	sp, #64	; 0x40
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80027d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10a      	bne.n	80027f2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80027dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e0:	f383 8811 	msr	BASEPRI, r3
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80027ee:	bf00      	nop
 80027f0:	e7fe      	b.n	80027f0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d103      	bne.n	8002800 <xQueueGenericSendFromISR+0x3c>
 80027f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <xQueueGenericSendFromISR+0x40>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <xQueueGenericSendFromISR+0x42>
 8002804:	2300      	movs	r3, #0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10a      	bne.n	8002820 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800280a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280e:	f383 8811 	msr	BASEPRI, r3
 8002812:	f3bf 8f6f 	isb	sy
 8002816:	f3bf 8f4f 	dsb	sy
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800281c:	bf00      	nop
 800281e:	e7fe      	b.n	800281e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d103      	bne.n	800282e <xQueueGenericSendFromISR+0x6a>
 8002826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <xQueueGenericSendFromISR+0x6e>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <xQueueGenericSendFromISR+0x70>
 8002832:	2300      	movs	r3, #0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10a      	bne.n	800284e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283c:	f383 8811 	msr	BASEPRI, r3
 8002840:	f3bf 8f6f 	isb	sy
 8002844:	f3bf 8f4f 	dsb	sy
 8002848:	623b      	str	r3, [r7, #32]
    }
 800284a:	bf00      	nop
 800284c:	e7fe      	b.n	800284c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800284e:	f002 f8ad 	bl	80049ac <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002852:	f3ef 8211 	mrs	r2, BASEPRI
 8002856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285a:	f383 8811 	msr	BASEPRI, r3
 800285e:	f3bf 8f6f 	isb	sy
 8002862:	f3bf 8f4f 	dsb	sy
 8002866:	61fa      	str	r2, [r7, #28]
 8002868:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800286a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800286c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800286e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002876:	429a      	cmp	r2, r3
 8002878:	d302      	bcc.n	8002880 <xQueueGenericSendFromISR+0xbc>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d148      	bne.n	8002912 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002882:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800288a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288e:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002892:	4618      	mov	r0, r3
 8002894:	f004 fdee 	bl	8007474 <SEGGER_SYSVIEW_ShrinkId>
 8002898:	4601      	mov	r1, r0
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	461a      	mov	r2, r3
 800289e:	2060      	movs	r0, #96	; 0x60
 80028a0:	f004 f800 	bl	80068a4 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80028aa:	f000 f959 	bl	8002b60 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80028ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80028b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b6:	d112      	bne.n	80028de <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d025      	beq.n	800290c <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c2:	3324      	adds	r3, #36	; 0x24
 80028c4:	4618      	mov	r0, r3
 80028c6:	f001 f87d 	bl	80039c4 <xTaskRemoveFromEventList>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d01d      	beq.n	800290c <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d01a      	beq.n	800290c <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	e016      	b.n	800290c <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80028de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80028e2:	2b7f      	cmp	r3, #127	; 0x7f
 80028e4:	d10a      	bne.n	80028fc <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80028e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ea:	f383 8811 	msr	BASEPRI, r3
 80028ee:	f3bf 8f6f 	isb	sy
 80028f2:	f3bf 8f4f 	dsb	sy
 80028f6:	617b      	str	r3, [r7, #20]
    }
 80028f8:	bf00      	nop
 80028fa:	e7fe      	b.n	80028fa <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80028fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002900:	3301      	adds	r3, #1
 8002902:	b2db      	uxtb	r3, r3
 8002904:	b25a      	sxtb	r2, r3
 8002906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800290c:	2301      	movs	r3, #1
 800290e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002910:	e00b      	b.n	800292a <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002914:	4618      	mov	r0, r3
 8002916:	f004 fdad 	bl	8007474 <SEGGER_SYSVIEW_ShrinkId>
 800291a:	4601      	mov	r1, r0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	461a      	mov	r2, r3
 8002920:	2060      	movs	r0, #96	; 0x60
 8002922:	f003 ffbf 	bl	80068a4 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002926:	2300      	movs	r3, #0
 8002928:	63fb      	str	r3, [r7, #60]	; 0x3c
 800292a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002934:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002938:	4618      	mov	r0, r3
 800293a:	3740      	adds	r7, #64	; 0x40
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002940:	b590      	push	{r4, r7, lr}
 8002942:	b08f      	sub	sp, #60	; 0x3c
 8002944:	af02      	add	r7, sp, #8
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800294c:	2300      	movs	r3, #0
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10a      	bne.n	8002970 <xQueueReceive+0x30>
        __asm volatile
 800295a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295e:	f383 8811 	msr	BASEPRI, r3
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	f3bf 8f4f 	dsb	sy
 800296a:	623b      	str	r3, [r7, #32]
    }
 800296c:	bf00      	nop
 800296e:	e7fe      	b.n	800296e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d103      	bne.n	800297e <xQueueReceive+0x3e>
 8002976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <xQueueReceive+0x42>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <xQueueReceive+0x44>
 8002982:	2300      	movs	r3, #0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10a      	bne.n	800299e <xQueueReceive+0x5e>
        __asm volatile
 8002988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298c:	f383 8811 	msr	BASEPRI, r3
 8002990:	f3bf 8f6f 	isb	sy
 8002994:	f3bf 8f4f 	dsb	sy
 8002998:	61fb      	str	r3, [r7, #28]
    }
 800299a:	bf00      	nop
 800299c:	e7fe      	b.n	800299c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800299e:	f001 f9c1 	bl	8003d24 <xTaskGetSchedulerState>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d102      	bne.n	80029ae <xQueueReceive+0x6e>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <xQueueReceive+0x72>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <xQueueReceive+0x74>
 80029b2:	2300      	movs	r3, #0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10a      	bne.n	80029ce <xQueueReceive+0x8e>
        __asm volatile
 80029b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029bc:	f383 8811 	msr	BASEPRI, r3
 80029c0:	f3bf 8f6f 	isb	sy
 80029c4:	f3bf 8f4f 	dsb	sy
 80029c8:	61bb      	str	r3, [r7, #24]
    }
 80029ca:	bf00      	nop
 80029cc:	e7fe      	b.n	80029cc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80029ce:	f001 ff03 	bl	80047d8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d02f      	beq.n	8002a3e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029e2:	f000 f927 	bl	8002c34 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80029e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e8:	4618      	mov	r0, r3
 80029ea:	f004 fd43 	bl	8007474 <SEGGER_SYSVIEW_ShrinkId>
 80029ee:	4604      	mov	r4, r0
 80029f0:	2000      	movs	r0, #0
 80029f2:	f004 fd3f 	bl	8007474 <SEGGER_SYSVIEW_ShrinkId>
 80029f6:	4602      	mov	r2, r0
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2101      	movs	r1, #1
 80029fc:	9100      	str	r1, [sp, #0]
 80029fe:	4621      	mov	r1, r4
 8002a00:	205c      	movs	r0, #92	; 0x5c
 8002a02:	f004 f81f 	bl	8006a44 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	1e5a      	subs	r2, r3, #1
 8002a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00f      	beq.n	8002a36 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a18:	3310      	adds	r3, #16
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 ffd2 	bl	80039c4 <xTaskRemoveFromEventList>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002a26:	4b4d      	ldr	r3, [pc, #308]	; (8002b5c <xQueueReceive+0x21c>)
 8002a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	f3bf 8f4f 	dsb	sy
 8002a32:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002a36:	f001 feff 	bl	8004838 <vPortExitCritical>
                return pdPASS;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e08a      	b.n	8002b54 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d113      	bne.n	8002a6c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002a44:	f001 fef8 	bl	8004838 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f004 fd12 	bl	8007474 <SEGGER_SYSVIEW_ShrinkId>
 8002a50:	4604      	mov	r4, r0
 8002a52:	2000      	movs	r0, #0
 8002a54:	f004 fd0e 	bl	8007474 <SEGGER_SYSVIEW_ShrinkId>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	9100      	str	r1, [sp, #0]
 8002a60:	4621      	mov	r1, r4
 8002a62:	205c      	movs	r0, #92	; 0x5c
 8002a64:	f003 ffee 	bl	8006a44 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	e073      	b.n	8002b54 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002a72:	f107 0310 	add.w	r3, r7, #16
 8002a76:	4618      	mov	r0, r3
 8002a78:	f001 f80a 	bl	8003a90 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002a80:	f001 feda 	bl	8004838 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002a84:	f000 fc82 	bl	800338c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002a88:	f001 fea6 	bl	80047d8 <vPortEnterCritical>
 8002a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a92:	b25b      	sxtb	r3, r3
 8002a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a98:	d103      	bne.n	8002aa2 <xQueueReceive+0x162>
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aa8:	b25b      	sxtb	r3, r3
 8002aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aae:	d103      	bne.n	8002ab8 <xQueueReceive+0x178>
 8002ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ab8:	f001 febe 	bl	8004838 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002abc:	1d3a      	adds	r2, r7, #4
 8002abe:	f107 0310 	add.w	r3, r7, #16
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 fff9 	bl	8003abc <xTaskCheckForTimeOut>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d124      	bne.n	8002b1a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ad2:	f000 f927 	bl	8002d24 <prvIsQueueEmpty>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d018      	beq.n	8002b0e <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ade:	3324      	adds	r3, #36	; 0x24
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 ff1b 	bl	8003920 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002aea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002aec:	f000 f8c8 	bl	8002c80 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002af0:	f000 fc5a 	bl	80033a8 <xTaskResumeAll>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f47f af69 	bne.w	80029ce <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002afc:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <xQueueReceive+0x21c>)
 8002afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	f3bf 8f4f 	dsb	sy
 8002b08:	f3bf 8f6f 	isb	sy
 8002b0c:	e75f      	b.n	80029ce <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002b0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b10:	f000 f8b6 	bl	8002c80 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b14:	f000 fc48 	bl	80033a8 <xTaskResumeAll>
 8002b18:	e759      	b.n	80029ce <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002b1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b1c:	f000 f8b0 	bl	8002c80 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002b20:	f000 fc42 	bl	80033a8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b26:	f000 f8fd 	bl	8002d24 <prvIsQueueEmpty>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f43f af4e 	beq.w	80029ce <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b34:	4618      	mov	r0, r3
 8002b36:	f004 fc9d 	bl	8007474 <SEGGER_SYSVIEW_ShrinkId>
 8002b3a:	4604      	mov	r4, r0
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f004 fc99 	bl	8007474 <SEGGER_SYSVIEW_ShrinkId>
 8002b42:	4602      	mov	r2, r0
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2101      	movs	r1, #1
 8002b48:	9100      	str	r1, [sp, #0]
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	205c      	movs	r0, #92	; 0x5c
 8002b4e:	f003 ff79 	bl	8006a44 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002b52:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3734      	adds	r7, #52	; 0x34
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd90      	pop	{r4, r7, pc}
 8002b5c:	e000ed04 	.word	0xe000ed04

08002b60 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10d      	bne.n	8002b9a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d14d      	bne.n	8002c22 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f001 f8e8 	bl	8003d60 <xTaskPriorityDisinherit>
 8002b90:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	e043      	b.n	8002c22 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d119      	bne.n	8002bd4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6858      	ldr	r0, [r3, #4]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	461a      	mov	r2, r3
 8002baa:	68b9      	ldr	r1, [r7, #8]
 8002bac:	f004 fe28 	bl	8007800 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	441a      	add	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d32b      	bcc.n	8002c22 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	e026      	b.n	8002c22 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	68d8      	ldr	r0, [r3, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	f004 fe0e 	bl	8007800 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	425b      	negs	r3, r3
 8002bee:	441a      	add	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d207      	bcs.n	8002c10 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	425b      	negs	r3, r3
 8002c0a:	441a      	add	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d105      	bne.n	8002c22 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d002      	beq.n	8002c22 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002c2a:	697b      	ldr	r3, [r7, #20]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d018      	beq.n	8002c78 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	441a      	add	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d303      	bcc.n	8002c68 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68d9      	ldr	r1, [r3, #12]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	461a      	mov	r2, r3
 8002c72:	6838      	ldr	r0, [r7, #0]
 8002c74:	f004 fdc4 	bl	8007800 <memcpy>
    }
}
 8002c78:	bf00      	nop
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002c88:	f001 fda6 	bl	80047d8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c92:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c94:	e011      	b.n	8002cba <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d012      	beq.n	8002cc4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3324      	adds	r3, #36	; 0x24
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fe8e 	bl	80039c4 <xTaskRemoveFromEventList>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002cae:	f000 ff6b 	bl	8003b88 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	dce9      	bgt.n	8002c96 <prvUnlockQueue+0x16>
 8002cc2:	e000      	b.n	8002cc6 <prvUnlockQueue+0x46>
                        break;
 8002cc4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	22ff      	movs	r2, #255	; 0xff
 8002cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002cce:	f001 fdb3 	bl	8004838 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002cd2:	f001 fd81 	bl	80047d8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cdc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002cde:	e011      	b.n	8002d04 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d012      	beq.n	8002d0e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3310      	adds	r3, #16
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 fe69 	bl	80039c4 <xTaskRemoveFromEventList>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002cf8:	f000 ff46 	bl	8003b88 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002cfc:	7bbb      	ldrb	r3, [r7, #14]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	dce9      	bgt.n	8002ce0 <prvUnlockQueue+0x60>
 8002d0c:	e000      	b.n	8002d10 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002d0e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	22ff      	movs	r2, #255	; 0xff
 8002d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002d18:	f001 fd8e 	bl	8004838 <vPortExitCritical>
}
 8002d1c:	bf00      	nop
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d2c:	f001 fd54 	bl	80047d8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d102      	bne.n	8002d3e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	e001      	b.n	8002d42 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002d42:	f001 fd79 	bl	8004838 <vPortExitCritical>

    return xReturn;
 8002d46:	68fb      	ldr	r3, [r7, #12]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d58:	f001 fd3e 	bl	80047d8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d102      	bne.n	8002d6e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	e001      	b.n	8002d72 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002d72:	f001 fd61 	bl	8004838 <vPortExitCritical>

    return xReturn;
 8002d76:	68fb      	ldr	r3, [r7, #12]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	e01e      	b.n	8002dce <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002d90:	4a13      	ldr	r2, [pc, #76]	; (8002de0 <vQueueAddToRegistry+0x60>)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d115      	bne.n	8002dc8 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002d9c:	4910      	ldr	r1, [pc, #64]	; (8002de0 <vQueueAddToRegistry+0x60>)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002da6:	4a0e      	ldr	r2, [pc, #56]	; (8002de0 <vQueueAddToRegistry+0x60>)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4413      	add	r3, r2
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f004 fb5d 	bl	8007474 <SEGGER_SYSVIEW_ShrinkId>
 8002dba:	4601      	mov	r1, r0
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	2071      	movs	r0, #113	; 0x71
 8002dc2:	f003 fd6f 	bl	80068a4 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002dc6:	e006      	b.n	8002dd6 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2b07      	cmp	r3, #7
 8002dd2:	d9dd      	bls.n	8002d90 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000088 	.word	0x20000088

08002de4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002df4:	f001 fcf0 	bl	80047d8 <vPortEnterCritical>
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dfe:	b25b      	sxtb	r3, r3
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d103      	bne.n	8002e0e <vQueueWaitForMessageRestricted+0x2a>
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e14:	b25b      	sxtb	r3, r3
 8002e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1a:	d103      	bne.n	8002e24 <vQueueWaitForMessageRestricted+0x40>
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e24:	f001 fd08 	bl	8004838 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d106      	bne.n	8002e3e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	3324      	adds	r3, #36	; 0x24
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	68b9      	ldr	r1, [r7, #8]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 fd95 	bl	8003968 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002e3e:	6978      	ldr	r0, [r7, #20]
 8002e40:	f7ff ff1e 	bl	8002c80 <prvUnlockQueue>
    }
 8002e44:	bf00      	nop
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08c      	sub	sp, #48	; 0x30
 8002e50:	af04      	add	r7, sp, #16
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e5c:	88fb      	ldrh	r3, [r7, #6]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f001 fde3 	bl	8004a2c <pvPortMalloc>
 8002e66:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00e      	beq.n	8002e8c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e6e:	2058      	movs	r0, #88	; 0x58
 8002e70:	f001 fddc 	bl	8004a2c <pvPortMalloc>
 8002e74:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30
 8002e82:	e005      	b.n	8002e90 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002e84:	6978      	ldr	r0, [r7, #20]
 8002e86:	f001 feb1 	bl	8004bec <vPortFree>
 8002e8a:	e001      	b.n	8002e90 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d013      	beq.n	8002ebe <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e96:	88fa      	ldrh	r2, [r7, #6]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	9303      	str	r3, [sp, #12]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	9302      	str	r3, [sp, #8]
 8002ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea2:	9301      	str	r3, [sp, #4]
 8002ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	68b9      	ldr	r1, [r7, #8]
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 f80e 	bl	8002ece <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002eb2:	69f8      	ldr	r0, [r7, #28]
 8002eb4:	f000 f8a2 	bl	8002ffc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	61bb      	str	r3, [r7, #24]
 8002ebc:	e002      	b.n	8002ec4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002ec4:	69bb      	ldr	r3, [r7, #24]
    }
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3720      	adds	r7, #32
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b088      	sub	sp, #32
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
 8002eda:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ede:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	21a5      	movs	r1, #165	; 0xa5
 8002ee8:	f004 fc5e 	bl	80077a8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	f023 0307 	bic.w	r3, r3, #7
 8002f04:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00a      	beq.n	8002f26 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	617b      	str	r3, [r7, #20]
    }
 8002f22:	bf00      	nop
 8002f24:	e7fe      	b.n	8002f24 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d01f      	beq.n	8002f6c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61fb      	str	r3, [r7, #28]
 8002f30:	e012      	b.n	8002f58 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	4413      	add	r3, r2
 8002f38:	7819      	ldrb	r1, [r3, #0]
 8002f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	4413      	add	r3, r2
 8002f40:	3334      	adds	r3, #52	; 0x34
 8002f42:	460a      	mov	r2, r1
 8002f44:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d006      	beq.n	8002f60 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	3301      	adds	r3, #1
 8002f56:	61fb      	str	r3, [r7, #28]
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	2b09      	cmp	r3, #9
 8002f5c:	d9e9      	bls.n	8002f32 <prvInitialiseNewTask+0x64>
 8002f5e:	e000      	b.n	8002f62 <prvInitialiseNewTask+0x94>
            {
                break;
 8002f60:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f6a:	e003      	b.n	8002f74 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d901      	bls.n	8002f7e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f82:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f88:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f92:	3304      	adds	r3, #4
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff f96b 	bl	8002270 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	3318      	adds	r3, #24
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff f966 	bl	8002270 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fa8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fac:	f1c3 0205 	rsb	r2, r3, #5
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fb8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbc:	3350      	adds	r3, #80	; 0x50
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f004 fbf0 	bl	80077a8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fca:	3354      	adds	r3, #84	; 0x54
 8002fcc:	2201      	movs	r2, #1
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f004 fbe9 	bl	80077a8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	68f9      	ldr	r1, [r7, #12]
 8002fda:	69b8      	ldr	r0, [r7, #24]
 8002fdc:	f001 faca 	bl	8004574 <pxPortInitialiseStack>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ff0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ff2:	bf00      	nop
 8002ff4:	3720      	adds	r7, #32
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002ffc:	b5b0      	push	{r4, r5, r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af02      	add	r7, sp, #8
 8003002:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003004:	f001 fbe8 	bl	80047d8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003008:	4b3b      	ldr	r3, [pc, #236]	; (80030f8 <prvAddNewTaskToReadyList+0xfc>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	3301      	adds	r3, #1
 800300e:	4a3a      	ldr	r2, [pc, #232]	; (80030f8 <prvAddNewTaskToReadyList+0xfc>)
 8003010:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003012:	4b3a      	ldr	r3, [pc, #232]	; (80030fc <prvAddNewTaskToReadyList+0x100>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800301a:	4a38      	ldr	r2, [pc, #224]	; (80030fc <prvAddNewTaskToReadyList+0x100>)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003020:	4b35      	ldr	r3, [pc, #212]	; (80030f8 <prvAddNewTaskToReadyList+0xfc>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d110      	bne.n	800304a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003028:	f000 fdd2 	bl	8003bd0 <prvInitialiseTaskLists>
 800302c:	e00d      	b.n	800304a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800302e:	4b34      	ldr	r3, [pc, #208]	; (8003100 <prvAddNewTaskToReadyList+0x104>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d109      	bne.n	800304a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003036:	4b31      	ldr	r3, [pc, #196]	; (80030fc <prvAddNewTaskToReadyList+0x100>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	429a      	cmp	r2, r3
 8003042:	d802      	bhi.n	800304a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003044:	4a2d      	ldr	r2, [pc, #180]	; (80030fc <prvAddNewTaskToReadyList+0x100>)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800304a:	4b2e      	ldr	r3, [pc, #184]	; (8003104 <prvAddNewTaskToReadyList+0x108>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3301      	adds	r3, #1
 8003050:	4a2c      	ldr	r2, [pc, #176]	; (8003104 <prvAddNewTaskToReadyList+0x108>)
 8003052:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003054:	4b2b      	ldr	r3, [pc, #172]	; (8003104 <prvAddNewTaskToReadyList+0x108>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d016      	beq.n	8003090 <prvAddNewTaskToReadyList+0x94>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4618      	mov	r0, r3
 8003066:	f004 f8df 	bl	8007228 <SEGGER_SYSVIEW_OnTaskCreate>
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	461d      	mov	r5, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	461c      	mov	r4, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	1ae3      	subs	r3, r4, r3
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	462b      	mov	r3, r5
 800308c:	f001 ff7c 	bl	8004f88 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4618      	mov	r0, r3
 8003094:	f004 f94c 	bl	8007330 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	2201      	movs	r2, #1
 800309e:	409a      	lsls	r2, r3
 80030a0:	4b19      	ldr	r3, [pc, #100]	; (8003108 <prvAddNewTaskToReadyList+0x10c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	4a18      	ldr	r2, [pc, #96]	; (8003108 <prvAddNewTaskToReadyList+0x10c>)
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4a15      	ldr	r2, [pc, #84]	; (800310c <prvAddNewTaskToReadyList+0x110>)
 80030b8:	441a      	add	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3304      	adds	r3, #4
 80030be:	4619      	mov	r1, r3
 80030c0:	4610      	mov	r0, r2
 80030c2:	f7ff f8e2 	bl	800228a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80030c6:	f001 fbb7 	bl	8004838 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80030ca:	4b0d      	ldr	r3, [pc, #52]	; (8003100 <prvAddNewTaskToReadyList+0x104>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00e      	beq.n	80030f0 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80030d2:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <prvAddNewTaskToReadyList+0x100>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	429a      	cmp	r2, r3
 80030de:	d207      	bcs.n	80030f0 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80030e0:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <prvAddNewTaskToReadyList+0x114>)
 80030e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bdb0      	pop	{r4, r5, r7, pc}
 80030f8:	200001a0 	.word	0x200001a0
 80030fc:	200000c8 	.word	0x200000c8
 8003100:	200001ac 	.word	0x200001ac
 8003104:	200001bc 	.word	0x200001bc
 8003108:	200001a8 	.word	0x200001a8
 800310c:	200000cc 	.word	0x200000cc
 8003110:	e000ed04 	.word	0xe000ed04

08003114 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 800311c:	f001 fb5c 	bl	80047d8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d102      	bne.n	800312c <uxTaskPriorityGet+0x18>
 8003126:	4b07      	ldr	r3, [pc, #28]	; (8003144 <uxTaskPriorityGet+0x30>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	e000      	b.n	800312e <uxTaskPriorityGet+0x1a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8003136:	f001 fb7f 	bl	8004838 <vPortExitCritical>

        return uxReturn;
 800313a:	68bb      	ldr	r3, [r7, #8]
    }
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	200000c8 	.word	0x200000c8

08003148 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8003148:	b580      	push	{r7, lr}
 800314a:	b08a      	sub	sp, #40	; 0x28
 800314c:	af02      	add	r7, sp, #8
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8003152:	2300      	movs	r3, #0
 8003154:	61fb      	str	r3, [r7, #28]

        configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b04      	cmp	r3, #4
 800315a:	d90a      	bls.n	8003172 <vTaskPrioritySet+0x2a>
        __asm volatile
 800315c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003160:	f383 8811 	msr	BASEPRI, r3
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	60fb      	str	r3, [r7, #12]
    }
 800316e:	bf00      	nop
 8003170:	e7fe      	b.n	8003170 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b04      	cmp	r3, #4
 8003176:	d901      	bls.n	800317c <vTaskPrioritySet+0x34>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003178:	2304      	movs	r3, #4
 800317a:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 800317c:	f001 fb2c 	bl	80047d8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d102      	bne.n	800318c <vTaskPrioritySet+0x44>
 8003186:	4b4c      	ldr	r3, [pc, #304]	; (80032b8 <vTaskPrioritySet+0x170>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	e000      	b.n	800318e <vTaskPrioritySet+0x46>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	4618      	mov	r0, r3
 8003194:	f004 f96e 	bl	8007474 <SEGGER_SYSVIEW_ShrinkId>
 8003198:	4603      	mov	r3, r0
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	4619      	mov	r1, r3
 800319e:	2028      	movs	r0, #40	; 0x28
 80031a0:	f003 fb80 	bl	80068a4 <SEGGER_SYSVIEW_RecordU32x2>
 80031a4:	69b8      	ldr	r0, [r7, #24]
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b0:	461a      	mov	r2, r3
 80031b2:	2300      	movs	r3, #0
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	4613      	mov	r3, r2
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	f001 ff4d 	bl	8005058 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c2:	617b      	str	r3, [r7, #20]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d06f      	beq.n	80032ac <vTaskPrioritySet+0x164>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d90d      	bls.n	80031f0 <vTaskPrioritySet+0xa8>
                {
                    if( pxTCB != pxCurrentTCB )
 80031d4:	4b38      	ldr	r3, [pc, #224]	; (80032b8 <vTaskPrioritySet+0x170>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d00f      	beq.n	80031fe <vTaskPrioritySet+0xb6>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80031de:	4b36      	ldr	r3, [pc, #216]	; (80032b8 <vTaskPrioritySet+0x170>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d309      	bcc.n	80031fe <vTaskPrioritySet+0xb6>
                        {
                            xYieldRequired = pdTRUE;
 80031ea:	2301      	movs	r3, #1
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	e006      	b.n	80031fe <vTaskPrioritySet+0xb6>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 80031f0:	4b31      	ldr	r3, [pc, #196]	; (80032b8 <vTaskPrioritySet+0x170>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d101      	bne.n	80031fe <vTaskPrioritySet+0xb6>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 80031fa:	2301      	movs	r3, #1
 80031fc:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003202:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	429a      	cmp	r2, r3
 800320e:	d102      	bne.n	8003216 <vTaskPrioritySet+0xce>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	62da      	str	r2, [r3, #44]	; 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	649a      	str	r2, [r3, #72]	; 0x48
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	2b00      	cmp	r3, #0
 8003222:	db04      	blt.n	800322e <vTaskPrioritySet+0xe6>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	f1c3 0205 	rsb	r2, r3, #5
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	6959      	ldr	r1, [r3, #20]
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4a1f      	ldr	r2, [pc, #124]	; (80032bc <vTaskPrioritySet+0x174>)
 800323e:	4413      	add	r3, r2
 8003240:	4299      	cmp	r1, r3
 8003242:	d128      	bne.n	8003296 <vTaskPrioritySet+0x14e>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to it's new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	3304      	adds	r3, #4
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff f87b 	bl	8002344 <uxListRemove>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d109      	bne.n	8003268 <vTaskPrioritySet+0x120>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8003254:	2201      	movs	r2, #1
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43da      	mvns	r2, r3
 800325e:	4b18      	ldr	r3, [pc, #96]	; (80032c0 <vTaskPrioritySet+0x178>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4013      	ands	r3, r2
 8003264:	4a16      	ldr	r2, [pc, #88]	; (80032c0 <vTaskPrioritySet+0x178>)
 8003266:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

					prvReaddTaskToReadyList( pxTCB );
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	2201      	movs	r2, #1
 800326e:	409a      	lsls	r2, r3
 8003270:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <vTaskPrioritySet+0x178>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4313      	orrs	r3, r2
 8003276:	4a12      	ldr	r2, [pc, #72]	; (80032c0 <vTaskPrioritySet+0x178>)
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4a0d      	ldr	r2, [pc, #52]	; (80032bc <vTaskPrioritySet+0x174>)
 8003288:	441a      	add	r2, r3
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	3304      	adds	r3, #4
 800328e:	4619      	mov	r1, r3
 8003290:	4610      	mov	r0, r2
 8003292:	f7fe fffa 	bl	800228a <vListInsertEnd>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d007      	beq.n	80032ac <vTaskPrioritySet+0x164>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 800329c:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <vTaskPrioritySet+0x17c>)
 800329e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	f3bf 8f4f 	dsb	sy
 80032a8:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 80032ac:	f001 fac4 	bl	8004838 <vPortExitCritical>
    }
 80032b0:	bf00      	nop
 80032b2:	3720      	adds	r7, #32
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	200000c8 	.word	0x200000c8
 80032bc:	200000cc 	.word	0x200000cc
 80032c0:	200001a8 	.word	0x200001a8
 80032c4:	e000ed04 	.word	0xe000ed04

080032c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80032ce:	4b27      	ldr	r3, [pc, #156]	; (800336c <vTaskStartScheduler+0xa4>)
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	2300      	movs	r3, #0
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	2300      	movs	r3, #0
 80032d8:	2282      	movs	r2, #130	; 0x82
 80032da:	4925      	ldr	r1, [pc, #148]	; (8003370 <vTaskStartScheduler+0xa8>)
 80032dc:	4825      	ldr	r0, [pc, #148]	; (8003374 <vTaskStartScheduler+0xac>)
 80032de:	f7ff fdb5 	bl	8002e4c <xTaskCreate>
 80032e2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d102      	bne.n	80032f0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80032ea:	f000 fe31 	bl	8003f50 <xTimerCreateTimerTask>
 80032ee:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d124      	bne.n	8003340 <vTaskStartScheduler+0x78>
        __asm volatile
 80032f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fa:	f383 8811 	msr	BASEPRI, r3
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	60bb      	str	r3, [r7, #8]
    }
 8003308:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800330a:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <vTaskStartScheduler+0xb0>)
 800330c:	f04f 32ff 	mov.w	r2, #4294967295
 8003310:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003312:	4b1a      	ldr	r3, [pc, #104]	; (800337c <vTaskStartScheduler+0xb4>)
 8003314:	2201      	movs	r2, #1
 8003316:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003318:	4b19      	ldr	r3, [pc, #100]	; (8003380 <vTaskStartScheduler+0xb8>)
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800331e:	4b19      	ldr	r3, [pc, #100]	; (8003384 <vTaskStartScheduler+0xbc>)
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	4b12      	ldr	r3, [pc, #72]	; (800336c <vTaskStartScheduler+0xa4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d102      	bne.n	8003330 <vTaskStartScheduler+0x68>
 800332a:	f003 ff61 	bl	80071f0 <SEGGER_SYSVIEW_OnIdle>
 800332e:	e004      	b.n	800333a <vTaskStartScheduler+0x72>
 8003330:	4b14      	ldr	r3, [pc, #80]	; (8003384 <vTaskStartScheduler+0xbc>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f003 ffb9 	bl	80072ac <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800333a:	f001 f9ab 	bl	8004694 <xPortStartScheduler>
 800333e:	e00e      	b.n	800335e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003346:	d10a      	bne.n	800335e <vTaskStartScheduler+0x96>
        __asm volatile
 8003348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	607b      	str	r3, [r7, #4]
    }
 800335a:	bf00      	nop
 800335c:	e7fe      	b.n	800335c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800335e:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <vTaskStartScheduler+0xc0>)
 8003360:	681b      	ldr	r3, [r3, #0]
}
 8003362:	bf00      	nop
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	200001c4 	.word	0x200001c4
 8003370:	0800786c 	.word	0x0800786c
 8003374:	08003ba1 	.word	0x08003ba1
 8003378:	200001c0 	.word	0x200001c0
 800337c:	200001ac 	.word	0x200001ac
 8003380:	200001a4 	.word	0x200001a4
 8003384:	200000c8 	.word	0x200000c8
 8003388:	2000000c 	.word	0x2000000c

0800338c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003390:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <vTaskSuspendAll+0x18>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3301      	adds	r3, #1
 8003396:	4a03      	ldr	r2, [pc, #12]	; (80033a4 <vTaskSuspendAll+0x18>)
 8003398:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800339a:	bf00      	nop
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	200001c8 	.word	0x200001c8

080033a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80033b6:	4b43      	ldr	r3, [pc, #268]	; (80034c4 <xTaskResumeAll+0x11c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10a      	bne.n	80033d4 <xTaskResumeAll+0x2c>
        __asm volatile
 80033be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c2:	f383 8811 	msr	BASEPRI, r3
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	603b      	str	r3, [r7, #0]
    }
 80033d0:	bf00      	nop
 80033d2:	e7fe      	b.n	80033d2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80033d4:	f001 fa00 	bl	80047d8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80033d8:	4b3a      	ldr	r3, [pc, #232]	; (80034c4 <xTaskResumeAll+0x11c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3b01      	subs	r3, #1
 80033de:	4a39      	ldr	r2, [pc, #228]	; (80034c4 <xTaskResumeAll+0x11c>)
 80033e0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033e2:	4b38      	ldr	r3, [pc, #224]	; (80034c4 <xTaskResumeAll+0x11c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d165      	bne.n	80034b6 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033ea:	4b37      	ldr	r3, [pc, #220]	; (80034c8 <xTaskResumeAll+0x120>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d061      	beq.n	80034b6 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033f2:	e032      	b.n	800345a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033f4:	4b35      	ldr	r3, [pc, #212]	; (80034cc <xTaskResumeAll+0x124>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	3318      	adds	r3, #24
 8003400:	4618      	mov	r0, r3
 8003402:	f7fe ff9f 	bl	8002344 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	3304      	adds	r3, #4
 800340a:	4618      	mov	r0, r3
 800340c:	f7fe ff9a 	bl	8002344 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4618      	mov	r0, r3
 8003414:	f003 ff8c 	bl	8007330 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	2201      	movs	r2, #1
 800341e:	409a      	lsls	r2, r3
 8003420:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <xTaskResumeAll+0x128>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4313      	orrs	r3, r2
 8003426:	4a2a      	ldr	r2, [pc, #168]	; (80034d0 <xTaskResumeAll+0x128>)
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342e:	4613      	mov	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4a27      	ldr	r2, [pc, #156]	; (80034d4 <xTaskResumeAll+0x12c>)
 8003438:	441a      	add	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3304      	adds	r3, #4
 800343e:	4619      	mov	r1, r3
 8003440:	4610      	mov	r0, r2
 8003442:	f7fe ff22 	bl	800228a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344a:	4b23      	ldr	r3, [pc, #140]	; (80034d8 <xTaskResumeAll+0x130>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	429a      	cmp	r2, r3
 8003452:	d302      	bcc.n	800345a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003454:	4b21      	ldr	r3, [pc, #132]	; (80034dc <xTaskResumeAll+0x134>)
 8003456:	2201      	movs	r2, #1
 8003458:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800345a:	4b1c      	ldr	r3, [pc, #112]	; (80034cc <xTaskResumeAll+0x124>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1c8      	bne.n	80033f4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003468:	f000 fc30 	bl	8003ccc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800346c:	4b1c      	ldr	r3, [pc, #112]	; (80034e0 <xTaskResumeAll+0x138>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d010      	beq.n	800349a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003478:	f000 f92c 	bl	80036d4 <xTaskIncrementTick>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8003482:	4b16      	ldr	r3, [pc, #88]	; (80034dc <xTaskResumeAll+0x134>)
 8003484:	2201      	movs	r2, #1
 8003486:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3b01      	subs	r3, #1
 800348c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1f1      	bne.n	8003478 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003494:	4b12      	ldr	r3, [pc, #72]	; (80034e0 <xTaskResumeAll+0x138>)
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800349a:	4b10      	ldr	r3, [pc, #64]	; (80034dc <xTaskResumeAll+0x134>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d009      	beq.n	80034b6 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80034a2:	2301      	movs	r3, #1
 80034a4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80034a6:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <xTaskResumeAll+0x13c>)
 80034a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80034b6:	f001 f9bf 	bl	8004838 <vPortExitCritical>

    return xAlreadyYielded;
 80034ba:	68bb      	ldr	r3, [r7, #8]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	200001c8 	.word	0x200001c8
 80034c8:	200001a0 	.word	0x200001a0
 80034cc:	20000160 	.word	0x20000160
 80034d0:	200001a8 	.word	0x200001a8
 80034d4:	200000cc 	.word	0x200000cc
 80034d8:	200000c8 	.word	0x200000c8
 80034dc:	200001b4 	.word	0x200001b4
 80034e0:	200001b0 	.word	0x200001b0
 80034e4:	e000ed04 	.word	0xe000ed04

080034e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80034ee:	4b05      	ldr	r3, [pc, #20]	; (8003504 <xTaskGetTickCount+0x1c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80034f4:	687b      	ldr	r3, [r7, #4]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	200001a4 	.word	0x200001a4

08003508 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800350e:	f001 fa4d 	bl	80049ac <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003512:	2300      	movs	r3, #0
 8003514:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003516:	4b04      	ldr	r3, [pc, #16]	; (8003528 <xTaskGetTickCountFromISR+0x20>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800351c:	683b      	ldr	r3, [r7, #0]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	200001a4 	.word	0x200001a4

0800352c <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 800352c:	b480      	push	{r7}
 800352e:	b08b      	sub	sp, #44	; 0x2c
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 8003536:	2300      	movs	r3, #0
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d05b      	beq.n	80035fa <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	605a      	str	r2, [r3, #4]
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	3308      	adds	r3, #8
 8003558:	429a      	cmp	r2, r3
 800355a:	d104      	bne.n	8003566 <prvSearchForNameWithinSingleList+0x3a>
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	613b      	str	r3, [r7, #16]
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	605a      	str	r2, [r3, #4]
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	3308      	adds	r3, #8
 8003584:	429a      	cmp	r2, r3
 8003586:	d104      	bne.n	8003592 <prvSearchForNameWithinSingleList+0x66>
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 800359a:	2300      	movs	r3, #0
 800359c:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800359e:	2300      	movs	r3, #0
 80035a0:	623b      	str	r3, [r7, #32]
 80035a2:	e01c      	b.n	80035de <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	4413      	add	r3, r2
 80035aa:	3334      	adds	r3, #52	; 0x34
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	4413      	add	r3, r2
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	7afa      	ldrb	r2, [r7, #11]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d002      	beq.n	80035c4 <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 80035be:	2301      	movs	r3, #1
 80035c0:	61fb      	str	r3, [r7, #28]
 80035c2:	e006      	b.n	80035d2 <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 80035c4:	7afb      	ldrb	r3, [r7, #11]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d103      	bne.n	80035d2 <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
                        xBreakLoop = pdTRUE;
 80035ce:	2301      	movs	r3, #1
 80035d0:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d106      	bne.n	80035e6 <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	3301      	adds	r3, #1
 80035dc:	623b      	str	r3, [r7, #32]
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	2b09      	cmp	r3, #9
 80035e2:	d9df      	bls.n	80035a4 <prvSearchForNameWithinSingleList+0x78>
 80035e4:	e000      	b.n	80035e8 <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 80035e6:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d104      	bne.n	80035f8 <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d1bb      	bne.n	800356e <prvSearchForNameWithinSingleList+0x42>
 80035f6:	e000      	b.n	80035fa <prvSearchForNameWithinSingleList+0xce>
                    break;
 80035f8:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80035fc:	4618      	mov	r0, r3
 80035fe:	372c      	adds	r7, #44	; 0x2c
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 8003610:	2305      	movs	r3, #5
 8003612:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7fc fe25 	bl	8000264 <strlen>
 800361a:	4603      	mov	r3, r0
 800361c:	2b09      	cmp	r3, #9
 800361e:	d90a      	bls.n	8003636 <xTaskGetHandle+0x2e>
        __asm volatile
 8003620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	60fb      	str	r3, [r7, #12]
    }
 8003632:	bf00      	nop
 8003634:	e7fe      	b.n	8003634 <xTaskGetHandle+0x2c>

        vTaskSuspendAll();
 8003636:	f7ff fea9 	bl	800338c <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	3b01      	subs	r3, #1
 800363e:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	4613      	mov	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4a1d      	ldr	r2, [pc, #116]	; (80036c0 <xTaskGetHandle+0xb8>)
 800364c:	4413      	add	r3, r2
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff ff6b 	bl	800352c <prvSearchForNameWithinSingleList>
 8003656:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d103      	bne.n	8003666 <xTaskGetHandle+0x5e>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1ea      	bne.n	800363a <xTaskGetHandle+0x32>
 8003664:	e000      	b.n	8003668 <xTaskGetHandle+0x60>
                    break;
 8003666:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <xTaskGetHandle+0x74>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800366e:	4b15      	ldr	r3, [pc, #84]	; (80036c4 <xTaskGetHandle+0xbc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff ff59 	bl	800352c <prvSearchForNameWithinSingleList>
 800367a:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d106      	bne.n	8003690 <xTaskGetHandle+0x88>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 8003682:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <xTaskGetHandle+0xc0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff ff4f 	bl	800352c <prvSearchForNameWithinSingleList>
 800368e:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    if( pxTCB == NULL )
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d104      	bne.n	80036a0 <xTaskGetHandle+0x98>
                    {
                        /* Search the suspended list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	480c      	ldr	r0, [pc, #48]	; (80036cc <xTaskGetHandle+0xc4>)
 800369a:	f7ff ff47 	bl	800352c <prvSearchForNameWithinSingleList>
 800369e:	6138      	str	r0, [r7, #16]
                }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
                {
                    if( pxTCB == NULL )
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d104      	bne.n	80036b0 <xTaskGetHandle+0xa8>
                    {
                        /* Search the deleted list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4809      	ldr	r0, [pc, #36]	; (80036d0 <xTaskGetHandle+0xc8>)
 80036aa:	f7ff ff3f 	bl	800352c <prvSearchForNameWithinSingleList>
 80036ae:	6138      	str	r0, [r7, #16]
                    }
                }
            #endif
        }
        ( void ) xTaskResumeAll();
 80036b0:	f7ff fe7a 	bl	80033a8 <xTaskResumeAll>

        return pxTCB;
 80036b4:	693b      	ldr	r3, [r7, #16]
    }
 80036b6:	4618      	mov	r0, r3
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	200000cc 	.word	0x200000cc
 80036c4:	20000158 	.word	0x20000158
 80036c8:	2000015c 	.word	0x2000015c
 80036cc:	2000018c 	.word	0x2000018c
 80036d0:	20000174 	.word	0x20000174

080036d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036de:	4b50      	ldr	r3, [pc, #320]	; (8003820 <xTaskIncrementTick+0x14c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f040 8092 	bne.w	800380c <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036e8:	4b4e      	ldr	r3, [pc, #312]	; (8003824 <xTaskIncrementTick+0x150>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3301      	adds	r3, #1
 80036ee:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80036f0:	4a4c      	ldr	r2, [pc, #304]	; (8003824 <xTaskIncrementTick+0x150>)
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d120      	bne.n	800373e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80036fc:	4b4a      	ldr	r3, [pc, #296]	; (8003828 <xTaskIncrementTick+0x154>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <xTaskIncrementTick+0x48>
        __asm volatile
 8003706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370a:	f383 8811 	msr	BASEPRI, r3
 800370e:	f3bf 8f6f 	isb	sy
 8003712:	f3bf 8f4f 	dsb	sy
 8003716:	603b      	str	r3, [r7, #0]
    }
 8003718:	bf00      	nop
 800371a:	e7fe      	b.n	800371a <xTaskIncrementTick+0x46>
 800371c:	4b42      	ldr	r3, [pc, #264]	; (8003828 <xTaskIncrementTick+0x154>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	4b42      	ldr	r3, [pc, #264]	; (800382c <xTaskIncrementTick+0x158>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a40      	ldr	r2, [pc, #256]	; (8003828 <xTaskIncrementTick+0x154>)
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	4a40      	ldr	r2, [pc, #256]	; (800382c <xTaskIncrementTick+0x158>)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6013      	str	r3, [r2, #0]
 8003730:	4b3f      	ldr	r3, [pc, #252]	; (8003830 <xTaskIncrementTick+0x15c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3301      	adds	r3, #1
 8003736:	4a3e      	ldr	r2, [pc, #248]	; (8003830 <xTaskIncrementTick+0x15c>)
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	f000 fac7 	bl	8003ccc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800373e:	4b3d      	ldr	r3, [pc, #244]	; (8003834 <xTaskIncrementTick+0x160>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	429a      	cmp	r2, r3
 8003746:	d34c      	bcc.n	80037e2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003748:	4b37      	ldr	r3, [pc, #220]	; (8003828 <xTaskIncrementTick+0x154>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d104      	bne.n	800375c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003752:	4b38      	ldr	r3, [pc, #224]	; (8003834 <xTaskIncrementTick+0x160>)
 8003754:	f04f 32ff 	mov.w	r2, #4294967295
 8003758:	601a      	str	r2, [r3, #0]
                    break;
 800375a:	e042      	b.n	80037e2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800375c:	4b32      	ldr	r3, [pc, #200]	; (8003828 <xTaskIncrementTick+0x154>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	429a      	cmp	r2, r3
 8003772:	d203      	bcs.n	800377c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003774:	4a2f      	ldr	r2, [pc, #188]	; (8003834 <xTaskIncrementTick+0x160>)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800377a:	e032      	b.n	80037e2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	3304      	adds	r3, #4
 8003780:	4618      	mov	r0, r3
 8003782:	f7fe fddf 	bl	8002344 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378a:	2b00      	cmp	r3, #0
 800378c:	d004      	beq.n	8003798 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	3318      	adds	r3, #24
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe fdd6 	bl	8002344 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4618      	mov	r0, r3
 800379c:	f003 fdc8 	bl	8007330 <SEGGER_SYSVIEW_OnTaskStartReady>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	2201      	movs	r2, #1
 80037a6:	409a      	lsls	r2, r3
 80037a8:	4b23      	ldr	r3, [pc, #140]	; (8003838 <xTaskIncrementTick+0x164>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	4a22      	ldr	r2, [pc, #136]	; (8003838 <xTaskIncrementTick+0x164>)
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b6:	4613      	mov	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4a1f      	ldr	r2, [pc, #124]	; (800383c <xTaskIncrementTick+0x168>)
 80037c0:	441a      	add	r2, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	3304      	adds	r3, #4
 80037c6:	4619      	mov	r1, r3
 80037c8:	4610      	mov	r0, r2
 80037ca:	f7fe fd5e 	bl	800228a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d2:	4b1b      	ldr	r3, [pc, #108]	; (8003840 <xTaskIncrementTick+0x16c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	429a      	cmp	r2, r3
 80037da:	d3b5      	bcc.n	8003748 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80037dc:	2301      	movs	r3, #1
 80037de:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037e0:	e7b2      	b.n	8003748 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037e2:	4b17      	ldr	r3, [pc, #92]	; (8003840 <xTaskIncrementTick+0x16c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e8:	4914      	ldr	r1, [pc, #80]	; (800383c <xTaskIncrementTick+0x168>)
 80037ea:	4613      	mov	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	440b      	add	r3, r1
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d901      	bls.n	80037fe <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80037fa:	2301      	movs	r3, #1
 80037fc:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80037fe:	4b11      	ldr	r3, [pc, #68]	; (8003844 <xTaskIncrementTick+0x170>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d007      	beq.n	8003816 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003806:	2301      	movs	r3, #1
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	e004      	b.n	8003816 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800380c:	4b0e      	ldr	r3, [pc, #56]	; (8003848 <xTaskIncrementTick+0x174>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3301      	adds	r3, #1
 8003812:	4a0d      	ldr	r2, [pc, #52]	; (8003848 <xTaskIncrementTick+0x174>)
 8003814:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003816:	697b      	ldr	r3, [r7, #20]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	200001c8 	.word	0x200001c8
 8003824:	200001a4 	.word	0x200001a4
 8003828:	20000158 	.word	0x20000158
 800382c:	2000015c 	.word	0x2000015c
 8003830:	200001b8 	.word	0x200001b8
 8003834:	200001c0 	.word	0x200001c0
 8003838:	200001a8 	.word	0x200001a8
 800383c:	200000cc 	.word	0x200000cc
 8003840:	200000c8 	.word	0x200000c8
 8003844:	200001b4 	.word	0x200001b4
 8003848:	200001b0 	.word	0x200001b0

0800384c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003852:	4b2d      	ldr	r3, [pc, #180]	; (8003908 <vTaskSwitchContext+0xbc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800385a:	4b2c      	ldr	r3, [pc, #176]	; (800390c <vTaskSwitchContext+0xc0>)
 800385c:	2201      	movs	r2, #1
 800385e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003860:	e04d      	b.n	80038fe <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003862:	4b2a      	ldr	r3, [pc, #168]	; (800390c <vTaskSwitchContext+0xc0>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003868:	4b29      	ldr	r3, [pc, #164]	; (8003910 <vTaskSwitchContext+0xc4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	fab3 f383 	clz	r3, r3
 8003874:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003876:	7afb      	ldrb	r3, [r7, #11]
 8003878:	f1c3 031f 	rsb	r3, r3, #31
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	4925      	ldr	r1, [pc, #148]	; (8003914 <vTaskSwitchContext+0xc8>)
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10a      	bne.n	80038a8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003896:	f383 8811 	msr	BASEPRI, r3
 800389a:	f3bf 8f6f 	isb	sy
 800389e:	f3bf 8f4f 	dsb	sy
 80038a2:	607b      	str	r3, [r7, #4]
    }
 80038a4:	bf00      	nop
 80038a6:	e7fe      	b.n	80038a6 <vTaskSwitchContext+0x5a>
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4a18      	ldr	r2, [pc, #96]	; (8003914 <vTaskSwitchContext+0xc8>)
 80038b4:	4413      	add	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	3308      	adds	r3, #8
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d104      	bne.n	80038d8 <vTaskSwitchContext+0x8c>
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	605a      	str	r2, [r3, #4]
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	4a0e      	ldr	r2, [pc, #56]	; (8003918 <vTaskSwitchContext+0xcc>)
 80038e0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80038e2:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <vTaskSwitchContext+0xcc>)
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	4b0d      	ldr	r3, [pc, #52]	; (800391c <vTaskSwitchContext+0xd0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d102      	bne.n	80038f4 <vTaskSwitchContext+0xa8>
 80038ee:	f003 fc7f 	bl	80071f0 <SEGGER_SYSVIEW_OnIdle>
}
 80038f2:	e004      	b.n	80038fe <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80038f4:	4b08      	ldr	r3, [pc, #32]	; (8003918 <vTaskSwitchContext+0xcc>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f003 fcd7 	bl	80072ac <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80038fe:	bf00      	nop
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	200001c8 	.word	0x200001c8
 800390c:	200001b4 	.word	0x200001b4
 8003910:	200001a8 	.word	0x200001a8
 8003914:	200000cc 	.word	0x200000cc
 8003918:	200000c8 	.word	0x200000c8
 800391c:	200001c4 	.word	0x200001c4

08003920 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10a      	bne.n	8003946 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	60fb      	str	r3, [r7, #12]
    }
 8003942:	bf00      	nop
 8003944:	e7fe      	b.n	8003944 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003946:	4b07      	ldr	r3, [pc, #28]	; (8003964 <vTaskPlaceOnEventList+0x44>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3318      	adds	r3, #24
 800394c:	4619      	mov	r1, r3
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fe fcbf 	bl	80022d2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003954:	2101      	movs	r1, #1
 8003956:	6838      	ldr	r0, [r7, #0]
 8003958:	f000 fa82 	bl	8003e60 <prvAddCurrentTaskToDelayedList>
}
 800395c:	bf00      	nop
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	200000c8 	.word	0x200000c8

08003968 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10a      	bne.n	8003990 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	617b      	str	r3, [r7, #20]
    }
 800398c:	bf00      	nop
 800398e:	e7fe      	b.n	800398e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003990:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <vTaskPlaceOnEventListRestricted+0x58>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3318      	adds	r3, #24
 8003996:	4619      	mov	r1, r3
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f7fe fc76 	bl	800228a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80039a4:	f04f 33ff 	mov.w	r3, #4294967295
 80039a8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80039aa:	2024      	movs	r0, #36	; 0x24
 80039ac:	f002 ff20 	bl	80067f0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	68b8      	ldr	r0, [r7, #8]
 80039b4:	f000 fa54 	bl	8003e60 <prvAddCurrentTaskToDelayedList>
    }
 80039b8:	bf00      	nop
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	200000c8 	.word	0x200000c8

080039c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10a      	bne.n	80039f0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80039da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	60fb      	str	r3, [r7, #12]
    }
 80039ec:	bf00      	nop
 80039ee:	e7fe      	b.n	80039ee <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	3318      	adds	r3, #24
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fe fca5 	bl	8002344 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039fa:	4b1f      	ldr	r3, [pc, #124]	; (8003a78 <xTaskRemoveFromEventList+0xb4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d120      	bne.n	8003a44 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	3304      	adds	r3, #4
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe fc9c 	bl	8002344 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f003 fc8e 	bl	8007330 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	2201      	movs	r2, #1
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <xTaskRemoveFromEventList+0xb8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	4a16      	ldr	r2, [pc, #88]	; (8003a7c <xTaskRemoveFromEventList+0xb8>)
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <xTaskRemoveFromEventList+0xbc>)
 8003a34:	441a      	add	r2, r3
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	f7fe fc24 	bl	800228a <vListInsertEnd>
 8003a42:	e005      	b.n	8003a50 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	3318      	adds	r3, #24
 8003a48:	4619      	mov	r1, r3
 8003a4a:	480e      	ldr	r0, [pc, #56]	; (8003a84 <xTaskRemoveFromEventList+0xc0>)
 8003a4c:	f7fe fc1d 	bl	800228a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a54:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <xTaskRemoveFromEventList+0xc4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d905      	bls.n	8003a6a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003a62:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <xTaskRemoveFromEventList+0xc8>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	e001      	b.n	8003a6e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003a6e:	697b      	ldr	r3, [r7, #20]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	200001c8 	.word	0x200001c8
 8003a7c:	200001a8 	.word	0x200001a8
 8003a80:	200000cc 	.word	0x200000cc
 8003a84:	20000160 	.word	0x20000160
 8003a88:	200000c8 	.word	0x200000c8
 8003a8c:	200001b4 	.word	0x200001b4

08003a90 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <vTaskInternalSetTimeOutState+0x24>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <vTaskInternalSetTimeOutState+0x28>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	605a      	str	r2, [r3, #4]
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	200001b8 	.word	0x200001b8
 8003ab8:	200001a4 	.word	0x200001a4

08003abc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	613b      	str	r3, [r7, #16]
    }
 8003ade:	bf00      	nop
 8003ae0:	e7fe      	b.n	8003ae0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10a      	bne.n	8003afe <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	60fb      	str	r3, [r7, #12]
    }
 8003afa:	bf00      	nop
 8003afc:	e7fe      	b.n	8003afc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003afe:	f000 fe6b 	bl	80047d8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003b02:	4b1f      	ldr	r3, [pc, #124]	; (8003b80 <xTaskCheckForTimeOut+0xc4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1a:	d102      	bne.n	8003b22 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61fb      	str	r3, [r7, #28]
 8003b20:	e026      	b.n	8003b70 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	4b17      	ldr	r3, [pc, #92]	; (8003b84 <xTaskCheckForTimeOut+0xc8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d00a      	beq.n	8003b44 <xTaskCheckForTimeOut+0x88>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d305      	bcc.n	8003b44 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	e015      	b.n	8003b70 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d20b      	bcs.n	8003b66 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	1ad2      	subs	r2, r2, r3
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7ff ff98 	bl	8003a90 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]
 8003b64:	e004      	b.n	8003b70 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003b70:	f000 fe62 	bl	8004838 <vPortExitCritical>

    return xReturn;
 8003b74:	69fb      	ldr	r3, [r7, #28]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3720      	adds	r7, #32
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	200001a4 	.word	0x200001a4
 8003b84:	200001b8 	.word	0x200001b8

08003b88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003b8c:	4b03      	ldr	r3, [pc, #12]	; (8003b9c <vTaskMissedYield+0x14>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
}
 8003b92:	bf00      	nop
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	200001b4 	.word	0x200001b4

08003ba0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003ba8:	f000 f852 	bl	8003c50 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003bac:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <prvIdleTask+0x28>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d9f9      	bls.n	8003ba8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003bb4:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <prvIdleTask+0x2c>)
 8003bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003bc4:	e7f0      	b.n	8003ba8 <prvIdleTask+0x8>
 8003bc6:	bf00      	nop
 8003bc8:	200000cc 	.word	0x200000cc
 8003bcc:	e000ed04 	.word	0xe000ed04

08003bd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	607b      	str	r3, [r7, #4]
 8003bda:	e00c      	b.n	8003bf6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4a12      	ldr	r2, [pc, #72]	; (8003c30 <prvInitialiseTaskLists+0x60>)
 8003be8:	4413      	add	r3, r2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fe fb20 	bl	8002230 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	607b      	str	r3, [r7, #4]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d9ef      	bls.n	8003bdc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003bfc:	480d      	ldr	r0, [pc, #52]	; (8003c34 <prvInitialiseTaskLists+0x64>)
 8003bfe:	f7fe fb17 	bl	8002230 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003c02:	480d      	ldr	r0, [pc, #52]	; (8003c38 <prvInitialiseTaskLists+0x68>)
 8003c04:	f7fe fb14 	bl	8002230 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003c08:	480c      	ldr	r0, [pc, #48]	; (8003c3c <prvInitialiseTaskLists+0x6c>)
 8003c0a:	f7fe fb11 	bl	8002230 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003c0e:	480c      	ldr	r0, [pc, #48]	; (8003c40 <prvInitialiseTaskLists+0x70>)
 8003c10:	f7fe fb0e 	bl	8002230 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003c14:	480b      	ldr	r0, [pc, #44]	; (8003c44 <prvInitialiseTaskLists+0x74>)
 8003c16:	f7fe fb0b 	bl	8002230 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003c1a:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <prvInitialiseTaskLists+0x78>)
 8003c1c:	4a05      	ldr	r2, [pc, #20]	; (8003c34 <prvInitialiseTaskLists+0x64>)
 8003c1e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c20:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <prvInitialiseTaskLists+0x7c>)
 8003c22:	4a05      	ldr	r2, [pc, #20]	; (8003c38 <prvInitialiseTaskLists+0x68>)
 8003c24:	601a      	str	r2, [r3, #0]
}
 8003c26:	bf00      	nop
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	200000cc 	.word	0x200000cc
 8003c34:	20000130 	.word	0x20000130
 8003c38:	20000144 	.word	0x20000144
 8003c3c:	20000160 	.word	0x20000160
 8003c40:	20000174 	.word	0x20000174
 8003c44:	2000018c 	.word	0x2000018c
 8003c48:	20000158 	.word	0x20000158
 8003c4c:	2000015c 	.word	0x2000015c

08003c50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c56:	e019      	b.n	8003c8c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003c58:	f000 fdbe 	bl	80047d8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c5c:	4b10      	ldr	r3, [pc, #64]	; (8003ca0 <prvCheckTasksWaitingTermination+0x50>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3304      	adds	r3, #4
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fe fb6b 	bl	8002344 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003c6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ca4 <prvCheckTasksWaitingTermination+0x54>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	4a0b      	ldr	r2, [pc, #44]	; (8003ca4 <prvCheckTasksWaitingTermination+0x54>)
 8003c76:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003c78:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <prvCheckTasksWaitingTermination+0x58>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ca8 <prvCheckTasksWaitingTermination+0x58>)
 8003c80:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003c82:	f000 fdd9 	bl	8004838 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f810 	bl	8003cac <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c8c:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <prvCheckTasksWaitingTermination+0x58>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1e1      	bne.n	8003c58 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003c94:	bf00      	nop
 8003c96:	bf00      	nop
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000174 	.word	0x20000174
 8003ca4:	200001a0 	.word	0x200001a0
 8003ca8:	20000188 	.word	0x20000188

08003cac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 ff97 	bl	8004bec <vPortFree>
                vPortFree( pxTCB );
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 ff94 	bl	8004bec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003cc4:	bf00      	nop
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cd0:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <prvResetNextTaskUnblockTime+0x30>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d104      	bne.n	8003ce4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003cda:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <prvResetNextTaskUnblockTime+0x34>)
 8003cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003ce2:	e005      	b.n	8003cf0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <prvResetNextTaskUnblockTime+0x30>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <prvResetNextTaskUnblockTime+0x34>)
 8003cee:	6013      	str	r3, [r2, #0]
}
 8003cf0:	bf00      	nop
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	20000158 	.word	0x20000158
 8003d00:	200001c0 	.word	0x200001c0

08003d04 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8003d0a:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <xTaskGetCurrentTaskHandle+0x1c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	607b      	str	r3, [r7, #4]

        return xReturn;
 8003d10:	687b      	ldr	r3, [r7, #4]
    }
 8003d12:	4618      	mov	r0, r3
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	200000c8 	.word	0x200000c8

08003d24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003d2a:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <xTaskGetSchedulerState+0x34>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d102      	bne.n	8003d38 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003d32:	2301      	movs	r3, #1
 8003d34:	607b      	str	r3, [r7, #4]
 8003d36:	e008      	b.n	8003d4a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d38:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <xTaskGetSchedulerState+0x38>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d102      	bne.n	8003d46 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003d40:	2302      	movs	r3, #2
 8003d42:	607b      	str	r3, [r7, #4]
 8003d44:	e001      	b.n	8003d4a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003d46:	2300      	movs	r3, #0
 8003d48:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003d4a:	687b      	ldr	r3, [r7, #4]
    }
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	200001ac 	.word	0x200001ac
 8003d5c:	200001c8 	.word	0x200001c8

08003d60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d068      	beq.n	8003e48 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003d76:	4b37      	ldr	r3, [pc, #220]	; (8003e54 <xTaskPriorityDisinherit+0xf4>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d00a      	beq.n	8003d96 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	60fb      	str	r3, [r7, #12]
    }
 8003d92:	bf00      	nop
 8003d94:	e7fe      	b.n	8003d94 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10a      	bne.n	8003db4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	60bb      	str	r3, [r7, #8]
    }
 8003db0:	bf00      	nop
 8003db2:	e7fe      	b.n	8003db2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db8:	1e5a      	subs	r2, r3, #1
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d03e      	beq.n	8003e48 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d13a      	bne.n	8003e48 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fe fab4 	bl	8002344 <uxListRemove>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de6:	2201      	movs	r2, #1
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43da      	mvns	r2, r3
 8003dee:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <xTaskPriorityDisinherit+0xf8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4013      	ands	r3, r2
 8003df4:	4a18      	ldr	r2, [pc, #96]	; (8003e58 <xTaskPriorityDisinherit+0xf8>)
 8003df6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	204a      	movs	r0, #74	; 0x4a
 8003dfe:	f002 fd15 	bl	800682c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0e:	f1c3 0205 	rsb	r2, r3, #5
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	409a      	lsls	r2, r3
 8003e1e:	4b0e      	ldr	r3, [pc, #56]	; (8003e58 <xTaskPriorityDisinherit+0xf8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	4a0c      	ldr	r2, [pc, #48]	; (8003e58 <xTaskPriorityDisinherit+0xf8>)
 8003e26:	6013      	str	r3, [r2, #0]
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4a09      	ldr	r2, [pc, #36]	; (8003e5c <xTaskPriorityDisinherit+0xfc>)
 8003e36:	441a      	add	r2, r3
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4610      	mov	r0, r2
 8003e40:	f7fe fa23 	bl	800228a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003e44:	2301      	movs	r3, #1
 8003e46:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003e48:	697b      	ldr	r3, [r7, #20]
    }
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	200000c8 	.word	0x200000c8
 8003e58:	200001a8 	.word	0x200001a8
 8003e5c:	200000cc 	.word	0x200000cc

08003e60 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003e6a:	4b32      	ldr	r3, [pc, #200]	; (8003f34 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e70:	4b31      	ldr	r3, [pc, #196]	; (8003f38 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3304      	adds	r3, #4
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fe fa64 	bl	8002344 <uxListRemove>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10b      	bne.n	8003e9a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003e82:	4b2d      	ldr	r3, [pc, #180]	; (8003f38 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	2201      	movs	r2, #1
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	43da      	mvns	r2, r3
 8003e90:	4b2a      	ldr	r3, [pc, #168]	; (8003f3c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4013      	ands	r3, r2
 8003e96:	4a29      	ldr	r2, [pc, #164]	; (8003f3c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003e98:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea0:	d110      	bne.n	8003ec4 <prvAddCurrentTaskToDelayedList+0x64>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00d      	beq.n	8003ec4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003ea8:	4b23      	ldr	r3, [pc, #140]	; (8003f38 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	211b      	movs	r1, #27
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f003 fa80 	bl	80073b4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eb4:	4b20      	ldr	r3, [pc, #128]	; (8003f38 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4820      	ldr	r0, [pc, #128]	; (8003f40 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003ebe:	f7fe f9e4 	bl	800228a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003ec2:	e032      	b.n	8003f2a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4413      	add	r3, r2
 8003eca:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ecc:	4b1a      	ldr	r3, [pc, #104]	; (8003f38 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d20f      	bcs.n	8003efc <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003edc:	4b16      	ldr	r3, [pc, #88]	; (8003f38 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2104      	movs	r1, #4
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f003 fa66 	bl	80073b4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ee8:	4b16      	ldr	r3, [pc, #88]	; (8003f44 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	4b12      	ldr	r3, [pc, #72]	; (8003f38 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	f7fe f9ec 	bl	80022d2 <vListInsert>
}
 8003efa:	e016      	b.n	8003f2a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003efc:	4b0e      	ldr	r3, [pc, #56]	; (8003f38 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2104      	movs	r1, #4
 8003f02:	4618      	mov	r0, r3
 8003f04:	f003 fa56 	bl	80073b4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f08:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3304      	adds	r3, #4
 8003f12:	4619      	mov	r1, r3
 8003f14:	4610      	mov	r0, r2
 8003f16:	f7fe f9dc 	bl	80022d2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003f1a:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xec>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d202      	bcs.n	8003f2a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003f24:	4a09      	ldr	r2, [pc, #36]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xec>)
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	6013      	str	r3, [r2, #0]
}
 8003f2a:	bf00      	nop
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	200001a4 	.word	0x200001a4
 8003f38:	200000c8 	.word	0x200000c8
 8003f3c:	200001a8 	.word	0x200001a8
 8003f40:	2000018c 	.word	0x2000018c
 8003f44:	2000015c 	.word	0x2000015c
 8003f48:	20000158 	.word	0x20000158
 8003f4c:	200001c0 	.word	0x200001c0

08003f50 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003f56:	2300      	movs	r3, #0
 8003f58:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003f5a:	f000 fad5 	bl	8004508 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003f5e:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <xTimerCreateTimerTask+0x54>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00b      	beq.n	8003f7e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003f66:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <xTimerCreateTimerTask+0x58>)
 8003f68:	9301      	str	r3, [sp, #4]
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f74:	490d      	ldr	r1, [pc, #52]	; (8003fac <xTimerCreateTimerTask+0x5c>)
 8003f76:	480e      	ldr	r0, [pc, #56]	; (8003fb0 <xTimerCreateTimerTask+0x60>)
 8003f78:	f7fe ff68 	bl	8002e4c <xTaskCreate>
 8003f7c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10a      	bne.n	8003f9a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	603b      	str	r3, [r7, #0]
    }
 8003f96:	bf00      	nop
 8003f98:	e7fe      	b.n	8003f98 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003f9a:	687b      	ldr	r3, [r7, #4]
    }
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	200001fc 	.word	0x200001fc
 8003fa8:	20000200 	.word	0x20000200
 8003fac:	08007874 	.word	0x08007874
 8003fb0:	080040e9 	.word	0x080040e9

08003fb4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08a      	sub	sp, #40	; 0x28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
 8003fc0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10a      	bne.n	8003fe2 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd0:	f383 8811 	msr	BASEPRI, r3
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	623b      	str	r3, [r7, #32]
    }
 8003fde:	bf00      	nop
 8003fe0:	e7fe      	b.n	8003fe0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003fe2:	4b1a      	ldr	r3, [pc, #104]	; (800404c <xTimerGenericCommand+0x98>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d02a      	beq.n	8004040 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b05      	cmp	r3, #5
 8003ffa:	dc18      	bgt.n	800402e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003ffc:	f7ff fe92 	bl	8003d24 <xTaskGetSchedulerState>
 8004000:	4603      	mov	r3, r0
 8004002:	2b02      	cmp	r3, #2
 8004004:	d109      	bne.n	800401a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004006:	4b11      	ldr	r3, [pc, #68]	; (800404c <xTimerGenericCommand+0x98>)
 8004008:	6818      	ldr	r0, [r3, #0]
 800400a:	f107 0114 	add.w	r1, r7, #20
 800400e:	2300      	movs	r3, #0
 8004010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004012:	f7fe fab1 	bl	8002578 <xQueueGenericSend>
 8004016:	6278      	str	r0, [r7, #36]	; 0x24
 8004018:	e012      	b.n	8004040 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800401a:	4b0c      	ldr	r3, [pc, #48]	; (800404c <xTimerGenericCommand+0x98>)
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	f107 0114 	add.w	r1, r7, #20
 8004022:	2300      	movs	r3, #0
 8004024:	2200      	movs	r2, #0
 8004026:	f7fe faa7 	bl	8002578 <xQueueGenericSend>
 800402a:	6278      	str	r0, [r7, #36]	; 0x24
 800402c:	e008      	b.n	8004040 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800402e:	4b07      	ldr	r3, [pc, #28]	; (800404c <xTimerGenericCommand+0x98>)
 8004030:	6818      	ldr	r0, [r3, #0]
 8004032:	f107 0114 	add.w	r1, r7, #20
 8004036:	2300      	movs	r3, #0
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	f7fe fbc3 	bl	80027c4 <xQueueGenericSendFromISR>
 800403e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004042:	4618      	mov	r0, r3
 8004044:	3728      	adds	r7, #40	; 0x28
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	200001fc 	.word	0x200001fc

08004050 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af02      	add	r7, sp, #8
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800405a:	4b22      	ldr	r3, [pc, #136]	; (80040e4 <prvProcessExpiredTimer+0x94>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	3304      	adds	r3, #4
 8004068:	4618      	mov	r0, r3
 800406a:	f7fe f96b 	bl	8002344 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d022      	beq.n	80040c2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	699a      	ldr	r2, [r3, #24]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	18d1      	adds	r1, r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	6978      	ldr	r0, [r7, #20]
 800408a:	f000 f8d1 	bl	8004230 <prvInsertTimerInActiveList>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01f      	beq.n	80040d4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004094:	2300      	movs	r3, #0
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	2300      	movs	r3, #0
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	2100      	movs	r1, #0
 800409e:	6978      	ldr	r0, [r7, #20]
 80040a0:	f7ff ff88 	bl	8003fb4 <xTimerGenericCommand>
 80040a4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d113      	bne.n	80040d4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	60fb      	str	r3, [r7, #12]
    }
 80040be:	bf00      	nop
 80040c0:	e7fe      	b.n	80040c0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	6978      	ldr	r0, [r7, #20]
 80040da:	4798      	blx	r3
    }
 80040dc:	bf00      	nop
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	200001f4 	.word	0x200001f4

080040e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040f0:	f107 0308 	add.w	r3, r7, #8
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 f857 	bl	80041a8 <prvGetNextExpireTime>
 80040fa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4619      	mov	r1, r3
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 f803 	bl	800410c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004106:	f000 f8d5 	bl	80042b4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800410a:	e7f1      	b.n	80040f0 <prvTimerTask+0x8>

0800410c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004116:	f7ff f939 	bl	800338c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800411a:	f107 0308 	add.w	r3, r7, #8
 800411e:	4618      	mov	r0, r3
 8004120:	f000 f866 	bl	80041f0 <prvSampleTimeNow>
 8004124:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d130      	bne.n	800418e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10a      	bne.n	8004148 <prvProcessTimerOrBlockTask+0x3c>
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	429a      	cmp	r2, r3
 8004138:	d806      	bhi.n	8004148 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800413a:	f7ff f935 	bl	80033a8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800413e:	68f9      	ldr	r1, [r7, #12]
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff ff85 	bl	8004050 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004146:	e024      	b.n	8004192 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d008      	beq.n	8004160 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800414e:	4b13      	ldr	r3, [pc, #76]	; (800419c <prvProcessTimerOrBlockTask+0x90>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <prvProcessTimerOrBlockTask+0x50>
 8004158:	2301      	movs	r3, #1
 800415a:	e000      	b.n	800415e <prvProcessTimerOrBlockTask+0x52>
 800415c:	2300      	movs	r3, #0
 800415e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004160:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <prvProcessTimerOrBlockTask+0x94>)
 8004162:	6818      	ldr	r0, [r3, #0]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	4619      	mov	r1, r3
 800416e:	f7fe fe39 	bl	8002de4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004172:	f7ff f919 	bl	80033a8 <xTaskResumeAll>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10a      	bne.n	8004192 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800417c:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <prvProcessTimerOrBlockTask+0x98>)
 800417e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	f3bf 8f6f 	isb	sy
    }
 800418c:	e001      	b.n	8004192 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800418e:	f7ff f90b 	bl	80033a8 <xTaskResumeAll>
    }
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	200001f8 	.word	0x200001f8
 80041a0:	200001fc 	.word	0x200001fc
 80041a4:	e000ed04 	.word	0xe000ed04

080041a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80041b0:	4b0e      	ldr	r3, [pc, #56]	; (80041ec <prvGetNextExpireTime+0x44>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <prvGetNextExpireTime+0x16>
 80041ba:	2201      	movs	r2, #1
 80041bc:	e000      	b.n	80041c0 <prvGetNextExpireTime+0x18>
 80041be:	2200      	movs	r2, #0
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d105      	bne.n	80041d8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041cc:	4b07      	ldr	r3, [pc, #28]	; (80041ec <prvGetNextExpireTime+0x44>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	e001      	b.n	80041dc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80041dc:	68fb      	ldr	r3, [r7, #12]
    }
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	200001f4 	.word	0x200001f4

080041f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80041f8:	f7ff f976 	bl	80034e8 <xTaskGetTickCount>
 80041fc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80041fe:	4b0b      	ldr	r3, [pc, #44]	; (800422c <prvSampleTimeNow+0x3c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	429a      	cmp	r2, r3
 8004206:	d205      	bcs.n	8004214 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004208:	f000 f91a 	bl	8004440 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	e002      	b.n	800421a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800421a:	4a04      	ldr	r2, [pc, #16]	; (800422c <prvSampleTimeNow+0x3c>)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004220:	68fb      	ldr	r3, [r7, #12]
    }
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20000204 	.word	0x20000204

08004230 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	429a      	cmp	r2, r3
 8004254:	d812      	bhi.n	800427c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	1ad2      	subs	r2, r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	429a      	cmp	r2, r3
 8004262:	d302      	bcc.n	800426a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004264:	2301      	movs	r3, #1
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	e01b      	b.n	80042a2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800426a:	4b10      	ldr	r3, [pc, #64]	; (80042ac <prvInsertTimerInActiveList+0x7c>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3304      	adds	r3, #4
 8004272:	4619      	mov	r1, r3
 8004274:	4610      	mov	r0, r2
 8004276:	f7fe f82c 	bl	80022d2 <vListInsert>
 800427a:	e012      	b.n	80042a2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d206      	bcs.n	8004292 <prvInsertTimerInActiveList+0x62>
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d302      	bcc.n	8004292 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800428c:	2301      	movs	r3, #1
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	e007      	b.n	80042a2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004292:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <prvInsertTimerInActiveList+0x80>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3304      	adds	r3, #4
 800429a:	4619      	mov	r1, r3
 800429c:	4610      	mov	r0, r2
 800429e:	f7fe f818 	bl	80022d2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80042a2:	697b      	ldr	r3, [r7, #20]
    }
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	200001f8 	.word	0x200001f8
 80042b0:	200001f4 	.word	0x200001f4

080042b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08c      	sub	sp, #48	; 0x30
 80042b8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042ba:	e0ae      	b.n	800441a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f2c0 80ab 	blt.w	800441a <prvProcessReceivedCommands+0x166>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d004      	beq.n	80042da <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	3304      	adds	r3, #4
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fe f835 	bl	8002344 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042da:	1d3b      	adds	r3, r7, #4
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff ff87 	bl	80041f0 <prvSampleTimeNow>
 80042e2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b09      	cmp	r3, #9
 80042e8:	f200 8096 	bhi.w	8004418 <prvProcessReceivedCommands+0x164>
 80042ec:	a201      	add	r2, pc, #4	; (adr r2, 80042f4 <prvProcessReceivedCommands+0x40>)
 80042ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f2:	bf00      	nop
 80042f4:	0800431d 	.word	0x0800431d
 80042f8:	0800431d 	.word	0x0800431d
 80042fc:	0800431d 	.word	0x0800431d
 8004300:	08004391 	.word	0x08004391
 8004304:	080043a5 	.word	0x080043a5
 8004308:	080043ef 	.word	0x080043ef
 800430c:	0800431d 	.word	0x0800431d
 8004310:	0800431d 	.word	0x0800431d
 8004314:	08004391 	.word	0x08004391
 8004318:	080043a5 	.word	0x080043a5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004322:	f043 0301 	orr.w	r3, r3, #1
 8004326:	b2da      	uxtb	r2, r3
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	18d1      	adds	r1, r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a3a      	ldr	r2, [r7, #32]
 800433a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800433c:	f7ff ff78 	bl	8004230 <prvInsertTimerInActiveList>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d069      	beq.n	800441a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800434c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	d05e      	beq.n	800441a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	441a      	add	r2, r3
 8004364:	2300      	movs	r3, #0
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	2300      	movs	r3, #0
 800436a:	2100      	movs	r1, #0
 800436c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800436e:	f7ff fe21 	bl	8003fb4 <xTimerGenericCommand>
 8004372:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d14f      	bne.n	800441a <prvProcessReceivedCommands+0x166>
        __asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	61bb      	str	r3, [r7, #24]
    }
 800438c:	bf00      	nop
 800438e:	e7fe      	b.n	800438e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004396:	f023 0301 	bic.w	r3, r3, #1
 800439a:	b2da      	uxtb	r2, r3
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80043a2:	e03a      	b.n	800441a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043aa:	f043 0301 	orr.w	r3, r3, #1
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10a      	bne.n	80043da <prvProcessReceivedCommands+0x126>
        __asm volatile
 80043c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c8:	f383 8811 	msr	BASEPRI, r3
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	f3bf 8f4f 	dsb	sy
 80043d4:	617b      	str	r3, [r7, #20]
    }
 80043d6:	bf00      	nop
 80043d8:	e7fe      	b.n	80043d8 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	18d1      	adds	r1, r2, r3
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	6a3a      	ldr	r2, [r7, #32]
 80043e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043e8:	f7ff ff22 	bl	8004230 <prvInsertTimerInActiveList>
                        break;
 80043ec:	e015      	b.n	800441a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d103      	bne.n	8004404 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80043fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043fe:	f000 fbf5 	bl	8004bec <vPortFree>
 8004402:	e00a      	b.n	800441a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800440a:	f023 0301 	bic.w	r3, r3, #1
 800440e:	b2da      	uxtb	r2, r3
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004416:	e000      	b.n	800441a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004418:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800441a:	4b08      	ldr	r3, [pc, #32]	; (800443c <prvProcessReceivedCommands+0x188>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f107 0108 	add.w	r1, r7, #8
 8004422:	2200      	movs	r2, #0
 8004424:	4618      	mov	r0, r3
 8004426:	f7fe fa8b 	bl	8002940 <xQueueReceive>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	f47f af45 	bne.w	80042bc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004432:	bf00      	nop
 8004434:	bf00      	nop
 8004436:	3728      	adds	r7, #40	; 0x28
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	200001fc 	.word	0x200001fc

08004440 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004446:	e048      	b.n	80044da <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004448:	4b2d      	ldr	r3, [pc, #180]	; (8004500 <prvSwitchTimerLists+0xc0>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004452:	4b2b      	ldr	r3, [pc, #172]	; (8004500 <prvSwitchTimerLists+0xc0>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	3304      	adds	r3, #4
 8004460:	4618      	mov	r0, r3
 8004462:	f7fd ff6f 	bl	8002344 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d02e      	beq.n	80044da <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4413      	add	r3, r2
 8004484:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	429a      	cmp	r2, r3
 800448c:	d90e      	bls.n	80044ac <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800449a:	4b19      	ldr	r3, [pc, #100]	; (8004500 <prvSwitchTimerLists+0xc0>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3304      	adds	r3, #4
 80044a2:	4619      	mov	r1, r3
 80044a4:	4610      	mov	r0, r2
 80044a6:	f7fd ff14 	bl	80022d2 <vListInsert>
 80044aa:	e016      	b.n	80044da <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044ac:	2300      	movs	r3, #0
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	2300      	movs	r3, #0
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	2100      	movs	r1, #0
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f7ff fd7c 	bl	8003fb4 <xTimerGenericCommand>
 80044bc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10a      	bne.n	80044da <prvSwitchTimerLists+0x9a>
        __asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	603b      	str	r3, [r7, #0]
    }
 80044d6:	bf00      	nop
 80044d8:	e7fe      	b.n	80044d8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044da:	4b09      	ldr	r3, [pc, #36]	; (8004500 <prvSwitchTimerLists+0xc0>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1b1      	bne.n	8004448 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80044e4:	4b06      	ldr	r3, [pc, #24]	; (8004500 <prvSwitchTimerLists+0xc0>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80044ea:	4b06      	ldr	r3, [pc, #24]	; (8004504 <prvSwitchTimerLists+0xc4>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a04      	ldr	r2, [pc, #16]	; (8004500 <prvSwitchTimerLists+0xc0>)
 80044f0:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80044f2:	4a04      	ldr	r2, [pc, #16]	; (8004504 <prvSwitchTimerLists+0xc4>)
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	6013      	str	r3, [r2, #0]
    }
 80044f8:	bf00      	nop
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	200001f4 	.word	0x200001f4
 8004504:	200001f8 	.word	0x200001f8

08004508 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800450c:	f000 f964 	bl	80047d8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004510:	4b12      	ldr	r3, [pc, #72]	; (800455c <prvCheckForValidListAndQueue+0x54>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d11d      	bne.n	8004554 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004518:	4811      	ldr	r0, [pc, #68]	; (8004560 <prvCheckForValidListAndQueue+0x58>)
 800451a:	f7fd fe89 	bl	8002230 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800451e:	4811      	ldr	r0, [pc, #68]	; (8004564 <prvCheckForValidListAndQueue+0x5c>)
 8004520:	f7fd fe86 	bl	8002230 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004524:	4b10      	ldr	r3, [pc, #64]	; (8004568 <prvCheckForValidListAndQueue+0x60>)
 8004526:	4a0e      	ldr	r2, [pc, #56]	; (8004560 <prvCheckForValidListAndQueue+0x58>)
 8004528:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800452a:	4b10      	ldr	r3, [pc, #64]	; (800456c <prvCheckForValidListAndQueue+0x64>)
 800452c:	4a0d      	ldr	r2, [pc, #52]	; (8004564 <prvCheckForValidListAndQueue+0x5c>)
 800452e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004530:	2200      	movs	r2, #0
 8004532:	210c      	movs	r1, #12
 8004534:	200a      	movs	r0, #10
 8004536:	f7fd ff97 	bl	8002468 <xQueueGenericCreate>
 800453a:	4603      	mov	r3, r0
 800453c:	4a07      	ldr	r2, [pc, #28]	; (800455c <prvCheckForValidListAndQueue+0x54>)
 800453e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004540:	4b06      	ldr	r3, [pc, #24]	; (800455c <prvCheckForValidListAndQueue+0x54>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004548:	4b04      	ldr	r3, [pc, #16]	; (800455c <prvCheckForValidListAndQueue+0x54>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4908      	ldr	r1, [pc, #32]	; (8004570 <prvCheckForValidListAndQueue+0x68>)
 800454e:	4618      	mov	r0, r3
 8004550:	f7fe fc16 	bl	8002d80 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004554:	f000 f970 	bl	8004838 <vPortExitCritical>
    }
 8004558:	bf00      	nop
 800455a:	bd80      	pop	{r7, pc}
 800455c:	200001fc 	.word	0x200001fc
 8004560:	200001cc 	.word	0x200001cc
 8004564:	200001e0 	.word	0x200001e0
 8004568:	200001f4 	.word	0x200001f4
 800456c:	200001f8 	.word	0x200001f8
 8004570:	0800787c 	.word	0x0800787c

08004574 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	3b04      	subs	r3, #4
 8004584:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800458c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	3b04      	subs	r3, #4
 8004592:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f023 0201 	bic.w	r2, r3, #1
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	3b04      	subs	r3, #4
 80045a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80045a4:	4a0c      	ldr	r2, [pc, #48]	; (80045d8 <pxPortInitialiseStack+0x64>)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	3b14      	subs	r3, #20
 80045ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	3b04      	subs	r3, #4
 80045ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f06f 0202 	mvn.w	r2, #2
 80045c2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3b20      	subs	r3, #32
 80045c8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80045ca:	68fb      	ldr	r3, [r7, #12]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	080045dd 	.word	0x080045dd

080045dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80045e2:	2300      	movs	r3, #0
 80045e4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80045e6:	4b12      	ldr	r3, [pc, #72]	; (8004630 <prvTaskExitError+0x54>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	d00a      	beq.n	8004606 <prvTaskExitError+0x2a>
        __asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	60fb      	str	r3, [r7, #12]
    }
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <prvTaskExitError+0x28>
        __asm volatile
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	60bb      	str	r3, [r7, #8]
    }
 8004618:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800461a:	bf00      	nop
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0fc      	beq.n	800461c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004622:	bf00      	nop
 8004624:	bf00      	nop
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	20000010 	.word	0x20000010
	...

08004640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004640:	4b07      	ldr	r3, [pc, #28]	; (8004660 <pxCurrentTCBConst2>)
 8004642:	6819      	ldr	r1, [r3, #0]
 8004644:	6808      	ldr	r0, [r1, #0]
 8004646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800464a:	f380 8809 	msr	PSP, r0
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f04f 0000 	mov.w	r0, #0
 8004656:	f380 8811 	msr	BASEPRI, r0
 800465a:	4770      	bx	lr
 800465c:	f3af 8000 	nop.w

08004660 <pxCurrentTCBConst2>:
 8004660:	200000c8 	.word	0x200000c8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004664:	bf00      	nop
 8004666:	bf00      	nop

08004668 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004668:	4808      	ldr	r0, [pc, #32]	; (800468c <prvPortStartFirstTask+0x24>)
 800466a:	6800      	ldr	r0, [r0, #0]
 800466c:	6800      	ldr	r0, [r0, #0]
 800466e:	f380 8808 	msr	MSP, r0
 8004672:	f04f 0000 	mov.w	r0, #0
 8004676:	f380 8814 	msr	CONTROL, r0
 800467a:	b662      	cpsie	i
 800467c:	b661      	cpsie	f
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	df00      	svc	0
 8004688:	bf00      	nop
 800468a:	0000      	.short	0x0000
 800468c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004690:	bf00      	nop
 8004692:	bf00      	nop

08004694 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800469a:	4b46      	ldr	r3, [pc, #280]	; (80047b4 <xPortStartScheduler+0x120>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a46      	ldr	r2, [pc, #280]	; (80047b8 <xPortStartScheduler+0x124>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d10a      	bne.n	80046ba <xPortStartScheduler+0x26>
        __asm volatile
 80046a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a8:	f383 8811 	msr	BASEPRI, r3
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	613b      	str	r3, [r7, #16]
    }
 80046b6:	bf00      	nop
 80046b8:	e7fe      	b.n	80046b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046ba:	4b3e      	ldr	r3, [pc, #248]	; (80047b4 <xPortStartScheduler+0x120>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a3f      	ldr	r2, [pc, #252]	; (80047bc <xPortStartScheduler+0x128>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d10a      	bne.n	80046da <xPortStartScheduler+0x46>
        __asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	60fb      	str	r3, [r7, #12]
    }
 80046d6:	bf00      	nop
 80046d8:	e7fe      	b.n	80046d8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046da:	4b39      	ldr	r3, [pc, #228]	; (80047c0 <xPortStartScheduler+0x12c>)
 80046dc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	22ff      	movs	r2, #255	; 0xff
 80046ea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046f4:	78fb      	ldrb	r3, [r7, #3]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	4b31      	ldr	r3, [pc, #196]	; (80047c4 <xPortStartScheduler+0x130>)
 8004700:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004702:	4b31      	ldr	r3, [pc, #196]	; (80047c8 <xPortStartScheduler+0x134>)
 8004704:	2207      	movs	r2, #7
 8004706:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004708:	e009      	b.n	800471e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800470a:	4b2f      	ldr	r3, [pc, #188]	; (80047c8 <xPortStartScheduler+0x134>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3b01      	subs	r3, #1
 8004710:	4a2d      	ldr	r2, [pc, #180]	; (80047c8 <xPortStartScheduler+0x134>)
 8004712:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	b2db      	uxtb	r3, r3
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	b2db      	uxtb	r3, r3
 800471c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800471e:	78fb      	ldrb	r3, [r7, #3]
 8004720:	b2db      	uxtb	r3, r3
 8004722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004726:	2b80      	cmp	r3, #128	; 0x80
 8004728:	d0ef      	beq.n	800470a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800472a:	4b27      	ldr	r3, [pc, #156]	; (80047c8 <xPortStartScheduler+0x134>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f1c3 0307 	rsb	r3, r3, #7
 8004732:	2b04      	cmp	r3, #4
 8004734:	d00a      	beq.n	800474c <xPortStartScheduler+0xb8>
        __asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	60bb      	str	r3, [r7, #8]
    }
 8004748:	bf00      	nop
 800474a:	e7fe      	b.n	800474a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800474c:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <xPortStartScheduler+0x134>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	021b      	lsls	r3, r3, #8
 8004752:	4a1d      	ldr	r2, [pc, #116]	; (80047c8 <xPortStartScheduler+0x134>)
 8004754:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004756:	4b1c      	ldr	r3, [pc, #112]	; (80047c8 <xPortStartScheduler+0x134>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800475e:	4a1a      	ldr	r2, [pc, #104]	; (80047c8 <xPortStartScheduler+0x134>)
 8004760:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	b2da      	uxtb	r2, r3
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800476a:	4b18      	ldr	r3, [pc, #96]	; (80047cc <xPortStartScheduler+0x138>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a17      	ldr	r2, [pc, #92]	; (80047cc <xPortStartScheduler+0x138>)
 8004770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004774:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004776:	4b15      	ldr	r3, [pc, #84]	; (80047cc <xPortStartScheduler+0x138>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a14      	ldr	r2, [pc, #80]	; (80047cc <xPortStartScheduler+0x138>)
 800477c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004780:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004782:	f000 f8e3 	bl	800494c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004786:	4b12      	ldr	r3, [pc, #72]	; (80047d0 <xPortStartScheduler+0x13c>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800478c:	f000 f902 	bl	8004994 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004790:	4b10      	ldr	r3, [pc, #64]	; (80047d4 <xPortStartScheduler+0x140>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a0f      	ldr	r2, [pc, #60]	; (80047d4 <xPortStartScheduler+0x140>)
 8004796:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800479a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800479c:	f7ff ff64 	bl	8004668 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80047a0:	f7ff f854 	bl	800384c <vTaskSwitchContext>
    prvTaskExitError();
 80047a4:	f7ff ff1a 	bl	80045dc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	e000ed00 	.word	0xe000ed00
 80047b8:	410fc271 	.word	0x410fc271
 80047bc:	410fc270 	.word	0x410fc270
 80047c0:	e000e400 	.word	0xe000e400
 80047c4:	20000208 	.word	0x20000208
 80047c8:	2000020c 	.word	0x2000020c
 80047cc:	e000ed20 	.word	0xe000ed20
 80047d0:	20000010 	.word	0x20000010
 80047d4:	e000ef34 	.word	0xe000ef34

080047d8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
        __asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	607b      	str	r3, [r7, #4]
    }
 80047f0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80047f2:	4b0f      	ldr	r3, [pc, #60]	; (8004830 <vPortEnterCritical+0x58>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3301      	adds	r3, #1
 80047f8:	4a0d      	ldr	r2, [pc, #52]	; (8004830 <vPortEnterCritical+0x58>)
 80047fa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80047fc:	4b0c      	ldr	r3, [pc, #48]	; (8004830 <vPortEnterCritical+0x58>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d10f      	bne.n	8004824 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004804:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <vPortEnterCritical+0x5c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <vPortEnterCritical+0x4c>
        __asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	603b      	str	r3, [r7, #0]
    }
 8004820:	bf00      	nop
 8004822:	e7fe      	b.n	8004822 <vPortEnterCritical+0x4a>
    }
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	20000010 	.word	0x20000010
 8004834:	e000ed04 	.word	0xe000ed04

08004838 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800483e:	4b12      	ldr	r3, [pc, #72]	; (8004888 <vPortExitCritical+0x50>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10a      	bne.n	800485c <vPortExitCritical+0x24>
        __asm volatile
 8004846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	607b      	str	r3, [r7, #4]
    }
 8004858:	bf00      	nop
 800485a:	e7fe      	b.n	800485a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800485c:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <vPortExitCritical+0x50>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3b01      	subs	r3, #1
 8004862:	4a09      	ldr	r2, [pc, #36]	; (8004888 <vPortExitCritical+0x50>)
 8004864:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004866:	4b08      	ldr	r3, [pc, #32]	; (8004888 <vPortExitCritical+0x50>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d105      	bne.n	800487a <vPortExitCritical+0x42>
 800486e:	2300      	movs	r3, #0
 8004870:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	f383 8811 	msr	BASEPRI, r3
    }
 8004878:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	20000010 	.word	0x20000010
 800488c:	00000000 	.word	0x00000000

08004890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004890:	f3ef 8009 	mrs	r0, PSP
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	4b15      	ldr	r3, [pc, #84]	; (80048f0 <pxCurrentTCBConst>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	f01e 0f10 	tst.w	lr, #16
 80048a0:	bf08      	it	eq
 80048a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048aa:	6010      	str	r0, [r2, #0]
 80048ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048b4:	f380 8811 	msr	BASEPRI, r0
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f7fe ffc4 	bl	800384c <vTaskSwitchContext>
 80048c4:	f04f 0000 	mov.w	r0, #0
 80048c8:	f380 8811 	msr	BASEPRI, r0
 80048cc:	bc09      	pop	{r0, r3}
 80048ce:	6819      	ldr	r1, [r3, #0]
 80048d0:	6808      	ldr	r0, [r1, #0]
 80048d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d6:	f01e 0f10 	tst.w	lr, #16
 80048da:	bf08      	it	eq
 80048dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048e0:	f380 8809 	msr	PSP, r0
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	f3af 8000 	nop.w

080048f0 <pxCurrentTCBConst>:
 80048f0:	200000c8 	.word	0x200000c8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80048f4:	bf00      	nop
 80048f6:	bf00      	nop

080048f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
        __asm volatile
 80048fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	607b      	str	r3, [r7, #4]
    }
 8004910:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004912:	f002 fbf3 	bl	80070fc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004916:	f7fe fedd 	bl	80036d4 <xTaskIncrementTick>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d006      	beq.n	800492e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004920:	f002 fc4a 	bl	80071b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004924:	4b08      	ldr	r3, [pc, #32]	; (8004948 <SysTick_Handler+0x50>)
 8004926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	e001      	b.n	8004932 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800492e:	f002 fc27 	bl	8007180 <SEGGER_SYSVIEW_RecordExitISR>
 8004932:	2300      	movs	r3, #0
 8004934:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	f383 8811 	msr	BASEPRI, r3
    }
 800493c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800493e:	bf00      	nop
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	e000ed04 	.word	0xe000ed04

0800494c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004950:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <vPortSetupTimerInterrupt+0x34>)
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004956:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <vPortSetupTimerInterrupt+0x38>)
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800495c:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <vPortSetupTimerInterrupt+0x3c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a0a      	ldr	r2, [pc, #40]	; (800498c <vPortSetupTimerInterrupt+0x40>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	099b      	lsrs	r3, r3, #6
 8004968:	4a09      	ldr	r2, [pc, #36]	; (8004990 <vPortSetupTimerInterrupt+0x44>)
 800496a:	3b01      	subs	r3, #1
 800496c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800496e:	4b04      	ldr	r3, [pc, #16]	; (8004980 <vPortSetupTimerInterrupt+0x34>)
 8004970:	2207      	movs	r2, #7
 8004972:	601a      	str	r2, [r3, #0]
}
 8004974:	bf00      	nop
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	e000e010 	.word	0xe000e010
 8004984:	e000e018 	.word	0xe000e018
 8004988:	20000000 	.word	0x20000000
 800498c:	10624dd3 	.word	0x10624dd3
 8004990:	e000e014 	.word	0xe000e014

08004994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80049a4 <vPortEnableVFP+0x10>
 8004998:	6801      	ldr	r1, [r0, #0]
 800499a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800499e:	6001      	str	r1, [r0, #0]
 80049a0:	4770      	bx	lr
 80049a2:	0000      	.short	0x0000
 80049a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80049a8:	bf00      	nop
 80049aa:	bf00      	nop

080049ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80049b2:	f3ef 8305 	mrs	r3, IPSR
 80049b6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b0f      	cmp	r3, #15
 80049bc:	d914      	bls.n	80049e8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049be:	4a17      	ldr	r2, [pc, #92]	; (8004a1c <vPortValidateInterruptPriority+0x70>)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049c8:	4b15      	ldr	r3, [pc, #84]	; (8004a20 <vPortValidateInterruptPriority+0x74>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	7afa      	ldrb	r2, [r7, #11]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d20a      	bcs.n	80049e8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	607b      	str	r3, [r7, #4]
    }
 80049e4:	bf00      	nop
 80049e6:	e7fe      	b.n	80049e6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049e8:	4b0e      	ldr	r3, [pc, #56]	; (8004a24 <vPortValidateInterruptPriority+0x78>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049f0:	4b0d      	ldr	r3, [pc, #52]	; (8004a28 <vPortValidateInterruptPriority+0x7c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d90a      	bls.n	8004a0e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	603b      	str	r3, [r7, #0]
    }
 8004a0a:	bf00      	nop
 8004a0c:	e7fe      	b.n	8004a0c <vPortValidateInterruptPriority+0x60>
    }
 8004a0e:	bf00      	nop
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	e000e3f0 	.word	0xe000e3f0
 8004a20:	20000208 	.word	0x20000208
 8004a24:	e000ed0c 	.word	0xe000ed0c
 8004a28:	2000020c 	.word	0x2000020c

08004a2c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08a      	sub	sp, #40	; 0x28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004a38:	f7fe fca8 	bl	800338c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004a3c:	4b65      	ldr	r3, [pc, #404]	; (8004bd4 <pvPortMalloc+0x1a8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004a44:	f000 f934 	bl	8004cb0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a48:	4b63      	ldr	r3, [pc, #396]	; (8004bd8 <pvPortMalloc+0x1ac>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f040 80a7 	bne.w	8004ba4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d02d      	beq.n	8004ab8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004a5c:	2208      	movs	r2, #8
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d227      	bcs.n	8004ab8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004a68:	2208      	movs	r2, #8
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d021      	beq.n	8004abe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f023 0307 	bic.w	r3, r3, #7
 8004a80:	3308      	adds	r3, #8
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d214      	bcs.n	8004ab2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f023 0307 	bic.w	r3, r3, #7
 8004a8e:	3308      	adds	r3, #8
 8004a90:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d010      	beq.n	8004abe <pvPortMalloc+0x92>
        __asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	617b      	str	r3, [r7, #20]
    }
 8004aae:	bf00      	nop
 8004ab0:	e7fe      	b.n	8004ab0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ab6:	e002      	b.n	8004abe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	607b      	str	r3, [r7, #4]
 8004abc:	e000      	b.n	8004ac0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004abe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d06e      	beq.n	8004ba4 <pvPortMalloc+0x178>
 8004ac6:	4b45      	ldr	r3, [pc, #276]	; (8004bdc <pvPortMalloc+0x1b0>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d869      	bhi.n	8004ba4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004ad0:	4b43      	ldr	r3, [pc, #268]	; (8004be0 <pvPortMalloc+0x1b4>)
 8004ad2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004ad4:	4b42      	ldr	r3, [pc, #264]	; (8004be0 <pvPortMalloc+0x1b4>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ada:	e004      	b.n	8004ae6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d903      	bls.n	8004af8 <pvPortMalloc+0xcc>
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1f1      	bne.n	8004adc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004af8:	4b36      	ldr	r3, [pc, #216]	; (8004bd4 <pvPortMalloc+0x1a8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d050      	beq.n	8004ba4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2208      	movs	r2, #8
 8004b08:	4413      	add	r3, r2
 8004b0a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	1ad2      	subs	r2, r2, r3
 8004b1c:	2308      	movs	r3, #8
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d91f      	bls.n	8004b64 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4413      	add	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <pvPortMalloc+0x120>
        __asm volatile
 8004b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3a:	f383 8811 	msr	BASEPRI, r3
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	f3bf 8f4f 	dsb	sy
 8004b46:	613b      	str	r3, [r7, #16]
    }
 8004b48:	bf00      	nop
 8004b4a:	e7fe      	b.n	8004b4a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	1ad2      	subs	r2, r2, r3
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b5e:	69b8      	ldr	r0, [r7, #24]
 8004b60:	f000 f908 	bl	8004d74 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b64:	4b1d      	ldr	r3, [pc, #116]	; (8004bdc <pvPortMalloc+0x1b0>)
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	4a1b      	ldr	r2, [pc, #108]	; (8004bdc <pvPortMalloc+0x1b0>)
 8004b70:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b72:	4b1a      	ldr	r3, [pc, #104]	; (8004bdc <pvPortMalloc+0x1b0>)
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4b1b      	ldr	r3, [pc, #108]	; (8004be4 <pvPortMalloc+0x1b8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d203      	bcs.n	8004b86 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b7e:	4b17      	ldr	r3, [pc, #92]	; (8004bdc <pvPortMalloc+0x1b0>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a18      	ldr	r2, [pc, #96]	; (8004be4 <pvPortMalloc+0x1b8>)
 8004b84:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	4b13      	ldr	r3, [pc, #76]	; (8004bd8 <pvPortMalloc+0x1ac>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004b9a:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <pvPortMalloc+0x1bc>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	4a11      	ldr	r2, [pc, #68]	; (8004be8 <pvPortMalloc+0x1bc>)
 8004ba2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004ba4:	f7fe fc00 	bl	80033a8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <pvPortMalloc+0x19c>
        __asm volatile
 8004bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	60fb      	str	r3, [r7, #12]
    }
 8004bc4:	bf00      	nop
 8004bc6:	e7fe      	b.n	8004bc6 <pvPortMalloc+0x19a>
    return pvReturn;
 8004bc8:	69fb      	ldr	r3, [r7, #28]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3728      	adds	r7, #40	; 0x28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20012e18 	.word	0x20012e18
 8004bd8:	20012e2c 	.word	0x20012e2c
 8004bdc:	20012e1c 	.word	0x20012e1c
 8004be0:	20012e10 	.word	0x20012e10
 8004be4:	20012e20 	.word	0x20012e20
 8004be8:	20012e24 	.word	0x20012e24

08004bec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d04d      	beq.n	8004c9a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004bfe:	2308      	movs	r3, #8
 8004c00:	425b      	negs	r3, r3
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4413      	add	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	4b24      	ldr	r3, [pc, #144]	; (8004ca4 <vPortFree+0xb8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4013      	ands	r3, r2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10a      	bne.n	8004c30 <vPortFree+0x44>
        __asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	60fb      	str	r3, [r7, #12]
    }
 8004c2c:	bf00      	nop
 8004c2e:	e7fe      	b.n	8004c2e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00a      	beq.n	8004c4e <vPortFree+0x62>
        __asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	60bb      	str	r3, [r7, #8]
    }
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	4b14      	ldr	r3, [pc, #80]	; (8004ca4 <vPortFree+0xb8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4013      	ands	r3, r2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01e      	beq.n	8004c9a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d11a      	bne.n	8004c9a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	4b0e      	ldr	r3, [pc, #56]	; (8004ca4 <vPortFree+0xb8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	43db      	mvns	r3, r3
 8004c6e:	401a      	ands	r2, r3
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004c74:	f7fe fb8a 	bl	800338c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ca8 <vPortFree+0xbc>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4413      	add	r3, r2
 8004c82:	4a09      	ldr	r2, [pc, #36]	; (8004ca8 <vPortFree+0xbc>)
 8004c84:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c86:	6938      	ldr	r0, [r7, #16]
 8004c88:	f000 f874 	bl	8004d74 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004c8c:	4b07      	ldr	r3, [pc, #28]	; (8004cac <vPortFree+0xc0>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3301      	adds	r3, #1
 8004c92:	4a06      	ldr	r2, [pc, #24]	; (8004cac <vPortFree+0xc0>)
 8004c94:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004c96:	f7fe fb87 	bl	80033a8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004c9a:	bf00      	nop
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20012e2c 	.word	0x20012e2c
 8004ca8:	20012e1c 	.word	0x20012e1c
 8004cac:	20012e28 	.word	0x20012e28

08004cb0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cb6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004cba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004cbc:	4b27      	ldr	r3, [pc, #156]	; (8004d5c <prvHeapInit+0xac>)
 8004cbe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00c      	beq.n	8004ce4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	3307      	adds	r3, #7
 8004cce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0307 	bic.w	r3, r3, #7
 8004cd6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	4a1f      	ldr	r2, [pc, #124]	; (8004d5c <prvHeapInit+0xac>)
 8004ce0:	4413      	add	r3, r2
 8004ce2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ce8:	4a1d      	ldr	r2, [pc, #116]	; (8004d60 <prvHeapInit+0xb0>)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004cee:	4b1c      	ldr	r3, [pc, #112]	; (8004d60 <prvHeapInit+0xb0>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004cfc:	2208      	movs	r2, #8
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	1a9b      	subs	r3, r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0307 	bic.w	r3, r3, #7
 8004d0a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4a15      	ldr	r2, [pc, #84]	; (8004d64 <prvHeapInit+0xb4>)
 8004d10:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004d12:	4b14      	ldr	r3, [pc, #80]	; (8004d64 <prvHeapInit+0xb4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2200      	movs	r2, #0
 8004d18:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004d1a:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <prvHeapInit+0xb4>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	1ad2      	subs	r2, r2, r3
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d30:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <prvHeapInit+0xb4>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4a0a      	ldr	r2, [pc, #40]	; (8004d68 <prvHeapInit+0xb8>)
 8004d3e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	4a09      	ldr	r2, [pc, #36]	; (8004d6c <prvHeapInit+0xbc>)
 8004d46:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d48:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <prvHeapInit+0xc0>)
 8004d4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d4e:	601a      	str	r2, [r3, #0]
}
 8004d50:	bf00      	nop
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	20000210 	.word	0x20000210
 8004d60:	20012e10 	.word	0x20012e10
 8004d64:	20012e18 	.word	0x20012e18
 8004d68:	20012e20 	.word	0x20012e20
 8004d6c:	20012e1c 	.word	0x20012e1c
 8004d70:	20012e2c 	.word	0x20012e2c

08004d74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d7c:	4b28      	ldr	r3, [pc, #160]	; (8004e20 <prvInsertBlockIntoFreeList+0xac>)
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	e002      	b.n	8004d88 <prvInsertBlockIntoFreeList+0x14>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d8f7      	bhi.n	8004d82 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d108      	bne.n	8004db6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	441a      	add	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	441a      	add	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d118      	bne.n	8004dfc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	4b15      	ldr	r3, [pc, #84]	; (8004e24 <prvInsertBlockIntoFreeList+0xb0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d00d      	beq.n	8004df2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	441a      	add	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	e008      	b.n	8004e04 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004df2:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <prvInsertBlockIntoFreeList+0xb0>)
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	e003      	b.n	8004e04 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d002      	beq.n	8004e12 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004e12:	bf00      	nop
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	20012e10 	.word	0x20012e10
 8004e24:	20012e18 	.word	0x20012e18

08004e28 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004e2c:	4803      	ldr	r0, [pc, #12]	; (8004e3c <_cbSendSystemDesc+0x14>)
 8004e2e:	f002 f90f 	bl	8007050 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004e32:	4803      	ldr	r0, [pc, #12]	; (8004e40 <_cbSendSystemDesc+0x18>)
 8004e34:	f002 f90c 	bl	8007050 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004e38:	bf00      	nop
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	08007884 	.word	0x08007884
 8004e40:	080078c8 	.word	0x080078c8

08004e44 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004e48:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <SEGGER_SYSVIEW_Conf+0x20>)
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <SEGGER_SYSVIEW_Conf+0x20>)
 8004e4e:	6819      	ldr	r1, [r3, #0]
 8004e50:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <SEGGER_SYSVIEW_Conf+0x24>)
 8004e52:	4a06      	ldr	r2, [pc, #24]	; (8004e6c <SEGGER_SYSVIEW_Conf+0x28>)
 8004e54:	f001 fc78 	bl	8006748 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004e58:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004e5c:	f001 fcb8 	bl	80067d0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004e60:	bf00      	nop
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20000000 	.word	0x20000000
 8004e68:	08004e29 	.word	0x08004e29
 8004e6c:	08007968 	.word	0x08007968

08004e70 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004e76:	2300      	movs	r3, #0
 8004e78:	607b      	str	r3, [r7, #4]
 8004e7a:	e033      	b.n	8004ee4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004e7c:	491e      	ldr	r1, [pc, #120]	; (8004ef8 <_cbSendTaskList+0x88>)
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	4613      	mov	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	440b      	add	r3, r1
 8004e8a:	6818      	ldr	r0, [r3, #0]
 8004e8c:	491a      	ldr	r1, [pc, #104]	; (8004ef8 <_cbSendTaskList+0x88>)
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	6819      	ldr	r1, [r3, #0]
 8004e9e:	4c16      	ldr	r4, [pc, #88]	; (8004ef8 <_cbSendTaskList+0x88>)
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4423      	add	r3, r4
 8004eac:	3308      	adds	r3, #8
 8004eae:	681c      	ldr	r4, [r3, #0]
 8004eb0:	4d11      	ldr	r5, [pc, #68]	; (8004ef8 <_cbSendTaskList+0x88>)
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	442b      	add	r3, r5
 8004ebe:	330c      	adds	r3, #12
 8004ec0:	681d      	ldr	r5, [r3, #0]
 8004ec2:	4e0d      	ldr	r6, [pc, #52]	; (8004ef8 <_cbSendTaskList+0x88>)
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4433      	add	r3, r6
 8004ed0:	3310      	adds	r3, #16
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	462b      	mov	r3, r5
 8004ed8:	4622      	mov	r2, r4
 8004eda:	f000 f92d 	bl	8005138 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	607b      	str	r3, [r7, #4]
 8004ee4:	4b05      	ldr	r3, [pc, #20]	; (8004efc <_cbSendTaskList+0x8c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d3c6      	bcc.n	8004e7c <_cbSendTaskList+0xc>
  }
}
 8004eee:	bf00      	nop
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ef8:	20012e30 	.word	0x20012e30
 8004efc:	20012ed0 	.word	0x20012ed0

08004f00 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f04:	b082      	sub	sp, #8
 8004f06:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004f08:	f7fe fafe 	bl	8003508 <xTaskGetTickCountFromISR>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2200      	movs	r2, #0
 8004f10:	469a      	mov	sl, r3
 8004f12:	4693      	mov	fp, r2
 8004f14:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004f18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	f04f 0a00 	mov.w	sl, #0
 8004f24:	f04f 0b00 	mov.w	fp, #0
 8004f28:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004f2c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004f30:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004f34:	4652      	mov	r2, sl
 8004f36:	465b      	mov	r3, fp
 8004f38:	1a14      	subs	r4, r2, r0
 8004f3a:	eb63 0501 	sbc.w	r5, r3, r1
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	00ab      	lsls	r3, r5, #2
 8004f48:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004f4c:	00a2      	lsls	r2, r4, #2
 8004f4e:	4614      	mov	r4, r2
 8004f50:	461d      	mov	r5, r3
 8004f52:	eb14 0800 	adds.w	r8, r4, r0
 8004f56:	eb45 0901 	adc.w	r9, r5, r1
 8004f5a:	f04f 0200 	mov.w	r2, #0
 8004f5e:	f04f 0300 	mov.w	r3, #0
 8004f62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f6e:	4690      	mov	r8, r2
 8004f70:	4699      	mov	r9, r3
 8004f72:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004f76:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004f88 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af02      	add	r7, sp, #8
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004f96:	2205      	movs	r2, #5
 8004f98:	492b      	ldr	r1, [pc, #172]	; (8005048 <SYSVIEW_AddTask+0xc0>)
 8004f9a:	68b8      	ldr	r0, [r7, #8]
 8004f9c:	f002 fbf4 	bl	8007788 <memcmp>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d04b      	beq.n	800503e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004fa6:	4b29      	ldr	r3, [pc, #164]	; (800504c <SYSVIEW_AddTask+0xc4>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b07      	cmp	r3, #7
 8004fac:	d903      	bls.n	8004fb6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004fae:	4828      	ldr	r0, [pc, #160]	; (8005050 <SYSVIEW_AddTask+0xc8>)
 8004fb0:	f002 fb60 	bl	8007674 <SEGGER_SYSVIEW_Warn>
    return;
 8004fb4:	e044      	b.n	8005040 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004fb6:	4b25      	ldr	r3, [pc, #148]	; (800504c <SYSVIEW_AddTask+0xc4>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4926      	ldr	r1, [pc, #152]	; (8005054 <SYSVIEW_AddTask+0xcc>)
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	440b      	add	r3, r1
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004fca:	4b20      	ldr	r3, [pc, #128]	; (800504c <SYSVIEW_AddTask+0xc4>)
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	4921      	ldr	r1, [pc, #132]	; (8005054 <SYSVIEW_AddTask+0xcc>)
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	3304      	adds	r3, #4
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004fe0:	4b1a      	ldr	r3, [pc, #104]	; (800504c <SYSVIEW_AddTask+0xc4>)
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	491b      	ldr	r1, [pc, #108]	; (8005054 <SYSVIEW_AddTask+0xcc>)
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	440b      	add	r3, r1
 8004ff0:	3308      	adds	r3, #8
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004ff6:	4b15      	ldr	r3, [pc, #84]	; (800504c <SYSVIEW_AddTask+0xc4>)
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	4916      	ldr	r1, [pc, #88]	; (8005054 <SYSVIEW_AddTask+0xcc>)
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	440b      	add	r3, r1
 8005006:	330c      	adds	r3, #12
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800500c:	4b0f      	ldr	r3, [pc, #60]	; (800504c <SYSVIEW_AddTask+0xc4>)
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	4910      	ldr	r1, [pc, #64]	; (8005054 <SYSVIEW_AddTask+0xcc>)
 8005012:	4613      	mov	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	440b      	add	r3, r1
 800501c:	3310      	adds	r3, #16
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005022:	4b0a      	ldr	r3, [pc, #40]	; (800504c <SYSVIEW_AddTask+0xc4>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3301      	adds	r3, #1
 8005028:	4a08      	ldr	r2, [pc, #32]	; (800504c <SYSVIEW_AddTask+0xc4>)
 800502a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	68b9      	ldr	r1, [r7, #8]
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 f87e 	bl	8005138 <SYSVIEW_SendTaskInfo>
 800503c:	e000      	b.n	8005040 <SYSVIEW_AddTask+0xb8>
    return;
 800503e:	bf00      	nop

}
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	080078d8 	.word	0x080078d8
 800504c:	20012ed0 	.word	0x20012ed0
 8005050:	080078e0 	.word	0x080078e0
 8005054:	20012e30 	.word	0x20012e30

08005058 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8005058:	b580      	push	{r7, lr}
 800505a:	b088      	sub	sp, #32
 800505c:	af02      	add	r7, sp, #8
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
 8005064:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005066:	2205      	movs	r2, #5
 8005068:	4930      	ldr	r1, [pc, #192]	; (800512c <SYSVIEW_UpdateTask+0xd4>)
 800506a:	68b8      	ldr	r0, [r7, #8]
 800506c:	f002 fb8c 	bl	8007788 <memcmp>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d056      	beq.n	8005124 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	e00d      	b.n	8005098 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 800507c:	492c      	ldr	r1, [pc, #176]	; (8005130 <SYSVIEW_UpdateTask+0xd8>)
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4613      	mov	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	440b      	add	r3, r1
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	429a      	cmp	r2, r3
 8005090:	d008      	beq.n	80050a4 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	3301      	adds	r3, #1
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	4b26      	ldr	r3, [pc, #152]	; (8005134 <SYSVIEW_UpdateTask+0xdc>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d3ec      	bcc.n	800507c <SYSVIEW_UpdateTask+0x24>
 80050a2:	e000      	b.n	80050a6 <SYSVIEW_UpdateTask+0x4e>
      break;
 80050a4:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 80050a6:	4b23      	ldr	r3, [pc, #140]	; (8005134 <SYSVIEW_UpdateTask+0xdc>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d230      	bcs.n	8005112 <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 80050b0:	491f      	ldr	r1, [pc, #124]	; (8005130 <SYSVIEW_UpdateTask+0xd8>)
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	4613      	mov	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	440b      	add	r3, r1
 80050be:	3304      	adds	r3, #4
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 80050c4:	491a      	ldr	r1, [pc, #104]	; (8005130 <SYSVIEW_UpdateTask+0xd8>)
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	4613      	mov	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	440b      	add	r3, r1
 80050d2:	3308      	adds	r3, #8
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 80050d8:	4915      	ldr	r1, [pc, #84]	; (8005130 <SYSVIEW_UpdateTask+0xd8>)
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	4613      	mov	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	330c      	adds	r3, #12
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 80050ec:	4910      	ldr	r1, [pc, #64]	; (8005130 <SYSVIEW_UpdateTask+0xd8>)
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4613      	mov	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	440b      	add	r3, r1
 80050fa:	3310      	adds	r3, #16
 80050fc:	6a3a      	ldr	r2, [r7, #32]
 80050fe:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	68b9      	ldr	r1, [r7, #8]
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 f814 	bl	8005138 <SYSVIEW_SendTaskInfo>
 8005110:	e009      	b.n	8005126 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	68b9      	ldr	r1, [r7, #8]
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f7ff ff33 	bl	8004f88 <SYSVIEW_AddTask>
 8005122:	e000      	b.n	8005126 <SYSVIEW_UpdateTask+0xce>
    return;
 8005124:	bf00      	nop
  }
}
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	080078d8 	.word	0x080078d8
 8005130:	20012e30 	.word	0x20012e30
 8005134:	20012ed0 	.word	0x20012ed0

08005138 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005138:	b580      	push	{r7, lr}
 800513a:	b08a      	sub	sp, #40	; 0x28
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
 8005144:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005146:	f107 0314 	add.w	r3, r7, #20
 800514a:	2214      	movs	r2, #20
 800514c:	2100      	movs	r1, #0
 800514e:	4618      	mov	r0, r3
 8005150:	f002 fb2a 	bl	80077a8 <memset>
  TaskInfo.TaskID     = TaskID;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005168:	f107 0314 	add.w	r3, r7, #20
 800516c:	4618      	mov	r0, r3
 800516e:	f001 fe77 	bl	8006e60 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005172:	bf00      	nop
 8005174:	3728      	adds	r7, #40	; 0x28
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
	...

0800517c <__NVIC_EnableIRQ>:
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	4603      	mov	r3, r0
 8005184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800518a:	2b00      	cmp	r3, #0
 800518c:	db0b      	blt.n	80051a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800518e:	79fb      	ldrb	r3, [r7, #7]
 8005190:	f003 021f 	and.w	r2, r3, #31
 8005194:	4907      	ldr	r1, [pc, #28]	; (80051b4 <__NVIC_EnableIRQ+0x38>)
 8005196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800519a:	095b      	lsrs	r3, r3, #5
 800519c:	2001      	movs	r0, #1
 800519e:	fa00 f202 	lsl.w	r2, r0, r2
 80051a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	e000e100 	.word	0xe000e100

080051b8 <__NVIC_SetPriority>:
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	4603      	mov	r3, r0
 80051c0:	6039      	str	r1, [r7, #0]
 80051c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	db0a      	blt.n	80051e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	490c      	ldr	r1, [pc, #48]	; (8005204 <__NVIC_SetPriority+0x4c>)
 80051d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d6:	0112      	lsls	r2, r2, #4
 80051d8:	b2d2      	uxtb	r2, r2
 80051da:	440b      	add	r3, r1
 80051dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80051e0:	e00a      	b.n	80051f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	4908      	ldr	r1, [pc, #32]	; (8005208 <__NVIC_SetPriority+0x50>)
 80051e8:	79fb      	ldrb	r3, [r7, #7]
 80051ea:	f003 030f 	and.w	r3, r3, #15
 80051ee:	3b04      	subs	r3, #4
 80051f0:	0112      	lsls	r2, r2, #4
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	440b      	add	r3, r1
 80051f6:	761a      	strb	r2, [r3, #24]
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	e000e100 	.word	0xe000e100
 8005208:	e000ed00 	.word	0xe000ed00

0800520c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8005212:	f002 fa8b 	bl	800772c <SEGGER_SYSVIEW_IsStarted>
 8005216:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800521e:	f001 fca3 	bl	8006b68 <SEGGER_SYSVIEW_Start>
  }
}
 8005222:	bf00      	nop
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	4603      	mov	r3, r0
 8005234:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8005236:	4b0c      	ldr	r3, [pc, #48]	; (8005268 <_cbOnUARTRx+0x3c>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b03      	cmp	r3, #3
 800523c:	d806      	bhi.n	800524c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800523e:	4b0a      	ldr	r3, [pc, #40]	; (8005268 <_cbOnUARTRx+0x3c>)
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	3301      	adds	r3, #1
 8005244:	b2da      	uxtb	r2, r3
 8005246:	4b08      	ldr	r3, [pc, #32]	; (8005268 <_cbOnUARTRx+0x3c>)
 8005248:	701a      	strb	r2, [r3, #0]
    goto Done;
 800524a:	e009      	b.n	8005260 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800524c:	f7ff ffde 	bl	800520c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005250:	4b05      	ldr	r3, [pc, #20]	; (8005268 <_cbOnUARTRx+0x3c>)
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	4618      	mov	r0, r3
 8005256:	1dfb      	adds	r3, r7, #7
 8005258:	2201      	movs	r2, #1
 800525a:	4619      	mov	r1, r3
 800525c:	f000 fb9a 	bl	8005994 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005260:	bf00      	nop
}
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	20000014 	.word	0x20000014

0800526c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005274:	4b14      	ldr	r3, [pc, #80]	; (80052c8 <_cbOnUARTTx+0x5c>)
 8005276:	785b      	ldrb	r3, [r3, #1]
 8005278:	2b03      	cmp	r3, #3
 800527a:	d80f      	bhi.n	800529c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800527c:	4b12      	ldr	r3, [pc, #72]	; (80052c8 <_cbOnUARTTx+0x5c>)
 800527e:	785b      	ldrb	r3, [r3, #1]
 8005280:	461a      	mov	r2, r3
 8005282:	4b12      	ldr	r3, [pc, #72]	; (80052cc <_cbOnUARTTx+0x60>)
 8005284:	5c9a      	ldrb	r2, [r3, r2]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800528a:	4b0f      	ldr	r3, [pc, #60]	; (80052c8 <_cbOnUARTTx+0x5c>)
 800528c:	785b      	ldrb	r3, [r3, #1]
 800528e:	3301      	adds	r3, #1
 8005290:	b2da      	uxtb	r2, r3
 8005292:	4b0d      	ldr	r3, [pc, #52]	; (80052c8 <_cbOnUARTTx+0x5c>)
 8005294:	705a      	strb	r2, [r3, #1]
    r = 1;
 8005296:	2301      	movs	r3, #1
 8005298:	60fb      	str	r3, [r7, #12]
    goto Done;
 800529a:	e00f      	b.n	80052bc <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800529c:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <_cbOnUARTTx+0x5c>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 fa19 	bl	80056dc <SEGGER_RTT_ReadUpBufferNoLock>
 80052aa:	4603      	mov	r3, r0
 80052ac:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	da02      	bge.n	80052ba <_cbOnUARTTx+0x4e>
    r = 0;
 80052b4:	2300      	movs	r3, #0
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	e000      	b.n	80052bc <_cbOnUARTTx+0x50>
  }
Done:
 80052ba:	bf00      	nop
  return r;
 80052bc:	68fb      	ldr	r3, [r7, #12]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	20000014 	.word	0x20000014
 80052cc:	08007970 	.word	0x08007970

080052d0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80052d8:	4a04      	ldr	r2, [pc, #16]	; (80052ec <SEGGER_UART_init+0x1c>)
 80052da:	4905      	ldr	r1, [pc, #20]	; (80052f0 <SEGGER_UART_init+0x20>)
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f863 	bl	80053a8 <HIF_UART_Init>
}
 80052e2:	bf00      	nop
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	0800522d 	.word	0x0800522d
 80052f0:	0800526d 	.word	0x0800526d

080052f4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80052fa:	4b1e      	ldr	r3, [pc, #120]	; (8005374 <USART2_IRQHandler+0x80>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b00      	cmp	r3, #0
 8005308:	d011      	beq.n	800532e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800530a:	4b1b      	ldr	r3, [pc, #108]	; (8005378 <USART2_IRQHandler+0x84>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	b2db      	uxtb	r3, r3
 8005310:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f003 030b 	and.w	r3, r3, #11
 8005318:	2b00      	cmp	r3, #0
 800531a:	d108      	bne.n	800532e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800531c:	4b17      	ldr	r3, [pc, #92]	; (800537c <USART2_IRQHandler+0x88>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d004      	beq.n	800532e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005324:	4b15      	ldr	r3, [pc, #84]	; (800537c <USART2_IRQHandler+0x88>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	79fa      	ldrb	r2, [r7, #7]
 800532a:	4610      	mov	r0, r2
 800532c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005334:	2b00      	cmp	r3, #0
 8005336:	d01a      	beq.n	800536e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005338:	4b11      	ldr	r3, [pc, #68]	; (8005380 <USART2_IRQHandler+0x8c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d015      	beq.n	800536c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005340:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <USART2_IRQHandler+0x8c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	1dfa      	adds	r2, r7, #7
 8005346:	4610      	mov	r0, r2
 8005348:	4798      	blx	r3
 800534a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d106      	bne.n	8005360 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005352:	4b0c      	ldr	r3, [pc, #48]	; (8005384 <USART2_IRQHandler+0x90>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a0b      	ldr	r2, [pc, #44]	; (8005384 <USART2_IRQHandler+0x90>)
 8005358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	e006      	b.n	800536e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005360:	4b04      	ldr	r3, [pc, #16]	; (8005374 <USART2_IRQHandler+0x80>)
 8005362:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005364:	79fa      	ldrb	r2, [r7, #7]
 8005366:	4b04      	ldr	r3, [pc, #16]	; (8005378 <USART2_IRQHandler+0x84>)
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	e000      	b.n	800536e <USART2_IRQHandler+0x7a>
      return;
 800536c:	bf00      	nop
    }
  }
}
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40004400 	.word	0x40004400
 8005378:	40004404 	.word	0x40004404
 800537c:	20012ed4 	.word	0x20012ed4
 8005380:	20012ed8 	.word	0x20012ed8
 8005384:	4000440c 	.word	0x4000440c

08005388 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800538c:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a04      	ldr	r2, [pc, #16]	; (80053a4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005396:	6013      	str	r3, [r2, #0]
}
 8005398:	bf00      	nop
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	4000440c 	.word	0x4000440c

080053a8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80053b4:	4b2e      	ldr	r3, [pc, #184]	; (8005470 <HIF_UART_Init+0xc8>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a2d      	ldr	r2, [pc, #180]	; (8005470 <HIF_UART_Init+0xc8>)
 80053ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053be:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80053c0:	4b2c      	ldr	r3, [pc, #176]	; (8005474 <HIF_UART_Init+0xcc>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a2b      	ldr	r2, [pc, #172]	; (8005474 <HIF_UART_Init+0xcc>)
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80053cc:	4b2a      	ldr	r3, [pc, #168]	; (8005478 <HIF_UART_Init+0xd0>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053d8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80053e0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80053e2:	4a25      	ldr	r2, [pc, #148]	; (8005478 <HIF_UART_Init+0xd0>)
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80053e8:	4b24      	ldr	r3, [pc, #144]	; (800547c <HIF_UART_Init+0xd4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053f4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80053fc:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80053fe:	4a1f      	ldr	r2, [pc, #124]	; (800547c <HIF_UART_Init+0xd4>)
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005404:	4b1e      	ldr	r3, [pc, #120]	; (8005480 <HIF_UART_Init+0xd8>)
 8005406:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800540a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800540c:	4b1d      	ldr	r3, [pc, #116]	; (8005484 <HIF_UART_Init+0xdc>)
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005412:	4b1d      	ldr	r3, [pc, #116]	; (8005488 <HIF_UART_Init+0xe0>)
 8005414:	2280      	movs	r2, #128	; 0x80
 8005416:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800541e:	4a1b      	ldr	r2, [pc, #108]	; (800548c <HIF_UART_Init+0xe4>)
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	fbb2 f3f3 	udiv	r3, r2, r3
 8005426:	3301      	adds	r3, #1
 8005428:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	085b      	lsrs	r3, r3, #1
 800542e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005436:	d302      	bcc.n	800543e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005438:	f640 73ff 	movw	r3, #4095	; 0xfff
 800543c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d004      	beq.n	800544e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	011b      	lsls	r3, r3, #4
 8005448:	4a11      	ldr	r2, [pc, #68]	; (8005490 <HIF_UART_Init+0xe8>)
 800544a:	b29b      	uxth	r3, r3
 800544c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800544e:	4a11      	ldr	r2, [pc, #68]	; (8005494 <HIF_UART_Init+0xec>)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005454:	4a10      	ldr	r2, [pc, #64]	; (8005498 <HIF_UART_Init+0xf0>)
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800545a:	2106      	movs	r1, #6
 800545c:	2026      	movs	r0, #38	; 0x26
 800545e:	f7ff feab 	bl	80051b8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005462:	2026      	movs	r0, #38	; 0x26
 8005464:	f7ff fe8a 	bl	800517c <__NVIC_EnableIRQ>
}
 8005468:	bf00      	nop
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40023840 	.word	0x40023840
 8005474:	40023830 	.word	0x40023830
 8005478:	40020020 	.word	0x40020020
 800547c:	40020000 	.word	0x40020000
 8005480:	4000440c 	.word	0x4000440c
 8005484:	40004410 	.word	0x40004410
 8005488:	40004414 	.word	0x40004414
 800548c:	0501bd00 	.word	0x0501bd00
 8005490:	40004408 	.word	0x40004408
 8005494:	20012ed4 	.word	0x20012ed4
 8005498:	20012ed8 	.word	0x20012ed8

0800549c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80054a2:	4b24      	ldr	r3, [pc, #144]	; (8005534 <_DoInit+0x98>)
 80054a4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2203      	movs	r2, #3
 80054aa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2203      	movs	r2, #3
 80054b0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a20      	ldr	r2, [pc, #128]	; (8005538 <_DoInit+0x9c>)
 80054b6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a20      	ldr	r2, [pc, #128]	; (800553c <_DoInit+0xa0>)
 80054bc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054c4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a17      	ldr	r2, [pc, #92]	; (8005538 <_DoInit+0x9c>)
 80054dc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a17      	ldr	r2, [pc, #92]	; (8005540 <_DoInit+0xa4>)
 80054e2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2210      	movs	r2, #16
 80054e8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3307      	adds	r3, #7
 8005500:	4a10      	ldr	r2, [pc, #64]	; (8005544 <_DoInit+0xa8>)
 8005502:	6810      	ldr	r0, [r2, #0]
 8005504:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005506:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a0e      	ldr	r2, [pc, #56]	; (8005548 <_DoInit+0xac>)
 800550e:	6810      	ldr	r0, [r2, #0]
 8005510:	6018      	str	r0, [r3, #0]
 8005512:	8891      	ldrh	r1, [r2, #4]
 8005514:	7992      	ldrb	r2, [r2, #6]
 8005516:	8099      	strh	r1, [r3, #4]
 8005518:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800551a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2220      	movs	r2, #32
 8005522:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005524:	f3bf 8f5f 	dmb	sy
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	20012edc 	.word	0x20012edc
 8005538:	08007930 	.word	0x08007930
 800553c:	20012f84 	.word	0x20012f84
 8005540:	20013384 	.word	0x20013384
 8005544:	0800793c 	.word	0x0800793c
 8005548:	08007940 	.word	0x08007940

0800554c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	; 0x28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005558:	2300      	movs	r3, #0
 800555a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	429a      	cmp	r2, r3
 800556e:	d905      	bls.n	800557c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
 800557a:	e007      	b.n	800558c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	69b9      	ldr	r1, [r7, #24]
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	1acb      	subs	r3, r1, r3
 8005586:	4413      	add	r3, r2
 8005588:	3b01      	subs	r3, #1
 800558a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005596:	4293      	cmp	r3, r2
 8005598:	bf28      	it	cs
 800559a:	4613      	movcs	r3, r2
 800559c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800559e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4293      	cmp	r3, r2
 80055a4:	bf28      	it	cs
 80055a6:	4613      	movcs	r3, r2
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	4413      	add	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80055b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b6:	68b9      	ldr	r1, [r7, #8]
 80055b8:	6978      	ldr	r0, [r7, #20]
 80055ba:	f002 f921 	bl	8007800 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80055be:	6a3a      	ldr	r2, [r7, #32]
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	4413      	add	r3, r2
 80055c4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	4413      	add	r3, r2
 80055cc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80055d6:	69fa      	ldr	r2, [r7, #28]
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	4413      	add	r3, r2
 80055dc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d101      	bne.n	80055ec <_WriteBlocking+0xa0>
      WrOff = 0u;
 80055e8:	2300      	movs	r3, #0
 80055ea:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80055ec:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	69fa      	ldr	r2, [r7, #28]
 80055f4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1b2      	bne.n	8005562 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80055fc:	6a3b      	ldr	r3, [r7, #32]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3728      	adds	r7, #40	; 0x28
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005606:	b580      	push	{r7, lr}
 8005608:	b088      	sub	sp, #32
 800560a:	af00      	add	r7, sp, #0
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	429a      	cmp	r2, r3
 8005628:	d911      	bls.n	800564e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	4413      	add	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	6938      	ldr	r0, [r7, #16]
 800563a:	f002 f8e1 	bl	8007800 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800563e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005642:	69fa      	ldr	r2, [r7, #28]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	441a      	add	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800564c:	e01f      	b.n	800568e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	4413      	add	r3, r2
 800565a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	68b9      	ldr	r1, [r7, #8]
 8005660:	6938      	ldr	r0, [r7, #16]
 8005662:	f002 f8cd 	bl	8007800 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	4413      	add	r3, r2
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	4619      	mov	r1, r3
 800567e:	6938      	ldr	r0, [r7, #16]
 8005680:	f002 f8be 	bl	8007800 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005684:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	60da      	str	r2, [r3, #12]
}
 800568e:	bf00      	nop
 8005690:	3720      	adds	r7, #32
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005696:	b480      	push	{r7}
 8005698:	b087      	sub	sp, #28
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d808      	bhi.n	80056c4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	1ad2      	subs	r2, r2, r3
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	4413      	add	r3, r2
 80056be:	3b01      	subs	r3, #1
 80056c0:	617b      	str	r3, [r7, #20]
 80056c2:	e004      	b.n	80056ce <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	3b01      	subs	r3, #1
 80056cc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80056ce:	697b      	ldr	r3, [r7, #20]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	371c      	adds	r7, #28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08c      	sub	sp, #48	; 0x30
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80056e8:	4b3e      	ldr	r3, [pc, #248]	; (80057e4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80056ea:	623b      	str	r3, [r7, #32]
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80056f6:	f7ff fed1 	bl	800549c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	1c5a      	adds	r2, r3, #1
 80056fe:	4613      	mov	r3, r2
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	4413      	add	r3, r2
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	4a37      	ldr	r2, [pc, #220]	; (80057e4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005708:	4413      	add	r3, r2
 800570a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800571c:	2300      	movs	r3, #0
 800571e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	429a      	cmp	r2, r3
 8005726:	d92b      	bls.n	8005780 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	689a      	ldr	r2, [r3, #8]
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4293      	cmp	r3, r2
 8005738:	bf28      	it	cs
 800573a:	4613      	movcs	r3, r2
 800573c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005744:	4413      	add	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	6939      	ldr	r1, [r7, #16]
 800574c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800574e:	f002 f857 	bl	8007800 <memcpy>
    NumBytesRead += NumBytesRem;
 8005752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	4413      	add	r3, r2
 8005758:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800575a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	4413      	add	r3, r2
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800576a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	4413      	add	r3, r2
 8005770:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005778:	429a      	cmp	r2, r3
 800577a:	d101      	bne.n	8005780 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800577c:	2300      	movs	r3, #0
 800577e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4293      	cmp	r3, r2
 800578e:	bf28      	it	cs
 8005790:	4613      	movcs	r3, r2
 8005792:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d019      	beq.n	80057ce <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a0:	4413      	add	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	6939      	ldr	r1, [r7, #16]
 80057a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057aa:	f002 f829 	bl	8007800 <memcpy>
    NumBytesRead += NumBytesRem;
 80057ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	4413      	add	r3, r2
 80057b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80057b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	4413      	add	r3, r2
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80057c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	4413      	add	r3, r2
 80057cc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80057ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d002      	beq.n	80057da <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057d8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80057da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3730      	adds	r7, #48	; 0x30
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	20012edc 	.word	0x20012edc

080057e8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08c      	sub	sp, #48	; 0x30
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80057f4:	4b3e      	ldr	r3, [pc, #248]	; (80058f0 <SEGGER_RTT_ReadNoLock+0x108>)
 80057f6:	623b      	str	r3, [r7, #32]
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <SEGGER_RTT_ReadNoLock+0x1e>
 8005802:	f7ff fe4b 	bl	800549c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4613      	mov	r3, r2
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	4413      	add	r3, r2
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	3360      	adds	r3, #96	; 0x60
 8005812:	4a37      	ldr	r2, [pc, #220]	; (80058f0 <SEGGER_RTT_ReadNoLock+0x108>)
 8005814:	4413      	add	r3, r2
 8005816:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005828:	2300      	movs	r3, #0
 800582a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800582c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	429a      	cmp	r2, r3
 8005832:	d92b      	bls.n	800588c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4293      	cmp	r3, r2
 8005844:	bf28      	it	cs
 8005846:	4613      	movcs	r3, r2
 8005848:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005850:	4413      	add	r3, r2
 8005852:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	6939      	ldr	r1, [r7, #16]
 8005858:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800585a:	f001 ffd1 	bl	8007800 <memcpy>
    NumBytesRead += NumBytesRem;
 800585e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	4413      	add	r3, r2
 8005864:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	4413      	add	r3, r2
 800586c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	4413      	add	r3, r2
 800587c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005884:	429a      	cmp	r2, r3
 8005886:	d101      	bne.n	800588c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005888:	2300      	movs	r3, #0
 800588a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4293      	cmp	r3, r2
 800589a:	bf28      	it	cs
 800589c:	4613      	movcs	r3, r2
 800589e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d019      	beq.n	80058da <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ac:	4413      	add	r3, r2
 80058ae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	6939      	ldr	r1, [r7, #16]
 80058b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058b6:	f001 ffa3 	bl	8007800 <memcpy>
    NumBytesRead += NumBytesRem;
 80058ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	4413      	add	r3, r2
 80058c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80058c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	4413      	add	r3, r2
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80058d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	4413      	add	r3, r2
 80058d8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80058da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058e4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80058e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3730      	adds	r7, #48	; 0x30
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	20012edc 	.word	0x20012edc

080058f4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4613      	mov	r3, r2
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	4413      	add	r3, r2
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	3360      	adds	r3, #96	; 0x60
 8005910:	4a1f      	ldr	r2, [pc, #124]	; (8005990 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005912:	4413      	add	r3, r2
 8005914:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	2b02      	cmp	r3, #2
 800591c:	d029      	beq.n	8005972 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800591e:	2b02      	cmp	r3, #2
 8005920:	d82e      	bhi.n	8005980 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005926:	2b01      	cmp	r3, #1
 8005928:	d013      	beq.n	8005952 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800592a:	e029      	b.n	8005980 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800592c:	6978      	ldr	r0, [r7, #20]
 800592e:	f7ff feb2 	bl	8005696 <_GetAvailWriteSpace>
 8005932:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	429a      	cmp	r2, r3
 800593a:	d202      	bcs.n	8005942 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800593c:	2300      	movs	r3, #0
 800593e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005940:	e021      	b.n	8005986 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	69b9      	ldr	r1, [r7, #24]
 800594a:	6978      	ldr	r0, [r7, #20]
 800594c:	f7ff fe5b 	bl	8005606 <_WriteNoCheck>
    break;
 8005950:	e019      	b.n	8005986 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005952:	6978      	ldr	r0, [r7, #20]
 8005954:	f7ff fe9f 	bl	8005696 <_GetAvailWriteSpace>
 8005958:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	4293      	cmp	r3, r2
 8005960:	bf28      	it	cs
 8005962:	4613      	movcs	r3, r2
 8005964:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005966:	69fa      	ldr	r2, [r7, #28]
 8005968:	69b9      	ldr	r1, [r7, #24]
 800596a:	6978      	ldr	r0, [r7, #20]
 800596c:	f7ff fe4b 	bl	8005606 <_WriteNoCheck>
    break;
 8005970:	e009      	b.n	8005986 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	69b9      	ldr	r1, [r7, #24]
 8005976:	6978      	ldr	r0, [r7, #20]
 8005978:	f7ff fde8 	bl	800554c <_WriteBlocking>
 800597c:	61f8      	str	r0, [r7, #28]
    break;
 800597e:	e002      	b.n	8005986 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005980:	2300      	movs	r3, #0
 8005982:	61fb      	str	r3, [r7, #28]
    break;
 8005984:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005986:	69fb      	ldr	r3, [r7, #28]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3720      	adds	r7, #32
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	20012edc 	.word	0x20012edc

08005994 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005994:	b580      	push	{r7, lr}
 8005996:	b088      	sub	sp, #32
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80059a0:	4b0e      	ldr	r3, [pc, #56]	; (80059dc <SEGGER_RTT_WriteDownBuffer+0x48>)
 80059a2:	61fb      	str	r3, [r7, #28]
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80059ae:	f7ff fd75 	bl	800549c <_DoInit>
  SEGGER_RTT_LOCK();
 80059b2:	f3ef 8311 	mrs	r3, BASEPRI
 80059b6:	f04f 0120 	mov.w	r1, #32
 80059ba:	f381 8811 	msr	BASEPRI, r1
 80059be:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	68b9      	ldr	r1, [r7, #8]
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f7ff ff95 	bl	80058f4 <SEGGER_RTT_WriteDownBufferNoLock>
 80059ca:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80059d2:	697b      	ldr	r3, [r7, #20]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3720      	adds	r7, #32
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	20012edc 	.word	0x20012edc

080059e0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b088      	sub	sp, #32
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
 80059ec:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80059ee:	4b3d      	ldr	r3, [pc, #244]	; (8005ae4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80059f0:	61bb      	str	r3, [r7, #24]
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <SEGGER_RTT_AllocUpBuffer+0x20>
 80059fc:	f7ff fd4e 	bl	800549c <_DoInit>
  SEGGER_RTT_LOCK();
 8005a00:	f3ef 8311 	mrs	r3, BASEPRI
 8005a04:	f04f 0120 	mov.w	r1, #32
 8005a08:	f381 8811 	msr	BASEPRI, r1
 8005a0c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a0e:	4b35      	ldr	r3, [pc, #212]	; (8005ae4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005a10:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005a12:	2300      	movs	r3, #0
 8005a14:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005a16:	6939      	ldr	r1, [r7, #16]
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	4413      	add	r3, r2
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	440b      	add	r3, r1
 8005a26:	3304      	adds	r3, #4
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d008      	beq.n	8005a40 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	3301      	adds	r3, #1
 8005a32:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	69fa      	ldr	r2, [r7, #28]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	dbeb      	blt.n	8005a16 <SEGGER_RTT_AllocUpBuffer+0x36>
 8005a3e:	e000      	b.n	8005a42 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005a40:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	69fa      	ldr	r2, [r7, #28]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	da3f      	bge.n	8005acc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005a4c:	6939      	ldr	r1, [r7, #16]
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	1c5a      	adds	r2, r3, #1
 8005a52:	4613      	mov	r3, r2
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	4413      	add	r3, r2
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	440b      	add	r3, r1
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005a60:	6939      	ldr	r1, [r7, #16]
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	4613      	mov	r3, r2
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	4413      	add	r3, r2
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	440b      	add	r3, r1
 8005a70:	3304      	adds	r3, #4
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005a76:	6939      	ldr	r1, [r7, #16]
 8005a78:	69fa      	ldr	r2, [r7, #28]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	4413      	add	r3, r2
 8005a80:	00db      	lsls	r3, r3, #3
 8005a82:	440b      	add	r3, r1
 8005a84:	3320      	adds	r3, #32
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005a8a:	6939      	ldr	r1, [r7, #16]
 8005a8c:	69fa      	ldr	r2, [r7, #28]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	4413      	add	r3, r2
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	440b      	add	r3, r1
 8005a98:	3328      	adds	r3, #40	; 0x28
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005a9e:	6939      	ldr	r1, [r7, #16]
 8005aa0:	69fa      	ldr	r2, [r7, #28]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	4413      	add	r3, r2
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	440b      	add	r3, r1
 8005aac:	3324      	adds	r3, #36	; 0x24
 8005aae:	2200      	movs	r2, #0
 8005ab0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005ab2:	6939      	ldr	r1, [r7, #16]
 8005ab4:	69fa      	ldr	r2, [r7, #28]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	4413      	add	r3, r2
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	440b      	add	r3, r1
 8005ac0:	332c      	adds	r3, #44	; 0x2c
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005ac6:	f3bf 8f5f 	dmb	sy
 8005aca:	e002      	b.n	8005ad2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005acc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005ad8:	69fb      	ldr	r3, [r7, #28]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3720      	adds	r7, #32
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20012edc 	.word	0x20012edc

08005ae8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b088      	sub	sp, #32
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005af6:	4b33      	ldr	r3, [pc, #204]	; (8005bc4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005af8:	61bb      	str	r3, [r7, #24]
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005b04:	f7ff fcca 	bl	800549c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005b08:	4b2e      	ldr	r3, [pc, #184]	; (8005bc4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005b0a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	461a      	mov	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d24d      	bcs.n	8005bb4 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005b18:	f3ef 8311 	mrs	r3, BASEPRI
 8005b1c:	f04f 0120 	mov.w	r1, #32
 8005b20:	f381 8811 	msr	BASEPRI, r1
 8005b24:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d031      	beq.n	8005b90 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005b2c:	6979      	ldr	r1, [r7, #20]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4613      	mov	r3, r2
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	4413      	add	r3, r2
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	440b      	add	r3, r1
 8005b3a:	3360      	adds	r3, #96	; 0x60
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005b40:	6979      	ldr	r1, [r7, #20]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	4613      	mov	r3, r2
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	4413      	add	r3, r2
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	440b      	add	r3, r1
 8005b4e:	3364      	adds	r3, #100	; 0x64
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005b54:	6979      	ldr	r1, [r7, #20]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	4413      	add	r3, r2
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	440b      	add	r3, r1
 8005b62:	3368      	adds	r3, #104	; 0x68
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005b68:	6979      	ldr	r1, [r7, #20]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	4413      	add	r3, r2
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	440b      	add	r3, r1
 8005b76:	3370      	adds	r3, #112	; 0x70
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005b7c:	6979      	ldr	r1, [r7, #20]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4613      	mov	r3, r2
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	4413      	add	r3, r2
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	440b      	add	r3, r1
 8005b8a:	336c      	adds	r3, #108	; 0x6c
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005b90:	6979      	ldr	r1, [r7, #20]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4613      	mov	r3, r2
 8005b96:	005b      	lsls	r3, r3, #1
 8005b98:	4413      	add	r3, r2
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	440b      	add	r3, r1
 8005b9e:	3374      	adds	r3, #116	; 0x74
 8005ba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ba2:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005ba4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	61fb      	str	r3, [r7, #28]
 8005bb2:	e002      	b.n	8005bba <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb8:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005bba:	69fb      	ldr	r3, [r7, #28]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3720      	adds	r7, #32
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	20012edc 	.word	0x20012edc

08005bc8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005bd8:	e002      	b.n	8005be0 <_EncodeStr+0x18>
    Len++;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	4413      	add	r3, r2
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1f6      	bne.n	8005bda <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d901      	bls.n	8005bf8 <_EncodeStr+0x30>
    Len = Limit;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	2bfe      	cmp	r3, #254	; 0xfe
 8005bfc:	d806      	bhi.n	8005c0c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	60fa      	str	r2, [r7, #12]
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	b2d2      	uxtb	r2, r2
 8005c08:	701a      	strb	r2, [r3, #0]
 8005c0a:	e011      	b.n	8005c30 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	1c5a      	adds	r2, r3, #1
 8005c10:	60fa      	str	r2, [r7, #12]
 8005c12:	22ff      	movs	r2, #255	; 0xff
 8005c14:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	60fa      	str	r2, [r7, #12]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	0a19      	lsrs	r1, r3, #8
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	1c5a      	adds	r2, r3, #1
 8005c2a:	60fa      	str	r2, [r7, #12]
 8005c2c:	b2ca      	uxtb	r2, r1
 8005c2e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005c30:	2300      	movs	r3, #0
 8005c32:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005c34:	e00a      	b.n	8005c4c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	1c53      	adds	r3, r2, #1
 8005c3a:	60bb      	str	r3, [r7, #8]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	1c59      	adds	r1, r3, #1
 8005c40:	60f9      	str	r1, [r7, #12]
 8005c42:	7812      	ldrb	r2, [r2, #0]
 8005c44:	701a      	strb	r2, [r3, #0]
    n++;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d3f0      	bcc.n	8005c36 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005c54:	68fb      	ldr	r3, [r7, #12]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	371c      	adds	r7, #28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3304      	adds	r3, #4
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
	...

08005c7c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c82:	4b35      	ldr	r3, [pc, #212]	; (8005d58 <_HandleIncomingPacket+0xdc>)
 8005c84:	7e1b      	ldrb	r3, [r3, #24]
 8005c86:	4618      	mov	r0, r3
 8005c88:	1cfb      	adds	r3, r7, #3
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	f7ff fdab 	bl	80057e8 <SEGGER_RTT_ReadNoLock>
 8005c92:	4603      	mov	r3, r0
 8005c94:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	dd59      	ble.n	8005d50 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005c9c:	78fb      	ldrb	r3, [r7, #3]
 8005c9e:	2b80      	cmp	r3, #128	; 0x80
 8005ca0:	d032      	beq.n	8005d08 <_HandleIncomingPacket+0x8c>
 8005ca2:	2b80      	cmp	r3, #128	; 0x80
 8005ca4:	dc42      	bgt.n	8005d2c <_HandleIncomingPacket+0xb0>
 8005ca6:	2b07      	cmp	r3, #7
 8005ca8:	dc16      	bgt.n	8005cd8 <_HandleIncomingPacket+0x5c>
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	dd3e      	ble.n	8005d2c <_HandleIncomingPacket+0xb0>
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	2b06      	cmp	r3, #6
 8005cb2:	d83b      	bhi.n	8005d2c <_HandleIncomingPacket+0xb0>
 8005cb4:	a201      	add	r2, pc, #4	; (adr r2, 8005cbc <_HandleIncomingPacket+0x40>)
 8005cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cba:	bf00      	nop
 8005cbc:	08005cdf 	.word	0x08005cdf
 8005cc0:	08005ce5 	.word	0x08005ce5
 8005cc4:	08005ceb 	.word	0x08005ceb
 8005cc8:	08005cf1 	.word	0x08005cf1
 8005ccc:	08005cf7 	.word	0x08005cf7
 8005cd0:	08005cfd 	.word	0x08005cfd
 8005cd4:	08005d03 	.word	0x08005d03
 8005cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8005cda:	d034      	beq.n	8005d46 <_HandleIncomingPacket+0xca>
 8005cdc:	e026      	b.n	8005d2c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005cde:	f000 ff43 	bl	8006b68 <SEGGER_SYSVIEW_Start>
      break;
 8005ce2:	e035      	b.n	8005d50 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005ce4:	f000 fffc 	bl	8006ce0 <SEGGER_SYSVIEW_Stop>
      break;
 8005ce8:	e032      	b.n	8005d50 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005cea:	f001 f9d5 	bl	8007098 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005cee:	e02f      	b.n	8005d50 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005cf0:	f001 f99a 	bl	8007028 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005cf4:	e02c      	b.n	8005d50 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005cf6:	f001 f819 	bl	8006d2c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005cfa:	e029      	b.n	8005d50 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005cfc:	f001 fc68 	bl	80075d0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005d00:	e026      	b.n	8005d50 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005d02:	f001 fc47 	bl	8007594 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005d06:	e023      	b.n	8005d50 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005d08:	4b13      	ldr	r3, [pc, #76]	; (8005d58 <_HandleIncomingPacket+0xdc>)
 8005d0a:	7e1b      	ldrb	r3, [r3, #24]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	1cfb      	adds	r3, r7, #3
 8005d10:	2201      	movs	r2, #1
 8005d12:	4619      	mov	r1, r3
 8005d14:	f7ff fd68 	bl	80057e8 <SEGGER_RTT_ReadNoLock>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	dd13      	ble.n	8005d4a <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f001 fbb5 	bl	8007494 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005d2a:	e00e      	b.n	8005d4a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005d2c:	78fb      	ldrb	r3, [r7, #3]
 8005d2e:	b25b      	sxtb	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	da0c      	bge.n	8005d4e <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005d34:	4b08      	ldr	r3, [pc, #32]	; (8005d58 <_HandleIncomingPacket+0xdc>)
 8005d36:	7e1b      	ldrb	r3, [r3, #24]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	1cfb      	adds	r3, r7, #3
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	4619      	mov	r1, r3
 8005d40:	f7ff fd52 	bl	80057e8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005d44:	e003      	b.n	8005d4e <_HandleIncomingPacket+0xd2>
      break;
 8005d46:	bf00      	nop
 8005d48:	e002      	b.n	8005d50 <_HandleIncomingPacket+0xd4>
      break;
 8005d4a:	bf00      	nop
 8005d4c:	e000      	b.n	8005d50 <_HandleIncomingPacket+0xd4>
      break;
 8005d4e:	bf00      	nop
    }
  }
}
 8005d50:	bf00      	nop
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	2001439c 	.word	0x2001439c

08005d5c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08c      	sub	sp, #48	; 0x30
 8005d60:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005d62:	2301      	movs	r3, #1
 8005d64:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005d66:	1d3b      	adds	r3, r7, #4
 8005d68:	3301      	adds	r3, #1
 8005d6a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d70:	4b32      	ldr	r3, [pc, #200]	; (8005e3c <_TrySendOverflowPacket+0xe0>)
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d76:	e00b      	b.n	8005d90 <_TrySendOverflowPacket+0x34>
 8005d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7e:	1c59      	adds	r1, r3, #1
 8005d80:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	701a      	strb	r2, [r3, #0]
 8005d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8c:	09db      	lsrs	r3, r3, #7
 8005d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d92:	2b7f      	cmp	r3, #127	; 0x7f
 8005d94:	d8f0      	bhi.n	8005d78 <_TrySendOverflowPacket+0x1c>
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	701a      	strb	r2, [r3, #0]
 8005da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005da6:	4b26      	ldr	r3, [pc, #152]	; (8005e40 <_TrySendOverflowPacket+0xe4>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005dac:	4b23      	ldr	r3, [pc, #140]	; (8005e3c <_TrySendOverflowPacket+0xe0>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	627b      	str	r3, [r7, #36]	; 0x24
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	623b      	str	r3, [r7, #32]
 8005dbe:	e00b      	b.n	8005dd8 <_TrySendOverflowPacket+0x7c>
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	1c59      	adds	r1, r3, #1
 8005dc8:	6279      	str	r1, [r7, #36]	; 0x24
 8005dca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	701a      	strb	r2, [r3, #0]
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	09db      	lsrs	r3, r3, #7
 8005dd6:	623b      	str	r3, [r7, #32]
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	2b7f      	cmp	r3, #127	; 0x7f
 8005ddc:	d8f0      	bhi.n	8005dc0 <_TrySendOverflowPacket+0x64>
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	1c5a      	adds	r2, r3, #1
 8005de2:	627a      	str	r2, [r7, #36]	; 0x24
 8005de4:	6a3a      	ldr	r2, [r7, #32]
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	701a      	strb	r2, [r3, #0]
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005dee:	4b13      	ldr	r3, [pc, #76]	; (8005e3c <_TrySendOverflowPacket+0xe0>)
 8005df0:	785b      	ldrb	r3, [r3, #1]
 8005df2:	4618      	mov	r0, r3
 8005df4:	1d3b      	adds	r3, r7, #4
 8005df6:	69fa      	ldr	r2, [r7, #28]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	1d3b      	adds	r3, r7, #4
 8005dfe:	4619      	mov	r1, r3
 8005e00:	f7fa f9e6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005e04:	4603      	mov	r3, r0
 8005e06:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005e08:	f7ff fabe 	bl	8005388 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d009      	beq.n	8005e26 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005e12:	4a0a      	ldr	r2, [pc, #40]	; (8005e3c <_TrySendOverflowPacket+0xe0>)
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005e18:	4b08      	ldr	r3, [pc, #32]	; (8005e3c <_TrySendOverflowPacket+0xe0>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <_TrySendOverflowPacket+0xe0>)
 8005e22:	701a      	strb	r2, [r3, #0]
 8005e24:	e004      	b.n	8005e30 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005e26:	4b05      	ldr	r3, [pc, #20]	; (8005e3c <_TrySendOverflowPacket+0xe0>)
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	4a03      	ldr	r2, [pc, #12]	; (8005e3c <_TrySendOverflowPacket+0xe0>)
 8005e2e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005e30:	693b      	ldr	r3, [r7, #16]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3730      	adds	r7, #48	; 0x30
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	2001439c 	.word	0x2001439c
 8005e40:	e0001004 	.word	0xe0001004

08005e44 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b08a      	sub	sp, #40	; 0x28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005e50:	4b6d      	ldr	r3, [pc, #436]	; (8006008 <_SendPacket+0x1c4>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d010      	beq.n	8005e7a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005e58:	4b6b      	ldr	r3, [pc, #428]	; (8006008 <_SendPacket+0x1c4>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 80a5 	beq.w	8005fac <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005e62:	4b69      	ldr	r3, [pc, #420]	; (8006008 <_SendPacket+0x1c4>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d109      	bne.n	8005e7e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005e6a:	f7ff ff77 	bl	8005d5c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005e6e:	4b66      	ldr	r3, [pc, #408]	; (8006008 <_SendPacket+0x1c4>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	f040 809c 	bne.w	8005fb0 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005e78:	e001      	b.n	8005e7e <_SendPacket+0x3a>
    goto Send;
 8005e7a:	bf00      	nop
 8005e7c:	e000      	b.n	8005e80 <_SendPacket+0x3c>
Send:
 8005e7e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b1f      	cmp	r3, #31
 8005e84:	d809      	bhi.n	8005e9a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005e86:	4b60      	ldr	r3, [pc, #384]	; (8006008 <_SendPacket+0x1c4>)
 8005e88:	69da      	ldr	r2, [r3, #28]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f040 808d 	bne.w	8005fb4 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b17      	cmp	r3, #23
 8005e9e:	d807      	bhi.n	8005eb0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	e03d      	b.n	8005f2c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	2b7f      	cmp	r3, #127	; 0x7f
 8005ebc:	d912      	bls.n	8005ee4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	09da      	lsrs	r2, r3, #7
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	b2d2      	uxtb	r2, r2
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	3a01      	subs	r2, #1
 8005ed6:	60fa      	str	r2, [r7, #12]
 8005ed8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	701a      	strb	r2, [r3, #0]
 8005ee2:	e006      	b.n	8005ef2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	60fb      	str	r3, [r7, #12]
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ef6:	d912      	bls.n	8005f1e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	09da      	lsrs	r2, r3, #7
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	60fb      	str	r3, [r7, #12]
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	3a01      	subs	r2, #1
 8005f10:	60fa      	str	r2, [r7, #12]
 8005f12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	701a      	strb	r2, [r3, #0]
 8005f1c:	e006      	b.n	8005f2c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	3b01      	subs	r3, #1
 8005f22:	60fb      	str	r3, [r7, #12]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	b2da      	uxtb	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f2c:	4b37      	ldr	r3, [pc, #220]	; (800600c <_SendPacket+0x1c8>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005f32:	4b35      	ldr	r3, [pc, #212]	; (8006008 <_SendPacket+0x1c4>)
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	623b      	str	r3, [r7, #32]
 8005f44:	e00b      	b.n	8005f5e <_SendPacket+0x11a>
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	1c59      	adds	r1, r3, #1
 8005f4e:	6279      	str	r1, [r7, #36]	; 0x24
 8005f50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f54:	b2d2      	uxtb	r2, r2
 8005f56:	701a      	strb	r2, [r3, #0]
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	09db      	lsrs	r3, r3, #7
 8005f5c:	623b      	str	r3, [r7, #32]
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	2b7f      	cmp	r3, #127	; 0x7f
 8005f62:	d8f0      	bhi.n	8005f46 <_SendPacket+0x102>
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	627a      	str	r2, [r7, #36]	; 0x24
 8005f6a:	6a3a      	ldr	r2, [r7, #32]
 8005f6c:	b2d2      	uxtb	r2, r2
 8005f6e:	701a      	strb	r2, [r3, #0]
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005f74:	4b24      	ldr	r3, [pc, #144]	; (8006008 <_SendPacket+0x1c4>)
 8005f76:	785b      	ldrb	r3, [r3, #1]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	461a      	mov	r2, r3
 8005f82:	68f9      	ldr	r1, [r7, #12]
 8005f84:	f7fa f924 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005f8c:	f7ff f9fc 	bl	8005388 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005f96:	4a1c      	ldr	r2, [pc, #112]	; (8006008 <_SendPacket+0x1c4>)
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	60d3      	str	r3, [r2, #12]
 8005f9c:	e00b      	b.n	8005fb6 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005f9e:	4b1a      	ldr	r3, [pc, #104]	; (8006008 <_SendPacket+0x1c4>)
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	4b18      	ldr	r3, [pc, #96]	; (8006008 <_SendPacket+0x1c4>)
 8005fa8:	701a      	strb	r2, [r3, #0]
 8005faa:	e004      	b.n	8005fb6 <_SendPacket+0x172>
    goto SendDone;
 8005fac:	bf00      	nop
 8005fae:	e002      	b.n	8005fb6 <_SendPacket+0x172>
      goto SendDone;
 8005fb0:	bf00      	nop
 8005fb2:	e000      	b.n	8005fb6 <_SendPacket+0x172>
      goto SendDone;
 8005fb4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005fb6:	4b14      	ldr	r3, [pc, #80]	; (8006008 <_SendPacket+0x1c4>)
 8005fb8:	7e1b      	ldrb	r3, [r3, #24]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4a14      	ldr	r2, [pc, #80]	; (8006010 <_SendPacket+0x1cc>)
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	440b      	add	r3, r1
 8005fc4:	00db      	lsls	r3, r3, #3
 8005fc6:	4413      	add	r3, r2
 8005fc8:	336c      	adds	r3, #108	; 0x6c
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	4b0e      	ldr	r3, [pc, #56]	; (8006008 <_SendPacket+0x1c4>)
 8005fce:	7e1b      	ldrb	r3, [r3, #24]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	490f      	ldr	r1, [pc, #60]	; (8006010 <_SendPacket+0x1cc>)
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	005b      	lsls	r3, r3, #1
 8005fd8:	4403      	add	r3, r0
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	440b      	add	r3, r1
 8005fde:	3370      	adds	r3, #112	; 0x70
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d00b      	beq.n	8005ffe <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005fe6:	4b08      	ldr	r3, [pc, #32]	; (8006008 <_SendPacket+0x1c4>)
 8005fe8:	789b      	ldrb	r3, [r3, #2]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d107      	bne.n	8005ffe <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005fee:	4b06      	ldr	r3, [pc, #24]	; (8006008 <_SendPacket+0x1c4>)
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005ff4:	f7ff fe42 	bl	8005c7c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005ff8:	4b03      	ldr	r3, [pc, #12]	; (8006008 <_SendPacket+0x1c4>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005ffe:	bf00      	nop
 8006000:	3728      	adds	r7, #40	; 0x28
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	2001439c 	.word	0x2001439c
 800600c:	e0001004 	.word	0xe0001004
 8006010:	20012edc 	.word	0x20012edc

08006014 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8006014:	b580      	push	{r7, lr}
 8006016:	b08a      	sub	sp, #40	; 0x28
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	3301      	adds	r3, #1
 800602a:	2b80      	cmp	r3, #128	; 0x80
 800602c:	d80a      	bhi.n	8006044 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	1c59      	adds	r1, r3, #1
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	6051      	str	r1, [r2, #4]
 8006038:	78fa      	ldrb	r2, [r7, #3]
 800603a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	2b80      	cmp	r3, #128	; 0x80
 800604a:	d15a      	bne.n	8006102 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	691a      	ldr	r2, [r3, #16]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	b2d2      	uxtb	r2, r2
 8006056:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	627b      	str	r3, [r7, #36]	; 0x24
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	623b      	str	r3, [r7, #32]
 800606c:	e00b      	b.n	8006086 <_StoreChar+0x72>
 800606e:	6a3b      	ldr	r3, [r7, #32]
 8006070:	b2da      	uxtb	r2, r3
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	1c59      	adds	r1, r3, #1
 8006076:	6279      	str	r1, [r7, #36]	; 0x24
 8006078:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800607c:	b2d2      	uxtb	r2, r2
 800607e:	701a      	strb	r2, [r3, #0]
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	09db      	lsrs	r3, r3, #7
 8006084:	623b      	str	r3, [r7, #32]
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	2b7f      	cmp	r3, #127	; 0x7f
 800608a:	d8f0      	bhi.n	800606e <_StoreChar+0x5a>
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	1c5a      	adds	r2, r3, #1
 8006090:	627a      	str	r2, [r7, #36]	; 0x24
 8006092:	6a3a      	ldr	r2, [r7, #32]
 8006094:	b2d2      	uxtb	r2, r2
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	61fb      	str	r3, [r7, #28]
 80060a0:	2300      	movs	r3, #0
 80060a2:	61bb      	str	r3, [r7, #24]
 80060a4:	e00b      	b.n	80060be <_StoreChar+0xaa>
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	1c59      	adds	r1, r3, #1
 80060ae:	61f9      	str	r1, [r7, #28]
 80060b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060b4:	b2d2      	uxtb	r2, r2
 80060b6:	701a      	strb	r2, [r3, #0]
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	09db      	lsrs	r3, r3, #7
 80060bc:	61bb      	str	r3, [r7, #24]
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	2b7f      	cmp	r3, #127	; 0x7f
 80060c2:	d8f0      	bhi.n	80060a6 <_StoreChar+0x92>
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	1c5a      	adds	r2, r3, #1
 80060c8:	61fa      	str	r2, [r7, #28]
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	701a      	strb	r2, [r3, #0]
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	221a      	movs	r2, #26
 80060da:	6939      	ldr	r1, [r7, #16]
 80060dc:	4618      	mov	r0, r3
 80060de:	f7ff feb1 	bl	8005e44 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7ff fdbb 	bl	8005c62 <_PreparePacket>
 80060ec:	4602      	mov	r2, r0
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	1c5a      	adds	r2, r3, #1
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	611a      	str	r2, [r3, #16]
  }
}
 8006102:	bf00      	nop
 8006104:	3728      	adds	r7, #40	; 0x28
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800610c:	b580      	push	{r7, lr}
 800610e:	b08a      	sub	sp, #40	; 0x28
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800611e:	2301      	movs	r3, #1
 8006120:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8006122:	2301      	movs	r3, #1
 8006124:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006126:	e007      	b.n	8006138 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8006128:	6a3a      	ldr	r2, [r7, #32]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006130:	623b      	str	r3, [r7, #32]
    Width++;
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	3301      	adds	r3, #1
 8006136:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006138:	6a3a      	ldr	r2, [r7, #32]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	429a      	cmp	r2, r3
 800613e:	d2f3      	bcs.n	8006128 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	429a      	cmp	r2, r3
 8006146:	d901      	bls.n	800614c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800614c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b00      	cmp	r3, #0
 8006154:	d11f      	bne.n	8006196 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	2b00      	cmp	r3, #0
 800615a:	d01c      	beq.n	8006196 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800615c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d005      	beq.n	8006172 <_PrintUnsigned+0x66>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d102      	bne.n	8006172 <_PrintUnsigned+0x66>
        c = '0';
 800616c:	2330      	movs	r3, #48	; 0x30
 800616e:	76fb      	strb	r3, [r7, #27]
 8006170:	e001      	b.n	8006176 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8006172:	2320      	movs	r3, #32
 8006174:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006176:	e007      	b.n	8006188 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8006178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617a:	3b01      	subs	r3, #1
 800617c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800617e:	7efb      	ldrb	r3, [r7, #27]
 8006180:	4619      	mov	r1, r3
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f7ff ff46 	bl	8006014 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <_PrintUnsigned+0x8a>
 800618e:	69fa      	ldr	r2, [r7, #28]
 8006190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006192:	429a      	cmp	r2, r3
 8006194:	d3f0      	bcc.n	8006178 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d903      	bls.n	80061a4 <_PrintUnsigned+0x98>
      NumDigits--;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	3b01      	subs	r3, #1
 80061a0:	603b      	str	r3, [r7, #0]
 80061a2:	e009      	b.n	80061b8 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ac:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d200      	bcs.n	80061b8 <_PrintUnsigned+0xac>
        break;
 80061b6:	e005      	b.n	80061c4 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	fb02 f303 	mul.w	r3, r2, r3
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80061c2:	e7e8      	b.n	8006196 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061cc:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d2:	fb02 f303 	mul.w	r3, r2, r3
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80061dc:	4a15      	ldr	r2, [pc, #84]	; (8006234 <_PrintUnsigned+0x128>)
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	4413      	add	r3, r2
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	4619      	mov	r1, r3
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f7ff ff14 	bl	8006014 <_StoreChar>
    Digit /= Base;
 80061ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f4:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1e3      	bne.n	80061c4 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80061fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b00      	cmp	r3, #0
 8006204:	d011      	beq.n	800622a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00e      	beq.n	800622a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800620c:	e006      	b.n	800621c <_PrintUnsigned+0x110>
        FieldWidth--;
 800620e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006210:	3b01      	subs	r3, #1
 8006212:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8006214:	2120      	movs	r1, #32
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f7ff fefc 	bl	8006014 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <_PrintUnsigned+0x11e>
 8006222:	69fa      	ldr	r2, [r7, #28]
 8006224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006226:	429a      	cmp	r2, r3
 8006228:	d3f1      	bcc.n	800620e <_PrintUnsigned+0x102>
      }
    }
  }
}
 800622a:	bf00      	nop
 800622c:	3728      	adds	r7, #40	; 0x28
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	08007980 	.word	0x08007980

08006238 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006238:	b580      	push	{r7, lr}
 800623a:	b088      	sub	sp, #32
 800623c:	af02      	add	r7, sp, #8
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	2b00      	cmp	r3, #0
 800624a:	bfb8      	it	lt
 800624c:	425b      	neglt	r3, r3
 800624e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006250:	2301      	movs	r3, #1
 8006252:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006254:	e007      	b.n	8006266 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	fb92 f3f3 	sdiv	r3, r2, r3
 800625e:	613b      	str	r3, [r7, #16]
    Width++;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	3301      	adds	r3, #1
 8006264:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	429a      	cmp	r2, r3
 800626c:	daf3      	bge.n	8006256 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	429a      	cmp	r2, r3
 8006274:	d901      	bls.n	800627a <_PrintInt+0x42>
    Width = NumDigits;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00a      	beq.n	8006296 <_PrintInt+0x5e>
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2b00      	cmp	r3, #0
 8006284:	db04      	blt.n	8006290 <_PrintInt+0x58>
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	f003 0304 	and.w	r3, r3, #4
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <_PrintInt+0x5e>
    FieldWidth--;
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	3b01      	subs	r3, #1
 8006294:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	f003 0302 	and.w	r3, r3, #2
 800629c:	2b00      	cmp	r3, #0
 800629e:	d002      	beq.n	80062a6 <_PrintInt+0x6e>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d016      	beq.n	80062d4 <_PrintInt+0x9c>
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d111      	bne.n	80062d4 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00e      	beq.n	80062d4 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062b6:	e006      	b.n	80062c6 <_PrintInt+0x8e>
        FieldWidth--;
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	3b01      	subs	r3, #1
 80062bc:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80062be:	2120      	movs	r1, #32
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f7ff fea7 	bl	8006014 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d003      	beq.n	80062d4 <_PrintInt+0x9c>
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d3f1      	bcc.n	80062b8 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	da07      	bge.n	80062ea <_PrintInt+0xb2>
    v = -v;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	425b      	negs	r3, r3
 80062de:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80062e0:	212d      	movs	r1, #45	; 0x2d
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f7ff fe96 	bl	8006014 <_StoreChar>
 80062e8:	e008      	b.n	80062fc <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	f003 0304 	and.w	r3, r3, #4
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80062f4:	212b      	movs	r1, #43	; 0x2b
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f7ff fe8c 	bl	8006014 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d019      	beq.n	800633a <_PrintInt+0x102>
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	2b00      	cmp	r3, #0
 800630e:	d114      	bne.n	800633a <_PrintInt+0x102>
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d111      	bne.n	800633a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00e      	beq.n	800633a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800631c:	e006      	b.n	800632c <_PrintInt+0xf4>
        FieldWidth--;
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	3b01      	subs	r3, #1
 8006322:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006324:	2130      	movs	r1, #48	; 0x30
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f7ff fe74 	bl	8006014 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <_PrintInt+0x102>
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	429a      	cmp	r2, r3
 8006338:	d3f1      	bcc.n	800631e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800633a:	68b9      	ldr	r1, [r7, #8]
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	9301      	str	r3, [sp, #4]
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f7ff fedf 	bl	800610c <_PrintUnsigned>
}
 800634e:	bf00      	nop
 8006350:	3718      	adds	r7, #24
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006358:	b580      	push	{r7, lr}
 800635a:	b098      	sub	sp, #96	; 0x60
 800635c:	af02      	add	r7, sp, #8
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006364:	f3ef 8311 	mrs	r3, BASEPRI
 8006368:	f04f 0120 	mov.w	r1, #32
 800636c:	f381 8811 	msr	BASEPRI, r1
 8006370:	633b      	str	r3, [r7, #48]	; 0x30
 8006372:	48b7      	ldr	r0, [pc, #732]	; (8006650 <_VPrintTarget+0x2f8>)
 8006374:	f7ff fc75 	bl	8005c62 <_PreparePacket>
 8006378:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800637a:	4bb5      	ldr	r3, [pc, #724]	; (8006650 <_VPrintTarget+0x2f8>)
 800637c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800637e:	2300      	movs	r3, #0
 8006380:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006384:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	3301      	adds	r3, #1
 800638a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	3301      	adds	r3, #1
 800639c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800639e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f000 8183 	beq.w	80066ae <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80063a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063ac:	2b25      	cmp	r3, #37	; 0x25
 80063ae:	f040 8170 	bne.w	8006692 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80063b2:	2300      	movs	r3, #0
 80063b4:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80063b6:	2301      	movs	r3, #1
 80063b8:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80063c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063c6:	3b23      	subs	r3, #35	; 0x23
 80063c8:	2b0d      	cmp	r3, #13
 80063ca:	d83f      	bhi.n	800644c <_VPrintTarget+0xf4>
 80063cc:	a201      	add	r2, pc, #4	; (adr r2, 80063d4 <_VPrintTarget+0x7c>)
 80063ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d2:	bf00      	nop
 80063d4:	0800643d 	.word	0x0800643d
 80063d8:	0800644d 	.word	0x0800644d
 80063dc:	0800644d 	.word	0x0800644d
 80063e0:	0800644d 	.word	0x0800644d
 80063e4:	0800644d 	.word	0x0800644d
 80063e8:	0800644d 	.word	0x0800644d
 80063ec:	0800644d 	.word	0x0800644d
 80063f0:	0800644d 	.word	0x0800644d
 80063f4:	0800642d 	.word	0x0800642d
 80063f8:	0800644d 	.word	0x0800644d
 80063fc:	0800640d 	.word	0x0800640d
 8006400:	0800644d 	.word	0x0800644d
 8006404:	0800644d 	.word	0x0800644d
 8006408:	0800641d 	.word	0x0800641d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800640c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800640e:	f043 0301 	orr.w	r3, r3, #1
 8006412:	64bb      	str	r3, [r7, #72]	; 0x48
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	3301      	adds	r3, #1
 8006418:	60fb      	str	r3, [r7, #12]
 800641a:	e01a      	b.n	8006452 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800641c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800641e:	f043 0302 	orr.w	r3, r3, #2
 8006422:	64bb      	str	r3, [r7, #72]	; 0x48
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3301      	adds	r3, #1
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	e012      	b.n	8006452 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800642c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800642e:	f043 0304 	orr.w	r3, r3, #4
 8006432:	64bb      	str	r3, [r7, #72]	; 0x48
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	3301      	adds	r3, #1
 8006438:	60fb      	str	r3, [r7, #12]
 800643a:	e00a      	b.n	8006452 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800643c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800643e:	f043 0308 	orr.w	r3, r3, #8
 8006442:	64bb      	str	r3, [r7, #72]	; 0x48
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	3301      	adds	r3, #1
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	e002      	b.n	8006452 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800644c:	2300      	movs	r3, #0
 800644e:	653b      	str	r3, [r7, #80]	; 0x50
 8006450:	bf00      	nop
        }
      } while (v);
 8006452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1b0      	bne.n	80063ba <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006458:	2300      	movs	r3, #0
 800645a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8006464:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006468:	2b2f      	cmp	r3, #47	; 0x2f
 800646a:	d912      	bls.n	8006492 <_VPrintTarget+0x13a>
 800646c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006470:	2b39      	cmp	r3, #57	; 0x39
 8006472:	d80e      	bhi.n	8006492 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	3301      	adds	r3, #1
 8006478:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800647a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800647c:	4613      	mov	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	005b      	lsls	r3, r3, #1
 8006484:	461a      	mov	r2, r3
 8006486:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800648a:	4413      	add	r3, r2
 800648c:	3b30      	subs	r3, #48	; 0x30
 800648e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8006490:	e7e4      	b.n	800645c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006492:	2300      	movs	r3, #0
 8006494:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800649e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064a2:	2b2e      	cmp	r3, #46	; 0x2e
 80064a4:	d11d      	bne.n	80064e2 <_VPrintTarget+0x18a>
        sFormat++;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	3301      	adds	r3, #1
 80064aa:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80064b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064b8:	2b2f      	cmp	r3, #47	; 0x2f
 80064ba:	d912      	bls.n	80064e2 <_VPrintTarget+0x18a>
 80064bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064c0:	2b39      	cmp	r3, #57	; 0x39
 80064c2:	d80e      	bhi.n	80064e2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	3301      	adds	r3, #1
 80064c8:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80064ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064cc:	4613      	mov	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	005b      	lsls	r3, r3, #1
 80064d4:	461a      	mov	r2, r3
 80064d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064da:	4413      	add	r3, r2
 80064dc:	3b30      	subs	r3, #48	; 0x30
 80064de:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80064e0:	e7e4      	b.n	80064ac <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80064ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064ee:	2b6c      	cmp	r3, #108	; 0x6c
 80064f0:	d003      	beq.n	80064fa <_VPrintTarget+0x1a2>
 80064f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064f6:	2b68      	cmp	r3, #104	; 0x68
 80064f8:	d107      	bne.n	800650a <_VPrintTarget+0x1b2>
          c = *sFormat;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	3301      	adds	r3, #1
 8006506:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006508:	e7ef      	b.n	80064ea <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800650a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800650e:	2b25      	cmp	r3, #37	; 0x25
 8006510:	f000 80b3 	beq.w	800667a <_VPrintTarget+0x322>
 8006514:	2b25      	cmp	r3, #37	; 0x25
 8006516:	f2c0 80b7 	blt.w	8006688 <_VPrintTarget+0x330>
 800651a:	2b78      	cmp	r3, #120	; 0x78
 800651c:	f300 80b4 	bgt.w	8006688 <_VPrintTarget+0x330>
 8006520:	2b58      	cmp	r3, #88	; 0x58
 8006522:	f2c0 80b1 	blt.w	8006688 <_VPrintTarget+0x330>
 8006526:	3b58      	subs	r3, #88	; 0x58
 8006528:	2b20      	cmp	r3, #32
 800652a:	f200 80ad 	bhi.w	8006688 <_VPrintTarget+0x330>
 800652e:	a201      	add	r2, pc, #4	; (adr r2, 8006534 <_VPrintTarget+0x1dc>)
 8006530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006534:	0800662b 	.word	0x0800662b
 8006538:	08006689 	.word	0x08006689
 800653c:	08006689 	.word	0x08006689
 8006540:	08006689 	.word	0x08006689
 8006544:	08006689 	.word	0x08006689
 8006548:	08006689 	.word	0x08006689
 800654c:	08006689 	.word	0x08006689
 8006550:	08006689 	.word	0x08006689
 8006554:	08006689 	.word	0x08006689
 8006558:	08006689 	.word	0x08006689
 800655c:	08006689 	.word	0x08006689
 8006560:	080065b9 	.word	0x080065b9
 8006564:	080065df 	.word	0x080065df
 8006568:	08006689 	.word	0x08006689
 800656c:	08006689 	.word	0x08006689
 8006570:	08006689 	.word	0x08006689
 8006574:	08006689 	.word	0x08006689
 8006578:	08006689 	.word	0x08006689
 800657c:	08006689 	.word	0x08006689
 8006580:	08006689 	.word	0x08006689
 8006584:	08006689 	.word	0x08006689
 8006588:	08006689 	.word	0x08006689
 800658c:	08006689 	.word	0x08006689
 8006590:	08006689 	.word	0x08006689
 8006594:	08006655 	.word	0x08006655
 8006598:	08006689 	.word	0x08006689
 800659c:	08006689 	.word	0x08006689
 80065a0:	08006689 	.word	0x08006689
 80065a4:	08006689 	.word	0x08006689
 80065a8:	08006605 	.word	0x08006605
 80065ac:	08006689 	.word	0x08006689
 80065b0:	08006689 	.word	0x08006689
 80065b4:	0800662b 	.word	0x0800662b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	1d19      	adds	r1, r3, #4
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	6011      	str	r1, [r2, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80065c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80065cc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80065d0:	f107 0314 	add.w	r3, r7, #20
 80065d4:	4611      	mov	r1, r2
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7ff fd1c 	bl	8006014 <_StoreChar>
        break;
 80065dc:	e055      	b.n	800668a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	1d19      	adds	r1, r3, #4
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	6011      	str	r1, [r2, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80065ec:	f107 0014 	add.w	r0, r7, #20
 80065f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065f2:	9301      	str	r3, [sp, #4]
 80065f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065fa:	220a      	movs	r2, #10
 80065fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80065fe:	f7ff fe1b 	bl	8006238 <_PrintInt>
        break;
 8006602:	e042      	b.n	800668a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	1d19      	adds	r1, r3, #4
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	6011      	str	r1, [r2, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006612:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006614:	f107 0014 	add.w	r0, r7, #20
 8006618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800661a:	9301      	str	r3, [sp, #4]
 800661c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006622:	220a      	movs	r2, #10
 8006624:	f7ff fd72 	bl	800610c <_PrintUnsigned>
        break;
 8006628:	e02f      	b.n	800668a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	1d19      	adds	r1, r3, #4
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	6011      	str	r1, [r2, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006638:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800663a:	f107 0014 	add.w	r0, r7, #20
 800663e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006640:	9301      	str	r3, [sp, #4]
 8006642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006648:	2210      	movs	r2, #16
 800664a:	f7ff fd5f 	bl	800610c <_PrintUnsigned>
        break;
 800664e:	e01c      	b.n	800668a <_VPrintTarget+0x332>
 8006650:	200143cc 	.word	0x200143cc
      case 'p':
        v = va_arg(*pParamList, int);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	1d19      	adds	r1, r3, #4
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	6011      	str	r1, [r2, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006662:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006664:	f107 0014 	add.w	r0, r7, #20
 8006668:	2300      	movs	r3, #0
 800666a:	9301      	str	r3, [sp, #4]
 800666c:	2308      	movs	r3, #8
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	2308      	movs	r3, #8
 8006672:	2210      	movs	r2, #16
 8006674:	f7ff fd4a 	bl	800610c <_PrintUnsigned>
        break;
 8006678:	e007      	b.n	800668a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800667a:	f107 0314 	add.w	r3, r7, #20
 800667e:	2125      	movs	r1, #37	; 0x25
 8006680:	4618      	mov	r0, r3
 8006682:	f7ff fcc7 	bl	8006014 <_StoreChar>
        break;
 8006686:	e000      	b.n	800668a <_VPrintTarget+0x332>
      default:
        break;
 8006688:	bf00      	nop
      }
      sFormat++;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3301      	adds	r3, #1
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	e007      	b.n	80066a2 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8006692:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006696:	f107 0314 	add.w	r3, r7, #20
 800669a:	4611      	mov	r1, r2
 800669c:	4618      	mov	r0, r3
 800669e:	f7ff fcb9 	bl	8006014 <_StoreChar>
    }
  } while (*sFormat);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f47f ae72 	bne.w	8006390 <_VPrintTarget+0x38>
 80066ac:	e000      	b.n	80066b0 <_VPrintTarget+0x358>
      break;
 80066ae:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d041      	beq.n	800673a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 80066b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	b2d2      	uxtb	r2, r2
 80066bc:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	643b      	str	r3, [r7, #64]	; 0x40
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066c6:	e00b      	b.n	80066e0 <_VPrintTarget+0x388>
 80066c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ce:	1c59      	adds	r1, r3, #1
 80066d0:	6439      	str	r1, [r7, #64]	; 0x40
 80066d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066d6:	b2d2      	uxtb	r2, r2
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066dc:	09db      	lsrs	r3, r3, #7
 80066de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e2:	2b7f      	cmp	r3, #127	; 0x7f
 80066e4:	d8f0      	bhi.n	80066c8 <_VPrintTarget+0x370>
 80066e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066e8:	1c5a      	adds	r2, r3, #1
 80066ea:	643a      	str	r2, [r7, #64]	; 0x40
 80066ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	701a      	strb	r2, [r3, #0]
 80066f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066f4:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80066fa:	2300      	movs	r3, #0
 80066fc:	637b      	str	r3, [r7, #52]	; 0x34
 80066fe:	e00b      	b.n	8006718 <_VPrintTarget+0x3c0>
 8006700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006702:	b2da      	uxtb	r2, r3
 8006704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006706:	1c59      	adds	r1, r3, #1
 8006708:	63b9      	str	r1, [r7, #56]	; 0x38
 800670a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800670e:	b2d2      	uxtb	r2, r2
 8006710:	701a      	strb	r2, [r3, #0]
 8006712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006714:	09db      	lsrs	r3, r3, #7
 8006716:	637b      	str	r3, [r7, #52]	; 0x34
 8006718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671a:	2b7f      	cmp	r3, #127	; 0x7f
 800671c:	d8f0      	bhi.n	8006700 <_VPrintTarget+0x3a8>
 800671e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	63ba      	str	r2, [r7, #56]	; 0x38
 8006724:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006726:	b2d2      	uxtb	r2, r2
 8006728:	701a      	strb	r2, [r3, #0]
 800672a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	69b9      	ldr	r1, [r7, #24]
 8006732:	221a      	movs	r2, #26
 8006734:	4618      	mov	r0, r3
 8006736:	f7ff fb85 	bl	8005e44 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800673a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006740:	bf00      	nop
 8006742:	3758      	adds	r7, #88	; 0x58
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af02      	add	r7, sp, #8
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006756:	2300      	movs	r3, #0
 8006758:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800675c:	4917      	ldr	r1, [pc, #92]	; (80067bc <SEGGER_SYSVIEW_Init+0x74>)
 800675e:	4818      	ldr	r0, [pc, #96]	; (80067c0 <SEGGER_SYSVIEW_Init+0x78>)
 8006760:	f7ff f93e 	bl	80059e0 <SEGGER_RTT_AllocUpBuffer>
 8006764:	4603      	mov	r3, r0
 8006766:	b2da      	uxtb	r2, r3
 8006768:	4b16      	ldr	r3, [pc, #88]	; (80067c4 <SEGGER_SYSVIEW_Init+0x7c>)
 800676a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800676c:	4b15      	ldr	r3, [pc, #84]	; (80067c4 <SEGGER_SYSVIEW_Init+0x7c>)
 800676e:	785a      	ldrb	r2, [r3, #1]
 8006770:	4b14      	ldr	r3, [pc, #80]	; (80067c4 <SEGGER_SYSVIEW_Init+0x7c>)
 8006772:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006774:	4b13      	ldr	r3, [pc, #76]	; (80067c4 <SEGGER_SYSVIEW_Init+0x7c>)
 8006776:	7e1b      	ldrb	r3, [r3, #24]
 8006778:	4618      	mov	r0, r3
 800677a:	2300      	movs	r3, #0
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	2308      	movs	r3, #8
 8006780:	4a11      	ldr	r2, [pc, #68]	; (80067c8 <SEGGER_SYSVIEW_Init+0x80>)
 8006782:	490f      	ldr	r1, [pc, #60]	; (80067c0 <SEGGER_SYSVIEW_Init+0x78>)
 8006784:	f7ff f9b0 	bl	8005ae8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006788:	4b0e      	ldr	r3, [pc, #56]	; (80067c4 <SEGGER_SYSVIEW_Init+0x7c>)
 800678a:	2200      	movs	r2, #0
 800678c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800678e:	4b0f      	ldr	r3, [pc, #60]	; (80067cc <SEGGER_SYSVIEW_Init+0x84>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a0c      	ldr	r2, [pc, #48]	; (80067c4 <SEGGER_SYSVIEW_Init+0x7c>)
 8006794:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006796:	4a0b      	ldr	r2, [pc, #44]	; (80067c4 <SEGGER_SYSVIEW_Init+0x7c>)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800679c:	4a09      	ldr	r2, [pc, #36]	; (80067c4 <SEGGER_SYSVIEW_Init+0x7c>)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80067a2:	4a08      	ldr	r2, [pc, #32]	; (80067c4 <SEGGER_SYSVIEW_Init+0x7c>)
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80067a8:	4a06      	ldr	r2, [pc, #24]	; (80067c4 <SEGGER_SYSVIEW_Init+0x7c>)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80067ae:	4b05      	ldr	r3, [pc, #20]	; (80067c4 <SEGGER_SYSVIEW_Init+0x7c>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80067b4:	bf00      	nop
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	20013394 	.word	0x20013394
 80067c0:	08007948 	.word	0x08007948
 80067c4:	2001439c 	.word	0x2001439c
 80067c8:	20014394 	.word	0x20014394
 80067cc:	e0001004 	.word	0xe0001004

080067d0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80067d8:	4a04      	ldr	r2, [pc, #16]	; (80067ec <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6113      	str	r3, [r2, #16]
}
 80067de:	bf00      	nop
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	2001439c 	.word	0x2001439c

080067f0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80067f8:	f3ef 8311 	mrs	r3, BASEPRI
 80067fc:	f04f 0120 	mov.w	r1, #32
 8006800:	f381 8811 	msr	BASEPRI, r1
 8006804:	60fb      	str	r3, [r7, #12]
 8006806:	4808      	ldr	r0, [pc, #32]	; (8006828 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006808:	f7ff fa2b 	bl	8005c62 <_PreparePacket>
 800680c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	68b9      	ldr	r1, [r7, #8]
 8006812:	68b8      	ldr	r0, [r7, #8]
 8006814:	f7ff fb16 	bl	8005e44 <_SendPacket>
  RECORD_END();
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f383 8811 	msr	BASEPRI, r3
}
 800681e:	bf00      	nop
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	200143cc 	.word	0x200143cc

0800682c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800682c:	b580      	push	{r7, lr}
 800682e:	b088      	sub	sp, #32
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006836:	f3ef 8311 	mrs	r3, BASEPRI
 800683a:	f04f 0120 	mov.w	r1, #32
 800683e:	f381 8811 	msr	BASEPRI, r1
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	4816      	ldr	r0, [pc, #88]	; (80068a0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006846:	f7ff fa0c 	bl	8005c62 <_PreparePacket>
 800684a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	61fb      	str	r3, [r7, #28]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	61bb      	str	r3, [r7, #24]
 8006858:	e00b      	b.n	8006872 <SEGGER_SYSVIEW_RecordU32+0x46>
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	b2da      	uxtb	r2, r3
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	1c59      	adds	r1, r3, #1
 8006862:	61f9      	str	r1, [r7, #28]
 8006864:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006868:	b2d2      	uxtb	r2, r2
 800686a:	701a      	strb	r2, [r3, #0]
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	09db      	lsrs	r3, r3, #7
 8006870:	61bb      	str	r3, [r7, #24]
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	2b7f      	cmp	r3, #127	; 0x7f
 8006876:	d8f0      	bhi.n	800685a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	61fa      	str	r2, [r7, #28]
 800687e:	69ba      	ldr	r2, [r7, #24]
 8006880:	b2d2      	uxtb	r2, r2
 8006882:	701a      	strb	r2, [r3, #0]
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	68f9      	ldr	r1, [r7, #12]
 800688c:	6938      	ldr	r0, [r7, #16]
 800688e:	f7ff fad9 	bl	8005e44 <_SendPacket>
  RECORD_END();
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f383 8811 	msr	BASEPRI, r3
}
 8006898:	bf00      	nop
 800689a:	3720      	adds	r7, #32
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	200143cc 	.word	0x200143cc

080068a4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b08c      	sub	sp, #48	; 0x30
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80068b0:	f3ef 8311 	mrs	r3, BASEPRI
 80068b4:	f04f 0120 	mov.w	r1, #32
 80068b8:	f381 8811 	msr	BASEPRI, r1
 80068bc:	61fb      	str	r3, [r7, #28]
 80068be:	4825      	ldr	r0, [pc, #148]	; (8006954 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80068c0:	f7ff f9cf 	bl	8005c62 <_PreparePacket>
 80068c4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80068d2:	e00b      	b.n	80068ec <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80068d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068da:	1c59      	adds	r1, r3, #1
 80068dc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80068de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068e2:	b2d2      	uxtb	r2, r2
 80068e4:	701a      	strb	r2, [r3, #0]
 80068e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e8:	09db      	lsrs	r3, r3, #7
 80068ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80068ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ee:	2b7f      	cmp	r3, #127	; 0x7f
 80068f0:	d8f0      	bhi.n	80068d4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80068f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f4:	1c5a      	adds	r2, r3, #1
 80068f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068fa:	b2d2      	uxtb	r2, r2
 80068fc:	701a      	strb	r2, [r3, #0]
 80068fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006900:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	627b      	str	r3, [r7, #36]	; 0x24
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	623b      	str	r3, [r7, #32]
 800690a:	e00b      	b.n	8006924 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	b2da      	uxtb	r2, r3
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	1c59      	adds	r1, r3, #1
 8006914:	6279      	str	r1, [r7, #36]	; 0x24
 8006916:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800691a:	b2d2      	uxtb	r2, r2
 800691c:	701a      	strb	r2, [r3, #0]
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	09db      	lsrs	r3, r3, #7
 8006922:	623b      	str	r3, [r7, #32]
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	2b7f      	cmp	r3, #127	; 0x7f
 8006928:	d8f0      	bhi.n	800690c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	627a      	str	r2, [r7, #36]	; 0x24
 8006930:	6a3a      	ldr	r2, [r7, #32]
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	701a      	strb	r2, [r3, #0]
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006938:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	6979      	ldr	r1, [r7, #20]
 800693e:	69b8      	ldr	r0, [r7, #24]
 8006940:	f7ff fa80 	bl	8005e44 <_SendPacket>
  RECORD_END();
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	f383 8811 	msr	BASEPRI, r3
}
 800694a:	bf00      	nop
 800694c:	3730      	adds	r7, #48	; 0x30
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	200143cc 	.word	0x200143cc

08006958 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006958:	b580      	push	{r7, lr}
 800695a:	b08e      	sub	sp, #56	; 0x38
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
 8006964:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006966:	f3ef 8311 	mrs	r3, BASEPRI
 800696a:	f04f 0120 	mov.w	r1, #32
 800696e:	f381 8811 	msr	BASEPRI, r1
 8006972:	61fb      	str	r3, [r7, #28]
 8006974:	4832      	ldr	r0, [pc, #200]	; (8006a40 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006976:	f7ff f974 	bl	8005c62 <_PreparePacket>
 800697a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	637b      	str	r3, [r7, #52]	; 0x34
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	633b      	str	r3, [r7, #48]	; 0x30
 8006988:	e00b      	b.n	80069a2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800698a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698c:	b2da      	uxtb	r2, r3
 800698e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006990:	1c59      	adds	r1, r3, #1
 8006992:	6379      	str	r1, [r7, #52]	; 0x34
 8006994:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006998:	b2d2      	uxtb	r2, r2
 800699a:	701a      	strb	r2, [r3, #0]
 800699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699e:	09db      	lsrs	r3, r3, #7
 80069a0:	633b      	str	r3, [r7, #48]	; 0x30
 80069a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a4:	2b7f      	cmp	r3, #127	; 0x7f
 80069a6:	d8f0      	bhi.n	800698a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80069a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069aa:	1c5a      	adds	r2, r3, #1
 80069ac:	637a      	str	r2, [r7, #52]	; 0x34
 80069ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069b0:	b2d2      	uxtb	r2, r2
 80069b2:	701a      	strb	r2, [r3, #0]
 80069b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	62bb      	str	r3, [r7, #40]	; 0x28
 80069c0:	e00b      	b.n	80069da <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80069c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c8:	1c59      	adds	r1, r3, #1
 80069ca:	62f9      	str	r1, [r7, #44]	; 0x2c
 80069cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069d0:	b2d2      	uxtb	r2, r2
 80069d2:	701a      	strb	r2, [r3, #0]
 80069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d6:	09db      	lsrs	r3, r3, #7
 80069d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80069da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069dc:	2b7f      	cmp	r3, #127	; 0x7f
 80069de:	d8f0      	bhi.n	80069c2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80069e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e2:	1c5a      	adds	r2, r3, #1
 80069e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069e8:	b2d2      	uxtb	r2, r2
 80069ea:	701a      	strb	r2, [r3, #0]
 80069ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	627b      	str	r3, [r7, #36]	; 0x24
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	623b      	str	r3, [r7, #32]
 80069f8:	e00b      	b.n	8006a12 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	b2da      	uxtb	r2, r3
 80069fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a00:	1c59      	adds	r1, r3, #1
 8006a02:	6279      	str	r1, [r7, #36]	; 0x24
 8006a04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a08:	b2d2      	uxtb	r2, r2
 8006a0a:	701a      	strb	r2, [r3, #0]
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	09db      	lsrs	r3, r3, #7
 8006a10:	623b      	str	r3, [r7, #32]
 8006a12:	6a3b      	ldr	r3, [r7, #32]
 8006a14:	2b7f      	cmp	r3, #127	; 0x7f
 8006a16:	d8f0      	bhi.n	80069fa <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	1c5a      	adds	r2, r3, #1
 8006a1c:	627a      	str	r2, [r7, #36]	; 0x24
 8006a1e:	6a3a      	ldr	r2, [r7, #32]
 8006a20:	b2d2      	uxtb	r2, r2
 8006a22:	701a      	strb	r2, [r3, #0]
 8006a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a26:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	6979      	ldr	r1, [r7, #20]
 8006a2c:	69b8      	ldr	r0, [r7, #24]
 8006a2e:	f7ff fa09 	bl	8005e44 <_SendPacket>
  RECORD_END();
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	f383 8811 	msr	BASEPRI, r3
}
 8006a38:	bf00      	nop
 8006a3a:	3738      	adds	r7, #56	; 0x38
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	200143cc 	.word	0x200143cc

08006a44 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b090      	sub	sp, #64	; 0x40
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
 8006a50:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a52:	f3ef 8311 	mrs	r3, BASEPRI
 8006a56:	f04f 0120 	mov.w	r1, #32
 8006a5a:	f381 8811 	msr	BASEPRI, r1
 8006a5e:	61fb      	str	r3, [r7, #28]
 8006a60:	4840      	ldr	r0, [pc, #256]	; (8006b64 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006a62:	f7ff f8fe 	bl	8005c62 <_PreparePacket>
 8006a66:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a74:	e00b      	b.n	8006a8e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a7c:	1c59      	adds	r1, r3, #1
 8006a7e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006a80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a84:	b2d2      	uxtb	r2, r2
 8006a86:	701a      	strb	r2, [r3, #0]
 8006a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8a:	09db      	lsrs	r3, r3, #7
 8006a8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a90:	2b7f      	cmp	r3, #127	; 0x7f
 8006a92:	d8f0      	bhi.n	8006a76 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006a9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a9c:	b2d2      	uxtb	r2, r2
 8006a9e:	701a      	strb	r2, [r3, #0]
 8006aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aa2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	633b      	str	r3, [r7, #48]	; 0x30
 8006aac:	e00b      	b.n	8006ac6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab4:	1c59      	adds	r1, r3, #1
 8006ab6:	6379      	str	r1, [r7, #52]	; 0x34
 8006ab8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006abc:	b2d2      	uxtb	r2, r2
 8006abe:	701a      	strb	r2, [r3, #0]
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac2:	09db      	lsrs	r3, r3, #7
 8006ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac8:	2b7f      	cmp	r3, #127	; 0x7f
 8006aca:	d8f0      	bhi.n	8006aae <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ace:	1c5a      	adds	r2, r3, #1
 8006ad0:	637a      	str	r2, [r7, #52]	; 0x34
 8006ad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ad4:	b2d2      	uxtb	r2, r2
 8006ad6:	701a      	strb	r2, [r3, #0]
 8006ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ada:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ae4:	e00b      	b.n	8006afe <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aec:	1c59      	adds	r1, r3, #1
 8006aee:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006af0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	701a      	strb	r2, [r3, #0]
 8006af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afa:	09db      	lsrs	r3, r3, #7
 8006afc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b00:	2b7f      	cmp	r3, #127	; 0x7f
 8006b02:	d8f0      	bhi.n	8006ae6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b0c:	b2d2      	uxtb	r2, r2
 8006b0e:	701a      	strb	r2, [r3, #0]
 8006b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b12:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	627b      	str	r3, [r7, #36]	; 0x24
 8006b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b1a:	623b      	str	r3, [r7, #32]
 8006b1c:	e00b      	b.n	8006b36 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	1c59      	adds	r1, r3, #1
 8006b26:	6279      	str	r1, [r7, #36]	; 0x24
 8006b28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b2c:	b2d2      	uxtb	r2, r2
 8006b2e:	701a      	strb	r2, [r3, #0]
 8006b30:	6a3b      	ldr	r3, [r7, #32]
 8006b32:	09db      	lsrs	r3, r3, #7
 8006b34:	623b      	str	r3, [r7, #32]
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	2b7f      	cmp	r3, #127	; 0x7f
 8006b3a:	d8f0      	bhi.n	8006b1e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	627a      	str	r2, [r7, #36]	; 0x24
 8006b42:	6a3a      	ldr	r2, [r7, #32]
 8006b44:	b2d2      	uxtb	r2, r2
 8006b46:	701a      	strb	r2, [r3, #0]
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	6979      	ldr	r1, [r7, #20]
 8006b50:	69b8      	ldr	r0, [r7, #24]
 8006b52:	f7ff f977 	bl	8005e44 <_SendPacket>
  RECORD_END();
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	f383 8811 	msr	BASEPRI, r3
}
 8006b5c:	bf00      	nop
 8006b5e:	3740      	adds	r7, #64	; 0x40
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	200143cc 	.word	0x200143cc

08006b68 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b08c      	sub	sp, #48	; 0x30
 8006b6c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006b6e:	4b59      	ldr	r3, [pc, #356]	; (8006cd4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006b70:	2201      	movs	r2, #1
 8006b72:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006b74:	f3ef 8311 	mrs	r3, BASEPRI
 8006b78:	f04f 0120 	mov.w	r1, #32
 8006b7c:	f381 8811 	msr	BASEPRI, r1
 8006b80:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006b82:	4b54      	ldr	r3, [pc, #336]	; (8006cd4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006b84:	785b      	ldrb	r3, [r3, #1]
 8006b86:	220a      	movs	r2, #10
 8006b88:	4953      	ldr	r1, [pc, #332]	; (8006cd8 <SEGGER_SYSVIEW_Start+0x170>)
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7f9 fb20 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006b96:	f7fe fbf7 	bl	8005388 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006b9a:	200a      	movs	r0, #10
 8006b9c:	f7ff fe28 	bl	80067f0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006ba0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ba4:	f04f 0120 	mov.w	r1, #32
 8006ba8:	f381 8811 	msr	BASEPRI, r1
 8006bac:	60bb      	str	r3, [r7, #8]
 8006bae:	484b      	ldr	r0, [pc, #300]	; (8006cdc <SEGGER_SYSVIEW_Start+0x174>)
 8006bb0:	f7ff f857 	bl	8005c62 <_PreparePacket>
 8006bb4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bbe:	4b45      	ldr	r3, [pc, #276]	; (8006cd4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bc4:	e00b      	b.n	8006bde <SEGGER_SYSVIEW_Start+0x76>
 8006bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bcc:	1c59      	adds	r1, r3, #1
 8006bce:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006bd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bd4:	b2d2      	uxtb	r2, r2
 8006bd6:	701a      	strb	r2, [r3, #0]
 8006bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bda:	09db      	lsrs	r3, r3, #7
 8006bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be0:	2b7f      	cmp	r3, #127	; 0x7f
 8006be2:	d8f0      	bhi.n	8006bc6 <SEGGER_SYSVIEW_Start+0x5e>
 8006be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bec:	b2d2      	uxtb	r2, r2
 8006bee:	701a      	strb	r2, [r3, #0]
 8006bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf8:	4b36      	ldr	r3, [pc, #216]	; (8006cd4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	623b      	str	r3, [r7, #32]
 8006bfe:	e00b      	b.n	8006c18 <SEGGER_SYSVIEW_Start+0xb0>
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	1c59      	adds	r1, r3, #1
 8006c08:	6279      	str	r1, [r7, #36]	; 0x24
 8006c0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c0e:	b2d2      	uxtb	r2, r2
 8006c10:	701a      	strb	r2, [r3, #0]
 8006c12:	6a3b      	ldr	r3, [r7, #32]
 8006c14:	09db      	lsrs	r3, r3, #7
 8006c16:	623b      	str	r3, [r7, #32]
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c1c:	d8f0      	bhi.n	8006c00 <SEGGER_SYSVIEW_Start+0x98>
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	627a      	str	r2, [r7, #36]	; 0x24
 8006c24:	6a3a      	ldr	r2, [r7, #32]
 8006c26:	b2d2      	uxtb	r2, r2
 8006c28:	701a      	strb	r2, [r3, #0]
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	61fb      	str	r3, [r7, #28]
 8006c32:	4b28      	ldr	r3, [pc, #160]	; (8006cd4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	61bb      	str	r3, [r7, #24]
 8006c38:	e00b      	b.n	8006c52 <SEGGER_SYSVIEW_Start+0xea>
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	1c59      	adds	r1, r3, #1
 8006c42:	61f9      	str	r1, [r7, #28]
 8006c44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c48:	b2d2      	uxtb	r2, r2
 8006c4a:	701a      	strb	r2, [r3, #0]
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	09db      	lsrs	r3, r3, #7
 8006c50:	61bb      	str	r3, [r7, #24]
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	2b7f      	cmp	r3, #127	; 0x7f
 8006c56:	d8f0      	bhi.n	8006c3a <SEGGER_SYSVIEW_Start+0xd2>
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	61fa      	str	r2, [r7, #28]
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	b2d2      	uxtb	r2, r2
 8006c62:	701a      	strb	r2, [r3, #0]
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	617b      	str	r3, [r7, #20]
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	613b      	str	r3, [r7, #16]
 8006c70:	e00b      	b.n	8006c8a <SEGGER_SYSVIEW_Start+0x122>
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	1c59      	adds	r1, r3, #1
 8006c7a:	6179      	str	r1, [r7, #20]
 8006c7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c80:	b2d2      	uxtb	r2, r2
 8006c82:	701a      	strb	r2, [r3, #0]
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	09db      	lsrs	r3, r3, #7
 8006c88:	613b      	str	r3, [r7, #16]
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	2b7f      	cmp	r3, #127	; 0x7f
 8006c8e:	d8f0      	bhi.n	8006c72 <SEGGER_SYSVIEW_Start+0x10a>
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	1c5a      	adds	r2, r3, #1
 8006c94:	617a      	str	r2, [r7, #20]
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	b2d2      	uxtb	r2, r2
 8006c9a:	701a      	strb	r2, [r3, #0]
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006ca0:	2218      	movs	r2, #24
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f7ff f8cd 	bl	8005e44 <_SendPacket>
      RECORD_END();
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006cb0:	4b08      	ldr	r3, [pc, #32]	; (8006cd4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d002      	beq.n	8006cbe <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006cb8:	4b06      	ldr	r3, [pc, #24]	; (8006cd4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006cbe:	f000 f9eb 	bl	8007098 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006cc2:	f000 f9b1 	bl	8007028 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006cc6:	f000 fc83 	bl	80075d0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006cca:	bf00      	nop
 8006ccc:	3730      	adds	r7, #48	; 0x30
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	2001439c 	.word	0x2001439c
 8006cd8:	08007974 	.word	0x08007974
 8006cdc:	200143cc 	.word	0x200143cc

08006ce0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006ce6:	f3ef 8311 	mrs	r3, BASEPRI
 8006cea:	f04f 0120 	mov.w	r1, #32
 8006cee:	f381 8811 	msr	BASEPRI, r1
 8006cf2:	607b      	str	r3, [r7, #4]
 8006cf4:	480b      	ldr	r0, [pc, #44]	; (8006d24 <SEGGER_SYSVIEW_Stop+0x44>)
 8006cf6:	f7fe ffb4 	bl	8005c62 <_PreparePacket>
 8006cfa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006cfc:	4b0a      	ldr	r3, [pc, #40]	; (8006d28 <SEGGER_SYSVIEW_Stop+0x48>)
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d007      	beq.n	8006d14 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006d04:	220b      	movs	r2, #11
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6838      	ldr	r0, [r7, #0]
 8006d0a:	f7ff f89b 	bl	8005e44 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006d0e:	4b06      	ldr	r3, [pc, #24]	; (8006d28 <SEGGER_SYSVIEW_Stop+0x48>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f383 8811 	msr	BASEPRI, r3
}
 8006d1a:	bf00      	nop
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	200143cc 	.word	0x200143cc
 8006d28:	2001439c 	.word	0x2001439c

08006d2c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08c      	sub	sp, #48	; 0x30
 8006d30:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d32:	f3ef 8311 	mrs	r3, BASEPRI
 8006d36:	f04f 0120 	mov.w	r1, #32
 8006d3a:	f381 8811 	msr	BASEPRI, r1
 8006d3e:	60fb      	str	r3, [r7, #12]
 8006d40:	4845      	ldr	r0, [pc, #276]	; (8006e58 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006d42:	f7fe ff8e 	bl	8005c62 <_PreparePacket>
 8006d46:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d50:	4b42      	ldr	r3, [pc, #264]	; (8006e5c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d56:	e00b      	b.n	8006d70 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5e:	1c59      	adds	r1, r3, #1
 8006d60:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006d62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d66:	b2d2      	uxtb	r2, r2
 8006d68:	701a      	strb	r2, [r3, #0]
 8006d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6c:	09db      	lsrs	r3, r3, #7
 8006d6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d72:	2b7f      	cmp	r3, #127	; 0x7f
 8006d74:	d8f0      	bhi.n	8006d58 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d78:	1c5a      	adds	r2, r3, #1
 8006d7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d7e:	b2d2      	uxtb	r2, r2
 8006d80:	701a      	strb	r2, [r3, #0]
 8006d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d84:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24
 8006d8a:	4b34      	ldr	r3, [pc, #208]	; (8006e5c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	623b      	str	r3, [r7, #32]
 8006d90:	e00b      	b.n	8006daa <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	1c59      	adds	r1, r3, #1
 8006d9a:	6279      	str	r1, [r7, #36]	; 0x24
 8006d9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006da0:	b2d2      	uxtb	r2, r2
 8006da2:	701a      	strb	r2, [r3, #0]
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	09db      	lsrs	r3, r3, #7
 8006da8:	623b      	str	r3, [r7, #32]
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	2b7f      	cmp	r3, #127	; 0x7f
 8006dae:	d8f0      	bhi.n	8006d92 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	627a      	str	r2, [r7, #36]	; 0x24
 8006db6:	6a3a      	ldr	r2, [r7, #32]
 8006db8:	b2d2      	uxtb	r2, r2
 8006dba:	701a      	strb	r2, [r3, #0]
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	61fb      	str	r3, [r7, #28]
 8006dc4:	4b25      	ldr	r3, [pc, #148]	; (8006e5c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	61bb      	str	r3, [r7, #24]
 8006dca:	e00b      	b.n	8006de4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	1c59      	adds	r1, r3, #1
 8006dd4:	61f9      	str	r1, [r7, #28]
 8006dd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dda:	b2d2      	uxtb	r2, r2
 8006ddc:	701a      	strb	r2, [r3, #0]
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	09db      	lsrs	r3, r3, #7
 8006de2:	61bb      	str	r3, [r7, #24]
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	2b7f      	cmp	r3, #127	; 0x7f
 8006de8:	d8f0      	bhi.n	8006dcc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	1c5a      	adds	r2, r3, #1
 8006dee:	61fa      	str	r2, [r7, #28]
 8006df0:	69ba      	ldr	r2, [r7, #24]
 8006df2:	b2d2      	uxtb	r2, r2
 8006df4:	701a      	strb	r2, [r3, #0]
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	617b      	str	r3, [r7, #20]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	613b      	str	r3, [r7, #16]
 8006e02:	e00b      	b.n	8006e1c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	1c59      	adds	r1, r3, #1
 8006e0c:	6179      	str	r1, [r7, #20]
 8006e0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e12:	b2d2      	uxtb	r2, r2
 8006e14:	701a      	strb	r2, [r3, #0]
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	09db      	lsrs	r3, r3, #7
 8006e1a:	613b      	str	r3, [r7, #16]
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e20:	d8f0      	bhi.n	8006e04 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	1c5a      	adds	r2, r3, #1
 8006e26:	617a      	str	r2, [r7, #20]
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	b2d2      	uxtb	r2, r2
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006e32:	2218      	movs	r2, #24
 8006e34:	6879      	ldr	r1, [r7, #4]
 8006e36:	68b8      	ldr	r0, [r7, #8]
 8006e38:	f7ff f804 	bl	8005e44 <_SendPacket>
  RECORD_END();
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006e42:	4b06      	ldr	r3, [pc, #24]	; (8006e5c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006e4a:	4b04      	ldr	r3, [pc, #16]	; (8006e5c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4e:	4798      	blx	r3
  }
}
 8006e50:	bf00      	nop
 8006e52:	3730      	adds	r7, #48	; 0x30
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	200143cc 	.word	0x200143cc
 8006e5c:	2001439c 	.word	0x2001439c

08006e60 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b092      	sub	sp, #72	; 0x48
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006e68:	f3ef 8311 	mrs	r3, BASEPRI
 8006e6c:	f04f 0120 	mov.w	r1, #32
 8006e70:	f381 8811 	msr	BASEPRI, r1
 8006e74:	617b      	str	r3, [r7, #20]
 8006e76:	486a      	ldr	r0, [pc, #424]	; (8007020 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006e78:	f7fe fef3 	bl	8005c62 <_PreparePacket>
 8006e7c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	647b      	str	r3, [r7, #68]	; 0x44
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	4b66      	ldr	r3, [pc, #408]	; (8007024 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	643b      	str	r3, [r7, #64]	; 0x40
 8006e92:	e00b      	b.n	8006eac <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e9a:	1c59      	adds	r1, r3, #1
 8006e9c:	6479      	str	r1, [r7, #68]	; 0x44
 8006e9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ea2:	b2d2      	uxtb	r2, r2
 8006ea4:	701a      	strb	r2, [r3, #0]
 8006ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ea8:	09db      	lsrs	r3, r3, #7
 8006eaa:	643b      	str	r3, [r7, #64]	; 0x40
 8006eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eae:	2b7f      	cmp	r3, #127	; 0x7f
 8006eb0:	d8f0      	bhi.n	8006e94 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eb4:	1c5a      	adds	r2, r3, #1
 8006eb6:	647a      	str	r2, [r7, #68]	; 0x44
 8006eb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	701a      	strb	r2, [r3, #0]
 8006ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ec0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ecc:	e00b      	b.n	8006ee6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ed4:	1c59      	adds	r1, r3, #1
 8006ed6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006ed8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006edc:	b2d2      	uxtb	r2, r2
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee2:	09db      	lsrs	r3, r3, #7
 8006ee4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee8:	2b7f      	cmp	r3, #127	; 0x7f
 8006eea:	d8f0      	bhi.n	8006ece <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eee:	1c5a      	adds	r2, r3, #1
 8006ef0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006ef2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ef4:	b2d2      	uxtb	r2, r2
 8006ef6:	701a      	strb	r2, [r3, #0]
 8006ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006efa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	2220      	movs	r2, #32
 8006f02:	4619      	mov	r1, r3
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f7fe fe5f 	bl	8005bc8 <_EncodeStr>
 8006f0a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006f0c:	2209      	movs	r2, #9
 8006f0e:	68f9      	ldr	r1, [r7, #12]
 8006f10:	6938      	ldr	r0, [r7, #16]
 8006f12:	f7fe ff97 	bl	8005e44 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	4b40      	ldr	r3, [pc, #256]	; (8007024 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	633b      	str	r3, [r7, #48]	; 0x30
 8006f2a:	e00b      	b.n	8006f44 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f32:	1c59      	adds	r1, r3, #1
 8006f34:	6379      	str	r1, [r7, #52]	; 0x34
 8006f36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f3a:	b2d2      	uxtb	r2, r2
 8006f3c:	701a      	strb	r2, [r3, #0]
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f40:	09db      	lsrs	r3, r3, #7
 8006f42:	633b      	str	r3, [r7, #48]	; 0x30
 8006f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f46:	2b7f      	cmp	r3, #127	; 0x7f
 8006f48:	d8f0      	bhi.n	8006f2c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f4c:	1c5a      	adds	r2, r3, #1
 8006f4e:	637a      	str	r2, [r7, #52]	; 0x34
 8006f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f52:	b2d2      	uxtb	r2, r2
 8006f54:	701a      	strb	r2, [r3, #0]
 8006f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f58:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f64:	e00b      	b.n	8006f7e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6c:	1c59      	adds	r1, r3, #1
 8006f6e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006f70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f74:	b2d2      	uxtb	r2, r2
 8006f76:	701a      	strb	r2, [r3, #0]
 8006f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7a:	09db      	lsrs	r3, r3, #7
 8006f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f80:	2b7f      	cmp	r3, #127	; 0x7f
 8006f82:	d8f0      	bhi.n	8006f66 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f86:	1c5a      	adds	r2, r3, #1
 8006f88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f8c:	b2d2      	uxtb	r2, r2
 8006f8e:	701a      	strb	r2, [r3, #0]
 8006f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f92:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	627b      	str	r3, [r7, #36]	; 0x24
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	623b      	str	r3, [r7, #32]
 8006f9e:	e00b      	b.n	8006fb8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006fa0:	6a3b      	ldr	r3, [r7, #32]
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	1c59      	adds	r1, r3, #1
 8006fa8:	6279      	str	r1, [r7, #36]	; 0x24
 8006faa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fae:	b2d2      	uxtb	r2, r2
 8006fb0:	701a      	strb	r2, [r3, #0]
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	09db      	lsrs	r3, r3, #7
 8006fb6:	623b      	str	r3, [r7, #32]
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	2b7f      	cmp	r3, #127	; 0x7f
 8006fbc:	d8f0      	bhi.n	8006fa0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc0:	1c5a      	adds	r2, r3, #1
 8006fc2:	627a      	str	r2, [r7, #36]	; 0x24
 8006fc4:	6a3a      	ldr	r2, [r7, #32]
 8006fc6:	b2d2      	uxtb	r2, r2
 8006fc8:	701a      	strb	r2, [r3, #0]
 8006fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fcc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	61fb      	str	r3, [r7, #28]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	61bb      	str	r3, [r7, #24]
 8006fd6:	e00b      	b.n	8006ff0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	1c59      	adds	r1, r3, #1
 8006fe0:	61f9      	str	r1, [r7, #28]
 8006fe2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fe6:	b2d2      	uxtb	r2, r2
 8006fe8:	701a      	strb	r2, [r3, #0]
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	09db      	lsrs	r3, r3, #7
 8006fee:	61bb      	str	r3, [r7, #24]
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ff4:	d8f0      	bhi.n	8006fd8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	61fa      	str	r2, [r7, #28]
 8006ffc:	69ba      	ldr	r2, [r7, #24]
 8006ffe:	b2d2      	uxtb	r2, r2
 8007000:	701a      	strb	r2, [r3, #0]
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007006:	2215      	movs	r2, #21
 8007008:	68f9      	ldr	r1, [r7, #12]
 800700a:	6938      	ldr	r0, [r7, #16]
 800700c:	f7fe ff1a 	bl	8005e44 <_SendPacket>
  RECORD_END();
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f383 8811 	msr	BASEPRI, r3
}
 8007016:	bf00      	nop
 8007018:	3748      	adds	r7, #72	; 0x48
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	200143cc 	.word	0x200143cc
 8007024:	2001439c 	.word	0x2001439c

08007028 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007028:	b580      	push	{r7, lr}
 800702a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800702c:	4b07      	ldr	r3, [pc, #28]	; (800704c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d008      	beq.n	8007046 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007034:	4b05      	ldr	r3, [pc, #20]	; (800704c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800703e:	4b03      	ldr	r3, [pc, #12]	; (800704c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	4798      	blx	r3
  }
}
 8007046:	bf00      	nop
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	2001439c 	.word	0x2001439c

08007050 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007058:	f3ef 8311 	mrs	r3, BASEPRI
 800705c:	f04f 0120 	mov.w	r1, #32
 8007060:	f381 8811 	msr	BASEPRI, r1
 8007064:	617b      	str	r3, [r7, #20]
 8007066:	480b      	ldr	r0, [pc, #44]	; (8007094 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007068:	f7fe fdfb 	bl	8005c62 <_PreparePacket>
 800706c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800706e:	2280      	movs	r2, #128	; 0x80
 8007070:	6879      	ldr	r1, [r7, #4]
 8007072:	6938      	ldr	r0, [r7, #16]
 8007074:	f7fe fda8 	bl	8005bc8 <_EncodeStr>
 8007078:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800707a:	220e      	movs	r2, #14
 800707c:	68f9      	ldr	r1, [r7, #12]
 800707e:	6938      	ldr	r0, [r7, #16]
 8007080:	f7fe fee0 	bl	8005e44 <_SendPacket>
  RECORD_END();
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f383 8811 	msr	BASEPRI, r3
}
 800708a:	bf00      	nop
 800708c:	3718      	adds	r7, #24
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	200143cc 	.word	0x200143cc

08007098 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007098:	b590      	push	{r4, r7, lr}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800709e:	4b15      	ldr	r3, [pc, #84]	; (80070f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d01a      	beq.n	80070dc <SEGGER_SYSVIEW_RecordSystime+0x44>
 80070a6:	4b13      	ldr	r3, [pc, #76]	; (80070f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d015      	beq.n	80070dc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80070b0:	4b10      	ldr	r3, [pc, #64]	; (80070f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80070b2:	6a1b      	ldr	r3, [r3, #32]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4798      	blx	r3
 80070b8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80070bc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80070be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070c2:	f04f 0200 	mov.w	r2, #0
 80070c6:	f04f 0300 	mov.w	r3, #0
 80070ca:	000a      	movs	r2, r1
 80070cc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80070ce:	4613      	mov	r3, r2
 80070d0:	461a      	mov	r2, r3
 80070d2:	4621      	mov	r1, r4
 80070d4:	200d      	movs	r0, #13
 80070d6:	f7ff fbe5 	bl	80068a4 <SEGGER_SYSVIEW_RecordU32x2>
 80070da:	e006      	b.n	80070ea <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80070dc:	4b06      	ldr	r3, [pc, #24]	; (80070f8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4619      	mov	r1, r3
 80070e2:	200c      	movs	r0, #12
 80070e4:	f7ff fba2 	bl	800682c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80070e8:	bf00      	nop
 80070ea:	bf00      	nop
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd90      	pop	{r4, r7, pc}
 80070f2:	bf00      	nop
 80070f4:	2001439c 	.word	0x2001439c
 80070f8:	e0001004 	.word	0xe0001004

080070fc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007102:	f3ef 8311 	mrs	r3, BASEPRI
 8007106:	f04f 0120 	mov.w	r1, #32
 800710a:	f381 8811 	msr	BASEPRI, r1
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	4819      	ldr	r0, [pc, #100]	; (8007178 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007112:	f7fe fda6 	bl	8005c62 <_PreparePacket>
 8007116:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800711c:	4b17      	ldr	r3, [pc, #92]	; (800717c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007124:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	617b      	str	r3, [r7, #20]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	613b      	str	r3, [r7, #16]
 800712e:	e00b      	b.n	8007148 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	b2da      	uxtb	r2, r3
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	1c59      	adds	r1, r3, #1
 8007138:	6179      	str	r1, [r7, #20]
 800713a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800713e:	b2d2      	uxtb	r2, r2
 8007140:	701a      	strb	r2, [r3, #0]
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	09db      	lsrs	r3, r3, #7
 8007146:	613b      	str	r3, [r7, #16]
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	2b7f      	cmp	r3, #127	; 0x7f
 800714c:	d8f0      	bhi.n	8007130 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	1c5a      	adds	r2, r3, #1
 8007152:	617a      	str	r2, [r7, #20]
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	b2d2      	uxtb	r2, r2
 8007158:	701a      	strb	r2, [r3, #0]
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800715e:	2202      	movs	r2, #2
 8007160:	6879      	ldr	r1, [r7, #4]
 8007162:	68b8      	ldr	r0, [r7, #8]
 8007164:	f7fe fe6e 	bl	8005e44 <_SendPacket>
  RECORD_END();
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f383 8811 	msr	BASEPRI, r3
}
 800716e:	bf00      	nop
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	200143cc 	.word	0x200143cc
 800717c:	e000ed04 	.word	0xe000ed04

08007180 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007186:	f3ef 8311 	mrs	r3, BASEPRI
 800718a:	f04f 0120 	mov.w	r1, #32
 800718e:	f381 8811 	msr	BASEPRI, r1
 8007192:	607b      	str	r3, [r7, #4]
 8007194:	4807      	ldr	r0, [pc, #28]	; (80071b4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007196:	f7fe fd64 	bl	8005c62 <_PreparePacket>
 800719a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800719c:	2203      	movs	r2, #3
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	6838      	ldr	r0, [r7, #0]
 80071a2:	f7fe fe4f 	bl	8005e44 <_SendPacket>
  RECORD_END();
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f383 8811 	msr	BASEPRI, r3
}
 80071ac:	bf00      	nop
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	200143cc 	.word	0x200143cc

080071b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80071be:	f3ef 8311 	mrs	r3, BASEPRI
 80071c2:	f04f 0120 	mov.w	r1, #32
 80071c6:	f381 8811 	msr	BASEPRI, r1
 80071ca:	607b      	str	r3, [r7, #4]
 80071cc:	4807      	ldr	r0, [pc, #28]	; (80071ec <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80071ce:	f7fe fd48 	bl	8005c62 <_PreparePacket>
 80071d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80071d4:	2212      	movs	r2, #18
 80071d6:	6839      	ldr	r1, [r7, #0]
 80071d8:	6838      	ldr	r0, [r7, #0]
 80071da:	f7fe fe33 	bl	8005e44 <_SendPacket>
  RECORD_END();
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f383 8811 	msr	BASEPRI, r3
}
 80071e4:	bf00      	nop
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	200143cc 	.word	0x200143cc

080071f0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80071f6:	f3ef 8311 	mrs	r3, BASEPRI
 80071fa:	f04f 0120 	mov.w	r1, #32
 80071fe:	f381 8811 	msr	BASEPRI, r1
 8007202:	607b      	str	r3, [r7, #4]
 8007204:	4807      	ldr	r0, [pc, #28]	; (8007224 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007206:	f7fe fd2c 	bl	8005c62 <_PreparePacket>
 800720a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800720c:	2211      	movs	r2, #17
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	6838      	ldr	r0, [r7, #0]
 8007212:	f7fe fe17 	bl	8005e44 <_SendPacket>
  RECORD_END();
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f383 8811 	msr	BASEPRI, r3
}
 800721c:	bf00      	nop
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	200143cc 	.word	0x200143cc

08007228 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007228:	b580      	push	{r7, lr}
 800722a:	b088      	sub	sp, #32
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007230:	f3ef 8311 	mrs	r3, BASEPRI
 8007234:	f04f 0120 	mov.w	r1, #32
 8007238:	f381 8811 	msr	BASEPRI, r1
 800723c:	617b      	str	r3, [r7, #20]
 800723e:	4819      	ldr	r0, [pc, #100]	; (80072a4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007240:	f7fe fd0f 	bl	8005c62 <_PreparePacket>
 8007244:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800724a:	4b17      	ldr	r3, [pc, #92]	; (80072a8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	61fb      	str	r3, [r7, #28]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	61bb      	str	r3, [r7, #24]
 800725c:	e00b      	b.n	8007276 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	b2da      	uxtb	r2, r3
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	1c59      	adds	r1, r3, #1
 8007266:	61f9      	str	r1, [r7, #28]
 8007268:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800726c:	b2d2      	uxtb	r2, r2
 800726e:	701a      	strb	r2, [r3, #0]
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	09db      	lsrs	r3, r3, #7
 8007274:	61bb      	str	r3, [r7, #24]
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	2b7f      	cmp	r3, #127	; 0x7f
 800727a:	d8f0      	bhi.n	800725e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	1c5a      	adds	r2, r3, #1
 8007280:	61fa      	str	r2, [r7, #28]
 8007282:	69ba      	ldr	r2, [r7, #24]
 8007284:	b2d2      	uxtb	r2, r2
 8007286:	701a      	strb	r2, [r3, #0]
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800728c:	2208      	movs	r2, #8
 800728e:	68f9      	ldr	r1, [r7, #12]
 8007290:	6938      	ldr	r0, [r7, #16]
 8007292:	f7fe fdd7 	bl	8005e44 <_SendPacket>
  RECORD_END();
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f383 8811 	msr	BASEPRI, r3
}
 800729c:	bf00      	nop
 800729e:	3720      	adds	r7, #32
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	200143cc 	.word	0x200143cc
 80072a8:	2001439c 	.word	0x2001439c

080072ac <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b088      	sub	sp, #32
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80072b4:	f3ef 8311 	mrs	r3, BASEPRI
 80072b8:	f04f 0120 	mov.w	r1, #32
 80072bc:	f381 8811 	msr	BASEPRI, r1
 80072c0:	617b      	str	r3, [r7, #20]
 80072c2:	4819      	ldr	r0, [pc, #100]	; (8007328 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80072c4:	f7fe fccd 	bl	8005c62 <_PreparePacket>
 80072c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80072ce:	4b17      	ldr	r3, [pc, #92]	; (800732c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	61fb      	str	r3, [r7, #28]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	61bb      	str	r3, [r7, #24]
 80072e0:	e00b      	b.n	80072fa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	b2da      	uxtb	r2, r3
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	1c59      	adds	r1, r3, #1
 80072ea:	61f9      	str	r1, [r7, #28]
 80072ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072f0:	b2d2      	uxtb	r2, r2
 80072f2:	701a      	strb	r2, [r3, #0]
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	09db      	lsrs	r3, r3, #7
 80072f8:	61bb      	str	r3, [r7, #24]
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	2b7f      	cmp	r3, #127	; 0x7f
 80072fe:	d8f0      	bhi.n	80072e2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	61fa      	str	r2, [r7, #28]
 8007306:	69ba      	ldr	r2, [r7, #24]
 8007308:	b2d2      	uxtb	r2, r2
 800730a:	701a      	strb	r2, [r3, #0]
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007310:	2204      	movs	r2, #4
 8007312:	68f9      	ldr	r1, [r7, #12]
 8007314:	6938      	ldr	r0, [r7, #16]
 8007316:	f7fe fd95 	bl	8005e44 <_SendPacket>
  RECORD_END();
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f383 8811 	msr	BASEPRI, r3
}
 8007320:	bf00      	nop
 8007322:	3720      	adds	r7, #32
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	200143cc 	.word	0x200143cc
 800732c:	2001439c 	.word	0x2001439c

08007330 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007338:	f3ef 8311 	mrs	r3, BASEPRI
 800733c:	f04f 0120 	mov.w	r1, #32
 8007340:	f381 8811 	msr	BASEPRI, r1
 8007344:	617b      	str	r3, [r7, #20]
 8007346:	4819      	ldr	r0, [pc, #100]	; (80073ac <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007348:	f7fe fc8b 	bl	8005c62 <_PreparePacket>
 800734c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007352:	4b17      	ldr	r3, [pc, #92]	; (80073b0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	61fb      	str	r3, [r7, #28]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	61bb      	str	r3, [r7, #24]
 8007364:	e00b      	b.n	800737e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	b2da      	uxtb	r2, r3
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	1c59      	adds	r1, r3, #1
 800736e:	61f9      	str	r1, [r7, #28]
 8007370:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007374:	b2d2      	uxtb	r2, r2
 8007376:	701a      	strb	r2, [r3, #0]
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	09db      	lsrs	r3, r3, #7
 800737c:	61bb      	str	r3, [r7, #24]
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	2b7f      	cmp	r3, #127	; 0x7f
 8007382:	d8f0      	bhi.n	8007366 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	1c5a      	adds	r2, r3, #1
 8007388:	61fa      	str	r2, [r7, #28]
 800738a:	69ba      	ldr	r2, [r7, #24]
 800738c:	b2d2      	uxtb	r2, r2
 800738e:	701a      	strb	r2, [r3, #0]
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007394:	2206      	movs	r2, #6
 8007396:	68f9      	ldr	r1, [r7, #12]
 8007398:	6938      	ldr	r0, [r7, #16]
 800739a:	f7fe fd53 	bl	8005e44 <_SendPacket>
  RECORD_END();
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f383 8811 	msr	BASEPRI, r3
}
 80073a4:	bf00      	nop
 80073a6:	3720      	adds	r7, #32
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	200143cc 	.word	0x200143cc
 80073b0:	2001439c 	.word	0x2001439c

080073b4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b08a      	sub	sp, #40	; 0x28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80073be:	f3ef 8311 	mrs	r3, BASEPRI
 80073c2:	f04f 0120 	mov.w	r1, #32
 80073c6:	f381 8811 	msr	BASEPRI, r1
 80073ca:	617b      	str	r3, [r7, #20]
 80073cc:	4827      	ldr	r0, [pc, #156]	; (800746c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80073ce:	f7fe fc48 	bl	8005c62 <_PreparePacket>
 80073d2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80073d8:	4b25      	ldr	r3, [pc, #148]	; (8007470 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	627b      	str	r3, [r7, #36]	; 0x24
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	623b      	str	r3, [r7, #32]
 80073ea:	e00b      	b.n	8007404 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80073ec:	6a3b      	ldr	r3, [r7, #32]
 80073ee:	b2da      	uxtb	r2, r3
 80073f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f2:	1c59      	adds	r1, r3, #1
 80073f4:	6279      	str	r1, [r7, #36]	; 0x24
 80073f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073fa:	b2d2      	uxtb	r2, r2
 80073fc:	701a      	strb	r2, [r3, #0]
 80073fe:	6a3b      	ldr	r3, [r7, #32]
 8007400:	09db      	lsrs	r3, r3, #7
 8007402:	623b      	str	r3, [r7, #32]
 8007404:	6a3b      	ldr	r3, [r7, #32]
 8007406:	2b7f      	cmp	r3, #127	; 0x7f
 8007408:	d8f0      	bhi.n	80073ec <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	1c5a      	adds	r2, r3, #1
 800740e:	627a      	str	r2, [r7, #36]	; 0x24
 8007410:	6a3a      	ldr	r2, [r7, #32]
 8007412:	b2d2      	uxtb	r2, r2
 8007414:	701a      	strb	r2, [r3, #0]
 8007416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007418:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	61fb      	str	r3, [r7, #28]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	61bb      	str	r3, [r7, #24]
 8007422:	e00b      	b.n	800743c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	b2da      	uxtb	r2, r3
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	1c59      	adds	r1, r3, #1
 800742c:	61f9      	str	r1, [r7, #28]
 800742e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007432:	b2d2      	uxtb	r2, r2
 8007434:	701a      	strb	r2, [r3, #0]
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	09db      	lsrs	r3, r3, #7
 800743a:	61bb      	str	r3, [r7, #24]
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	2b7f      	cmp	r3, #127	; 0x7f
 8007440:	d8f0      	bhi.n	8007424 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	1c5a      	adds	r2, r3, #1
 8007446:	61fa      	str	r2, [r7, #28]
 8007448:	69ba      	ldr	r2, [r7, #24]
 800744a:	b2d2      	uxtb	r2, r2
 800744c:	701a      	strb	r2, [r3, #0]
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007452:	2207      	movs	r2, #7
 8007454:	68f9      	ldr	r1, [r7, #12]
 8007456:	6938      	ldr	r0, [r7, #16]
 8007458:	f7fe fcf4 	bl	8005e44 <_SendPacket>
  RECORD_END();
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	f383 8811 	msr	BASEPRI, r3
}
 8007462:	bf00      	nop
 8007464:	3728      	adds	r7, #40	; 0x28
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	200143cc 	.word	0x200143cc
 8007470:	2001439c 	.word	0x2001439c

08007474 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800747c:	4b04      	ldr	r3, [pc, #16]	; (8007490 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	1ad3      	subs	r3, r2, r3
}
 8007484:	4618      	mov	r0, r3
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	2001439c 	.word	0x2001439c

08007494 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007494:	b580      	push	{r7, lr}
 8007496:	b08c      	sub	sp, #48	; 0x30
 8007498:	af00      	add	r7, sp, #0
 800749a:	4603      	mov	r3, r0
 800749c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800749e:	4b3b      	ldr	r3, [pc, #236]	; (800758c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d06d      	beq.n	8007582 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80074a6:	4b39      	ldr	r3, [pc, #228]	; (800758c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80074ac:	2300      	movs	r3, #0
 80074ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80074b0:	e008      	b.n	80074c4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80074b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80074b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d007      	beq.n	80074ce <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80074be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c0:	3301      	adds	r3, #1
 80074c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80074c4:	79fb      	ldrb	r3, [r7, #7]
 80074c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d3f2      	bcc.n	80074b2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80074cc:	e000      	b.n	80074d0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80074ce:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80074d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d055      	beq.n	8007582 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80074d6:	f3ef 8311 	mrs	r3, BASEPRI
 80074da:	f04f 0120 	mov.w	r1, #32
 80074de:	f381 8811 	msr	BASEPRI, r1
 80074e2:	617b      	str	r3, [r7, #20]
 80074e4:	482a      	ldr	r0, [pc, #168]	; (8007590 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80074e6:	f7fe fbbc 	bl	8005c62 <_PreparePacket>
 80074ea:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	627b      	str	r3, [r7, #36]	; 0x24
 80074f4:	79fb      	ldrb	r3, [r7, #7]
 80074f6:	623b      	str	r3, [r7, #32]
 80074f8:	e00b      	b.n	8007512 <SEGGER_SYSVIEW_SendModule+0x7e>
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	1c59      	adds	r1, r3, #1
 8007502:	6279      	str	r1, [r7, #36]	; 0x24
 8007504:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007508:	b2d2      	uxtb	r2, r2
 800750a:	701a      	strb	r2, [r3, #0]
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	09db      	lsrs	r3, r3, #7
 8007510:	623b      	str	r3, [r7, #32]
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	2b7f      	cmp	r3, #127	; 0x7f
 8007516:	d8f0      	bhi.n	80074fa <SEGGER_SYSVIEW_SendModule+0x66>
 8007518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751a:	1c5a      	adds	r2, r3, #1
 800751c:	627a      	str	r2, [r7, #36]	; 0x24
 800751e:	6a3a      	ldr	r2, [r7, #32]
 8007520:	b2d2      	uxtb	r2, r2
 8007522:	701a      	strb	r2, [r3, #0]
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007526:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	61fb      	str	r3, [r7, #28]
 800752c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	61bb      	str	r3, [r7, #24]
 8007532:	e00b      	b.n	800754c <SEGGER_SYSVIEW_SendModule+0xb8>
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	b2da      	uxtb	r2, r3
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	1c59      	adds	r1, r3, #1
 800753c:	61f9      	str	r1, [r7, #28]
 800753e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007542:	b2d2      	uxtb	r2, r2
 8007544:	701a      	strb	r2, [r3, #0]
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	09db      	lsrs	r3, r3, #7
 800754a:	61bb      	str	r3, [r7, #24]
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	2b7f      	cmp	r3, #127	; 0x7f
 8007550:	d8f0      	bhi.n	8007534 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	1c5a      	adds	r2, r3, #1
 8007556:	61fa      	str	r2, [r7, #28]
 8007558:	69ba      	ldr	r2, [r7, #24]
 800755a:	b2d2      	uxtb	r2, r2
 800755c:	701a      	strb	r2, [r3, #0]
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2280      	movs	r2, #128	; 0x80
 8007568:	4619      	mov	r1, r3
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f7fe fb2c 	bl	8005bc8 <_EncodeStr>
 8007570:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007572:	2216      	movs	r2, #22
 8007574:	68f9      	ldr	r1, [r7, #12]
 8007576:	6938      	ldr	r0, [r7, #16]
 8007578:	f7fe fc64 	bl	8005e44 <_SendPacket>
      RECORD_END();
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007582:	bf00      	nop
 8007584:	3730      	adds	r7, #48	; 0x30
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	200143c4 	.word	0x200143c4
 8007590:	200143cc 	.word	0x200143cc

08007594 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800759a:	4b0c      	ldr	r3, [pc, #48]	; (80075cc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00f      	beq.n	80075c2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80075a2:	4b0a      	ldr	r3, [pc, #40]	; (80075cc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d002      	beq.n	80075b6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1f2      	bne.n	80075a8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80075c2:	bf00      	nop
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	200143c4 	.word	0x200143c4

080075d0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80075d6:	f3ef 8311 	mrs	r3, BASEPRI
 80075da:	f04f 0120 	mov.w	r1, #32
 80075de:	f381 8811 	msr	BASEPRI, r1
 80075e2:	60fb      	str	r3, [r7, #12]
 80075e4:	4817      	ldr	r0, [pc, #92]	; (8007644 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80075e6:	f7fe fb3c 	bl	8005c62 <_PreparePacket>
 80075ea:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	617b      	str	r3, [r7, #20]
 80075f4:	4b14      	ldr	r3, [pc, #80]	; (8007648 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	613b      	str	r3, [r7, #16]
 80075fa:	e00b      	b.n	8007614 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	b2da      	uxtb	r2, r3
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	1c59      	adds	r1, r3, #1
 8007604:	6179      	str	r1, [r7, #20]
 8007606:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800760a:	b2d2      	uxtb	r2, r2
 800760c:	701a      	strb	r2, [r3, #0]
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	09db      	lsrs	r3, r3, #7
 8007612:	613b      	str	r3, [r7, #16]
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	2b7f      	cmp	r3, #127	; 0x7f
 8007618:	d8f0      	bhi.n	80075fc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	1c5a      	adds	r2, r3, #1
 800761e:	617a      	str	r2, [r7, #20]
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	b2d2      	uxtb	r2, r2
 8007624:	701a      	strb	r2, [r3, #0]
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800762a:	221b      	movs	r2, #27
 800762c:	6879      	ldr	r1, [r7, #4]
 800762e:	68b8      	ldr	r0, [r7, #8]
 8007630:	f7fe fc08 	bl	8005e44 <_SendPacket>
  RECORD_END();
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f383 8811 	msr	BASEPRI, r3
}
 800763a:	bf00      	nop
 800763c:	3718      	adds	r7, #24
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	200143cc 	.word	0x200143cc
 8007648:	200143c8 	.word	0x200143c8

0800764c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 800764c:	b40f      	push	{r0, r1, r2, r3}
 800764e:	b580      	push	{r7, lr}
 8007650:	b082      	sub	sp, #8
 8007652:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007654:	f107 0314 	add.w	r3, r7, #20
 8007658:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800765a:	1d3b      	adds	r3, r7, #4
 800765c:	461a      	mov	r2, r3
 800765e:	2100      	movs	r1, #0
 8007660:	6938      	ldr	r0, [r7, #16]
 8007662:	f7fe fe79 	bl	8006358 <_VPrintTarget>
  va_end(ParamList);
}
 8007666:	bf00      	nop
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007670:	b004      	add	sp, #16
 8007672:	4770      	bx	lr

08007674 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007674:	b580      	push	{r7, lr}
 8007676:	b08a      	sub	sp, #40	; 0x28
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800767c:	f3ef 8311 	mrs	r3, BASEPRI
 8007680:	f04f 0120 	mov.w	r1, #32
 8007684:	f381 8811 	msr	BASEPRI, r1
 8007688:	617b      	str	r3, [r7, #20]
 800768a:	4827      	ldr	r0, [pc, #156]	; (8007728 <SEGGER_SYSVIEW_Warn+0xb4>)
 800768c:	f7fe fae9 	bl	8005c62 <_PreparePacket>
 8007690:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007692:	2280      	movs	r2, #128	; 0x80
 8007694:	6879      	ldr	r1, [r7, #4]
 8007696:	6938      	ldr	r0, [r7, #16]
 8007698:	f7fe fa96 	bl	8005bc8 <_EncodeStr>
 800769c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	627b      	str	r3, [r7, #36]	; 0x24
 80076a2:	2301      	movs	r3, #1
 80076a4:	623b      	str	r3, [r7, #32]
 80076a6:	e00b      	b.n	80076c0 <SEGGER_SYSVIEW_Warn+0x4c>
 80076a8:	6a3b      	ldr	r3, [r7, #32]
 80076aa:	b2da      	uxtb	r2, r3
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	1c59      	adds	r1, r3, #1
 80076b0:	6279      	str	r1, [r7, #36]	; 0x24
 80076b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076b6:	b2d2      	uxtb	r2, r2
 80076b8:	701a      	strb	r2, [r3, #0]
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	09db      	lsrs	r3, r3, #7
 80076be:	623b      	str	r3, [r7, #32]
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	2b7f      	cmp	r3, #127	; 0x7f
 80076c4:	d8f0      	bhi.n	80076a8 <SEGGER_SYSVIEW_Warn+0x34>
 80076c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c8:	1c5a      	adds	r2, r3, #1
 80076ca:	627a      	str	r2, [r7, #36]	; 0x24
 80076cc:	6a3a      	ldr	r2, [r7, #32]
 80076ce:	b2d2      	uxtb	r2, r2
 80076d0:	701a      	strb	r2, [r3, #0]
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	61fb      	str	r3, [r7, #28]
 80076da:	2300      	movs	r3, #0
 80076dc:	61bb      	str	r3, [r7, #24]
 80076de:	e00b      	b.n	80076f8 <SEGGER_SYSVIEW_Warn+0x84>
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	b2da      	uxtb	r2, r3
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	1c59      	adds	r1, r3, #1
 80076e8:	61f9      	str	r1, [r7, #28]
 80076ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076ee:	b2d2      	uxtb	r2, r2
 80076f0:	701a      	strb	r2, [r3, #0]
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	09db      	lsrs	r3, r3, #7
 80076f6:	61bb      	str	r3, [r7, #24]
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	2b7f      	cmp	r3, #127	; 0x7f
 80076fc:	d8f0      	bhi.n	80076e0 <SEGGER_SYSVIEW_Warn+0x6c>
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	61fa      	str	r2, [r7, #28]
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	b2d2      	uxtb	r2, r2
 8007708:	701a      	strb	r2, [r3, #0]
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800770e:	221a      	movs	r2, #26
 8007710:	68f9      	ldr	r1, [r7, #12]
 8007712:	6938      	ldr	r0, [r7, #16]
 8007714:	f7fe fb96 	bl	8005e44 <_SendPacket>
  RECORD_END();
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	f383 8811 	msr	BASEPRI, r3
}
 800771e:	bf00      	nop
 8007720:	3728      	adds	r7, #40	; 0x28
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	200143cc 	.word	0x200143cc

0800772c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 800772c:	b580      	push	{r7, lr}
 800772e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007730:	4b13      	ldr	r3, [pc, #76]	; (8007780 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007732:	7e1b      	ldrb	r3, [r3, #24]
 8007734:	4619      	mov	r1, r3
 8007736:	4a13      	ldr	r2, [pc, #76]	; (8007784 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007738:	460b      	mov	r3, r1
 800773a:	005b      	lsls	r3, r3, #1
 800773c:	440b      	add	r3, r1
 800773e:	00db      	lsls	r3, r3, #3
 8007740:	4413      	add	r3, r2
 8007742:	336c      	adds	r3, #108	; 0x6c
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	4b0e      	ldr	r3, [pc, #56]	; (8007780 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007748:	7e1b      	ldrb	r3, [r3, #24]
 800774a:	4618      	mov	r0, r3
 800774c:	490d      	ldr	r1, [pc, #52]	; (8007784 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800774e:	4603      	mov	r3, r0
 8007750:	005b      	lsls	r3, r3, #1
 8007752:	4403      	add	r3, r0
 8007754:	00db      	lsls	r3, r3, #3
 8007756:	440b      	add	r3, r1
 8007758:	3370      	adds	r3, #112	; 0x70
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	429a      	cmp	r2, r3
 800775e:	d00b      	beq.n	8007778 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007760:	4b07      	ldr	r3, [pc, #28]	; (8007780 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007762:	789b      	ldrb	r3, [r3, #2]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d107      	bne.n	8007778 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007768:	4b05      	ldr	r3, [pc, #20]	; (8007780 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800776a:	2201      	movs	r2, #1
 800776c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800776e:	f7fe fa85 	bl	8005c7c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007772:	4b03      	ldr	r3, [pc, #12]	; (8007780 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007774:	2200      	movs	r2, #0
 8007776:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007778:	4b01      	ldr	r3, [pc, #4]	; (8007780 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800777a:	781b      	ldrb	r3, [r3, #0]
}
 800777c:	4618      	mov	r0, r3
 800777e:	bd80      	pop	{r7, pc}
 8007780:	2001439c 	.word	0x2001439c
 8007784:	20012edc 	.word	0x20012edc

08007788 <memcmp>:
 8007788:	b510      	push	{r4, lr}
 800778a:	3901      	subs	r1, #1
 800778c:	4402      	add	r2, r0
 800778e:	4290      	cmp	r0, r2
 8007790:	d101      	bne.n	8007796 <memcmp+0xe>
 8007792:	2000      	movs	r0, #0
 8007794:	e005      	b.n	80077a2 <memcmp+0x1a>
 8007796:	7803      	ldrb	r3, [r0, #0]
 8007798:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800779c:	42a3      	cmp	r3, r4
 800779e:	d001      	beq.n	80077a4 <memcmp+0x1c>
 80077a0:	1b18      	subs	r0, r3, r4
 80077a2:	bd10      	pop	{r4, pc}
 80077a4:	3001      	adds	r0, #1
 80077a6:	e7f2      	b.n	800778e <memcmp+0x6>

080077a8 <memset>:
 80077a8:	4402      	add	r2, r0
 80077aa:	4603      	mov	r3, r0
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d100      	bne.n	80077b2 <memset+0xa>
 80077b0:	4770      	bx	lr
 80077b2:	f803 1b01 	strb.w	r1, [r3], #1
 80077b6:	e7f9      	b.n	80077ac <memset+0x4>

080077b8 <__libc_init_array>:
 80077b8:	b570      	push	{r4, r5, r6, lr}
 80077ba:	4d0d      	ldr	r5, [pc, #52]	; (80077f0 <__libc_init_array+0x38>)
 80077bc:	4c0d      	ldr	r4, [pc, #52]	; (80077f4 <__libc_init_array+0x3c>)
 80077be:	1b64      	subs	r4, r4, r5
 80077c0:	10a4      	asrs	r4, r4, #2
 80077c2:	2600      	movs	r6, #0
 80077c4:	42a6      	cmp	r6, r4
 80077c6:	d109      	bne.n	80077dc <__libc_init_array+0x24>
 80077c8:	4d0b      	ldr	r5, [pc, #44]	; (80077f8 <__libc_init_array+0x40>)
 80077ca:	4c0c      	ldr	r4, [pc, #48]	; (80077fc <__libc_init_array+0x44>)
 80077cc:	f000 f826 	bl	800781c <_init>
 80077d0:	1b64      	subs	r4, r4, r5
 80077d2:	10a4      	asrs	r4, r4, #2
 80077d4:	2600      	movs	r6, #0
 80077d6:	42a6      	cmp	r6, r4
 80077d8:	d105      	bne.n	80077e6 <__libc_init_array+0x2e>
 80077da:	bd70      	pop	{r4, r5, r6, pc}
 80077dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80077e0:	4798      	blx	r3
 80077e2:	3601      	adds	r6, #1
 80077e4:	e7ee      	b.n	80077c4 <__libc_init_array+0xc>
 80077e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80077ea:	4798      	blx	r3
 80077ec:	3601      	adds	r6, #1
 80077ee:	e7f2      	b.n	80077d6 <__libc_init_array+0x1e>
 80077f0:	08007998 	.word	0x08007998
 80077f4:	08007998 	.word	0x08007998
 80077f8:	08007998 	.word	0x08007998
 80077fc:	0800799c 	.word	0x0800799c

08007800 <memcpy>:
 8007800:	440a      	add	r2, r1
 8007802:	4291      	cmp	r1, r2
 8007804:	f100 33ff 	add.w	r3, r0, #4294967295
 8007808:	d100      	bne.n	800780c <memcpy+0xc>
 800780a:	4770      	bx	lr
 800780c:	b510      	push	{r4, lr}
 800780e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007812:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007816:	4291      	cmp	r1, r2
 8007818:	d1f9      	bne.n	800780e <memcpy+0xe>
 800781a:	bd10      	pop	{r4, pc}

0800781c <_init>:
 800781c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781e:	bf00      	nop
 8007820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007822:	bc08      	pop	{r3}
 8007824:	469e      	mov	lr, r3
 8007826:	4770      	bx	lr

08007828 <_fini>:
 8007828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782a:	bf00      	nop
 800782c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800782e:	bc08      	pop	{r3}
 8007830:	469e      	mov	lr, r3
 8007832:	4770      	bx	lr
