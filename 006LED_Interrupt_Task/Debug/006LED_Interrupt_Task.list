
006LED_Interrupt_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08007bb8  08007bb8  00017bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d58  08007d58  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08007d58  08007d58  00017d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d60  08007d60  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d60  08007d60  00017d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d64  08007d64  00017d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          000144a0  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200144bc  200144bc  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013f0f  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003183  00000000  00000000  00033f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001360  00000000  00000000  00037128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000edf  00000000  00000000  00038488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023a92  00000000  00000000  00039367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016309  00000000  00000000  0005cdf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d8104  00000000  00000000  00073102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000050d8  00000000  00000000  0014b208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000da  00000000  00000000  001502e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ba0 	.word	0x08007ba0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08007ba0 	.word	0x08007ba0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ee8 	.word	0x20012ee8

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b970 	b.w	800055c <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9e08      	ldr	r6, [sp, #32]
 800029a:	460d      	mov	r5, r1
 800029c:	4604      	mov	r4, r0
 800029e:	460f      	mov	r7, r1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d14a      	bne.n	800033a <__udivmoddi4+0xa6>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4694      	mov	ip, r2
 80002a8:	d965      	bls.n	8000376 <__udivmoddi4+0xe2>
 80002aa:	fab2 f382 	clz	r3, r2
 80002ae:	b143      	cbz	r3, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002b4:	f1c3 0220 	rsb	r2, r3, #32
 80002b8:	409f      	lsls	r7, r3
 80002ba:	fa20 f202 	lsr.w	r2, r0, r2
 80002be:	4317      	orrs	r7, r2
 80002c0:	409c      	lsls	r4, r3
 80002c2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002c6:	fa1f f58c 	uxth.w	r5, ip
 80002ca:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ce:	0c22      	lsrs	r2, r4, #16
 80002d0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002d4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002d8:	fb01 f005 	mul.w	r0, r1, r5
 80002dc:	4290      	cmp	r0, r2
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x62>
 80002e0:	eb1c 0202 	adds.w	r2, ip, r2
 80002e4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002e8:	f080 811c 	bcs.w	8000524 <__udivmoddi4+0x290>
 80002ec:	4290      	cmp	r0, r2
 80002ee:	f240 8119 	bls.w	8000524 <__udivmoddi4+0x290>
 80002f2:	3902      	subs	r1, #2
 80002f4:	4462      	add	r2, ip
 80002f6:	1a12      	subs	r2, r2, r0
 80002f8:	b2a4      	uxth	r4, r4
 80002fa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002fe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000302:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000306:	fb00 f505 	mul.w	r5, r0, r5
 800030a:	42a5      	cmp	r5, r4
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x90>
 800030e:	eb1c 0404 	adds.w	r4, ip, r4
 8000312:	f100 32ff 	add.w	r2, r0, #4294967295
 8000316:	f080 8107 	bcs.w	8000528 <__udivmoddi4+0x294>
 800031a:	42a5      	cmp	r5, r4
 800031c:	f240 8104 	bls.w	8000528 <__udivmoddi4+0x294>
 8000320:	4464      	add	r4, ip
 8000322:	3802      	subs	r0, #2
 8000324:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000328:	1b64      	subs	r4, r4, r5
 800032a:	2100      	movs	r1, #0
 800032c:	b11e      	cbz	r6, 8000336 <__udivmoddi4+0xa2>
 800032e:	40dc      	lsrs	r4, r3
 8000330:	2300      	movs	r3, #0
 8000332:	e9c6 4300 	strd	r4, r3, [r6]
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0xbc>
 800033e:	2e00      	cmp	r6, #0
 8000340:	f000 80ed 	beq.w	800051e <__udivmoddi4+0x28a>
 8000344:	2100      	movs	r1, #0
 8000346:	e9c6 0500 	strd	r0, r5, [r6]
 800034a:	4608      	mov	r0, r1
 800034c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000350:	fab3 f183 	clz	r1, r3
 8000354:	2900      	cmp	r1, #0
 8000356:	d149      	bne.n	80003ec <__udivmoddi4+0x158>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d302      	bcc.n	8000362 <__udivmoddi4+0xce>
 800035c:	4282      	cmp	r2, r0
 800035e:	f200 80f8 	bhi.w	8000552 <__udivmoddi4+0x2be>
 8000362:	1a84      	subs	r4, r0, r2
 8000364:	eb65 0203 	sbc.w	r2, r5, r3
 8000368:	2001      	movs	r0, #1
 800036a:	4617      	mov	r7, r2
 800036c:	2e00      	cmp	r6, #0
 800036e:	d0e2      	beq.n	8000336 <__udivmoddi4+0xa2>
 8000370:	e9c6 4700 	strd	r4, r7, [r6]
 8000374:	e7df      	b.n	8000336 <__udivmoddi4+0xa2>
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xe6>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f382 	clz	r3, r2
 800037e:	2b00      	cmp	r3, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x210>
 8000384:	1a8a      	subs	r2, r1, r2
 8000386:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	2101      	movs	r1, #1
 8000390:	fbb2 f5f7 	udiv	r5, r2, r7
 8000394:	fb07 2015 	mls	r0, r7, r5, r2
 8000398:	0c22      	lsrs	r2, r4, #16
 800039a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800039e:	fb0e f005 	mul.w	r0, lr, r5
 80003a2:	4290      	cmp	r0, r2
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x124>
 80003a6:	eb1c 0202 	adds.w	r2, ip, r2
 80003aa:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x122>
 80003b0:	4290      	cmp	r0, r2
 80003b2:	f200 80cb 	bhi.w	800054c <__udivmoddi4+0x2b8>
 80003b6:	4645      	mov	r5, r8
 80003b8:	1a12      	subs	r2, r2, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb2 f0f7 	udiv	r0, r2, r7
 80003c0:	fb07 2210 	mls	r2, r7, r0, r2
 80003c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003c8:	fb0e fe00 	mul.w	lr, lr, r0
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x14e>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003d8:	d202      	bcs.n	80003e0 <__udivmoddi4+0x14c>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f200 80bb 	bhi.w	8000556 <__udivmoddi4+0x2c2>
 80003e0:	4610      	mov	r0, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ea:	e79f      	b.n	800032c <__udivmoddi4+0x98>
 80003ec:	f1c1 0720 	rsb	r7, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003fa:	fa05 f401 	lsl.w	r4, r5, r1
 80003fe:	fa20 f307 	lsr.w	r3, r0, r7
 8000402:	40fd      	lsrs	r5, r7
 8000404:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fbb5 f8f9 	udiv	r8, r5, r9
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	fb09 5518 	mls	r5, r9, r8, r5
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800041c:	fb08 f50e 	mul.w	r5, r8, lr
 8000420:	42a5      	cmp	r5, r4
 8000422:	fa02 f201 	lsl.w	r2, r2, r1
 8000426:	fa00 f001 	lsl.w	r0, r0, r1
 800042a:	d90b      	bls.n	8000444 <__udivmoddi4+0x1b0>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f108 3aff 	add.w	sl, r8, #4294967295
 8000434:	f080 8088 	bcs.w	8000548 <__udivmoddi4+0x2b4>
 8000438:	42a5      	cmp	r5, r4
 800043a:	f240 8085 	bls.w	8000548 <__udivmoddi4+0x2b4>
 800043e:	f1a8 0802 	sub.w	r8, r8, #2
 8000442:	4464      	add	r4, ip
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	b29d      	uxth	r5, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000454:	fb03 fe0e 	mul.w	lr, r3, lr
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1da>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f103 35ff 	add.w	r5, r3, #4294967295
 8000464:	d26c      	bcs.n	8000540 <__udivmoddi4+0x2ac>
 8000466:	45a6      	cmp	lr, r4
 8000468:	d96a      	bls.n	8000540 <__udivmoddi4+0x2ac>
 800046a:	3b02      	subs	r3, #2
 800046c:	4464      	add	r4, ip
 800046e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000472:	fba3 9502 	umull	r9, r5, r3, r2
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	42ac      	cmp	r4, r5
 800047c:	46c8      	mov	r8, r9
 800047e:	46ae      	mov	lr, r5
 8000480:	d356      	bcc.n	8000530 <__udivmoddi4+0x29c>
 8000482:	d053      	beq.n	800052c <__udivmoddi4+0x298>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x208>
 8000486:	ebb0 0208 	subs.w	r2, r0, r8
 800048a:	eb64 040e 	sbc.w	r4, r4, lr
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40ca      	lsrs	r2, r1
 8000494:	40cc      	lsrs	r4, r1
 8000496:	4317      	orrs	r7, r2
 8000498:	e9c6 7400 	strd	r7, r4, [r6]
 800049c:	4618      	mov	r0, r3
 800049e:	2100      	movs	r1, #0
 80004a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a4:	f1c3 0120 	rsb	r1, r3, #32
 80004a8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ac:	fa20 f201 	lsr.w	r2, r0, r1
 80004b0:	fa25 f101 	lsr.w	r1, r5, r1
 80004b4:	409d      	lsls	r5, r3
 80004b6:	432a      	orrs	r2, r5
 80004b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004bc:	fa1f fe8c 	uxth.w	lr, ip
 80004c0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004c4:	fb07 1510 	mls	r5, r7, r0, r1
 80004c8:	0c11      	lsrs	r1, r2, #16
 80004ca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ce:	fb00 f50e 	mul.w	r5, r0, lr
 80004d2:	428d      	cmp	r5, r1
 80004d4:	fa04 f403 	lsl.w	r4, r4, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x258>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e2:	d22f      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 80004e4:	428d      	cmp	r5, r1
 80004e6:	d92d      	bls.n	8000544 <__udivmoddi4+0x2b0>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4461      	add	r1, ip
 80004ec:	1b49      	subs	r1, r1, r5
 80004ee:	b292      	uxth	r2, r2
 80004f0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004f4:	fb07 1115 	mls	r1, r7, r5, r1
 80004f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fc:	fb05 f10e 	mul.w	r1, r5, lr
 8000500:	4291      	cmp	r1, r2
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x282>
 8000504:	eb1c 0202 	adds.w	r2, ip, r2
 8000508:	f105 38ff 	add.w	r8, r5, #4294967295
 800050c:	d216      	bcs.n	800053c <__udivmoddi4+0x2a8>
 800050e:	4291      	cmp	r1, r2
 8000510:	d914      	bls.n	800053c <__udivmoddi4+0x2a8>
 8000512:	3d02      	subs	r5, #2
 8000514:	4462      	add	r2, ip
 8000516:	1a52      	subs	r2, r2, r1
 8000518:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800051c:	e738      	b.n	8000390 <__udivmoddi4+0xfc>
 800051e:	4631      	mov	r1, r6
 8000520:	4630      	mov	r0, r6
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xa2>
 8000524:	4639      	mov	r1, r7
 8000526:	e6e6      	b.n	80002f6 <__udivmoddi4+0x62>
 8000528:	4610      	mov	r0, r2
 800052a:	e6fb      	b.n	8000324 <__udivmoddi4+0x90>
 800052c:	4548      	cmp	r0, r9
 800052e:	d2a9      	bcs.n	8000484 <__udivmoddi4+0x1f0>
 8000530:	ebb9 0802 	subs.w	r8, r9, r2
 8000534:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000538:	3b01      	subs	r3, #1
 800053a:	e7a3      	b.n	8000484 <__udivmoddi4+0x1f0>
 800053c:	4645      	mov	r5, r8
 800053e:	e7ea      	b.n	8000516 <__udivmoddi4+0x282>
 8000540:	462b      	mov	r3, r5
 8000542:	e794      	b.n	800046e <__udivmoddi4+0x1da>
 8000544:	4640      	mov	r0, r8
 8000546:	e7d1      	b.n	80004ec <__udivmoddi4+0x258>
 8000548:	46d0      	mov	r8, sl
 800054a:	e77b      	b.n	8000444 <__udivmoddi4+0x1b0>
 800054c:	3d02      	subs	r5, #2
 800054e:	4462      	add	r2, ip
 8000550:	e732      	b.n	80003b8 <__udivmoddi4+0x124>
 8000552:	4608      	mov	r0, r1
 8000554:	e70a      	b.n	800036c <__udivmoddi4+0xd8>
 8000556:	4464      	add	r4, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e742      	b.n	80003e2 <__udivmoddi4+0x14e>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fc35 	bl	8000dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f877 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f8df 	bl	8000730 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_UART_init(500000);
 8000572:	482e      	ldr	r0, [pc, #184]	; (800062c <main+0xcc>)
 8000574:	f004 ffc0 	bl	80054f8 <SEGGER_UART_init>

//  Cyclic count enable
  DWT_CTRL |=(1<<0);
 8000578:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <main+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a2c      	ldr	r2, [pc, #176]	; (8000630 <main+0xd0>)
 800057e:	f043 0301 	orr.w	r3, r3, #1
 8000582:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000584:	f004 fd26 	bl	8004fd4 <SEGGER_SYSVIEW_Conf>

//  task creation
  status = xTaskCreate(led_green_handler,
 8000588:	4b2a      	ldr	r3, [pc, #168]	; (8000634 <main+0xd4>)
 800058a:	9301      	str	r3, [sp, #4]
 800058c:	2303      	movs	r3, #3
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2300      	movs	r3, #0
 8000592:	22c8      	movs	r2, #200	; 0xc8
 8000594:	4928      	ldr	r1, [pc, #160]	; (8000638 <main+0xd8>)
 8000596:	4829      	ldr	r0, [pc, #164]	; (800063c <main+0xdc>)
 8000598:	f002 fc9a 	bl	8002ed0 <xTaskCreate>
 800059c:	60f8      	str	r0, [r7, #12]
              NULL,
              3,
              &ledg_task_handle
                            );

  configASSERT(status == pdPASS);
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d00a      	beq.n	80005ba <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a8:	f383 8811 	msr	BASEPRI, r3
 80005ac:	f3bf 8f6f 	isb	sy
 80005b0:	f3bf 8f4f 	dsb	sy
 80005b4:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b6:	bf00      	nop
 80005b8:	e7fe      	b.n	80005b8 <main+0x58>

  next_task_handle = ledg_task_handle;
 80005ba:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <main+0xd4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a20      	ldr	r2, [pc, #128]	; (8000640 <main+0xe0>)
 80005c0:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_red_handler,
 80005c2:	4b20      	ldr	r3, [pc, #128]	; (8000644 <main+0xe4>)
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2301      	movs	r3, #1
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	22c8      	movs	r2, #200	; 0xc8
 80005ce:	491e      	ldr	r1, [pc, #120]	; (8000648 <main+0xe8>)
 80005d0:	481e      	ldr	r0, [pc, #120]	; (800064c <main+0xec>)
 80005d2:	f002 fc7d 	bl	8002ed0 <xTaskCreate>
 80005d6:	60f8      	str	r0, [r7, #12]
                NULL,
                1,
                &ledr_task_handle
                              );

  configASSERT(status == pdPASS);
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d00a      	beq.n	80005f4 <main+0x94>
        __asm volatile
 80005de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e2:	f383 8811 	msr	BASEPRI, r3
 80005e6:	f3bf 8f6f 	isb	sy
 80005ea:	f3bf 8f4f 	dsb	sy
 80005ee:	607b      	str	r3, [r7, #4]
    }
 80005f0:	bf00      	nop
 80005f2:	e7fe      	b.n	80005f2 <main+0x92>

  status = xTaskCreate(led_orange_handler,
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <main+0xf0>)
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	2302      	movs	r3, #2
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2300      	movs	r3, #0
 80005fe:	22c8      	movs	r2, #200	; 0xc8
 8000600:	4914      	ldr	r1, [pc, #80]	; (8000654 <main+0xf4>)
 8000602:	4815      	ldr	r0, [pc, #84]	; (8000658 <main+0xf8>)
 8000604:	f002 fc64 	bl	8002ed0 <xTaskCreate>
 8000608:	60f8      	str	r0, [r7, #12]
                NULL,
                2,
				&ledo_task_handle
                              );

   configASSERT(status == pdPASS);
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d00a      	beq.n	8000626 <main+0xc6>
        __asm volatile
 8000610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000614:	f383 8811 	msr	BASEPRI, r3
 8000618:	f3bf 8f6f 	isb	sy
 800061c:	f3bf 8f4f 	dsb	sy
 8000620:	603b      	str	r3, [r7, #0]
    }
 8000622:	bf00      	nop
 8000624:	e7fe      	b.n	8000624 <main+0xc4>


   vTaskStartScheduler();
 8000626:	f002 fe61 	bl	80032ec <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062a:	e7fe      	b.n	800062a <main+0xca>
 800062c:	0007a120 	.word	0x0007a120
 8000630:	e0001000 	.word	0xe0001000
 8000634:	20000038 	.word	0x20000038
 8000638:	08007bb8 	.word	0x08007bb8
 800063c:	08000a55 	.word	0x08000a55
 8000640:	20000044 	.word	0x20000044
 8000644:	2000003c 	.word	0x2000003c
 8000648:	08007bc8 	.word	0x08007bc8
 800064c:	08000b25 	.word	0x08000b25
 8000650:	20000040 	.word	0x20000040
 8000654:	08007bd8 	.word	0x08007bd8
 8000658:	08000abd 	.word	0x08000abd

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f007 fa5e 	bl	8007b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b28      	ldr	r3, [pc, #160]	; (8000728 <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a27      	ldr	r2, [pc, #156]	; (8000728 <SystemClock_Config+0xcc>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b25      	ldr	r3, [pc, #148]	; (8000728 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b22      	ldr	r3, [pc, #136]	; (800072c <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a21      	ldr	r2, [pc, #132]	; (800072c <SystemClock_Config+0xd0>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006cc:	2308      	movs	r3, #8
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006d0:	2332      	movs	r3, #50	; 0x32
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d8:	2307      	movs	r3, #7
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fe8f 	bl	8001404 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ec:	f000 fa62 	bl	8000bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f001 f8f0 	bl	80018f4 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800071a:	f000 fa4b 	bl	8000bb4 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	; 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	; 0x30
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
 800074a:	4ba6      	ldr	r3, [pc, #664]	; (80009e4 <MX_GPIO_Init+0x2b4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4aa5      	ldr	r2, [pc, #660]	; (80009e4 <MX_GPIO_Init+0x2b4>)
 8000750:	f043 0310 	orr.w	r3, r3, #16
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4ba3      	ldr	r3, [pc, #652]	; (80009e4 <MX_GPIO_Init+0x2b4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0310 	and.w	r3, r3, #16
 800075e:	61bb      	str	r3, [r7, #24]
 8000760:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	4b9f      	ldr	r3, [pc, #636]	; (80009e4 <MX_GPIO_Init+0x2b4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a9e      	ldr	r2, [pc, #632]	; (80009e4 <MX_GPIO_Init+0x2b4>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b9c      	ldr	r3, [pc, #624]	; (80009e4 <MX_GPIO_Init+0x2b4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b98      	ldr	r3, [pc, #608]	; (80009e4 <MX_GPIO_Init+0x2b4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a97      	ldr	r2, [pc, #604]	; (80009e4 <MX_GPIO_Init+0x2b4>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b95      	ldr	r3, [pc, #596]	; (80009e4 <MX_GPIO_Init+0x2b4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b91      	ldr	r3, [pc, #580]	; (80009e4 <MX_GPIO_Init+0x2b4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a90      	ldr	r2, [pc, #576]	; (80009e4 <MX_GPIO_Init+0x2b4>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b8e      	ldr	r3, [pc, #568]	; (80009e4 <MX_GPIO_Init+0x2b4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b8a      	ldr	r3, [pc, #552]	; (80009e4 <MX_GPIO_Init+0x2b4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a89      	ldr	r2, [pc, #548]	; (80009e4 <MX_GPIO_Init+0x2b4>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b87      	ldr	r3, [pc, #540]	; (80009e4 <MX_GPIO_Init+0x2b4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b83      	ldr	r3, [pc, #524]	; (80009e4 <MX_GPIO_Init+0x2b4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a82      	ldr	r2, [pc, #520]	; (80009e4 <MX_GPIO_Init+0x2b4>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b80      	ldr	r3, [pc, #512]	; (80009e4 <MX_GPIO_Init+0x2b4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2108      	movs	r1, #8
 80007f2:	487d      	ldr	r0, [pc, #500]	; (80009e8 <MX_GPIO_Init+0x2b8>)
 80007f4:	f000 fdae 	bl	8001354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2101      	movs	r1, #1
 80007fc:	487b      	ldr	r0, [pc, #492]	; (80009ec <MX_GPIO_Init+0x2bc>)
 80007fe:	f000 fda9 	bl	8001354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000802:	2200      	movs	r2, #0
 8000804:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000808:	4879      	ldr	r0, [pc, #484]	; (80009f0 <MX_GPIO_Init+0x2c0>)
 800080a:	f000 fda3 	bl	8001354 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800080e:	2308      	movs	r3, #8
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	4870      	ldr	r0, [pc, #448]	; (80009e8 <MX_GPIO_Init+0x2b8>)
 8000826:	f000 fbf9 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800082a:	2301      	movs	r3, #1
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	486a      	ldr	r0, [pc, #424]	; (80009ec <MX_GPIO_Init+0x2bc>)
 8000842:	f000 fbeb 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000846:	2308      	movs	r3, #8
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000856:	2305      	movs	r3, #5
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4862      	ldr	r0, [pc, #392]	; (80009ec <MX_GPIO_Init+0x2bc>)
 8000862:	f000 fbdb 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000866:	2301      	movs	r3, #1
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800086a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	485e      	ldr	r0, [pc, #376]	; (80009f4 <MX_GPIO_Init+0x2c4>)
 800087c:	f000 fbce 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000880:	2310      	movs	r3, #16
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000890:	2306      	movs	r3, #6
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	4856      	ldr	r0, [pc, #344]	; (80009f4 <MX_GPIO_Init+0x2c4>)
 800089c:	f000 fbbe 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008a0:	23e0      	movs	r3, #224	; 0xe0
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008b0:	2305      	movs	r3, #5
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	484e      	ldr	r0, [pc, #312]	; (80009f4 <MX_GPIO_Init+0x2c4>)
 80008bc:	f000 fbae 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008c0:	2304      	movs	r3, #4
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4849      	ldr	r0, [pc, #292]	; (80009f8 <MX_GPIO_Init+0x2c8>)
 80008d4:	f000 fba2 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ea:	2305      	movs	r3, #5
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4840      	ldr	r0, [pc, #256]	; (80009f8 <MX_GPIO_Init+0x2c8>)
 80008f6:	f000 fb91 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008fa:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008fe:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4837      	ldr	r0, [pc, #220]	; (80009f0 <MX_GPIO_Init+0x2c0>)
 8000914:	f000 fb82 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000918:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800092a:	2306      	movs	r3, #6
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	482d      	ldr	r0, [pc, #180]	; (80009ec <MX_GPIO_Init+0x2bc>)
 8000936:	f000 fb71 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800093a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4829      	ldr	r0, [pc, #164]	; (80009f4 <MX_GPIO_Init+0x2c4>)
 8000950:	f000 fb64 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000954:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000966:	230a      	movs	r3, #10
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4820      	ldr	r0, [pc, #128]	; (80009f4 <MX_GPIO_Init+0x2c4>)
 8000972:	f000 fb53 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000976:	2320      	movs	r3, #32
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4819      	ldr	r0, [pc, #100]	; (80009f0 <MX_GPIO_Init+0x2c0>)
 800098a:	f000 fb47 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800098e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000994:	2312      	movs	r3, #18
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009a0:	2304      	movs	r3, #4
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	4813      	ldr	r0, [pc, #76]	; (80009f8 <MX_GPIO_Init+0x2c8>)
 80009ac:	f000 fb36 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009b0:	2302      	movs	r3, #2
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4808      	ldr	r0, [pc, #32]	; (80009e8 <MX_GPIO_Init+0x2b8>)
 80009c6:	f000 fb29 	bl	800101c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2105      	movs	r1, #5
 80009ce:	2006      	movs	r0, #6
 80009d0:	f000 fafa 	bl	8000fc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009d4:	2006      	movs	r0, #6
 80009d6:	f000 fb13 	bl	8001000 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009da:	bf00      	nop
 80009dc:	3730      	adds	r7, #48	; 0x30
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40020800 	.word	0x40020800
 80009f0:	40020c00 	.word	0x40020c00
 80009f4:	40020000 	.word	0x40020000
 80009f8:	40020400 	.word	0x40020400

080009fc <button_interrupt_handler>:

/* USER CODE BEGIN 4 */
void button_interrupt_handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af02      	add	r7, sp, #8
	BaseType_t pxHigherPriorityTaskWoken;

	pxHigherPriorityTaskWoken=pdFALSE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]

	traceISR_ENTER();
 8000a06:	f006 fd3b 	bl	8007480 <SEGGER_SYSVIEW_RecordEnterISR>
	xTaskNotifyFromISR(next_task_handle,0,eNoAction,&pxHigherPriorityTaskWoken);
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <button_interrupt_handler+0x50>)
 8000a0c:	6818      	ldr	r0, [r3, #0]
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	9301      	str	r3, [sp, #4]
 8000a12:	2300      	movs	r3, #0
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	2300      	movs	r3, #0
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	f003 f9d6 	bl	8003dcc <xTaskGenericNotifyFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d00a      	beq.n	8000a3c <button_interrupt_handler+0x40>
 8000a26:	f006 fd89 	bl	800753c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <button_interrupt_handler+0x54>)
 8000a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	f3bf 8f4f 	dsb	sy
 8000a36:	f3bf 8f6f 	isb	sy
 8000a3a:	e001      	b.n	8000a40 <button_interrupt_handler+0x44>
 8000a3c:	f006 fd62 	bl	8007504 <SEGGER_SYSVIEW_RecordExitISR>

	traceISR_EXIT();
 8000a40:	f006 fd60 	bl	8007504 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000044 	.word	0x20000044
 8000a50:	e000ed04 	.word	0xe000ed04

08000a54 <led_green_handler>:

static void led_green_handler(void* parameters)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af02      	add	r7, sp, #8
 8000a5a:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a5c:	4813      	ldr	r0, [pc, #76]	; (8000aac <led_green_handler+0x58>)
 8000a5e:	f006 ffb7 	bl	80079d0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a66:	4812      	ldr	r0, [pc, #72]	; (8000ab0 <led_green_handler+0x5c>)
 8000a68:	f000 fc8d 	bl	8001386 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL,pdMS_TO_TICKS(1000));
 8000a6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	2300      	movs	r3, #0
 8000a74:	2200      	movs	r2, #0
 8000a76:	2100      	movs	r1, #0
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f003 f91f 	bl	8003cbc <xTaskGenericNotifyWait>
 8000a7e:	60f8      	str	r0, [r7, #12]
		if(status==pdTRUE)
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d1ea      	bne.n	8000a5c <led_green_handler+0x8>
		{
			portENTER_CRITICAL();
 8000a86:	f003 ff6f 	bl	8004968 <vPortEnterCritical>
			next_task_handle=ledo_task_handle;
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <led_green_handler+0x60>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <led_green_handler+0x64>)
 8000a90:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <led_green_handler+0x5c>)
 8000a9a:	f000 fc5b 	bl	8001354 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 8000a9e:	f003 ff93 	bl	80049c8 <vPortExitCritical>
			vTaskDelete(NULL);
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f002 fb78 	bl	8003198 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000aa8:	e7d8      	b.n	8000a5c <led_green_handler+0x8>
 8000aaa:	bf00      	nop
 8000aac:	08007be8 	.word	0x08007be8
 8000ab0:	40020c00 	.word	0x40020c00
 8000ab4:	20000040 	.word	0x20000040
 8000ab8:	20000044 	.word	0x20000044

08000abc <led_orange_handler>:
		}
	}
}

static void led_orange_handler(void* parameters)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af02      	add	r7, sp, #8
 8000ac2:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000ac4:	4813      	ldr	r0, [pc, #76]	; (8000b14 <led_orange_handler+0x58>)
 8000ac6:	f006 ff83 	bl	80079d0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000aca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ace:	4812      	ldr	r0, [pc, #72]	; (8000b18 <led_orange_handler+0x5c>)
 8000ad0:	f000 fc59 	bl	8001386 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL,pdMS_TO_TICKS(1000));
 8000ad4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	2300      	movs	r3, #0
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f003 f8eb 	bl	8003cbc <xTaskGenericNotifyWait>
 8000ae6:	60f8      	str	r0, [r7, #12]
		if(status==pdTRUE)
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d1ea      	bne.n	8000ac4 <led_orange_handler+0x8>
		{
			portENTER_CRITICAL();
 8000aee:	f003 ff3b 	bl	8004968 <vPortEnterCritical>
			next_task_handle=ledr_task_handle;
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <led_orange_handler+0x60>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <led_orange_handler+0x64>)
 8000af8:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN, GPIO_PIN_SET);
 8000afa:	2201      	movs	r2, #1
 8000afc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <led_orange_handler+0x5c>)
 8000b02:	f000 fc27 	bl	8001354 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 8000b06:	f003 ff5f 	bl	80049c8 <vPortExitCritical>
			vTaskDelete(NULL);
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f002 fb44 	bl	8003198 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000b10:	e7d8      	b.n	8000ac4 <led_orange_handler+0x8>
 8000b12:	bf00      	nop
 8000b14:	08007bfc 	.word	0x08007bfc
 8000b18:	40020c00 	.word	0x40020c00
 8000b1c:	2000003c 	.word	0x2000003c
 8000b20:	20000044 	.word	0x20000044

08000b24 <led_red_handler>:
		}
	}
}
static void led_red_handler(void* parameters)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af02      	add	r7, sp, #8
 8000b2a:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000b2c:	4814      	ldr	r0, [pc, #80]	; (8000b80 <led_red_handler+0x5c>)
 8000b2e:	f006 ff4f 	bl	80079d0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000b32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b36:	4813      	ldr	r0, [pc, #76]	; (8000b84 <led_red_handler+0x60>)
 8000b38:	f000 fc25 	bl	8001386 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL,pdMS_TO_TICKS(1000));
 8000b3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	2300      	movs	r3, #0
 8000b44:	2200      	movs	r2, #0
 8000b46:	2100      	movs	r1, #0
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f003 f8b7 	bl	8003cbc <xTaskGenericNotifyWait>
 8000b4e:	60f8      	str	r0, [r7, #12]
		if(status==pdTRUE)
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d1ea      	bne.n	8000b2c <led_red_handler+0x8>
		{
			portENTER_CRITICAL();
 8000b56:	f003 ff07 	bl	8004968 <vPortEnterCritical>
			next_task_handle = NULL;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <led_red_handler+0x64>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, LED_RED_PIN, GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b66:	4807      	ldr	r0, [pc, #28]	; (8000b84 <led_red_handler+0x60>)
 8000b68:	f000 fbf4 	bl	8001354 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete 3 tasks");
 8000b6c:	4807      	ldr	r0, [pc, #28]	; (8000b8c <led_red_handler+0x68>)
 8000b6e:	f006 ff2f 	bl	80079d0 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000b72:	f003 ff29 	bl	80049c8 <vPortExitCritical>
			vTaskDelete(NULL);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f002 fb0e 	bl	8003198 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000b7c:	e7d6      	b.n	8000b2c <led_red_handler+0x8>
 8000b7e:	bf00      	nop
 8000b80:	08007c10 	.word	0x08007c10
 8000b84:	40020c00 	.word	0x40020c00
 8000b88:	20000044 	.word	0x20000044
 8000b8c:	08007c24 	.word	0x08007c24

08000b90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d101      	bne.n	8000ba6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ba2:	f000 f939 	bl	8000e18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40001000 	.word	0x40001000

08000bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb8:	b672      	cpsid	i
}
 8000bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <Error_Handler+0x8>
	...

08000bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	4a0f      	ldr	r2, [pc, #60]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	603b      	str	r3, [r7, #0]
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <HAL_MspInit+0x4c>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800

08000c10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08e      	sub	sp, #56	; 0x38
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	4b33      	ldr	r3, [pc, #204]	; (8000cf4 <HAL_InitTick+0xe4>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	4a32      	ldr	r2, [pc, #200]	; (8000cf4 <HAL_InitTick+0xe4>)
 8000c2a:	f043 0310 	orr.w	r3, r3, #16
 8000c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c30:	4b30      	ldr	r3, [pc, #192]	; (8000cf4 <HAL_InitTick+0xe4>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	f003 0310 	and.w	r3, r3, #16
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c3c:	f107 0210 	add.w	r2, r7, #16
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4611      	mov	r1, r2
 8000c46:	4618      	mov	r0, r3
 8000c48:	f001 f860 	bl	8001d0c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c4c:	6a3b      	ldr	r3, [r7, #32]
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d103      	bne.n	8000c5e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c56:	f001 f845 	bl	8001ce4 <HAL_RCC_GetPCLK1Freq>
 8000c5a:	6378      	str	r0, [r7, #52]	; 0x34
 8000c5c:	e004      	b.n	8000c68 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c5e:	f001 f841 	bl	8001ce4 <HAL_RCC_GetPCLK1Freq>
 8000c62:	4603      	mov	r3, r0
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c6a:	4a23      	ldr	r2, [pc, #140]	; (8000cf8 <HAL_InitTick+0xe8>)
 8000c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c70:	0c9b      	lsrs	r3, r3, #18
 8000c72:	3b01      	subs	r3, #1
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <HAL_InitTick+0xec>)
 8000c78:	4a21      	ldr	r2, [pc, #132]	; (8000d00 <HAL_InitTick+0xf0>)
 8000c7a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <HAL_InitTick+0xec>)
 8000c7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c82:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c84:	4a1d      	ldr	r2, [pc, #116]	; (8000cfc <HAL_InitTick+0xec>)
 8000c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c88:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <HAL_InitTick+0xec>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <HAL_InitTick+0xec>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <HAL_InitTick+0xec>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c9c:	4817      	ldr	r0, [pc, #92]	; (8000cfc <HAL_InitTick+0xec>)
 8000c9e:	f001 f867 	bl	8001d70 <HAL_TIM_Base_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ca8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d11b      	bne.n	8000ce8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cb0:	4812      	ldr	r0, [pc, #72]	; (8000cfc <HAL_InitTick+0xec>)
 8000cb2:	f001 f8b7 	bl	8001e24 <HAL_TIM_Base_Start_IT>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000cbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d111      	bne.n	8000ce8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f000 f99b 	bl	8001000 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b0f      	cmp	r3, #15
 8000cce:	d808      	bhi.n	8000ce2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	2036      	movs	r0, #54	; 0x36
 8000cd6:	f000 f977 	bl	8000fc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <HAL_InitTick+0xf4>)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	e002      	b.n	8000ce8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ce8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3738      	adds	r7, #56	; 0x38
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	431bde83 	.word	0x431bde83
 8000cfc:	20000048 	.word	0x20000048
 8000d00:	40001000 	.word	0x40001000
 8000d04:	20000004 	.word	0x20000004

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d0c:	e7fe      	b.n	8000d0c <NMI_Handler+0x4>

08000d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	button_interrupt_handler();
 8000d38:	f7ff fe60 	bl	80009fc <button_interrupt_handler>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f000 fb3d 	bl	80013bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <TIM6_DAC_IRQHandler+0x10>)
 8000d4e:	f001 f8d9 	bl	8001f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000048 	.word	0x20000048

08000d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d84:	f7ff ffea 	bl	8000d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d88:	480c      	ldr	r0, [pc, #48]	; (8000dbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d8a:	490d      	ldr	r1, [pc, #52]	; (8000dc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da0:	4c0a      	ldr	r4, [pc, #40]	; (8000dcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dae:	f006 fec5 	bl	8007b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db2:	f7ff fbd5 	bl	8000560 <main>
  bx  lr    
 8000db6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000db8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000dc4:	08007d68 	.word	0x08007d68
  ldr r2, =_sbss
 8000dc8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000dcc:	200144bc 	.word	0x200144bc

08000dd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <HAL_Init+0x40>)
 8000dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <HAL_Init+0x40>)
 8000dea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <HAL_Init+0x40>)
 8000df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f000 f8d8 	bl	8000fb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff ff04 	bl	8000c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e08:	f7ff feda 	bl	8000bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023c00 	.word	0x40023c00

08000e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_IncTick+0x20>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x24>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <HAL_IncTick+0x24>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	20000090 	.word	0x20000090

08000e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <HAL_GetTick+0x14>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000090 	.word	0x20000090

08000e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e74:	4013      	ands	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8a:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	60d3      	str	r3, [r2, #12]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	f003 0307 	and.w	r3, r3, #7
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	db0b      	blt.n	8000ee6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	f003 021f 	and.w	r2, r3, #31
 8000ed4:	4907      	ldr	r1, [pc, #28]	; (8000ef4 <__NVIC_EnableIRQ+0x38>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	095b      	lsrs	r3, r3, #5
 8000edc:	2001      	movs	r0, #1
 8000ede:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000e100 	.word	0xe000e100

08000ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	db0a      	blt.n	8000f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	490c      	ldr	r1, [pc, #48]	; (8000f44 <__NVIC_SetPriority+0x4c>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	0112      	lsls	r2, r2, #4
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f20:	e00a      	b.n	8000f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4908      	ldr	r1, [pc, #32]	; (8000f48 <__NVIC_SetPriority+0x50>)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	3b04      	subs	r3, #4
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	440b      	add	r3, r1
 8000f36:	761a      	strb	r2, [r3, #24]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000e100 	.word	0xe000e100
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f1c3 0307 	rsb	r3, r3, #7
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	bf28      	it	cs
 8000f6a:	2304      	movcs	r3, #4
 8000f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3304      	adds	r3, #4
 8000f72:	2b06      	cmp	r3, #6
 8000f74:	d902      	bls.n	8000f7c <NVIC_EncodePriority+0x30>
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3b03      	subs	r3, #3
 8000f7a:	e000      	b.n	8000f7e <NVIC_EncodePriority+0x32>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	f04f 32ff 	mov.w	r2, #4294967295
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	401a      	ands	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f94:	f04f 31ff 	mov.w	r1, #4294967295
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9e:	43d9      	mvns	r1, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	4313      	orrs	r3, r2
         );
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3724      	adds	r7, #36	; 0x24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ff4c 	bl	8000e58 <__NVIC_SetPriorityGrouping>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fda:	f7ff ff61 	bl	8000ea0 <__NVIC_GetPriorityGrouping>
 8000fde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	68b9      	ldr	r1, [r7, #8]
 8000fe4:	6978      	ldr	r0, [r7, #20]
 8000fe6:	f7ff ffb1 	bl	8000f4c <NVIC_EncodePriority>
 8000fea:	4602      	mov	r2, r0
 8000fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff ff80 	bl	8000ef8 <__NVIC_SetPriority>
}
 8000ff8:	bf00      	nop
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ff54 	bl	8000ebc <__NVIC_EnableIRQ>
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
 8001036:	e16b      	b.n	8001310 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001038:	2201      	movs	r2, #1
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	429a      	cmp	r2, r3
 8001052:	f040 815a 	bne.w	800130a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b01      	cmp	r3, #1
 8001060:	d005      	beq.n	800106e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800106a:	2b02      	cmp	r3, #2
 800106c:	d130      	bne.n	80010d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	2203      	movs	r2, #3
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	68da      	ldr	r2, [r3, #12]
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010a4:	2201      	movs	r2, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	091b      	lsrs	r3, r3, #4
 80010ba:	f003 0201 	and.w	r2, r3, #1
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	2b03      	cmp	r3, #3
 80010da:	d017      	beq.n	800110c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d123      	bne.n	8001160 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	08da      	lsrs	r2, r3, #3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3208      	adds	r2, #8
 8001120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	220f      	movs	r2, #15
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	691a      	ldr	r2, [r3, #16]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	08da      	lsrs	r2, r3, #3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3208      	adds	r2, #8
 800115a:	69b9      	ldr	r1, [r7, #24]
 800115c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0203 	and.w	r2, r3, #3
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800119c:	2b00      	cmp	r3, #0
 800119e:	f000 80b4 	beq.w	800130a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b60      	ldr	r3, [pc, #384]	; (8001328 <HAL_GPIO_Init+0x30c>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	4a5f      	ldr	r2, [pc, #380]	; (8001328 <HAL_GPIO_Init+0x30c>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b0:	6453      	str	r3, [r2, #68]	; 0x44
 80011b2:	4b5d      	ldr	r3, [pc, #372]	; (8001328 <HAL_GPIO_Init+0x30c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011be:	4a5b      	ldr	r2, [pc, #364]	; (800132c <HAL_GPIO_Init+0x310>)
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	089b      	lsrs	r3, r3, #2
 80011c4:	3302      	adds	r3, #2
 80011c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	220f      	movs	r2, #15
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a52      	ldr	r2, [pc, #328]	; (8001330 <HAL_GPIO_Init+0x314>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d02b      	beq.n	8001242 <HAL_GPIO_Init+0x226>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a51      	ldr	r2, [pc, #324]	; (8001334 <HAL_GPIO_Init+0x318>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d025      	beq.n	800123e <HAL_GPIO_Init+0x222>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a50      	ldr	r2, [pc, #320]	; (8001338 <HAL_GPIO_Init+0x31c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d01f      	beq.n	800123a <HAL_GPIO_Init+0x21e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4f      	ldr	r2, [pc, #316]	; (800133c <HAL_GPIO_Init+0x320>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d019      	beq.n	8001236 <HAL_GPIO_Init+0x21a>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4e      	ldr	r2, [pc, #312]	; (8001340 <HAL_GPIO_Init+0x324>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d013      	beq.n	8001232 <HAL_GPIO_Init+0x216>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4d      	ldr	r2, [pc, #308]	; (8001344 <HAL_GPIO_Init+0x328>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d00d      	beq.n	800122e <HAL_GPIO_Init+0x212>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4c      	ldr	r2, [pc, #304]	; (8001348 <HAL_GPIO_Init+0x32c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d007      	beq.n	800122a <HAL_GPIO_Init+0x20e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4b      	ldr	r2, [pc, #300]	; (800134c <HAL_GPIO_Init+0x330>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d101      	bne.n	8001226 <HAL_GPIO_Init+0x20a>
 8001222:	2307      	movs	r3, #7
 8001224:	e00e      	b.n	8001244 <HAL_GPIO_Init+0x228>
 8001226:	2308      	movs	r3, #8
 8001228:	e00c      	b.n	8001244 <HAL_GPIO_Init+0x228>
 800122a:	2306      	movs	r3, #6
 800122c:	e00a      	b.n	8001244 <HAL_GPIO_Init+0x228>
 800122e:	2305      	movs	r3, #5
 8001230:	e008      	b.n	8001244 <HAL_GPIO_Init+0x228>
 8001232:	2304      	movs	r3, #4
 8001234:	e006      	b.n	8001244 <HAL_GPIO_Init+0x228>
 8001236:	2303      	movs	r3, #3
 8001238:	e004      	b.n	8001244 <HAL_GPIO_Init+0x228>
 800123a:	2302      	movs	r3, #2
 800123c:	e002      	b.n	8001244 <HAL_GPIO_Init+0x228>
 800123e:	2301      	movs	r3, #1
 8001240:	e000      	b.n	8001244 <HAL_GPIO_Init+0x228>
 8001242:	2300      	movs	r3, #0
 8001244:	69fa      	ldr	r2, [r7, #28]
 8001246:	f002 0203 	and.w	r2, r2, #3
 800124a:	0092      	lsls	r2, r2, #2
 800124c:	4093      	lsls	r3, r2
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001254:	4935      	ldr	r1, [pc, #212]	; (800132c <HAL_GPIO_Init+0x310>)
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	089b      	lsrs	r3, r3, #2
 800125a:	3302      	adds	r3, #2
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001262:	4b3b      	ldr	r3, [pc, #236]	; (8001350 <HAL_GPIO_Init+0x334>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001286:	4a32      	ldr	r2, [pc, #200]	; (8001350 <HAL_GPIO_Init+0x334>)
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800128c:	4b30      	ldr	r3, [pc, #192]	; (8001350 <HAL_GPIO_Init+0x334>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b0:	4a27      	ldr	r2, [pc, #156]	; (8001350 <HAL_GPIO_Init+0x334>)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012b6:	4b26      	ldr	r3, [pc, #152]	; (8001350 <HAL_GPIO_Init+0x334>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012da:	4a1d      	ldr	r2, [pc, #116]	; (8001350 <HAL_GPIO_Init+0x334>)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <HAL_GPIO_Init+0x334>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001304:	4a12      	ldr	r2, [pc, #72]	; (8001350 <HAL_GPIO_Init+0x334>)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3301      	adds	r3, #1
 800130e:	61fb      	str	r3, [r7, #28]
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	2b0f      	cmp	r3, #15
 8001314:	f67f ae90 	bls.w	8001038 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800
 800132c:	40013800 	.word	0x40013800
 8001330:	40020000 	.word	0x40020000
 8001334:	40020400 	.word	0x40020400
 8001338:	40020800 	.word	0x40020800
 800133c:	40020c00 	.word	0x40020c00
 8001340:	40021000 	.word	0x40021000
 8001344:	40021400 	.word	0x40021400
 8001348:	40021800 	.word	0x40021800
 800134c:	40021c00 	.word	0x40021c00
 8001350:	40013c00 	.word	0x40013c00

08001354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	807b      	strh	r3, [r7, #2]
 8001360:	4613      	mov	r3, r2
 8001362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001364:	787b      	ldrb	r3, [r7, #1]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800136a:	887a      	ldrh	r2, [r7, #2]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001370:	e003      	b.n	800137a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001372:	887b      	ldrh	r3, [r7, #2]
 8001374:	041a      	lsls	r2, r3, #16
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	619a      	str	r2, [r3, #24]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001386:	b480      	push	{r7}
 8001388:	b085      	sub	sp, #20
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	460b      	mov	r3, r1
 8001390:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001398:	887a      	ldrh	r2, [r7, #2]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4013      	ands	r3, r2
 800139e:	041a      	lsls	r2, r3, #16
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	43d9      	mvns	r1, r3
 80013a4:	887b      	ldrh	r3, [r7, #2]
 80013a6:	400b      	ands	r3, r1
 80013a8:	431a      	orrs	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	619a      	str	r2, [r3, #24]
}
 80013ae:	bf00      	nop
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
	...

080013bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013c8:	695a      	ldr	r2, [r3, #20]
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	4013      	ands	r3, r2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d006      	beq.n	80013e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013d4:	88fb      	ldrh	r3, [r7, #6]
 80013d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 f806 	bl	80013ec <HAL_GPIO_EXTI_Callback>
  }
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40013c00 	.word	0x40013c00

080013ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e267      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	d075      	beq.n	800150e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001422:	4b88      	ldr	r3, [pc, #544]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 030c 	and.w	r3, r3, #12
 800142a:	2b04      	cmp	r3, #4
 800142c:	d00c      	beq.n	8001448 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800142e:	4b85      	ldr	r3, [pc, #532]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001436:	2b08      	cmp	r3, #8
 8001438:	d112      	bne.n	8001460 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800143a:	4b82      	ldr	r3, [pc, #520]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001446:	d10b      	bne.n	8001460 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001448:	4b7e      	ldr	r3, [pc, #504]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d05b      	beq.n	800150c <HAL_RCC_OscConfig+0x108>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d157      	bne.n	800150c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e242      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001468:	d106      	bne.n	8001478 <HAL_RCC_OscConfig+0x74>
 800146a:	4b76      	ldr	r3, [pc, #472]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a75      	ldr	r2, [pc, #468]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e01d      	b.n	80014b4 <HAL_RCC_OscConfig+0xb0>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001480:	d10c      	bne.n	800149c <HAL_RCC_OscConfig+0x98>
 8001482:	4b70      	ldr	r3, [pc, #448]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a6f      	ldr	r2, [pc, #444]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	4b6d      	ldr	r3, [pc, #436]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a6c      	ldr	r2, [pc, #432]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e00b      	b.n	80014b4 <HAL_RCC_OscConfig+0xb0>
 800149c:	4b69      	ldr	r3, [pc, #420]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a68      	ldr	r2, [pc, #416]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 80014a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b66      	ldr	r3, [pc, #408]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a65      	ldr	r2, [pc, #404]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 80014ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d013      	beq.n	80014e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fcc0 	bl	8000e40 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c4:	f7ff fcbc 	bl	8000e40 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b64      	cmp	r3, #100	; 0x64
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e207      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d6:	4b5b      	ldr	r3, [pc, #364]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0xc0>
 80014e2:	e014      	b.n	800150e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fcac 	bl	8000e40 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ec:	f7ff fca8 	bl	8000e40 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	; 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e1f3      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fe:	4b51      	ldr	r3, [pc, #324]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0xe8>
 800150a:	e000      	b.n	800150e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d063      	beq.n	80015e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800151a:	4b4a      	ldr	r3, [pc, #296]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00b      	beq.n	800153e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001526:	4b47      	ldr	r3, [pc, #284]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800152e:	2b08      	cmp	r3, #8
 8001530:	d11c      	bne.n	800156c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001532:	4b44      	ldr	r3, [pc, #272]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d116      	bne.n	800156c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153e:	4b41      	ldr	r3, [pc, #260]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d005      	beq.n	8001556 <HAL_RCC_OscConfig+0x152>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d001      	beq.n	8001556 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e1c7      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001556:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4937      	ldr	r1, [pc, #220]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156a:	e03a      	b.n	80015e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d020      	beq.n	80015b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001574:	4b34      	ldr	r3, [pc, #208]	; (8001648 <HAL_RCC_OscConfig+0x244>)
 8001576:	2201      	movs	r2, #1
 8001578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157a:	f7ff fc61 	bl	8000e40 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001582:	f7ff fc5d 	bl	8000e40 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e1a8      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001594:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	4b28      	ldr	r3, [pc, #160]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	4925      	ldr	r1, [pc, #148]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]
 80015b4:	e015      	b.n	80015e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b6:	4b24      	ldr	r3, [pc, #144]	; (8001648 <HAL_RCC_OscConfig+0x244>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff fc40 	bl	8000e40 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c4:	f7ff fc3c 	bl	8000e40 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e187      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d036      	beq.n	800165c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d016      	beq.n	8001624 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_RCC_OscConfig+0x248>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fc:	f7ff fc20 	bl	8000e40 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001604:	f7ff fc1c 	bl	8000e40 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e167      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0x200>
 8001622:	e01b      	b.n	800165c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_RCC_OscConfig+0x248>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162a:	f7ff fc09 	bl	8000e40 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001630:	e00e      	b.n	8001650 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001632:	f7ff fc05 	bl	8000e40 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d907      	bls.n	8001650 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e150      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
 8001644:	40023800 	.word	0x40023800
 8001648:	42470000 	.word	0x42470000
 800164c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001650:	4b88      	ldr	r3, [pc, #544]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1ea      	bne.n	8001632 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 8097 	beq.w	8001798 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800166e:	4b81      	ldr	r3, [pc, #516]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10f      	bne.n	800169a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	4b7d      	ldr	r3, [pc, #500]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	4a7c      	ldr	r2, [pc, #496]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001688:	6413      	str	r3, [r2, #64]	; 0x40
 800168a:	4b7a      	ldr	r3, [pc, #488]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001696:	2301      	movs	r3, #1
 8001698:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169a:	4b77      	ldr	r3, [pc, #476]	; (8001878 <HAL_RCC_OscConfig+0x474>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d118      	bne.n	80016d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016a6:	4b74      	ldr	r3, [pc, #464]	; (8001878 <HAL_RCC_OscConfig+0x474>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a73      	ldr	r2, [pc, #460]	; (8001878 <HAL_RCC_OscConfig+0x474>)
 80016ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b2:	f7ff fbc5 	bl	8000e40 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ba:	f7ff fbc1 	bl	8000e40 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e10c      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016cc:	4b6a      	ldr	r3, [pc, #424]	; (8001878 <HAL_RCC_OscConfig+0x474>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d106      	bne.n	80016ee <HAL_RCC_OscConfig+0x2ea>
 80016e0:	4b64      	ldr	r3, [pc, #400]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80016e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e4:	4a63      	ldr	r2, [pc, #396]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6713      	str	r3, [r2, #112]	; 0x70
 80016ec:	e01c      	b.n	8001728 <HAL_RCC_OscConfig+0x324>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b05      	cmp	r3, #5
 80016f4:	d10c      	bne.n	8001710 <HAL_RCC_OscConfig+0x30c>
 80016f6:	4b5f      	ldr	r3, [pc, #380]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80016f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fa:	4a5e      	ldr	r2, [pc, #376]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	6713      	str	r3, [r2, #112]	; 0x70
 8001702:	4b5c      	ldr	r3, [pc, #368]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001706:	4a5b      	ldr	r2, [pc, #364]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6713      	str	r3, [r2, #112]	; 0x70
 800170e:	e00b      	b.n	8001728 <HAL_RCC_OscConfig+0x324>
 8001710:	4b58      	ldr	r3, [pc, #352]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001714:	4a57      	ldr	r2, [pc, #348]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001716:	f023 0301 	bic.w	r3, r3, #1
 800171a:	6713      	str	r3, [r2, #112]	; 0x70
 800171c:	4b55      	ldr	r3, [pc, #340]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 800171e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001720:	4a54      	ldr	r2, [pc, #336]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001722:	f023 0304 	bic.w	r3, r3, #4
 8001726:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d015      	beq.n	800175c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001730:	f7ff fb86 	bl	8000e40 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001736:	e00a      	b.n	800174e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001738:	f7ff fb82 	bl	8000e40 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f241 3288 	movw	r2, #5000	; 0x1388
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e0cb      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174e:	4b49      	ldr	r3, [pc, #292]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0ee      	beq.n	8001738 <HAL_RCC_OscConfig+0x334>
 800175a:	e014      	b.n	8001786 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175c:	f7ff fb70 	bl	8000e40 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001762:	e00a      	b.n	800177a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001764:	f7ff fb6c 	bl	8000e40 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e0b5      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800177a:	4b3e      	ldr	r3, [pc, #248]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 800177c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1ee      	bne.n	8001764 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001786:	7dfb      	ldrb	r3, [r7, #23]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d105      	bne.n	8001798 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800178c:	4b39      	ldr	r3, [pc, #228]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	4a38      	ldr	r2, [pc, #224]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001796:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 80a1 	beq.w	80018e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017a2:	4b34      	ldr	r3, [pc, #208]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d05c      	beq.n	8001868 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d141      	bne.n	800183a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b6:	4b31      	ldr	r3, [pc, #196]	; (800187c <HAL_RCC_OscConfig+0x478>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fb40 	bl	8000e40 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c4:	f7ff fb3c 	bl	8000e40 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e087      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d6:	4b27      	ldr	r3, [pc, #156]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69da      	ldr	r2, [r3, #28]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	019b      	lsls	r3, r3, #6
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f8:	085b      	lsrs	r3, r3, #1
 80017fa:	3b01      	subs	r3, #1
 80017fc:	041b      	lsls	r3, r3, #16
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001804:	061b      	lsls	r3, r3, #24
 8001806:	491b      	ldr	r1, [pc, #108]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <HAL_RCC_OscConfig+0x478>)
 800180e:	2201      	movs	r2, #1
 8001810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001812:	f7ff fb15 	bl	8000e40 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800181a:	f7ff fb11 	bl	8000e40 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e05c      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x416>
 8001838:	e054      	b.n	80018e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <HAL_RCC_OscConfig+0x478>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff fafe 	bl	8000e40 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001848:	f7ff fafa 	bl	8000e40 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e045      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x444>
 8001866:	e03d      	b.n	80018e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d107      	bne.n	8001880 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e038      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
 8001874:	40023800 	.word	0x40023800
 8001878:	40007000 	.word	0x40007000
 800187c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <HAL_RCC_OscConfig+0x4ec>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d028      	beq.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001898:	429a      	cmp	r2, r3
 800189a:	d121      	bne.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d11a      	bne.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018b0:	4013      	ands	r3, r2
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d111      	bne.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	085b      	lsrs	r3, r3, #1
 80018c8:	3b01      	subs	r3, #1
 80018ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d107      	bne.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e000      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800

080018f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0cc      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001908:	4b68      	ldr	r3, [pc, #416]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d90c      	bls.n	8001930 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b65      	ldr	r3, [pc, #404]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800191e:	4b63      	ldr	r3, [pc, #396]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0b8      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d020      	beq.n	800197e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001948:	4b59      	ldr	r3, [pc, #356]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	4a58      	ldr	r2, [pc, #352]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001952:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001960:	4b53      	ldr	r3, [pc, #332]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4a52      	ldr	r2, [pc, #328]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800196a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800196c:	4b50      	ldr	r3, [pc, #320]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	494d      	ldr	r1, [pc, #308]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	4313      	orrs	r3, r2
 800197c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d044      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d107      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001992:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d119      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e07f      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d003      	beq.n	80019b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b2:	4b3f      	ldr	r3, [pc, #252]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d109      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e06f      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c2:	4b3b      	ldr	r3, [pc, #236]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e067      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d2:	4b37      	ldr	r3, [pc, #220]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f023 0203 	bic.w	r2, r3, #3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4934      	ldr	r1, [pc, #208]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019e4:	f7ff fa2c 	bl	8000e40 <HAL_GetTick>
 80019e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ea:	e00a      	b.n	8001a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ec:	f7ff fa28 	bl	8000e40 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e04f      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a02:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 020c 	and.w	r2, r3, #12
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d1eb      	bne.n	80019ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a14:	4b25      	ldr	r3, [pc, #148]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d20c      	bcs.n	8001a3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b22      	ldr	r3, [pc, #136]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d001      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e032      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d008      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a48:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	4916      	ldr	r1, [pc, #88]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d009      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	490e      	ldr	r1, [pc, #56]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a7a:	f000 f821 	bl	8001ac0 <HAL_RCC_GetSysClockFreq>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	490a      	ldr	r1, [pc, #40]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a8c:	5ccb      	ldrb	r3, [r1, r3]
 8001a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a92:	4a09      	ldr	r2, [pc, #36]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff f8b8 	bl	8000c10 <HAL_InitTick>

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023c00 	.word	0x40023c00
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	08007d18 	.word	0x08007d18
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	20000004 	.word	0x20000004

08001ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ac4:	b094      	sub	sp, #80	; 0x50
 8001ac6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	647b      	str	r3, [r7, #68]	; 0x44
 8001acc:	2300      	movs	r3, #0
 8001ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ad8:	4b79      	ldr	r3, [pc, #484]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 030c 	and.w	r3, r3, #12
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d00d      	beq.n	8001b00 <HAL_RCC_GetSysClockFreq+0x40>
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	f200 80e1 	bhi.w	8001cac <HAL_RCC_GetSysClockFreq+0x1ec>
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <HAL_RCC_GetSysClockFreq+0x34>
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d003      	beq.n	8001afa <HAL_RCC_GetSysClockFreq+0x3a>
 8001af2:	e0db      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001af4:	4b73      	ldr	r3, [pc, #460]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001af6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001af8:	e0db      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001afa:	4b73      	ldr	r3, [pc, #460]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001afc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001afe:	e0d8      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b00:	4b6f      	ldr	r3, [pc, #444]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b0a:	4b6d      	ldr	r3, [pc, #436]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d063      	beq.n	8001bde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b16:	4b6a      	ldr	r3, [pc, #424]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	099b      	lsrs	r3, r3, #6
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b28:	633b      	str	r3, [r7, #48]	; 0x30
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b32:	4622      	mov	r2, r4
 8001b34:	462b      	mov	r3, r5
 8001b36:	f04f 0000 	mov.w	r0, #0
 8001b3a:	f04f 0100 	mov.w	r1, #0
 8001b3e:	0159      	lsls	r1, r3, #5
 8001b40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b44:	0150      	lsls	r0, r2, #5
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	1a51      	subs	r1, r2, r1
 8001b4e:	6139      	str	r1, [r7, #16]
 8001b50:	4629      	mov	r1, r5
 8001b52:	eb63 0301 	sbc.w	r3, r3, r1
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b64:	4659      	mov	r1, fp
 8001b66:	018b      	lsls	r3, r1, #6
 8001b68:	4651      	mov	r1, sl
 8001b6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b6e:	4651      	mov	r1, sl
 8001b70:	018a      	lsls	r2, r1, #6
 8001b72:	4651      	mov	r1, sl
 8001b74:	ebb2 0801 	subs.w	r8, r2, r1
 8001b78:	4659      	mov	r1, fp
 8001b7a:	eb63 0901 	sbc.w	r9, r3, r1
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b92:	4690      	mov	r8, r2
 8001b94:	4699      	mov	r9, r3
 8001b96:	4623      	mov	r3, r4
 8001b98:	eb18 0303 	adds.w	r3, r8, r3
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	462b      	mov	r3, r5
 8001ba0:	eb49 0303 	adc.w	r3, r9, r3
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bb2:	4629      	mov	r1, r5
 8001bb4:	024b      	lsls	r3, r1, #9
 8001bb6:	4621      	mov	r1, r4
 8001bb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bbc:	4621      	mov	r1, r4
 8001bbe:	024a      	lsls	r2, r1, #9
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bd0:	f7fe fb48 	bl	8000264 <__aeabi_uldivmod>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4613      	mov	r3, r2
 8001bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bdc:	e058      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bde:	4b38      	ldr	r3, [pc, #224]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	099b      	lsrs	r3, r3, #6
 8001be4:	2200      	movs	r2, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	4611      	mov	r1, r2
 8001bea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bee:	623b      	str	r3, [r7, #32]
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bf8:	4642      	mov	r2, r8
 8001bfa:	464b      	mov	r3, r9
 8001bfc:	f04f 0000 	mov.w	r0, #0
 8001c00:	f04f 0100 	mov.w	r1, #0
 8001c04:	0159      	lsls	r1, r3, #5
 8001c06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c0a:	0150      	lsls	r0, r2, #5
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4641      	mov	r1, r8
 8001c12:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c16:	4649      	mov	r1, r9
 8001c18:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c30:	ebb2 040a 	subs.w	r4, r2, sl
 8001c34:	eb63 050b 	sbc.w	r5, r3, fp
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	00eb      	lsls	r3, r5, #3
 8001c42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c46:	00e2      	lsls	r2, r4, #3
 8001c48:	4614      	mov	r4, r2
 8001c4a:	461d      	mov	r5, r3
 8001c4c:	4643      	mov	r3, r8
 8001c4e:	18e3      	adds	r3, r4, r3
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	464b      	mov	r3, r9
 8001c54:	eb45 0303 	adc.w	r3, r5, r3
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c66:	4629      	mov	r1, r5
 8001c68:	028b      	lsls	r3, r1, #10
 8001c6a:	4621      	mov	r1, r4
 8001c6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c70:	4621      	mov	r1, r4
 8001c72:	028a      	lsls	r2, r1, #10
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
 8001c7e:	61fa      	str	r2, [r7, #28]
 8001c80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c84:	f7fe faee 	bl	8000264 <__aeabi_uldivmod>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	0c1b      	lsrs	r3, r3, #16
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ca0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001caa:	e002      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3750      	adds	r7, #80	; 0x50
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	00f42400 	.word	0x00f42400
 8001cc8:	007a1200 	.word	0x007a1200

08001ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000000 	.word	0x20000000

08001ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ce8:	f7ff fff0 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 8001cec:	4602      	mov	r2, r0
 8001cee:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	0a9b      	lsrs	r3, r3, #10
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	4903      	ldr	r1, [pc, #12]	; (8001d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cfa:	5ccb      	ldrb	r3, [r1, r3]
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40023800 	.word	0x40023800
 8001d08:	08007d28 	.word	0x08007d28

08001d0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	220f      	movs	r2, #15
 8001d1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d1c:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <HAL_RCC_GetClockConfig+0x5c>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 0203 	and.w	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d28:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <HAL_RCC_GetClockConfig+0x5c>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <HAL_RCC_GetClockConfig+0x5c>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_RCC_GetClockConfig+0x5c>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	08db      	lsrs	r3, r3, #3
 8001d46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <HAL_RCC_GetClockConfig+0x60>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0207 	and.w	r2, r3, #7
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	601a      	str	r2, [r3, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40023c00 	.word	0x40023c00

08001d70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e041      	b.n	8001e06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d106      	bne.n	8001d9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f839 	bl	8001e0e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3304      	adds	r3, #4
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 f9c0 	bl	8002134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d001      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e04e      	b.n	8001eda <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0201 	orr.w	r2, r2, #1
 8001e52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a23      	ldr	r2, [pc, #140]	; (8001ee8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d022      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0x80>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e66:	d01d      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0x80>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1f      	ldr	r2, [pc, #124]	; (8001eec <HAL_TIM_Base_Start_IT+0xc8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d018      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0x80>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1e      	ldr	r2, [pc, #120]	; (8001ef0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d013      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0x80>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1c      	ldr	r2, [pc, #112]	; (8001ef4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d00e      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0x80>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1b      	ldr	r2, [pc, #108]	; (8001ef8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d009      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0x80>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a19      	ldr	r2, [pc, #100]	; (8001efc <HAL_TIM_Base_Start_IT+0xd8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d004      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0x80>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d111      	bne.n	8001ec8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b06      	cmp	r3, #6
 8001eb4:	d010      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f042 0201 	orr.w	r2, r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec6:	e007      	b.n	8001ed8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40010000 	.word	0x40010000
 8001eec:	40000400 	.word	0x40000400
 8001ef0:	40000800 	.word	0x40000800
 8001ef4:	40000c00 	.word	0x40000c00
 8001ef8:	40010400 	.word	0x40010400
 8001efc:	40014000 	.word	0x40014000
 8001f00:	40001800 	.word	0x40001800

08001f04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d020      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d01b      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f06f 0202 	mvn.w	r2, #2
 8001f38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f8d2 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001f54:	e005      	b.n	8001f62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f8c4 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f8d5 	bl	800210c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d020      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d01b      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0204 	mvn.w	r2, #4
 8001f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2202      	movs	r2, #2
 8001f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f8ac 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001fa0:	e005      	b.n	8001fae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f89e 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f8af 	bl	800210c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d020      	beq.n	8002000 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d01b      	beq.n	8002000 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0208 	mvn.w	r2, #8
 8001fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f886 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001fec:	e005      	b.n	8001ffa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f878 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f889 	bl	800210c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b00      	cmp	r3, #0
 8002008:	d020      	beq.n	800204c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f003 0310 	and.w	r3, r3, #16
 8002010:	2b00      	cmp	r3, #0
 8002012:	d01b      	beq.n	800204c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0210 	mvn.w	r2, #16
 800201c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2208      	movs	r2, #8
 8002022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f860 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8002038:	e005      	b.n	8002046 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f852 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f863 	bl	800210c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00c      	beq.n	8002070 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d007      	beq.n	8002070 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0201 	mvn.w	r2, #1
 8002068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7fe fd90 	bl	8000b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00c      	beq.n	8002094 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002080:	2b00      	cmp	r3, #0
 8002082:	d007      	beq.n	8002094 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800208c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f906 	bl	80022a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00c      	beq.n	80020b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d007      	beq.n	80020b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f834 	bl	8002120 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00c      	beq.n	80020dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d007      	beq.n	80020dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0220 	mvn.w	r2, #32
 80020d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f8d8 	bl	800228c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020dc:	bf00      	nop
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a46      	ldr	r2, [pc, #280]	; (8002260 <TIM_Base_SetConfig+0x12c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d013      	beq.n	8002174 <TIM_Base_SetConfig+0x40>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002152:	d00f      	beq.n	8002174 <TIM_Base_SetConfig+0x40>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a43      	ldr	r2, [pc, #268]	; (8002264 <TIM_Base_SetConfig+0x130>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d00b      	beq.n	8002174 <TIM_Base_SetConfig+0x40>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a42      	ldr	r2, [pc, #264]	; (8002268 <TIM_Base_SetConfig+0x134>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d007      	beq.n	8002174 <TIM_Base_SetConfig+0x40>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a41      	ldr	r2, [pc, #260]	; (800226c <TIM_Base_SetConfig+0x138>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d003      	beq.n	8002174 <TIM_Base_SetConfig+0x40>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a40      	ldr	r2, [pc, #256]	; (8002270 <TIM_Base_SetConfig+0x13c>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d108      	bne.n	8002186 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800217a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a35      	ldr	r2, [pc, #212]	; (8002260 <TIM_Base_SetConfig+0x12c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d02b      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002194:	d027      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a32      	ldr	r2, [pc, #200]	; (8002264 <TIM_Base_SetConfig+0x130>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d023      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a31      	ldr	r2, [pc, #196]	; (8002268 <TIM_Base_SetConfig+0x134>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d01f      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a30      	ldr	r2, [pc, #192]	; (800226c <TIM_Base_SetConfig+0x138>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d01b      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a2f      	ldr	r2, [pc, #188]	; (8002270 <TIM_Base_SetConfig+0x13c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d017      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a2e      	ldr	r2, [pc, #184]	; (8002274 <TIM_Base_SetConfig+0x140>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a2d      	ldr	r2, [pc, #180]	; (8002278 <TIM_Base_SetConfig+0x144>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00f      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a2c      	ldr	r2, [pc, #176]	; (800227c <TIM_Base_SetConfig+0x148>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d00b      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a2b      	ldr	r2, [pc, #172]	; (8002280 <TIM_Base_SetConfig+0x14c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d007      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a2a      	ldr	r2, [pc, #168]	; (8002284 <TIM_Base_SetConfig+0x150>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d003      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a29      	ldr	r2, [pc, #164]	; (8002288 <TIM_Base_SetConfig+0x154>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d108      	bne.n	80021f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	4313      	orrs	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a10      	ldr	r2, [pc, #64]	; (8002260 <TIM_Base_SetConfig+0x12c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d003      	beq.n	800222c <TIM_Base_SetConfig+0xf8>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a12      	ldr	r2, [pc, #72]	; (8002270 <TIM_Base_SetConfig+0x13c>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d103      	bne.n	8002234 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d105      	bne.n	8002252 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f023 0201 	bic.w	r2, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	611a      	str	r2, [r3, #16]
  }
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40010000 	.word	0x40010000
 8002264:	40000400 	.word	0x40000400
 8002268:	40000800 	.word	0x40000800
 800226c:	40000c00 	.word	0x40000c00
 8002270:	40010400 	.word	0x40010400
 8002274:	40014000 	.word	0x40014000
 8002278:	40014400 	.word	0x40014400
 800227c:	40014800 	.word	0x40014800
 8002280:	40001800 	.word	0x40001800
 8002284:	40001c00 	.word	0x40001c00
 8002288:	40002000 	.word	0x40002000

0800228c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f103 0208 	add.w	r2, r3, #8
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295
 80022cc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f103 0208 	add.w	r2, r3, #8
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f103 0208 	add.w	r2, r3, #8
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800230e:	b480      	push	{r7}
 8002310:	b085      	sub	sp, #20
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	601a      	str	r2, [r3, #0]
}
 800234a:	bf00      	nop
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002356:	b480      	push	{r7}
 8002358:	b085      	sub	sp, #20
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236c:	d103      	bne.n	8002376 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	e00c      	b.n	8002390 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3308      	adds	r3, #8
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	e002      	b.n	8002384 <vListInsert+0x2e>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	429a      	cmp	r2, r3
 800238e:	d2f6      	bcs.n	800237e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	601a      	str	r2, [r3, #0]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6892      	ldr	r2, [r2, #8]
 80023de:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6852      	ldr	r2, [r2, #4]
 80023e8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d103      	bne.n	80023fc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	1e5a      	subs	r2, r3, #1
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10a      	bne.n	8002446 <xQueueGenericReset+0x2a>
        __asm volatile
 8002430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002434:	f383 8811 	msr	BASEPRI, r3
 8002438:	f3bf 8f6f 	isb	sy
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	60bb      	str	r3, [r7, #8]
    }
 8002442:	bf00      	nop
 8002444:	e7fe      	b.n	8002444 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002446:	f002 fa8f 	bl	8004968 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002452:	68f9      	ldr	r1, [r7, #12]
 8002454:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002456:	fb01 f303 	mul.w	r3, r1, r3
 800245a:	441a      	add	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002476:	3b01      	subs	r3, #1
 8002478:	68f9      	ldr	r1, [r7, #12]
 800247a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800247c:	fb01 f303 	mul.w	r3, r1, r3
 8002480:	441a      	add	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	22ff      	movs	r2, #255	; 0xff
 800248a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	22ff      	movs	r2, #255	; 0xff
 8002492:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d114      	bne.n	80024c6 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d01a      	beq.n	80024da <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	3310      	adds	r3, #16
 80024a8:	4618      	mov	r0, r3
 80024aa:	f001 f9c9 	bl	8003840 <xTaskRemoveFromEventList>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d012      	beq.n	80024da <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <xQueueGenericReset+0xcc>)
 80024b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	f3bf 8f4f 	dsb	sy
 80024c0:	f3bf 8f6f 	isb	sy
 80024c4:	e009      	b.n	80024da <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	3310      	adds	r3, #16
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fef2 	bl	80022b4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	3324      	adds	r3, #36	; 0x24
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff feed 	bl	80022b4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80024da:	f002 fa75 	bl	80049c8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80024de:	2301      	movs	r3, #1
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	e000ed04 	.word	0xe000ed04

080024ec <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08c      	sub	sp, #48	; 0x30
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	4613      	mov	r3, r2
 80024f8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10a      	bne.n	8002516 <xQueueGenericCreate+0x2a>
        __asm volatile
 8002500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002504:	f383 8811 	msr	BASEPRI, r3
 8002508:	f3bf 8f6f 	isb	sy
 800250c:	f3bf 8f4f 	dsb	sy
 8002510:	61bb      	str	r3, [r7, #24]
    }
 8002512:	bf00      	nop
 8002514:	e7fe      	b.n	8002514 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	fb02 f303 	mul.w	r3, r2, r3
 800251e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d006      	beq.n	8002534 <xQueueGenericCreate+0x48>
 8002526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	fbb2 f3f3 	udiv	r3, r2, r3
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	429a      	cmp	r2, r3
 8002532:	d101      	bne.n	8002538 <xQueueGenericCreate+0x4c>
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <xQueueGenericCreate+0x4e>
 8002538:	2300      	movs	r3, #0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10a      	bne.n	8002554 <xQueueGenericCreate+0x68>
        __asm volatile
 800253e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002542:	f383 8811 	msr	BASEPRI, r3
 8002546:	f3bf 8f6f 	isb	sy
 800254a:	f3bf 8f4f 	dsb	sy
 800254e:	617b      	str	r3, [r7, #20]
    }
 8002550:	bf00      	nop
 8002552:	e7fe      	b.n	8002552 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800255a:	d90a      	bls.n	8002572 <xQueueGenericCreate+0x86>
        __asm volatile
 800255c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002560:	f383 8811 	msr	BASEPRI, r3
 8002564:	f3bf 8f6f 	isb	sy
 8002568:	f3bf 8f4f 	dsb	sy
 800256c:	613b      	str	r3, [r7, #16]
    }
 800256e:	bf00      	nop
 8002570:	e7fe      	b.n	8002570 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	3350      	adds	r3, #80	; 0x50
 8002576:	4618      	mov	r0, r3
 8002578:	f002 fb20 	bl	8004bbc <pvPortMalloc>
 800257c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00d      	beq.n	80025a0 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	3350      	adds	r3, #80	; 0x50
 800258c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800258e:	79fa      	ldrb	r2, [r7, #7]
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	4613      	mov	r3, r2
 8002596:	69fa      	ldr	r2, [r7, #28]
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f805 	bl	80025aa <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80025a0:	6a3b      	ldr	r3, [r7, #32]
    }
 80025a2:	4618      	mov	r0, r3
 80025a4:	3728      	adds	r7, #40	; 0x28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b084      	sub	sp, #16
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	60f8      	str	r0, [r7, #12]
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	607a      	str	r2, [r7, #4]
 80025b6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d103      	bne.n	80025c6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	e002      	b.n	80025cc <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025d8:	2101      	movs	r1, #1
 80025da:	69b8      	ldr	r0, [r7, #24]
 80025dc:	f7ff ff1e 	bl	800241c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	78fa      	ldrb	r2, [r7, #3]
 80025e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	68f9      	ldr	r1, [r7, #12]
 80025ee:	2073      	movs	r0, #115	; 0x73
 80025f0:	f004 fac6 	bl	8006b80 <SEGGER_SYSVIEW_RecordU32x3>
}
 80025f4:	bf00      	nop
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b090      	sub	sp, #64	; 0x40
 8002600:	af02      	add	r7, sp, #8
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800260a:	2300      	movs	r3, #0
 800260c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10a      	bne.n	800262e <xQueueGenericSend+0x32>
        __asm volatile
 8002618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261c:	f383 8811 	msr	BASEPRI, r3
 8002620:	f3bf 8f6f 	isb	sy
 8002624:	f3bf 8f4f 	dsb	sy
 8002628:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800262a:	bf00      	nop
 800262c:	e7fe      	b.n	800262c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d103      	bne.n	800263c <xQueueGenericSend+0x40>
 8002634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <xQueueGenericSend+0x44>
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <xQueueGenericSend+0x46>
 8002640:	2300      	movs	r3, #0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10a      	bne.n	800265c <xQueueGenericSend+0x60>
        __asm volatile
 8002646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264a:	f383 8811 	msr	BASEPRI, r3
 800264e:	f3bf 8f6f 	isb	sy
 8002652:	f3bf 8f4f 	dsb	sy
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002658:	bf00      	nop
 800265a:	e7fe      	b.n	800265a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d103      	bne.n	800266a <xQueueGenericSend+0x6e>
 8002662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <xQueueGenericSend+0x72>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <xQueueGenericSend+0x74>
 800266e:	2300      	movs	r3, #0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10a      	bne.n	800268a <xQueueGenericSend+0x8e>
        __asm volatile
 8002674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	623b      	str	r3, [r7, #32]
    }
 8002686:	bf00      	nop
 8002688:	e7fe      	b.n	8002688 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800268a:	f001 fa79 	bl	8003b80 <xTaskGetSchedulerState>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d102      	bne.n	800269a <xQueueGenericSend+0x9e>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <xQueueGenericSend+0xa2>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <xQueueGenericSend+0xa4>
 800269e:	2300      	movs	r3, #0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <xQueueGenericSend+0xbe>
        __asm volatile
 80026a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a8:	f383 8811 	msr	BASEPRI, r3
 80026ac:	f3bf 8f6f 	isb	sy
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	61fb      	str	r3, [r7, #28]
    }
 80026b6:	bf00      	nop
 80026b8:	e7fe      	b.n	80026b8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80026ba:	f002 f955 	bl	8004968 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d302      	bcc.n	80026d0 <xQueueGenericSend+0xd4>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d136      	bne.n	800273e <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80026d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d2:	4618      	mov	r0, r3
 80026d4:	f005 f890 	bl	80077f8 <SEGGER_SYSVIEW_ShrinkId>
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	460b      	mov	r3, r1
 80026e2:	4601      	mov	r1, r0
 80026e4:	205a      	movs	r0, #90	; 0x5a
 80026e6:	f004 fac1 	bl	8006c6c <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	68b9      	ldr	r1, [r7, #8]
 80026ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026f0:	f000 fa78 	bl	8002be4 <prvCopyDataToQueue>
 80026f4:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d010      	beq.n	8002720 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002700:	3324      	adds	r3, #36	; 0x24
 8002702:	4618      	mov	r0, r3
 8002704:	f001 f89c 	bl	8003840 <xTaskRemoveFromEventList>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d013      	beq.n	8002736 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800270e:	4b4d      	ldr	r3, [pc, #308]	; (8002844 <xQueueGenericSend+0x248>)
 8002710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	f3bf 8f4f 	dsb	sy
 800271a:	f3bf 8f6f 	isb	sy
 800271e:	e00a      	b.n	8002736 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002722:	2b00      	cmp	r3, #0
 8002724:	d007      	beq.n	8002736 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002726:	4b47      	ldr	r3, [pc, #284]	; (8002844 <xQueueGenericSend+0x248>)
 8002728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	f3bf 8f4f 	dsb	sy
 8002732:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002736:	f002 f947 	bl	80049c8 <vPortExitCritical>
                return pdPASS;
 800273a:	2301      	movs	r3, #1
 800273c:	e07d      	b.n	800283a <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d110      	bne.n	8002766 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002744:	f002 f940 	bl	80049c8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274a:	4618      	mov	r0, r3
 800274c:	f005 f854 	bl	80077f8 <SEGGER_SYSVIEW_ShrinkId>
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	460b      	mov	r3, r1
 800275a:	4601      	mov	r1, r0
 800275c:	205a      	movs	r0, #90	; 0x5a
 800275e:	f004 fa85 	bl	8006c6c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002762:	2300      	movs	r3, #0
 8002764:	e069      	b.n	800283a <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002768:	2b00      	cmp	r3, #0
 800276a:	d106      	bne.n	800277a <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	4618      	mov	r0, r3
 8002772:	f001 f8cb 	bl	800390c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002776:	2301      	movs	r3, #1
 8002778:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800277a:	f002 f925 	bl	80049c8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800277e:	f000 fe17 	bl	80033b0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002782:	f002 f8f1 	bl	8004968 <vPortEnterCritical>
 8002786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002788:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800278c:	b25b      	sxtb	r3, r3
 800278e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002792:	d103      	bne.n	800279c <xQueueGenericSend+0x1a0>
 8002794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800279c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027a2:	b25b      	sxtb	r3, r3
 80027a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a8:	d103      	bne.n	80027b2 <xQueueGenericSend+0x1b6>
 80027aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027b2:	f002 f909 	bl	80049c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027b6:	1d3a      	adds	r2, r7, #4
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f001 f8ba 	bl	8003938 <xTaskCheckForTimeOut>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d124      	bne.n	8002814 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80027ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027cc:	f000 fb02 	bl	8002dd4 <prvIsQueueFull>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d018      	beq.n	8002808 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80027d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d8:	3310      	adds	r3, #16
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 ffdc 	bl	800379c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80027e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027e6:	f000 fa8d 	bl	8002d04 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80027ea:	f000 fdef 	bl	80033cc <xTaskResumeAll>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f47f af62 	bne.w	80026ba <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80027f6:	4b13      	ldr	r3, [pc, #76]	; (8002844 <xQueueGenericSend+0x248>)
 80027f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	f3bf 8f4f 	dsb	sy
 8002802:	f3bf 8f6f 	isb	sy
 8002806:	e758      	b.n	80026ba <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800280a:	f000 fa7b 	bl	8002d04 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800280e:	f000 fddd 	bl	80033cc <xTaskResumeAll>
 8002812:	e752      	b.n	80026ba <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002816:	f000 fa75 	bl	8002d04 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800281a:	f000 fdd7 	bl	80033cc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002820:	4618      	mov	r0, r3
 8002822:	f004 ffe9 	bl	80077f8 <SEGGER_SYSVIEW_ShrinkId>
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	460b      	mov	r3, r1
 8002830:	4601      	mov	r1, r0
 8002832:	205a      	movs	r0, #90	; 0x5a
 8002834:	f004 fa1a 	bl	8006c6c <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002838:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800283a:	4618      	mov	r0, r3
 800283c:	3738      	adds	r7, #56	; 0x38
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	e000ed04 	.word	0xe000ed04

08002848 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b090      	sub	sp, #64	; 0x40
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800285a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10a      	bne.n	8002876 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002864:	f383 8811 	msr	BASEPRI, r3
 8002868:	f3bf 8f6f 	isb	sy
 800286c:	f3bf 8f4f 	dsb	sy
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002872:	bf00      	nop
 8002874:	e7fe      	b.n	8002874 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d103      	bne.n	8002884 <xQueueGenericSendFromISR+0x3c>
 800287c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <xQueueGenericSendFromISR+0x40>
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <xQueueGenericSendFromISR+0x42>
 8002888:	2300      	movs	r3, #0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10a      	bne.n	80028a4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800288e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002892:	f383 8811 	msr	BASEPRI, r3
 8002896:	f3bf 8f6f 	isb	sy
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80028a0:	bf00      	nop
 80028a2:	e7fe      	b.n	80028a2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d103      	bne.n	80028b2 <xQueueGenericSendFromISR+0x6a>
 80028aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <xQueueGenericSendFromISR+0x6e>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <xQueueGenericSendFromISR+0x70>
 80028b6:	2300      	movs	r3, #0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10a      	bne.n	80028d2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80028bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c0:	f383 8811 	msr	BASEPRI, r3
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	623b      	str	r3, [r7, #32]
    }
 80028ce:	bf00      	nop
 80028d0:	e7fe      	b.n	80028d0 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028d2:	f002 f933 	bl	8004b3c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80028d6:	f3ef 8211 	mrs	r2, BASEPRI
 80028da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028de:	f383 8811 	msr	BASEPRI, r3
 80028e2:	f3bf 8f6f 	isb	sy
 80028e6:	f3bf 8f4f 	dsb	sy
 80028ea:	61fa      	str	r2, [r7, #28]
 80028ec:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80028ee:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80028f0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d302      	bcc.n	8002904 <xQueueGenericSendFromISR+0xbc>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d148      	bne.n	8002996 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002906:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800290a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800290e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002912:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002916:	4618      	mov	r0, r3
 8002918:	f004 ff6e 	bl	80077f8 <SEGGER_SYSVIEW_ShrinkId>
 800291c:	4601      	mov	r1, r0
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	461a      	mov	r2, r3
 8002922:	2060      	movs	r0, #96	; 0x60
 8002924:	f004 f8d2 	bl	8006acc <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800292e:	f000 f959 	bl	8002be4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002932:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293a:	d112      	bne.n	8002962 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800293c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	2b00      	cmp	r3, #0
 8002942:	d025      	beq.n	8002990 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002946:	3324      	adds	r3, #36	; 0x24
 8002948:	4618      	mov	r0, r3
 800294a:	f000 ff79 	bl	8003840 <xTaskRemoveFromEventList>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01d      	beq.n	8002990 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d01a      	beq.n	8002990 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	e016      	b.n	8002990 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002962:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002966:	2b7f      	cmp	r3, #127	; 0x7f
 8002968:	d10a      	bne.n	8002980 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800296a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296e:	f383 8811 	msr	BASEPRI, r3
 8002972:	f3bf 8f6f 	isb	sy
 8002976:	f3bf 8f4f 	dsb	sy
 800297a:	617b      	str	r3, [r7, #20]
    }
 800297c:	bf00      	nop
 800297e:	e7fe      	b.n	800297e <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002980:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002984:	3301      	adds	r3, #1
 8002986:	b2db      	uxtb	r3, r3
 8002988:	b25a      	sxtb	r2, r3
 800298a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002990:	2301      	movs	r3, #1
 8002992:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002994:	e00b      	b.n	80029ae <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002998:	4618      	mov	r0, r3
 800299a:	f004 ff2d 	bl	80077f8 <SEGGER_SYSVIEW_ShrinkId>
 800299e:	4601      	mov	r1, r0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	461a      	mov	r2, r3
 80029a4:	2060      	movs	r0, #96	; 0x60
 80029a6:	f004 f891 	bl	8006acc <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80029b8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80029ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3740      	adds	r7, #64	; 0x40
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80029c4:	b590      	push	{r4, r7, lr}
 80029c6:	b08f      	sub	sp, #60	; 0x3c
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80029d0:	2300      	movs	r3, #0
 80029d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80029d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10a      	bne.n	80029f4 <xQueueReceive+0x30>
        __asm volatile
 80029de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e2:	f383 8811 	msr	BASEPRI, r3
 80029e6:	f3bf 8f6f 	isb	sy
 80029ea:	f3bf 8f4f 	dsb	sy
 80029ee:	623b      	str	r3, [r7, #32]
    }
 80029f0:	bf00      	nop
 80029f2:	e7fe      	b.n	80029f2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d103      	bne.n	8002a02 <xQueueReceive+0x3e>
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <xQueueReceive+0x42>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <xQueueReceive+0x44>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10a      	bne.n	8002a22 <xQueueReceive+0x5e>
        __asm volatile
 8002a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a10:	f383 8811 	msr	BASEPRI, r3
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	61fb      	str	r3, [r7, #28]
    }
 8002a1e:	bf00      	nop
 8002a20:	e7fe      	b.n	8002a20 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a22:	f001 f8ad 	bl	8003b80 <xTaskGetSchedulerState>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d102      	bne.n	8002a32 <xQueueReceive+0x6e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <xQueueReceive+0x72>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <xQueueReceive+0x74>
 8002a36:	2300      	movs	r3, #0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10a      	bne.n	8002a52 <xQueueReceive+0x8e>
        __asm volatile
 8002a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a40:	f383 8811 	msr	BASEPRI, r3
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	f3bf 8f4f 	dsb	sy
 8002a4c:	61bb      	str	r3, [r7, #24]
    }
 8002a4e:	bf00      	nop
 8002a50:	e7fe      	b.n	8002a50 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a52:	f001 ff89 	bl	8004968 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d02f      	beq.n	8002ac2 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a62:	68b9      	ldr	r1, [r7, #8]
 8002a64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a66:	f000 f927 	bl	8002cb8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f004 fec3 	bl	80077f8 <SEGGER_SYSVIEW_ShrinkId>
 8002a72:	4604      	mov	r4, r0
 8002a74:	2000      	movs	r0, #0
 8002a76:	f004 febf 	bl	80077f8 <SEGGER_SYSVIEW_ShrinkId>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2101      	movs	r1, #1
 8002a80:	9100      	str	r1, [sp, #0]
 8002a82:	4621      	mov	r1, r4
 8002a84:	205c      	movs	r0, #92	; 0x5c
 8002a86:	f004 f8f1 	bl	8006c6c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	1e5a      	subs	r2, r3, #1
 8002a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a90:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00f      	beq.n	8002aba <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	3310      	adds	r3, #16
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fece 	bl	8003840 <xTaskRemoveFromEventList>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d007      	beq.n	8002aba <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002aaa:	4b4d      	ldr	r3, [pc, #308]	; (8002be0 <xQueueReceive+0x21c>)
 8002aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	f3bf 8f4f 	dsb	sy
 8002ab6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002aba:	f001 ff85 	bl	80049c8 <vPortExitCritical>
                return pdPASS;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e08a      	b.n	8002bd8 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d113      	bne.n	8002af0 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002ac8:	f001 ff7e 	bl	80049c8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f004 fe92 	bl	80077f8 <SEGGER_SYSVIEW_ShrinkId>
 8002ad4:	4604      	mov	r4, r0
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f004 fe8e 	bl	80077f8 <SEGGER_SYSVIEW_ShrinkId>
 8002adc:	4602      	mov	r2, r0
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	9100      	str	r1, [sp, #0]
 8002ae4:	4621      	mov	r1, r4
 8002ae6:	205c      	movs	r0, #92	; 0x5c
 8002ae8:	f004 f8c0 	bl	8006c6c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002aec:	2300      	movs	r3, #0
 8002aee:	e073      	b.n	8002bd8 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d106      	bne.n	8002b04 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002af6:	f107 0310 	add.w	r3, r7, #16
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 ff06 	bl	800390c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002b00:	2301      	movs	r3, #1
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002b04:	f001 ff60 	bl	80049c8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002b08:	f000 fc52 	bl	80033b0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002b0c:	f001 ff2c 	bl	8004968 <vPortEnterCritical>
 8002b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b16:	b25b      	sxtb	r3, r3
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1c:	d103      	bne.n	8002b26 <xQueueReceive+0x162>
 8002b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b2c:	b25b      	sxtb	r3, r3
 8002b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b32:	d103      	bne.n	8002b3c <xQueueReceive+0x178>
 8002b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b3c:	f001 ff44 	bl	80049c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b40:	1d3a      	adds	r2, r7, #4
 8002b42:	f107 0310 	add.w	r3, r7, #16
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 fef5 	bl	8003938 <xTaskCheckForTimeOut>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d124      	bne.n	8002b9e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b56:	f000 f927 	bl	8002da8 <prvIsQueueEmpty>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d018      	beq.n	8002b92 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b62:	3324      	adds	r3, #36	; 0x24
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 fe17 	bl	800379c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002b6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b70:	f000 f8c8 	bl	8002d04 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002b74:	f000 fc2a 	bl	80033cc <xTaskResumeAll>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f47f af69 	bne.w	8002a52 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002b80:	4b17      	ldr	r3, [pc, #92]	; (8002be0 <xQueueReceive+0x21c>)
 8002b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	e75f      	b.n	8002a52 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002b92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b94:	f000 f8b6 	bl	8002d04 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b98:	f000 fc18 	bl	80033cc <xTaskResumeAll>
 8002b9c:	e759      	b.n	8002a52 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002b9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ba0:	f000 f8b0 	bl	8002d04 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002ba4:	f000 fc12 	bl	80033cc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002baa:	f000 f8fd 	bl	8002da8 <prvIsQueueEmpty>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f43f af4e 	beq.w	8002a52 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f004 fe1d 	bl	80077f8 <SEGGER_SYSVIEW_ShrinkId>
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f004 fe19 	bl	80077f8 <SEGGER_SYSVIEW_ShrinkId>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2101      	movs	r1, #1
 8002bcc:	9100      	str	r1, [sp, #0]
 8002bce:	4621      	mov	r1, r4
 8002bd0:	205c      	movs	r0, #92	; 0x5c
 8002bd2:	f004 f84b 	bl	8006c6c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002bd6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3734      	adds	r7, #52	; 0x34
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd90      	pop	{r4, r7, pc}
 8002be0:	e000ed04 	.word	0xe000ed04

08002be4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10d      	bne.n	8002c1e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d14d      	bne.n	8002ca6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 ffd4 	bl	8003bbc <xTaskPriorityDisinherit>
 8002c14:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	e043      	b.n	8002ca6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d119      	bne.n	8002c58 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6858      	ldr	r0, [r3, #4]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	68b9      	ldr	r1, [r7, #8]
 8002c30:	f004 ffa8 	bl	8007b84 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	441a      	add	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d32b      	bcc.n	8002ca6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	605a      	str	r2, [r3, #4]
 8002c56:	e026      	b.n	8002ca6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	68d8      	ldr	r0, [r3, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	461a      	mov	r2, r3
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	f004 ff8e 	bl	8007b84 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	425b      	negs	r3, r3
 8002c72:	441a      	add	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d207      	bcs.n	8002c94 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	425b      	negs	r3, r3
 8002c8e:	441a      	add	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d105      	bne.n	8002ca6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1c5a      	adds	r2, r3, #1
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002cae:	697b      	ldr	r3, [r7, #20]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d018      	beq.n	8002cfc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	441a      	add	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d303      	bcc.n	8002cec <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68d9      	ldr	r1, [r3, #12]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	6838      	ldr	r0, [r7, #0]
 8002cf8:	f004 ff44 	bl	8007b84 <memcpy>
    }
}
 8002cfc:	bf00      	nop
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002d0c:	f001 fe2c 	bl	8004968 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d16:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d18:	e011      	b.n	8002d3e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d012      	beq.n	8002d48 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3324      	adds	r3, #36	; 0x24
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fd8a 	bl	8003840 <xTaskRemoveFromEventList>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002d32:	f000 fe67 	bl	8003a04 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	dce9      	bgt.n	8002d1a <prvUnlockQueue+0x16>
 8002d46:	e000      	b.n	8002d4a <prvUnlockQueue+0x46>
                        break;
 8002d48:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	22ff      	movs	r2, #255	; 0xff
 8002d4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002d52:	f001 fe39 	bl	80049c8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002d56:	f001 fe07 	bl	8004968 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d60:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d62:	e011      	b.n	8002d88 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d012      	beq.n	8002d92 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3310      	adds	r3, #16
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 fd65 	bl	8003840 <xTaskRemoveFromEventList>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002d7c:	f000 fe42 	bl	8003a04 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002d80:	7bbb      	ldrb	r3, [r7, #14]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	dce9      	bgt.n	8002d64 <prvUnlockQueue+0x60>
 8002d90:	e000      	b.n	8002d94 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002d92:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	22ff      	movs	r2, #255	; 0xff
 8002d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002d9c:	f001 fe14 	bl	80049c8 <vPortExitCritical>
}
 8002da0:	bf00      	nop
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002db0:	f001 fdda 	bl	8004968 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d102      	bne.n	8002dc2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	e001      	b.n	8002dc6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002dc6:	f001 fdff 	bl	80049c8 <vPortExitCritical>

    return xReturn;
 8002dca:	68fb      	ldr	r3, [r7, #12]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002ddc:	f001 fdc4 	bl	8004968 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d102      	bne.n	8002df2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002dec:	2301      	movs	r3, #1
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	e001      	b.n	8002df6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002df2:	2300      	movs	r3, #0
 8002df4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002df6:	f001 fde7 	bl	80049c8 <vPortExitCritical>

    return xReturn;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	e01e      	b.n	8002e52 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e14:	4a13      	ldr	r2, [pc, #76]	; (8002e64 <vQueueAddToRegistry+0x60>)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d115      	bne.n	8002e4c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e20:	4910      	ldr	r1, [pc, #64]	; (8002e64 <vQueueAddToRegistry+0x60>)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002e2a:	4a0e      	ldr	r2, [pc, #56]	; (8002e64 <vQueueAddToRegistry+0x60>)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4413      	add	r3, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f004 fcdd 	bl	80077f8 <SEGGER_SYSVIEW_ShrinkId>
 8002e3e:	4601      	mov	r1, r0
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	2071      	movs	r0, #113	; 0x71
 8002e46:	f003 fe41 	bl	8006acc <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002e4a:	e006      	b.n	8002e5a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b07      	cmp	r3, #7
 8002e56:	d9dd      	bls.n	8002e14 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002e58:	bf00      	nop
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000094 	.word	0x20000094

08002e68 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002e78:	f001 fd76 	bl	8004968 <vPortEnterCritical>
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e82:	b25b      	sxtb	r3, r3
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e88:	d103      	bne.n	8002e92 <vQueueWaitForMessageRestricted+0x2a>
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e98:	b25b      	sxtb	r3, r3
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9e:	d103      	bne.n	8002ea8 <vQueueWaitForMessageRestricted+0x40>
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ea8:	f001 fd8e 	bl	80049c8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d106      	bne.n	8002ec2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	3324      	adds	r3, #36	; 0x24
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	68b9      	ldr	r1, [r7, #8]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 fc91 	bl	80037e4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002ec2:	6978      	ldr	r0, [r7, #20]
 8002ec4:	f7ff ff1e 	bl	8002d04 <prvUnlockQueue>
    }
 8002ec8:	bf00      	nop
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08c      	sub	sp, #48	; 0x30
 8002ed4:	af04      	add	r7, sp, #16
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	603b      	str	r3, [r7, #0]
 8002edc:	4613      	mov	r3, r2
 8002ede:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f001 fe69 	bl	8004bbc <pvPortMalloc>
 8002eea:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00e      	beq.n	8002f10 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ef2:	2058      	movs	r0, #88	; 0x58
 8002ef4:	f001 fe62 	bl	8004bbc <pvPortMalloc>
 8002ef8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
 8002f06:	e005      	b.n	8002f14 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002f08:	6978      	ldr	r0, [r7, #20]
 8002f0a:	f001 ff37 	bl	8004d7c <vPortFree>
 8002f0e:	e001      	b.n	8002f14 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d013      	beq.n	8002f42 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f1a:	88fa      	ldrh	r2, [r7, #6]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	9303      	str	r3, [sp, #12]
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	9302      	str	r3, [sp, #8]
 8002f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f26:	9301      	str	r3, [sp, #4]
 8002f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	68b9      	ldr	r1, [r7, #8]
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 f80e 	bl	8002f52 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002f36:	69f8      	ldr	r0, [r7, #28]
 8002f38:	f000 f8a2 	bl	8003080 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	61bb      	str	r3, [r7, #24]
 8002f40:	e002      	b.n	8002f48 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f42:	f04f 33ff 	mov.w	r3, #4294967295
 8002f46:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002f48:	69bb      	ldr	r3, [r7, #24]
    }
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3720      	adds	r7, #32
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b088      	sub	sp, #32
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
 8002f5e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	461a      	mov	r2, r3
 8002f6a:	21a5      	movs	r1, #165	; 0xa5
 8002f6c:	f004 fdde 	bl	8007b2c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	f023 0307 	bic.w	r3, r3, #7
 8002f88:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00a      	beq.n	8002faa <prvInitialiseNewTask+0x58>
        __asm volatile
 8002f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f98:	f383 8811 	msr	BASEPRI, r3
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	617b      	str	r3, [r7, #20]
    }
 8002fa6:	bf00      	nop
 8002fa8:	e7fe      	b.n	8002fa8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01f      	beq.n	8002ff0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61fb      	str	r3, [r7, #28]
 8002fb4:	e012      	b.n	8002fdc <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	4413      	add	r3, r2
 8002fbc:	7819      	ldrb	r1, [r3, #0]
 8002fbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3334      	adds	r3, #52	; 0x34
 8002fc6:	460a      	mov	r2, r1
 8002fc8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	4413      	add	r3, r2
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d006      	beq.n	8002fe4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	61fb      	str	r3, [r7, #28]
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	2b09      	cmp	r3, #9
 8002fe0:	d9e9      	bls.n	8002fb6 <prvInitialiseNewTask+0x64>
 8002fe2:	e000      	b.n	8002fe6 <prvInitialiseNewTask+0x94>
            {
                break;
 8002fe4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002fee:	e003      	b.n	8002ff8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d901      	bls.n	8003002 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ffe:	2304      	movs	r3, #4
 8003000:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003006:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800300c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800300e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003010:	2200      	movs	r2, #0
 8003012:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003016:	3304      	adds	r3, #4
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff f96b 	bl	80022f4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800301e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003020:	3318      	adds	r3, #24
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff f966 	bl	80022f4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800302c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003030:	f1c3 0205 	rsb	r2, r3, #5
 8003034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003036:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800303c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800303e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003040:	3350      	adds	r3, #80	; 0x50
 8003042:	2204      	movs	r2, #4
 8003044:	2100      	movs	r1, #0
 8003046:	4618      	mov	r0, r3
 8003048:	f004 fd70 	bl	8007b2c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800304c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304e:	3354      	adds	r3, #84	; 0x54
 8003050:	2201      	movs	r2, #1
 8003052:	2100      	movs	r1, #0
 8003054:	4618      	mov	r0, r3
 8003056:	f004 fd69 	bl	8007b2c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	68f9      	ldr	r1, [r7, #12]
 800305e:	69b8      	ldr	r0, [r7, #24]
 8003060:	f001 fb54 	bl	800470c <pxPortInitialiseStack>
 8003064:	4602      	mov	r2, r0
 8003066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003068:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800306a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003074:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003076:	bf00      	nop
 8003078:	3720      	adds	r7, #32
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003080:	b5b0      	push	{r4, r5, r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af02      	add	r7, sp, #8
 8003086:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003088:	f001 fc6e 	bl	8004968 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800308c:	4b3b      	ldr	r3, [pc, #236]	; (800317c <prvAddNewTaskToReadyList+0xfc>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	3301      	adds	r3, #1
 8003092:	4a3a      	ldr	r2, [pc, #232]	; (800317c <prvAddNewTaskToReadyList+0xfc>)
 8003094:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003096:	4b3a      	ldr	r3, [pc, #232]	; (8003180 <prvAddNewTaskToReadyList+0x100>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d109      	bne.n	80030b2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800309e:	4a38      	ldr	r2, [pc, #224]	; (8003180 <prvAddNewTaskToReadyList+0x100>)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030a4:	4b35      	ldr	r3, [pc, #212]	; (800317c <prvAddNewTaskToReadyList+0xfc>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d110      	bne.n	80030ce <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80030ac:	f000 fcce 	bl	8003a4c <prvInitialiseTaskLists>
 80030b0:	e00d      	b.n	80030ce <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80030b2:	4b34      	ldr	r3, [pc, #208]	; (8003184 <prvAddNewTaskToReadyList+0x104>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030ba:	4b31      	ldr	r3, [pc, #196]	; (8003180 <prvAddNewTaskToReadyList+0x100>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d802      	bhi.n	80030ce <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80030c8:	4a2d      	ldr	r2, [pc, #180]	; (8003180 <prvAddNewTaskToReadyList+0x100>)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80030ce:	4b2e      	ldr	r3, [pc, #184]	; (8003188 <prvAddNewTaskToReadyList+0x108>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3301      	adds	r3, #1
 80030d4:	4a2c      	ldr	r2, [pc, #176]	; (8003188 <prvAddNewTaskToReadyList+0x108>)
 80030d6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80030d8:	4b2b      	ldr	r3, [pc, #172]	; (8003188 <prvAddNewTaskToReadyList+0x108>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d016      	beq.n	8003114 <prvAddNewTaskToReadyList+0x94>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f004 fa5f 	bl	80075ac <SEGGER_SYSVIEW_OnTaskCreate>
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	461d      	mov	r5, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	461c      	mov	r4, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	1ae3      	subs	r3, r4, r3
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	462b      	mov	r3, r5
 8003110:	f002 f802 	bl	8005118 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4618      	mov	r0, r3
 8003118:	f004 facc 	bl	80076b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	2201      	movs	r2, #1
 8003122:	409a      	lsls	r2, r3
 8003124:	4b19      	ldr	r3, [pc, #100]	; (800318c <prvAddNewTaskToReadyList+0x10c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4313      	orrs	r3, r2
 800312a:	4a18      	ldr	r2, [pc, #96]	; (800318c <prvAddNewTaskToReadyList+0x10c>)
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4a15      	ldr	r2, [pc, #84]	; (8003190 <prvAddNewTaskToReadyList+0x110>)
 800313c:	441a      	add	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3304      	adds	r3, #4
 8003142:	4619      	mov	r1, r3
 8003144:	4610      	mov	r0, r2
 8003146:	f7ff f8e2 	bl	800230e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800314a:	f001 fc3d 	bl	80049c8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800314e:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <prvAddNewTaskToReadyList+0x104>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00e      	beq.n	8003174 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003156:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <prvAddNewTaskToReadyList+0x100>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	429a      	cmp	r2, r3
 8003162:	d207      	bcs.n	8003174 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003164:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <prvAddNewTaskToReadyList+0x114>)
 8003166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003174:	bf00      	nop
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bdb0      	pop	{r4, r5, r7, pc}
 800317c:	200001ac 	.word	0x200001ac
 8003180:	200000d4 	.word	0x200000d4
 8003184:	200001b8 	.word	0x200001b8
 8003188:	200001c8 	.word	0x200001c8
 800318c:	200001b4 	.word	0x200001b4
 8003190:	200000d8 	.word	0x200000d8
 8003194:	e000ed04 	.word	0xe000ed04

08003198 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80031a0:	f001 fbe2 	bl	8004968 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <vTaskDelete+0x18>
 80031aa:	4b46      	ldr	r3, [pc, #280]	; (80032c4 <vTaskDelete+0x12c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	e000      	b.n	80031b2 <vTaskDelete+0x1a>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	3304      	adds	r3, #4
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff f905 	bl	80023c8 <uxListRemove>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d115      	bne.n	80031f0 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c8:	493f      	ldr	r1, [pc, #252]	; (80032c8 <vTaskDelete+0x130>)
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10a      	bne.n	80031f0 <vTaskDelete+0x58>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031de:	2201      	movs	r2, #1
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43da      	mvns	r2, r3
 80031e6:	4b39      	ldr	r3, [pc, #228]	; (80032cc <vTaskDelete+0x134>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4013      	ands	r3, r2
 80031ec:	4a37      	ldr	r2, [pc, #220]	; (80032cc <vTaskDelete+0x134>)
 80031ee:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d004      	beq.n	8003202 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	3318      	adds	r3, #24
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff f8e3 	bl	80023c8 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8003202:	4b33      	ldr	r3, [pc, #204]	; (80032d0 <vTaskDelete+0x138>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3301      	adds	r3, #1
 8003208:	4a31      	ldr	r2, [pc, #196]	; (80032d0 <vTaskDelete+0x138>)
 800320a:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 800320c:	4b2d      	ldr	r3, [pc, #180]	; (80032c4 <vTaskDelete+0x12c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	429a      	cmp	r2, r3
 8003214:	d118      	bne.n	8003248 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3304      	adds	r3, #4
 800321a:	4619      	mov	r1, r3
 800321c:	482d      	ldr	r0, [pc, #180]	; (80032d4 <vTaskDelete+0x13c>)
 800321e:	f7ff f876 	bl	800230e <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8003222:	4b2d      	ldr	r3, [pc, #180]	; (80032d8 <vTaskDelete+0x140>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3301      	adds	r3, #1
 8003228:	4a2b      	ldr	r2, [pc, #172]	; (80032d8 <vTaskDelete+0x140>)
 800322a:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4618      	mov	r0, r3
 8003230:	f004 fae2 	bl	80077f8 <SEGGER_SYSVIEW_ShrinkId>
 8003234:	4603      	mov	r3, r0
 8003236:	4619      	mov	r1, r3
 8003238:	2022      	movs	r0, #34	; 0x22
 800323a:	f003 fc0b 	bl	8006a54 <SEGGER_SYSVIEW_RecordU32>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4618      	mov	r0, r3
 8003242:	f001 ffd1 	bl	80051e8 <SYSVIEW_DeleteTask>
 8003246:	e016      	b.n	8003276 <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8003248:	4b24      	ldr	r3, [pc, #144]	; (80032dc <vTaskDelete+0x144>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3b01      	subs	r3, #1
 800324e:	4a23      	ldr	r2, [pc, #140]	; (80032dc <vTaskDelete+0x144>)
 8003250:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4618      	mov	r0, r3
 8003256:	f004 facf 	bl	80077f8 <SEGGER_SYSVIEW_ShrinkId>
 800325a:	4603      	mov	r3, r0
 800325c:	4619      	mov	r1, r3
 800325e:	2022      	movs	r0, #34	; 0x22
 8003260:	f003 fbf8 	bl	8006a54 <SEGGER_SYSVIEW_RecordU32>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4618      	mov	r0, r3
 8003268:	f001 ffbe 	bl	80051e8 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 fc5b 	bl	8003b28 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8003272:	f000 fc69 	bl	8003b48 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8003276:	f001 fba7 	bl	80049c8 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800327a:	4b19      	ldr	r3, [pc, #100]	; (80032e0 <vTaskDelete+0x148>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d01b      	beq.n	80032ba <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 8003282:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <vTaskDelete+0x12c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	429a      	cmp	r2, r3
 800328a:	d116      	bne.n	80032ba <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 800328c:	4b15      	ldr	r3, [pc, #84]	; (80032e4 <vTaskDelete+0x14c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <vTaskDelete+0x112>
        __asm volatile
 8003294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	60bb      	str	r3, [r7, #8]
    }
 80032a6:	bf00      	nop
 80032a8:	e7fe      	b.n	80032a8 <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 80032aa:	4b0f      	ldr	r3, [pc, #60]	; (80032e8 <vTaskDelete+0x150>)
 80032ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	f3bf 8f4f 	dsb	sy
 80032b6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80032ba:	bf00      	nop
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	200000d4 	.word	0x200000d4
 80032c8:	200000d8 	.word	0x200000d8
 80032cc:	200001b4 	.word	0x200001b4
 80032d0:	200001c8 	.word	0x200001c8
 80032d4:	20000180 	.word	0x20000180
 80032d8:	20000194 	.word	0x20000194
 80032dc:	200001ac 	.word	0x200001ac
 80032e0:	200001b8 	.word	0x200001b8
 80032e4:	200001d4 	.word	0x200001d4
 80032e8:	e000ed04 	.word	0xe000ed04

080032ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80032f2:	4b27      	ldr	r3, [pc, #156]	; (8003390 <vTaskStartScheduler+0xa4>)
 80032f4:	9301      	str	r3, [sp, #4]
 80032f6:	2300      	movs	r3, #0
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	2300      	movs	r3, #0
 80032fc:	2282      	movs	r2, #130	; 0x82
 80032fe:	4925      	ldr	r1, [pc, #148]	; (8003394 <vTaskStartScheduler+0xa8>)
 8003300:	4825      	ldr	r0, [pc, #148]	; (8003398 <vTaskStartScheduler+0xac>)
 8003302:	f7ff fde5 	bl	8002ed0 <xTaskCreate>
 8003306:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d102      	bne.n	8003314 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800330e:	f000 feeb 	bl	80040e8 <xTimerCreateTimerTask>
 8003312:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d124      	bne.n	8003364 <vTaskStartScheduler+0x78>
        __asm volatile
 800331a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	60bb      	str	r3, [r7, #8]
    }
 800332c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800332e:	4b1b      	ldr	r3, [pc, #108]	; (800339c <vTaskStartScheduler+0xb0>)
 8003330:	f04f 32ff 	mov.w	r2, #4294967295
 8003334:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003336:	4b1a      	ldr	r3, [pc, #104]	; (80033a0 <vTaskStartScheduler+0xb4>)
 8003338:	2201      	movs	r2, #1
 800333a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800333c:	4b19      	ldr	r3, [pc, #100]	; (80033a4 <vTaskStartScheduler+0xb8>)
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003342:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <vTaskStartScheduler+0xbc>)
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	4b12      	ldr	r3, [pc, #72]	; (8003390 <vTaskStartScheduler+0xa4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d102      	bne.n	8003354 <vTaskStartScheduler+0x68>
 800334e:	f004 f911 	bl	8007574 <SEGGER_SYSVIEW_OnIdle>
 8003352:	e004      	b.n	800335e <vTaskStartScheduler+0x72>
 8003354:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <vTaskStartScheduler+0xbc>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f004 f969 	bl	8007630 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800335e:	f001 fa61 	bl	8004824 <xPortStartScheduler>
 8003362:	e00e      	b.n	8003382 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336a:	d10a      	bne.n	8003382 <vTaskStartScheduler+0x96>
        __asm volatile
 800336c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003370:	f383 8811 	msr	BASEPRI, r3
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	607b      	str	r3, [r7, #4]
    }
 800337e:	bf00      	nop
 8003380:	e7fe      	b.n	8003380 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003382:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <vTaskStartScheduler+0xc0>)
 8003384:	681b      	ldr	r3, [r3, #0]
}
 8003386:	bf00      	nop
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	200001d0 	.word	0x200001d0
 8003394:	08007c34 	.word	0x08007c34
 8003398:	08003a1d 	.word	0x08003a1d
 800339c:	200001cc 	.word	0x200001cc
 80033a0:	200001b8 	.word	0x200001b8
 80033a4:	200001b0 	.word	0x200001b0
 80033a8:	200000d4 	.word	0x200000d4
 80033ac:	2000000c 	.word	0x2000000c

080033b0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80033b4:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <vTaskSuspendAll+0x18>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3301      	adds	r3, #1
 80033ba:	4a03      	ldr	r2, [pc, #12]	; (80033c8 <vTaskSuspendAll+0x18>)
 80033bc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80033be:	bf00      	nop
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	200001d4 	.word	0x200001d4

080033cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80033da:	4b43      	ldr	r3, [pc, #268]	; (80034e8 <xTaskResumeAll+0x11c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10a      	bne.n	80033f8 <xTaskResumeAll+0x2c>
        __asm volatile
 80033e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	603b      	str	r3, [r7, #0]
    }
 80033f4:	bf00      	nop
 80033f6:	e7fe      	b.n	80033f6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80033f8:	f001 fab6 	bl	8004968 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80033fc:	4b3a      	ldr	r3, [pc, #232]	; (80034e8 <xTaskResumeAll+0x11c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3b01      	subs	r3, #1
 8003402:	4a39      	ldr	r2, [pc, #228]	; (80034e8 <xTaskResumeAll+0x11c>)
 8003404:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003406:	4b38      	ldr	r3, [pc, #224]	; (80034e8 <xTaskResumeAll+0x11c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d165      	bne.n	80034da <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800340e:	4b37      	ldr	r3, [pc, #220]	; (80034ec <xTaskResumeAll+0x120>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d061      	beq.n	80034da <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003416:	e032      	b.n	800347e <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003418:	4b35      	ldr	r3, [pc, #212]	; (80034f0 <xTaskResumeAll+0x124>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3318      	adds	r3, #24
 8003424:	4618      	mov	r0, r3
 8003426:	f7fe ffcf 	bl	80023c8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	3304      	adds	r3, #4
 800342e:	4618      	mov	r0, r3
 8003430:	f7fe ffca 	bl	80023c8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4618      	mov	r0, r3
 8003438:	f004 f93c 	bl	80076b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	2201      	movs	r2, #1
 8003442:	409a      	lsls	r2, r3
 8003444:	4b2b      	ldr	r3, [pc, #172]	; (80034f4 <xTaskResumeAll+0x128>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4313      	orrs	r3, r2
 800344a:	4a2a      	ldr	r2, [pc, #168]	; (80034f4 <xTaskResumeAll+0x128>)
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4a27      	ldr	r2, [pc, #156]	; (80034f8 <xTaskResumeAll+0x12c>)
 800345c:	441a      	add	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	3304      	adds	r3, #4
 8003462:	4619      	mov	r1, r3
 8003464:	4610      	mov	r0, r2
 8003466:	f7fe ff52 	bl	800230e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800346e:	4b23      	ldr	r3, [pc, #140]	; (80034fc <xTaskResumeAll+0x130>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	429a      	cmp	r2, r3
 8003476:	d302      	bcc.n	800347e <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003478:	4b21      	ldr	r3, [pc, #132]	; (8003500 <xTaskResumeAll+0x134>)
 800347a:	2201      	movs	r2, #1
 800347c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800347e:	4b1c      	ldr	r3, [pc, #112]	; (80034f0 <xTaskResumeAll+0x124>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1c8      	bne.n	8003418 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800348c:	f000 fb5c 	bl	8003b48 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003490:	4b1c      	ldr	r3, [pc, #112]	; (8003504 <xTaskResumeAll+0x138>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d010      	beq.n	80034be <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800349c:	f000 f858 	bl	8003550 <xTaskIncrementTick>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80034a6:	4b16      	ldr	r3, [pc, #88]	; (8003500 <xTaskResumeAll+0x134>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1f1      	bne.n	800349c <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80034b8:	4b12      	ldr	r3, [pc, #72]	; (8003504 <xTaskResumeAll+0x138>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80034be:	4b10      	ldr	r3, [pc, #64]	; (8003500 <xTaskResumeAll+0x134>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80034c6:	2301      	movs	r3, #1
 80034c8:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80034ca:	4b0f      	ldr	r3, [pc, #60]	; (8003508 <xTaskResumeAll+0x13c>)
 80034cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80034da:	f001 fa75 	bl	80049c8 <vPortExitCritical>

    return xAlreadyYielded;
 80034de:	68bb      	ldr	r3, [r7, #8]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	200001d4 	.word	0x200001d4
 80034ec:	200001ac 	.word	0x200001ac
 80034f0:	2000016c 	.word	0x2000016c
 80034f4:	200001b4 	.word	0x200001b4
 80034f8:	200000d8 	.word	0x200000d8
 80034fc:	200000d4 	.word	0x200000d4
 8003500:	200001c0 	.word	0x200001c0
 8003504:	200001bc 	.word	0x200001bc
 8003508:	e000ed04 	.word	0xe000ed04

0800350c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003512:	4b05      	ldr	r3, [pc, #20]	; (8003528 <xTaskGetTickCount+0x1c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003518:	687b      	ldr	r3, [r7, #4]
}
 800351a:	4618      	mov	r0, r3
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	200001b0 	.word	0x200001b0

0800352c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003532:	f001 fb03 	bl	8004b3c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003536:	2300      	movs	r3, #0
 8003538:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800353a:	4b04      	ldr	r3, [pc, #16]	; (800354c <xTaskGetTickCountFromISR+0x20>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003540:	683b      	ldr	r3, [r7, #0]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	200001b0 	.word	0x200001b0

08003550 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800355a:	4b50      	ldr	r3, [pc, #320]	; (800369c <xTaskIncrementTick+0x14c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	f040 8092 	bne.w	8003688 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003564:	4b4e      	ldr	r3, [pc, #312]	; (80036a0 <xTaskIncrementTick+0x150>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3301      	adds	r3, #1
 800356a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800356c:	4a4c      	ldr	r2, [pc, #304]	; (80036a0 <xTaskIncrementTick+0x150>)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d120      	bne.n	80035ba <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003578:	4b4a      	ldr	r3, [pc, #296]	; (80036a4 <xTaskIncrementTick+0x154>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <xTaskIncrementTick+0x48>
        __asm volatile
 8003582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003586:	f383 8811 	msr	BASEPRI, r3
 800358a:	f3bf 8f6f 	isb	sy
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	603b      	str	r3, [r7, #0]
    }
 8003594:	bf00      	nop
 8003596:	e7fe      	b.n	8003596 <xTaskIncrementTick+0x46>
 8003598:	4b42      	ldr	r3, [pc, #264]	; (80036a4 <xTaskIncrementTick+0x154>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	4b42      	ldr	r3, [pc, #264]	; (80036a8 <xTaskIncrementTick+0x158>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a40      	ldr	r2, [pc, #256]	; (80036a4 <xTaskIncrementTick+0x154>)
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	4a40      	ldr	r2, [pc, #256]	; (80036a8 <xTaskIncrementTick+0x158>)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	4b3f      	ldr	r3, [pc, #252]	; (80036ac <xTaskIncrementTick+0x15c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3301      	adds	r3, #1
 80035b2:	4a3e      	ldr	r2, [pc, #248]	; (80036ac <xTaskIncrementTick+0x15c>)
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	f000 fac7 	bl	8003b48 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80035ba:	4b3d      	ldr	r3, [pc, #244]	; (80036b0 <xTaskIncrementTick+0x160>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d34c      	bcc.n	800365e <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035c4:	4b37      	ldr	r3, [pc, #220]	; (80036a4 <xTaskIncrementTick+0x154>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d104      	bne.n	80035d8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035ce:	4b38      	ldr	r3, [pc, #224]	; (80036b0 <xTaskIncrementTick+0x160>)
 80035d0:	f04f 32ff 	mov.w	r2, #4294967295
 80035d4:	601a      	str	r2, [r3, #0]
                    break;
 80035d6:	e042      	b.n	800365e <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035d8:	4b32      	ldr	r3, [pc, #200]	; (80036a4 <xTaskIncrementTick+0x154>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d203      	bcs.n	80035f8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80035f0:	4a2f      	ldr	r2, [pc, #188]	; (80036b0 <xTaskIncrementTick+0x160>)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80035f6:	e032      	b.n	800365e <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	3304      	adds	r3, #4
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe fee3 	bl	80023c8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003606:	2b00      	cmp	r3, #0
 8003608:	d004      	beq.n	8003614 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	3318      	adds	r3, #24
 800360e:	4618      	mov	r0, r3
 8003610:	f7fe feda 	bl	80023c8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4618      	mov	r0, r3
 8003618:	f004 f84c 	bl	80076b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	2201      	movs	r2, #1
 8003622:	409a      	lsls	r2, r3
 8003624:	4b23      	ldr	r3, [pc, #140]	; (80036b4 <xTaskIncrementTick+0x164>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4313      	orrs	r3, r2
 800362a:	4a22      	ldr	r2, [pc, #136]	; (80036b4 <xTaskIncrementTick+0x164>)
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4a1f      	ldr	r2, [pc, #124]	; (80036b8 <xTaskIncrementTick+0x168>)
 800363c:	441a      	add	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	3304      	adds	r3, #4
 8003642:	4619      	mov	r1, r3
 8003644:	4610      	mov	r0, r2
 8003646:	f7fe fe62 	bl	800230e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364e:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <xTaskIncrementTick+0x16c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	429a      	cmp	r2, r3
 8003656:	d3b5      	bcc.n	80035c4 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003658:	2301      	movs	r3, #1
 800365a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800365c:	e7b2      	b.n	80035c4 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800365e:	4b17      	ldr	r3, [pc, #92]	; (80036bc <xTaskIncrementTick+0x16c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003664:	4914      	ldr	r1, [pc, #80]	; (80036b8 <xTaskIncrementTick+0x168>)
 8003666:	4613      	mov	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d901      	bls.n	800367a <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8003676:	2301      	movs	r3, #1
 8003678:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800367a:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <xTaskIncrementTick+0x170>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d007      	beq.n	8003692 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003682:	2301      	movs	r3, #1
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	e004      	b.n	8003692 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003688:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <xTaskIncrementTick+0x174>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3301      	adds	r3, #1
 800368e:	4a0d      	ldr	r2, [pc, #52]	; (80036c4 <xTaskIncrementTick+0x174>)
 8003690:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003692:	697b      	ldr	r3, [r7, #20]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	200001d4 	.word	0x200001d4
 80036a0:	200001b0 	.word	0x200001b0
 80036a4:	20000164 	.word	0x20000164
 80036a8:	20000168 	.word	0x20000168
 80036ac:	200001c4 	.word	0x200001c4
 80036b0:	200001cc 	.word	0x200001cc
 80036b4:	200001b4 	.word	0x200001b4
 80036b8:	200000d8 	.word	0x200000d8
 80036bc:	200000d4 	.word	0x200000d4
 80036c0:	200001c0 	.word	0x200001c0
 80036c4:	200001bc 	.word	0x200001bc

080036c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036ce:	4b2d      	ldr	r3, [pc, #180]	; (8003784 <vTaskSwitchContext+0xbc>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80036d6:	4b2c      	ldr	r3, [pc, #176]	; (8003788 <vTaskSwitchContext+0xc0>)
 80036d8:	2201      	movs	r2, #1
 80036da:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80036dc:	e04d      	b.n	800377a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80036de:	4b2a      	ldr	r3, [pc, #168]	; (8003788 <vTaskSwitchContext+0xc0>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036e4:	4b29      	ldr	r3, [pc, #164]	; (800378c <vTaskSwitchContext+0xc4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	fab3 f383 	clz	r3, r3
 80036f0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80036f2:	7afb      	ldrb	r3, [r7, #11]
 80036f4:	f1c3 031f 	rsb	r3, r3, #31
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	4925      	ldr	r1, [pc, #148]	; (8003790 <vTaskSwitchContext+0xc8>)
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10a      	bne.n	8003724 <vTaskSwitchContext+0x5c>
        __asm volatile
 800370e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003712:	f383 8811 	msr	BASEPRI, r3
 8003716:	f3bf 8f6f 	isb	sy
 800371a:	f3bf 8f4f 	dsb	sy
 800371e:	607b      	str	r3, [r7, #4]
    }
 8003720:	bf00      	nop
 8003722:	e7fe      	b.n	8003722 <vTaskSwitchContext+0x5a>
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4613      	mov	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4a18      	ldr	r2, [pc, #96]	; (8003790 <vTaskSwitchContext+0xc8>)
 8003730:	4413      	add	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	3308      	adds	r3, #8
 8003746:	429a      	cmp	r2, r3
 8003748:	d104      	bne.n	8003754 <vTaskSwitchContext+0x8c>
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	605a      	str	r2, [r3, #4]
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	4a0e      	ldr	r2, [pc, #56]	; (8003794 <vTaskSwitchContext+0xcc>)
 800375c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <vTaskSwitchContext+0xcc>)
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <vTaskSwitchContext+0xd0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d102      	bne.n	8003770 <vTaskSwitchContext+0xa8>
 800376a:	f003 ff03 	bl	8007574 <SEGGER_SYSVIEW_OnIdle>
}
 800376e:	e004      	b.n	800377a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003770:	4b08      	ldr	r3, [pc, #32]	; (8003794 <vTaskSwitchContext+0xcc>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f003 ff5b 	bl	8007630 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800377a:	bf00      	nop
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	200001d4 	.word	0x200001d4
 8003788:	200001c0 	.word	0x200001c0
 800378c:	200001b4 	.word	0x200001b4
 8003790:	200000d8 	.word	0x200000d8
 8003794:	200000d4 	.word	0x200000d4
 8003798:	200001d0 	.word	0x200001d0

0800379c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10a      	bne.n	80037c2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80037ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b0:	f383 8811 	msr	BASEPRI, r3
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	f3bf 8f4f 	dsb	sy
 80037bc:	60fb      	str	r3, [r7, #12]
    }
 80037be:	bf00      	nop
 80037c0:	e7fe      	b.n	80037c0 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037c2:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <vTaskPlaceOnEventList+0x44>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	3318      	adds	r3, #24
 80037c8:	4619      	mov	r1, r3
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fe fdc3 	bl	8002356 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80037d0:	2101      	movs	r1, #1
 80037d2:	6838      	ldr	r0, [r7, #0]
 80037d4:	f000 fc10 	bl	8003ff8 <prvAddCurrentTaskToDelayedList>
}
 80037d8:	bf00      	nop
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	200000d4 	.word	0x200000d4

080037e4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10a      	bne.n	800380c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80037f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	617b      	str	r3, [r7, #20]
    }
 8003808:	bf00      	nop
 800380a:	e7fe      	b.n	800380a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800380c:	4b0b      	ldr	r3, [pc, #44]	; (800383c <vTaskPlaceOnEventListRestricted+0x58>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3318      	adds	r3, #24
 8003812:	4619      	mov	r1, r3
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f7fe fd7a 	bl	800230e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003820:	f04f 33ff 	mov.w	r3, #4294967295
 8003824:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003826:	2024      	movs	r0, #36	; 0x24
 8003828:	f003 f8f6 	bl	8006a18 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	68b8      	ldr	r0, [r7, #8]
 8003830:	f000 fbe2 	bl	8003ff8 <prvAddCurrentTaskToDelayedList>
    }
 8003834:	bf00      	nop
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	200000d4 	.word	0x200000d4

08003840 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10a      	bne.n	800386c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385a:	f383 8811 	msr	BASEPRI, r3
 800385e:	f3bf 8f6f 	isb	sy
 8003862:	f3bf 8f4f 	dsb	sy
 8003866:	60fb      	str	r3, [r7, #12]
    }
 8003868:	bf00      	nop
 800386a:	e7fe      	b.n	800386a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	3318      	adds	r3, #24
 8003870:	4618      	mov	r0, r3
 8003872:	f7fe fda9 	bl	80023c8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003876:	4b1f      	ldr	r3, [pc, #124]	; (80038f4 <xTaskRemoveFromEventList+0xb4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d120      	bne.n	80038c0 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	3304      	adds	r3, #4
 8003882:	4618      	mov	r0, r3
 8003884:	f7fe fda0 	bl	80023c8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	4618      	mov	r0, r3
 800388c:	f003 ff12 	bl	80076b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	2201      	movs	r2, #1
 8003896:	409a      	lsls	r2, r3
 8003898:	4b17      	ldr	r3, [pc, #92]	; (80038f8 <xTaskRemoveFromEventList+0xb8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4313      	orrs	r3, r2
 800389e:	4a16      	ldr	r2, [pc, #88]	; (80038f8 <xTaskRemoveFromEventList+0xb8>)
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4a13      	ldr	r2, [pc, #76]	; (80038fc <xTaskRemoveFromEventList+0xbc>)
 80038b0:	441a      	add	r2, r3
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	3304      	adds	r3, #4
 80038b6:	4619      	mov	r1, r3
 80038b8:	4610      	mov	r0, r2
 80038ba:	f7fe fd28 	bl	800230e <vListInsertEnd>
 80038be:	e005      	b.n	80038cc <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	3318      	adds	r3, #24
 80038c4:	4619      	mov	r1, r3
 80038c6:	480e      	ldr	r0, [pc, #56]	; (8003900 <xTaskRemoveFromEventList+0xc0>)
 80038c8:	f7fe fd21 	bl	800230e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d0:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <xTaskRemoveFromEventList+0xc4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d905      	bls.n	80038e6 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80038da:	2301      	movs	r3, #1
 80038dc:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80038de:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <xTaskRemoveFromEventList+0xc8>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	e001      	b.n	80038ea <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80038ea:	697b      	ldr	r3, [r7, #20]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	200001d4 	.word	0x200001d4
 80038f8:	200001b4 	.word	0x200001b4
 80038fc:	200000d8 	.word	0x200000d8
 8003900:	2000016c 	.word	0x2000016c
 8003904:	200000d4 	.word	0x200000d4
 8003908:	200001c0 	.word	0x200001c0

0800390c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003914:	4b06      	ldr	r3, [pc, #24]	; (8003930 <vTaskInternalSetTimeOutState+0x24>)
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <vTaskInternalSetTimeOutState+0x28>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	605a      	str	r2, [r3, #4]
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	200001c4 	.word	0x200001c4
 8003934:	200001b0 	.word	0x200001b0

08003938 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10a      	bne.n	800395e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	613b      	str	r3, [r7, #16]
    }
 800395a:	bf00      	nop
 800395c:	e7fe      	b.n	800395c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	60fb      	str	r3, [r7, #12]
    }
 8003976:	bf00      	nop
 8003978:	e7fe      	b.n	8003978 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800397a:	f000 fff5 	bl	8004968 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800397e:	4b1f      	ldr	r3, [pc, #124]	; (80039fc <xTaskCheckForTimeOut+0xc4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003996:	d102      	bne.n	800399e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003998:	2300      	movs	r3, #0
 800399a:	61fb      	str	r3, [r7, #28]
 800399c:	e026      	b.n	80039ec <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	4b17      	ldr	r3, [pc, #92]	; (8003a00 <xTaskCheckForTimeOut+0xc8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d00a      	beq.n	80039c0 <xTaskCheckForTimeOut+0x88>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d305      	bcc.n	80039c0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80039b4:	2301      	movs	r3, #1
 80039b6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	e015      	b.n	80039ec <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d20b      	bcs.n	80039e2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	1ad2      	subs	r2, r2, r3
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff ff98 	bl	800390c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80039dc:	2300      	movs	r3, #0
 80039de:	61fb      	str	r3, [r7, #28]
 80039e0:	e004      	b.n	80039ec <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80039e8:	2301      	movs	r3, #1
 80039ea:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80039ec:	f000 ffec 	bl	80049c8 <vPortExitCritical>

    return xReturn;
 80039f0:	69fb      	ldr	r3, [r7, #28]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3720      	adds	r7, #32
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	200001b0 	.word	0x200001b0
 8003a00:	200001c4 	.word	0x200001c4

08003a04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003a08:	4b03      	ldr	r3, [pc, #12]	; (8003a18 <vTaskMissedYield+0x14>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]
}
 8003a0e:	bf00      	nop
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	200001c0 	.word	0x200001c0

08003a1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003a24:	f000 f852 	bl	8003acc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a28:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <prvIdleTask+0x28>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d9f9      	bls.n	8003a24 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <prvIdleTask+0x2c>)
 8003a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003a40:	e7f0      	b.n	8003a24 <prvIdleTask+0x8>
 8003a42:	bf00      	nop
 8003a44:	200000d8 	.word	0x200000d8
 8003a48:	e000ed04 	.word	0xe000ed04

08003a4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a52:	2300      	movs	r3, #0
 8003a54:	607b      	str	r3, [r7, #4]
 8003a56:	e00c      	b.n	8003a72 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4a12      	ldr	r2, [pc, #72]	; (8003aac <prvInitialiseTaskLists+0x60>)
 8003a64:	4413      	add	r3, r2
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fe fc24 	bl	80022b4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	607b      	str	r3, [r7, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d9ef      	bls.n	8003a58 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003a78:	480d      	ldr	r0, [pc, #52]	; (8003ab0 <prvInitialiseTaskLists+0x64>)
 8003a7a:	f7fe fc1b 	bl	80022b4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003a7e:	480d      	ldr	r0, [pc, #52]	; (8003ab4 <prvInitialiseTaskLists+0x68>)
 8003a80:	f7fe fc18 	bl	80022b4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003a84:	480c      	ldr	r0, [pc, #48]	; (8003ab8 <prvInitialiseTaskLists+0x6c>)
 8003a86:	f7fe fc15 	bl	80022b4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003a8a:	480c      	ldr	r0, [pc, #48]	; (8003abc <prvInitialiseTaskLists+0x70>)
 8003a8c:	f7fe fc12 	bl	80022b4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003a90:	480b      	ldr	r0, [pc, #44]	; (8003ac0 <prvInitialiseTaskLists+0x74>)
 8003a92:	f7fe fc0f 	bl	80022b4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003a96:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <prvInitialiseTaskLists+0x78>)
 8003a98:	4a05      	ldr	r2, [pc, #20]	; (8003ab0 <prvInitialiseTaskLists+0x64>)
 8003a9a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <prvInitialiseTaskLists+0x7c>)
 8003a9e:	4a05      	ldr	r2, [pc, #20]	; (8003ab4 <prvInitialiseTaskLists+0x68>)
 8003aa0:	601a      	str	r2, [r3, #0]
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	200000d8 	.word	0x200000d8
 8003ab0:	2000013c 	.word	0x2000013c
 8003ab4:	20000150 	.word	0x20000150
 8003ab8:	2000016c 	.word	0x2000016c
 8003abc:	20000180 	.word	0x20000180
 8003ac0:	20000198 	.word	0x20000198
 8003ac4:	20000164 	.word	0x20000164
 8003ac8:	20000168 	.word	0x20000168

08003acc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ad2:	e019      	b.n	8003b08 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003ad4:	f000 ff48 	bl	8004968 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ad8:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <prvCheckTasksWaitingTermination+0x50>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe fc6f 	bl	80023c8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003aea:	4b0d      	ldr	r3, [pc, #52]	; (8003b20 <prvCheckTasksWaitingTermination+0x54>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	4a0b      	ldr	r2, [pc, #44]	; (8003b20 <prvCheckTasksWaitingTermination+0x54>)
 8003af2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003af4:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <prvCheckTasksWaitingTermination+0x58>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3b01      	subs	r3, #1
 8003afa:	4a0a      	ldr	r2, [pc, #40]	; (8003b24 <prvCheckTasksWaitingTermination+0x58>)
 8003afc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003afe:	f000 ff63 	bl	80049c8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f810 	bl	8003b28 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b08:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <prvCheckTasksWaitingTermination+0x58>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1e1      	bne.n	8003ad4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003b10:	bf00      	nop
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000180 	.word	0x20000180
 8003b20:	200001ac 	.word	0x200001ac
 8003b24:	20000194 	.word	0x20000194

08003b28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	4618      	mov	r0, r3
 8003b36:	f001 f921 	bl	8004d7c <vPortFree>
                vPortFree( pxTCB );
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f001 f91e 	bl	8004d7c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b4c:	4b0a      	ldr	r3, [pc, #40]	; (8003b78 <prvResetNextTaskUnblockTime+0x30>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d104      	bne.n	8003b60 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003b56:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <prvResetNextTaskUnblockTime+0x34>)
 8003b58:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003b5e:	e005      	b.n	8003b6c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b60:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <prvResetNextTaskUnblockTime+0x30>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a04      	ldr	r2, [pc, #16]	; (8003b7c <prvResetNextTaskUnblockTime+0x34>)
 8003b6a:	6013      	str	r3, [r2, #0]
}
 8003b6c:	bf00      	nop
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	20000164 	.word	0x20000164
 8003b7c:	200001cc 	.word	0x200001cc

08003b80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003b86:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <xTaskGetSchedulerState+0x34>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d102      	bne.n	8003b94 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	607b      	str	r3, [r7, #4]
 8003b92:	e008      	b.n	8003ba6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b94:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <xTaskGetSchedulerState+0x38>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d102      	bne.n	8003ba2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	607b      	str	r3, [r7, #4]
 8003ba0:	e001      	b.n	8003ba6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003ba6:	687b      	ldr	r3, [r7, #4]
    }
 8003ba8:	4618      	mov	r0, r3
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	200001b8 	.word	0x200001b8
 8003bb8:	200001d4 	.word	0x200001d4

08003bbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d068      	beq.n	8003ca4 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003bd2:	4b37      	ldr	r3, [pc, #220]	; (8003cb0 <xTaskPriorityDisinherit+0xf4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d00a      	beq.n	8003bf2 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be0:	f383 8811 	msr	BASEPRI, r3
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	60fb      	str	r3, [r7, #12]
    }
 8003bee:	bf00      	nop
 8003bf0:	e7fe      	b.n	8003bf0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10a      	bne.n	8003c10 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	60bb      	str	r3, [r7, #8]
    }
 8003c0c:	bf00      	nop
 8003c0e:	e7fe      	b.n	8003c0e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c14:	1e5a      	subs	r2, r3, #1
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d03e      	beq.n	8003ca4 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d13a      	bne.n	8003ca4 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	3304      	adds	r3, #4
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fe fbc8 	bl	80023c8 <uxListRemove>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10a      	bne.n	8003c54 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	2201      	movs	r2, #1
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	43da      	mvns	r2, r3
 8003c4a:	4b1a      	ldr	r3, [pc, #104]	; (8003cb4 <xTaskPriorityDisinherit+0xf8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	4a18      	ldr	r2, [pc, #96]	; (8003cb4 <xTaskPriorityDisinherit+0xf8>)
 8003c52:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4619      	mov	r1, r3
 8003c58:	204a      	movs	r0, #74	; 0x4a
 8003c5a:	f002 fefb 	bl	8006a54 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	f1c3 0205 	rsb	r2, r3, #5
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c76:	2201      	movs	r2, #1
 8003c78:	409a      	lsls	r2, r3
 8003c7a:	4b0e      	ldr	r3, [pc, #56]	; (8003cb4 <xTaskPriorityDisinherit+0xf8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	4a0c      	ldr	r2, [pc, #48]	; (8003cb4 <xTaskPriorityDisinherit+0xf8>)
 8003c82:	6013      	str	r3, [r2, #0]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4a09      	ldr	r2, [pc, #36]	; (8003cb8 <xTaskPriorityDisinherit+0xfc>)
 8003c92:	441a      	add	r2, r3
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	3304      	adds	r3, #4
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	f7fe fb37 	bl	800230e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003ca4:	697b      	ldr	r3, [r7, #20]
    }
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	200000d4 	.word	0x200000d4
 8003cb4:	200001b4 	.word	0x200001b4
 8003cb8:	200000d8 	.word	0x200000d8

08003cbc <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
 8003cc8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	613b      	str	r3, [r7, #16]
    }
 8003ce2:	bf00      	nop
 8003ce4:	e7fe      	b.n	8003ce4 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003ce6:	f000 fe3f 	bl	8004968 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003cea:	4b36      	ldr	r3, [pc, #216]	; (8003dc4 <xTaskGenericNotifyWait+0x108>)
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	3354      	adds	r3, #84	; 0x54
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d022      	beq.n	8003d42 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003cfc:	4b31      	ldr	r3, [pc, #196]	; (8003dc4 <xTaskGenericNotifyWait+0x108>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	3214      	adds	r2, #20
 8003d04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	43d2      	mvns	r2, r2
 8003d0c:	4011      	ands	r1, r2
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	3214      	adds	r2, #20
 8003d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003d16:	4b2b      	ldr	r3, [pc, #172]	; (8003dc4 <xTaskGenericNotifyWait+0x108>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3354      	adds	r3, #84	; 0x54
 8003d20:	2201      	movs	r2, #1
 8003d22:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00b      	beq.n	8003d42 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	6a38      	ldr	r0, [r7, #32]
 8003d2e:	f000 f963 	bl	8003ff8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003d32:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <xTaskGenericNotifyWait+0x10c>)
 8003d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003d42:	f000 fe41 	bl	80049c8 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003d46:	f000 fe0f 	bl	8004968 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	4613      	mov	r3, r2
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	68b9      	ldr	r1, [r7, #8]
 8003d56:	2040      	movs	r0, #64	; 0x40
 8003d58:	f002 ff88 	bl	8006c6c <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d007      	beq.n	8003d72 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003d62:	4b18      	ldr	r3, [pc, #96]	; (8003dc4 <xTaskGenericNotifyWait+0x108>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	3214      	adds	r2, #20
 8003d6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003d72:	4b14      	ldr	r3, [pc, #80]	; (8003dc4 <xTaskGenericNotifyWait+0x108>)
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4413      	add	r3, r2
 8003d7a:	3354      	adds	r3, #84	; 0x54
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d002      	beq.n	8003d8a <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	e00e      	b.n	8003da8 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003d8a:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <xTaskGenericNotifyWait+0x108>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	3214      	adds	r2, #20
 8003d92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	43d2      	mvns	r2, r2
 8003d9a:	4011      	ands	r1, r2
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	3214      	adds	r2, #20
 8003da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003da4:	2301      	movs	r3, #1
 8003da6:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003da8:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <xTaskGenericNotifyWait+0x108>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4413      	add	r3, r2
 8003db0:	3354      	adds	r3, #84	; 0x54
 8003db2:	2200      	movs	r2, #0
 8003db4:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003db6:	f000 fe07 	bl	80049c8 <vPortExitCritical>

        return xReturn;
 8003dba:	697b      	ldr	r3, [r7, #20]
    }
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	200000d4 	.word	0x200000d4
 8003dc8:	e000ed04 	.word	0xe000ed04

08003dcc <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b092      	sub	sp, #72	; 0x48
 8003dd0:	af02      	add	r7, sp, #8
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10a      	bne.n	8003dfa <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8003df6:	bf00      	nop
 8003df8:	e7fe      	b.n	8003df8 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00a      	beq.n	8003e16 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8003e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003e12:	bf00      	nop
 8003e14:	e7fe      	b.n	8003e14 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e16:	f000 fe91 	bl	8004b3c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8003e1e:	f3ef 8211 	mrs	r2, BASEPRI
 8003e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e26:	f383 8811 	msr	BASEPRI, r3
 8003e2a:	f3bf 8f6f 	isb	sy
 8003e2e:	f3bf 8f4f 	dsb	sy
 8003e32:	627a      	str	r2, [r7, #36]	; 0x24
 8003e34:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e38:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8003e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d006      	beq.n	8003e4e <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	3214      	adds	r2, #20
 8003e46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e4c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003e4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4413      	add	r3, r2
 8003e54:	3354      	adds	r3, #84	; 0x54
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003e5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	4413      	add	r3, r2
 8003e62:	3354      	adds	r3, #84	; 0x54
 8003e64:	2202      	movs	r2, #2
 8003e66:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003e68:	78fb      	ldrb	r3, [r7, #3]
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d83b      	bhi.n	8003ee6 <xTaskGenericNotifyFromISR+0x11a>
 8003e6e:	a201      	add	r2, pc, #4	; (adr r2, 8003e74 <xTaskGenericNotifyFromISR+0xa8>)
 8003e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e74:	08003f05 	.word	0x08003f05
 8003e78:	08003e89 	.word	0x08003e89
 8003e7c:	08003ea5 	.word	0x08003ea5
 8003e80:	08003ebd 	.word	0x08003ebd
 8003e84:	08003ecb 	.word	0x08003ecb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	3214      	adds	r2, #20
 8003e8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	ea42 0103 	orr.w	r1, r2, r3
 8003e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	3214      	adds	r2, #20
 8003e9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003ea2:	e032      	b.n	8003f0a <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	3214      	adds	r2, #20
 8003eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eae:	1c59      	adds	r1, r3, #1
 8003eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	3214      	adds	r2, #20
 8003eb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003eba:	e026      	b.n	8003f0a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	3214      	adds	r2, #20
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003ec8:	e01f      	b.n	8003f0a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003eca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d006      	beq.n	8003ee0 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	3214      	adds	r2, #20
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003ede:	e014      	b.n	8003f0a <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8003ee4:	e011      	b.n	8003f0a <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003ee6:	4b3d      	ldr	r3, [pc, #244]	; (8003fdc <xTaskGenericNotifyFromISR+0x210>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00c      	beq.n	8003f08 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8003eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	61fb      	str	r3, [r7, #28]
    }
 8003f00:	bf00      	nop
 8003f02:	e7fe      	b.n	8003f02 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8003f04:	bf00      	nop
 8003f06:	e000      	b.n	8003f0a <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8003f08:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8003f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f003 fc73 	bl	80077f8 <SEGGER_SYSVIEW_ShrinkId>
 8003f12:	78f9      	ldrb	r1, [r7, #3]
 8003f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f18:	9201      	str	r2, [sp, #4]
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	4601      	mov	r1, r0
 8003f22:	203f      	movs	r0, #63	; 0x3f
 8003f24:	f002 ff34 	bl	8006d90 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003f28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d149      	bne.n	8003fc4 <xTaskGenericNotifyFromISR+0x1f8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <xTaskGenericNotifyFromISR+0x182>
        __asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	61bb      	str	r3, [r7, #24]
    }
 8003f4a:	bf00      	nop
 8003f4c:	e7fe      	b.n	8003f4c <xTaskGenericNotifyFromISR+0x180>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f4e:	4b24      	ldr	r3, [pc, #144]	; (8003fe0 <xTaskGenericNotifyFromISR+0x214>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d120      	bne.n	8003f98 <xTaskGenericNotifyFromISR+0x1cc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f58:	3304      	adds	r3, #4
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fe fa34 	bl	80023c8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f62:	4618      	mov	r0, r3
 8003f64:	f003 fba6 	bl	80076b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	409a      	lsls	r2, r3
 8003f70:	4b1c      	ldr	r3, [pc, #112]	; (8003fe4 <xTaskGenericNotifyFromISR+0x218>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	4a1b      	ldr	r2, [pc, #108]	; (8003fe4 <xTaskGenericNotifyFromISR+0x218>)
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f7e:	4613      	mov	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4a18      	ldr	r2, [pc, #96]	; (8003fe8 <xTaskGenericNotifyFromISR+0x21c>)
 8003f88:	441a      	add	r2, r3
 8003f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4610      	mov	r0, r2
 8003f92:	f7fe f9bc 	bl	800230e <vListInsertEnd>
 8003f96:	e005      	b.n	8003fa4 <xTaskGenericNotifyFromISR+0x1d8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9a:	3318      	adds	r3, #24
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4813      	ldr	r0, [pc, #76]	; (8003fec <xTaskGenericNotifyFromISR+0x220>)
 8003fa0:	f7fe f9b5 	bl	800230e <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa8:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <xTaskGenericNotifyFromISR+0x224>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d908      	bls.n	8003fc4 <xTaskGenericNotifyFromISR+0x1f8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8003fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <xTaskGenericNotifyFromISR+0x1f2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8003fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fba:	2201      	movs	r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <xTaskGenericNotifyFromISR+0x228>)
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc6:	617b      	str	r3, [r7, #20]
        __asm volatile
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f383 8811 	msr	BASEPRI, r3
    }
 8003fce:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8003fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3740      	adds	r7, #64	; 0x40
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	200001b0 	.word	0x200001b0
 8003fe0:	200001d4 	.word	0x200001d4
 8003fe4:	200001b4 	.word	0x200001b4
 8003fe8:	200000d8 	.word	0x200000d8
 8003fec:	2000016c 	.word	0x2000016c
 8003ff0:	200000d4 	.word	0x200000d4
 8003ff4:	200001c0 	.word	0x200001c0

08003ff8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004002:	4b32      	ldr	r3, [pc, #200]	; (80040cc <prvAddCurrentTaskToDelayedList+0xd4>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004008:	4b31      	ldr	r3, [pc, #196]	; (80040d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3304      	adds	r3, #4
 800400e:	4618      	mov	r0, r3
 8004010:	f7fe f9da 	bl	80023c8 <uxListRemove>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10b      	bne.n	8004032 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800401a:	4b2d      	ldr	r3, [pc, #180]	; (80040d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	2201      	movs	r2, #1
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43da      	mvns	r2, r3
 8004028:	4b2a      	ldr	r3, [pc, #168]	; (80040d4 <prvAddCurrentTaskToDelayedList+0xdc>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4013      	ands	r3, r2
 800402e:	4a29      	ldr	r2, [pc, #164]	; (80040d4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004030:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004038:	d110      	bne.n	800405c <prvAddCurrentTaskToDelayedList+0x64>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00d      	beq.n	800405c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8004040:	4b23      	ldr	r3, [pc, #140]	; (80040d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	211b      	movs	r1, #27
 8004046:	4618      	mov	r0, r3
 8004048:	f003 fb76 	bl	8007738 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800404c:	4b20      	ldr	r3, [pc, #128]	; (80040d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3304      	adds	r3, #4
 8004052:	4619      	mov	r1, r3
 8004054:	4820      	ldr	r0, [pc, #128]	; (80040d8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8004056:	f7fe f95a 	bl	800230e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800405a:	e032      	b.n	80040c2 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4413      	add	r3, r2
 8004062:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004064:	4b1a      	ldr	r3, [pc, #104]	; (80040d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	429a      	cmp	r2, r3
 8004072:	d20f      	bcs.n	8004094 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004074:	4b16      	ldr	r3, [pc, #88]	; (80040d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2104      	movs	r1, #4
 800407a:	4618      	mov	r0, r3
 800407c:	f003 fb5c 	bl	8007738 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004080:	4b16      	ldr	r3, [pc, #88]	; (80040dc <prvAddCurrentTaskToDelayedList+0xe4>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3304      	adds	r3, #4
 800408a:	4619      	mov	r1, r3
 800408c:	4610      	mov	r0, r2
 800408e:	f7fe f962 	bl	8002356 <vListInsert>
}
 8004092:	e016      	b.n	80040c2 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8004094:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2104      	movs	r1, #4
 800409a:	4618      	mov	r0, r3
 800409c:	f003 fb4c 	bl	8007738 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040a0:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3304      	adds	r3, #4
 80040aa:	4619      	mov	r1, r3
 80040ac:	4610      	mov	r0, r2
 80040ae:	f7fe f952 	bl	8002356 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80040b2:	4b0c      	ldr	r3, [pc, #48]	; (80040e4 <prvAddCurrentTaskToDelayedList+0xec>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d202      	bcs.n	80040c2 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80040bc:	4a09      	ldr	r2, [pc, #36]	; (80040e4 <prvAddCurrentTaskToDelayedList+0xec>)
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	6013      	str	r3, [r2, #0]
}
 80040c2:	bf00      	nop
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	200001b0 	.word	0x200001b0
 80040d0:	200000d4 	.word	0x200000d4
 80040d4:	200001b4 	.word	0x200001b4
 80040d8:	20000198 	.word	0x20000198
 80040dc:	20000168 	.word	0x20000168
 80040e0:	20000164 	.word	0x20000164
 80040e4:	200001cc 	.word	0x200001cc

080040e8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80040f2:	f000 fad5 	bl	80046a0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80040f6:	4b11      	ldr	r3, [pc, #68]	; (800413c <xTimerCreateTimerTask+0x54>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00b      	beq.n	8004116 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80040fe:	4b10      	ldr	r3, [pc, #64]	; (8004140 <xTimerCreateTimerTask+0x58>)
 8004100:	9301      	str	r3, [sp, #4]
 8004102:	2302      	movs	r3, #2
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	2300      	movs	r3, #0
 8004108:	f44f 7282 	mov.w	r2, #260	; 0x104
 800410c:	490d      	ldr	r1, [pc, #52]	; (8004144 <xTimerCreateTimerTask+0x5c>)
 800410e:	480e      	ldr	r0, [pc, #56]	; (8004148 <xTimerCreateTimerTask+0x60>)
 8004110:	f7fe fede 	bl	8002ed0 <xTaskCreate>
 8004114:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10a      	bne.n	8004132 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800411c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004120:	f383 8811 	msr	BASEPRI, r3
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	603b      	str	r3, [r7, #0]
    }
 800412e:	bf00      	nop
 8004130:	e7fe      	b.n	8004130 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004132:	687b      	ldr	r3, [r7, #4]
    }
 8004134:	4618      	mov	r0, r3
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	20000208 	.word	0x20000208
 8004140:	2000020c 	.word	0x2000020c
 8004144:	08007c3c 	.word	0x08007c3c
 8004148:	08004281 	.word	0x08004281

0800414c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800414c:	b580      	push	{r7, lr}
 800414e:	b08a      	sub	sp, #40	; 0x28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800415a:	2300      	movs	r3, #0
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10a      	bne.n	800417a <xTimerGenericCommand+0x2e>
        __asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	623b      	str	r3, [r7, #32]
    }
 8004176:	bf00      	nop
 8004178:	e7fe      	b.n	8004178 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800417a:	4b1a      	ldr	r3, [pc, #104]	; (80041e4 <xTimerGenericCommand+0x98>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d02a      	beq.n	80041d8 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b05      	cmp	r3, #5
 8004192:	dc18      	bgt.n	80041c6 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004194:	f7ff fcf4 	bl	8003b80 <xTaskGetSchedulerState>
 8004198:	4603      	mov	r3, r0
 800419a:	2b02      	cmp	r3, #2
 800419c:	d109      	bne.n	80041b2 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800419e:	4b11      	ldr	r3, [pc, #68]	; (80041e4 <xTimerGenericCommand+0x98>)
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	f107 0114 	add.w	r1, r7, #20
 80041a6:	2300      	movs	r3, #0
 80041a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041aa:	f7fe fa27 	bl	80025fc <xQueueGenericSend>
 80041ae:	6278      	str	r0, [r7, #36]	; 0x24
 80041b0:	e012      	b.n	80041d8 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80041b2:	4b0c      	ldr	r3, [pc, #48]	; (80041e4 <xTimerGenericCommand+0x98>)
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	f107 0114 	add.w	r1, r7, #20
 80041ba:	2300      	movs	r3, #0
 80041bc:	2200      	movs	r2, #0
 80041be:	f7fe fa1d 	bl	80025fc <xQueueGenericSend>
 80041c2:	6278      	str	r0, [r7, #36]	; 0x24
 80041c4:	e008      	b.n	80041d8 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80041c6:	4b07      	ldr	r3, [pc, #28]	; (80041e4 <xTimerGenericCommand+0x98>)
 80041c8:	6818      	ldr	r0, [r3, #0]
 80041ca:	f107 0114 	add.w	r1, r7, #20
 80041ce:	2300      	movs	r3, #0
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	f7fe fb39 	bl	8002848 <xQueueGenericSendFromISR>
 80041d6:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80041da:	4618      	mov	r0, r3
 80041dc:	3728      	adds	r7, #40	; 0x28
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20000208 	.word	0x20000208

080041e8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af02      	add	r7, sp, #8
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041f2:	4b22      	ldr	r3, [pc, #136]	; (800427c <prvProcessExpiredTimer+0x94>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	3304      	adds	r3, #4
 8004200:	4618      	mov	r0, r3
 8004202:	f7fe f8e1 	bl	80023c8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d022      	beq.n	800425a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	699a      	ldr	r2, [r3, #24]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	18d1      	adds	r1, r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	6978      	ldr	r0, [r7, #20]
 8004222:	f000 f8d1 	bl	80043c8 <prvInsertTimerInActiveList>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d01f      	beq.n	800426c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800422c:	2300      	movs	r3, #0
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	2300      	movs	r3, #0
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	2100      	movs	r1, #0
 8004236:	6978      	ldr	r0, [r7, #20]
 8004238:	f7ff ff88 	bl	800414c <xTimerGenericCommand>
 800423c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d113      	bne.n	800426c <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	60fb      	str	r3, [r7, #12]
    }
 8004256:	bf00      	nop
 8004258:	e7fe      	b.n	8004258 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004260:	f023 0301 	bic.w	r3, r3, #1
 8004264:	b2da      	uxtb	r2, r3
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	6978      	ldr	r0, [r7, #20]
 8004272:	4798      	blx	r3
    }
 8004274:	bf00      	nop
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	20000200 	.word	0x20000200

08004280 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004288:	f107 0308 	add.w	r3, r7, #8
 800428c:	4618      	mov	r0, r3
 800428e:	f000 f857 	bl	8004340 <prvGetNextExpireTime>
 8004292:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	4619      	mov	r1, r3
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f803 	bl	80042a4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800429e:	f000 f8d5 	bl	800444c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80042a2:	e7f1      	b.n	8004288 <prvTimerTask+0x8>

080042a4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80042ae:	f7ff f87f 	bl	80033b0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042b2:	f107 0308 	add.w	r3, r7, #8
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 f866 	bl	8004388 <prvSampleTimeNow>
 80042bc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d130      	bne.n	8004326 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10a      	bne.n	80042e0 <prvProcessTimerOrBlockTask+0x3c>
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d806      	bhi.n	80042e0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80042d2:	f7ff f87b 	bl	80033cc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80042d6:	68f9      	ldr	r1, [r7, #12]
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff ff85 	bl	80041e8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80042de:	e024      	b.n	800432a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d008      	beq.n	80042f8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80042e6:	4b13      	ldr	r3, [pc, #76]	; (8004334 <prvProcessTimerOrBlockTask+0x90>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <prvProcessTimerOrBlockTask+0x50>
 80042f0:	2301      	movs	r3, #1
 80042f2:	e000      	b.n	80042f6 <prvProcessTimerOrBlockTask+0x52>
 80042f4:	2300      	movs	r3, #0
 80042f6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80042f8:	4b0f      	ldr	r3, [pc, #60]	; (8004338 <prvProcessTimerOrBlockTask+0x94>)
 80042fa:	6818      	ldr	r0, [r3, #0]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	4619      	mov	r1, r3
 8004306:	f7fe fdaf 	bl	8002e68 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800430a:	f7ff f85f 	bl	80033cc <xTaskResumeAll>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10a      	bne.n	800432a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004314:	4b09      	ldr	r3, [pc, #36]	; (800433c <prvProcessTimerOrBlockTask+0x98>)
 8004316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	f3bf 8f6f 	isb	sy
    }
 8004324:	e001      	b.n	800432a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004326:	f7ff f851 	bl	80033cc <xTaskResumeAll>
    }
 800432a:	bf00      	nop
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20000204 	.word	0x20000204
 8004338:	20000208 	.word	0x20000208
 800433c:	e000ed04 	.word	0xe000ed04

08004340 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004348:	4b0e      	ldr	r3, [pc, #56]	; (8004384 <prvGetNextExpireTime+0x44>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <prvGetNextExpireTime+0x16>
 8004352:	2201      	movs	r2, #1
 8004354:	e000      	b.n	8004358 <prvGetNextExpireTime+0x18>
 8004356:	2200      	movs	r2, #0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d105      	bne.n	8004370 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004364:	4b07      	ldr	r3, [pc, #28]	; (8004384 <prvGetNextExpireTime+0x44>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	e001      	b.n	8004374 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004374:	68fb      	ldr	r3, [r7, #12]
    }
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	20000200 	.word	0x20000200

08004388 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004390:	f7ff f8bc 	bl	800350c <xTaskGetTickCount>
 8004394:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004396:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <prvSampleTimeNow+0x3c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	429a      	cmp	r2, r3
 800439e:	d205      	bcs.n	80043ac <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80043a0:	f000 f91a 	bl	80045d8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	e002      	b.n	80043b2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80043b2:	4a04      	ldr	r2, [pc, #16]	; (80043c4 <prvSampleTimeNow+0x3c>)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80043b8:	68fb      	ldr	r3, [r7, #12]
    }
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20000210 	.word	0x20000210

080043c8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80043d6:	2300      	movs	r3, #0
 80043d8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d812      	bhi.n	8004414 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	1ad2      	subs	r2, r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d302      	bcc.n	8004402 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80043fc:	2301      	movs	r3, #1
 80043fe:	617b      	str	r3, [r7, #20]
 8004400:	e01b      	b.n	800443a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004402:	4b10      	ldr	r3, [pc, #64]	; (8004444 <prvInsertTimerInActiveList+0x7c>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3304      	adds	r3, #4
 800440a:	4619      	mov	r1, r3
 800440c:	4610      	mov	r0, r2
 800440e:	f7fd ffa2 	bl	8002356 <vListInsert>
 8004412:	e012      	b.n	800443a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	429a      	cmp	r2, r3
 800441a:	d206      	bcs.n	800442a <prvInsertTimerInActiveList+0x62>
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	429a      	cmp	r2, r3
 8004422:	d302      	bcc.n	800442a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004424:	2301      	movs	r3, #1
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	e007      	b.n	800443a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800442a:	4b07      	ldr	r3, [pc, #28]	; (8004448 <prvInsertTimerInActiveList+0x80>)
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3304      	adds	r3, #4
 8004432:	4619      	mov	r1, r3
 8004434:	4610      	mov	r0, r2
 8004436:	f7fd ff8e 	bl	8002356 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800443a:	697b      	ldr	r3, [r7, #20]
    }
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	20000204 	.word	0x20000204
 8004448:	20000200 	.word	0x20000200

0800444c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800444c:	b580      	push	{r7, lr}
 800444e:	b08c      	sub	sp, #48	; 0x30
 8004450:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004452:	e0ae      	b.n	80045b2 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	f2c0 80ab 	blt.w	80045b2 <prvProcessReceivedCommands+0x166>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d004      	beq.n	8004472 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	3304      	adds	r3, #4
 800446c:	4618      	mov	r0, r3
 800446e:	f7fd ffab 	bl	80023c8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004472:	1d3b      	adds	r3, r7, #4
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff ff87 	bl	8004388 <prvSampleTimeNow>
 800447a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2b09      	cmp	r3, #9
 8004480:	f200 8096 	bhi.w	80045b0 <prvProcessReceivedCommands+0x164>
 8004484:	a201      	add	r2, pc, #4	; (adr r2, 800448c <prvProcessReceivedCommands+0x40>)
 8004486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448a:	bf00      	nop
 800448c:	080044b5 	.word	0x080044b5
 8004490:	080044b5 	.word	0x080044b5
 8004494:	080044b5 	.word	0x080044b5
 8004498:	08004529 	.word	0x08004529
 800449c:	0800453d 	.word	0x0800453d
 80044a0:	08004587 	.word	0x08004587
 80044a4:	080044b5 	.word	0x080044b5
 80044a8:	080044b5 	.word	0x080044b5
 80044ac:	08004529 	.word	0x08004529
 80044b0:	0800453d 	.word	0x0800453d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	18d1      	adds	r1, r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a3a      	ldr	r2, [r7, #32]
 80044d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044d4:	f7ff ff78 	bl	80043c8 <prvInsertTimerInActiveList>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d069      	beq.n	80045b2 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044e4:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d05e      	beq.n	80045b2 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	441a      	add	r2, r3
 80044fc:	2300      	movs	r3, #0
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	2300      	movs	r3, #0
 8004502:	2100      	movs	r1, #0
 8004504:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004506:	f7ff fe21 	bl	800414c <xTimerGenericCommand>
 800450a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d14f      	bne.n	80045b2 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	61bb      	str	r3, [r7, #24]
    }
 8004524:	bf00      	nop
 8004526:	e7fe      	b.n	8004526 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800452e:	f023 0301 	bic.w	r3, r3, #1
 8004532:	b2da      	uxtb	r2, r3
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800453a:	e03a      	b.n	80045b2 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004542:	f043 0301 	orr.w	r3, r3, #1
 8004546:	b2da      	uxtb	r2, r3
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10a      	bne.n	8004572 <prvProcessReceivedCommands+0x126>
        __asm volatile
 800455c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	617b      	str	r3, [r7, #20]
    }
 800456e:	bf00      	nop
 8004570:	e7fe      	b.n	8004570 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	699a      	ldr	r2, [r3, #24]
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	18d1      	adds	r1, r2, r3
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	6a3a      	ldr	r2, [r7, #32]
 800457e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004580:	f7ff ff22 	bl	80043c8 <prvInsertTimerInActiveList>
                        break;
 8004584:	e015      	b.n	80045b2 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d103      	bne.n	800459c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004594:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004596:	f000 fbf1 	bl	8004d7c <vPortFree>
 800459a:	e00a      	b.n	80045b2 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045a2:	f023 0301 	bic.w	r3, r3, #1
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80045ae:	e000      	b.n	80045b2 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
 80045b0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80045b2:	4b08      	ldr	r3, [pc, #32]	; (80045d4 <prvProcessReceivedCommands+0x188>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f107 0108 	add.w	r1, r7, #8
 80045ba:	2200      	movs	r2, #0
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fe fa01 	bl	80029c4 <xQueueReceive>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f47f af45 	bne.w	8004454 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80045ca:	bf00      	nop
 80045cc:	bf00      	nop
 80045ce:	3728      	adds	r7, #40	; 0x28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20000208 	.word	0x20000208

080045d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80045d8:	b580      	push	{r7, lr}
 80045da:	b088      	sub	sp, #32
 80045dc:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045de:	e048      	b.n	8004672 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045e0:	4b2d      	ldr	r3, [pc, #180]	; (8004698 <prvSwitchTimerLists+0xc0>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045ea:	4b2b      	ldr	r3, [pc, #172]	; (8004698 <prvSwitchTimerLists+0xc0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	3304      	adds	r3, #4
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fd fee5 	bl	80023c8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d02e      	beq.n	8004672 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4413      	add	r3, r2
 800461c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	429a      	cmp	r2, r3
 8004624:	d90e      	bls.n	8004644 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004632:	4b19      	ldr	r3, [pc, #100]	; (8004698 <prvSwitchTimerLists+0xc0>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3304      	adds	r3, #4
 800463a:	4619      	mov	r1, r3
 800463c:	4610      	mov	r0, r2
 800463e:	f7fd fe8a 	bl	8002356 <vListInsert>
 8004642:	e016      	b.n	8004672 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004644:	2300      	movs	r3, #0
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	2300      	movs	r3, #0
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	2100      	movs	r1, #0
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f7ff fd7c 	bl	800414c <xTimerGenericCommand>
 8004654:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10a      	bne.n	8004672 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	603b      	str	r3, [r7, #0]
    }
 800466e:	bf00      	nop
 8004670:	e7fe      	b.n	8004670 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004672:	4b09      	ldr	r3, [pc, #36]	; (8004698 <prvSwitchTimerLists+0xc0>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1b1      	bne.n	80045e0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800467c:	4b06      	ldr	r3, [pc, #24]	; (8004698 <prvSwitchTimerLists+0xc0>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004682:	4b06      	ldr	r3, [pc, #24]	; (800469c <prvSwitchTimerLists+0xc4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a04      	ldr	r2, [pc, #16]	; (8004698 <prvSwitchTimerLists+0xc0>)
 8004688:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800468a:	4a04      	ldr	r2, [pc, #16]	; (800469c <prvSwitchTimerLists+0xc4>)
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	6013      	str	r3, [r2, #0]
    }
 8004690:	bf00      	nop
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	20000200 	.word	0x20000200
 800469c:	20000204 	.word	0x20000204

080046a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80046a4:	f000 f960 	bl	8004968 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80046a8:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <prvCheckForValidListAndQueue+0x54>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d11d      	bne.n	80046ec <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80046b0:	4811      	ldr	r0, [pc, #68]	; (80046f8 <prvCheckForValidListAndQueue+0x58>)
 80046b2:	f7fd fdff 	bl	80022b4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80046b6:	4811      	ldr	r0, [pc, #68]	; (80046fc <prvCheckForValidListAndQueue+0x5c>)
 80046b8:	f7fd fdfc 	bl	80022b4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80046bc:	4b10      	ldr	r3, [pc, #64]	; (8004700 <prvCheckForValidListAndQueue+0x60>)
 80046be:	4a0e      	ldr	r2, [pc, #56]	; (80046f8 <prvCheckForValidListAndQueue+0x58>)
 80046c0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80046c2:	4b10      	ldr	r3, [pc, #64]	; (8004704 <prvCheckForValidListAndQueue+0x64>)
 80046c4:	4a0d      	ldr	r2, [pc, #52]	; (80046fc <prvCheckForValidListAndQueue+0x5c>)
 80046c6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80046c8:	2200      	movs	r2, #0
 80046ca:	210c      	movs	r1, #12
 80046cc:	200a      	movs	r0, #10
 80046ce:	f7fd ff0d 	bl	80024ec <xQueueGenericCreate>
 80046d2:	4603      	mov	r3, r0
 80046d4:	4a07      	ldr	r2, [pc, #28]	; (80046f4 <prvCheckForValidListAndQueue+0x54>)
 80046d6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80046d8:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <prvCheckForValidListAndQueue+0x54>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80046e0:	4b04      	ldr	r3, [pc, #16]	; (80046f4 <prvCheckForValidListAndQueue+0x54>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4908      	ldr	r1, [pc, #32]	; (8004708 <prvCheckForValidListAndQueue+0x68>)
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fe fb8c 	bl	8002e04 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80046ec:	f000 f96c 	bl	80049c8 <vPortExitCritical>
    }
 80046f0:	bf00      	nop
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	20000208 	.word	0x20000208
 80046f8:	200001d8 	.word	0x200001d8
 80046fc:	200001ec 	.word	0x200001ec
 8004700:	20000200 	.word	0x20000200
 8004704:	20000204 	.word	0x20000204
 8004708:	08007c44 	.word	0x08007c44

0800470c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3b04      	subs	r3, #4
 800471c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004724:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	3b04      	subs	r3, #4
 800472a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f023 0201 	bic.w	r2, r3, #1
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	3b04      	subs	r3, #4
 800473a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800473c:	4a0c      	ldr	r2, [pc, #48]	; (8004770 <pxPortInitialiseStack+0x64>)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3b14      	subs	r3, #20
 8004746:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	3b04      	subs	r3, #4
 8004752:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f06f 0202 	mvn.w	r2, #2
 800475a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	3b20      	subs	r3, #32
 8004760:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004762:	68fb      	ldr	r3, [r7, #12]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	08004775 	.word	0x08004775

08004774 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800477a:	2300      	movs	r3, #0
 800477c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800477e:	4b12      	ldr	r3, [pc, #72]	; (80047c8 <prvTaskExitError+0x54>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004786:	d00a      	beq.n	800479e <prvTaskExitError+0x2a>
        __asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	60fb      	str	r3, [r7, #12]
    }
 800479a:	bf00      	nop
 800479c:	e7fe      	b.n	800479c <prvTaskExitError+0x28>
        __asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	60bb      	str	r3, [r7, #8]
    }
 80047b0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80047b2:	bf00      	nop
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0fc      	beq.n	80047b4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80047ba:	bf00      	nop
 80047bc:	bf00      	nop
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	20000010 	.word	0x20000010
 80047cc:	00000000 	.word	0x00000000

080047d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80047d0:	4b07      	ldr	r3, [pc, #28]	; (80047f0 <pxCurrentTCBConst2>)
 80047d2:	6819      	ldr	r1, [r3, #0]
 80047d4:	6808      	ldr	r0, [r1, #0]
 80047d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047da:	f380 8809 	msr	PSP, r0
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f04f 0000 	mov.w	r0, #0
 80047e6:	f380 8811 	msr	BASEPRI, r0
 80047ea:	4770      	bx	lr
 80047ec:	f3af 8000 	nop.w

080047f0 <pxCurrentTCBConst2>:
 80047f0:	200000d4 	.word	0x200000d4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop

080047f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80047f8:	4808      	ldr	r0, [pc, #32]	; (800481c <prvPortStartFirstTask+0x24>)
 80047fa:	6800      	ldr	r0, [r0, #0]
 80047fc:	6800      	ldr	r0, [r0, #0]
 80047fe:	f380 8808 	msr	MSP, r0
 8004802:	f04f 0000 	mov.w	r0, #0
 8004806:	f380 8814 	msr	CONTROL, r0
 800480a:	b662      	cpsie	i
 800480c:	b661      	cpsie	f
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	df00      	svc	0
 8004818:	bf00      	nop
 800481a:	0000      	.short	0x0000
 800481c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004820:	bf00      	nop
 8004822:	bf00      	nop

08004824 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800482a:	4b46      	ldr	r3, [pc, #280]	; (8004944 <xPortStartScheduler+0x120>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a46      	ldr	r2, [pc, #280]	; (8004948 <xPortStartScheduler+0x124>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d10a      	bne.n	800484a <xPortStartScheduler+0x26>
        __asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	613b      	str	r3, [r7, #16]
    }
 8004846:	bf00      	nop
 8004848:	e7fe      	b.n	8004848 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800484a:	4b3e      	ldr	r3, [pc, #248]	; (8004944 <xPortStartScheduler+0x120>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a3f      	ldr	r2, [pc, #252]	; (800494c <xPortStartScheduler+0x128>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d10a      	bne.n	800486a <xPortStartScheduler+0x46>
        __asm volatile
 8004854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004858:	f383 8811 	msr	BASEPRI, r3
 800485c:	f3bf 8f6f 	isb	sy
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	60fb      	str	r3, [r7, #12]
    }
 8004866:	bf00      	nop
 8004868:	e7fe      	b.n	8004868 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800486a:	4b39      	ldr	r3, [pc, #228]	; (8004950 <xPortStartScheduler+0x12c>)
 800486c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	b2db      	uxtb	r3, r3
 8004874:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	22ff      	movs	r2, #255	; 0xff
 800487a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	b2db      	uxtb	r3, r3
 8004882:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	b2db      	uxtb	r3, r3
 8004888:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800488c:	b2da      	uxtb	r2, r3
 800488e:	4b31      	ldr	r3, [pc, #196]	; (8004954 <xPortStartScheduler+0x130>)
 8004890:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004892:	4b31      	ldr	r3, [pc, #196]	; (8004958 <xPortStartScheduler+0x134>)
 8004894:	2207      	movs	r2, #7
 8004896:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004898:	e009      	b.n	80048ae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800489a:	4b2f      	ldr	r3, [pc, #188]	; (8004958 <xPortStartScheduler+0x134>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3b01      	subs	r3, #1
 80048a0:	4a2d      	ldr	r2, [pc, #180]	; (8004958 <xPortStartScheduler+0x134>)
 80048a2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80048a4:	78fb      	ldrb	r3, [r7, #3]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048ae:	78fb      	ldrb	r3, [r7, #3]
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b6:	2b80      	cmp	r3, #128	; 0x80
 80048b8:	d0ef      	beq.n	800489a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80048ba:	4b27      	ldr	r3, [pc, #156]	; (8004958 <xPortStartScheduler+0x134>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f1c3 0307 	rsb	r3, r3, #7
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d00a      	beq.n	80048dc <xPortStartScheduler+0xb8>
        __asm volatile
 80048c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	60bb      	str	r3, [r7, #8]
    }
 80048d8:	bf00      	nop
 80048da:	e7fe      	b.n	80048da <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80048dc:	4b1e      	ldr	r3, [pc, #120]	; (8004958 <xPortStartScheduler+0x134>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	021b      	lsls	r3, r3, #8
 80048e2:	4a1d      	ldr	r2, [pc, #116]	; (8004958 <xPortStartScheduler+0x134>)
 80048e4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048e6:	4b1c      	ldr	r3, [pc, #112]	; (8004958 <xPortStartScheduler+0x134>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048ee:	4a1a      	ldr	r2, [pc, #104]	; (8004958 <xPortStartScheduler+0x134>)
 80048f0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80048fa:	4b18      	ldr	r3, [pc, #96]	; (800495c <xPortStartScheduler+0x138>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a17      	ldr	r2, [pc, #92]	; (800495c <xPortStartScheduler+0x138>)
 8004900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004904:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004906:	4b15      	ldr	r3, [pc, #84]	; (800495c <xPortStartScheduler+0x138>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a14      	ldr	r2, [pc, #80]	; (800495c <xPortStartScheduler+0x138>)
 800490c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004910:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004912:	f000 f8e3 	bl	8004adc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004916:	4b12      	ldr	r3, [pc, #72]	; (8004960 <xPortStartScheduler+0x13c>)
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800491c:	f000 f902 	bl	8004b24 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004920:	4b10      	ldr	r3, [pc, #64]	; (8004964 <xPortStartScheduler+0x140>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a0f      	ldr	r2, [pc, #60]	; (8004964 <xPortStartScheduler+0x140>)
 8004926:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800492a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800492c:	f7ff ff64 	bl	80047f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004930:	f7fe feca 	bl	80036c8 <vTaskSwitchContext>
    prvTaskExitError();
 8004934:	f7ff ff1e 	bl	8004774 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3718      	adds	r7, #24
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	e000ed00 	.word	0xe000ed00
 8004948:	410fc271 	.word	0x410fc271
 800494c:	410fc270 	.word	0x410fc270
 8004950:	e000e400 	.word	0xe000e400
 8004954:	20000214 	.word	0x20000214
 8004958:	20000218 	.word	0x20000218
 800495c:	e000ed20 	.word	0xe000ed20
 8004960:	20000010 	.word	0x20000010
 8004964:	e000ef34 	.word	0xe000ef34

08004968 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
        __asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	607b      	str	r3, [r7, #4]
    }
 8004980:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004982:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <vPortEnterCritical+0x58>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3301      	adds	r3, #1
 8004988:	4a0d      	ldr	r2, [pc, #52]	; (80049c0 <vPortEnterCritical+0x58>)
 800498a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800498c:	4b0c      	ldr	r3, [pc, #48]	; (80049c0 <vPortEnterCritical+0x58>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d10f      	bne.n	80049b4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004994:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <vPortEnterCritical+0x5c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00a      	beq.n	80049b4 <vPortEnterCritical+0x4c>
        __asm volatile
 800499e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	603b      	str	r3, [r7, #0]
    }
 80049b0:	bf00      	nop
 80049b2:	e7fe      	b.n	80049b2 <vPortEnterCritical+0x4a>
    }
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	20000010 	.word	0x20000010
 80049c4:	e000ed04 	.word	0xe000ed04

080049c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80049ce:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <vPortExitCritical+0x50>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10a      	bne.n	80049ec <vPortExitCritical+0x24>
        __asm volatile
 80049d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049da:	f383 8811 	msr	BASEPRI, r3
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	f3bf 8f4f 	dsb	sy
 80049e6:	607b      	str	r3, [r7, #4]
    }
 80049e8:	bf00      	nop
 80049ea:	e7fe      	b.n	80049ea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80049ec:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <vPortExitCritical+0x50>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	4a09      	ldr	r2, [pc, #36]	; (8004a18 <vPortExitCritical+0x50>)
 80049f4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80049f6:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <vPortExitCritical+0x50>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d105      	bne.n	8004a0a <vPortExitCritical+0x42>
 80049fe:	2300      	movs	r3, #0
 8004a00:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	f383 8811 	msr	BASEPRI, r3
    }
 8004a08:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	20000010 	.word	0x20000010
 8004a1c:	00000000 	.word	0x00000000

08004a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004a20:	f3ef 8009 	mrs	r0, PSP
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	4b15      	ldr	r3, [pc, #84]	; (8004a80 <pxCurrentTCBConst>)
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	f01e 0f10 	tst.w	lr, #16
 8004a30:	bf08      	it	eq
 8004a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3a:	6010      	str	r0, [r2, #0]
 8004a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a44:	f380 8811 	msr	BASEPRI, r0
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f7fe fe3a 	bl	80036c8 <vTaskSwitchContext>
 8004a54:	f04f 0000 	mov.w	r0, #0
 8004a58:	f380 8811 	msr	BASEPRI, r0
 8004a5c:	bc09      	pop	{r0, r3}
 8004a5e:	6819      	ldr	r1, [r3, #0]
 8004a60:	6808      	ldr	r0, [r1, #0]
 8004a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a66:	f01e 0f10 	tst.w	lr, #16
 8004a6a:	bf08      	it	eq
 8004a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a70:	f380 8809 	msr	PSP, r0
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	f3af 8000 	nop.w

08004a80 <pxCurrentTCBConst>:
 8004a80:	200000d4 	.word	0x200000d4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004a84:	bf00      	nop
 8004a86:	bf00      	nop

08004a88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
        __asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	607b      	str	r3, [r7, #4]
    }
 8004aa0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004aa2:	f002 fced 	bl	8007480 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004aa6:	f7fe fd53 	bl	8003550 <xTaskIncrementTick>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d006      	beq.n	8004abe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004ab0:	f002 fd44 	bl	800753c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ab4:	4b08      	ldr	r3, [pc, #32]	; (8004ad8 <SysTick_Handler+0x50>)
 8004ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	e001      	b.n	8004ac2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004abe:	f002 fd21 	bl	8007504 <SEGGER_SYSVIEW_RecordExitISR>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	f383 8811 	msr	BASEPRI, r3
    }
 8004acc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004ace:	bf00      	nop
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	e000ed04 	.word	0xe000ed04

08004adc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <vPortSetupTimerInterrupt+0x34>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ae6:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <vPortSetupTimerInterrupt+0x38>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004aec:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <vPortSetupTimerInterrupt+0x3c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a0a      	ldr	r2, [pc, #40]	; (8004b1c <vPortSetupTimerInterrupt+0x40>)
 8004af2:	fba2 2303 	umull	r2, r3, r2, r3
 8004af6:	099b      	lsrs	r3, r3, #6
 8004af8:	4a09      	ldr	r2, [pc, #36]	; (8004b20 <vPortSetupTimerInterrupt+0x44>)
 8004afa:	3b01      	subs	r3, #1
 8004afc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004afe:	4b04      	ldr	r3, [pc, #16]	; (8004b10 <vPortSetupTimerInterrupt+0x34>)
 8004b00:	2207      	movs	r2, #7
 8004b02:	601a      	str	r2, [r3, #0]
}
 8004b04:	bf00      	nop
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	e000e010 	.word	0xe000e010
 8004b14:	e000e018 	.word	0xe000e018
 8004b18:	20000000 	.word	0x20000000
 8004b1c:	10624dd3 	.word	0x10624dd3
 8004b20:	e000e014 	.word	0xe000e014

08004b24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004b24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004b34 <vPortEnableVFP+0x10>
 8004b28:	6801      	ldr	r1, [r0, #0]
 8004b2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004b2e:	6001      	str	r1, [r0, #0]
 8004b30:	4770      	bx	lr
 8004b32:	0000      	.short	0x0000
 8004b34:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004b38:	bf00      	nop
 8004b3a:	bf00      	nop

08004b3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004b42:	f3ef 8305 	mrs	r3, IPSR
 8004b46:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2b0f      	cmp	r3, #15
 8004b4c:	d914      	bls.n	8004b78 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004b4e:	4a17      	ldr	r2, [pc, #92]	; (8004bac <vPortValidateInterruptPriority+0x70>)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4413      	add	r3, r2
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004b58:	4b15      	ldr	r3, [pc, #84]	; (8004bb0 <vPortValidateInterruptPriority+0x74>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	7afa      	ldrb	r2, [r7, #11]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d20a      	bcs.n	8004b78 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	607b      	str	r3, [r7, #4]
    }
 8004b74:	bf00      	nop
 8004b76:	e7fe      	b.n	8004b76 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004b78:	4b0e      	ldr	r3, [pc, #56]	; (8004bb4 <vPortValidateInterruptPriority+0x78>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b80:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <vPortValidateInterruptPriority+0x7c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d90a      	bls.n	8004b9e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	603b      	str	r3, [r7, #0]
    }
 8004b9a:	bf00      	nop
 8004b9c:	e7fe      	b.n	8004b9c <vPortValidateInterruptPriority+0x60>
    }
 8004b9e:	bf00      	nop
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	e000e3f0 	.word	0xe000e3f0
 8004bb0:	20000214 	.word	0x20000214
 8004bb4:	e000ed0c 	.word	0xe000ed0c
 8004bb8:	20000218 	.word	0x20000218

08004bbc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b08a      	sub	sp, #40	; 0x28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004bc8:	f7fe fbf2 	bl	80033b0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004bcc:	4b65      	ldr	r3, [pc, #404]	; (8004d64 <pvPortMalloc+0x1a8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004bd4:	f000 f934 	bl	8004e40 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004bd8:	4b63      	ldr	r3, [pc, #396]	; (8004d68 <pvPortMalloc+0x1ac>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4013      	ands	r3, r2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f040 80a7 	bne.w	8004d34 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d02d      	beq.n	8004c48 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004bec:	2208      	movs	r2, #8
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d227      	bcs.n	8004c48 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004bf8:	2208      	movs	r2, #8
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d021      	beq.n	8004c4e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f023 0307 	bic.w	r3, r3, #7
 8004c10:	3308      	adds	r3, #8
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d214      	bcs.n	8004c42 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f023 0307 	bic.w	r3, r3, #7
 8004c1e:	3308      	adds	r3, #8
 8004c20:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d010      	beq.n	8004c4e <pvPortMalloc+0x92>
        __asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	617b      	str	r3, [r7, #20]
    }
 8004c3e:	bf00      	nop
 8004c40:	e7fe      	b.n	8004c40 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004c42:	2300      	movs	r3, #0
 8004c44:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c46:	e002      	b.n	8004c4e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	607b      	str	r3, [r7, #4]
 8004c4c:	e000      	b.n	8004c50 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c4e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d06e      	beq.n	8004d34 <pvPortMalloc+0x178>
 8004c56:	4b45      	ldr	r3, [pc, #276]	; (8004d6c <pvPortMalloc+0x1b0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d869      	bhi.n	8004d34 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004c60:	4b43      	ldr	r3, [pc, #268]	; (8004d70 <pvPortMalloc+0x1b4>)
 8004c62:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004c64:	4b42      	ldr	r3, [pc, #264]	; (8004d70 <pvPortMalloc+0x1b4>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c6a:	e004      	b.n	8004c76 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d903      	bls.n	8004c88 <pvPortMalloc+0xcc>
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1f1      	bne.n	8004c6c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004c88:	4b36      	ldr	r3, [pc, #216]	; (8004d64 <pvPortMalloc+0x1a8>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d050      	beq.n	8004d34 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2208      	movs	r2, #8
 8004c98:	4413      	add	r3, r2
 8004c9a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	1ad2      	subs	r2, r2, r3
 8004cac:	2308      	movs	r3, #8
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d91f      	bls.n	8004cf4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4413      	add	r3, r2
 8004cba:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	f003 0307 	and.w	r3, r3, #7
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <pvPortMalloc+0x120>
        __asm volatile
 8004cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	613b      	str	r3, [r7, #16]
    }
 8004cd8:	bf00      	nop
 8004cda:	e7fe      	b.n	8004cda <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	1ad2      	subs	r2, r2, r3
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004cee:	69b8      	ldr	r0, [r7, #24]
 8004cf0:	f000 f908 	bl	8004f04 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004cf4:	4b1d      	ldr	r3, [pc, #116]	; (8004d6c <pvPortMalloc+0x1b0>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	4a1b      	ldr	r2, [pc, #108]	; (8004d6c <pvPortMalloc+0x1b0>)
 8004d00:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d02:	4b1a      	ldr	r3, [pc, #104]	; (8004d6c <pvPortMalloc+0x1b0>)
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	4b1b      	ldr	r3, [pc, #108]	; (8004d74 <pvPortMalloc+0x1b8>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d203      	bcs.n	8004d16 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d0e:	4b17      	ldr	r3, [pc, #92]	; (8004d6c <pvPortMalloc+0x1b0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a18      	ldr	r2, [pc, #96]	; (8004d74 <pvPortMalloc+0x1b8>)
 8004d14:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	4b13      	ldr	r3, [pc, #76]	; (8004d68 <pvPortMalloc+0x1ac>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004d2a:	4b13      	ldr	r3, [pc, #76]	; (8004d78 <pvPortMalloc+0x1bc>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	4a11      	ldr	r2, [pc, #68]	; (8004d78 <pvPortMalloc+0x1bc>)
 8004d32:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004d34:	f7fe fb4a 	bl	80033cc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <pvPortMalloc+0x19c>
        __asm volatile
 8004d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	60fb      	str	r3, [r7, #12]
    }
 8004d54:	bf00      	nop
 8004d56:	e7fe      	b.n	8004d56 <pvPortMalloc+0x19a>
    return pvReturn;
 8004d58:	69fb      	ldr	r3, [r7, #28]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3728      	adds	r7, #40	; 0x28
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20012e24 	.word	0x20012e24
 8004d68:	20012e38 	.word	0x20012e38
 8004d6c:	20012e28 	.word	0x20012e28
 8004d70:	20012e1c 	.word	0x20012e1c
 8004d74:	20012e2c 	.word	0x20012e2c
 8004d78:	20012e30 	.word	0x20012e30

08004d7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d04d      	beq.n	8004e2a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004d8e:	2308      	movs	r3, #8
 8004d90:	425b      	negs	r3, r3
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	4413      	add	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	4b24      	ldr	r3, [pc, #144]	; (8004e34 <vPortFree+0xb8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4013      	ands	r3, r2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10a      	bne.n	8004dc0 <vPortFree+0x44>
        __asm volatile
 8004daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dae:	f383 8811 	msr	BASEPRI, r3
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	60fb      	str	r3, [r7, #12]
    }
 8004dbc:	bf00      	nop
 8004dbe:	e7fe      	b.n	8004dbe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00a      	beq.n	8004dde <vPortFree+0x62>
        __asm volatile
 8004dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dcc:	f383 8811 	msr	BASEPRI, r3
 8004dd0:	f3bf 8f6f 	isb	sy
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	60bb      	str	r3, [r7, #8]
    }
 8004dda:	bf00      	nop
 8004ddc:	e7fe      	b.n	8004ddc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	4b14      	ldr	r3, [pc, #80]	; (8004e34 <vPortFree+0xb8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4013      	ands	r3, r2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01e      	beq.n	8004e2a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d11a      	bne.n	8004e2a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	4b0e      	ldr	r3, [pc, #56]	; (8004e34 <vPortFree+0xb8>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	401a      	ands	r2, r3
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004e04:	f7fe fad4 	bl	80033b0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <vPortFree+0xbc>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4413      	add	r3, r2
 8004e12:	4a09      	ldr	r2, [pc, #36]	; (8004e38 <vPortFree+0xbc>)
 8004e14:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e16:	6938      	ldr	r0, [r7, #16]
 8004e18:	f000 f874 	bl	8004f04 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004e1c:	4b07      	ldr	r3, [pc, #28]	; (8004e3c <vPortFree+0xc0>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	3301      	adds	r3, #1
 8004e22:	4a06      	ldr	r2, [pc, #24]	; (8004e3c <vPortFree+0xc0>)
 8004e24:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004e26:	f7fe fad1 	bl	80033cc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004e2a:	bf00      	nop
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20012e38 	.word	0x20012e38
 8004e38:	20012e28 	.word	0x20012e28
 8004e3c:	20012e34 	.word	0x20012e34

08004e40 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e46:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004e4a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004e4c:	4b27      	ldr	r3, [pc, #156]	; (8004eec <prvHeapInit+0xac>)
 8004e4e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00c      	beq.n	8004e74 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	3307      	adds	r3, #7
 8004e5e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0307 	bic.w	r3, r3, #7
 8004e66:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	4a1f      	ldr	r2, [pc, #124]	; (8004eec <prvHeapInit+0xac>)
 8004e70:	4413      	add	r3, r2
 8004e72:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e78:	4a1d      	ldr	r2, [pc, #116]	; (8004ef0 <prvHeapInit+0xb0>)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004e7e:	4b1c      	ldr	r3, [pc, #112]	; (8004ef0 <prvHeapInit+0xb0>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	4413      	add	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004e8c:	2208      	movs	r2, #8
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	1a9b      	subs	r3, r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0307 	bic.w	r3, r3, #7
 8004e9a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4a15      	ldr	r2, [pc, #84]	; (8004ef4 <prvHeapInit+0xb4>)
 8004ea0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004ea2:	4b14      	ldr	r3, [pc, #80]	; (8004ef4 <prvHeapInit+0xb4>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004eaa:	4b12      	ldr	r3, [pc, #72]	; (8004ef4 <prvHeapInit+0xb4>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	1ad2      	subs	r2, r2, r3
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ec0:	4b0c      	ldr	r3, [pc, #48]	; (8004ef4 <prvHeapInit+0xb4>)
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	4a0a      	ldr	r2, [pc, #40]	; (8004ef8 <prvHeapInit+0xb8>)
 8004ece:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	4a09      	ldr	r2, [pc, #36]	; (8004efc <prvHeapInit+0xbc>)
 8004ed6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ed8:	4b09      	ldr	r3, [pc, #36]	; (8004f00 <prvHeapInit+0xc0>)
 8004eda:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ede:	601a      	str	r2, [r3, #0]
}
 8004ee0:	bf00      	nop
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	2000021c 	.word	0x2000021c
 8004ef0:	20012e1c 	.word	0x20012e1c
 8004ef4:	20012e24 	.word	0x20012e24
 8004ef8:	20012e2c 	.word	0x20012e2c
 8004efc:	20012e28 	.word	0x20012e28
 8004f00:	20012e38 	.word	0x20012e38

08004f04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f0c:	4b28      	ldr	r3, [pc, #160]	; (8004fb0 <prvInsertBlockIntoFreeList+0xac>)
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	e002      	b.n	8004f18 <prvInsertBlockIntoFreeList+0x14>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d8f7      	bhi.n	8004f12 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d108      	bne.n	8004f46 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	441a      	add	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	441a      	add	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d118      	bne.n	8004f8c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	4b15      	ldr	r3, [pc, #84]	; (8004fb4 <prvInsertBlockIntoFreeList+0xb0>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d00d      	beq.n	8004f82 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	441a      	add	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	e008      	b.n	8004f94 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f82:	4b0c      	ldr	r3, [pc, #48]	; (8004fb4 <prvInsertBlockIntoFreeList+0xb0>)
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	e003      	b.n	8004f94 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d002      	beq.n	8004fa2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004fa2:	bf00      	nop
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	20012e1c 	.word	0x20012e1c
 8004fb4:	20012e24 	.word	0x20012e24

08004fb8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004fbc:	4803      	ldr	r0, [pc, #12]	; (8004fcc <_cbSendSystemDesc+0x14>)
 8004fbe:	f002 fa09 	bl	80073d4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004fc2:	4803      	ldr	r0, [pc, #12]	; (8004fd0 <_cbSendSystemDesc+0x18>)
 8004fc4:	f002 fa06 	bl	80073d4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004fc8:	bf00      	nop
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	08007c4c 	.word	0x08007c4c
 8004fd0:	08007c90 	.word	0x08007c90

08004fd4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004fd8:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004fda:	6818      	ldr	r0, [r3, #0]
 8004fdc:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004fde:	6819      	ldr	r1, [r3, #0]
 8004fe0:	4b05      	ldr	r3, [pc, #20]	; (8004ff8 <SEGGER_SYSVIEW_Conf+0x24>)
 8004fe2:	4a06      	ldr	r2, [pc, #24]	; (8004ffc <SEGGER_SYSVIEW_Conf+0x28>)
 8004fe4:	f001 fcc4 	bl	8006970 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004fe8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004fec:	f001 fd04 	bl	80069f8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004ff0:	bf00      	nop
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	20000000 	.word	0x20000000
 8004ff8:	08004fb9 	.word	0x08004fb9
 8004ffc:	08007d30 	.word	0x08007d30

08005000 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005002:	b085      	sub	sp, #20
 8005004:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005006:	2300      	movs	r3, #0
 8005008:	607b      	str	r3, [r7, #4]
 800500a:	e033      	b.n	8005074 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800500c:	491e      	ldr	r1, [pc, #120]	; (8005088 <_cbSendTaskList+0x88>)
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	6818      	ldr	r0, [r3, #0]
 800501c:	491a      	ldr	r1, [pc, #104]	; (8005088 <_cbSendTaskList+0x88>)
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	4613      	mov	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	3304      	adds	r3, #4
 800502c:	6819      	ldr	r1, [r3, #0]
 800502e:	4c16      	ldr	r4, [pc, #88]	; (8005088 <_cbSendTaskList+0x88>)
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	4613      	mov	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4423      	add	r3, r4
 800503c:	3308      	adds	r3, #8
 800503e:	681c      	ldr	r4, [r3, #0]
 8005040:	4d11      	ldr	r5, [pc, #68]	; (8005088 <_cbSendTaskList+0x88>)
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	4613      	mov	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	442b      	add	r3, r5
 800504e:	330c      	adds	r3, #12
 8005050:	681d      	ldr	r5, [r3, #0]
 8005052:	4e0d      	ldr	r6, [pc, #52]	; (8005088 <_cbSendTaskList+0x88>)
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	4613      	mov	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4433      	add	r3, r6
 8005060:	3310      	adds	r3, #16
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	462b      	mov	r3, r5
 8005068:	4622      	mov	r2, r4
 800506a:	f000 f979 	bl	8005360 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3301      	adds	r3, #1
 8005072:	607b      	str	r3, [r7, #4]
 8005074:	4b05      	ldr	r3, [pc, #20]	; (800508c <_cbSendTaskList+0x8c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	429a      	cmp	r2, r3
 800507c:	d3c6      	bcc.n	800500c <_cbSendTaskList+0xc>
  }
}
 800507e:	bf00      	nop
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005088:	20012e3c 	.word	0x20012e3c
 800508c:	20012edc 	.word	0x20012edc

08005090 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005094:	b082      	sub	sp, #8
 8005096:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005098:	f7fe fa48 	bl	800352c <xTaskGetTickCountFromISR>
 800509c:	4603      	mov	r3, r0
 800509e:	2200      	movs	r2, #0
 80050a0:	469a      	mov	sl, r3
 80050a2:	4693      	mov	fp, r2
 80050a4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80050a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050ac:	4602      	mov	r2, r0
 80050ae:	460b      	mov	r3, r1
 80050b0:	f04f 0a00 	mov.w	sl, #0
 80050b4:	f04f 0b00 	mov.w	fp, #0
 80050b8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80050bc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80050c0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80050c4:	4652      	mov	r2, sl
 80050c6:	465b      	mov	r3, fp
 80050c8:	1a14      	subs	r4, r2, r0
 80050ca:	eb63 0501 	sbc.w	r5, r3, r1
 80050ce:	f04f 0200 	mov.w	r2, #0
 80050d2:	f04f 0300 	mov.w	r3, #0
 80050d6:	00ab      	lsls	r3, r5, #2
 80050d8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80050dc:	00a2      	lsls	r2, r4, #2
 80050de:	4614      	mov	r4, r2
 80050e0:	461d      	mov	r5, r3
 80050e2:	eb14 0800 	adds.w	r8, r4, r0
 80050e6:	eb45 0901 	adc.w	r9, r5, r1
 80050ea:	f04f 0200 	mov.w	r2, #0
 80050ee:	f04f 0300 	mov.w	r3, #0
 80050f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050fe:	4690      	mov	r8, r2
 8005100:	4699      	mov	r9, r3
 8005102:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005106:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800510a:	4610      	mov	r0, r2
 800510c:	4619      	mov	r1, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005118 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af02      	add	r7, sp, #8
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005126:	2205      	movs	r2, #5
 8005128:	492b      	ldr	r1, [pc, #172]	; (80051d8 <SYSVIEW_AddTask+0xc0>)
 800512a:	68b8      	ldr	r0, [r7, #8]
 800512c:	f002 fcee 	bl	8007b0c <memcmp>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d04b      	beq.n	80051ce <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005136:	4b29      	ldr	r3, [pc, #164]	; (80051dc <SYSVIEW_AddTask+0xc4>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b07      	cmp	r3, #7
 800513c:	d903      	bls.n	8005146 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800513e:	4828      	ldr	r0, [pc, #160]	; (80051e0 <SYSVIEW_AddTask+0xc8>)
 8005140:	f002 fc5a 	bl	80079f8 <SEGGER_SYSVIEW_Warn>
    return;
 8005144:	e044      	b.n	80051d0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005146:	4b25      	ldr	r3, [pc, #148]	; (80051dc <SYSVIEW_AddTask+0xc4>)
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	4926      	ldr	r1, [pc, #152]	; (80051e4 <SYSVIEW_AddTask+0xcc>)
 800514c:	4613      	mov	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	440b      	add	r3, r1
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800515a:	4b20      	ldr	r3, [pc, #128]	; (80051dc <SYSVIEW_AddTask+0xc4>)
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	4921      	ldr	r1, [pc, #132]	; (80051e4 <SYSVIEW_AddTask+0xcc>)
 8005160:	4613      	mov	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	3304      	adds	r3, #4
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005170:	4b1a      	ldr	r3, [pc, #104]	; (80051dc <SYSVIEW_AddTask+0xc4>)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	491b      	ldr	r1, [pc, #108]	; (80051e4 <SYSVIEW_AddTask+0xcc>)
 8005176:	4613      	mov	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	440b      	add	r3, r1
 8005180:	3308      	adds	r3, #8
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005186:	4b15      	ldr	r3, [pc, #84]	; (80051dc <SYSVIEW_AddTask+0xc4>)
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	4916      	ldr	r1, [pc, #88]	; (80051e4 <SYSVIEW_AddTask+0xcc>)
 800518c:	4613      	mov	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	440b      	add	r3, r1
 8005196:	330c      	adds	r3, #12
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800519c:	4b0f      	ldr	r3, [pc, #60]	; (80051dc <SYSVIEW_AddTask+0xc4>)
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	4910      	ldr	r1, [pc, #64]	; (80051e4 <SYSVIEW_AddTask+0xcc>)
 80051a2:	4613      	mov	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	440b      	add	r3, r1
 80051ac:	3310      	adds	r3, #16
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80051b2:	4b0a      	ldr	r3, [pc, #40]	; (80051dc <SYSVIEW_AddTask+0xc4>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3301      	adds	r3, #1
 80051b8:	4a08      	ldr	r2, [pc, #32]	; (80051dc <SYSVIEW_AddTask+0xc4>)
 80051ba:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	68b9      	ldr	r1, [r7, #8]
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f000 f8ca 	bl	8005360 <SYSVIEW_SendTaskInfo>
 80051cc:	e000      	b.n	80051d0 <SYSVIEW_AddTask+0xb8>
    return;
 80051ce:	bf00      	nop

}
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	08007ca0 	.word	0x08007ca0
 80051dc:	20012edc 	.word	0x20012edc
 80051e0:	08007ca8 	.word	0x08007ca8
 80051e4:	20012e3c 	.word	0x20012e3c

080051e8 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 80051f0:	4b59      	ldr	r3, [pc, #356]	; (8005358 <SYSVIEW_DeleteTask+0x170>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 80ab 	beq.w	8005350 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 80051fa:	2300      	movs	r3, #0
 80051fc:	60fb      	str	r3, [r7, #12]
 80051fe:	e00d      	b.n	800521c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8005200:	4956      	ldr	r1, [pc, #344]	; (800535c <SYSVIEW_DeleteTask+0x174>)
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4613      	mov	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	440b      	add	r3, r1
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	429a      	cmp	r2, r3
 8005214:	d008      	beq.n	8005228 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3301      	adds	r3, #1
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	4b4e      	ldr	r3, [pc, #312]	; (8005358 <SYSVIEW_DeleteTask+0x170>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	429a      	cmp	r2, r3
 8005224:	d3ec      	bcc.n	8005200 <SYSVIEW_DeleteTask+0x18>
 8005226:	e000      	b.n	800522a <SYSVIEW_DeleteTask+0x42>
      break;
 8005228:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800522a:	4b4b      	ldr	r3, [pc, #300]	; (8005358 <SYSVIEW_DeleteTask+0x170>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3b01      	subs	r3, #1
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	429a      	cmp	r2, r3
 8005234:	d111      	bne.n	800525a <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	4613      	mov	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4a46      	ldr	r2, [pc, #280]	; (800535c <SYSVIEW_DeleteTask+0x174>)
 8005242:	4413      	add	r3, r2
 8005244:	2214      	movs	r2, #20
 8005246:	2100      	movs	r1, #0
 8005248:	4618      	mov	r0, r3
 800524a:	f002 fc6f 	bl	8007b2c <memset>
    _NumTasks--;
 800524e:	4b42      	ldr	r3, [pc, #264]	; (8005358 <SYSVIEW_DeleteTask+0x170>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3b01      	subs	r3, #1
 8005254:	4a40      	ldr	r2, [pc, #256]	; (8005358 <SYSVIEW_DeleteTask+0x170>)
 8005256:	6013      	str	r3, [r2, #0]
 8005258:	e07b      	b.n	8005352 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 800525a:	4b3f      	ldr	r3, [pc, #252]	; (8005358 <SYSVIEW_DeleteTask+0x170>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	429a      	cmp	r2, r3
 8005262:	d276      	bcs.n	8005352 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8005264:	4b3c      	ldr	r3, [pc, #240]	; (8005358 <SYSVIEW_DeleteTask+0x170>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	1e5a      	subs	r2, r3, #1
 800526a:	493c      	ldr	r1, [pc, #240]	; (800535c <SYSVIEW_DeleteTask+0x174>)
 800526c:	4613      	mov	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	440b      	add	r3, r1
 8005276:	6819      	ldr	r1, [r3, #0]
 8005278:	4838      	ldr	r0, [pc, #224]	; (800535c <SYSVIEW_DeleteTask+0x174>)
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4613      	mov	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4403      	add	r3, r0
 8005286:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8005288:	4b33      	ldr	r3, [pc, #204]	; (8005358 <SYSVIEW_DeleteTask+0x170>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	1e5a      	subs	r2, r3, #1
 800528e:	4933      	ldr	r1, [pc, #204]	; (800535c <SYSVIEW_DeleteTask+0x174>)
 8005290:	4613      	mov	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	3304      	adds	r3, #4
 800529c:	6819      	ldr	r1, [r3, #0]
 800529e:	482f      	ldr	r0, [pc, #188]	; (800535c <SYSVIEW_DeleteTask+0x174>)
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4613      	mov	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4403      	add	r3, r0
 80052ac:	3304      	adds	r3, #4
 80052ae:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80052b0:	4b29      	ldr	r3, [pc, #164]	; (8005358 <SYSVIEW_DeleteTask+0x170>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	1e5a      	subs	r2, r3, #1
 80052b6:	4929      	ldr	r1, [pc, #164]	; (800535c <SYSVIEW_DeleteTask+0x174>)
 80052b8:	4613      	mov	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	440b      	add	r3, r1
 80052c2:	3308      	adds	r3, #8
 80052c4:	6819      	ldr	r1, [r3, #0]
 80052c6:	4825      	ldr	r0, [pc, #148]	; (800535c <SYSVIEW_DeleteTask+0x174>)
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4613      	mov	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4413      	add	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4403      	add	r3, r0
 80052d4:	3308      	adds	r3, #8
 80052d6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80052d8:	4b1f      	ldr	r3, [pc, #124]	; (8005358 <SYSVIEW_DeleteTask+0x170>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	1e5a      	subs	r2, r3, #1
 80052de:	491f      	ldr	r1, [pc, #124]	; (800535c <SYSVIEW_DeleteTask+0x174>)
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	440b      	add	r3, r1
 80052ea:	330c      	adds	r3, #12
 80052ec:	6819      	ldr	r1, [r3, #0]
 80052ee:	481b      	ldr	r0, [pc, #108]	; (800535c <SYSVIEW_DeleteTask+0x174>)
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4613      	mov	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4403      	add	r3, r0
 80052fc:	330c      	adds	r3, #12
 80052fe:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8005300:	4b15      	ldr	r3, [pc, #84]	; (8005358 <SYSVIEW_DeleteTask+0x170>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	1e5a      	subs	r2, r3, #1
 8005306:	4915      	ldr	r1, [pc, #84]	; (800535c <SYSVIEW_DeleteTask+0x174>)
 8005308:	4613      	mov	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	440b      	add	r3, r1
 8005312:	3310      	adds	r3, #16
 8005314:	6819      	ldr	r1, [r3, #0]
 8005316:	4811      	ldr	r0, [pc, #68]	; (800535c <SYSVIEW_DeleteTask+0x174>)
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4613      	mov	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4403      	add	r3, r0
 8005324:	3310      	adds	r3, #16
 8005326:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8005328:	4b0b      	ldr	r3, [pc, #44]	; (8005358 <SYSVIEW_DeleteTask+0x170>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	1e5a      	subs	r2, r3, #1
 800532e:	4613      	mov	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4a09      	ldr	r2, [pc, #36]	; (800535c <SYSVIEW_DeleteTask+0x174>)
 8005338:	4413      	add	r3, r2
 800533a:	2214      	movs	r2, #20
 800533c:	2100      	movs	r1, #0
 800533e:	4618      	mov	r0, r3
 8005340:	f002 fbf4 	bl	8007b2c <memset>
    _NumTasks--;
 8005344:	4b04      	ldr	r3, [pc, #16]	; (8005358 <SYSVIEW_DeleteTask+0x170>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3b01      	subs	r3, #1
 800534a:	4a03      	ldr	r2, [pc, #12]	; (8005358 <SYSVIEW_DeleteTask+0x170>)
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	e000      	b.n	8005352 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8005350:	bf00      	nop
  }
}
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	20012edc 	.word	0x20012edc
 800535c:	20012e3c 	.word	0x20012e3c

08005360 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005360:	b580      	push	{r7, lr}
 8005362:	b08a      	sub	sp, #40	; 0x28
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
 800536c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800536e:	f107 0314 	add.w	r3, r7, #20
 8005372:	2214      	movs	r2, #20
 8005374:	2100      	movs	r1, #0
 8005376:	4618      	mov	r0, r3
 8005378:	f002 fbd8 	bl	8007b2c <memset>
  TaskInfo.TaskID     = TaskID;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800538c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005390:	f107 0314 	add.w	r3, r7, #20
 8005394:	4618      	mov	r0, r3
 8005396:	f001 ff25 	bl	80071e4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800539a:	bf00      	nop
 800539c:	3728      	adds	r7, #40	; 0x28
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
	...

080053a4 <__NVIC_EnableIRQ>:
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	4603      	mov	r3, r0
 80053ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	db0b      	blt.n	80053ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053b6:	79fb      	ldrb	r3, [r7, #7]
 80053b8:	f003 021f 	and.w	r2, r3, #31
 80053bc:	4907      	ldr	r1, [pc, #28]	; (80053dc <__NVIC_EnableIRQ+0x38>)
 80053be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053c2:	095b      	lsrs	r3, r3, #5
 80053c4:	2001      	movs	r0, #1
 80053c6:	fa00 f202 	lsl.w	r2, r0, r2
 80053ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	e000e100 	.word	0xe000e100

080053e0 <__NVIC_SetPriority>:
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	4603      	mov	r3, r0
 80053e8:	6039      	str	r1, [r7, #0]
 80053ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	db0a      	blt.n	800540a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	490c      	ldr	r1, [pc, #48]	; (800542c <__NVIC_SetPriority+0x4c>)
 80053fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053fe:	0112      	lsls	r2, r2, #4
 8005400:	b2d2      	uxtb	r2, r2
 8005402:	440b      	add	r3, r1
 8005404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005408:	e00a      	b.n	8005420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	b2da      	uxtb	r2, r3
 800540e:	4908      	ldr	r1, [pc, #32]	; (8005430 <__NVIC_SetPriority+0x50>)
 8005410:	79fb      	ldrb	r3, [r7, #7]
 8005412:	f003 030f 	and.w	r3, r3, #15
 8005416:	3b04      	subs	r3, #4
 8005418:	0112      	lsls	r2, r2, #4
 800541a:	b2d2      	uxtb	r2, r2
 800541c:	440b      	add	r3, r1
 800541e:	761a      	strb	r2, [r3, #24]
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	e000e100 	.word	0xe000e100
 8005430:	e000ed00 	.word	0xe000ed00

08005434 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800543a:	f002 fb39 	bl	8007ab0 <SEGGER_SYSVIEW_IsStarted>
 800543e:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8005446:	f001 fd51 	bl	8006eec <SEGGER_SYSVIEW_Start>
  }
}
 800544a:	bf00      	nop
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
	...

08005454 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	4603      	mov	r3, r0
 800545c:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800545e:	4b0c      	ldr	r3, [pc, #48]	; (8005490 <_cbOnUARTRx+0x3c>)
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	2b03      	cmp	r3, #3
 8005464:	d806      	bhi.n	8005474 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8005466:	4b0a      	ldr	r3, [pc, #40]	; (8005490 <_cbOnUARTRx+0x3c>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	3301      	adds	r3, #1
 800546c:	b2da      	uxtb	r2, r3
 800546e:	4b08      	ldr	r3, [pc, #32]	; (8005490 <_cbOnUARTRx+0x3c>)
 8005470:	701a      	strb	r2, [r3, #0]
    goto Done;
 8005472:	e009      	b.n	8005488 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8005474:	f7ff ffde 	bl	8005434 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005478:	4b05      	ldr	r3, [pc, #20]	; (8005490 <_cbOnUARTRx+0x3c>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	4618      	mov	r0, r3
 800547e:	1dfb      	adds	r3, r7, #7
 8005480:	2201      	movs	r2, #1
 8005482:	4619      	mov	r1, r3
 8005484:	f000 fb9a 	bl	8005bbc <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005488:	bf00      	nop
}
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	20000014 	.word	0x20000014

08005494 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 800549c:	4b14      	ldr	r3, [pc, #80]	; (80054f0 <_cbOnUARTTx+0x5c>)
 800549e:	785b      	ldrb	r3, [r3, #1]
 80054a0:	2b03      	cmp	r3, #3
 80054a2:	d80f      	bhi.n	80054c4 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80054a4:	4b12      	ldr	r3, [pc, #72]	; (80054f0 <_cbOnUARTTx+0x5c>)
 80054a6:	785b      	ldrb	r3, [r3, #1]
 80054a8:	461a      	mov	r2, r3
 80054aa:	4b12      	ldr	r3, [pc, #72]	; (80054f4 <_cbOnUARTTx+0x60>)
 80054ac:	5c9a      	ldrb	r2, [r3, r2]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80054b2:	4b0f      	ldr	r3, [pc, #60]	; (80054f0 <_cbOnUARTTx+0x5c>)
 80054b4:	785b      	ldrb	r3, [r3, #1]
 80054b6:	3301      	adds	r3, #1
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	4b0d      	ldr	r3, [pc, #52]	; (80054f0 <_cbOnUARTTx+0x5c>)
 80054bc:	705a      	strb	r2, [r3, #1]
    r = 1;
 80054be:	2301      	movs	r3, #1
 80054c0:	60fb      	str	r3, [r7, #12]
    goto Done;
 80054c2:	e00f      	b.n	80054e4 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80054c4:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <_cbOnUARTTx+0x5c>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fa19 	bl	8005904 <SEGGER_RTT_ReadUpBufferNoLock>
 80054d2:	4603      	mov	r3, r0
 80054d4:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	da02      	bge.n	80054e2 <_cbOnUARTTx+0x4e>
    r = 0;
 80054dc:	2300      	movs	r3, #0
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	e000      	b.n	80054e4 <_cbOnUARTTx+0x50>
  }
Done:
 80054e2:	bf00      	nop
  return r;
 80054e4:	68fb      	ldr	r3, [r7, #12]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	20000014 	.word	0x20000014
 80054f4:	08007d38 	.word	0x08007d38

080054f8 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005500:	4a04      	ldr	r2, [pc, #16]	; (8005514 <SEGGER_UART_init+0x1c>)
 8005502:	4905      	ldr	r1, [pc, #20]	; (8005518 <SEGGER_UART_init+0x20>)
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f863 	bl	80055d0 <HIF_UART_Init>
}
 800550a:	bf00      	nop
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	08005455 	.word	0x08005455
 8005518:	08005495 	.word	0x08005495

0800551c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005522:	4b1e      	ldr	r3, [pc, #120]	; (800559c <USART2_IRQHandler+0x80>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f003 0320 	and.w	r3, r3, #32
 800552e:	2b00      	cmp	r3, #0
 8005530:	d011      	beq.n	8005556 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8005532:	4b1b      	ldr	r3, [pc, #108]	; (80055a0 <USART2_IRQHandler+0x84>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	b2db      	uxtb	r3, r3
 8005538:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f003 030b 	and.w	r3, r3, #11
 8005540:	2b00      	cmp	r3, #0
 8005542:	d108      	bne.n	8005556 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005544:	4b17      	ldr	r3, [pc, #92]	; (80055a4 <USART2_IRQHandler+0x88>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d004      	beq.n	8005556 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800554c:	4b15      	ldr	r3, [pc, #84]	; (80055a4 <USART2_IRQHandler+0x88>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	79fa      	ldrb	r2, [r7, #7]
 8005552:	4610      	mov	r0, r2
 8005554:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555c:	2b00      	cmp	r3, #0
 800555e:	d01a      	beq.n	8005596 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005560:	4b11      	ldr	r3, [pc, #68]	; (80055a8 <USART2_IRQHandler+0x8c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d015      	beq.n	8005594 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005568:	4b0f      	ldr	r3, [pc, #60]	; (80055a8 <USART2_IRQHandler+0x8c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	1dfa      	adds	r2, r7, #7
 800556e:	4610      	mov	r0, r2
 8005570:	4798      	blx	r3
 8005572:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d106      	bne.n	8005588 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800557a:	4b0c      	ldr	r3, [pc, #48]	; (80055ac <USART2_IRQHandler+0x90>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a0b      	ldr	r2, [pc, #44]	; (80055ac <USART2_IRQHandler+0x90>)
 8005580:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	e006      	b.n	8005596 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005588:	4b04      	ldr	r3, [pc, #16]	; (800559c <USART2_IRQHandler+0x80>)
 800558a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 800558c:	79fa      	ldrb	r2, [r7, #7]
 800558e:	4b04      	ldr	r3, [pc, #16]	; (80055a0 <USART2_IRQHandler+0x84>)
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	e000      	b.n	8005596 <USART2_IRQHandler+0x7a>
      return;
 8005594:	bf00      	nop
    }
  }
}
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	40004400 	.word	0x40004400
 80055a0:	40004404 	.word	0x40004404
 80055a4:	20012ee0 	.word	0x20012ee0
 80055a8:	20012ee4 	.word	0x20012ee4
 80055ac:	4000440c 	.word	0x4000440c

080055b0 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80055b4:	4b05      	ldr	r3, [pc, #20]	; (80055cc <HIF_UART_EnableTXEInterrupt+0x1c>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a04      	ldr	r2, [pc, #16]	; (80055cc <HIF_UART_EnableTXEInterrupt+0x1c>)
 80055ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055be:	6013      	str	r3, [r2, #0]
}
 80055c0:	bf00      	nop
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	4000440c 	.word	0x4000440c

080055d0 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80055dc:	4b2e      	ldr	r3, [pc, #184]	; (8005698 <HIF_UART_Init+0xc8>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a2d      	ldr	r2, [pc, #180]	; (8005698 <HIF_UART_Init+0xc8>)
 80055e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055e6:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80055e8:	4b2c      	ldr	r3, [pc, #176]	; (800569c <HIF_UART_Init+0xcc>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a2b      	ldr	r2, [pc, #172]	; (800569c <HIF_UART_Init+0xcc>)
 80055ee:	f043 0301 	orr.w	r3, r3, #1
 80055f2:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80055f4:	4b2a      	ldr	r3, [pc, #168]	; (80056a0 <HIF_UART_Init+0xd0>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005600:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8005608:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800560a:	4a25      	ldr	r2, [pc, #148]	; (80056a0 <HIF_UART_Init+0xd0>)
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005610:	4b24      	ldr	r3, [pc, #144]	; (80056a4 <HIF_UART_Init+0xd4>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800561c:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8005624:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8005626:	4a1f      	ldr	r2, [pc, #124]	; (80056a4 <HIF_UART_Init+0xd4>)
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 800562c:	4b1e      	ldr	r3, [pc, #120]	; (80056a8 <HIF_UART_Init+0xd8>)
 800562e:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8005632:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005634:	4b1d      	ldr	r3, [pc, #116]	; (80056ac <HIF_UART_Init+0xdc>)
 8005636:	2200      	movs	r2, #0
 8005638:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800563a:	4b1d      	ldr	r3, [pc, #116]	; (80056b0 <HIF_UART_Init+0xe0>)
 800563c:	2280      	movs	r2, #128	; 0x80
 800563e:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8005646:	4a1b      	ldr	r2, [pc, #108]	; (80056b4 <HIF_UART_Init+0xe4>)
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	fbb2 f3f3 	udiv	r3, r2, r3
 800564e:	3301      	adds	r3, #1
 8005650:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	085b      	lsrs	r3, r3, #1
 8005656:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800565e:	d302      	bcc.n	8005666 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005660:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005664:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d004      	beq.n	8005676 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	011b      	lsls	r3, r3, #4
 8005670:	4a11      	ldr	r2, [pc, #68]	; (80056b8 <HIF_UART_Init+0xe8>)
 8005672:	b29b      	uxth	r3, r3
 8005674:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8005676:	4a11      	ldr	r2, [pc, #68]	; (80056bc <HIF_UART_Init+0xec>)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 800567c:	4a10      	ldr	r2, [pc, #64]	; (80056c0 <HIF_UART_Init+0xf0>)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8005682:	2106      	movs	r1, #6
 8005684:	2026      	movs	r0, #38	; 0x26
 8005686:	f7ff feab 	bl	80053e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800568a:	2026      	movs	r0, #38	; 0x26
 800568c:	f7ff fe8a 	bl	80053a4 <__NVIC_EnableIRQ>
}
 8005690:	bf00      	nop
 8005692:	3718      	adds	r7, #24
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	40023840 	.word	0x40023840
 800569c:	40023830 	.word	0x40023830
 80056a0:	40020020 	.word	0x40020020
 80056a4:	40020000 	.word	0x40020000
 80056a8:	4000440c 	.word	0x4000440c
 80056ac:	40004410 	.word	0x40004410
 80056b0:	40004414 	.word	0x40004414
 80056b4:	0501bd00 	.word	0x0501bd00
 80056b8:	40004408 	.word	0x40004408
 80056bc:	20012ee0 	.word	0x20012ee0
 80056c0:	20012ee4 	.word	0x20012ee4

080056c4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80056ca:	4b24      	ldr	r3, [pc, #144]	; (800575c <_DoInit+0x98>)
 80056cc:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2203      	movs	r2, #3
 80056d2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2203      	movs	r2, #3
 80056d8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a20      	ldr	r2, [pc, #128]	; (8005760 <_DoInit+0x9c>)
 80056de:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a20      	ldr	r2, [pc, #128]	; (8005764 <_DoInit+0xa0>)
 80056e4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056ec:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a17      	ldr	r2, [pc, #92]	; (8005760 <_DoInit+0x9c>)
 8005704:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a17      	ldr	r2, [pc, #92]	; (8005768 <_DoInit+0xa4>)
 800570a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2210      	movs	r2, #16
 8005710:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	3307      	adds	r3, #7
 8005728:	4a10      	ldr	r2, [pc, #64]	; (800576c <_DoInit+0xa8>)
 800572a:	6810      	ldr	r0, [r2, #0]
 800572c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800572e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a0e      	ldr	r2, [pc, #56]	; (8005770 <_DoInit+0xac>)
 8005736:	6810      	ldr	r0, [r2, #0]
 8005738:	6018      	str	r0, [r3, #0]
 800573a:	8891      	ldrh	r1, [r2, #4]
 800573c:	7992      	ldrb	r2, [r2, #6]
 800573e:	8099      	strh	r1, [r3, #4]
 8005740:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005742:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2220      	movs	r2, #32
 800574a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800574c:	f3bf 8f5f 	dmb	sy
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	20012ee8 	.word	0x20012ee8
 8005760:	08007cf8 	.word	0x08007cf8
 8005764:	20012f90 	.word	0x20012f90
 8005768:	20013390 	.word	0x20013390
 800576c:	08007d04 	.word	0x08007d04
 8005770:	08007d08 	.word	0x08007d08

08005774 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005774:	b580      	push	{r7, lr}
 8005776:	b08a      	sub	sp, #40	; 0x28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005780:	2300      	movs	r3, #0
 8005782:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	429a      	cmp	r2, r3
 8005796:	d905      	bls.n	80057a4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	3b01      	subs	r3, #1
 80057a0:	627b      	str	r3, [r7, #36]	; 0x24
 80057a2:	e007      	b.n	80057b4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	69b9      	ldr	r1, [r7, #24]
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	1acb      	subs	r3, r1, r3
 80057ae:	4413      	add	r3, r2
 80057b0:	3b01      	subs	r3, #1
 80057b2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057be:	4293      	cmp	r3, r2
 80057c0:	bf28      	it	cs
 80057c2:	4613      	movcs	r3, r2
 80057c4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80057c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4293      	cmp	r3, r2
 80057cc:	bf28      	it	cs
 80057ce:	4613      	movcs	r3, r2
 80057d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	4413      	add	r3, r2
 80057da:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80057dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057de:	68b9      	ldr	r1, [r7, #8]
 80057e0:	6978      	ldr	r0, [r7, #20]
 80057e2:	f002 f9cf 	bl	8007b84 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80057e6:	6a3a      	ldr	r2, [r7, #32]
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	4413      	add	r3, r2
 80057ec:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	4413      	add	r3, r2
 80057f4:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80057fe:	69fa      	ldr	r2, [r7, #28]
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	4413      	add	r3, r2
 8005804:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	429a      	cmp	r2, r3
 800580e:	d101      	bne.n	8005814 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005810:	2300      	movs	r3, #0
 8005812:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005814:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	69fa      	ldr	r2, [r7, #28]
 800581c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1b2      	bne.n	800578a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005824:	6a3b      	ldr	r3, [r7, #32]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3728      	adds	r7, #40	; 0x28
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800582e:	b580      	push	{r7, lr}
 8005830:	b088      	sub	sp, #32
 8005832:	af00      	add	r7, sp, #0
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	60b9      	str	r1, [r7, #8]
 8005838:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	429a      	cmp	r2, r3
 8005850:	d911      	bls.n	8005876 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	4413      	add	r3, r2
 800585a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	68b9      	ldr	r1, [r7, #8]
 8005860:	6938      	ldr	r0, [r7, #16]
 8005862:	f002 f98f 	bl	8007b84 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005866:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800586a:	69fa      	ldr	r2, [r7, #28]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	441a      	add	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005874:	e01f      	b.n	80058b6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	4413      	add	r3, r2
 8005882:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	6938      	ldr	r0, [r7, #16]
 800588a:	f002 f97b 	bl	8007b84 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	4413      	add	r3, r2
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	4619      	mov	r1, r3
 80058a6:	6938      	ldr	r0, [r7, #16]
 80058a8:	f002 f96c 	bl	8007b84 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80058ac:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	60da      	str	r2, [r3, #12]
}
 80058b6:	bf00      	nop
 80058b8:	3720      	adds	r7, #32
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80058be:	b480      	push	{r7}
 80058c0:	b087      	sub	sp, #28
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d808      	bhi.n	80058ec <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689a      	ldr	r2, [r3, #8]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	1ad2      	subs	r2, r2, r3
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	4413      	add	r3, r2
 80058e6:	3b01      	subs	r3, #1
 80058e8:	617b      	str	r3, [r7, #20]
 80058ea:	e004      	b.n	80058f6 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	3b01      	subs	r3, #1
 80058f4:	617b      	str	r3, [r7, #20]
  }
  return r;
 80058f6:	697b      	ldr	r3, [r7, #20]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	371c      	adds	r7, #28
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005904:	b580      	push	{r7, lr}
 8005906:	b08c      	sub	sp, #48	; 0x30
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005910:	4b3e      	ldr	r3, [pc, #248]	; (8005a0c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005912:	623b      	str	r3, [r7, #32]
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800591e:	f7ff fed1 	bl	80056c4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	1c5a      	adds	r2, r3, #1
 8005926:	4613      	mov	r3, r2
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	4413      	add	r3, r2
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	4a37      	ldr	r2, [pc, #220]	; (8005a0c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005930:	4413      	add	r3, r2
 8005932:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005944:	2300      	movs	r3, #0
 8005946:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	429a      	cmp	r2, r3
 800594e:	d92b      	bls.n	80059a8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4293      	cmp	r3, r2
 8005960:	bf28      	it	cs
 8005962:	4613      	movcs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	4413      	add	r3, r2
 800596e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	6939      	ldr	r1, [r7, #16]
 8005974:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005976:	f002 f905 	bl	8007b84 <memcpy>
    NumBytesRead += NumBytesRem;
 800597a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	4413      	add	r3, r2
 8005980:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	4413      	add	r3, r2
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	4413      	add	r3, r2
 8005998:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d101      	bne.n	80059a8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80059a4:	2300      	movs	r3, #0
 80059a6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4293      	cmp	r3, r2
 80059b6:	bf28      	it	cs
 80059b8:	4613      	movcs	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d019      	beq.n	80059f6 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c8:	4413      	add	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	6939      	ldr	r1, [r7, #16]
 80059d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059d2:	f002 f8d7 	bl	8007b84 <memcpy>
    NumBytesRead += NumBytesRem;
 80059d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	4413      	add	r3, r2
 80059dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80059de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	4413      	add	r3, r2
 80059e4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80059ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	4413      	add	r3, r2
 80059f4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80059f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a00:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3730      	adds	r7, #48	; 0x30
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	20012ee8 	.word	0x20012ee8

08005a10 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b08c      	sub	sp, #48	; 0x30
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005a1c:	4b3e      	ldr	r3, [pc, #248]	; (8005b18 <SEGGER_RTT_ReadNoLock+0x108>)
 8005a1e:	623b      	str	r3, [r7, #32]
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <SEGGER_RTT_ReadNoLock+0x1e>
 8005a2a:	f7ff fe4b 	bl	80056c4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4613      	mov	r3, r2
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	4413      	add	r3, r2
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	3360      	adds	r3, #96	; 0x60
 8005a3a:	4a37      	ldr	r2, [pc, #220]	; (8005b18 <SEGGER_RTT_ReadNoLock+0x108>)
 8005a3c:	4413      	add	r3, r2
 8005a3e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005a50:	2300      	movs	r3, #0
 8005a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005a54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d92b      	bls.n	8005ab4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	bf28      	it	cs
 8005a6e:	4613      	movcs	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a78:	4413      	add	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	6939      	ldr	r1, [r7, #16]
 8005a80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a82:	f002 f87f 	bl	8007b84 <memcpy>
    NumBytesRead += NumBytesRem;
 8005a86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	4413      	add	r3, r2
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d101      	bne.n	8005ab4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	bf28      	it	cs
 8005ac4:	4613      	movcs	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d019      	beq.n	8005b02 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad4:	4413      	add	r3, r2
 8005ad6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	6939      	ldr	r1, [r7, #16]
 8005adc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ade:	f002 f851 	bl	8007b84 <memcpy>
    NumBytesRead += NumBytesRem;
 8005ae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	4413      	add	r3, r2
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005afa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	4413      	add	r3, r2
 8005b00:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b0c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3730      	adds	r7, #48	; 0x30
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	20012ee8 	.word	0x20012ee8

08005b1c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b088      	sub	sp, #32
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	005b      	lsls	r3, r3, #1
 8005b32:	4413      	add	r3, r2
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	3360      	adds	r3, #96	; 0x60
 8005b38:	4a1f      	ldr	r2, [pc, #124]	; (8005bb8 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005b3a:	4413      	add	r3, r2
 8005b3c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d029      	beq.n	8005b9a <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d82e      	bhi.n	8005ba8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d013      	beq.n	8005b7a <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005b52:	e029      	b.n	8005ba8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005b54:	6978      	ldr	r0, [r7, #20]
 8005b56:	f7ff feb2 	bl	80058be <_GetAvailWriteSpace>
 8005b5a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d202      	bcs.n	8005b6a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005b64:	2300      	movs	r3, #0
 8005b66:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005b68:	e021      	b.n	8005bae <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	69b9      	ldr	r1, [r7, #24]
 8005b72:	6978      	ldr	r0, [r7, #20]
 8005b74:	f7ff fe5b 	bl	800582e <_WriteNoCheck>
    break;
 8005b78:	e019      	b.n	8005bae <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005b7a:	6978      	ldr	r0, [r7, #20]
 8005b7c:	f7ff fe9f 	bl	80058be <_GetAvailWriteSpace>
 8005b80:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	4293      	cmp	r3, r2
 8005b88:	bf28      	it	cs
 8005b8a:	4613      	movcs	r3, r2
 8005b8c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	69b9      	ldr	r1, [r7, #24]
 8005b92:	6978      	ldr	r0, [r7, #20]
 8005b94:	f7ff fe4b 	bl	800582e <_WriteNoCheck>
    break;
 8005b98:	e009      	b.n	8005bae <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	69b9      	ldr	r1, [r7, #24]
 8005b9e:	6978      	ldr	r0, [r7, #20]
 8005ba0:	f7ff fde8 	bl	8005774 <_WriteBlocking>
 8005ba4:	61f8      	str	r0, [r7, #28]
    break;
 8005ba6:	e002      	b.n	8005bae <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	61fb      	str	r3, [r7, #28]
    break;
 8005bac:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005bae:	69fb      	ldr	r3, [r7, #28]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3720      	adds	r7, #32
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	20012ee8 	.word	0x20012ee8

08005bbc <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b088      	sub	sp, #32
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005bc8:	4b0e      	ldr	r3, [pc, #56]	; (8005c04 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005bca:	61fb      	str	r3, [r7, #28]
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005bd6:	f7ff fd75 	bl	80056c4 <_DoInit>
  SEGGER_RTT_LOCK();
 8005bda:	f3ef 8311 	mrs	r3, BASEPRI
 8005bde:	f04f 0120 	mov.w	r1, #32
 8005be2:	f381 8811 	msr	BASEPRI, r1
 8005be6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	68b9      	ldr	r1, [r7, #8]
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f7ff ff95 	bl	8005b1c <SEGGER_RTT_WriteDownBufferNoLock>
 8005bf2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005bfa:	697b      	ldr	r3, [r7, #20]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3720      	adds	r7, #32
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	20012ee8 	.word	0x20012ee8

08005c08 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b088      	sub	sp, #32
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005c16:	4b3d      	ldr	r3, [pc, #244]	; (8005d0c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005c18:	61bb      	str	r3, [r7, #24]
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005c24:	f7ff fd4e 	bl	80056c4 <_DoInit>
  SEGGER_RTT_LOCK();
 8005c28:	f3ef 8311 	mrs	r3, BASEPRI
 8005c2c:	f04f 0120 	mov.w	r1, #32
 8005c30:	f381 8811 	msr	BASEPRI, r1
 8005c34:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005c36:	4b35      	ldr	r3, [pc, #212]	; (8005d0c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005c38:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005c3e:	6939      	ldr	r1, [r7, #16]
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	4613      	mov	r3, r2
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	4413      	add	r3, r2
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	440b      	add	r3, r1
 8005c4e:	3304      	adds	r3, #4
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d008      	beq.n	8005c68 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	69fa      	ldr	r2, [r7, #28]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	dbeb      	blt.n	8005c3e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005c66:	e000      	b.n	8005c6a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005c68:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	69fa      	ldr	r2, [r7, #28]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	da3f      	bge.n	8005cf4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005c74:	6939      	ldr	r1, [r7, #16]
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	4413      	add	r3, r2
 8005c80:	00db      	lsls	r3, r3, #3
 8005c82:	440b      	add	r3, r1
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005c88:	6939      	ldr	r1, [r7, #16]
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	4613      	mov	r3, r2
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	4413      	add	r3, r2
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	440b      	add	r3, r1
 8005c98:	3304      	adds	r3, #4
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005c9e:	6939      	ldr	r1, [r7, #16]
 8005ca0:	69fa      	ldr	r2, [r7, #28]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	4413      	add	r3, r2
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	440b      	add	r3, r1
 8005cac:	3320      	adds	r3, #32
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005cb2:	6939      	ldr	r1, [r7, #16]
 8005cb4:	69fa      	ldr	r2, [r7, #28]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	4413      	add	r3, r2
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	440b      	add	r3, r1
 8005cc0:	3328      	adds	r3, #40	; 0x28
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005cc6:	6939      	ldr	r1, [r7, #16]
 8005cc8:	69fa      	ldr	r2, [r7, #28]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	4413      	add	r3, r2
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	440b      	add	r3, r1
 8005cd4:	3324      	adds	r3, #36	; 0x24
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005cda:	6939      	ldr	r1, [r7, #16]
 8005cdc:	69fa      	ldr	r2, [r7, #28]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	4413      	add	r3, r2
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	440b      	add	r3, r1
 8005ce8:	332c      	adds	r3, #44	; 0x2c
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005cee:	f3bf 8f5f 	dmb	sy
 8005cf2:	e002      	b.n	8005cfa <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005d00:	69fb      	ldr	r3, [r7, #28]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3720      	adds	r7, #32
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20012ee8 	.word	0x20012ee8

08005d10 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005d1e:	4b33      	ldr	r3, [pc, #204]	; (8005dec <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005d20:	61bb      	str	r3, [r7, #24]
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005d2c:	f7ff fcca 	bl	80056c4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005d30:	4b2e      	ldr	r3, [pc, #184]	; (8005dec <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005d32:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d24d      	bcs.n	8005ddc <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005d40:	f3ef 8311 	mrs	r3, BASEPRI
 8005d44:	f04f 0120 	mov.w	r1, #32
 8005d48:	f381 8811 	msr	BASEPRI, r1
 8005d4c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d031      	beq.n	8005db8 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005d54:	6979      	ldr	r1, [r7, #20]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	4413      	add	r3, r2
 8005d5e:	00db      	lsls	r3, r3, #3
 8005d60:	440b      	add	r3, r1
 8005d62:	3360      	adds	r3, #96	; 0x60
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005d68:	6979      	ldr	r1, [r7, #20]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	005b      	lsls	r3, r3, #1
 8005d70:	4413      	add	r3, r2
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	440b      	add	r3, r1
 8005d76:	3364      	adds	r3, #100	; 0x64
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005d7c:	6979      	ldr	r1, [r7, #20]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	4613      	mov	r3, r2
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	4413      	add	r3, r2
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	440b      	add	r3, r1
 8005d8a:	3368      	adds	r3, #104	; 0x68
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005d90:	6979      	ldr	r1, [r7, #20]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	4613      	mov	r3, r2
 8005d96:	005b      	lsls	r3, r3, #1
 8005d98:	4413      	add	r3, r2
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	440b      	add	r3, r1
 8005d9e:	3370      	adds	r3, #112	; 0x70
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005da4:	6979      	ldr	r1, [r7, #20]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	4613      	mov	r3, r2
 8005daa:	005b      	lsls	r3, r3, #1
 8005dac:	4413      	add	r3, r2
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	440b      	add	r3, r1
 8005db2:	336c      	adds	r3, #108	; 0x6c
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005db8:	6979      	ldr	r1, [r7, #20]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	4413      	add	r3, r2
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	440b      	add	r3, r1
 8005dc6:	3374      	adds	r3, #116	; 0x74
 8005dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dca:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005dcc:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	61fb      	str	r3, [r7, #28]
 8005dda:	e002      	b.n	8005de2 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8005de0:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005de2:	69fb      	ldr	r3, [r7, #28]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3720      	adds	r7, #32
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	20012ee8 	.word	0x20012ee8

08005df0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005e00:	e002      	b.n	8005e08 <_EncodeStr+0x18>
    Len++;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	3301      	adds	r3, #1
 8005e06:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1f6      	bne.n	8005e02 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d901      	bls.n	8005e20 <_EncodeStr+0x30>
    Len = Limit;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	2bfe      	cmp	r3, #254	; 0xfe
 8005e24:	d806      	bhi.n	8005e34 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	1c5a      	adds	r2, r3, #1
 8005e2a:	60fa      	str	r2, [r7, #12]
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	b2d2      	uxtb	r2, r2
 8005e30:	701a      	strb	r2, [r3, #0]
 8005e32:	e011      	b.n	8005e58 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	60fa      	str	r2, [r7, #12]
 8005e3a:	22ff      	movs	r2, #255	; 0xff
 8005e3c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	1c5a      	adds	r2, r3, #1
 8005e42:	60fa      	str	r2, [r7, #12]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	b2d2      	uxtb	r2, r2
 8005e48:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	0a19      	lsrs	r1, r3, #8
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	1c5a      	adds	r2, r3, #1
 8005e52:	60fa      	str	r2, [r7, #12]
 8005e54:	b2ca      	uxtb	r2, r1
 8005e56:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005e5c:	e00a      	b.n	8005e74 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	1c53      	adds	r3, r2, #1
 8005e62:	60bb      	str	r3, [r7, #8]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	1c59      	adds	r1, r3, #1
 8005e68:	60f9      	str	r1, [r7, #12]
 8005e6a:	7812      	ldrb	r2, [r2, #0]
 8005e6c:	701a      	strb	r2, [r3, #0]
    n++;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	3301      	adds	r3, #1
 8005e72:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d3f0      	bcc.n	8005e5e <_EncodeStr+0x6e>
  }
  return pPayload;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	371c      	adds	r7, #28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	3304      	adds	r3, #4
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
	...

08005ea4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005eaa:	4b35      	ldr	r3, [pc, #212]	; (8005f80 <_HandleIncomingPacket+0xdc>)
 8005eac:	7e1b      	ldrb	r3, [r3, #24]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	1cfb      	adds	r3, r7, #3
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	f7ff fdab 	bl	8005a10 <SEGGER_RTT_ReadNoLock>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	dd59      	ble.n	8005f78 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005ec4:	78fb      	ldrb	r3, [r7, #3]
 8005ec6:	2b80      	cmp	r3, #128	; 0x80
 8005ec8:	d032      	beq.n	8005f30 <_HandleIncomingPacket+0x8c>
 8005eca:	2b80      	cmp	r3, #128	; 0x80
 8005ecc:	dc42      	bgt.n	8005f54 <_HandleIncomingPacket+0xb0>
 8005ece:	2b07      	cmp	r3, #7
 8005ed0:	dc16      	bgt.n	8005f00 <_HandleIncomingPacket+0x5c>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	dd3e      	ble.n	8005f54 <_HandleIncomingPacket+0xb0>
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	2b06      	cmp	r3, #6
 8005eda:	d83b      	bhi.n	8005f54 <_HandleIncomingPacket+0xb0>
 8005edc:	a201      	add	r2, pc, #4	; (adr r2, 8005ee4 <_HandleIncomingPacket+0x40>)
 8005ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee2:	bf00      	nop
 8005ee4:	08005f07 	.word	0x08005f07
 8005ee8:	08005f0d 	.word	0x08005f0d
 8005eec:	08005f13 	.word	0x08005f13
 8005ef0:	08005f19 	.word	0x08005f19
 8005ef4:	08005f1f 	.word	0x08005f1f
 8005ef8:	08005f25 	.word	0x08005f25
 8005efc:	08005f2b 	.word	0x08005f2b
 8005f00:	2b7f      	cmp	r3, #127	; 0x7f
 8005f02:	d034      	beq.n	8005f6e <_HandleIncomingPacket+0xca>
 8005f04:	e026      	b.n	8005f54 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005f06:	f000 fff1 	bl	8006eec <SEGGER_SYSVIEW_Start>
      break;
 8005f0a:	e035      	b.n	8005f78 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005f0c:	f001 f8aa 	bl	8007064 <SEGGER_SYSVIEW_Stop>
      break;
 8005f10:	e032      	b.n	8005f78 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005f12:	f001 fa83 	bl	800741c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005f16:	e02f      	b.n	8005f78 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005f18:	f001 fa48 	bl	80073ac <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005f1c:	e02c      	b.n	8005f78 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005f1e:	f001 f8c7 	bl	80070b0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005f22:	e029      	b.n	8005f78 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005f24:	f001 fd16 	bl	8007954 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005f28:	e026      	b.n	8005f78 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005f2a:	f001 fcf5 	bl	8007918 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005f2e:	e023      	b.n	8005f78 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005f30:	4b13      	ldr	r3, [pc, #76]	; (8005f80 <_HandleIncomingPacket+0xdc>)
 8005f32:	7e1b      	ldrb	r3, [r3, #24]
 8005f34:	4618      	mov	r0, r3
 8005f36:	1cfb      	adds	r3, r7, #3
 8005f38:	2201      	movs	r2, #1
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	f7ff fd68 	bl	8005a10 <SEGGER_RTT_ReadNoLock>
 8005f40:	4603      	mov	r3, r0
 8005f42:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	dd13      	ble.n	8005f72 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005f4a:	78fb      	ldrb	r3, [r7, #3]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f001 fc63 	bl	8007818 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005f52:	e00e      	b.n	8005f72 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005f54:	78fb      	ldrb	r3, [r7, #3]
 8005f56:	b25b      	sxtb	r3, r3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	da0c      	bge.n	8005f76 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005f5c:	4b08      	ldr	r3, [pc, #32]	; (8005f80 <_HandleIncomingPacket+0xdc>)
 8005f5e:	7e1b      	ldrb	r3, [r3, #24]
 8005f60:	4618      	mov	r0, r3
 8005f62:	1cfb      	adds	r3, r7, #3
 8005f64:	2201      	movs	r2, #1
 8005f66:	4619      	mov	r1, r3
 8005f68:	f7ff fd52 	bl	8005a10 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005f6c:	e003      	b.n	8005f76 <_HandleIncomingPacket+0xd2>
      break;
 8005f6e:	bf00      	nop
 8005f70:	e002      	b.n	8005f78 <_HandleIncomingPacket+0xd4>
      break;
 8005f72:	bf00      	nop
 8005f74:	e000      	b.n	8005f78 <_HandleIncomingPacket+0xd4>
      break;
 8005f76:	bf00      	nop
    }
  }
}
 8005f78:	bf00      	nop
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	200143a8 	.word	0x200143a8

08005f84 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08c      	sub	sp, #48	; 0x30
 8005f88:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005f8e:	1d3b      	adds	r3, r7, #4
 8005f90:	3301      	adds	r3, #1
 8005f92:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f98:	4b32      	ldr	r3, [pc, #200]	; (8006064 <_TrySendOverflowPacket+0xe0>)
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f9e:	e00b      	b.n	8005fb8 <_TrySendOverflowPacket+0x34>
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa6:	1c59      	adds	r1, r3, #1
 8005fa8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005faa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fae:	b2d2      	uxtb	r2, r2
 8005fb0:	701a      	strb	r2, [r3, #0]
 8005fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb4:	09db      	lsrs	r3, r3, #7
 8005fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fba:	2b7f      	cmp	r3, #127	; 0x7f
 8005fbc:	d8f0      	bhi.n	8005fa0 <_TrySendOverflowPacket+0x1c>
 8005fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc0:	1c5a      	adds	r2, r3, #1
 8005fc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fc6:	b2d2      	uxtb	r2, r2
 8005fc8:	701a      	strb	r2, [r3, #0]
 8005fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fcc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005fce:	4b26      	ldr	r3, [pc, #152]	; (8006068 <_TrySendOverflowPacket+0xe4>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005fd4:	4b23      	ldr	r3, [pc, #140]	; (8006064 <_TrySendOverflowPacket+0xe0>)
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	623b      	str	r3, [r7, #32]
 8005fe6:	e00b      	b.n	8006000 <_TrySendOverflowPacket+0x7c>
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	1c59      	adds	r1, r3, #1
 8005ff0:	6279      	str	r1, [r7, #36]	; 0x24
 8005ff2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ff6:	b2d2      	uxtb	r2, r2
 8005ff8:	701a      	strb	r2, [r3, #0]
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	09db      	lsrs	r3, r3, #7
 8005ffe:	623b      	str	r3, [r7, #32]
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	2b7f      	cmp	r3, #127	; 0x7f
 8006004:	d8f0      	bhi.n	8005fe8 <_TrySendOverflowPacket+0x64>
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	627a      	str	r2, [r7, #36]	; 0x24
 800600c:	6a3a      	ldr	r2, [r7, #32]
 800600e:	b2d2      	uxtb	r2, r2
 8006010:	701a      	strb	r2, [r3, #0]
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8006016:	4b13      	ldr	r3, [pc, #76]	; (8006064 <_TrySendOverflowPacket+0xe0>)
 8006018:	785b      	ldrb	r3, [r3, #1]
 800601a:	4618      	mov	r0, r3
 800601c:	1d3b      	adds	r3, r7, #4
 800601e:	69fa      	ldr	r2, [r7, #28]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	461a      	mov	r2, r3
 8006024:	1d3b      	adds	r3, r7, #4
 8006026:	4619      	mov	r1, r3
 8006028:	f7fa f8d2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800602c:	4603      	mov	r3, r0
 800602e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8006030:	f7ff fabe 	bl	80055b0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d009      	beq.n	800604e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800603a:	4a0a      	ldr	r2, [pc, #40]	; (8006064 <_TrySendOverflowPacket+0xe0>)
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006040:	4b08      	ldr	r3, [pc, #32]	; (8006064 <_TrySendOverflowPacket+0xe0>)
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	3b01      	subs	r3, #1
 8006046:	b2da      	uxtb	r2, r3
 8006048:	4b06      	ldr	r3, [pc, #24]	; (8006064 <_TrySendOverflowPacket+0xe0>)
 800604a:	701a      	strb	r2, [r3, #0]
 800604c:	e004      	b.n	8006058 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800604e:	4b05      	ldr	r3, [pc, #20]	; (8006064 <_TrySendOverflowPacket+0xe0>)
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	3301      	adds	r3, #1
 8006054:	4a03      	ldr	r2, [pc, #12]	; (8006064 <_TrySendOverflowPacket+0xe0>)
 8006056:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006058:	693b      	ldr	r3, [r7, #16]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3730      	adds	r7, #48	; 0x30
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	200143a8 	.word	0x200143a8
 8006068:	e0001004 	.word	0xe0001004

0800606c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800606c:	b580      	push	{r7, lr}
 800606e:	b08a      	sub	sp, #40	; 0x28
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006078:	4b6d      	ldr	r3, [pc, #436]	; (8006230 <_SendPacket+0x1c4>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d010      	beq.n	80060a2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006080:	4b6b      	ldr	r3, [pc, #428]	; (8006230 <_SendPacket+0x1c4>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 80a5 	beq.w	80061d4 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800608a:	4b69      	ldr	r3, [pc, #420]	; (8006230 <_SendPacket+0x1c4>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	2b02      	cmp	r3, #2
 8006090:	d109      	bne.n	80060a6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006092:	f7ff ff77 	bl	8005f84 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006096:	4b66      	ldr	r3, [pc, #408]	; (8006230 <_SendPacket+0x1c4>)
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	2b01      	cmp	r3, #1
 800609c:	f040 809c 	bne.w	80061d8 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80060a0:	e001      	b.n	80060a6 <_SendPacket+0x3a>
    goto Send;
 80060a2:	bf00      	nop
 80060a4:	e000      	b.n	80060a8 <_SendPacket+0x3c>
Send:
 80060a6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b1f      	cmp	r3, #31
 80060ac:	d809      	bhi.n	80060c2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80060ae:	4b60      	ldr	r3, [pc, #384]	; (8006230 <_SendPacket+0x1c4>)
 80060b0:	69da      	ldr	r2, [r3, #28]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	fa22 f303 	lsr.w	r3, r2, r3
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f040 808d 	bne.w	80061dc <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b17      	cmp	r3, #23
 80060c6:	d807      	bhi.n	80060d8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3b01      	subs	r3, #1
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	e03d      	b.n	8006154 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	2b7f      	cmp	r3, #127	; 0x7f
 80060e4:	d912      	bls.n	800610c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	09da      	lsrs	r2, r3, #7
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	3b01      	subs	r3, #1
 80060ee:	60fb      	str	r3, [r7, #12]
 80060f0:	b2d2      	uxtb	r2, r2
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	3a01      	subs	r2, #1
 80060fe:	60fa      	str	r2, [r7, #12]
 8006100:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006104:	b2da      	uxtb	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	701a      	strb	r2, [r3, #0]
 800610a:	e006      	b.n	800611a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	3b01      	subs	r3, #1
 8006110:	60fb      	str	r3, [r7, #12]
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	b2da      	uxtb	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b7f      	cmp	r3, #127	; 0x7f
 800611e:	d912      	bls.n	8006146 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	09da      	lsrs	r2, r3, #7
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	3b01      	subs	r3, #1
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	b2d2      	uxtb	r2, r2
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	b2db      	uxtb	r3, r3
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	3a01      	subs	r2, #1
 8006138:	60fa      	str	r2, [r7, #12]
 800613a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800613e:	b2da      	uxtb	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	701a      	strb	r2, [r3, #0]
 8006144:	e006      	b.n	8006154 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	3b01      	subs	r3, #1
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	b2da      	uxtb	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006154:	4b37      	ldr	r3, [pc, #220]	; (8006234 <_SendPacket+0x1c8>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800615a:	4b35      	ldr	r3, [pc, #212]	; (8006230 <_SendPacket+0x1c4>)
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	627b      	str	r3, [r7, #36]	; 0x24
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	623b      	str	r3, [r7, #32]
 800616c:	e00b      	b.n	8006186 <_SendPacket+0x11a>
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	b2da      	uxtb	r2, r3
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	1c59      	adds	r1, r3, #1
 8006176:	6279      	str	r1, [r7, #36]	; 0x24
 8006178:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800617c:	b2d2      	uxtb	r2, r2
 800617e:	701a      	strb	r2, [r3, #0]
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	09db      	lsrs	r3, r3, #7
 8006184:	623b      	str	r3, [r7, #32]
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	2b7f      	cmp	r3, #127	; 0x7f
 800618a:	d8f0      	bhi.n	800616e <_SendPacket+0x102>
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	627a      	str	r2, [r7, #36]	; 0x24
 8006192:	6a3a      	ldr	r2, [r7, #32]
 8006194:	b2d2      	uxtb	r2, r2
 8006196:	701a      	strb	r2, [r3, #0]
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800619c:	4b24      	ldr	r3, [pc, #144]	; (8006230 <_SendPacket+0x1c4>)
 800619e:	785b      	ldrb	r3, [r3, #1]
 80061a0:	4618      	mov	r0, r3
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	461a      	mov	r2, r3
 80061aa:	68f9      	ldr	r1, [r7, #12]
 80061ac:	f7fa f810 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80061b0:	4603      	mov	r3, r0
 80061b2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80061b4:	f7ff f9fc 	bl	80055b0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80061be:	4a1c      	ldr	r2, [pc, #112]	; (8006230 <_SendPacket+0x1c4>)
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	60d3      	str	r3, [r2, #12]
 80061c4:	e00b      	b.n	80061de <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80061c6:	4b1a      	ldr	r3, [pc, #104]	; (8006230 <_SendPacket+0x1c4>)
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	3301      	adds	r3, #1
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	4b18      	ldr	r3, [pc, #96]	; (8006230 <_SendPacket+0x1c4>)
 80061d0:	701a      	strb	r2, [r3, #0]
 80061d2:	e004      	b.n	80061de <_SendPacket+0x172>
    goto SendDone;
 80061d4:	bf00      	nop
 80061d6:	e002      	b.n	80061de <_SendPacket+0x172>
      goto SendDone;
 80061d8:	bf00      	nop
 80061da:	e000      	b.n	80061de <_SendPacket+0x172>
      goto SendDone;
 80061dc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80061de:	4b14      	ldr	r3, [pc, #80]	; (8006230 <_SendPacket+0x1c4>)
 80061e0:	7e1b      	ldrb	r3, [r3, #24]
 80061e2:	4619      	mov	r1, r3
 80061e4:	4a14      	ldr	r2, [pc, #80]	; (8006238 <_SendPacket+0x1cc>)
 80061e6:	460b      	mov	r3, r1
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	440b      	add	r3, r1
 80061ec:	00db      	lsls	r3, r3, #3
 80061ee:	4413      	add	r3, r2
 80061f0:	336c      	adds	r3, #108	; 0x6c
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	4b0e      	ldr	r3, [pc, #56]	; (8006230 <_SendPacket+0x1c4>)
 80061f6:	7e1b      	ldrb	r3, [r3, #24]
 80061f8:	4618      	mov	r0, r3
 80061fa:	490f      	ldr	r1, [pc, #60]	; (8006238 <_SendPacket+0x1cc>)
 80061fc:	4603      	mov	r3, r0
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	4403      	add	r3, r0
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	440b      	add	r3, r1
 8006206:	3370      	adds	r3, #112	; 0x70
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	429a      	cmp	r2, r3
 800620c:	d00b      	beq.n	8006226 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800620e:	4b08      	ldr	r3, [pc, #32]	; (8006230 <_SendPacket+0x1c4>)
 8006210:	789b      	ldrb	r3, [r3, #2]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d107      	bne.n	8006226 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006216:	4b06      	ldr	r3, [pc, #24]	; (8006230 <_SendPacket+0x1c4>)
 8006218:	2201      	movs	r2, #1
 800621a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800621c:	f7ff fe42 	bl	8005ea4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006220:	4b03      	ldr	r3, [pc, #12]	; (8006230 <_SendPacket+0x1c4>)
 8006222:	2200      	movs	r2, #0
 8006224:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006226:	bf00      	nop
 8006228:	3728      	adds	r7, #40	; 0x28
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	200143a8 	.word	0x200143a8
 8006234:	e0001004 	.word	0xe0001004
 8006238:	20012ee8 	.word	0x20012ee8

0800623c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 800623c:	b580      	push	{r7, lr}
 800623e:	b08a      	sub	sp, #40	; 0x28
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	460b      	mov	r3, r1
 8006246:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	3301      	adds	r3, #1
 8006252:	2b80      	cmp	r3, #128	; 0x80
 8006254:	d80a      	bhi.n	800626c <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	1c59      	adds	r1, r3, #1
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	6051      	str	r1, [r2, #4]
 8006260:	78fa      	ldrb	r2, [r7, #3]
 8006262:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	1c5a      	adds	r2, r3, #1
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	2b80      	cmp	r3, #128	; 0x80
 8006272:	d15a      	bne.n	800632a <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	691a      	ldr	r2, [r3, #16]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	b2d2      	uxtb	r2, r2
 800627e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	627b      	str	r3, [r7, #36]	; 0x24
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	623b      	str	r3, [r7, #32]
 8006294:	e00b      	b.n	80062ae <_StoreChar+0x72>
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	b2da      	uxtb	r2, r3
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	1c59      	adds	r1, r3, #1
 800629e:	6279      	str	r1, [r7, #36]	; 0x24
 80062a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062a4:	b2d2      	uxtb	r2, r2
 80062a6:	701a      	strb	r2, [r3, #0]
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	09db      	lsrs	r3, r3, #7
 80062ac:	623b      	str	r3, [r7, #32]
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	2b7f      	cmp	r3, #127	; 0x7f
 80062b2:	d8f0      	bhi.n	8006296 <_StoreChar+0x5a>
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	1c5a      	adds	r2, r3, #1
 80062b8:	627a      	str	r2, [r7, #36]	; 0x24
 80062ba:	6a3a      	ldr	r2, [r7, #32]
 80062bc:	b2d2      	uxtb	r2, r2
 80062be:	701a      	strb	r2, [r3, #0]
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	61fb      	str	r3, [r7, #28]
 80062c8:	2300      	movs	r3, #0
 80062ca:	61bb      	str	r3, [r7, #24]
 80062cc:	e00b      	b.n	80062e6 <_StoreChar+0xaa>
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	1c59      	adds	r1, r3, #1
 80062d6:	61f9      	str	r1, [r7, #28]
 80062d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062dc:	b2d2      	uxtb	r2, r2
 80062de:	701a      	strb	r2, [r3, #0]
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	09db      	lsrs	r3, r3, #7
 80062e4:	61bb      	str	r3, [r7, #24]
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	2b7f      	cmp	r3, #127	; 0x7f
 80062ea:	d8f0      	bhi.n	80062ce <_StoreChar+0x92>
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	61fa      	str	r2, [r7, #28]
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	b2d2      	uxtb	r2, r2
 80062f6:	701a      	strb	r2, [r3, #0]
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	221a      	movs	r2, #26
 8006302:	6939      	ldr	r1, [r7, #16]
 8006304:	4618      	mov	r0, r3
 8006306:	f7ff feb1 	bl	800606c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4618      	mov	r0, r3
 8006310:	f7ff fdbb 	bl	8005e8a <_PreparePacket>
 8006314:	4602      	mov	r2, r0
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	611a      	str	r2, [r3, #16]
  }
}
 800632a:	bf00      	nop
 800632c:	3728      	adds	r7, #40	; 0x28
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
	...

08006334 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006334:	b580      	push	{r7, lr}
 8006336:	b08a      	sub	sp, #40	; 0x28
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8006346:	2301      	movs	r3, #1
 8006348:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800634a:	2301      	movs	r3, #1
 800634c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800634e:	e007      	b.n	8006360 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8006350:	6a3a      	ldr	r2, [r7, #32]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	fbb2 f3f3 	udiv	r3, r2, r3
 8006358:	623b      	str	r3, [r7, #32]
    Width++;
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	3301      	adds	r3, #1
 800635e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006360:	6a3a      	ldr	r2, [r7, #32]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	429a      	cmp	r2, r3
 8006366:	d2f3      	bcs.n	8006350 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	429a      	cmp	r2, r3
 800636e:	d901      	bls.n	8006374 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d11f      	bne.n	80063be <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01c      	beq.n	80063be <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d005      	beq.n	800639a <_PrintUnsigned+0x66>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d102      	bne.n	800639a <_PrintUnsigned+0x66>
        c = '0';
 8006394:	2330      	movs	r3, #48	; 0x30
 8006396:	76fb      	strb	r3, [r7, #27]
 8006398:	e001      	b.n	800639e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800639a:	2320      	movs	r3, #32
 800639c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800639e:	e007      	b.n	80063b0 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80063a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a2:	3b01      	subs	r3, #1
 80063a4:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80063a6:	7efb      	ldrb	r3, [r7, #27]
 80063a8:	4619      	mov	r1, r3
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f7ff ff46 	bl	800623c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80063b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <_PrintUnsigned+0x8a>
 80063b6:	69fa      	ldr	r2, [r7, #28]
 80063b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d3f0      	bcc.n	80063a0 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d903      	bls.n	80063cc <_PrintUnsigned+0x98>
      NumDigits--;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	603b      	str	r3, [r7, #0]
 80063ca:	e009      	b.n	80063e0 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d4:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d200      	bcs.n	80063e0 <_PrintUnsigned+0xac>
        break;
 80063de:	e005      	b.n	80063ec <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	fb02 f303 	mul.w	r3, r2, r3
 80063e8:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80063ea:	e7e8      	b.n	80063be <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f4:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063fa:	fb02 f303 	mul.w	r3, r2, r3
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8006404:	4a15      	ldr	r2, [pc, #84]	; (800645c <_PrintUnsigned+0x128>)
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	4413      	add	r3, r2
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	4619      	mov	r1, r3
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f7ff ff14 	bl	800623c <_StoreChar>
    Digit /= Base;
 8006414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	fbb2 f3f3 	udiv	r3, r2, r3
 800641c:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1e3      	bne.n	80063ec <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d011      	beq.n	8006452 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00e      	beq.n	8006452 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006434:	e006      	b.n	8006444 <_PrintUnsigned+0x110>
        FieldWidth--;
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	3b01      	subs	r3, #1
 800643a:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 800643c:	2120      	movs	r1, #32
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f7ff fefc 	bl	800623c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <_PrintUnsigned+0x11e>
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644e:	429a      	cmp	r2, r3
 8006450:	d3f1      	bcc.n	8006436 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8006452:	bf00      	nop
 8006454:	3728      	adds	r7, #40	; 0x28
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	08007d48 	.word	0x08007d48

08006460 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006460:	b580      	push	{r7, lr}
 8006462:	b088      	sub	sp, #32
 8006464:	af02      	add	r7, sp, #8
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
 800646c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	2b00      	cmp	r3, #0
 8006472:	bfb8      	it	lt
 8006474:	425b      	neglt	r3, r3
 8006476:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006478:	2301      	movs	r3, #1
 800647a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800647c:	e007      	b.n	800648e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	fb92 f3f3 	sdiv	r3, r2, r3
 8006486:	613b      	str	r3, [r7, #16]
    Width++;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	3301      	adds	r3, #1
 800648c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	429a      	cmp	r2, r3
 8006494:	daf3      	bge.n	800647e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	429a      	cmp	r2, r3
 800649c:	d901      	bls.n	80064a2 <_PrintInt+0x42>
    Width = NumDigits;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00a      	beq.n	80064be <_PrintInt+0x5e>
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	db04      	blt.n	80064b8 <_PrintInt+0x58>
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	f003 0304 	and.w	r3, r3, #4
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <_PrintInt+0x5e>
    FieldWidth--;
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	3b01      	subs	r3, #1
 80064bc:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <_PrintInt+0x6e>
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d016      	beq.n	80064fc <_PrintInt+0x9c>
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d111      	bne.n	80064fc <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80064d8:	6a3b      	ldr	r3, [r7, #32]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00e      	beq.n	80064fc <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80064de:	e006      	b.n	80064ee <_PrintInt+0x8e>
        FieldWidth--;
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	3b01      	subs	r3, #1
 80064e4:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80064e6:	2120      	movs	r1, #32
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f7ff fea7 	bl	800623c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d003      	beq.n	80064fc <_PrintInt+0x9c>
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d3f1      	bcc.n	80064e0 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	da07      	bge.n	8006512 <_PrintInt+0xb2>
    v = -v;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	425b      	negs	r3, r3
 8006506:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8006508:	212d      	movs	r1, #45	; 0x2d
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f7ff fe96 	bl	800623c <_StoreChar>
 8006510:	e008      	b.n	8006524 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 800651c:	212b      	movs	r1, #43	; 0x2b
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f7ff fe8c 	bl	800623c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d019      	beq.n	8006562 <_PrintInt+0x102>
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d114      	bne.n	8006562 <_PrintInt+0x102>
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d111      	bne.n	8006562 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00e      	beq.n	8006562 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006544:	e006      	b.n	8006554 <_PrintInt+0xf4>
        FieldWidth--;
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	3b01      	subs	r3, #1
 800654a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 800654c:	2130      	movs	r1, #48	; 0x30
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f7ff fe74 	bl	800623c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <_PrintInt+0x102>
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	429a      	cmp	r2, r3
 8006560:	d3f1      	bcc.n	8006546 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8006562:	68b9      	ldr	r1, [r7, #8]
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	9301      	str	r3, [sp, #4]
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f7ff fedf 	bl	8006334 <_PrintUnsigned>
}
 8006576:	bf00      	nop
 8006578:	3718      	adds	r7, #24
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
	...

08006580 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006580:	b580      	push	{r7, lr}
 8006582:	b098      	sub	sp, #96	; 0x60
 8006584:	af02      	add	r7, sp, #8
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800658c:	f3ef 8311 	mrs	r3, BASEPRI
 8006590:	f04f 0120 	mov.w	r1, #32
 8006594:	f381 8811 	msr	BASEPRI, r1
 8006598:	633b      	str	r3, [r7, #48]	; 0x30
 800659a:	48b7      	ldr	r0, [pc, #732]	; (8006878 <_VPrintTarget+0x2f8>)
 800659c:	f7ff fc75 	bl	8005e8a <_PreparePacket>
 80065a0:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80065a2:	4bb5      	ldr	r3, [pc, #724]	; (8006878 <_VPrintTarget+0x2f8>)
 80065a4:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80065a6:	2300      	movs	r3, #0
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80065aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ac:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	3301      	adds	r3, #1
 80065b2:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3301      	adds	r3, #1
 80065c4:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80065c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 8183 	beq.w	80068d6 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80065d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065d4:	2b25      	cmp	r3, #37	; 0x25
 80065d6:	f040 8170 	bne.w	80068ba <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80065da:	2300      	movs	r3, #0
 80065dc:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80065de:	2301      	movs	r3, #1
 80065e0:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80065ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065ee:	3b23      	subs	r3, #35	; 0x23
 80065f0:	2b0d      	cmp	r3, #13
 80065f2:	d83f      	bhi.n	8006674 <_VPrintTarget+0xf4>
 80065f4:	a201      	add	r2, pc, #4	; (adr r2, 80065fc <_VPrintTarget+0x7c>)
 80065f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fa:	bf00      	nop
 80065fc:	08006665 	.word	0x08006665
 8006600:	08006675 	.word	0x08006675
 8006604:	08006675 	.word	0x08006675
 8006608:	08006675 	.word	0x08006675
 800660c:	08006675 	.word	0x08006675
 8006610:	08006675 	.word	0x08006675
 8006614:	08006675 	.word	0x08006675
 8006618:	08006675 	.word	0x08006675
 800661c:	08006655 	.word	0x08006655
 8006620:	08006675 	.word	0x08006675
 8006624:	08006635 	.word	0x08006635
 8006628:	08006675 	.word	0x08006675
 800662c:	08006675 	.word	0x08006675
 8006630:	08006645 	.word	0x08006645
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006636:	f043 0301 	orr.w	r3, r3, #1
 800663a:	64bb      	str	r3, [r7, #72]	; 0x48
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	3301      	adds	r3, #1
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	e01a      	b.n	800667a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006646:	f043 0302 	orr.w	r3, r3, #2
 800664a:	64bb      	str	r3, [r7, #72]	; 0x48
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3301      	adds	r3, #1
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	e012      	b.n	800667a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006656:	f043 0304 	orr.w	r3, r3, #4
 800665a:	64bb      	str	r3, [r7, #72]	; 0x48
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3301      	adds	r3, #1
 8006660:	60fb      	str	r3, [r7, #12]
 8006662:	e00a      	b.n	800667a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006666:	f043 0308 	orr.w	r3, r3, #8
 800666a:	64bb      	str	r3, [r7, #72]	; 0x48
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	3301      	adds	r3, #1
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	e002      	b.n	800667a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006674:	2300      	movs	r3, #0
 8006676:	653b      	str	r3, [r7, #80]	; 0x50
 8006678:	bf00      	nop
        }
      } while (v);
 800667a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1b0      	bne.n	80065e2 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006680:	2300      	movs	r3, #0
 8006682:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 800668c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006690:	2b2f      	cmp	r3, #47	; 0x2f
 8006692:	d912      	bls.n	80066ba <_VPrintTarget+0x13a>
 8006694:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006698:	2b39      	cmp	r3, #57	; 0x39
 800669a:	d80e      	bhi.n	80066ba <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	3301      	adds	r3, #1
 80066a0:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80066a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066a4:	4613      	mov	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	461a      	mov	r2, r3
 80066ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066b2:	4413      	add	r3, r2
 80066b4:	3b30      	subs	r3, #48	; 0x30
 80066b6:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80066b8:	e7e4      	b.n	8006684 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80066ba:	2300      	movs	r3, #0
 80066bc:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80066c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066ca:	2b2e      	cmp	r3, #46	; 0x2e
 80066cc:	d11d      	bne.n	800670a <_VPrintTarget+0x18a>
        sFormat++;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	3301      	adds	r3, #1
 80066d2:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80066dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066e0:	2b2f      	cmp	r3, #47	; 0x2f
 80066e2:	d912      	bls.n	800670a <_VPrintTarget+0x18a>
 80066e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066e8:	2b39      	cmp	r3, #57	; 0x39
 80066ea:	d80e      	bhi.n	800670a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3301      	adds	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80066f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066f4:	4613      	mov	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	005b      	lsls	r3, r3, #1
 80066fc:	461a      	mov	r2, r3
 80066fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006702:	4413      	add	r3, r2
 8006704:	3b30      	subs	r3, #48	; 0x30
 8006706:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8006708:	e7e4      	b.n	80066d4 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006712:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006716:	2b6c      	cmp	r3, #108	; 0x6c
 8006718:	d003      	beq.n	8006722 <_VPrintTarget+0x1a2>
 800671a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800671e:	2b68      	cmp	r3, #104	; 0x68
 8006720:	d107      	bne.n	8006732 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	3301      	adds	r3, #1
 800672e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006730:	e7ef      	b.n	8006712 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006732:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006736:	2b25      	cmp	r3, #37	; 0x25
 8006738:	f000 80b3 	beq.w	80068a2 <_VPrintTarget+0x322>
 800673c:	2b25      	cmp	r3, #37	; 0x25
 800673e:	f2c0 80b7 	blt.w	80068b0 <_VPrintTarget+0x330>
 8006742:	2b78      	cmp	r3, #120	; 0x78
 8006744:	f300 80b4 	bgt.w	80068b0 <_VPrintTarget+0x330>
 8006748:	2b58      	cmp	r3, #88	; 0x58
 800674a:	f2c0 80b1 	blt.w	80068b0 <_VPrintTarget+0x330>
 800674e:	3b58      	subs	r3, #88	; 0x58
 8006750:	2b20      	cmp	r3, #32
 8006752:	f200 80ad 	bhi.w	80068b0 <_VPrintTarget+0x330>
 8006756:	a201      	add	r2, pc, #4	; (adr r2, 800675c <_VPrintTarget+0x1dc>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	08006853 	.word	0x08006853
 8006760:	080068b1 	.word	0x080068b1
 8006764:	080068b1 	.word	0x080068b1
 8006768:	080068b1 	.word	0x080068b1
 800676c:	080068b1 	.word	0x080068b1
 8006770:	080068b1 	.word	0x080068b1
 8006774:	080068b1 	.word	0x080068b1
 8006778:	080068b1 	.word	0x080068b1
 800677c:	080068b1 	.word	0x080068b1
 8006780:	080068b1 	.word	0x080068b1
 8006784:	080068b1 	.word	0x080068b1
 8006788:	080067e1 	.word	0x080067e1
 800678c:	08006807 	.word	0x08006807
 8006790:	080068b1 	.word	0x080068b1
 8006794:	080068b1 	.word	0x080068b1
 8006798:	080068b1 	.word	0x080068b1
 800679c:	080068b1 	.word	0x080068b1
 80067a0:	080068b1 	.word	0x080068b1
 80067a4:	080068b1 	.word	0x080068b1
 80067a8:	080068b1 	.word	0x080068b1
 80067ac:	080068b1 	.word	0x080068b1
 80067b0:	080068b1 	.word	0x080068b1
 80067b4:	080068b1 	.word	0x080068b1
 80067b8:	080068b1 	.word	0x080068b1
 80067bc:	0800687d 	.word	0x0800687d
 80067c0:	080068b1 	.word	0x080068b1
 80067c4:	080068b1 	.word	0x080068b1
 80067c8:	080068b1 	.word	0x080068b1
 80067cc:	080068b1 	.word	0x080068b1
 80067d0:	0800682d 	.word	0x0800682d
 80067d4:	080068b1 	.word	0x080068b1
 80067d8:	080068b1 	.word	0x080068b1
 80067dc:	08006853 	.word	0x08006853
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	1d19      	adds	r1, r3, #4
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	6011      	str	r1, [r2, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80067ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80067f4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80067f8:	f107 0314 	add.w	r3, r7, #20
 80067fc:	4611      	mov	r1, r2
 80067fe:	4618      	mov	r0, r3
 8006800:	f7ff fd1c 	bl	800623c <_StoreChar>
        break;
 8006804:	e055      	b.n	80068b2 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	1d19      	adds	r1, r3, #4
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6011      	str	r1, [r2, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006814:	f107 0014 	add.w	r0, r7, #20
 8006818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800681a:	9301      	str	r3, [sp, #4]
 800681c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006822:	220a      	movs	r2, #10
 8006824:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006826:	f7ff fe1b 	bl	8006460 <_PrintInt>
        break;
 800682a:	e042      	b.n	80068b2 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	1d19      	adds	r1, r3, #4
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	6011      	str	r1, [r2, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800683a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800683c:	f107 0014 	add.w	r0, r7, #20
 8006840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006842:	9301      	str	r3, [sp, #4]
 8006844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800684a:	220a      	movs	r2, #10
 800684c:	f7ff fd72 	bl	8006334 <_PrintUnsigned>
        break;
 8006850:	e02f      	b.n	80068b2 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	1d19      	adds	r1, r3, #4
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6011      	str	r1, [r2, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006860:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006862:	f107 0014 	add.w	r0, r7, #20
 8006866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006868:	9301      	str	r3, [sp, #4]
 800686a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006870:	2210      	movs	r2, #16
 8006872:	f7ff fd5f 	bl	8006334 <_PrintUnsigned>
        break;
 8006876:	e01c      	b.n	80068b2 <_VPrintTarget+0x332>
 8006878:	200143d8 	.word	0x200143d8
      case 'p':
        v = va_arg(*pParamList, int);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	1d19      	adds	r1, r3, #4
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	6011      	str	r1, [r2, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800688a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800688c:	f107 0014 	add.w	r0, r7, #20
 8006890:	2300      	movs	r3, #0
 8006892:	9301      	str	r3, [sp, #4]
 8006894:	2308      	movs	r3, #8
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	2308      	movs	r3, #8
 800689a:	2210      	movs	r2, #16
 800689c:	f7ff fd4a 	bl	8006334 <_PrintUnsigned>
        break;
 80068a0:	e007      	b.n	80068b2 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80068a2:	f107 0314 	add.w	r3, r7, #20
 80068a6:	2125      	movs	r1, #37	; 0x25
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff fcc7 	bl	800623c <_StoreChar>
        break;
 80068ae:	e000      	b.n	80068b2 <_VPrintTarget+0x332>
      default:
        break;
 80068b0:	bf00      	nop
      }
      sFormat++;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3301      	adds	r3, #1
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	e007      	b.n	80068ca <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80068ba:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80068be:	f107 0314 	add.w	r3, r7, #20
 80068c2:	4611      	mov	r1, r2
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7ff fcb9 	bl	800623c <_StoreChar>
    }
  } while (*sFormat);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f47f ae72 	bne.w	80065b8 <_VPrintTarget+0x38>
 80068d4:	e000      	b.n	80068d8 <_VPrintTarget+0x358>
      break;
 80068d6:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d041      	beq.n	8006962 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 80068de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	b2d2      	uxtb	r2, r2
 80068e4:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	643b      	str	r3, [r7, #64]	; 0x40
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068ee:	e00b      	b.n	8006908 <_VPrintTarget+0x388>
 80068f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068f6:	1c59      	adds	r1, r3, #1
 80068f8:	6439      	str	r1, [r7, #64]	; 0x40
 80068fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068fe:	b2d2      	uxtb	r2, r2
 8006900:	701a      	strb	r2, [r3, #0]
 8006902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006904:	09db      	lsrs	r3, r3, #7
 8006906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800690a:	2b7f      	cmp	r3, #127	; 0x7f
 800690c:	d8f0      	bhi.n	80068f0 <_VPrintTarget+0x370>
 800690e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	643a      	str	r2, [r7, #64]	; 0x40
 8006914:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	701a      	strb	r2, [r3, #0]
 800691a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800691c:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	63bb      	str	r3, [r7, #56]	; 0x38
 8006922:	2300      	movs	r3, #0
 8006924:	637b      	str	r3, [r7, #52]	; 0x34
 8006926:	e00b      	b.n	8006940 <_VPrintTarget+0x3c0>
 8006928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800692a:	b2da      	uxtb	r2, r3
 800692c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692e:	1c59      	adds	r1, r3, #1
 8006930:	63b9      	str	r1, [r7, #56]	; 0x38
 8006932:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006936:	b2d2      	uxtb	r2, r2
 8006938:	701a      	strb	r2, [r3, #0]
 800693a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693c:	09db      	lsrs	r3, r3, #7
 800693e:	637b      	str	r3, [r7, #52]	; 0x34
 8006940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006942:	2b7f      	cmp	r3, #127	; 0x7f
 8006944:	d8f0      	bhi.n	8006928 <_VPrintTarget+0x3a8>
 8006946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	63ba      	str	r2, [r7, #56]	; 0x38
 800694c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800694e:	b2d2      	uxtb	r2, r2
 8006950:	701a      	strb	r2, [r3, #0]
 8006952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006954:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	69b9      	ldr	r1, [r7, #24]
 800695a:	221a      	movs	r2, #26
 800695c:	4618      	mov	r0, r3
 800695e:	f7ff fb85 	bl	800606c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006964:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006968:	bf00      	nop
 800696a:	3758      	adds	r7, #88	; 0x58
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af02      	add	r7, sp, #8
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800697e:	2300      	movs	r3, #0
 8006980:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006984:	4917      	ldr	r1, [pc, #92]	; (80069e4 <SEGGER_SYSVIEW_Init+0x74>)
 8006986:	4818      	ldr	r0, [pc, #96]	; (80069e8 <SEGGER_SYSVIEW_Init+0x78>)
 8006988:	f7ff f93e 	bl	8005c08 <SEGGER_RTT_AllocUpBuffer>
 800698c:	4603      	mov	r3, r0
 800698e:	b2da      	uxtb	r2, r3
 8006990:	4b16      	ldr	r3, [pc, #88]	; (80069ec <SEGGER_SYSVIEW_Init+0x7c>)
 8006992:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006994:	4b15      	ldr	r3, [pc, #84]	; (80069ec <SEGGER_SYSVIEW_Init+0x7c>)
 8006996:	785a      	ldrb	r2, [r3, #1]
 8006998:	4b14      	ldr	r3, [pc, #80]	; (80069ec <SEGGER_SYSVIEW_Init+0x7c>)
 800699a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800699c:	4b13      	ldr	r3, [pc, #76]	; (80069ec <SEGGER_SYSVIEW_Init+0x7c>)
 800699e:	7e1b      	ldrb	r3, [r3, #24]
 80069a0:	4618      	mov	r0, r3
 80069a2:	2300      	movs	r3, #0
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	2308      	movs	r3, #8
 80069a8:	4a11      	ldr	r2, [pc, #68]	; (80069f0 <SEGGER_SYSVIEW_Init+0x80>)
 80069aa:	490f      	ldr	r1, [pc, #60]	; (80069e8 <SEGGER_SYSVIEW_Init+0x78>)
 80069ac:	f7ff f9b0 	bl	8005d10 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80069b0:	4b0e      	ldr	r3, [pc, #56]	; (80069ec <SEGGER_SYSVIEW_Init+0x7c>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80069b6:	4b0f      	ldr	r3, [pc, #60]	; (80069f4 <SEGGER_SYSVIEW_Init+0x84>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a0c      	ldr	r2, [pc, #48]	; (80069ec <SEGGER_SYSVIEW_Init+0x7c>)
 80069bc:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80069be:	4a0b      	ldr	r2, [pc, #44]	; (80069ec <SEGGER_SYSVIEW_Init+0x7c>)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80069c4:	4a09      	ldr	r2, [pc, #36]	; (80069ec <SEGGER_SYSVIEW_Init+0x7c>)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80069ca:	4a08      	ldr	r2, [pc, #32]	; (80069ec <SEGGER_SYSVIEW_Init+0x7c>)
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80069d0:	4a06      	ldr	r2, [pc, #24]	; (80069ec <SEGGER_SYSVIEW_Init+0x7c>)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80069d6:	4b05      	ldr	r3, [pc, #20]	; (80069ec <SEGGER_SYSVIEW_Init+0x7c>)
 80069d8:	2200      	movs	r2, #0
 80069da:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80069dc:	bf00      	nop
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	200133a0 	.word	0x200133a0
 80069e8:	08007d10 	.word	0x08007d10
 80069ec:	200143a8 	.word	0x200143a8
 80069f0:	200143a0 	.word	0x200143a0
 80069f4:	e0001004 	.word	0xe0001004

080069f8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006a00:	4a04      	ldr	r2, [pc, #16]	; (8006a14 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6113      	str	r3, [r2, #16]
}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	200143a8 	.word	0x200143a8

08006a18 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a20:	f3ef 8311 	mrs	r3, BASEPRI
 8006a24:	f04f 0120 	mov.w	r1, #32
 8006a28:	f381 8811 	msr	BASEPRI, r1
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	4808      	ldr	r0, [pc, #32]	; (8006a50 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006a30:	f7ff fa2b 	bl	8005e8a <_PreparePacket>
 8006a34:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	68b9      	ldr	r1, [r7, #8]
 8006a3a:	68b8      	ldr	r0, [r7, #8]
 8006a3c:	f7ff fb16 	bl	800606c <_SendPacket>
  RECORD_END();
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f383 8811 	msr	BASEPRI, r3
}
 8006a46:	bf00      	nop
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	200143d8 	.word	0x200143d8

08006a54 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b088      	sub	sp, #32
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a5e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a62:	f04f 0120 	mov.w	r1, #32
 8006a66:	f381 8811 	msr	BASEPRI, r1
 8006a6a:	617b      	str	r3, [r7, #20]
 8006a6c:	4816      	ldr	r0, [pc, #88]	; (8006ac8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006a6e:	f7ff fa0c 	bl	8005e8a <_PreparePacket>
 8006a72:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	61fb      	str	r3, [r7, #28]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	61bb      	str	r3, [r7, #24]
 8006a80:	e00b      	b.n	8006a9a <SEGGER_SYSVIEW_RecordU32+0x46>
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	1c59      	adds	r1, r3, #1
 8006a8a:	61f9      	str	r1, [r7, #28]
 8006a8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a90:	b2d2      	uxtb	r2, r2
 8006a92:	701a      	strb	r2, [r3, #0]
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	09db      	lsrs	r3, r3, #7
 8006a98:	61bb      	str	r3, [r7, #24]
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a9e:	d8f0      	bhi.n	8006a82 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	61fa      	str	r2, [r7, #28]
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	b2d2      	uxtb	r2, r2
 8006aaa:	701a      	strb	r2, [r3, #0]
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	68f9      	ldr	r1, [r7, #12]
 8006ab4:	6938      	ldr	r0, [r7, #16]
 8006ab6:	f7ff fad9 	bl	800606c <_SendPacket>
  RECORD_END();
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f383 8811 	msr	BASEPRI, r3
}
 8006ac0:	bf00      	nop
 8006ac2:	3720      	adds	r7, #32
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	200143d8 	.word	0x200143d8

08006acc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b08c      	sub	sp, #48	; 0x30
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006ad8:	f3ef 8311 	mrs	r3, BASEPRI
 8006adc:	f04f 0120 	mov.w	r1, #32
 8006ae0:	f381 8811 	msr	BASEPRI, r1
 8006ae4:	61fb      	str	r3, [r7, #28]
 8006ae6:	4825      	ldr	r0, [pc, #148]	; (8006b7c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006ae8:	f7ff f9cf 	bl	8005e8a <_PreparePacket>
 8006aec:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006afa:	e00b      	b.n	8006b14 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afe:	b2da      	uxtb	r2, r3
 8006b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b02:	1c59      	adds	r1, r3, #1
 8006b04:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006b06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b0a:	b2d2      	uxtb	r2, r2
 8006b0c:	701a      	strb	r2, [r3, #0]
 8006b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b10:	09db      	lsrs	r3, r3, #7
 8006b12:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b16:	2b7f      	cmp	r3, #127	; 0x7f
 8006b18:	d8f0      	bhi.n	8006afc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1c:	1c5a      	adds	r2, r3, #1
 8006b1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b22:	b2d2      	uxtb	r2, r2
 8006b24:	701a      	strb	r2, [r3, #0]
 8006b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b28:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	623b      	str	r3, [r7, #32]
 8006b32:	e00b      	b.n	8006b4c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3a:	1c59      	adds	r1, r3, #1
 8006b3c:	6279      	str	r1, [r7, #36]	; 0x24
 8006b3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b42:	b2d2      	uxtb	r2, r2
 8006b44:	701a      	strb	r2, [r3, #0]
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	09db      	lsrs	r3, r3, #7
 8006b4a:	623b      	str	r3, [r7, #32]
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8006b50:	d8f0      	bhi.n	8006b34 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	1c5a      	adds	r2, r3, #1
 8006b56:	627a      	str	r2, [r7, #36]	; 0x24
 8006b58:	6a3a      	ldr	r2, [r7, #32]
 8006b5a:	b2d2      	uxtb	r2, r2
 8006b5c:	701a      	strb	r2, [r3, #0]
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	6979      	ldr	r1, [r7, #20]
 8006b66:	69b8      	ldr	r0, [r7, #24]
 8006b68:	f7ff fa80 	bl	800606c <_SendPacket>
  RECORD_END();
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	f383 8811 	msr	BASEPRI, r3
}
 8006b72:	bf00      	nop
 8006b74:	3730      	adds	r7, #48	; 0x30
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	200143d8 	.word	0x200143d8

08006b80 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b08e      	sub	sp, #56	; 0x38
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b8e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b92:	f04f 0120 	mov.w	r1, #32
 8006b96:	f381 8811 	msr	BASEPRI, r1
 8006b9a:	61fb      	str	r3, [r7, #28]
 8006b9c:	4832      	ldr	r0, [pc, #200]	; (8006c68 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006b9e:	f7ff f974 	bl	8005e8a <_PreparePacket>
 8006ba2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	637b      	str	r3, [r7, #52]	; 0x34
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	633b      	str	r3, [r7, #48]	; 0x30
 8006bb0:	e00b      	b.n	8006bca <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb8:	1c59      	adds	r1, r3, #1
 8006bba:	6379      	str	r1, [r7, #52]	; 0x34
 8006bbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bc0:	b2d2      	uxtb	r2, r2
 8006bc2:	701a      	strb	r2, [r3, #0]
 8006bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc6:	09db      	lsrs	r3, r3, #7
 8006bc8:	633b      	str	r3, [r7, #48]	; 0x30
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	2b7f      	cmp	r3, #127	; 0x7f
 8006bce:	d8f0      	bhi.n	8006bb2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	637a      	str	r2, [r7, #52]	; 0x34
 8006bd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd8:	b2d2      	uxtb	r2, r2
 8006bda:	701a      	strb	r2, [r3, #0]
 8006bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bde:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006be8:	e00b      	b.n	8006c02 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf0:	1c59      	adds	r1, r3, #1
 8006bf2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006bf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bf8:	b2d2      	uxtb	r2, r2
 8006bfa:	701a      	strb	r2, [r3, #0]
 8006bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfe:	09db      	lsrs	r3, r3, #7
 8006c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c04:	2b7f      	cmp	r3, #127	; 0x7f
 8006c06:	d8f0      	bhi.n	8006bea <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0a:	1c5a      	adds	r2, r3, #1
 8006c0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c10:	b2d2      	uxtb	r2, r2
 8006c12:	701a      	strb	r2, [r3, #0]
 8006c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c16:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	623b      	str	r3, [r7, #32]
 8006c20:	e00b      	b.n	8006c3a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	1c59      	adds	r1, r3, #1
 8006c2a:	6279      	str	r1, [r7, #36]	; 0x24
 8006c2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c30:	b2d2      	uxtb	r2, r2
 8006c32:	701a      	strb	r2, [r3, #0]
 8006c34:	6a3b      	ldr	r3, [r7, #32]
 8006c36:	09db      	lsrs	r3, r3, #7
 8006c38:	623b      	str	r3, [r7, #32]
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	2b7f      	cmp	r3, #127	; 0x7f
 8006c3e:	d8f0      	bhi.n	8006c22 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	1c5a      	adds	r2, r3, #1
 8006c44:	627a      	str	r2, [r7, #36]	; 0x24
 8006c46:	6a3a      	ldr	r2, [r7, #32]
 8006c48:	b2d2      	uxtb	r2, r2
 8006c4a:	701a      	strb	r2, [r3, #0]
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	6979      	ldr	r1, [r7, #20]
 8006c54:	69b8      	ldr	r0, [r7, #24]
 8006c56:	f7ff fa09 	bl	800606c <_SendPacket>
  RECORD_END();
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	f383 8811 	msr	BASEPRI, r3
}
 8006c60:	bf00      	nop
 8006c62:	3738      	adds	r7, #56	; 0x38
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	200143d8 	.word	0x200143d8

08006c6c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b090      	sub	sp, #64	; 0x40
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c7a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c7e:	f04f 0120 	mov.w	r1, #32
 8006c82:	f381 8811 	msr	BASEPRI, r1
 8006c86:	61fb      	str	r3, [r7, #28]
 8006c88:	4840      	ldr	r0, [pc, #256]	; (8006d8c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006c8a:	f7ff f8fe 	bl	8005e8a <_PreparePacket>
 8006c8e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c9c:	e00b      	b.n	8006cb6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca4:	1c59      	adds	r1, r3, #1
 8006ca6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006ca8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cac:	b2d2      	uxtb	r2, r2
 8006cae:	701a      	strb	r2, [r3, #0]
 8006cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb2:	09db      	lsrs	r3, r3, #7
 8006cb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb8:	2b7f      	cmp	r3, #127	; 0x7f
 8006cba:	d8f0      	bhi.n	8006c9e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cbe:	1c5a      	adds	r2, r3, #1
 8006cc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006cc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cc4:	b2d2      	uxtb	r2, r2
 8006cc6:	701a      	strb	r2, [r3, #0]
 8006cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	633b      	str	r3, [r7, #48]	; 0x30
 8006cd4:	e00b      	b.n	8006cee <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cdc:	1c59      	adds	r1, r3, #1
 8006cde:	6379      	str	r1, [r7, #52]	; 0x34
 8006ce0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ce4:	b2d2      	uxtb	r2, r2
 8006ce6:	701a      	strb	r2, [r3, #0]
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cea:	09db      	lsrs	r3, r3, #7
 8006cec:	633b      	str	r3, [r7, #48]	; 0x30
 8006cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf0:	2b7f      	cmp	r3, #127	; 0x7f
 8006cf2:	d8f0      	bhi.n	8006cd6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf6:	1c5a      	adds	r2, r3, #1
 8006cf8:	637a      	str	r2, [r7, #52]	; 0x34
 8006cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cfc:	b2d2      	uxtb	r2, r2
 8006cfe:	701a      	strb	r2, [r3, #0]
 8006d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d02:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d0c:	e00b      	b.n	8006d26 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d14:	1c59      	adds	r1, r3, #1
 8006d16:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006d18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d1c:	b2d2      	uxtb	r2, r2
 8006d1e:	701a      	strb	r2, [r3, #0]
 8006d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d22:	09db      	lsrs	r3, r3, #7
 8006d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d28:	2b7f      	cmp	r3, #127	; 0x7f
 8006d2a:	d8f0      	bhi.n	8006d0e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2e:	1c5a      	adds	r2, r3, #1
 8006d30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d34:	b2d2      	uxtb	r2, r2
 8006d36:	701a      	strb	r2, [r3, #0]
 8006d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d42:	623b      	str	r3, [r7, #32]
 8006d44:	e00b      	b.n	8006d5e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	1c59      	adds	r1, r3, #1
 8006d4e:	6279      	str	r1, [r7, #36]	; 0x24
 8006d50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d54:	b2d2      	uxtb	r2, r2
 8006d56:	701a      	strb	r2, [r3, #0]
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	09db      	lsrs	r3, r3, #7
 8006d5c:	623b      	str	r3, [r7, #32]
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	2b7f      	cmp	r3, #127	; 0x7f
 8006d62:	d8f0      	bhi.n	8006d46 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	627a      	str	r2, [r7, #36]	; 0x24
 8006d6a:	6a3a      	ldr	r2, [r7, #32]
 8006d6c:	b2d2      	uxtb	r2, r2
 8006d6e:	701a      	strb	r2, [r3, #0]
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	6979      	ldr	r1, [r7, #20]
 8006d78:	69b8      	ldr	r0, [r7, #24]
 8006d7a:	f7ff f977 	bl	800606c <_SendPacket>
  RECORD_END();
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	f383 8811 	msr	BASEPRI, r3
}
 8006d84:	bf00      	nop
 8006d86:	3740      	adds	r7, #64	; 0x40
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	200143d8 	.word	0x200143d8

08006d90 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b092      	sub	sp, #72	; 0x48
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
 8006d9c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d9e:	f3ef 8311 	mrs	r3, BASEPRI
 8006da2:	f04f 0120 	mov.w	r1, #32
 8006da6:	f381 8811 	msr	BASEPRI, r1
 8006daa:	61fb      	str	r3, [r7, #28]
 8006dac:	484e      	ldr	r0, [pc, #312]	; (8006ee8 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8006dae:	f7ff f86c 	bl	8005e8a <_PreparePacket>
 8006db2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	647b      	str	r3, [r7, #68]	; 0x44
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	643b      	str	r3, [r7, #64]	; 0x40
 8006dc0:	e00b      	b.n	8006dda <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8006dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dc4:	b2da      	uxtb	r2, r3
 8006dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dc8:	1c59      	adds	r1, r3, #1
 8006dca:	6479      	str	r1, [r7, #68]	; 0x44
 8006dcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dd0:	b2d2      	uxtb	r2, r2
 8006dd2:	701a      	strb	r2, [r3, #0]
 8006dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dd6:	09db      	lsrs	r3, r3, #7
 8006dd8:	643b      	str	r3, [r7, #64]	; 0x40
 8006dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ddc:	2b7f      	cmp	r3, #127	; 0x7f
 8006dde:	d8f0      	bhi.n	8006dc2 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8006de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	647a      	str	r2, [r7, #68]	; 0x44
 8006de6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006de8:	b2d2      	uxtb	r2, r2
 8006dea:	701a      	strb	r2, [r3, #0]
 8006dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006df8:	e00b      	b.n	8006e12 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8006dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e00:	1c59      	adds	r1, r3, #1
 8006e02:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006e04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e08:	b2d2      	uxtb	r2, r2
 8006e0a:	701a      	strb	r2, [r3, #0]
 8006e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0e:	09db      	lsrs	r3, r3, #7
 8006e10:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e14:	2b7f      	cmp	r3, #127	; 0x7f
 8006e16:	d8f0      	bhi.n	8006dfa <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8006e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e1a:	1c5a      	adds	r2, r3, #1
 8006e1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006e1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e20:	b2d2      	uxtb	r2, r2
 8006e22:	701a      	strb	r2, [r3, #0]
 8006e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e26:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	633b      	str	r3, [r7, #48]	; 0x30
 8006e30:	e00b      	b.n	8006e4a <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8006e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e34:	b2da      	uxtb	r2, r3
 8006e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e38:	1c59      	adds	r1, r3, #1
 8006e3a:	6379      	str	r1, [r7, #52]	; 0x34
 8006e3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e40:	b2d2      	uxtb	r2, r2
 8006e42:	701a      	strb	r2, [r3, #0]
 8006e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e46:	09db      	lsrs	r3, r3, #7
 8006e48:	633b      	str	r3, [r7, #48]	; 0x30
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e4e:	d8f0      	bhi.n	8006e32 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8006e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e52:	1c5a      	adds	r2, r3, #1
 8006e54:	637a      	str	r2, [r7, #52]	; 0x34
 8006e56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e58:	b2d2      	uxtb	r2, r2
 8006e5a:	701a      	strb	r2, [r3, #0]
 8006e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e66:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e68:	e00b      	b.n	8006e82 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8006e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e70:	1c59      	adds	r1, r3, #1
 8006e72:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006e74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e78:	b2d2      	uxtb	r2, r2
 8006e7a:	701a      	strb	r2, [r3, #0]
 8006e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7e:	09db      	lsrs	r3, r3, #7
 8006e80:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e84:	2b7f      	cmp	r3, #127	; 0x7f
 8006e86:	d8f0      	bhi.n	8006e6a <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8006e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8a:	1c5a      	adds	r2, r3, #1
 8006e8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e90:	b2d2      	uxtb	r2, r2
 8006e92:	701a      	strb	r2, [r3, #0]
 8006e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e96:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e9e:	623b      	str	r3, [r7, #32]
 8006ea0:	e00b      	b.n	8006eba <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	1c59      	adds	r1, r3, #1
 8006eaa:	6279      	str	r1, [r7, #36]	; 0x24
 8006eac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eb0:	b2d2      	uxtb	r2, r2
 8006eb2:	701a      	strb	r2, [r3, #0]
 8006eb4:	6a3b      	ldr	r3, [r7, #32]
 8006eb6:	09db      	lsrs	r3, r3, #7
 8006eb8:	623b      	str	r3, [r7, #32]
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	2b7f      	cmp	r3, #127	; 0x7f
 8006ebe:	d8f0      	bhi.n	8006ea2 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	1c5a      	adds	r2, r3, #1
 8006ec4:	627a      	str	r2, [r7, #36]	; 0x24
 8006ec6:	6a3a      	ldr	r2, [r7, #32]
 8006ec8:	b2d2      	uxtb	r2, r2
 8006eca:	701a      	strb	r2, [r3, #0]
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	6979      	ldr	r1, [r7, #20]
 8006ed4:	69b8      	ldr	r0, [r7, #24]
 8006ed6:	f7ff f8c9 	bl	800606c <_SendPacket>
  RECORD_END();
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	f383 8811 	msr	BASEPRI, r3
}
 8006ee0:	bf00      	nop
 8006ee2:	3748      	adds	r7, #72	; 0x48
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	200143d8 	.word	0x200143d8

08006eec <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b08c      	sub	sp, #48	; 0x30
 8006ef0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006ef2:	4b59      	ldr	r3, [pc, #356]	; (8007058 <SEGGER_SYSVIEW_Start+0x16c>)
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006ef8:	f3ef 8311 	mrs	r3, BASEPRI
 8006efc:	f04f 0120 	mov.w	r1, #32
 8006f00:	f381 8811 	msr	BASEPRI, r1
 8006f04:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006f06:	4b54      	ldr	r3, [pc, #336]	; (8007058 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f08:	785b      	ldrb	r3, [r3, #1]
 8006f0a:	220a      	movs	r2, #10
 8006f0c:	4953      	ldr	r1, [pc, #332]	; (800705c <SEGGER_SYSVIEW_Start+0x170>)
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7f9 f95e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006f1a:	f7fe fb49 	bl	80055b0 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006f1e:	200a      	movs	r0, #10
 8006f20:	f7ff fd7a 	bl	8006a18 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006f24:	f3ef 8311 	mrs	r3, BASEPRI
 8006f28:	f04f 0120 	mov.w	r1, #32
 8006f2c:	f381 8811 	msr	BASEPRI, r1
 8006f30:	60bb      	str	r3, [r7, #8]
 8006f32:	484b      	ldr	r0, [pc, #300]	; (8007060 <SEGGER_SYSVIEW_Start+0x174>)
 8006f34:	f7fe ffa9 	bl	8005e8a <_PreparePacket>
 8006f38:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f42:	4b45      	ldr	r3, [pc, #276]	; (8007058 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f48:	e00b      	b.n	8006f62 <SEGGER_SYSVIEW_Start+0x76>
 8006f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f50:	1c59      	adds	r1, r3, #1
 8006f52:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006f54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f58:	b2d2      	uxtb	r2, r2
 8006f5a:	701a      	strb	r2, [r3, #0]
 8006f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5e:	09db      	lsrs	r3, r3, #7
 8006f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f64:	2b7f      	cmp	r3, #127	; 0x7f
 8006f66:	d8f0      	bhi.n	8006f4a <SEGGER_SYSVIEW_Start+0x5e>
 8006f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6a:	1c5a      	adds	r2, r3, #1
 8006f6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f70:	b2d2      	uxtb	r2, r2
 8006f72:	701a      	strb	r2, [r3, #0]
 8006f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f76:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f7c:	4b36      	ldr	r3, [pc, #216]	; (8007058 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	623b      	str	r3, [r7, #32]
 8006f82:	e00b      	b.n	8006f9c <SEGGER_SYSVIEW_Start+0xb0>
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	b2da      	uxtb	r2, r3
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	1c59      	adds	r1, r3, #1
 8006f8c:	6279      	str	r1, [r7, #36]	; 0x24
 8006f8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f92:	b2d2      	uxtb	r2, r2
 8006f94:	701a      	strb	r2, [r3, #0]
 8006f96:	6a3b      	ldr	r3, [r7, #32]
 8006f98:	09db      	lsrs	r3, r3, #7
 8006f9a:	623b      	str	r3, [r7, #32]
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	2b7f      	cmp	r3, #127	; 0x7f
 8006fa0:	d8f0      	bhi.n	8006f84 <SEGGER_SYSVIEW_Start+0x98>
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	1c5a      	adds	r2, r3, #1
 8006fa6:	627a      	str	r2, [r7, #36]	; 0x24
 8006fa8:	6a3a      	ldr	r2, [r7, #32]
 8006faa:	b2d2      	uxtb	r2, r2
 8006fac:	701a      	strb	r2, [r3, #0]
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	61fb      	str	r3, [r7, #28]
 8006fb6:	4b28      	ldr	r3, [pc, #160]	; (8007058 <SEGGER_SYSVIEW_Start+0x16c>)
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	61bb      	str	r3, [r7, #24]
 8006fbc:	e00b      	b.n	8006fd6 <SEGGER_SYSVIEW_Start+0xea>
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	1c59      	adds	r1, r3, #1
 8006fc6:	61f9      	str	r1, [r7, #28]
 8006fc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fcc:	b2d2      	uxtb	r2, r2
 8006fce:	701a      	strb	r2, [r3, #0]
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	09db      	lsrs	r3, r3, #7
 8006fd4:	61bb      	str	r3, [r7, #24]
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	2b7f      	cmp	r3, #127	; 0x7f
 8006fda:	d8f0      	bhi.n	8006fbe <SEGGER_SYSVIEW_Start+0xd2>
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	1c5a      	adds	r2, r3, #1
 8006fe0:	61fa      	str	r2, [r7, #28]
 8006fe2:	69ba      	ldr	r2, [r7, #24]
 8006fe4:	b2d2      	uxtb	r2, r2
 8006fe6:	701a      	strb	r2, [r3, #0]
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	617b      	str	r3, [r7, #20]
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	613b      	str	r3, [r7, #16]
 8006ff4:	e00b      	b.n	800700e <SEGGER_SYSVIEW_Start+0x122>
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	1c59      	adds	r1, r3, #1
 8006ffe:	6179      	str	r1, [r7, #20]
 8007000:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007004:	b2d2      	uxtb	r2, r2
 8007006:	701a      	strb	r2, [r3, #0]
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	09db      	lsrs	r3, r3, #7
 800700c:	613b      	str	r3, [r7, #16]
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	2b7f      	cmp	r3, #127	; 0x7f
 8007012:	d8f0      	bhi.n	8006ff6 <SEGGER_SYSVIEW_Start+0x10a>
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	1c5a      	adds	r2, r3, #1
 8007018:	617a      	str	r2, [r7, #20]
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	b2d2      	uxtb	r2, r2
 800701e:	701a      	strb	r2, [r3, #0]
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007024:	2218      	movs	r2, #24
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f7ff f81f 	bl	800606c <_SendPacket>
      RECORD_END();
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007034:	4b08      	ldr	r3, [pc, #32]	; (8007058 <SEGGER_SYSVIEW_Start+0x16c>)
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	2b00      	cmp	r3, #0
 800703a:	d002      	beq.n	8007042 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800703c:	4b06      	ldr	r3, [pc, #24]	; (8007058 <SEGGER_SYSVIEW_Start+0x16c>)
 800703e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007040:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8007042:	f000 f9eb 	bl	800741c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007046:	f000 f9b1 	bl	80073ac <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800704a:	f000 fc83 	bl	8007954 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800704e:	bf00      	nop
 8007050:	3730      	adds	r7, #48	; 0x30
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	200143a8 	.word	0x200143a8
 800705c:	08007d3c 	.word	0x08007d3c
 8007060:	200143d8 	.word	0x200143d8

08007064 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800706a:	f3ef 8311 	mrs	r3, BASEPRI
 800706e:	f04f 0120 	mov.w	r1, #32
 8007072:	f381 8811 	msr	BASEPRI, r1
 8007076:	607b      	str	r3, [r7, #4]
 8007078:	480b      	ldr	r0, [pc, #44]	; (80070a8 <SEGGER_SYSVIEW_Stop+0x44>)
 800707a:	f7fe ff06 	bl	8005e8a <_PreparePacket>
 800707e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8007080:	4b0a      	ldr	r3, [pc, #40]	; (80070ac <SEGGER_SYSVIEW_Stop+0x48>)
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d007      	beq.n	8007098 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8007088:	220b      	movs	r2, #11
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	6838      	ldr	r0, [r7, #0]
 800708e:	f7fe ffed 	bl	800606c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8007092:	4b06      	ldr	r3, [pc, #24]	; (80070ac <SEGGER_SYSVIEW_Stop+0x48>)
 8007094:	2200      	movs	r2, #0
 8007096:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f383 8811 	msr	BASEPRI, r3
}
 800709e:	bf00      	nop
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	200143d8 	.word	0x200143d8
 80070ac:	200143a8 	.word	0x200143a8

080070b0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b08c      	sub	sp, #48	; 0x30
 80070b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80070b6:	f3ef 8311 	mrs	r3, BASEPRI
 80070ba:	f04f 0120 	mov.w	r1, #32
 80070be:	f381 8811 	msr	BASEPRI, r1
 80070c2:	60fb      	str	r3, [r7, #12]
 80070c4:	4845      	ldr	r0, [pc, #276]	; (80071dc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80070c6:	f7fe fee0 	bl	8005e8a <_PreparePacket>
 80070ca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070d4:	4b42      	ldr	r3, [pc, #264]	; (80071e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80070da:	e00b      	b.n	80070f4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80070dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e2:	1c59      	adds	r1, r3, #1
 80070e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80070e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070ea:	b2d2      	uxtb	r2, r2
 80070ec:	701a      	strb	r2, [r3, #0]
 80070ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f0:	09db      	lsrs	r3, r3, #7
 80070f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80070f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f6:	2b7f      	cmp	r3, #127	; 0x7f
 80070f8:	d8f0      	bhi.n	80070dc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80070fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fc:	1c5a      	adds	r2, r3, #1
 80070fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007102:	b2d2      	uxtb	r2, r2
 8007104:	701a      	strb	r2, [r3, #0]
 8007106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007108:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	627b      	str	r3, [r7, #36]	; 0x24
 800710e:	4b34      	ldr	r3, [pc, #208]	; (80071e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	623b      	str	r3, [r7, #32]
 8007114:	e00b      	b.n	800712e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	b2da      	uxtb	r2, r3
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	1c59      	adds	r1, r3, #1
 800711e:	6279      	str	r1, [r7, #36]	; 0x24
 8007120:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007124:	b2d2      	uxtb	r2, r2
 8007126:	701a      	strb	r2, [r3, #0]
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	09db      	lsrs	r3, r3, #7
 800712c:	623b      	str	r3, [r7, #32]
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	2b7f      	cmp	r3, #127	; 0x7f
 8007132:	d8f0      	bhi.n	8007116 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007136:	1c5a      	adds	r2, r3, #1
 8007138:	627a      	str	r2, [r7, #36]	; 0x24
 800713a:	6a3a      	ldr	r2, [r7, #32]
 800713c:	b2d2      	uxtb	r2, r2
 800713e:	701a      	strb	r2, [r3, #0]
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	61fb      	str	r3, [r7, #28]
 8007148:	4b25      	ldr	r3, [pc, #148]	; (80071e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	61bb      	str	r3, [r7, #24]
 800714e:	e00b      	b.n	8007168 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	b2da      	uxtb	r2, r3
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	1c59      	adds	r1, r3, #1
 8007158:	61f9      	str	r1, [r7, #28]
 800715a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800715e:	b2d2      	uxtb	r2, r2
 8007160:	701a      	strb	r2, [r3, #0]
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	09db      	lsrs	r3, r3, #7
 8007166:	61bb      	str	r3, [r7, #24]
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	2b7f      	cmp	r3, #127	; 0x7f
 800716c:	d8f0      	bhi.n	8007150 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	61fa      	str	r2, [r7, #28]
 8007174:	69ba      	ldr	r2, [r7, #24]
 8007176:	b2d2      	uxtb	r2, r2
 8007178:	701a      	strb	r2, [r3, #0]
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	617b      	str	r3, [r7, #20]
 8007182:	2300      	movs	r3, #0
 8007184:	613b      	str	r3, [r7, #16]
 8007186:	e00b      	b.n	80071a0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	b2da      	uxtb	r2, r3
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	1c59      	adds	r1, r3, #1
 8007190:	6179      	str	r1, [r7, #20]
 8007192:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007196:	b2d2      	uxtb	r2, r2
 8007198:	701a      	strb	r2, [r3, #0]
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	09db      	lsrs	r3, r3, #7
 800719e:	613b      	str	r3, [r7, #16]
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	2b7f      	cmp	r3, #127	; 0x7f
 80071a4:	d8f0      	bhi.n	8007188 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	1c5a      	adds	r2, r3, #1
 80071aa:	617a      	str	r2, [r7, #20]
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	b2d2      	uxtb	r2, r2
 80071b0:	701a      	strb	r2, [r3, #0]
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80071b6:	2218      	movs	r2, #24
 80071b8:	6879      	ldr	r1, [r7, #4]
 80071ba:	68b8      	ldr	r0, [r7, #8]
 80071bc:	f7fe ff56 	bl	800606c <_SendPacket>
  RECORD_END();
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80071c6:	4b06      	ldr	r3, [pc, #24]	; (80071e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80071c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d002      	beq.n	80071d4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80071ce:	4b04      	ldr	r3, [pc, #16]	; (80071e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80071d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d2:	4798      	blx	r3
  }
}
 80071d4:	bf00      	nop
 80071d6:	3730      	adds	r7, #48	; 0x30
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	200143d8 	.word	0x200143d8
 80071e0:	200143a8 	.word	0x200143a8

080071e4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b092      	sub	sp, #72	; 0x48
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80071ec:	f3ef 8311 	mrs	r3, BASEPRI
 80071f0:	f04f 0120 	mov.w	r1, #32
 80071f4:	f381 8811 	msr	BASEPRI, r1
 80071f8:	617b      	str	r3, [r7, #20]
 80071fa:	486a      	ldr	r0, [pc, #424]	; (80073a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80071fc:	f7fe fe45 	bl	8005e8a <_PreparePacket>
 8007200:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	647b      	str	r3, [r7, #68]	; 0x44
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	4b66      	ldr	r3, [pc, #408]	; (80073a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	643b      	str	r3, [r7, #64]	; 0x40
 8007216:	e00b      	b.n	8007230 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800721a:	b2da      	uxtb	r2, r3
 800721c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800721e:	1c59      	adds	r1, r3, #1
 8007220:	6479      	str	r1, [r7, #68]	; 0x44
 8007222:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007226:	b2d2      	uxtb	r2, r2
 8007228:	701a      	strb	r2, [r3, #0]
 800722a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800722c:	09db      	lsrs	r3, r3, #7
 800722e:	643b      	str	r3, [r7, #64]	; 0x40
 8007230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007232:	2b7f      	cmp	r3, #127	; 0x7f
 8007234:	d8f0      	bhi.n	8007218 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007238:	1c5a      	adds	r2, r3, #1
 800723a:	647a      	str	r2, [r7, #68]	; 0x44
 800723c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800723e:	b2d2      	uxtb	r2, r2
 8007240:	701a      	strb	r2, [r3, #0]
 8007242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007244:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	63fb      	str	r3, [r7, #60]	; 0x3c
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007250:	e00b      	b.n	800726a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8007252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007254:	b2da      	uxtb	r2, r3
 8007256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007258:	1c59      	adds	r1, r3, #1
 800725a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800725c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007260:	b2d2      	uxtb	r2, r2
 8007262:	701a      	strb	r2, [r3, #0]
 8007264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007266:	09db      	lsrs	r3, r3, #7
 8007268:	63bb      	str	r3, [r7, #56]	; 0x38
 800726a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726c:	2b7f      	cmp	r3, #127	; 0x7f
 800726e:	d8f0      	bhi.n	8007252 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007276:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007278:	b2d2      	uxtb	r2, r2
 800727a:	701a      	strb	r2, [r3, #0]
 800727c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800727e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	2220      	movs	r2, #32
 8007286:	4619      	mov	r1, r3
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f7fe fdb1 	bl	8005df0 <_EncodeStr>
 800728e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007290:	2209      	movs	r2, #9
 8007292:	68f9      	ldr	r1, [r7, #12]
 8007294:	6938      	ldr	r0, [r7, #16]
 8007296:	f7fe fee9 	bl	800606c <_SendPacket>
  //
  pPayload = pPayloadStart;
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	637b      	str	r3, [r7, #52]	; 0x34
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	4b40      	ldr	r3, [pc, #256]	; (80073a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	633b      	str	r3, [r7, #48]	; 0x30
 80072ae:	e00b      	b.n	80072c8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80072b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b2:	b2da      	uxtb	r2, r3
 80072b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b6:	1c59      	adds	r1, r3, #1
 80072b8:	6379      	str	r1, [r7, #52]	; 0x34
 80072ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072be:	b2d2      	uxtb	r2, r2
 80072c0:	701a      	strb	r2, [r3, #0]
 80072c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c4:	09db      	lsrs	r3, r3, #7
 80072c6:	633b      	str	r3, [r7, #48]	; 0x30
 80072c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ca:	2b7f      	cmp	r3, #127	; 0x7f
 80072cc:	d8f0      	bhi.n	80072b0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80072ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	637a      	str	r2, [r7, #52]	; 0x34
 80072d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072d6:	b2d2      	uxtb	r2, r2
 80072d8:	701a      	strb	r2, [r3, #0]
 80072da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80072e8:	e00b      	b.n	8007302 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80072ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ec:	b2da      	uxtb	r2, r3
 80072ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f0:	1c59      	adds	r1, r3, #1
 80072f2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80072f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072f8:	b2d2      	uxtb	r2, r2
 80072fa:	701a      	strb	r2, [r3, #0]
 80072fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fe:	09db      	lsrs	r3, r3, #7
 8007300:	62bb      	str	r3, [r7, #40]	; 0x28
 8007302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007304:	2b7f      	cmp	r3, #127	; 0x7f
 8007306:	d8f0      	bhi.n	80072ea <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730a:	1c5a      	adds	r2, r3, #1
 800730c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800730e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007310:	b2d2      	uxtb	r2, r2
 8007312:	701a      	strb	r2, [r3, #0]
 8007314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007316:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	627b      	str	r3, [r7, #36]	; 0x24
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	623b      	str	r3, [r7, #32]
 8007322:	e00b      	b.n	800733c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	b2da      	uxtb	r2, r3
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	1c59      	adds	r1, r3, #1
 800732c:	6279      	str	r1, [r7, #36]	; 0x24
 800732e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007332:	b2d2      	uxtb	r2, r2
 8007334:	701a      	strb	r2, [r3, #0]
 8007336:	6a3b      	ldr	r3, [r7, #32]
 8007338:	09db      	lsrs	r3, r3, #7
 800733a:	623b      	str	r3, [r7, #32]
 800733c:	6a3b      	ldr	r3, [r7, #32]
 800733e:	2b7f      	cmp	r3, #127	; 0x7f
 8007340:	d8f0      	bhi.n	8007324 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8007342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007344:	1c5a      	adds	r2, r3, #1
 8007346:	627a      	str	r2, [r7, #36]	; 0x24
 8007348:	6a3a      	ldr	r2, [r7, #32]
 800734a:	b2d2      	uxtb	r2, r2
 800734c:	701a      	strb	r2, [r3, #0]
 800734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007350:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	61fb      	str	r3, [r7, #28]
 8007356:	2300      	movs	r3, #0
 8007358:	61bb      	str	r3, [r7, #24]
 800735a:	e00b      	b.n	8007374 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	b2da      	uxtb	r2, r3
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	1c59      	adds	r1, r3, #1
 8007364:	61f9      	str	r1, [r7, #28]
 8007366:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800736a:	b2d2      	uxtb	r2, r2
 800736c:	701a      	strb	r2, [r3, #0]
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	09db      	lsrs	r3, r3, #7
 8007372:	61bb      	str	r3, [r7, #24]
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	2b7f      	cmp	r3, #127	; 0x7f
 8007378:	d8f0      	bhi.n	800735c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	1c5a      	adds	r2, r3, #1
 800737e:	61fa      	str	r2, [r7, #28]
 8007380:	69ba      	ldr	r2, [r7, #24]
 8007382:	b2d2      	uxtb	r2, r2
 8007384:	701a      	strb	r2, [r3, #0]
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800738a:	2215      	movs	r2, #21
 800738c:	68f9      	ldr	r1, [r7, #12]
 800738e:	6938      	ldr	r0, [r7, #16]
 8007390:	f7fe fe6c 	bl	800606c <_SendPacket>
  RECORD_END();
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f383 8811 	msr	BASEPRI, r3
}
 800739a:	bf00      	nop
 800739c:	3748      	adds	r7, #72	; 0x48
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	200143d8 	.word	0x200143d8
 80073a8:	200143a8 	.word	0x200143a8

080073ac <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80073ac:	b580      	push	{r7, lr}
 80073ae:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80073b0:	4b07      	ldr	r3, [pc, #28]	; (80073d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80073b2:	6a1b      	ldr	r3, [r3, #32]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d008      	beq.n	80073ca <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80073b8:	4b05      	ldr	r3, [pc, #20]	; (80073d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80073ba:	6a1b      	ldr	r3, [r3, #32]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80073c2:	4b03      	ldr	r3, [pc, #12]	; (80073d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	4798      	blx	r3
  }
}
 80073ca:	bf00      	nop
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	200143a8 	.word	0x200143a8

080073d4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80073dc:	f3ef 8311 	mrs	r3, BASEPRI
 80073e0:	f04f 0120 	mov.w	r1, #32
 80073e4:	f381 8811 	msr	BASEPRI, r1
 80073e8:	617b      	str	r3, [r7, #20]
 80073ea:	480b      	ldr	r0, [pc, #44]	; (8007418 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80073ec:	f7fe fd4d 	bl	8005e8a <_PreparePacket>
 80073f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80073f2:	2280      	movs	r2, #128	; 0x80
 80073f4:	6879      	ldr	r1, [r7, #4]
 80073f6:	6938      	ldr	r0, [r7, #16]
 80073f8:	f7fe fcfa 	bl	8005df0 <_EncodeStr>
 80073fc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80073fe:	220e      	movs	r2, #14
 8007400:	68f9      	ldr	r1, [r7, #12]
 8007402:	6938      	ldr	r0, [r7, #16]
 8007404:	f7fe fe32 	bl	800606c <_SendPacket>
  RECORD_END();
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	f383 8811 	msr	BASEPRI, r3
}
 800740e:	bf00      	nop
 8007410:	3718      	adds	r7, #24
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	200143d8 	.word	0x200143d8

0800741c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800741c:	b590      	push	{r4, r7, lr}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007422:	4b15      	ldr	r3, [pc, #84]	; (8007478 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d01a      	beq.n	8007460 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800742a:	4b13      	ldr	r3, [pc, #76]	; (8007478 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d015      	beq.n	8007460 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007434:	4b10      	ldr	r3, [pc, #64]	; (8007478 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007436:	6a1b      	ldr	r3, [r3, #32]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4798      	blx	r3
 800743c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007440:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007442:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007446:	f04f 0200 	mov.w	r2, #0
 800744a:	f04f 0300 	mov.w	r3, #0
 800744e:	000a      	movs	r2, r1
 8007450:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007452:	4613      	mov	r3, r2
 8007454:	461a      	mov	r2, r3
 8007456:	4621      	mov	r1, r4
 8007458:	200d      	movs	r0, #13
 800745a:	f7ff fb37 	bl	8006acc <SEGGER_SYSVIEW_RecordU32x2>
 800745e:	e006      	b.n	800746e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007460:	4b06      	ldr	r3, [pc, #24]	; (800747c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4619      	mov	r1, r3
 8007466:	200c      	movs	r0, #12
 8007468:	f7ff faf4 	bl	8006a54 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800746c:	bf00      	nop
 800746e:	bf00      	nop
 8007470:	370c      	adds	r7, #12
 8007472:	46bd      	mov	sp, r7
 8007474:	bd90      	pop	{r4, r7, pc}
 8007476:	bf00      	nop
 8007478:	200143a8 	.word	0x200143a8
 800747c:	e0001004 	.word	0xe0001004

08007480 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007486:	f3ef 8311 	mrs	r3, BASEPRI
 800748a:	f04f 0120 	mov.w	r1, #32
 800748e:	f381 8811 	msr	BASEPRI, r1
 8007492:	60fb      	str	r3, [r7, #12]
 8007494:	4819      	ldr	r0, [pc, #100]	; (80074fc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007496:	f7fe fcf8 	bl	8005e8a <_PreparePacket>
 800749a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80074a0:	4b17      	ldr	r3, [pc, #92]	; (8007500 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	617b      	str	r3, [r7, #20]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	613b      	str	r3, [r7, #16]
 80074b2:	e00b      	b.n	80074cc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	1c59      	adds	r1, r3, #1
 80074bc:	6179      	str	r1, [r7, #20]
 80074be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074c2:	b2d2      	uxtb	r2, r2
 80074c4:	701a      	strb	r2, [r3, #0]
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	09db      	lsrs	r3, r3, #7
 80074ca:	613b      	str	r3, [r7, #16]
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	2b7f      	cmp	r3, #127	; 0x7f
 80074d0:	d8f0      	bhi.n	80074b4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	1c5a      	adds	r2, r3, #1
 80074d6:	617a      	str	r2, [r7, #20]
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	b2d2      	uxtb	r2, r2
 80074dc:	701a      	strb	r2, [r3, #0]
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80074e2:	2202      	movs	r2, #2
 80074e4:	6879      	ldr	r1, [r7, #4]
 80074e6:	68b8      	ldr	r0, [r7, #8]
 80074e8:	f7fe fdc0 	bl	800606c <_SendPacket>
  RECORD_END();
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f383 8811 	msr	BASEPRI, r3
}
 80074f2:	bf00      	nop
 80074f4:	3718      	adds	r7, #24
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	200143d8 	.word	0x200143d8
 8007500:	e000ed04 	.word	0xe000ed04

08007504 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800750a:	f3ef 8311 	mrs	r3, BASEPRI
 800750e:	f04f 0120 	mov.w	r1, #32
 8007512:	f381 8811 	msr	BASEPRI, r1
 8007516:	607b      	str	r3, [r7, #4]
 8007518:	4807      	ldr	r0, [pc, #28]	; (8007538 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800751a:	f7fe fcb6 	bl	8005e8a <_PreparePacket>
 800751e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007520:	2203      	movs	r2, #3
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	6838      	ldr	r0, [r7, #0]
 8007526:	f7fe fda1 	bl	800606c <_SendPacket>
  RECORD_END();
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f383 8811 	msr	BASEPRI, r3
}
 8007530:	bf00      	nop
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	200143d8 	.word	0x200143d8

0800753c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007542:	f3ef 8311 	mrs	r3, BASEPRI
 8007546:	f04f 0120 	mov.w	r1, #32
 800754a:	f381 8811 	msr	BASEPRI, r1
 800754e:	607b      	str	r3, [r7, #4]
 8007550:	4807      	ldr	r0, [pc, #28]	; (8007570 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007552:	f7fe fc9a 	bl	8005e8a <_PreparePacket>
 8007556:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007558:	2212      	movs	r2, #18
 800755a:	6839      	ldr	r1, [r7, #0]
 800755c:	6838      	ldr	r0, [r7, #0]
 800755e:	f7fe fd85 	bl	800606c <_SendPacket>
  RECORD_END();
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f383 8811 	msr	BASEPRI, r3
}
 8007568:	bf00      	nop
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	200143d8 	.word	0x200143d8

08007574 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800757a:	f3ef 8311 	mrs	r3, BASEPRI
 800757e:	f04f 0120 	mov.w	r1, #32
 8007582:	f381 8811 	msr	BASEPRI, r1
 8007586:	607b      	str	r3, [r7, #4]
 8007588:	4807      	ldr	r0, [pc, #28]	; (80075a8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800758a:	f7fe fc7e 	bl	8005e8a <_PreparePacket>
 800758e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007590:	2211      	movs	r2, #17
 8007592:	6839      	ldr	r1, [r7, #0]
 8007594:	6838      	ldr	r0, [r7, #0]
 8007596:	f7fe fd69 	bl	800606c <_SendPacket>
  RECORD_END();
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f383 8811 	msr	BASEPRI, r3
}
 80075a0:	bf00      	nop
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	200143d8 	.word	0x200143d8

080075ac <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b088      	sub	sp, #32
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80075b4:	f3ef 8311 	mrs	r3, BASEPRI
 80075b8:	f04f 0120 	mov.w	r1, #32
 80075bc:	f381 8811 	msr	BASEPRI, r1
 80075c0:	617b      	str	r3, [r7, #20]
 80075c2:	4819      	ldr	r0, [pc, #100]	; (8007628 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80075c4:	f7fe fc61 	bl	8005e8a <_PreparePacket>
 80075c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80075ce:	4b17      	ldr	r3, [pc, #92]	; (800762c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	61fb      	str	r3, [r7, #28]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	61bb      	str	r3, [r7, #24]
 80075e0:	e00b      	b.n	80075fa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	1c59      	adds	r1, r3, #1
 80075ea:	61f9      	str	r1, [r7, #28]
 80075ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075f0:	b2d2      	uxtb	r2, r2
 80075f2:	701a      	strb	r2, [r3, #0]
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	09db      	lsrs	r3, r3, #7
 80075f8:	61bb      	str	r3, [r7, #24]
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	2b7f      	cmp	r3, #127	; 0x7f
 80075fe:	d8f0      	bhi.n	80075e2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	1c5a      	adds	r2, r3, #1
 8007604:	61fa      	str	r2, [r7, #28]
 8007606:	69ba      	ldr	r2, [r7, #24]
 8007608:	b2d2      	uxtb	r2, r2
 800760a:	701a      	strb	r2, [r3, #0]
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007610:	2208      	movs	r2, #8
 8007612:	68f9      	ldr	r1, [r7, #12]
 8007614:	6938      	ldr	r0, [r7, #16]
 8007616:	f7fe fd29 	bl	800606c <_SendPacket>
  RECORD_END();
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	f383 8811 	msr	BASEPRI, r3
}
 8007620:	bf00      	nop
 8007622:	3720      	adds	r7, #32
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	200143d8 	.word	0x200143d8
 800762c:	200143a8 	.word	0x200143a8

08007630 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007630:	b580      	push	{r7, lr}
 8007632:	b088      	sub	sp, #32
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007638:	f3ef 8311 	mrs	r3, BASEPRI
 800763c:	f04f 0120 	mov.w	r1, #32
 8007640:	f381 8811 	msr	BASEPRI, r1
 8007644:	617b      	str	r3, [r7, #20]
 8007646:	4819      	ldr	r0, [pc, #100]	; (80076ac <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007648:	f7fe fc1f 	bl	8005e8a <_PreparePacket>
 800764c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007652:	4b17      	ldr	r3, [pc, #92]	; (80076b0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	61fb      	str	r3, [r7, #28]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	61bb      	str	r3, [r7, #24]
 8007664:	e00b      	b.n	800767e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	b2da      	uxtb	r2, r3
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	1c59      	adds	r1, r3, #1
 800766e:	61f9      	str	r1, [r7, #28]
 8007670:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007674:	b2d2      	uxtb	r2, r2
 8007676:	701a      	strb	r2, [r3, #0]
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	09db      	lsrs	r3, r3, #7
 800767c:	61bb      	str	r3, [r7, #24]
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	2b7f      	cmp	r3, #127	; 0x7f
 8007682:	d8f0      	bhi.n	8007666 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	1c5a      	adds	r2, r3, #1
 8007688:	61fa      	str	r2, [r7, #28]
 800768a:	69ba      	ldr	r2, [r7, #24]
 800768c:	b2d2      	uxtb	r2, r2
 800768e:	701a      	strb	r2, [r3, #0]
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007694:	2204      	movs	r2, #4
 8007696:	68f9      	ldr	r1, [r7, #12]
 8007698:	6938      	ldr	r0, [r7, #16]
 800769a:	f7fe fce7 	bl	800606c <_SendPacket>
  RECORD_END();
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	f383 8811 	msr	BASEPRI, r3
}
 80076a4:	bf00      	nop
 80076a6:	3720      	adds	r7, #32
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	200143d8 	.word	0x200143d8
 80076b0:	200143a8 	.word	0x200143a8

080076b4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b088      	sub	sp, #32
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80076bc:	f3ef 8311 	mrs	r3, BASEPRI
 80076c0:	f04f 0120 	mov.w	r1, #32
 80076c4:	f381 8811 	msr	BASEPRI, r1
 80076c8:	617b      	str	r3, [r7, #20]
 80076ca:	4819      	ldr	r0, [pc, #100]	; (8007730 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80076cc:	f7fe fbdd 	bl	8005e8a <_PreparePacket>
 80076d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80076d6:	4b17      	ldr	r3, [pc, #92]	; (8007734 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	61fb      	str	r3, [r7, #28]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	61bb      	str	r3, [r7, #24]
 80076e8:	e00b      	b.n	8007702 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	b2da      	uxtb	r2, r3
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	1c59      	adds	r1, r3, #1
 80076f2:	61f9      	str	r1, [r7, #28]
 80076f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076f8:	b2d2      	uxtb	r2, r2
 80076fa:	701a      	strb	r2, [r3, #0]
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	09db      	lsrs	r3, r3, #7
 8007700:	61bb      	str	r3, [r7, #24]
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	2b7f      	cmp	r3, #127	; 0x7f
 8007706:	d8f0      	bhi.n	80076ea <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	1c5a      	adds	r2, r3, #1
 800770c:	61fa      	str	r2, [r7, #28]
 800770e:	69ba      	ldr	r2, [r7, #24]
 8007710:	b2d2      	uxtb	r2, r2
 8007712:	701a      	strb	r2, [r3, #0]
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007718:	2206      	movs	r2, #6
 800771a:	68f9      	ldr	r1, [r7, #12]
 800771c:	6938      	ldr	r0, [r7, #16]
 800771e:	f7fe fca5 	bl	800606c <_SendPacket>
  RECORD_END();
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	f383 8811 	msr	BASEPRI, r3
}
 8007728:	bf00      	nop
 800772a:	3720      	adds	r7, #32
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	200143d8 	.word	0x200143d8
 8007734:	200143a8 	.word	0x200143a8

08007738 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007738:	b580      	push	{r7, lr}
 800773a:	b08a      	sub	sp, #40	; 0x28
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007742:	f3ef 8311 	mrs	r3, BASEPRI
 8007746:	f04f 0120 	mov.w	r1, #32
 800774a:	f381 8811 	msr	BASEPRI, r1
 800774e:	617b      	str	r3, [r7, #20]
 8007750:	4827      	ldr	r0, [pc, #156]	; (80077f0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007752:	f7fe fb9a 	bl	8005e8a <_PreparePacket>
 8007756:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800775c:	4b25      	ldr	r3, [pc, #148]	; (80077f4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	627b      	str	r3, [r7, #36]	; 0x24
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	623b      	str	r3, [r7, #32]
 800776e:	e00b      	b.n	8007788 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	b2da      	uxtb	r2, r3
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007776:	1c59      	adds	r1, r3, #1
 8007778:	6279      	str	r1, [r7, #36]	; 0x24
 800777a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800777e:	b2d2      	uxtb	r2, r2
 8007780:	701a      	strb	r2, [r3, #0]
 8007782:	6a3b      	ldr	r3, [r7, #32]
 8007784:	09db      	lsrs	r3, r3, #7
 8007786:	623b      	str	r3, [r7, #32]
 8007788:	6a3b      	ldr	r3, [r7, #32]
 800778a:	2b7f      	cmp	r3, #127	; 0x7f
 800778c:	d8f0      	bhi.n	8007770 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	1c5a      	adds	r2, r3, #1
 8007792:	627a      	str	r2, [r7, #36]	; 0x24
 8007794:	6a3a      	ldr	r2, [r7, #32]
 8007796:	b2d2      	uxtb	r2, r2
 8007798:	701a      	strb	r2, [r3, #0]
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	61fb      	str	r3, [r7, #28]
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	61bb      	str	r3, [r7, #24]
 80077a6:	e00b      	b.n	80077c0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	1c59      	adds	r1, r3, #1
 80077b0:	61f9      	str	r1, [r7, #28]
 80077b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077b6:	b2d2      	uxtb	r2, r2
 80077b8:	701a      	strb	r2, [r3, #0]
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	09db      	lsrs	r3, r3, #7
 80077be:	61bb      	str	r3, [r7, #24]
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	2b7f      	cmp	r3, #127	; 0x7f
 80077c4:	d8f0      	bhi.n	80077a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	1c5a      	adds	r2, r3, #1
 80077ca:	61fa      	str	r2, [r7, #28]
 80077cc:	69ba      	ldr	r2, [r7, #24]
 80077ce:	b2d2      	uxtb	r2, r2
 80077d0:	701a      	strb	r2, [r3, #0]
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80077d6:	2207      	movs	r2, #7
 80077d8:	68f9      	ldr	r1, [r7, #12]
 80077da:	6938      	ldr	r0, [r7, #16]
 80077dc:	f7fe fc46 	bl	800606c <_SendPacket>
  RECORD_END();
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f383 8811 	msr	BASEPRI, r3
}
 80077e6:	bf00      	nop
 80077e8:	3728      	adds	r7, #40	; 0x28
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	200143d8 	.word	0x200143d8
 80077f4:	200143a8 	.word	0x200143a8

080077f8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007800:	4b04      	ldr	r3, [pc, #16]	; (8007814 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	1ad3      	subs	r3, r2, r3
}
 8007808:	4618      	mov	r0, r3
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr
 8007814:	200143a8 	.word	0x200143a8

08007818 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007818:	b580      	push	{r7, lr}
 800781a:	b08c      	sub	sp, #48	; 0x30
 800781c:	af00      	add	r7, sp, #0
 800781e:	4603      	mov	r3, r0
 8007820:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007822:	4b3b      	ldr	r3, [pc, #236]	; (8007910 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d06d      	beq.n	8007906 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800782a:	4b39      	ldr	r3, [pc, #228]	; (8007910 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007830:	2300      	movs	r3, #0
 8007832:	62bb      	str	r3, [r7, #40]	; 0x28
 8007834:	e008      	b.n	8007848 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800783c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783e:	2b00      	cmp	r3, #0
 8007840:	d007      	beq.n	8007852 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007844:	3301      	adds	r3, #1
 8007846:	62bb      	str	r3, [r7, #40]	; 0x28
 8007848:	79fb      	ldrb	r3, [r7, #7]
 800784a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800784c:	429a      	cmp	r2, r3
 800784e:	d3f2      	bcc.n	8007836 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007850:	e000      	b.n	8007854 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007852:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007856:	2b00      	cmp	r3, #0
 8007858:	d055      	beq.n	8007906 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800785a:	f3ef 8311 	mrs	r3, BASEPRI
 800785e:	f04f 0120 	mov.w	r1, #32
 8007862:	f381 8811 	msr	BASEPRI, r1
 8007866:	617b      	str	r3, [r7, #20]
 8007868:	482a      	ldr	r0, [pc, #168]	; (8007914 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800786a:	f7fe fb0e 	bl	8005e8a <_PreparePacket>
 800786e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	627b      	str	r3, [r7, #36]	; 0x24
 8007878:	79fb      	ldrb	r3, [r7, #7]
 800787a:	623b      	str	r3, [r7, #32]
 800787c:	e00b      	b.n	8007896 <SEGGER_SYSVIEW_SendModule+0x7e>
 800787e:	6a3b      	ldr	r3, [r7, #32]
 8007880:	b2da      	uxtb	r2, r3
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007884:	1c59      	adds	r1, r3, #1
 8007886:	6279      	str	r1, [r7, #36]	; 0x24
 8007888:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800788c:	b2d2      	uxtb	r2, r2
 800788e:	701a      	strb	r2, [r3, #0]
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	09db      	lsrs	r3, r3, #7
 8007894:	623b      	str	r3, [r7, #32]
 8007896:	6a3b      	ldr	r3, [r7, #32]
 8007898:	2b7f      	cmp	r3, #127	; 0x7f
 800789a:	d8f0      	bhi.n	800787e <SEGGER_SYSVIEW_SendModule+0x66>
 800789c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	627a      	str	r2, [r7, #36]	; 0x24
 80078a2:	6a3a      	ldr	r2, [r7, #32]
 80078a4:	b2d2      	uxtb	r2, r2
 80078a6:	701a      	strb	r2, [r3, #0]
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	61fb      	str	r3, [r7, #28]
 80078b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	61bb      	str	r3, [r7, #24]
 80078b6:	e00b      	b.n	80078d0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	1c59      	adds	r1, r3, #1
 80078c0:	61f9      	str	r1, [r7, #28]
 80078c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078c6:	b2d2      	uxtb	r2, r2
 80078c8:	701a      	strb	r2, [r3, #0]
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	09db      	lsrs	r3, r3, #7
 80078ce:	61bb      	str	r3, [r7, #24]
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	2b7f      	cmp	r3, #127	; 0x7f
 80078d4:	d8f0      	bhi.n	80078b8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	1c5a      	adds	r2, r3, #1
 80078da:	61fa      	str	r2, [r7, #28]
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	b2d2      	uxtb	r2, r2
 80078e0:	701a      	strb	r2, [r3, #0]
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80078e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2280      	movs	r2, #128	; 0x80
 80078ec:	4619      	mov	r1, r3
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f7fe fa7e 	bl	8005df0 <_EncodeStr>
 80078f4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80078f6:	2216      	movs	r2, #22
 80078f8:	68f9      	ldr	r1, [r7, #12]
 80078fa:	6938      	ldr	r0, [r7, #16]
 80078fc:	f7fe fbb6 	bl	800606c <_SendPacket>
      RECORD_END();
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007906:	bf00      	nop
 8007908:	3730      	adds	r7, #48	; 0x30
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	200143d0 	.word	0x200143d0
 8007914:	200143d8 	.word	0x200143d8

08007918 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800791e:	4b0c      	ldr	r3, [pc, #48]	; (8007950 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00f      	beq.n	8007946 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007926:	4b0a      	ldr	r3, [pc, #40]	; (8007950 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d002      	beq.n	800793a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1f2      	bne.n	800792c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007946:	bf00      	nop
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	200143d0 	.word	0x200143d0

08007954 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800795a:	f3ef 8311 	mrs	r3, BASEPRI
 800795e:	f04f 0120 	mov.w	r1, #32
 8007962:	f381 8811 	msr	BASEPRI, r1
 8007966:	60fb      	str	r3, [r7, #12]
 8007968:	4817      	ldr	r0, [pc, #92]	; (80079c8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800796a:	f7fe fa8e 	bl	8005e8a <_PreparePacket>
 800796e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	617b      	str	r3, [r7, #20]
 8007978:	4b14      	ldr	r3, [pc, #80]	; (80079cc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	613b      	str	r3, [r7, #16]
 800797e:	e00b      	b.n	8007998 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	b2da      	uxtb	r2, r3
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	1c59      	adds	r1, r3, #1
 8007988:	6179      	str	r1, [r7, #20]
 800798a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800798e:	b2d2      	uxtb	r2, r2
 8007990:	701a      	strb	r2, [r3, #0]
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	09db      	lsrs	r3, r3, #7
 8007996:	613b      	str	r3, [r7, #16]
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	2b7f      	cmp	r3, #127	; 0x7f
 800799c:	d8f0      	bhi.n	8007980 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	1c5a      	adds	r2, r3, #1
 80079a2:	617a      	str	r2, [r7, #20]
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	b2d2      	uxtb	r2, r2
 80079a8:	701a      	strb	r2, [r3, #0]
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80079ae:	221b      	movs	r2, #27
 80079b0:	6879      	ldr	r1, [r7, #4]
 80079b2:	68b8      	ldr	r0, [r7, #8]
 80079b4:	f7fe fb5a 	bl	800606c <_SendPacket>
  RECORD_END();
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f383 8811 	msr	BASEPRI, r3
}
 80079be:	bf00      	nop
 80079c0:	3718      	adds	r7, #24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	200143d8 	.word	0x200143d8
 80079cc:	200143d4 	.word	0x200143d4

080079d0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80079d0:	b40f      	push	{r0, r1, r2, r3}
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b082      	sub	sp, #8
 80079d6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80079d8:	f107 0314 	add.w	r3, r7, #20
 80079dc:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80079de:	1d3b      	adds	r3, r7, #4
 80079e0:	461a      	mov	r2, r3
 80079e2:	2100      	movs	r1, #0
 80079e4:	6938      	ldr	r0, [r7, #16]
 80079e6:	f7fe fdcb 	bl	8006580 <_VPrintTarget>
  va_end(ParamList);
}
 80079ea:	bf00      	nop
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079f4:	b004      	add	sp, #16
 80079f6:	4770      	bx	lr

080079f8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b08a      	sub	sp, #40	; 0x28
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007a00:	f3ef 8311 	mrs	r3, BASEPRI
 8007a04:	f04f 0120 	mov.w	r1, #32
 8007a08:	f381 8811 	msr	BASEPRI, r1
 8007a0c:	617b      	str	r3, [r7, #20]
 8007a0e:	4827      	ldr	r0, [pc, #156]	; (8007aac <SEGGER_SYSVIEW_Warn+0xb4>)
 8007a10:	f7fe fa3b 	bl	8005e8a <_PreparePacket>
 8007a14:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007a16:	2280      	movs	r2, #128	; 0x80
 8007a18:	6879      	ldr	r1, [r7, #4]
 8007a1a:	6938      	ldr	r0, [r7, #16]
 8007a1c:	f7fe f9e8 	bl	8005df0 <_EncodeStr>
 8007a20:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	627b      	str	r3, [r7, #36]	; 0x24
 8007a26:	2301      	movs	r3, #1
 8007a28:	623b      	str	r3, [r7, #32]
 8007a2a:	e00b      	b.n	8007a44 <SEGGER_SYSVIEW_Warn+0x4c>
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	b2da      	uxtb	r2, r3
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	1c59      	adds	r1, r3, #1
 8007a34:	6279      	str	r1, [r7, #36]	; 0x24
 8007a36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a3a:	b2d2      	uxtb	r2, r2
 8007a3c:	701a      	strb	r2, [r3, #0]
 8007a3e:	6a3b      	ldr	r3, [r7, #32]
 8007a40:	09db      	lsrs	r3, r3, #7
 8007a42:	623b      	str	r3, [r7, #32]
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	2b7f      	cmp	r3, #127	; 0x7f
 8007a48:	d8f0      	bhi.n	8007a2c <SEGGER_SYSVIEW_Warn+0x34>
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	1c5a      	adds	r2, r3, #1
 8007a4e:	627a      	str	r2, [r7, #36]	; 0x24
 8007a50:	6a3a      	ldr	r2, [r7, #32]
 8007a52:	b2d2      	uxtb	r2, r2
 8007a54:	701a      	strb	r2, [r3, #0]
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	61fb      	str	r3, [r7, #28]
 8007a5e:	2300      	movs	r3, #0
 8007a60:	61bb      	str	r3, [r7, #24]
 8007a62:	e00b      	b.n	8007a7c <SEGGER_SYSVIEW_Warn+0x84>
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	1c59      	adds	r1, r3, #1
 8007a6c:	61f9      	str	r1, [r7, #28]
 8007a6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a72:	b2d2      	uxtb	r2, r2
 8007a74:	701a      	strb	r2, [r3, #0]
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	09db      	lsrs	r3, r3, #7
 8007a7a:	61bb      	str	r3, [r7, #24]
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8007a80:	d8f0      	bhi.n	8007a64 <SEGGER_SYSVIEW_Warn+0x6c>
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	1c5a      	adds	r2, r3, #1
 8007a86:	61fa      	str	r2, [r7, #28]
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	b2d2      	uxtb	r2, r2
 8007a8c:	701a      	strb	r2, [r3, #0]
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007a92:	221a      	movs	r2, #26
 8007a94:	68f9      	ldr	r1, [r7, #12]
 8007a96:	6938      	ldr	r0, [r7, #16]
 8007a98:	f7fe fae8 	bl	800606c <_SendPacket>
  RECORD_END();
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	f383 8811 	msr	BASEPRI, r3
}
 8007aa2:	bf00      	nop
 8007aa4:	3728      	adds	r7, #40	; 0x28
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	200143d8 	.word	0x200143d8

08007ab0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007ab4:	4b13      	ldr	r3, [pc, #76]	; (8007b04 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007ab6:	7e1b      	ldrb	r3, [r3, #24]
 8007ab8:	4619      	mov	r1, r3
 8007aba:	4a13      	ldr	r2, [pc, #76]	; (8007b08 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007abc:	460b      	mov	r3, r1
 8007abe:	005b      	lsls	r3, r3, #1
 8007ac0:	440b      	add	r3, r1
 8007ac2:	00db      	lsls	r3, r3, #3
 8007ac4:	4413      	add	r3, r2
 8007ac6:	336c      	adds	r3, #108	; 0x6c
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	4b0e      	ldr	r3, [pc, #56]	; (8007b04 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007acc:	7e1b      	ldrb	r3, [r3, #24]
 8007ace:	4618      	mov	r0, r3
 8007ad0:	490d      	ldr	r1, [pc, #52]	; (8007b08 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	005b      	lsls	r3, r3, #1
 8007ad6:	4403      	add	r3, r0
 8007ad8:	00db      	lsls	r3, r3, #3
 8007ada:	440b      	add	r3, r1
 8007adc:	3370      	adds	r3, #112	; 0x70
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d00b      	beq.n	8007afc <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007ae4:	4b07      	ldr	r3, [pc, #28]	; (8007b04 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007ae6:	789b      	ldrb	r3, [r3, #2]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d107      	bne.n	8007afc <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007aec:	4b05      	ldr	r3, [pc, #20]	; (8007b04 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007aee:	2201      	movs	r2, #1
 8007af0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007af2:	f7fe f9d7 	bl	8005ea4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007af6:	4b03      	ldr	r3, [pc, #12]	; (8007b04 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007afc:	4b01      	ldr	r3, [pc, #4]	; (8007b04 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	200143a8 	.word	0x200143a8
 8007b08:	20012ee8 	.word	0x20012ee8

08007b0c <memcmp>:
 8007b0c:	b510      	push	{r4, lr}
 8007b0e:	3901      	subs	r1, #1
 8007b10:	4402      	add	r2, r0
 8007b12:	4290      	cmp	r0, r2
 8007b14:	d101      	bne.n	8007b1a <memcmp+0xe>
 8007b16:	2000      	movs	r0, #0
 8007b18:	e005      	b.n	8007b26 <memcmp+0x1a>
 8007b1a:	7803      	ldrb	r3, [r0, #0]
 8007b1c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007b20:	42a3      	cmp	r3, r4
 8007b22:	d001      	beq.n	8007b28 <memcmp+0x1c>
 8007b24:	1b18      	subs	r0, r3, r4
 8007b26:	bd10      	pop	{r4, pc}
 8007b28:	3001      	adds	r0, #1
 8007b2a:	e7f2      	b.n	8007b12 <memcmp+0x6>

08007b2c <memset>:
 8007b2c:	4402      	add	r2, r0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d100      	bne.n	8007b36 <memset+0xa>
 8007b34:	4770      	bx	lr
 8007b36:	f803 1b01 	strb.w	r1, [r3], #1
 8007b3a:	e7f9      	b.n	8007b30 <memset+0x4>

08007b3c <__libc_init_array>:
 8007b3c:	b570      	push	{r4, r5, r6, lr}
 8007b3e:	4d0d      	ldr	r5, [pc, #52]	; (8007b74 <__libc_init_array+0x38>)
 8007b40:	4c0d      	ldr	r4, [pc, #52]	; (8007b78 <__libc_init_array+0x3c>)
 8007b42:	1b64      	subs	r4, r4, r5
 8007b44:	10a4      	asrs	r4, r4, #2
 8007b46:	2600      	movs	r6, #0
 8007b48:	42a6      	cmp	r6, r4
 8007b4a:	d109      	bne.n	8007b60 <__libc_init_array+0x24>
 8007b4c:	4d0b      	ldr	r5, [pc, #44]	; (8007b7c <__libc_init_array+0x40>)
 8007b4e:	4c0c      	ldr	r4, [pc, #48]	; (8007b80 <__libc_init_array+0x44>)
 8007b50:	f000 f826 	bl	8007ba0 <_init>
 8007b54:	1b64      	subs	r4, r4, r5
 8007b56:	10a4      	asrs	r4, r4, #2
 8007b58:	2600      	movs	r6, #0
 8007b5a:	42a6      	cmp	r6, r4
 8007b5c:	d105      	bne.n	8007b6a <__libc_init_array+0x2e>
 8007b5e:	bd70      	pop	{r4, r5, r6, pc}
 8007b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b64:	4798      	blx	r3
 8007b66:	3601      	adds	r6, #1
 8007b68:	e7ee      	b.n	8007b48 <__libc_init_array+0xc>
 8007b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b6e:	4798      	blx	r3
 8007b70:	3601      	adds	r6, #1
 8007b72:	e7f2      	b.n	8007b5a <__libc_init_array+0x1e>
 8007b74:	08007d60 	.word	0x08007d60
 8007b78:	08007d60 	.word	0x08007d60
 8007b7c:	08007d60 	.word	0x08007d60
 8007b80:	08007d64 	.word	0x08007d64

08007b84 <memcpy>:
 8007b84:	440a      	add	r2, r1
 8007b86:	4291      	cmp	r1, r2
 8007b88:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b8c:	d100      	bne.n	8007b90 <memcpy+0xc>
 8007b8e:	4770      	bx	lr
 8007b90:	b510      	push	{r4, lr}
 8007b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b9a:	4291      	cmp	r1, r2
 8007b9c:	d1f9      	bne.n	8007b92 <memcpy+0xe>
 8007b9e:	bd10      	pop	{r4, pc}

08007ba0 <_init>:
 8007ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba2:	bf00      	nop
 8007ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ba6:	bc08      	pop	{r3}
 8007ba8:	469e      	mov	lr, r3
 8007baa:	4770      	bx	lr

08007bac <_fini>:
 8007bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bae:	bf00      	nop
 8007bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bb2:	bc08      	pop	{r3}
 8007bb4:	469e      	mov	lr, r3
 8007bb6:	4770      	bx	lr
