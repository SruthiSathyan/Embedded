
005LED_Delete_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007964  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08007af4  08007af4  00017af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cac  08007cac  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08007cac  08007cac  00017cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cb4  08007cb4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cb4  08007cb4  00017cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cb8  08007cb8  00017cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          000144a8  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200144c4  200144c4  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013d4f  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003179  00000000  00000000  00033dde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001360  00000000  00000000  00036f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000edf  00000000  00000000  000382b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023b3d  00000000  00000000  00039197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016604  00000000  00000000  0005ccd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d811e  00000000  00000000  000732d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000050d8  00000000  00000000  0014b3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000d7  00000000  00000000  001504d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007adc 	.word	0x08007adc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08007adc 	.word	0x08007adc

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ef0 	.word	0x20012ef0

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b970 	b.w	800055c <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9e08      	ldr	r6, [sp, #32]
 800029a:	460d      	mov	r5, r1
 800029c:	4604      	mov	r4, r0
 800029e:	460f      	mov	r7, r1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d14a      	bne.n	800033a <__udivmoddi4+0xa6>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4694      	mov	ip, r2
 80002a8:	d965      	bls.n	8000376 <__udivmoddi4+0xe2>
 80002aa:	fab2 f382 	clz	r3, r2
 80002ae:	b143      	cbz	r3, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002b4:	f1c3 0220 	rsb	r2, r3, #32
 80002b8:	409f      	lsls	r7, r3
 80002ba:	fa20 f202 	lsr.w	r2, r0, r2
 80002be:	4317      	orrs	r7, r2
 80002c0:	409c      	lsls	r4, r3
 80002c2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002c6:	fa1f f58c 	uxth.w	r5, ip
 80002ca:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ce:	0c22      	lsrs	r2, r4, #16
 80002d0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002d4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002d8:	fb01 f005 	mul.w	r0, r1, r5
 80002dc:	4290      	cmp	r0, r2
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x62>
 80002e0:	eb1c 0202 	adds.w	r2, ip, r2
 80002e4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002e8:	f080 811c 	bcs.w	8000524 <__udivmoddi4+0x290>
 80002ec:	4290      	cmp	r0, r2
 80002ee:	f240 8119 	bls.w	8000524 <__udivmoddi4+0x290>
 80002f2:	3902      	subs	r1, #2
 80002f4:	4462      	add	r2, ip
 80002f6:	1a12      	subs	r2, r2, r0
 80002f8:	b2a4      	uxth	r4, r4
 80002fa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002fe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000302:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000306:	fb00 f505 	mul.w	r5, r0, r5
 800030a:	42a5      	cmp	r5, r4
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x90>
 800030e:	eb1c 0404 	adds.w	r4, ip, r4
 8000312:	f100 32ff 	add.w	r2, r0, #4294967295
 8000316:	f080 8107 	bcs.w	8000528 <__udivmoddi4+0x294>
 800031a:	42a5      	cmp	r5, r4
 800031c:	f240 8104 	bls.w	8000528 <__udivmoddi4+0x294>
 8000320:	4464      	add	r4, ip
 8000322:	3802      	subs	r0, #2
 8000324:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000328:	1b64      	subs	r4, r4, r5
 800032a:	2100      	movs	r1, #0
 800032c:	b11e      	cbz	r6, 8000336 <__udivmoddi4+0xa2>
 800032e:	40dc      	lsrs	r4, r3
 8000330:	2300      	movs	r3, #0
 8000332:	e9c6 4300 	strd	r4, r3, [r6]
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0xbc>
 800033e:	2e00      	cmp	r6, #0
 8000340:	f000 80ed 	beq.w	800051e <__udivmoddi4+0x28a>
 8000344:	2100      	movs	r1, #0
 8000346:	e9c6 0500 	strd	r0, r5, [r6]
 800034a:	4608      	mov	r0, r1
 800034c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000350:	fab3 f183 	clz	r1, r3
 8000354:	2900      	cmp	r1, #0
 8000356:	d149      	bne.n	80003ec <__udivmoddi4+0x158>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d302      	bcc.n	8000362 <__udivmoddi4+0xce>
 800035c:	4282      	cmp	r2, r0
 800035e:	f200 80f8 	bhi.w	8000552 <__udivmoddi4+0x2be>
 8000362:	1a84      	subs	r4, r0, r2
 8000364:	eb65 0203 	sbc.w	r2, r5, r3
 8000368:	2001      	movs	r0, #1
 800036a:	4617      	mov	r7, r2
 800036c:	2e00      	cmp	r6, #0
 800036e:	d0e2      	beq.n	8000336 <__udivmoddi4+0xa2>
 8000370:	e9c6 4700 	strd	r4, r7, [r6]
 8000374:	e7df      	b.n	8000336 <__udivmoddi4+0xa2>
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xe6>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f382 	clz	r3, r2
 800037e:	2b00      	cmp	r3, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x210>
 8000384:	1a8a      	subs	r2, r1, r2
 8000386:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	2101      	movs	r1, #1
 8000390:	fbb2 f5f7 	udiv	r5, r2, r7
 8000394:	fb07 2015 	mls	r0, r7, r5, r2
 8000398:	0c22      	lsrs	r2, r4, #16
 800039a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800039e:	fb0e f005 	mul.w	r0, lr, r5
 80003a2:	4290      	cmp	r0, r2
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x124>
 80003a6:	eb1c 0202 	adds.w	r2, ip, r2
 80003aa:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x122>
 80003b0:	4290      	cmp	r0, r2
 80003b2:	f200 80cb 	bhi.w	800054c <__udivmoddi4+0x2b8>
 80003b6:	4645      	mov	r5, r8
 80003b8:	1a12      	subs	r2, r2, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb2 f0f7 	udiv	r0, r2, r7
 80003c0:	fb07 2210 	mls	r2, r7, r0, r2
 80003c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003c8:	fb0e fe00 	mul.w	lr, lr, r0
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x14e>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003d8:	d202      	bcs.n	80003e0 <__udivmoddi4+0x14c>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f200 80bb 	bhi.w	8000556 <__udivmoddi4+0x2c2>
 80003e0:	4610      	mov	r0, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ea:	e79f      	b.n	800032c <__udivmoddi4+0x98>
 80003ec:	f1c1 0720 	rsb	r7, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003fa:	fa05 f401 	lsl.w	r4, r5, r1
 80003fe:	fa20 f307 	lsr.w	r3, r0, r7
 8000402:	40fd      	lsrs	r5, r7
 8000404:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fbb5 f8f9 	udiv	r8, r5, r9
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	fb09 5518 	mls	r5, r9, r8, r5
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800041c:	fb08 f50e 	mul.w	r5, r8, lr
 8000420:	42a5      	cmp	r5, r4
 8000422:	fa02 f201 	lsl.w	r2, r2, r1
 8000426:	fa00 f001 	lsl.w	r0, r0, r1
 800042a:	d90b      	bls.n	8000444 <__udivmoddi4+0x1b0>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f108 3aff 	add.w	sl, r8, #4294967295
 8000434:	f080 8088 	bcs.w	8000548 <__udivmoddi4+0x2b4>
 8000438:	42a5      	cmp	r5, r4
 800043a:	f240 8085 	bls.w	8000548 <__udivmoddi4+0x2b4>
 800043e:	f1a8 0802 	sub.w	r8, r8, #2
 8000442:	4464      	add	r4, ip
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	b29d      	uxth	r5, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000454:	fb03 fe0e 	mul.w	lr, r3, lr
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1da>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f103 35ff 	add.w	r5, r3, #4294967295
 8000464:	d26c      	bcs.n	8000540 <__udivmoddi4+0x2ac>
 8000466:	45a6      	cmp	lr, r4
 8000468:	d96a      	bls.n	8000540 <__udivmoddi4+0x2ac>
 800046a:	3b02      	subs	r3, #2
 800046c:	4464      	add	r4, ip
 800046e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000472:	fba3 9502 	umull	r9, r5, r3, r2
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	42ac      	cmp	r4, r5
 800047c:	46c8      	mov	r8, r9
 800047e:	46ae      	mov	lr, r5
 8000480:	d356      	bcc.n	8000530 <__udivmoddi4+0x29c>
 8000482:	d053      	beq.n	800052c <__udivmoddi4+0x298>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x208>
 8000486:	ebb0 0208 	subs.w	r2, r0, r8
 800048a:	eb64 040e 	sbc.w	r4, r4, lr
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40ca      	lsrs	r2, r1
 8000494:	40cc      	lsrs	r4, r1
 8000496:	4317      	orrs	r7, r2
 8000498:	e9c6 7400 	strd	r7, r4, [r6]
 800049c:	4618      	mov	r0, r3
 800049e:	2100      	movs	r1, #0
 80004a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a4:	f1c3 0120 	rsb	r1, r3, #32
 80004a8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ac:	fa20 f201 	lsr.w	r2, r0, r1
 80004b0:	fa25 f101 	lsr.w	r1, r5, r1
 80004b4:	409d      	lsls	r5, r3
 80004b6:	432a      	orrs	r2, r5
 80004b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004bc:	fa1f fe8c 	uxth.w	lr, ip
 80004c0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004c4:	fb07 1510 	mls	r5, r7, r0, r1
 80004c8:	0c11      	lsrs	r1, r2, #16
 80004ca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ce:	fb00 f50e 	mul.w	r5, r0, lr
 80004d2:	428d      	cmp	r5, r1
 80004d4:	fa04 f403 	lsl.w	r4, r4, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x258>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e2:	d22f      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 80004e4:	428d      	cmp	r5, r1
 80004e6:	d92d      	bls.n	8000544 <__udivmoddi4+0x2b0>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4461      	add	r1, ip
 80004ec:	1b49      	subs	r1, r1, r5
 80004ee:	b292      	uxth	r2, r2
 80004f0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004f4:	fb07 1115 	mls	r1, r7, r5, r1
 80004f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fc:	fb05 f10e 	mul.w	r1, r5, lr
 8000500:	4291      	cmp	r1, r2
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x282>
 8000504:	eb1c 0202 	adds.w	r2, ip, r2
 8000508:	f105 38ff 	add.w	r8, r5, #4294967295
 800050c:	d216      	bcs.n	800053c <__udivmoddi4+0x2a8>
 800050e:	4291      	cmp	r1, r2
 8000510:	d914      	bls.n	800053c <__udivmoddi4+0x2a8>
 8000512:	3d02      	subs	r5, #2
 8000514:	4462      	add	r2, ip
 8000516:	1a52      	subs	r2, r2, r1
 8000518:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800051c:	e738      	b.n	8000390 <__udivmoddi4+0xfc>
 800051e:	4631      	mov	r1, r6
 8000520:	4630      	mov	r0, r6
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xa2>
 8000524:	4639      	mov	r1, r7
 8000526:	e6e6      	b.n	80002f6 <__udivmoddi4+0x62>
 8000528:	4610      	mov	r0, r2
 800052a:	e6fb      	b.n	8000324 <__udivmoddi4+0x90>
 800052c:	4548      	cmp	r0, r9
 800052e:	d2a9      	bcs.n	8000484 <__udivmoddi4+0x1f0>
 8000530:	ebb9 0802 	subs.w	r8, r9, r2
 8000534:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000538:	3b01      	subs	r3, #1
 800053a:	e7a3      	b.n	8000484 <__udivmoddi4+0x1f0>
 800053c:	4645      	mov	r5, r8
 800053e:	e7ea      	b.n	8000516 <__udivmoddi4+0x282>
 8000540:	462b      	mov	r3, r5
 8000542:	e794      	b.n	800046e <__udivmoddi4+0x1da>
 8000544:	4640      	mov	r0, r8
 8000546:	e7d1      	b.n	80004ec <__udivmoddi4+0x258>
 8000548:	46d0      	mov	r8, sl
 800054a:	e77b      	b.n	8000444 <__udivmoddi4+0x1b0>
 800054c:	3d02      	subs	r5, #2
 800054e:	4462      	add	r2, ip
 8000550:	e732      	b.n	80003b8 <__udivmoddi4+0x124>
 8000552:	4608      	mov	r0, r1
 8000554:	e70a      	b.n	800036c <__udivmoddi4+0xd8>
 8000556:	4464      	add	r4, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e742      	b.n	80003e2 <__udivmoddi4+0x14e>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fc91 	bl	8000e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f8b5 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f91d 	bl	80007ac <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 8000572:	4847      	ldr	r0, [pc, #284]	; (8000690 <main+0x130>)
 8000574:	f005 f80c 	bl	8005590 <SEGGER_UART_init>

//  Cyclic count enable
  DWT_CTRL |=(1<<0);
 8000578:	4b46      	ldr	r3, [pc, #280]	; (8000694 <main+0x134>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a45      	ldr	r2, [pc, #276]	; (8000694 <main+0x134>)
 800057e:	f043 0301 	orr.w	r3, r3, #1
 8000582:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000584:	f004 fe2e 	bl	80051e4 <SEGGER_SYSVIEW_Conf>

//  task creation
  status = xTaskCreate(led_green_handler,
 8000588:	4b43      	ldr	r3, [pc, #268]	; (8000698 <main+0x138>)
 800058a:	9301      	str	r3, [sp, #4]
 800058c:	2303      	movs	r3, #3
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2300      	movs	r3, #0
 8000592:	22c8      	movs	r2, #200	; 0xc8
 8000594:	4941      	ldr	r1, [pc, #260]	; (800069c <main+0x13c>)
 8000596:	4842      	ldr	r0, [pc, #264]	; (80006a0 <main+0x140>)
 8000598:	f002 fcea 	bl	8002f70 <xTaskCreate>
 800059c:	6178      	str	r0, [r7, #20]
              NULL,
              3,
              &ledg_task_handle
                            );

  configASSERT(status == pdPASS);
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d00a      	beq.n	80005ba <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a8:	f383 8811 	msr	BASEPRI, r3
 80005ac:	f3bf 8f6f 	isb	sy
 80005b0:	f3bf 8f4f 	dsb	sy
 80005b4:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b6:	bf00      	nop
 80005b8:	e7fe      	b.n	80005b8 <main+0x58>

  next_task_handle = ledg_task_handle;
 80005ba:	4b37      	ldr	r3, [pc, #220]	; (8000698 <main+0x138>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a39      	ldr	r2, [pc, #228]	; (80006a4 <main+0x144>)
 80005c0:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_red_handler,
 80005c2:	4b39      	ldr	r3, [pc, #228]	; (80006a8 <main+0x148>)
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2301      	movs	r3, #1
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	22c8      	movs	r2, #200	; 0xc8
 80005ce:	4937      	ldr	r1, [pc, #220]	; (80006ac <main+0x14c>)
 80005d0:	4837      	ldr	r0, [pc, #220]	; (80006b0 <main+0x150>)
 80005d2:	f002 fccd 	bl	8002f70 <xTaskCreate>
 80005d6:	6178      	str	r0, [r7, #20]
                NULL,
                1,
                &ledr_task_handle
                              );

  configASSERT(status == pdPASS);
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d00a      	beq.n	80005f4 <main+0x94>
        __asm volatile
 80005de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e2:	f383 8811 	msr	BASEPRI, r3
 80005e6:	f3bf 8f6f 	isb	sy
 80005ea:	f3bf 8f4f 	dsb	sy
 80005ee:	60fb      	str	r3, [r7, #12]
    }
 80005f0:	bf00      	nop
 80005f2:	e7fe      	b.n	80005f2 <main+0x92>

  status = xTaskCreate(led_orange_handler,
 80005f4:	4b2f      	ldr	r3, [pc, #188]	; (80006b4 <main+0x154>)
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	2302      	movs	r3, #2
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2300      	movs	r3, #0
 80005fe:	22c8      	movs	r2, #200	; 0xc8
 8000600:	492d      	ldr	r1, [pc, #180]	; (80006b8 <main+0x158>)
 8000602:	482e      	ldr	r0, [pc, #184]	; (80006bc <main+0x15c>)
 8000604:	f002 fcb4 	bl	8002f70 <xTaskCreate>
 8000608:	6178      	str	r0, [r7, #20]
                NULL,
                2,
				&ledo_task_handle
                              );

   configASSERT(status == pdPASS);
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d00a      	beq.n	8000626 <main+0xc6>
        __asm volatile
 8000610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000614:	f383 8811 	msr	BASEPRI, r3
 8000618:	f3bf 8f6f 	isb	sy
 800061c:	f3bf 8f4f 	dsb	sy
 8000620:	60bb      	str	r3, [r7, #8]
    }
 8000622:	bf00      	nop
 8000624:	e7fe      	b.n	8000624 <main+0xc4>

   status = xTaskCreate(resume_handler,
 8000626:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <main+0x160>)
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2304      	movs	r3, #4
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2300      	movs	r3, #0
 8000630:	22c8      	movs	r2, #200	; 0xc8
 8000632:	4924      	ldr	r1, [pc, #144]	; (80006c4 <main+0x164>)
 8000634:	4824      	ldr	r0, [pc, #144]	; (80006c8 <main+0x168>)
 8000636:	f002 fc9b 	bl	8002f70 <xTaskCreate>
 800063a:	6178      	str	r0, [r7, #20]
                 NULL,
                 4,
 				&resume_task_handle
                               );

    configASSERT(status == pdPASS);
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d00a      	beq.n	8000658 <main+0xf8>
        __asm volatile
 8000642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000646:	f383 8811 	msr	BASEPRI, r3
 800064a:	f3bf 8f6f 	isb	sy
 800064e:	f3bf 8f4f 	dsb	sy
 8000652:	607b      	str	r3, [r7, #4]
    }
 8000654:	bf00      	nop
 8000656:	e7fe      	b.n	8000656 <main+0xf6>


   status = xTaskCreate(button_handler,
 8000658:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <main+0x16c>)
 800065a:	9301      	str	r3, [sp, #4]
 800065c:	2305      	movs	r3, #5
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2300      	movs	r3, #0
 8000662:	22c8      	movs	r2, #200	; 0xc8
 8000664:	491a      	ldr	r1, [pc, #104]	; (80006d0 <main+0x170>)
 8000666:	481b      	ldr	r0, [pc, #108]	; (80006d4 <main+0x174>)
 8000668:	f002 fc82 	bl	8002f70 <xTaskCreate>
 800066c:	6178      	str	r0, [r7, #20]
                   NULL,
                   5,
                   &btn_task_handle
                                 );

    configASSERT(status == pdPASS);
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d00a      	beq.n	800068a <main+0x12a>
        __asm volatile
 8000674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000678:	f383 8811 	msr	BASEPRI, r3
 800067c:	f3bf 8f6f 	isb	sy
 8000680:	f3bf 8f4f 	dsb	sy
 8000684:	603b      	str	r3, [r7, #0]
    }
 8000686:	bf00      	nop
 8000688:	e7fe      	b.n	8000688 <main+0x128>


//    Start the scheduler

    vTaskStartScheduler();
 800068a:	f002 ff57 	bl	800353c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068e:	e7fe      	b.n	800068e <main+0x12e>
 8000690:	0007a120 	.word	0x0007a120
 8000694:	e0001000 	.word	0xe0001000
 8000698:	20000038 	.word	0x20000038
 800069c:	08007af4 	.word	0x08007af4
 80006a0:	08000a69 	.word	0x08000a69
 80006a4:	2000004c 	.word	0x2000004c
 80006a8:	2000003c 	.word	0x2000003c
 80006ac:	08007b04 	.word	0x08007b04
 80006b0:	08000b39 	.word	0x08000b39
 80006b4:	20000040 	.word	0x20000040
 80006b8:	08007b14 	.word	0x08007b14
 80006bc:	08000ad1 	.word	0x08000ad1
 80006c0:	20000048 	.word	0x20000048
 80006c4:	08007b24 	.word	0x08007b24
 80006c8:	08000ba9 	.word	0x08000ba9
 80006cc:	20000044 	.word	0x20000044
 80006d0:	08007b30 	.word	0x08007b30
 80006d4:	08000c0d 	.word	0x08000c0d

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f007 f9be 	bl	8007a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <SystemClock_Config+0xcc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a27      	ldr	r2, [pc, #156]	; (80007a4 <SystemClock_Config+0xcc>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <SystemClock_Config+0xcc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <SystemClock_Config+0xd0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SystemClock_Config+0xd0>)
 8000722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <SystemClock_Config+0xd0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000734:	2302      	movs	r3, #2
 8000736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000738:	2301      	movs	r3, #1
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	2310      	movs	r3, #16
 800073e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000740:	2302      	movs	r3, #2
 8000742:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000748:	2308      	movs	r3, #8
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800074c:	23a8      	movs	r3, #168	; 0xa8
 800074e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000754:	2307      	movs	r3, #7
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	4618      	mov	r0, r3
 800075e:	f000 fea1 	bl	80014a4 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000768:	f000 fa8a 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	2302      	movs	r3, #2
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000778:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800077c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000782:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2105      	movs	r1, #5
 800078a:	4618      	mov	r0, r3
 800078c:	f001 f902 	bl	8001994 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000796:	f000 fa73 	bl	8000c80 <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	; 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	; 0x30
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
 80007c6:	4ba2      	ldr	r3, [pc, #648]	; (8000a50 <MX_GPIO_Init+0x2a4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4aa1      	ldr	r2, [pc, #644]	; (8000a50 <MX_GPIO_Init+0x2a4>)
 80007cc:	f043 0310 	orr.w	r3, r3, #16
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b9f      	ldr	r3, [pc, #636]	; (8000a50 <MX_GPIO_Init+0x2a4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0310 	and.w	r3, r3, #16
 80007da:	61bb      	str	r3, [r7, #24]
 80007dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	4b9b      	ldr	r3, [pc, #620]	; (8000a50 <MX_GPIO_Init+0x2a4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a9a      	ldr	r2, [pc, #616]	; (8000a50 <MX_GPIO_Init+0x2a4>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b98      	ldr	r3, [pc, #608]	; (8000a50 <MX_GPIO_Init+0x2a4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	4b94      	ldr	r3, [pc, #592]	; (8000a50 <MX_GPIO_Init+0x2a4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a93      	ldr	r2, [pc, #588]	; (8000a50 <MX_GPIO_Init+0x2a4>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b91      	ldr	r3, [pc, #580]	; (8000a50 <MX_GPIO_Init+0x2a4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	4b8d      	ldr	r3, [pc, #564]	; (8000a50 <MX_GPIO_Init+0x2a4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a8c      	ldr	r2, [pc, #560]	; (8000a50 <MX_GPIO_Init+0x2a4>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b8a      	ldr	r3, [pc, #552]	; (8000a50 <MX_GPIO_Init+0x2a4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	4b86      	ldr	r3, [pc, #536]	; (8000a50 <MX_GPIO_Init+0x2a4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a85      	ldr	r2, [pc, #532]	; (8000a50 <MX_GPIO_Init+0x2a4>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b83      	ldr	r3, [pc, #524]	; (8000a50 <MX_GPIO_Init+0x2a4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b7f      	ldr	r3, [pc, #508]	; (8000a50 <MX_GPIO_Init+0x2a4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a7e      	ldr	r2, [pc, #504]	; (8000a50 <MX_GPIO_Init+0x2a4>)
 8000858:	f043 0308 	orr.w	r3, r3, #8
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b7c      	ldr	r3, [pc, #496]	; (8000a50 <MX_GPIO_Init+0x2a4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0308 	and.w	r3, r3, #8
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2108      	movs	r1, #8
 800086e:	4879      	ldr	r0, [pc, #484]	; (8000a54 <MX_GPIO_Init+0x2a8>)
 8000870:	f000 fde4 	bl	800143c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	2101      	movs	r1, #1
 8000878:	4877      	ldr	r0, [pc, #476]	; (8000a58 <MX_GPIO_Init+0x2ac>)
 800087a:	f000 fddf 	bl	800143c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800087e:	2200      	movs	r2, #0
 8000880:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000884:	4875      	ldr	r0, [pc, #468]	; (8000a5c <MX_GPIO_Init+0x2b0>)
 8000886:	f000 fdd9 	bl	800143c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800088a:	2308      	movs	r3, #8
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	486c      	ldr	r0, [pc, #432]	; (8000a54 <MX_GPIO_Init+0x2a8>)
 80008a2:	f000 fc17 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008a6:	2301      	movs	r3, #1
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4866      	ldr	r0, [pc, #408]	; (8000a58 <MX_GPIO_Init+0x2ac>)
 80008be:	f000 fc09 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008c2:	2308      	movs	r3, #8
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d2:	2305      	movs	r3, #5
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	485e      	ldr	r0, [pc, #376]	; (8000a58 <MX_GPIO_Init+0x2ac>)
 80008de:	f000 fbf9 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e2:	2301      	movs	r3, #1
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	485a      	ldr	r0, [pc, #360]	; (8000a60 <MX_GPIO_Init+0x2b4>)
 80008f8:	f000 fbec 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008fc:	2310      	movs	r3, #16
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800090c:	2306      	movs	r3, #6
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4852      	ldr	r0, [pc, #328]	; (8000a60 <MX_GPIO_Init+0x2b4>)
 8000918:	f000 fbdc 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800091c:	23e0      	movs	r3, #224	; 0xe0
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800092c:	2305      	movs	r3, #5
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	484a      	ldr	r0, [pc, #296]	; (8000a60 <MX_GPIO_Init+0x2b4>)
 8000938:	f000 fbcc 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800093c:	2304      	movs	r3, #4
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4845      	ldr	r0, [pc, #276]	; (8000a64 <MX_GPIO_Init+0x2b8>)
 8000950:	f000 fbc0 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000966:	2305      	movs	r3, #5
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	483c      	ldr	r0, [pc, #240]	; (8000a64 <MX_GPIO_Init+0x2b8>)
 8000972:	f000 fbaf 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000976:	f24f 0310 	movw	r3, #61456	; 0xf010
 800097a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4833      	ldr	r0, [pc, #204]	; (8000a5c <MX_GPIO_Init+0x2b0>)
 8000990:	f000 fba0 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000994:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009a6:	2306      	movs	r3, #6
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4829      	ldr	r0, [pc, #164]	; (8000a58 <MX_GPIO_Init+0x2ac>)
 80009b2:	f000 fb8f 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4825      	ldr	r0, [pc, #148]	; (8000a60 <MX_GPIO_Init+0x2b4>)
 80009cc:	f000 fb82 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009d0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009e2:	230a      	movs	r3, #10
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	481c      	ldr	r0, [pc, #112]	; (8000a60 <MX_GPIO_Init+0x2b4>)
 80009ee:	f000 fb71 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009f2:	2320      	movs	r3, #32
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4815      	ldr	r0, [pc, #84]	; (8000a5c <MX_GPIO_Init+0x2b0>)
 8000a06:	f000 fb65 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a0a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a10:	2312      	movs	r3, #18
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	480f      	ldr	r0, [pc, #60]	; (8000a64 <MX_GPIO_Init+0x2b8>)
 8000a28:	f000 fb54 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a30:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <MX_GPIO_Init+0x2a8>)
 8000a42:	f000 fb47 	bl	80010d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a46:	bf00      	nop
 8000a48:	3730      	adds	r7, #48	; 0x30
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40020800 	.word	0x40020800
 8000a5c:	40020c00 	.word	0x40020c00
 8000a60:	40020000 	.word	0x40020000
 8000a64:	40020400 	.word	0x40020400

08000a68 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void* parameters)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af02      	add	r7, sp, #8
 8000a6e:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a70:	4813      	ldr	r0, [pc, #76]	; (8000ac0 <led_green_handler+0x58>)
 8000a72:	f006 ff4b 	bl	800790c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a7a:	4812      	ldr	r0, [pc, #72]	; (8000ac4 <led_green_handler+0x5c>)
 8000a7c:	f000 fcf7 	bl	800146e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL,pdMS_TO_TICKS(1000));
 8000a80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a84:	9300      	str	r3, [sp, #0]
 8000a86:	2300      	movs	r3, #0
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f003 fa3d 	bl	8003f0c <xTaskGenericNotifyWait>
 8000a92:	60f8      	str	r0, [r7, #12]
		if(status==pdTRUE)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d1ea      	bne.n	8000a70 <led_green_handler+0x8>
		{
			vTaskSuspendAll();
 8000a9a:	f002 fdb1 	bl	8003600 <vTaskSuspendAll>
			next_task_handle=ledo_task_handle;
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <led_green_handler+0x60>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <led_green_handler+0x64>)
 8000aa4:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000aa6:	f002 fdb9 	bl	800361c <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN, GPIO_PIN_SET);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab0:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <led_green_handler+0x5c>)
 8000ab2:	f000 fcc3 	bl	800143c <HAL_GPIO_WritePin>
			vTaskSuspend(NULL);
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f002 fbf6 	bl	80032a8 <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000abc:	e7d8      	b.n	8000a70 <led_green_handler+0x8>
 8000abe:	bf00      	nop
 8000ac0:	08007b3c 	.word	0x08007b3c
 8000ac4:	40020c00 	.word	0x40020c00
 8000ac8:	20000040 	.word	0x20000040
 8000acc:	2000004c 	.word	0x2000004c

08000ad0 <led_orange_handler>:
		}
	}
}

static void led_orange_handler(void* parameters)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af02      	add	r7, sp, #8
 8000ad6:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000ad8:	4813      	ldr	r0, [pc, #76]	; (8000b28 <led_orange_handler+0x58>)
 8000ada:	f006 ff17 	bl	800790c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000ade:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae2:	4812      	ldr	r0, [pc, #72]	; (8000b2c <led_orange_handler+0x5c>)
 8000ae4:	f000 fcc3 	bl	800146e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL,pdMS_TO_TICKS(1000));
 8000ae8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	2300      	movs	r3, #0
 8000af0:	2200      	movs	r2, #0
 8000af2:	2100      	movs	r1, #0
 8000af4:	2000      	movs	r0, #0
 8000af6:	f003 fa09 	bl	8003f0c <xTaskGenericNotifyWait>
 8000afa:	60f8      	str	r0, [r7, #12]
		if(status==pdTRUE)
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d1ea      	bne.n	8000ad8 <led_orange_handler+0x8>
		{
			vTaskSuspendAll();
 8000b02:	f002 fd7d 	bl	8003600 <vTaskSuspendAll>
			next_task_handle=ledr_task_handle;
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <led_orange_handler+0x60>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <led_orange_handler+0x64>)
 8000b0c:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000b0e:	f002 fd85 	bl	800361c <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <led_orange_handler+0x5c>)
 8000b1a:	f000 fc8f 	bl	800143c <HAL_GPIO_WritePin>
			vTaskSuspend(NULL);
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f002 fbc2 	bl	80032a8 <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000b24:	e7d8      	b.n	8000ad8 <led_orange_handler+0x8>
 8000b26:	bf00      	nop
 8000b28:	08007b50 	.word	0x08007b50
 8000b2c:	40020c00 	.word	0x40020c00
 8000b30:	2000003c 	.word	0x2000003c
 8000b34:	2000004c 	.word	0x2000004c

08000b38 <led_red_handler>:
		}
	}
}
static void led_red_handler(void* parameters)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af02      	add	r7, sp, #8
 8000b3e:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000b40:	4814      	ldr	r0, [pc, #80]	; (8000b94 <led_red_handler+0x5c>)
 8000b42:	f006 fee3 	bl	800790c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000b46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b4a:	4813      	ldr	r0, [pc, #76]	; (8000b98 <led_red_handler+0x60>)
 8000b4c:	f000 fc8f 	bl	800146e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL,pdMS_TO_TICKS(1000));
 8000b50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	2300      	movs	r3, #0
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f003 f9d5 	bl	8003f0c <xTaskGenericNotifyWait>
 8000b62:	60f8      	str	r0, [r7, #12]
		if(status==pdTRUE)
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d1ea      	bne.n	8000b40 <led_red_handler+0x8>
		{
			vTaskSuspendAll();
 8000b6a:	f002 fd49 	bl	8003600 <vTaskSuspendAll>
			next_task_handle = resume_task_handle;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <led_red_handler+0x64>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <led_red_handler+0x68>)
 8000b74:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000b76:	f002 fd51 	bl	800361c <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_RED_PIN, GPIO_PIN_SET);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <led_red_handler+0x60>)
 8000b82:	f000 fc5b 	bl	800143c <HAL_GPIO_WritePin>
//			vTaskDelete(btn_task_handle);
			SEGGER_SYSVIEW_PrintfTarget("Delete 3 tasks");
 8000b86:	4807      	ldr	r0, [pc, #28]	; (8000ba4 <led_red_handler+0x6c>)
 8000b88:	f006 fec0 	bl	800790c <SEGGER_SYSVIEW_PrintfTarget>
			vTaskSuspend(NULL);
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f002 fb8b 	bl	80032a8 <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000b92:	e7d5      	b.n	8000b40 <led_red_handler+0x8>
 8000b94:	08007b64 	.word	0x08007b64
 8000b98:	40020c00 	.word	0x40020c00
 8000b9c:	20000048 	.word	0x20000048
 8000ba0:	2000004c 	.word	0x2000004c
 8000ba4:	08007b78 	.word	0x08007b78

08000ba8 <resume_handler>:
		}
	}
}

static void resume_handler(void* parameters)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af02      	add	r7, sp, #8
 8000bae:	6078      	str	r0, [r7, #4]
	BaseType_t status;
		while(1)
		{
			status = xTaskNotifyWait(0, 0, NULL,pdMS_TO_TICKS(1000));
 8000bb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f003 f9a5 	bl	8003f0c <xTaskGenericNotifyWait>
 8000bc2:	60f8      	str	r0, [r7, #12]
			if(status==pdTRUE)
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d1f2      	bne.n	8000bb0 <resume_handler+0x8>
			{
				vTaskSuspendAll();
 8000bca:	f002 fd19 	bl	8003600 <vTaskSuspendAll>
				next_task_handle=ledg_task_handle;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <resume_handler+0x54>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <resume_handler+0x58>)
 8000bd4:	6013      	str	r3, [r2, #0]
				xTaskResumeAll();
 8000bd6:	f002 fd21 	bl	800361c <xTaskResumeAll>
				vTaskResume(ledg_task_handle);
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <resume_handler+0x54>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f002 fc42 	bl	8003468 <vTaskResume>
				vTaskResume(ledo_task_handle);
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <resume_handler+0x5c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f002 fc3d 	bl	8003468 <vTaskResume>
				vTaskResume(ledr_task_handle);
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <resume_handler+0x60>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f002 fc38 	bl	8003468 <vTaskResume>
			status = xTaskNotifyWait(0, 0, NULL,pdMS_TO_TICKS(1000));
 8000bf8:	e7da      	b.n	8000bb0 <resume_handler+0x8>
 8000bfa:	bf00      	nop
 8000bfc:	20000038 	.word	0x20000038
 8000c00:	2000004c 	.word	0x2000004c
 8000c04:	20000040 	.word	0x20000040
 8000c08:	2000003c 	.word	0x2000003c

08000c0c <button_handler>:
			}
		}
}

static void button_handler (void* parameters)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af02      	add	r7, sp, #8
 8000c12:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	480d      	ldr	r0, [pc, #52]	; (8000c54 <button_handler+0x48>)
 8000c20:	f000 fbf4 	bl	800140c <HAL_GPIO_ReadPin>
 8000c24:	4603      	mov	r3, r0
 8000c26:	73bb      	strb	r3, [r7, #14]

		if(btn_read)
 8000c28:	7bbb      	ldrb	r3, [r7, #14]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d00b      	beq.n	8000c46 <button_handler+0x3a>
		{
			if(! prev_read)
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d108      	bne.n	8000c46 <button_handler+0x3a>
			{
				xTaskNotify(next_task_handle,0,eNoAction);
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <button_handler+0x4c>)
 8000c36:	6818      	ldr	r0, [r3, #0]
 8000c38:	2300      	movs	r3, #0
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	f003 f9eb 	bl	800401c <xTaskGenericNotify>
			}
		}
		prev_read = btn_read;
 8000c46:	7bbb      	ldrb	r3, [r7, #14]
 8000c48:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000c4a:	200a      	movs	r0, #10
 8000c4c:	f002 faf4 	bl	8003238 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000c50:	e7e4      	b.n	8000c1c <button_handler+0x10>
 8000c52:	bf00      	nop
 8000c54:	40020000 	.word	0x40020000
 8000c58:	2000004c 	.word	0x2000004c

08000c5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d101      	bne.n	8000c72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c6e:	f000 f92f 	bl	8000ed0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40001000 	.word	0x40001000

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <Error_Handler+0x8>
	...

08000c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	4a0f      	ldr	r2, [pc, #60]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800

08000cdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08e      	sub	sp, #56	; 0x38
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	4b33      	ldr	r3, [pc, #204]	; (8000dc0 <HAL_InitTick+0xe4>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	4a32      	ldr	r2, [pc, #200]	; (8000dc0 <HAL_InitTick+0xe4>)
 8000cf6:	f043 0310 	orr.w	r3, r3, #16
 8000cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfc:	4b30      	ldr	r3, [pc, #192]	; (8000dc0 <HAL_InitTick+0xe4>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	f003 0310 	and.w	r3, r3, #16
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d08:	f107 0210 	add.w	r2, r7, #16
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 f84a 	bl	8001dac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d18:	6a3b      	ldr	r3, [r7, #32]
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d103      	bne.n	8000d2a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d22:	f001 f82f 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 8000d26:	6378      	str	r0, [r7, #52]	; 0x34
 8000d28:	e004      	b.n	8000d34 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d2a:	f001 f82b 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d36:	4a23      	ldr	r2, [pc, #140]	; (8000dc4 <HAL_InitTick+0xe8>)
 8000d38:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3c:	0c9b      	lsrs	r3, r3, #18
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d42:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <HAL_InitTick+0xec>)
 8000d44:	4a21      	ldr	r2, [pc, #132]	; (8000dcc <HAL_InitTick+0xf0>)
 8000d46:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <HAL_InitTick+0xec>)
 8000d4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d4e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d50:	4a1d      	ldr	r2, [pc, #116]	; (8000dc8 <HAL_InitTick+0xec>)
 8000d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d54:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <HAL_InitTick+0xec>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <HAL_InitTick+0xec>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d62:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <HAL_InitTick+0xec>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d68:	4817      	ldr	r0, [pc, #92]	; (8000dc8 <HAL_InitTick+0xec>)
 8000d6a:	f001 f851 	bl	8001e10 <HAL_TIM_Base_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d11b      	bne.n	8000db4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d7c:	4812      	ldr	r0, [pc, #72]	; (8000dc8 <HAL_InitTick+0xec>)
 8000d7e:	f001 f8a1 	bl	8001ec4 <HAL_TIM_Base_Start_IT>
 8000d82:	4603      	mov	r3, r0
 8000d84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d111      	bne.n	8000db4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d90:	2036      	movs	r0, #54	; 0x36
 8000d92:	f000 f991 	bl	80010b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b0f      	cmp	r3, #15
 8000d9a:	d808      	bhi.n	8000dae <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	2036      	movs	r0, #54	; 0x36
 8000da2:	f000 f96d 	bl	8001080 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_InitTick+0xf4>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	e002      	b.n	8000db4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000db4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3738      	adds	r7, #56	; 0x38
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	431bde83 	.word	0x431bde83
 8000dc8:	20000050 	.word	0x20000050
 8000dcc:	40001000 	.word	0x40001000
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <NMI_Handler+0x4>

08000dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <HardFault_Handler+0x4>

08000de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <MemManage_Handler+0x4>

08000de6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <BusFault_Handler+0x4>

08000dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <UsageFault_Handler+0x4>

08000df2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <TIM6_DAC_IRQHandler+0x10>)
 8000e06:	f001 f8cd 	bl	8001fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000050 	.word	0x20000050

08000e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <SystemInit+0x20>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <SystemInit+0x20>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e3c:	f7ff ffea 	bl	8000e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e40:	480c      	ldr	r0, [pc, #48]	; (8000e74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e42:	490d      	ldr	r1, [pc, #52]	; (8000e78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e44:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e48:	e002      	b.n	8000e50 <LoopCopyDataInit>

08000e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4e:	3304      	adds	r3, #4

08000e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e54:	d3f9      	bcc.n	8000e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e58:	4c0a      	ldr	r4, [pc, #40]	; (8000e84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e5c:	e001      	b.n	8000e62 <LoopFillZerobss>

08000e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e60:	3204      	adds	r2, #4

08000e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e64:	d3fb      	bcc.n	8000e5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e66:	f006 fe07 	bl	8007a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6a:	f7ff fb79 	bl	8000560 <main>
  bx  lr    
 8000e6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000e7c:	08007cbc 	.word	0x08007cbc
  ldr r2, =_sbss
 8000e80:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000e84:	200144c4 	.word	0x200144c4

08000e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC_IRQHandler>
	...

08000e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <HAL_Init+0x40>)
 8000e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <HAL_Init+0x40>)
 8000ea2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <HAL_Init+0x40>)
 8000eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f000 f8d8 	bl	800106a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f7ff ff0e 	bl	8000cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec0:	f7ff fee4 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023c00 	.word	0x40023c00

08000ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x20>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_IncTick+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <HAL_IncTick+0x24>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20000098 	.word	0x20000098

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000098 	.word	0x20000098

08000f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f42:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	60d3      	str	r3, [r2, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <__NVIC_GetPriorityGrouping+0x18>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f003 0307 	and.w	r3, r3, #7
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	db0b      	blt.n	8000f9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	f003 021f 	and.w	r2, r3, #31
 8000f8c:	4907      	ldr	r1, [pc, #28]	; (8000fac <__NVIC_EnableIRQ+0x38>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	095b      	lsrs	r3, r3, #5
 8000f94:	2001      	movs	r0, #1
 8000f96:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000e100 	.word	0xe000e100

08000fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	db0a      	blt.n	8000fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	490c      	ldr	r1, [pc, #48]	; (8000ffc <__NVIC_SetPriority+0x4c>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	0112      	lsls	r2, r2, #4
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd8:	e00a      	b.n	8000ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4908      	ldr	r1, [pc, #32]	; (8001000 <__NVIC_SetPriority+0x50>)
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	f003 030f 	and.w	r3, r3, #15
 8000fe6:	3b04      	subs	r3, #4
 8000fe8:	0112      	lsls	r2, r2, #4
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	440b      	add	r3, r1
 8000fee:	761a      	strb	r2, [r3, #24]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000e100 	.word	0xe000e100
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f1c3 0307 	rsb	r3, r3, #7
 800101e:	2b04      	cmp	r3, #4
 8001020:	bf28      	it	cs
 8001022:	2304      	movcs	r3, #4
 8001024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3304      	adds	r3, #4
 800102a:	2b06      	cmp	r3, #6
 800102c:	d902      	bls.n	8001034 <NVIC_EncodePriority+0x30>
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3b03      	subs	r3, #3
 8001032:	e000      	b.n	8001036 <NVIC_EncodePriority+0x32>
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	f04f 32ff 	mov.w	r2, #4294967295
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43da      	mvns	r2, r3
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	401a      	ands	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800104c:	f04f 31ff 	mov.w	r1, #4294967295
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	fa01 f303 	lsl.w	r3, r1, r3
 8001056:	43d9      	mvns	r1, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	4313      	orrs	r3, r2
         );
}
 800105e:	4618      	mov	r0, r3
 8001060:	3724      	adds	r7, #36	; 0x24
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ff4c 	bl	8000f10 <__NVIC_SetPriorityGrouping>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
 800108c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001092:	f7ff ff61 	bl	8000f58 <__NVIC_GetPriorityGrouping>
 8001096:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	68b9      	ldr	r1, [r7, #8]
 800109c:	6978      	ldr	r0, [r7, #20]
 800109e:	f7ff ffb1 	bl	8001004 <NVIC_EncodePriority>
 80010a2:	4602      	mov	r2, r0
 80010a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a8:	4611      	mov	r1, r2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ff80 	bl	8000fb0 <__NVIC_SetPriority>
}
 80010b0:	bf00      	nop
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ff54 	bl	8000f74 <__NVIC_EnableIRQ>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
 80010ee:	e16b      	b.n	80013c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010f0:	2201      	movs	r2, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	429a      	cmp	r2, r3
 800110a:	f040 815a 	bne.w	80013c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	2b01      	cmp	r3, #1
 8001118:	d005      	beq.n	8001126 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001122:	2b02      	cmp	r3, #2
 8001124:	d130      	bne.n	8001188 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	2203      	movs	r2, #3
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800115c:	2201      	movs	r2, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	091b      	lsrs	r3, r3, #4
 8001172:	f003 0201 	and.w	r2, r3, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	2b03      	cmp	r3, #3
 8001192:	d017      	beq.n	80011c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	2203      	movs	r2, #3
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d123      	bne.n	8001218 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	08da      	lsrs	r2, r3, #3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3208      	adds	r2, #8
 80011d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	220f      	movs	r2, #15
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	691a      	ldr	r2, [r3, #16]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	08da      	lsrs	r2, r3, #3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3208      	adds	r2, #8
 8001212:	69b9      	ldr	r1, [r7, #24]
 8001214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0203 	and.w	r2, r3, #3
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 80b4 	beq.w	80013c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b60      	ldr	r3, [pc, #384]	; (80013e0 <HAL_GPIO_Init+0x30c>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a5f      	ldr	r2, [pc, #380]	; (80013e0 <HAL_GPIO_Init+0x30c>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001268:	6453      	str	r3, [r2, #68]	; 0x44
 800126a:	4b5d      	ldr	r3, [pc, #372]	; (80013e0 <HAL_GPIO_Init+0x30c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001276:	4a5b      	ldr	r2, [pc, #364]	; (80013e4 <HAL_GPIO_Init+0x310>)
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	089b      	lsrs	r3, r3, #2
 800127c:	3302      	adds	r3, #2
 800127e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	220f      	movs	r2, #15
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a52      	ldr	r2, [pc, #328]	; (80013e8 <HAL_GPIO_Init+0x314>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d02b      	beq.n	80012fa <HAL_GPIO_Init+0x226>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a51      	ldr	r2, [pc, #324]	; (80013ec <HAL_GPIO_Init+0x318>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d025      	beq.n	80012f6 <HAL_GPIO_Init+0x222>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a50      	ldr	r2, [pc, #320]	; (80013f0 <HAL_GPIO_Init+0x31c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d01f      	beq.n	80012f2 <HAL_GPIO_Init+0x21e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4f      	ldr	r2, [pc, #316]	; (80013f4 <HAL_GPIO_Init+0x320>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d019      	beq.n	80012ee <HAL_GPIO_Init+0x21a>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4e      	ldr	r2, [pc, #312]	; (80013f8 <HAL_GPIO_Init+0x324>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d013      	beq.n	80012ea <HAL_GPIO_Init+0x216>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4d      	ldr	r2, [pc, #308]	; (80013fc <HAL_GPIO_Init+0x328>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d00d      	beq.n	80012e6 <HAL_GPIO_Init+0x212>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4c      	ldr	r2, [pc, #304]	; (8001400 <HAL_GPIO_Init+0x32c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d007      	beq.n	80012e2 <HAL_GPIO_Init+0x20e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4b      	ldr	r2, [pc, #300]	; (8001404 <HAL_GPIO_Init+0x330>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d101      	bne.n	80012de <HAL_GPIO_Init+0x20a>
 80012da:	2307      	movs	r3, #7
 80012dc:	e00e      	b.n	80012fc <HAL_GPIO_Init+0x228>
 80012de:	2308      	movs	r3, #8
 80012e0:	e00c      	b.n	80012fc <HAL_GPIO_Init+0x228>
 80012e2:	2306      	movs	r3, #6
 80012e4:	e00a      	b.n	80012fc <HAL_GPIO_Init+0x228>
 80012e6:	2305      	movs	r3, #5
 80012e8:	e008      	b.n	80012fc <HAL_GPIO_Init+0x228>
 80012ea:	2304      	movs	r3, #4
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x228>
 80012ee:	2303      	movs	r3, #3
 80012f0:	e004      	b.n	80012fc <HAL_GPIO_Init+0x228>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e002      	b.n	80012fc <HAL_GPIO_Init+0x228>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <HAL_GPIO_Init+0x228>
 80012fa:	2300      	movs	r3, #0
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	f002 0203 	and.w	r2, r2, #3
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	4093      	lsls	r3, r2
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800130c:	4935      	ldr	r1, [pc, #212]	; (80013e4 <HAL_GPIO_Init+0x310>)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800131a:	4b3b      	ldr	r3, [pc, #236]	; (8001408 <HAL_GPIO_Init+0x334>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133e:	4a32      	ldr	r2, [pc, #200]	; (8001408 <HAL_GPIO_Init+0x334>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001344:	4b30      	ldr	r3, [pc, #192]	; (8001408 <HAL_GPIO_Init+0x334>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001368:	4a27      	ldr	r2, [pc, #156]	; (8001408 <HAL_GPIO_Init+0x334>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800136e:	4b26      	ldr	r3, [pc, #152]	; (8001408 <HAL_GPIO_Init+0x334>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001392:	4a1d      	ldr	r2, [pc, #116]	; (8001408 <HAL_GPIO_Init+0x334>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <HAL_GPIO_Init+0x334>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013bc:	4a12      	ldr	r2, [pc, #72]	; (8001408 <HAL_GPIO_Init+0x334>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3301      	adds	r3, #1
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	2b0f      	cmp	r3, #15
 80013cc:	f67f ae90 	bls.w	80010f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3724      	adds	r7, #36	; 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40013800 	.word	0x40013800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020400 	.word	0x40020400
 80013f0:	40020800 	.word	0x40020800
 80013f4:	40020c00 	.word	0x40020c00
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40021400 	.word	0x40021400
 8001400:	40021800 	.word	0x40021800
 8001404:	40021c00 	.word	0x40021c00
 8001408:	40013c00 	.word	0x40013c00

0800140c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691a      	ldr	r2, [r3, #16]
 800141c:	887b      	ldrh	r3, [r7, #2]
 800141e:	4013      	ands	r3, r2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d002      	beq.n	800142a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001424:	2301      	movs	r3, #1
 8001426:	73fb      	strb	r3, [r7, #15]
 8001428:	e001      	b.n	800142e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800142e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	807b      	strh	r3, [r7, #2]
 8001448:	4613      	mov	r3, r2
 800144a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800144c:	787b      	ldrb	r3, [r7, #1]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001458:	e003      	b.n	8001462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	041a      	lsls	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	619a      	str	r2, [r3, #24]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800146e:	b480      	push	{r7}
 8001470:	b085      	sub	sp, #20
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	460b      	mov	r3, r1
 8001478:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001480:	887a      	ldrh	r2, [r7, #2]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4013      	ands	r3, r2
 8001486:	041a      	lsls	r2, r3, #16
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	43d9      	mvns	r1, r3
 800148c:	887b      	ldrh	r3, [r7, #2]
 800148e:	400b      	ands	r3, r1
 8001490:	431a      	orrs	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	619a      	str	r2, [r3, #24]
}
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e267      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d075      	beq.n	80015ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014c2:	4b88      	ldr	r3, [pc, #544]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d00c      	beq.n	80014e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ce:	4b85      	ldr	r3, [pc, #532]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	d112      	bne.n	8001500 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014da:	4b82      	ldr	r3, [pc, #520]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014e6:	d10b      	bne.n	8001500 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e8:	4b7e      	ldr	r3, [pc, #504]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d05b      	beq.n	80015ac <HAL_RCC_OscConfig+0x108>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d157      	bne.n	80015ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e242      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001508:	d106      	bne.n	8001518 <HAL_RCC_OscConfig+0x74>
 800150a:	4b76      	ldr	r3, [pc, #472]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a75      	ldr	r2, [pc, #468]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	e01d      	b.n	8001554 <HAL_RCC_OscConfig+0xb0>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001520:	d10c      	bne.n	800153c <HAL_RCC_OscConfig+0x98>
 8001522:	4b70      	ldr	r3, [pc, #448]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a6f      	ldr	r2, [pc, #444]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	4b6d      	ldr	r3, [pc, #436]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a6c      	ldr	r2, [pc, #432]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e00b      	b.n	8001554 <HAL_RCC_OscConfig+0xb0>
 800153c:	4b69      	ldr	r3, [pc, #420]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a68      	ldr	r2, [pc, #416]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b66      	ldr	r3, [pc, #408]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a65      	ldr	r2, [pc, #404]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 800154e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d013      	beq.n	8001584 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff fccc 	bl	8000ef8 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001564:	f7ff fcc8 	bl	8000ef8 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b64      	cmp	r3, #100	; 0x64
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e207      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001576:	4b5b      	ldr	r3, [pc, #364]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0xc0>
 8001582:	e014      	b.n	80015ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff fcb8 	bl	8000ef8 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fcb4 	bl	8000ef8 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	; 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e1f3      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159e:	4b51      	ldr	r3, [pc, #324]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f0      	bne.n	800158c <HAL_RCC_OscConfig+0xe8>
 80015aa:	e000      	b.n	80015ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d063      	beq.n	8001682 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ba:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00b      	beq.n	80015de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015c6:	4b47      	ldr	r3, [pc, #284]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d11c      	bne.n	800160c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015d2:	4b44      	ldr	r3, [pc, #272]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d116      	bne.n	800160c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015de:	4b41      	ldr	r3, [pc, #260]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <HAL_RCC_OscConfig+0x152>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d001      	beq.n	80015f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e1c7      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f6:	4b3b      	ldr	r3, [pc, #236]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4937      	ldr	r1, [pc, #220]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160a:	e03a      	b.n	8001682 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d020      	beq.n	8001656 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001614:	4b34      	ldr	r3, [pc, #208]	; (80016e8 <HAL_RCC_OscConfig+0x244>)
 8001616:	2201      	movs	r2, #1
 8001618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161a:	f7ff fc6d 	bl	8000ef8 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001622:	f7ff fc69 	bl	8000ef8 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e1a8      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001640:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4925      	ldr	r1, [pc, #148]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001650:	4313      	orrs	r3, r2
 8001652:	600b      	str	r3, [r1, #0]
 8001654:	e015      	b.n	8001682 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001656:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <HAL_RCC_OscConfig+0x244>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff fc4c 	bl	8000ef8 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001664:	f7ff fc48 	bl	8000ef8 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e187      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001676:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b00      	cmp	r3, #0
 800168c:	d036      	beq.n	80016fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d016      	beq.n	80016c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <HAL_RCC_OscConfig+0x248>)
 8001698:	2201      	movs	r2, #1
 800169a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169c:	f7ff fc2c 	bl	8000ef8 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a4:	f7ff fc28 	bl	8000ef8 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e167      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80016b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0f0      	beq.n	80016a4 <HAL_RCC_OscConfig+0x200>
 80016c2:	e01b      	b.n	80016fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_RCC_OscConfig+0x248>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ca:	f7ff fc15 	bl	8000ef8 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d0:	e00e      	b.n	80016f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d2:	f7ff fc11 	bl	8000ef8 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d907      	bls.n	80016f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e150      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
 80016e4:	40023800 	.word	0x40023800
 80016e8:	42470000 	.word	0x42470000
 80016ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f0:	4b88      	ldr	r3, [pc, #544]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80016f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1ea      	bne.n	80016d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 8097 	beq.w	8001838 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800170e:	4b81      	ldr	r3, [pc, #516]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10f      	bne.n	800173a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	4b7d      	ldr	r3, [pc, #500]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a7c      	ldr	r2, [pc, #496]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b7a      	ldr	r3, [pc, #488]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001736:	2301      	movs	r3, #1
 8001738:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173a:	4b77      	ldr	r3, [pc, #476]	; (8001918 <HAL_RCC_OscConfig+0x474>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001742:	2b00      	cmp	r3, #0
 8001744:	d118      	bne.n	8001778 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001746:	4b74      	ldr	r3, [pc, #464]	; (8001918 <HAL_RCC_OscConfig+0x474>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a73      	ldr	r2, [pc, #460]	; (8001918 <HAL_RCC_OscConfig+0x474>)
 800174c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001752:	f7ff fbd1 	bl	8000ef8 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800175a:	f7ff fbcd 	bl	8000ef8 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e10c      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176c:	4b6a      	ldr	r3, [pc, #424]	; (8001918 <HAL_RCC_OscConfig+0x474>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0f0      	beq.n	800175a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d106      	bne.n	800178e <HAL_RCC_OscConfig+0x2ea>
 8001780:	4b64      	ldr	r3, [pc, #400]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001784:	4a63      	ldr	r2, [pc, #396]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6713      	str	r3, [r2, #112]	; 0x70
 800178c:	e01c      	b.n	80017c8 <HAL_RCC_OscConfig+0x324>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b05      	cmp	r3, #5
 8001794:	d10c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x30c>
 8001796:	4b5f      	ldr	r3, [pc, #380]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179a:	4a5e      	ldr	r2, [pc, #376]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 800179c:	f043 0304 	orr.w	r3, r3, #4
 80017a0:	6713      	str	r3, [r2, #112]	; 0x70
 80017a2:	4b5c      	ldr	r3, [pc, #368]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80017a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a6:	4a5b      	ldr	r2, [pc, #364]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6713      	str	r3, [r2, #112]	; 0x70
 80017ae:	e00b      	b.n	80017c8 <HAL_RCC_OscConfig+0x324>
 80017b0:	4b58      	ldr	r3, [pc, #352]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80017b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b4:	4a57      	ldr	r2, [pc, #348]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80017b6:	f023 0301 	bic.w	r3, r3, #1
 80017ba:	6713      	str	r3, [r2, #112]	; 0x70
 80017bc:	4b55      	ldr	r3, [pc, #340]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80017be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c0:	4a54      	ldr	r2, [pc, #336]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80017c2:	f023 0304 	bic.w	r3, r3, #4
 80017c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d015      	beq.n	80017fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d0:	f7ff fb92 	bl	8000ef8 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d8:	f7ff fb8e 	bl	8000ef8 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e0cb      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ee:	4b49      	ldr	r3, [pc, #292]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80017f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0ee      	beq.n	80017d8 <HAL_RCC_OscConfig+0x334>
 80017fa:	e014      	b.n	8001826 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fc:	f7ff fb7c 	bl	8000ef8 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001802:	e00a      	b.n	800181a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001804:	f7ff fb78 	bl	8000ef8 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e0b5      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181a:	4b3e      	ldr	r3, [pc, #248]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 800181c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1ee      	bne.n	8001804 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001826:	7dfb      	ldrb	r3, [r7, #23]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d105      	bne.n	8001838 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800182c:	4b39      	ldr	r3, [pc, #228]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	4a38      	ldr	r2, [pc, #224]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001836:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 80a1 	beq.w	8001984 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001842:	4b34      	ldr	r3, [pc, #208]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b08      	cmp	r3, #8
 800184c:	d05c      	beq.n	8001908 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d141      	bne.n	80018da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001856:	4b31      	ldr	r3, [pc, #196]	; (800191c <HAL_RCC_OscConfig+0x478>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7ff fb4c 	bl	8000ef8 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001864:	f7ff fb48 	bl	8000ef8 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e087      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001876:	4b27      	ldr	r3, [pc, #156]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69da      	ldr	r2, [r3, #28]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	019b      	lsls	r3, r3, #6
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	085b      	lsrs	r3, r3, #1
 800189a:	3b01      	subs	r3, #1
 800189c:	041b      	lsls	r3, r3, #16
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	061b      	lsls	r3, r3, #24
 80018a6:	491b      	ldr	r1, [pc, #108]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_RCC_OscConfig+0x478>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b2:	f7ff fb21 	bl	8000ef8 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ba:	f7ff fb1d 	bl	8000ef8 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e05c      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x416>
 80018d8:	e054      	b.n	8001984 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_RCC_OscConfig+0x478>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fb0a 	bl	8000ef8 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff fb06 	bl	8000ef8 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e045      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x444>
 8001906:	e03d      	b.n	8001984 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d107      	bne.n	8001920 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e038      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
 8001914:	40023800 	.word	0x40023800
 8001918:	40007000 	.word	0x40007000
 800191c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <HAL_RCC_OscConfig+0x4ec>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d028      	beq.n	8001980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001938:	429a      	cmp	r2, r3
 800193a:	d121      	bne.n	8001980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001946:	429a      	cmp	r2, r3
 8001948:	d11a      	bne.n	8001980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001950:	4013      	ands	r3, r2
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001956:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001958:	4293      	cmp	r3, r2
 800195a:	d111      	bne.n	8001980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	085b      	lsrs	r3, r3, #1
 8001968:	3b01      	subs	r3, #1
 800196a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800196c:	429a      	cmp	r2, r3
 800196e:	d107      	bne.n	8001980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800197c:	429a      	cmp	r2, r3
 800197e:	d001      	beq.n	8001984 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800

08001994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0cc      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019a8:	4b68      	ldr	r3, [pc, #416]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d90c      	bls.n	80019d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b65      	ldr	r3, [pc, #404]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	4b63      	ldr	r3, [pc, #396]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0b8      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d020      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d005      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019e8:	4b59      	ldr	r3, [pc, #356]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	4a58      	ldr	r2, [pc, #352]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a00:	4b53      	ldr	r3, [pc, #332]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	4a52      	ldr	r2, [pc, #328]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a0c:	4b50      	ldr	r3, [pc, #320]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	494d      	ldr	r1, [pc, #308]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d044      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d107      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a32:	4b47      	ldr	r3, [pc, #284]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d119      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e07f      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d003      	beq.n	8001a52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d107      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a52:	4b3f      	ldr	r3, [pc, #252]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d109      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e06f      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a62:	4b3b      	ldr	r3, [pc, #236]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e067      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a72:	4b37      	ldr	r3, [pc, #220]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f023 0203 	bic.w	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4934      	ldr	r1, [pc, #208]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a84:	f7ff fa38 	bl	8000ef8 <HAL_GetTick>
 8001a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8a:	e00a      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8c:	f7ff fa34 	bl	8000ef8 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e04f      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa2:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 020c 	and.w	r2, r3, #12
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d1eb      	bne.n	8001a8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d20c      	bcs.n	8001adc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e032      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d008      	beq.n	8001afa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae8:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	4916      	ldr	r1, [pc, #88]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d009      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	490e      	ldr	r1, [pc, #56]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b1a:	f000 f821 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	490a      	ldr	r1, [pc, #40]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 8001b2c:	5ccb      	ldrb	r3, [r1, r3]
 8001b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b32:	4a09      	ldr	r2, [pc, #36]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff f8ce 	bl	8000cdc <HAL_InitTick>

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023c00 	.word	0x40023c00
 8001b50:	40023800 	.word	0x40023800
 8001b54:	08007c6c 	.word	0x08007c6c
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	20000004 	.word	0x20000004

08001b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b64:	b094      	sub	sp, #80	; 0x50
 8001b66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b70:	2300      	movs	r3, #0
 8001b72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b78:	4b79      	ldr	r3, [pc, #484]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d00d      	beq.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	f200 80e1 	bhi.w	8001d4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <HAL_RCC_GetSysClockFreq+0x34>
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d003      	beq.n	8001b9a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b92:	e0db      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b94:	4b73      	ldr	r3, [pc, #460]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b98:	e0db      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b9a:	4b73      	ldr	r3, [pc, #460]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b9e:	e0d8      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ba0:	4b6f      	ldr	r3, [pc, #444]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ba8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001baa:	4b6d      	ldr	r3, [pc, #436]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d063      	beq.n	8001c7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb6:	4b6a      	ldr	r3, [pc, #424]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	099b      	lsrs	r3, r3, #6
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bc8:	633b      	str	r3, [r7, #48]	; 0x30
 8001bca:	2300      	movs	r3, #0
 8001bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8001bce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bd2:	4622      	mov	r2, r4
 8001bd4:	462b      	mov	r3, r5
 8001bd6:	f04f 0000 	mov.w	r0, #0
 8001bda:	f04f 0100 	mov.w	r1, #0
 8001bde:	0159      	lsls	r1, r3, #5
 8001be0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001be4:	0150      	lsls	r0, r2, #5
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4621      	mov	r1, r4
 8001bec:	1a51      	subs	r1, r2, r1
 8001bee:	6139      	str	r1, [r7, #16]
 8001bf0:	4629      	mov	r1, r5
 8001bf2:	eb63 0301 	sbc.w	r3, r3, r1
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c04:	4659      	mov	r1, fp
 8001c06:	018b      	lsls	r3, r1, #6
 8001c08:	4651      	mov	r1, sl
 8001c0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c0e:	4651      	mov	r1, sl
 8001c10:	018a      	lsls	r2, r1, #6
 8001c12:	4651      	mov	r1, sl
 8001c14:	ebb2 0801 	subs.w	r8, r2, r1
 8001c18:	4659      	mov	r1, fp
 8001c1a:	eb63 0901 	sbc.w	r9, r3, r1
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c32:	4690      	mov	r8, r2
 8001c34:	4699      	mov	r9, r3
 8001c36:	4623      	mov	r3, r4
 8001c38:	eb18 0303 	adds.w	r3, r8, r3
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	462b      	mov	r3, r5
 8001c40:	eb49 0303 	adc.w	r3, r9, r3
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c52:	4629      	mov	r1, r5
 8001c54:	024b      	lsls	r3, r1, #9
 8001c56:	4621      	mov	r1, r4
 8001c58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	024a      	lsls	r2, r1, #9
 8001c60:	4610      	mov	r0, r2
 8001c62:	4619      	mov	r1, r3
 8001c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c66:	2200      	movs	r2, #0
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c70:	f7fe faf8 	bl	8000264 <__aeabi_uldivmod>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4613      	mov	r3, r2
 8001c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c7c:	e058      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7e:	4b38      	ldr	r3, [pc, #224]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	099b      	lsrs	r3, r3, #6
 8001c84:	2200      	movs	r2, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	4611      	mov	r1, r2
 8001c8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c8e:	623b      	str	r3, [r7, #32]
 8001c90:	2300      	movs	r3, #0
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
 8001c94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c98:	4642      	mov	r2, r8
 8001c9a:	464b      	mov	r3, r9
 8001c9c:	f04f 0000 	mov.w	r0, #0
 8001ca0:	f04f 0100 	mov.w	r1, #0
 8001ca4:	0159      	lsls	r1, r3, #5
 8001ca6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001caa:	0150      	lsls	r0, r2, #5
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4641      	mov	r1, r8
 8001cb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cb6:	4649      	mov	r1, r9
 8001cb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ccc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cd0:	ebb2 040a 	subs.w	r4, r2, sl
 8001cd4:	eb63 050b 	sbc.w	r5, r3, fp
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	00eb      	lsls	r3, r5, #3
 8001ce2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ce6:	00e2      	lsls	r2, r4, #3
 8001ce8:	4614      	mov	r4, r2
 8001cea:	461d      	mov	r5, r3
 8001cec:	4643      	mov	r3, r8
 8001cee:	18e3      	adds	r3, r4, r3
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	464b      	mov	r3, r9
 8001cf4:	eb45 0303 	adc.w	r3, r5, r3
 8001cf8:	607b      	str	r3, [r7, #4]
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	f04f 0300 	mov.w	r3, #0
 8001d02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d06:	4629      	mov	r1, r5
 8001d08:	028b      	lsls	r3, r1, #10
 8001d0a:	4621      	mov	r1, r4
 8001d0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d10:	4621      	mov	r1, r4
 8001d12:	028a      	lsls	r2, r1, #10
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
 8001d1e:	61fa      	str	r2, [r7, #28]
 8001d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d24:	f7fe fa9e 	bl	8000264 <__aeabi_uldivmod>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	0c1b      	lsrs	r3, r3, #16
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d4a:	e002      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3750      	adds	r7, #80	; 0x50
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800
 8001d64:	00f42400 	.word	0x00f42400
 8001d68:	007a1200 	.word	0x007a1200

08001d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000000 	.word	0x20000000

08001d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d88:	f7ff fff0 	bl	8001d6c <HAL_RCC_GetHCLKFreq>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	0a9b      	lsrs	r3, r3, #10
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	4903      	ldr	r1, [pc, #12]	; (8001da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d9a:	5ccb      	ldrb	r3, [r1, r3]
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40023800 	.word	0x40023800
 8001da8:	08007c7c 	.word	0x08007c7c

08001dac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	220f      	movs	r2, #15
 8001dba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_RCC_GetClockConfig+0x5c>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 0203 	and.w	r2, r3, #3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <HAL_RCC_GetClockConfig+0x5c>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <HAL_RCC_GetClockConfig+0x5c>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_RCC_GetClockConfig+0x5c>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dee:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <HAL_RCC_GetClockConfig+0x60>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0207 	and.w	r2, r3, #7
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	601a      	str	r2, [r3, #0]
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40023c00 	.word	0x40023c00

08001e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e041      	b.n	8001ea6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d106      	bne.n	8001e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f839 	bl	8001eae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4610      	mov	r0, r2
 8001e50:	f000 f9c0 	bl	80021d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d001      	beq.n	8001edc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e04e      	b.n	8001f7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a23      	ldr	r2, [pc, #140]	; (8001f88 <HAL_TIM_Base_Start_IT+0xc4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d022      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x80>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f06:	d01d      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x80>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a1f      	ldr	r2, [pc, #124]	; (8001f8c <HAL_TIM_Base_Start_IT+0xc8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d018      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x80>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1e      	ldr	r2, [pc, #120]	; (8001f90 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d013      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x80>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a1c      	ldr	r2, [pc, #112]	; (8001f94 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00e      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x80>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a1b      	ldr	r2, [pc, #108]	; (8001f98 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d009      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x80>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <HAL_TIM_Base_Start_IT+0xd8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d004      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x80>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a18      	ldr	r2, [pc, #96]	; (8001fa0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d111      	bne.n	8001f68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d010      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 0201 	orr.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f66:	e007      	b.n	8001f78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40010000 	.word	0x40010000
 8001f8c:	40000400 	.word	0x40000400
 8001f90:	40000800 	.word	0x40000800
 8001f94:	40000c00 	.word	0x40000c00
 8001f98:	40010400 	.word	0x40010400
 8001f9c:	40014000 	.word	0x40014000
 8001fa0:	40001800 	.word	0x40001800

08001fa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d020      	beq.n	8002008 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d01b      	beq.n	8002008 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0202 	mvn.w	r2, #2
 8001fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f8d2 	bl	8002198 <HAL_TIM_IC_CaptureCallback>
 8001ff4:	e005      	b.n	8002002 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f8c4 	bl	8002184 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f8d5 	bl	80021ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	2b00      	cmp	r3, #0
 8002010:	d020      	beq.n	8002054 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	d01b      	beq.n	8002054 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0204 	mvn.w	r2, #4
 8002024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2202      	movs	r2, #2
 800202a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f8ac 	bl	8002198 <HAL_TIM_IC_CaptureCallback>
 8002040:	e005      	b.n	800204e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f89e 	bl	8002184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f8af 	bl	80021ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d020      	beq.n	80020a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01b      	beq.n	80020a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f06f 0208 	mvn.w	r2, #8
 8002070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2204      	movs	r2, #4
 8002076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f886 	bl	8002198 <HAL_TIM_IC_CaptureCallback>
 800208c:	e005      	b.n	800209a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f878 	bl	8002184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f889 	bl	80021ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d020      	beq.n	80020ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d01b      	beq.n	80020ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0210 	mvn.w	r2, #16
 80020bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2208      	movs	r2, #8
 80020c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f860 	bl	8002198 <HAL_TIM_IC_CaptureCallback>
 80020d8:	e005      	b.n	80020e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f852 	bl	8002184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f863 	bl	80021ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00c      	beq.n	8002110 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d007      	beq.n	8002110 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0201 	mvn.w	r2, #1
 8002108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7fe fda6 	bl	8000c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00c      	beq.n	8002134 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002120:	2b00      	cmp	r3, #0
 8002122:	d007      	beq.n	8002134 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800212c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f906 	bl	8002340 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00c      	beq.n	8002158 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002144:	2b00      	cmp	r3, #0
 8002146:	d007      	beq.n	8002158 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f834 	bl	80021c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f003 0320 	and.w	r3, r3, #32
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00c      	beq.n	800217c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f003 0320 	and.w	r3, r3, #32
 8002168:	2b00      	cmp	r3, #0
 800216a:	d007      	beq.n	800217c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0220 	mvn.w	r2, #32
 8002174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f8d8 	bl	800232c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800217c:	bf00      	nop
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a46      	ldr	r2, [pc, #280]	; (8002300 <TIM_Base_SetConfig+0x12c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d013      	beq.n	8002214 <TIM_Base_SetConfig+0x40>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f2:	d00f      	beq.n	8002214 <TIM_Base_SetConfig+0x40>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a43      	ldr	r2, [pc, #268]	; (8002304 <TIM_Base_SetConfig+0x130>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d00b      	beq.n	8002214 <TIM_Base_SetConfig+0x40>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a42      	ldr	r2, [pc, #264]	; (8002308 <TIM_Base_SetConfig+0x134>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d007      	beq.n	8002214 <TIM_Base_SetConfig+0x40>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a41      	ldr	r2, [pc, #260]	; (800230c <TIM_Base_SetConfig+0x138>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d003      	beq.n	8002214 <TIM_Base_SetConfig+0x40>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a40      	ldr	r2, [pc, #256]	; (8002310 <TIM_Base_SetConfig+0x13c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d108      	bne.n	8002226 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800221a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	4313      	orrs	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a35      	ldr	r2, [pc, #212]	; (8002300 <TIM_Base_SetConfig+0x12c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d02b      	beq.n	8002286 <TIM_Base_SetConfig+0xb2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002234:	d027      	beq.n	8002286 <TIM_Base_SetConfig+0xb2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a32      	ldr	r2, [pc, #200]	; (8002304 <TIM_Base_SetConfig+0x130>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d023      	beq.n	8002286 <TIM_Base_SetConfig+0xb2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a31      	ldr	r2, [pc, #196]	; (8002308 <TIM_Base_SetConfig+0x134>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d01f      	beq.n	8002286 <TIM_Base_SetConfig+0xb2>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a30      	ldr	r2, [pc, #192]	; (800230c <TIM_Base_SetConfig+0x138>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d01b      	beq.n	8002286 <TIM_Base_SetConfig+0xb2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a2f      	ldr	r2, [pc, #188]	; (8002310 <TIM_Base_SetConfig+0x13c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d017      	beq.n	8002286 <TIM_Base_SetConfig+0xb2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a2e      	ldr	r2, [pc, #184]	; (8002314 <TIM_Base_SetConfig+0x140>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d013      	beq.n	8002286 <TIM_Base_SetConfig+0xb2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a2d      	ldr	r2, [pc, #180]	; (8002318 <TIM_Base_SetConfig+0x144>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00f      	beq.n	8002286 <TIM_Base_SetConfig+0xb2>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a2c      	ldr	r2, [pc, #176]	; (800231c <TIM_Base_SetConfig+0x148>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00b      	beq.n	8002286 <TIM_Base_SetConfig+0xb2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a2b      	ldr	r2, [pc, #172]	; (8002320 <TIM_Base_SetConfig+0x14c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d007      	beq.n	8002286 <TIM_Base_SetConfig+0xb2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a2a      	ldr	r2, [pc, #168]	; (8002324 <TIM_Base_SetConfig+0x150>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d003      	beq.n	8002286 <TIM_Base_SetConfig+0xb2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a29      	ldr	r2, [pc, #164]	; (8002328 <TIM_Base_SetConfig+0x154>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d108      	bne.n	8002298 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800228c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4313      	orrs	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a10      	ldr	r2, [pc, #64]	; (8002300 <TIM_Base_SetConfig+0x12c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d003      	beq.n	80022cc <TIM_Base_SetConfig+0xf8>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a12      	ldr	r2, [pc, #72]	; (8002310 <TIM_Base_SetConfig+0x13c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d103      	bne.n	80022d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d105      	bne.n	80022f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f023 0201 	bic.w	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	611a      	str	r2, [r3, #16]
  }
}
 80022f2:	bf00      	nop
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40010000 	.word	0x40010000
 8002304:	40000400 	.word	0x40000400
 8002308:	40000800 	.word	0x40000800
 800230c:	40000c00 	.word	0x40000c00
 8002310:	40010400 	.word	0x40010400
 8002314:	40014000 	.word	0x40014000
 8002318:	40014400 	.word	0x40014400
 800231c:	40014800 	.word	0x40014800
 8002320:	40001800 	.word	0x40001800
 8002324:	40001c00 	.word	0x40001c00
 8002328:	40002000 	.word	0x40002000

0800232c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f103 0208 	add.w	r2, r3, #8
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f04f 32ff 	mov.w	r2, #4294967295
 800236c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f103 0208 	add.w	r2, r3, #8
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f103 0208 	add.w	r2, r3, #8
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80023ae:	b480      	push	{r7}
 80023b0:	b085      	sub	sp, #20
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	601a      	str	r2, [r3, #0]
}
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80023f6:	b480      	push	{r7}
 80023f8:	b085      	sub	sp, #20
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240c:	d103      	bne.n	8002416 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	e00c      	b.n	8002430 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3308      	adds	r3, #8
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	e002      	b.n	8002424 <vListInsert+0x2e>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	429a      	cmp	r2, r3
 800242e:	d2f6      	bcs.n	800241e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	601a      	str	r2, [r3, #0]
}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6892      	ldr	r2, [r2, #8]
 800247e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6852      	ldr	r2, [r2, #4]
 8002488:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	429a      	cmp	r2, r3
 8002492:	d103      	bne.n	800249c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	1e5a      	subs	r2, r3, #1
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10a      	bne.n	80024e6 <xQueueGenericReset+0x2a>
        __asm volatile
 80024d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d4:	f383 8811 	msr	BASEPRI, r3
 80024d8:	f3bf 8f6f 	isb	sy
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	60bb      	str	r3, [r7, #8]
    }
 80024e2:	bf00      	nop
 80024e4:	e7fe      	b.n	80024e4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80024e6:	f002 fb47 	bl	8004b78 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f2:	68f9      	ldr	r1, [r7, #12]
 80024f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	441a      	add	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002516:	3b01      	subs	r3, #1
 8002518:	68f9      	ldr	r1, [r7, #12]
 800251a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	441a      	add	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	22ff      	movs	r2, #255	; 0xff
 800252a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	22ff      	movs	r2, #255	; 0xff
 8002532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d114      	bne.n	8002566 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d01a      	beq.n	800257a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	3310      	adds	r3, #16
 8002548:	4618      	mov	r0, r3
 800254a:	f001 faa1 	bl	8003a90 <xTaskRemoveFromEventList>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d012      	beq.n	800257a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <xQueueGenericReset+0xcc>)
 8002556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	f3bf 8f4f 	dsb	sy
 8002560:	f3bf 8f6f 	isb	sy
 8002564:	e009      	b.n	800257a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	3310      	adds	r3, #16
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fef2 	bl	8002354 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	3324      	adds	r3, #36	; 0x24
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff feed 	bl	8002354 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800257a:	f002 fb2d 	bl	8004bd8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800257e:	2301      	movs	r3, #1
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	e000ed04 	.word	0xe000ed04

0800258c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800258c:	b580      	push	{r7, lr}
 800258e:	b08c      	sub	sp, #48	; 0x30
 8002590:	af02      	add	r7, sp, #8
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	4613      	mov	r3, r2
 8002598:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10a      	bne.n	80025b6 <xQueueGenericCreate+0x2a>
        __asm volatile
 80025a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a4:	f383 8811 	msr	BASEPRI, r3
 80025a8:	f3bf 8f6f 	isb	sy
 80025ac:	f3bf 8f4f 	dsb	sy
 80025b0:	61bb      	str	r3, [r7, #24]
    }
 80025b2:	bf00      	nop
 80025b4:	e7fe      	b.n	80025b4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	fb02 f303 	mul.w	r3, r2, r3
 80025be:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d006      	beq.n	80025d4 <xQueueGenericCreate+0x48>
 80025c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d101      	bne.n	80025d8 <xQueueGenericCreate+0x4c>
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <xQueueGenericCreate+0x4e>
 80025d8:	2300      	movs	r3, #0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10a      	bne.n	80025f4 <xQueueGenericCreate+0x68>
        __asm volatile
 80025de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e2:	f383 8811 	msr	BASEPRI, r3
 80025e6:	f3bf 8f6f 	isb	sy
 80025ea:	f3bf 8f4f 	dsb	sy
 80025ee:	617b      	str	r3, [r7, #20]
    }
 80025f0:	bf00      	nop
 80025f2:	e7fe      	b.n	80025f2 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80025fa:	d90a      	bls.n	8002612 <xQueueGenericCreate+0x86>
        __asm volatile
 80025fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002600:	f383 8811 	msr	BASEPRI, r3
 8002604:	f3bf 8f6f 	isb	sy
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	613b      	str	r3, [r7, #16]
    }
 800260e:	bf00      	nop
 8002610:	e7fe      	b.n	8002610 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	3350      	adds	r3, #80	; 0x50
 8002616:	4618      	mov	r0, r3
 8002618:	f002 fbd8 	bl	8004dcc <pvPortMalloc>
 800261c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00d      	beq.n	8002640 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	3350      	adds	r3, #80	; 0x50
 800262c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800262e:	79fa      	ldrb	r2, [r7, #7]
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	4613      	mov	r3, r2
 8002636:	69fa      	ldr	r2, [r7, #28]
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 f805 	bl	800264a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002640:	6a3b      	ldr	r3, [r7, #32]
    }
 8002642:	4618      	mov	r0, r3
 8002644:	3728      	adds	r7, #40	; 0x28
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b084      	sub	sp, #16
 800264e:	af00      	add	r7, sp, #0
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
 8002656:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d103      	bne.n	8002666 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	e002      	b.n	800266c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002678:	2101      	movs	r1, #1
 800267a:	69b8      	ldr	r0, [r7, #24]
 800267c:	f7ff ff1e 	bl	80024bc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	78fa      	ldrb	r2, [r7, #3]
 8002684:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	68f9      	ldr	r1, [r7, #12]
 800268e:	2073      	movs	r0, #115	; 0x73
 8002690:	f004 fac2 	bl	8006c18 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002694:	bf00      	nop
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b090      	sub	sp, #64	; 0x40
 80026a0:	af02      	add	r7, sp, #8
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80026aa:	2300      	movs	r3, #0
 80026ac:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80026b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10a      	bne.n	80026ce <xQueueGenericSend+0x32>
        __asm volatile
 80026b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026bc:	f383 8811 	msr	BASEPRI, r3
 80026c0:	f3bf 8f6f 	isb	sy
 80026c4:	f3bf 8f4f 	dsb	sy
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80026ca:	bf00      	nop
 80026cc:	e7fe      	b.n	80026cc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d103      	bne.n	80026dc <xQueueGenericSend+0x40>
 80026d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <xQueueGenericSend+0x44>
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <xQueueGenericSend+0x46>
 80026e0:	2300      	movs	r3, #0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10a      	bne.n	80026fc <xQueueGenericSend+0x60>
        __asm volatile
 80026e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ea:	f383 8811 	msr	BASEPRI, r3
 80026ee:	f3bf 8f6f 	isb	sy
 80026f2:	f3bf 8f4f 	dsb	sy
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80026f8:	bf00      	nop
 80026fa:	e7fe      	b.n	80026fa <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d103      	bne.n	800270a <xQueueGenericSend+0x6e>
 8002702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002706:	2b01      	cmp	r3, #1
 8002708:	d101      	bne.n	800270e <xQueueGenericSend+0x72>
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <xQueueGenericSend+0x74>
 800270e:	2300      	movs	r3, #0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10a      	bne.n	800272a <xQueueGenericSend+0x8e>
        __asm volatile
 8002714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002718:	f383 8811 	msr	BASEPRI, r3
 800271c:	f3bf 8f6f 	isb	sy
 8002720:	f3bf 8f4f 	dsb	sy
 8002724:	623b      	str	r3, [r7, #32]
    }
 8002726:	bf00      	nop
 8002728:	e7fe      	b.n	8002728 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800272a:	f001 fb51 	bl	8003dd0 <xTaskGetSchedulerState>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <xQueueGenericSend+0x9e>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <xQueueGenericSend+0xa2>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <xQueueGenericSend+0xa4>
 800273e:	2300      	movs	r3, #0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10a      	bne.n	800275a <xQueueGenericSend+0xbe>
        __asm volatile
 8002744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002748:	f383 8811 	msr	BASEPRI, r3
 800274c:	f3bf 8f6f 	isb	sy
 8002750:	f3bf 8f4f 	dsb	sy
 8002754:	61fb      	str	r3, [r7, #28]
    }
 8002756:	bf00      	nop
 8002758:	e7fe      	b.n	8002758 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800275a:	f002 fa0d 	bl	8004b78 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800275e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002766:	429a      	cmp	r2, r3
 8002768:	d302      	bcc.n	8002770 <xQueueGenericSend+0xd4>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b02      	cmp	r3, #2
 800276e:	d136      	bne.n	80027de <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002772:	4618      	mov	r0, r3
 8002774:	f004 ffde 	bl	8007734 <SEGGER_SYSVIEW_ShrinkId>
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	460b      	mov	r3, r1
 8002782:	4601      	mov	r1, r0
 8002784:	205a      	movs	r0, #90	; 0x5a
 8002786:	f004 fabd 	bl	8006d04 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002790:	f000 fa78 	bl	8002c84 <prvCopyDataToQueue>
 8002794:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	2b00      	cmp	r3, #0
 800279c:	d010      	beq.n	80027c0 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800279e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a0:	3324      	adds	r3, #36	; 0x24
 80027a2:	4618      	mov	r0, r3
 80027a4:	f001 f974 	bl	8003a90 <xTaskRemoveFromEventList>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d013      	beq.n	80027d6 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80027ae:	4b4d      	ldr	r3, [pc, #308]	; (80028e4 <xQueueGenericSend+0x248>)
 80027b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	f3bf 8f4f 	dsb	sy
 80027ba:	f3bf 8f6f 	isb	sy
 80027be:	e00a      	b.n	80027d6 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80027c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d007      	beq.n	80027d6 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80027c6:	4b47      	ldr	r3, [pc, #284]	; (80028e4 <xQueueGenericSend+0x248>)
 80027c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	f3bf 8f4f 	dsb	sy
 80027d2:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80027d6:	f002 f9ff 	bl	8004bd8 <vPortExitCritical>
                return pdPASS;
 80027da:	2301      	movs	r3, #1
 80027dc:	e07d      	b.n	80028da <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d110      	bne.n	8002806 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80027e4:	f002 f9f8 	bl	8004bd8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80027e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ea:	4618      	mov	r0, r3
 80027ec:	f004 ffa2 	bl	8007734 <SEGGER_SYSVIEW_ShrinkId>
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	460b      	mov	r3, r1
 80027fa:	4601      	mov	r1, r0
 80027fc:	205a      	movs	r0, #90	; 0x5a
 80027fe:	f004 fa81 	bl	8006d04 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002802:	2300      	movs	r3, #0
 8002804:	e069      	b.n	80028da <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002808:	2b00      	cmp	r3, #0
 800280a:	d106      	bne.n	800281a <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	4618      	mov	r0, r3
 8002812:	f001 f9a3 	bl	8003b5c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002816:	2301      	movs	r3, #1
 8002818:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800281a:	f002 f9dd 	bl	8004bd8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800281e:	f000 feef 	bl	8003600 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002822:	f002 f9a9 	bl	8004b78 <vPortEnterCritical>
 8002826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002828:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800282c:	b25b      	sxtb	r3, r3
 800282e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002832:	d103      	bne.n	800283c <xQueueGenericSend+0x1a0>
 8002834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800283c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002842:	b25b      	sxtb	r3, r3
 8002844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002848:	d103      	bne.n	8002852 <xQueueGenericSend+0x1b6>
 800284a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002852:	f002 f9c1 	bl	8004bd8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002856:	1d3a      	adds	r2, r7, #4
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	4611      	mov	r1, r2
 800285e:	4618      	mov	r0, r3
 8002860:	f001 f992 	bl	8003b88 <xTaskCheckForTimeOut>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d124      	bne.n	80028b4 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800286a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800286c:	f000 fb02 	bl	8002e74 <prvIsQueueFull>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d018      	beq.n	80028a8 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002878:	3310      	adds	r3, #16
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	4611      	mov	r1, r2
 800287e:	4618      	mov	r0, r3
 8002880:	f001 f8b4 	bl	80039ec <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002886:	f000 fa8d 	bl	8002da4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800288a:	f000 fec7 	bl	800361c <xTaskResumeAll>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	f47f af62 	bne.w	800275a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002896:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <xQueueGenericSend+0x248>)
 8002898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	f3bf 8f4f 	dsb	sy
 80028a2:	f3bf 8f6f 	isb	sy
 80028a6:	e758      	b.n	800275a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80028a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028aa:	f000 fa7b 	bl	8002da4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80028ae:	f000 feb5 	bl	800361c <xTaskResumeAll>
 80028b2:	e752      	b.n	800275a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80028b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028b6:	f000 fa75 	bl	8002da4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80028ba:	f000 feaf 	bl	800361c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80028be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c0:	4618      	mov	r0, r3
 80028c2:	f004 ff37 	bl	8007734 <SEGGER_SYSVIEW_ShrinkId>
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	460b      	mov	r3, r1
 80028d0:	4601      	mov	r1, r0
 80028d2:	205a      	movs	r0, #90	; 0x5a
 80028d4:	f004 fa16 	bl	8006d04 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80028d8:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3738      	adds	r7, #56	; 0x38
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	e000ed04 	.word	0xe000ed04

080028e8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b090      	sub	sp, #64	; 0x40
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80028fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10a      	bne.n	8002916 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002904:	f383 8811 	msr	BASEPRI, r3
 8002908:	f3bf 8f6f 	isb	sy
 800290c:	f3bf 8f4f 	dsb	sy
 8002910:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002912:	bf00      	nop
 8002914:	e7fe      	b.n	8002914 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d103      	bne.n	8002924 <xQueueGenericSendFromISR+0x3c>
 800291c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <xQueueGenericSendFromISR+0x40>
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <xQueueGenericSendFromISR+0x42>
 8002928:	2300      	movs	r3, #0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10a      	bne.n	8002944 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800292e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002932:	f383 8811 	msr	BASEPRI, r3
 8002936:	f3bf 8f6f 	isb	sy
 800293a:	f3bf 8f4f 	dsb	sy
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002940:	bf00      	nop
 8002942:	e7fe      	b.n	8002942 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d103      	bne.n	8002952 <xQueueGenericSendFromISR+0x6a>
 800294a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <xQueueGenericSendFromISR+0x6e>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <xQueueGenericSendFromISR+0x70>
 8002956:	2300      	movs	r3, #0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10a      	bne.n	8002972 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800295c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002960:	f383 8811 	msr	BASEPRI, r3
 8002964:	f3bf 8f6f 	isb	sy
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	623b      	str	r3, [r7, #32]
    }
 800296e:	bf00      	nop
 8002970:	e7fe      	b.n	8002970 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002972:	f002 f9eb 	bl	8004d4c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002976:	f3ef 8211 	mrs	r2, BASEPRI
 800297a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297e:	f383 8811 	msr	BASEPRI, r3
 8002982:	f3bf 8f6f 	isb	sy
 8002986:	f3bf 8f4f 	dsb	sy
 800298a:	61fa      	str	r2, [r7, #28]
 800298c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800298e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002990:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299a:	429a      	cmp	r2, r3
 800299c:	d302      	bcc.n	80029a4 <xQueueGenericSendFromISR+0xbc>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d148      	bne.n	8002a36 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80029a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80029b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b6:	4618      	mov	r0, r3
 80029b8:	f004 febc 	bl	8007734 <SEGGER_SYSVIEW_ShrinkId>
 80029bc:	4601      	mov	r1, r0
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	461a      	mov	r2, r3
 80029c2:	2060      	movs	r0, #96	; 0x60
 80029c4:	f004 f8ce 	bl	8006b64 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80029ce:	f000 f959 	bl	8002c84 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80029d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80029d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029da:	d112      	bne.n	8002a02 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d025      	beq.n	8002a30 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e6:	3324      	adds	r3, #36	; 0x24
 80029e8:	4618      	mov	r0, r3
 80029ea:	f001 f851 	bl	8003a90 <xTaskRemoveFromEventList>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d01d      	beq.n	8002a30 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d01a      	beq.n	8002a30 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	e016      	b.n	8002a30 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002a02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a06:	2b7f      	cmp	r3, #127	; 0x7f
 8002a08:	d10a      	bne.n	8002a20 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0e:	f383 8811 	msr	BASEPRI, r3
 8002a12:	f3bf 8f6f 	isb	sy
 8002a16:	f3bf 8f4f 	dsb	sy
 8002a1a:	617b      	str	r3, [r7, #20]
    }
 8002a1c:	bf00      	nop
 8002a1e:	e7fe      	b.n	8002a1e <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a24:	3301      	adds	r3, #1
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	b25a      	sxtb	r2, r3
 8002a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002a30:	2301      	movs	r3, #1
 8002a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002a34:	e00b      	b.n	8002a4e <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f004 fe7b 	bl	8007734 <SEGGER_SYSVIEW_ShrinkId>
 8002a3e:	4601      	mov	r1, r0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	461a      	mov	r2, r3
 8002a44:	2060      	movs	r0, #96	; 0x60
 8002a46:	f004 f88d 	bl	8006b64 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a50:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002a58:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3740      	adds	r7, #64	; 0x40
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002a64:	b590      	push	{r4, r7, lr}
 8002a66:	b08f      	sub	sp, #60	; 0x3c
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002a70:	2300      	movs	r3, #0
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10a      	bne.n	8002a94 <xQueueReceive+0x30>
        __asm volatile
 8002a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a82:	f383 8811 	msr	BASEPRI, r3
 8002a86:	f3bf 8f6f 	isb	sy
 8002a8a:	f3bf 8f4f 	dsb	sy
 8002a8e:	623b      	str	r3, [r7, #32]
    }
 8002a90:	bf00      	nop
 8002a92:	e7fe      	b.n	8002a92 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d103      	bne.n	8002aa2 <xQueueReceive+0x3e>
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <xQueueReceive+0x42>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <xQueueReceive+0x44>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10a      	bne.n	8002ac2 <xQueueReceive+0x5e>
        __asm volatile
 8002aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab0:	f383 8811 	msr	BASEPRI, r3
 8002ab4:	f3bf 8f6f 	isb	sy
 8002ab8:	f3bf 8f4f 	dsb	sy
 8002abc:	61fb      	str	r3, [r7, #28]
    }
 8002abe:	bf00      	nop
 8002ac0:	e7fe      	b.n	8002ac0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ac2:	f001 f985 	bl	8003dd0 <xTaskGetSchedulerState>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d102      	bne.n	8002ad2 <xQueueReceive+0x6e>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <xQueueReceive+0x72>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <xQueueReceive+0x74>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10a      	bne.n	8002af2 <xQueueReceive+0x8e>
        __asm volatile
 8002adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae0:	f383 8811 	msr	BASEPRI, r3
 8002ae4:	f3bf 8f6f 	isb	sy
 8002ae8:	f3bf 8f4f 	dsb	sy
 8002aec:	61bb      	str	r3, [r7, #24]
    }
 8002aee:	bf00      	nop
 8002af0:	e7fe      	b.n	8002af0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002af2:	f002 f841 	bl	8004b78 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d02f      	beq.n	8002b62 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b02:	68b9      	ldr	r1, [r7, #8]
 8002b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b06:	f000 f927 	bl	8002d58 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f004 fe11 	bl	8007734 <SEGGER_SYSVIEW_ShrinkId>
 8002b12:	4604      	mov	r4, r0
 8002b14:	2000      	movs	r0, #0
 8002b16:	f004 fe0d 	bl	8007734 <SEGGER_SYSVIEW_ShrinkId>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2101      	movs	r1, #1
 8002b20:	9100      	str	r1, [sp, #0]
 8002b22:	4621      	mov	r1, r4
 8002b24:	205c      	movs	r0, #92	; 0x5c
 8002b26:	f004 f8ed 	bl	8006d04 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	1e5a      	subs	r2, r3, #1
 8002b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b30:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00f      	beq.n	8002b5a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3c:	3310      	adds	r3, #16
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 ffa6 	bl	8003a90 <xTaskRemoveFromEventList>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d007      	beq.n	8002b5a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002b4a:	4b4d      	ldr	r3, [pc, #308]	; (8002c80 <xQueueReceive+0x21c>)
 8002b4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	f3bf 8f4f 	dsb	sy
 8002b56:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002b5a:	f002 f83d 	bl	8004bd8 <vPortExitCritical>
                return pdPASS;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e08a      	b.n	8002c78 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d113      	bne.n	8002b90 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002b68:	f002 f836 	bl	8004bd8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f004 fde0 	bl	8007734 <SEGGER_SYSVIEW_ShrinkId>
 8002b74:	4604      	mov	r4, r0
 8002b76:	2000      	movs	r0, #0
 8002b78:	f004 fddc 	bl	8007734 <SEGGER_SYSVIEW_ShrinkId>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2101      	movs	r1, #1
 8002b82:	9100      	str	r1, [sp, #0]
 8002b84:	4621      	mov	r1, r4
 8002b86:	205c      	movs	r0, #92	; 0x5c
 8002b88:	f004 f8bc 	bl	8006d04 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e073      	b.n	8002c78 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002b96:	f107 0310 	add.w	r3, r7, #16
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 ffde 	bl	8003b5c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002ba4:	f002 f818 	bl	8004bd8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002ba8:	f000 fd2a 	bl	8003600 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002bac:	f001 ffe4 	bl	8004b78 <vPortEnterCritical>
 8002bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bb6:	b25b      	sxtb	r3, r3
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d103      	bne.n	8002bc6 <xQueueReceive+0x162>
 8002bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bcc:	b25b      	sxtb	r3, r3
 8002bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd2:	d103      	bne.n	8002bdc <xQueueReceive+0x178>
 8002bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bdc:	f001 fffc 	bl	8004bd8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002be0:	1d3a      	adds	r2, r7, #4
 8002be2:	f107 0310 	add.w	r3, r7, #16
 8002be6:	4611      	mov	r1, r2
 8002be8:	4618      	mov	r0, r3
 8002bea:	f000 ffcd 	bl	8003b88 <xTaskCheckForTimeOut>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d124      	bne.n	8002c3e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bf6:	f000 f927 	bl	8002e48 <prvIsQueueEmpty>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d018      	beq.n	8002c32 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c02:	3324      	adds	r3, #36	; 0x24
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	4611      	mov	r1, r2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 feef 	bl	80039ec <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002c0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c10:	f000 f8c8 	bl	8002da4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002c14:	f000 fd02 	bl	800361c <xTaskResumeAll>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f47f af69 	bne.w	8002af2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002c20:	4b17      	ldr	r3, [pc, #92]	; (8002c80 <xQueueReceive+0x21c>)
 8002c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	f3bf 8f4f 	dsb	sy
 8002c2c:	f3bf 8f6f 	isb	sy
 8002c30:	e75f      	b.n	8002af2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002c32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c34:	f000 f8b6 	bl	8002da4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002c38:	f000 fcf0 	bl	800361c <xTaskResumeAll>
 8002c3c:	e759      	b.n	8002af2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002c3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c40:	f000 f8b0 	bl	8002da4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002c44:	f000 fcea 	bl	800361c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c4a:	f000 f8fd 	bl	8002e48 <prvIsQueueEmpty>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f43f af4e 	beq.w	8002af2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f004 fd6b 	bl	8007734 <SEGGER_SYSVIEW_ShrinkId>
 8002c5e:	4604      	mov	r4, r0
 8002c60:	2000      	movs	r0, #0
 8002c62:	f004 fd67 	bl	8007734 <SEGGER_SYSVIEW_ShrinkId>
 8002c66:	4602      	mov	r2, r0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	9100      	str	r1, [sp, #0]
 8002c6e:	4621      	mov	r1, r4
 8002c70:	205c      	movs	r0, #92	; 0x5c
 8002c72:	f004 f847 	bl	8006d04 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002c76:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3734      	adds	r7, #52	; 0x34
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd90      	pop	{r4, r7, pc}
 8002c80:	e000ed04 	.word	0xe000ed04

08002c84 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c98:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10d      	bne.n	8002cbe <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d14d      	bne.n	8002d46 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f001 f8ac 	bl	8003e0c <xTaskPriorityDisinherit>
 8002cb4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	e043      	b.n	8002d46 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d119      	bne.n	8002cf8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6858      	ldr	r0, [r3, #4]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	461a      	mov	r2, r3
 8002cce:	68b9      	ldr	r1, [r7, #8]
 8002cd0:	f004 fef6 	bl	8007ac0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	441a      	add	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d32b      	bcc.n	8002d46 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	e026      	b.n	8002d46 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	68d8      	ldr	r0, [r3, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	461a      	mov	r2, r3
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	f004 fedc 	bl	8007ac0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	425b      	negs	r3, r3
 8002d12:	441a      	add	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d207      	bcs.n	8002d34 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	425b      	negs	r3, r3
 8002d2e:	441a      	add	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d105      	bne.n	8002d46 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002d4e:	697b      	ldr	r3, [r7, #20]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d018      	beq.n	8002d9c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	441a      	add	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d303      	bcc.n	8002d8c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68d9      	ldr	r1, [r3, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	461a      	mov	r2, r3
 8002d96:	6838      	ldr	r0, [r7, #0]
 8002d98:	f004 fe92 	bl	8007ac0 <memcpy>
    }
}
 8002d9c:	bf00      	nop
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002dac:	f001 fee4 	bl	8004b78 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002db6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002db8:	e011      	b.n	8002dde <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d012      	beq.n	8002de8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3324      	adds	r3, #36	; 0x24
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 fe62 	bl	8003a90 <xTaskRemoveFromEventList>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002dd2:	f000 ff3f 	bl	8003c54 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	dce9      	bgt.n	8002dba <prvUnlockQueue+0x16>
 8002de6:	e000      	b.n	8002dea <prvUnlockQueue+0x46>
                        break;
 8002de8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	22ff      	movs	r2, #255	; 0xff
 8002dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002df2:	f001 fef1 	bl	8004bd8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002df6:	f001 febf 	bl	8004b78 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e00:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e02:	e011      	b.n	8002e28 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d012      	beq.n	8002e32 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3310      	adds	r3, #16
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 fe3d 	bl	8003a90 <xTaskRemoveFromEventList>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002e1c:	f000 ff1a 	bl	8003c54 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002e20:	7bbb      	ldrb	r3, [r7, #14]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	dce9      	bgt.n	8002e04 <prvUnlockQueue+0x60>
 8002e30:	e000      	b.n	8002e34 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002e32:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	22ff      	movs	r2, #255	; 0xff
 8002e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002e3c:	f001 fecc 	bl	8004bd8 <vPortExitCritical>
}
 8002e40:	bf00      	nop
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002e50:	f001 fe92 	bl	8004b78 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	e001      	b.n	8002e66 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002e66:	f001 feb7 	bl	8004bd8 <vPortExitCritical>

    return xReturn;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002e7c:	f001 fe7c 	bl	8004b78 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d102      	bne.n	8002e92 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	e001      	b.n	8002e96 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002e96:	f001 fe9f 	bl	8004bd8 <vPortExitCritical>

    return xReturn;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	e01e      	b.n	8002ef2 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002eb4:	4a13      	ldr	r2, [pc, #76]	; (8002f04 <vQueueAddToRegistry+0x60>)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d115      	bne.n	8002eec <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ec0:	4910      	ldr	r1, [pc, #64]	; (8002f04 <vQueueAddToRegistry+0x60>)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002eca:	4a0e      	ldr	r2, [pc, #56]	; (8002f04 <vQueueAddToRegistry+0x60>)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f004 fc2b 	bl	8007734 <SEGGER_SYSVIEW_ShrinkId>
 8002ede:	4601      	mov	r1, r0
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	2071      	movs	r0, #113	; 0x71
 8002ee6:	f003 fe3d 	bl	8006b64 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002eea:	e006      	b.n	8002efa <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2b07      	cmp	r3, #7
 8002ef6:	d9dd      	bls.n	8002eb4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002ef8:	bf00      	nop
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	2000009c 	.word	0x2000009c

08002f08 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002f18:	f001 fe2e 	bl	8004b78 <vPortEnterCritical>
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f22:	b25b      	sxtb	r3, r3
 8002f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f28:	d103      	bne.n	8002f32 <vQueueWaitForMessageRestricted+0x2a>
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f38:	b25b      	sxtb	r3, r3
 8002f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3e:	d103      	bne.n	8002f48 <vQueueWaitForMessageRestricted+0x40>
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f48:	f001 fe46 	bl	8004bd8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d106      	bne.n	8002f62 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	3324      	adds	r3, #36	; 0x24
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	68b9      	ldr	r1, [r7, #8]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fd69 	bl	8003a34 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002f62:	6978      	ldr	r0, [r7, #20]
 8002f64:	f7ff ff1e 	bl	8002da4 <prvUnlockQueue>
    }
 8002f68:	bf00      	nop
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08c      	sub	sp, #48	; 0x30
 8002f74:	af04      	add	r7, sp, #16
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f001 ff21 	bl	8004dcc <pvPortMalloc>
 8002f8a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00e      	beq.n	8002fb0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f92:	2058      	movs	r0, #88	; 0x58
 8002f94:	f001 ff1a 	bl	8004dcc <pvPortMalloc>
 8002f98:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	631a      	str	r2, [r3, #48]	; 0x30
 8002fa6:	e005      	b.n	8002fb4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002fa8:	6978      	ldr	r0, [r7, #20]
 8002faa:	f001 ffef 	bl	8004f8c <vPortFree>
 8002fae:	e001      	b.n	8002fb4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d013      	beq.n	8002fe2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002fba:	88fa      	ldrh	r2, [r7, #6]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	9303      	str	r3, [sp, #12]
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	9302      	str	r3, [sp, #8]
 8002fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc6:	9301      	str	r3, [sp, #4]
 8002fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	68b9      	ldr	r1, [r7, #8]
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f80e 	bl	8002ff2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002fd6:	69f8      	ldr	r0, [r7, #28]
 8002fd8:	f000 f8a2 	bl	8003120 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	61bb      	str	r3, [r7, #24]
 8002fe0:	e002      	b.n	8002fe8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002fe8:	69bb      	ldr	r3, [r7, #24]
    }
 8002fea:	4618      	mov	r0, r3
 8002fec:	3720      	adds	r7, #32
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b088      	sub	sp, #32
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	607a      	str	r2, [r7, #4]
 8002ffe:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	461a      	mov	r2, r3
 800300a:	21a5      	movs	r1, #165	; 0xa5
 800300c:	f004 fd2c 	bl	8007a68 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800301a:	3b01      	subs	r3, #1
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	f023 0307 	bic.w	r3, r3, #7
 8003028:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <prvInitialiseNewTask+0x58>
        __asm volatile
 8003034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	617b      	str	r3, [r7, #20]
    }
 8003046:	bf00      	nop
 8003048:	e7fe      	b.n	8003048 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d01f      	beq.n	8003090 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003050:	2300      	movs	r3, #0
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	e012      	b.n	800307c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	4413      	add	r3, r2
 800305c:	7819      	ldrb	r1, [r3, #0]
 800305e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	4413      	add	r3, r2
 8003064:	3334      	adds	r3, #52	; 0x34
 8003066:	460a      	mov	r2, r1
 8003068:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	4413      	add	r3, r2
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d006      	beq.n	8003084 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3301      	adds	r3, #1
 800307a:	61fb      	str	r3, [r7, #28]
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	2b09      	cmp	r3, #9
 8003080:	d9e9      	bls.n	8003056 <prvInitialiseNewTask+0x64>
 8003082:	e000      	b.n	8003086 <prvInitialiseNewTask+0x94>
            {
                break;
 8003084:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800308e:	e003      	b.n	8003098 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309a:	2b04      	cmp	r3, #4
 800309c:	d901      	bls.n	80030a2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800309e:	2304      	movs	r3, #4
 80030a0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80030a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030a6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80030a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030ac:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80030ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b0:	2200      	movs	r2, #0
 80030b2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b6:	3304      	adds	r3, #4
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff f96b 	bl	8002394 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c0:	3318      	adds	r3, #24
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff f966 	bl	8002394 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80030c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030cc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d0:	f1c3 0205 	rsb	r2, r3, #5
 80030d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80030d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80030de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e0:	3350      	adds	r3, #80	; 0x50
 80030e2:	2204      	movs	r2, #4
 80030e4:	2100      	movs	r1, #0
 80030e6:	4618      	mov	r0, r3
 80030e8:	f004 fcbe 	bl	8007a68 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80030ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ee:	3354      	adds	r3, #84	; 0x54
 80030f0:	2201      	movs	r2, #1
 80030f2:	2100      	movs	r1, #0
 80030f4:	4618      	mov	r0, r3
 80030f6:	f004 fcb7 	bl	8007a68 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	68f9      	ldr	r1, [r7, #12]
 80030fe:	69b8      	ldr	r0, [r7, #24]
 8003100:	f001 fc08 	bl	8004914 <pxPortInitialiseStack>
 8003104:	4602      	mov	r2, r0
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800310a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003114:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003116:	bf00      	nop
 8003118:	3720      	adds	r7, #32
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003120:	b5b0      	push	{r4, r5, r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af02      	add	r7, sp, #8
 8003126:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003128:	f001 fd26 	bl	8004b78 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800312c:	4b3b      	ldr	r3, [pc, #236]	; (800321c <prvAddNewTaskToReadyList+0xfc>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	3301      	adds	r3, #1
 8003132:	4a3a      	ldr	r2, [pc, #232]	; (800321c <prvAddNewTaskToReadyList+0xfc>)
 8003134:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003136:	4b3a      	ldr	r3, [pc, #232]	; (8003220 <prvAddNewTaskToReadyList+0x100>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800313e:	4a38      	ldr	r2, [pc, #224]	; (8003220 <prvAddNewTaskToReadyList+0x100>)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003144:	4b35      	ldr	r3, [pc, #212]	; (800321c <prvAddNewTaskToReadyList+0xfc>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d110      	bne.n	800316e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800314c:	f000 fda6 	bl	8003c9c <prvInitialiseTaskLists>
 8003150:	e00d      	b.n	800316e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003152:	4b34      	ldr	r3, [pc, #208]	; (8003224 <prvAddNewTaskToReadyList+0x104>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d109      	bne.n	800316e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800315a:	4b31      	ldr	r3, [pc, #196]	; (8003220 <prvAddNewTaskToReadyList+0x100>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	429a      	cmp	r2, r3
 8003166:	d802      	bhi.n	800316e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003168:	4a2d      	ldr	r2, [pc, #180]	; (8003220 <prvAddNewTaskToReadyList+0x100>)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800316e:	4b2e      	ldr	r3, [pc, #184]	; (8003228 <prvAddNewTaskToReadyList+0x108>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	3301      	adds	r3, #1
 8003174:	4a2c      	ldr	r2, [pc, #176]	; (8003228 <prvAddNewTaskToReadyList+0x108>)
 8003176:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003178:	4b2b      	ldr	r3, [pc, #172]	; (8003228 <prvAddNewTaskToReadyList+0x108>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d016      	beq.n	80031b4 <prvAddNewTaskToReadyList+0x94>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4618      	mov	r0, r3
 800318a:	f004 f9ad 	bl	80074e8 <SEGGER_SYSVIEW_OnTaskCreate>
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	461d      	mov	r5, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	461c      	mov	r4, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	1ae3      	subs	r3, r4, r3
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	462b      	mov	r3, r5
 80031b0:	f002 f8ba 	bl	8005328 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f004 fa1a 	bl	80075f0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	2201      	movs	r2, #1
 80031c2:	409a      	lsls	r2, r3
 80031c4:	4b19      	ldr	r3, [pc, #100]	; (800322c <prvAddNewTaskToReadyList+0x10c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	4a18      	ldr	r2, [pc, #96]	; (800322c <prvAddNewTaskToReadyList+0x10c>)
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4a15      	ldr	r2, [pc, #84]	; (8003230 <prvAddNewTaskToReadyList+0x110>)
 80031dc:	441a      	add	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3304      	adds	r3, #4
 80031e2:	4619      	mov	r1, r3
 80031e4:	4610      	mov	r0, r2
 80031e6:	f7ff f8e2 	bl	80023ae <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80031ea:	f001 fcf5 	bl	8004bd8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80031ee:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <prvAddNewTaskToReadyList+0x104>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00e      	beq.n	8003214 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80031f6:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <prvAddNewTaskToReadyList+0x100>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003200:	429a      	cmp	r2, r3
 8003202:	d207      	bcs.n	8003214 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <prvAddNewTaskToReadyList+0x114>)
 8003206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003214:	bf00      	nop
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bdb0      	pop	{r4, r5, r7, pc}
 800321c:	200001b4 	.word	0x200001b4
 8003220:	200000dc 	.word	0x200000dc
 8003224:	200001c0 	.word	0x200001c0
 8003228:	200001d0 	.word	0x200001d0
 800322c:	200001bc 	.word	0x200001bc
 8003230:	200000e0 	.word	0x200000e0
 8003234:	e000ed04 	.word	0xe000ed04

08003238 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003240:	2300      	movs	r3, #0
 8003242:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d01b      	beq.n	8003282 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800324a:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <vTaskDelay+0x68>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <vTaskDelay+0x30>
        __asm volatile
 8003252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003256:	f383 8811 	msr	BASEPRI, r3
 800325a:	f3bf 8f6f 	isb	sy
 800325e:	f3bf 8f4f 	dsb	sy
 8003262:	60bb      	str	r3, [r7, #8]
    }
 8003264:	bf00      	nop
 8003266:	e7fe      	b.n	8003266 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003268:	f000 f9ca 	bl	8003600 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	2023      	movs	r0, #35	; 0x23
 8003270:	f003 fc3c 	bl	8006aec <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003274:	2100      	movs	r1, #0
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 ffc2 	bl	8004200 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800327c:	f000 f9ce 	bl	800361c <xTaskResumeAll>
 8003280:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d107      	bne.n	8003298 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <vTaskDelay+0x6c>)
 800328a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003298:	bf00      	nop
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	200001dc 	.word	0x200001dc
 80032a4:	e000ed04 	.word	0xe000ed04

080032a8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80032b0:	f001 fc62 	bl	8004b78 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d102      	bne.n	80032c0 <vTaskSuspend+0x18>
 80032ba:	4b4a      	ldr	r3, [pc, #296]	; (80033e4 <vTaskSuspend+0x13c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	e000      	b.n	80032c2 <vTaskSuspend+0x1a>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f004 fa34 	bl	8007734 <SEGGER_SYSVIEW_ShrinkId>
 80032cc:	4603      	mov	r3, r0
 80032ce:	4619      	mov	r1, r3
 80032d0:	2029      	movs	r0, #41	; 0x29
 80032d2:	f003 fc0b 	bl	8006aec <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	3304      	adds	r3, #4
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff f8c4 	bl	8002468 <uxListRemove>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d115      	bne.n	8003312 <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ea:	493f      	ldr	r1, [pc, #252]	; (80033e8 <vTaskSuspend+0x140>)
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10a      	bne.n	8003312 <vTaskSuspend+0x6a>
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	2201      	movs	r2, #1
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43da      	mvns	r2, r3
 8003308:	4b38      	ldr	r3, [pc, #224]	; (80033ec <vTaskSuspend+0x144>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4013      	ands	r3, r2
 800330e:	4a37      	ldr	r2, [pc, #220]	; (80033ec <vTaskSuspend+0x144>)
 8003310:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003316:	2b00      	cmp	r3, #0
 8003318:	d004      	beq.n	8003324 <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	3318      	adds	r3, #24
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff f8a2 	bl	8002468 <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	211b      	movs	r1, #27
 8003328:	4618      	mov	r0, r3
 800332a:	f004 f9a3 	bl	8007674 <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	3304      	adds	r3, #4
 8003332:	4619      	mov	r1, r3
 8003334:	482e      	ldr	r0, [pc, #184]	; (80033f0 <vTaskSuspend+0x148>)
 8003336:	f7ff f83a 	bl	80023ae <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	e010      	b.n	8003362 <vTaskSuspend+0xba>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	4413      	add	r3, r2
 8003346:	3354      	adds	r3, #84	; 0x54
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b01      	cmp	r3, #1
 800334e:	d105      	bne.n	800335c <vTaskSuspend+0xb4>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	4413      	add	r3, r2
 8003356:	3354      	adds	r3, #84	; 0x54
 8003358:	2200      	movs	r2, #0
 800335a:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	3301      	adds	r3, #1
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2b00      	cmp	r3, #0
 8003366:	ddeb      	ble.n	8003340 <vTaskSuspend+0x98>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8003368:	f001 fc36 	bl	8004bd8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800336c:	4b21      	ldr	r3, [pc, #132]	; (80033f4 <vTaskSuspend+0x14c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d005      	beq.n	8003380 <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8003374:	f001 fc00 	bl	8004b78 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8003378:	f000 fd0e 	bl	8003d98 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 800337c:	f001 fc2c 	bl	8004bd8 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8003380:	4b18      	ldr	r3, [pc, #96]	; (80033e4 <vTaskSuspend+0x13c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	429a      	cmp	r2, r3
 8003388:	d127      	bne.n	80033da <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 800338a:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <vTaskSuspend+0x14c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d017      	beq.n	80033c2 <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8003392:	4b19      	ldr	r3, [pc, #100]	; (80033f8 <vTaskSuspend+0x150>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <vTaskSuspend+0x108>
        __asm volatile
 800339a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339e:	f383 8811 	msr	BASEPRI, r3
 80033a2:	f3bf 8f6f 	isb	sy
 80033a6:	f3bf 8f4f 	dsb	sy
 80033aa:	60fb      	str	r3, [r7, #12]
    }
 80033ac:	bf00      	nop
 80033ae:	e7fe      	b.n	80033ae <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 80033b0:	4b12      	ldr	r3, [pc, #72]	; (80033fc <vTaskSuspend+0x154>)
 80033b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80033c0:	e00b      	b.n	80033da <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80033c2:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <vTaskSuspend+0x148>)
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	4b0e      	ldr	r3, [pc, #56]	; (8003400 <vTaskSuspend+0x158>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d103      	bne.n	80033d6 <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <vTaskSuspend+0x13c>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
    }
 80033d4:	e001      	b.n	80033da <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 80033d6:	f000 fa9f 	bl	8003918 <vTaskSwitchContext>
    }
 80033da:	bf00      	nop
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	200000dc 	.word	0x200000dc
 80033e8:	200000e0 	.word	0x200000e0
 80033ec:	200001bc 	.word	0x200001bc
 80033f0:	200001a0 	.word	0x200001a0
 80033f4:	200001c0 	.word	0x200001c0
 80033f8:	200001dc 	.word	0x200001dc
 80033fc:	e000ed04 	.word	0xe000ed04
 8003400:	200001b4 	.word	0x200001b4

08003404 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10a      	bne.n	8003430 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 800341a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341e:	f383 8811 	msr	BASEPRI, r3
 8003422:	f3bf 8f6f 	isb	sy
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	60fb      	str	r3, [r7, #12]
    }
 800342c:	bf00      	nop
 800342e:	e7fe      	b.n	800342e <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	4a0a      	ldr	r2, [pc, #40]	; (8003460 <prvTaskIsTaskSuspended+0x5c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d10a      	bne.n	8003450 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343e:	4a09      	ldr	r2, [pc, #36]	; (8003464 <prvTaskIsTaskSuspended+0x60>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d005      	beq.n	8003450 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 800344c:	2301      	movs	r3, #1
 800344e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003450:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003452:	4618      	mov	r0, r3
 8003454:	371c      	adds	r7, #28
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	200001a0 	.word	0x200001a0
 8003464:	20000174 	.word	0x20000174

08003468 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	60fb      	str	r3, [r7, #12]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10a      	bne.n	8003490 <vTaskResume+0x28>
        __asm volatile
 800347a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347e:	f383 8811 	msr	BASEPRI, r3
 8003482:	f3bf 8f6f 	isb	sy
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	60bb      	str	r3, [r7, #8]
    }
 800348c:	bf00      	nop
 800348e:	e7fe      	b.n	800348e <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003490:	4b26      	ldr	r3, [pc, #152]	; (800352c <vTaskResume+0xc4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	429a      	cmp	r2, r3
 8003498:	d044      	beq.n	8003524 <vTaskResume+0xbc>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d041      	beq.n	8003524 <vTaskResume+0xbc>
        {
            taskENTER_CRITICAL();
 80034a0:	f001 fb6a 	bl	8004b78 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f7ff ffad 	bl	8003404 <prvTaskIsTaskSuspended>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d037      	beq.n	8003520 <vTaskResume+0xb8>
                {
                    traceTASK_RESUME( pxTCB );
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f004 f93e 	bl	8007734 <SEGGER_SYSVIEW_ShrinkId>
 80034b8:	4603      	mov	r3, r0
 80034ba:	4619      	mov	r1, r3
 80034bc:	202a      	movs	r0, #42	; 0x2a
 80034be:	f003 fb15 	bl	8006aec <SEGGER_SYSVIEW_RecordU32>

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	3304      	adds	r3, #4
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fe ffce 	bl	8002468 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f004 f88e 	bl	80075f0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	2201      	movs	r2, #1
 80034da:	409a      	lsls	r2, r3
 80034dc:	4b14      	ldr	r3, [pc, #80]	; (8003530 <vTaskResume+0xc8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	4a13      	ldr	r2, [pc, #76]	; (8003530 <vTaskResume+0xc8>)
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4a10      	ldr	r2, [pc, #64]	; (8003534 <vTaskResume+0xcc>)
 80034f4:	441a      	add	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	3304      	adds	r3, #4
 80034fa:	4619      	mov	r1, r3
 80034fc:	4610      	mov	r0, r2
 80034fe:	f7fe ff56 	bl	80023ae <vListInsertEnd>

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003506:	4b09      	ldr	r3, [pc, #36]	; (800352c <vTaskResume+0xc4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	429a      	cmp	r2, r3
 800350e:	d307      	bcc.n	8003520 <vTaskResume+0xb8>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8003510:	4b09      	ldr	r3, [pc, #36]	; (8003538 <vTaskResume+0xd0>)
 8003512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8003520:	f001 fb5a 	bl	8004bd8 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003524:	bf00      	nop
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	200000dc 	.word	0x200000dc
 8003530:	200001bc 	.word	0x200001bc
 8003534:	200000e0 	.word	0x200000e0
 8003538:	e000ed04 	.word	0xe000ed04

0800353c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003542:	4b27      	ldr	r3, [pc, #156]	; (80035e0 <vTaskStartScheduler+0xa4>)
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	2300      	movs	r3, #0
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2300      	movs	r3, #0
 800354c:	2282      	movs	r2, #130	; 0x82
 800354e:	4925      	ldr	r1, [pc, #148]	; (80035e4 <vTaskStartScheduler+0xa8>)
 8003550:	4825      	ldr	r0, [pc, #148]	; (80035e8 <vTaskStartScheduler+0xac>)
 8003552:	f7ff fd0d 	bl	8002f70 <xTaskCreate>
 8003556:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d102      	bne.n	8003564 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800355e:	f000 fec7 	bl	80042f0 <xTimerCreateTimerTask>
 8003562:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d124      	bne.n	80035b4 <vTaskStartScheduler+0x78>
        __asm volatile
 800356a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356e:	f383 8811 	msr	BASEPRI, r3
 8003572:	f3bf 8f6f 	isb	sy
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	60bb      	str	r3, [r7, #8]
    }
 800357c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800357e:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <vTaskStartScheduler+0xb0>)
 8003580:	f04f 32ff 	mov.w	r2, #4294967295
 8003584:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003586:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <vTaskStartScheduler+0xb4>)
 8003588:	2201      	movs	r2, #1
 800358a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800358c:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <vTaskStartScheduler+0xb8>)
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003592:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <vTaskStartScheduler+0xbc>)
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	4b12      	ldr	r3, [pc, #72]	; (80035e0 <vTaskStartScheduler+0xa4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d102      	bne.n	80035a4 <vTaskStartScheduler+0x68>
 800359e:	f003 ff87 	bl	80074b0 <SEGGER_SYSVIEW_OnIdle>
 80035a2:	e004      	b.n	80035ae <vTaskStartScheduler+0x72>
 80035a4:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <vTaskStartScheduler+0xbc>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f003 ffdf 	bl	800756c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80035ae:	f001 fa41 	bl	8004a34 <xPortStartScheduler>
 80035b2:	e00e      	b.n	80035d2 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ba:	d10a      	bne.n	80035d2 <vTaskStartScheduler+0x96>
        __asm volatile
 80035bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c0:	f383 8811 	msr	BASEPRI, r3
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	607b      	str	r3, [r7, #4]
    }
 80035ce:	bf00      	nop
 80035d0:	e7fe      	b.n	80035d0 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80035d2:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <vTaskStartScheduler+0xc0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
}
 80035d6:	bf00      	nop
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	200001d8 	.word	0x200001d8
 80035e4:	08007b88 	.word	0x08007b88
 80035e8:	08003c6d 	.word	0x08003c6d
 80035ec:	200001d4 	.word	0x200001d4
 80035f0:	200001c0 	.word	0x200001c0
 80035f4:	200001b8 	.word	0x200001b8
 80035f8:	200000dc 	.word	0x200000dc
 80035fc:	2000000c 	.word	0x2000000c

08003600 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003604:	4b04      	ldr	r3, [pc, #16]	; (8003618 <vTaskSuspendAll+0x18>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3301      	adds	r3, #1
 800360a:	4a03      	ldr	r2, [pc, #12]	; (8003618 <vTaskSuspendAll+0x18>)
 800360c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800360e:	bf00      	nop
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	200001dc 	.word	0x200001dc

0800361c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003626:	2300      	movs	r3, #0
 8003628:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800362a:	4b43      	ldr	r3, [pc, #268]	; (8003738 <xTaskResumeAll+0x11c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10a      	bne.n	8003648 <xTaskResumeAll+0x2c>
        __asm volatile
 8003632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	603b      	str	r3, [r7, #0]
    }
 8003644:	bf00      	nop
 8003646:	e7fe      	b.n	8003646 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003648:	f001 fa96 	bl	8004b78 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800364c:	4b3a      	ldr	r3, [pc, #232]	; (8003738 <xTaskResumeAll+0x11c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3b01      	subs	r3, #1
 8003652:	4a39      	ldr	r2, [pc, #228]	; (8003738 <xTaskResumeAll+0x11c>)
 8003654:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003656:	4b38      	ldr	r3, [pc, #224]	; (8003738 <xTaskResumeAll+0x11c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d165      	bne.n	800372a <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800365e:	4b37      	ldr	r3, [pc, #220]	; (800373c <xTaskResumeAll+0x120>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d061      	beq.n	800372a <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003666:	e032      	b.n	80036ce <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003668:	4b35      	ldr	r3, [pc, #212]	; (8003740 <xTaskResumeAll+0x124>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	3318      	adds	r3, #24
 8003674:	4618      	mov	r0, r3
 8003676:	f7fe fef7 	bl	8002468 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	3304      	adds	r3, #4
 800367e:	4618      	mov	r0, r3
 8003680:	f7fe fef2 	bl	8002468 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4618      	mov	r0, r3
 8003688:	f003 ffb2 	bl	80075f0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	2201      	movs	r2, #1
 8003692:	409a      	lsls	r2, r3
 8003694:	4b2b      	ldr	r3, [pc, #172]	; (8003744 <xTaskResumeAll+0x128>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4313      	orrs	r3, r2
 800369a:	4a2a      	ldr	r2, [pc, #168]	; (8003744 <xTaskResumeAll+0x128>)
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a2:	4613      	mov	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4a27      	ldr	r2, [pc, #156]	; (8003748 <xTaskResumeAll+0x12c>)
 80036ac:	441a      	add	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	3304      	adds	r3, #4
 80036b2:	4619      	mov	r1, r3
 80036b4:	4610      	mov	r0, r2
 80036b6:	f7fe fe7a 	bl	80023ae <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036be:	4b23      	ldr	r3, [pc, #140]	; (800374c <xTaskResumeAll+0x130>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d302      	bcc.n	80036ce <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80036c8:	4b21      	ldr	r3, [pc, #132]	; (8003750 <xTaskResumeAll+0x134>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036ce:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <xTaskResumeAll+0x124>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1c8      	bne.n	8003668 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80036dc:	f000 fb5c 	bl	8003d98 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80036e0:	4b1c      	ldr	r3, [pc, #112]	; (8003754 <xTaskResumeAll+0x138>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d010      	beq.n	800370e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80036ec:	f000 f858 	bl	80037a0 <xTaskIncrementTick>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80036f6:	4b16      	ldr	r3, [pc, #88]	; (8003750 <xTaskResumeAll+0x134>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3b01      	subs	r3, #1
 8003700:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1f1      	bne.n	80036ec <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003708:	4b12      	ldr	r3, [pc, #72]	; (8003754 <xTaskResumeAll+0x138>)
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800370e:	4b10      	ldr	r3, [pc, #64]	; (8003750 <xTaskResumeAll+0x134>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d009      	beq.n	800372a <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003716:	2301      	movs	r3, #1
 8003718:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800371a:	4b0f      	ldr	r3, [pc, #60]	; (8003758 <xTaskResumeAll+0x13c>)
 800371c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800372a:	f001 fa55 	bl	8004bd8 <vPortExitCritical>

    return xAlreadyYielded;
 800372e:	68bb      	ldr	r3, [r7, #8]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	200001dc 	.word	0x200001dc
 800373c:	200001b4 	.word	0x200001b4
 8003740:	20000174 	.word	0x20000174
 8003744:	200001bc 	.word	0x200001bc
 8003748:	200000e0 	.word	0x200000e0
 800374c:	200000dc 	.word	0x200000dc
 8003750:	200001c8 	.word	0x200001c8
 8003754:	200001c4 	.word	0x200001c4
 8003758:	e000ed04 	.word	0xe000ed04

0800375c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003762:	4b05      	ldr	r3, [pc, #20]	; (8003778 <xTaskGetTickCount+0x1c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003768:	687b      	ldr	r3, [r7, #4]
}
 800376a:	4618      	mov	r0, r3
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	200001b8 	.word	0x200001b8

0800377c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003782:	f001 fae3 	bl	8004d4c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003786:	2300      	movs	r3, #0
 8003788:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800378a:	4b04      	ldr	r3, [pc, #16]	; (800379c <xTaskGetTickCountFromISR+0x20>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003790:	683b      	ldr	r3, [r7, #0]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	200001b8 	.word	0x200001b8

080037a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037aa:	4b50      	ldr	r3, [pc, #320]	; (80038ec <xTaskIncrementTick+0x14c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f040 8092 	bne.w	80038d8 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037b4:	4b4e      	ldr	r3, [pc, #312]	; (80038f0 <xTaskIncrementTick+0x150>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3301      	adds	r3, #1
 80037ba:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80037bc:	4a4c      	ldr	r2, [pc, #304]	; (80038f0 <xTaskIncrementTick+0x150>)
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d120      	bne.n	800380a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80037c8:	4b4a      	ldr	r3, [pc, #296]	; (80038f4 <xTaskIncrementTick+0x154>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00a      	beq.n	80037e8 <xTaskIncrementTick+0x48>
        __asm volatile
 80037d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	603b      	str	r3, [r7, #0]
    }
 80037e4:	bf00      	nop
 80037e6:	e7fe      	b.n	80037e6 <xTaskIncrementTick+0x46>
 80037e8:	4b42      	ldr	r3, [pc, #264]	; (80038f4 <xTaskIncrementTick+0x154>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	4b42      	ldr	r3, [pc, #264]	; (80038f8 <xTaskIncrementTick+0x158>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a40      	ldr	r2, [pc, #256]	; (80038f4 <xTaskIncrementTick+0x154>)
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	4a40      	ldr	r2, [pc, #256]	; (80038f8 <xTaskIncrementTick+0x158>)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	4b3f      	ldr	r3, [pc, #252]	; (80038fc <xTaskIncrementTick+0x15c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3301      	adds	r3, #1
 8003802:	4a3e      	ldr	r2, [pc, #248]	; (80038fc <xTaskIncrementTick+0x15c>)
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	f000 fac7 	bl	8003d98 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800380a:	4b3d      	ldr	r3, [pc, #244]	; (8003900 <xTaskIncrementTick+0x160>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	429a      	cmp	r2, r3
 8003812:	d34c      	bcc.n	80038ae <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003814:	4b37      	ldr	r3, [pc, #220]	; (80038f4 <xTaskIncrementTick+0x154>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d104      	bne.n	8003828 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800381e:	4b38      	ldr	r3, [pc, #224]	; (8003900 <xTaskIncrementTick+0x160>)
 8003820:	f04f 32ff 	mov.w	r2, #4294967295
 8003824:	601a      	str	r2, [r3, #0]
                    break;
 8003826:	e042      	b.n	80038ae <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003828:	4b32      	ldr	r3, [pc, #200]	; (80038f4 <xTaskIncrementTick+0x154>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	429a      	cmp	r2, r3
 800383e:	d203      	bcs.n	8003848 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003840:	4a2f      	ldr	r2, [pc, #188]	; (8003900 <xTaskIncrementTick+0x160>)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003846:	e032      	b.n	80038ae <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	3304      	adds	r3, #4
 800384c:	4618      	mov	r0, r3
 800384e:	f7fe fe0b 	bl	8002468 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003856:	2b00      	cmp	r3, #0
 8003858:	d004      	beq.n	8003864 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	3318      	adds	r3, #24
 800385e:	4618      	mov	r0, r3
 8003860:	f7fe fe02 	bl	8002468 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4618      	mov	r0, r3
 8003868:	f003 fec2 	bl	80075f0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	2201      	movs	r2, #1
 8003872:	409a      	lsls	r2, r3
 8003874:	4b23      	ldr	r3, [pc, #140]	; (8003904 <xTaskIncrementTick+0x164>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4313      	orrs	r3, r2
 800387a:	4a22      	ldr	r2, [pc, #136]	; (8003904 <xTaskIncrementTick+0x164>)
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4a1f      	ldr	r2, [pc, #124]	; (8003908 <xTaskIncrementTick+0x168>)
 800388c:	441a      	add	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	3304      	adds	r3, #4
 8003892:	4619      	mov	r1, r3
 8003894:	4610      	mov	r0, r2
 8003896:	f7fe fd8a 	bl	80023ae <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389e:	4b1b      	ldr	r3, [pc, #108]	; (800390c <xTaskIncrementTick+0x16c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d3b5      	bcc.n	8003814 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80038a8:	2301      	movs	r3, #1
 80038aa:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038ac:	e7b2      	b.n	8003814 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038ae:	4b17      	ldr	r3, [pc, #92]	; (800390c <xTaskIncrementTick+0x16c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b4:	4914      	ldr	r1, [pc, #80]	; (8003908 <xTaskIncrementTick+0x168>)
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d901      	bls.n	80038ca <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80038c6:	2301      	movs	r3, #1
 80038c8:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80038ca:	4b11      	ldr	r3, [pc, #68]	; (8003910 <xTaskIncrementTick+0x170>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d007      	beq.n	80038e2 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80038d2:	2301      	movs	r3, #1
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	e004      	b.n	80038e2 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80038d8:	4b0e      	ldr	r3, [pc, #56]	; (8003914 <xTaskIncrementTick+0x174>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3301      	adds	r3, #1
 80038de:	4a0d      	ldr	r2, [pc, #52]	; (8003914 <xTaskIncrementTick+0x174>)
 80038e0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80038e2:	697b      	ldr	r3, [r7, #20]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	200001dc 	.word	0x200001dc
 80038f0:	200001b8 	.word	0x200001b8
 80038f4:	2000016c 	.word	0x2000016c
 80038f8:	20000170 	.word	0x20000170
 80038fc:	200001cc 	.word	0x200001cc
 8003900:	200001d4 	.word	0x200001d4
 8003904:	200001bc 	.word	0x200001bc
 8003908:	200000e0 	.word	0x200000e0
 800390c:	200000dc 	.word	0x200000dc
 8003910:	200001c8 	.word	0x200001c8
 8003914:	200001c4 	.word	0x200001c4

08003918 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800391e:	4b2d      	ldr	r3, [pc, #180]	; (80039d4 <vTaskSwitchContext+0xbc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003926:	4b2c      	ldr	r3, [pc, #176]	; (80039d8 <vTaskSwitchContext+0xc0>)
 8003928:	2201      	movs	r2, #1
 800392a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800392c:	e04d      	b.n	80039ca <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800392e:	4b2a      	ldr	r3, [pc, #168]	; (80039d8 <vTaskSwitchContext+0xc0>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003934:	4b29      	ldr	r3, [pc, #164]	; (80039dc <vTaskSwitchContext+0xc4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	fab3 f383 	clz	r3, r3
 8003940:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003942:	7afb      	ldrb	r3, [r7, #11]
 8003944:	f1c3 031f 	rsb	r3, r3, #31
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	4925      	ldr	r1, [pc, #148]	; (80039e0 <vTaskSwitchContext+0xc8>)
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <vTaskSwitchContext+0x5c>
        __asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	607b      	str	r3, [r7, #4]
    }
 8003970:	bf00      	nop
 8003972:	e7fe      	b.n	8003972 <vTaskSwitchContext+0x5a>
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	4613      	mov	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4a18      	ldr	r2, [pc, #96]	; (80039e0 <vTaskSwitchContext+0xc8>)
 8003980:	4413      	add	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	3308      	adds	r3, #8
 8003996:	429a      	cmp	r2, r3
 8003998:	d104      	bne.n	80039a4 <vTaskSwitchContext+0x8c>
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	605a      	str	r2, [r3, #4]
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	4a0e      	ldr	r2, [pc, #56]	; (80039e4 <vTaskSwitchContext+0xcc>)
 80039ac:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80039ae:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <vTaskSwitchContext+0xcc>)
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	4b0d      	ldr	r3, [pc, #52]	; (80039e8 <vTaskSwitchContext+0xd0>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d102      	bne.n	80039c0 <vTaskSwitchContext+0xa8>
 80039ba:	f003 fd79 	bl	80074b0 <SEGGER_SYSVIEW_OnIdle>
}
 80039be:	e004      	b.n	80039ca <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80039c0:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <vTaskSwitchContext+0xcc>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f003 fdd1 	bl	800756c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80039ca:	bf00      	nop
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	200001dc 	.word	0x200001dc
 80039d8:	200001c8 	.word	0x200001c8
 80039dc:	200001bc 	.word	0x200001bc
 80039e0:	200000e0 	.word	0x200000e0
 80039e4:	200000dc 	.word	0x200000dc
 80039e8:	200001d8 	.word	0x200001d8

080039ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10a      	bne.n	8003a12 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	60fb      	str	r3, [r7, #12]
    }
 8003a0e:	bf00      	nop
 8003a10:	e7fe      	b.n	8003a10 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a12:	4b07      	ldr	r3, [pc, #28]	; (8003a30 <vTaskPlaceOnEventList+0x44>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3318      	adds	r3, #24
 8003a18:	4619      	mov	r1, r3
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fe fceb 	bl	80023f6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a20:	2101      	movs	r1, #1
 8003a22:	6838      	ldr	r0, [r7, #0]
 8003a24:	f000 fbec 	bl	8004200 <prvAddCurrentTaskToDelayedList>
}
 8003a28:	bf00      	nop
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	200000dc 	.word	0x200000dc

08003a34 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10a      	bne.n	8003a5c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4a:	f383 8811 	msr	BASEPRI, r3
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f3bf 8f4f 	dsb	sy
 8003a56:	617b      	str	r3, [r7, #20]
    }
 8003a58:	bf00      	nop
 8003a5a:	e7fe      	b.n	8003a5a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <vTaskPlaceOnEventListRestricted+0x58>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3318      	adds	r3, #24
 8003a62:	4619      	mov	r1, r3
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f7fe fca2 	bl	80023ae <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003a70:	f04f 33ff 	mov.w	r3, #4294967295
 8003a74:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003a76:	2024      	movs	r0, #36	; 0x24
 8003a78:	f003 f81a 	bl	8006ab0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	68b8      	ldr	r0, [r7, #8]
 8003a80:	f000 fbbe 	bl	8004200 <prvAddCurrentTaskToDelayedList>
    }
 8003a84:	bf00      	nop
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	200000dc 	.word	0x200000dc

08003a90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10a      	bne.n	8003abc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	60fb      	str	r3, [r7, #12]
    }
 8003ab8:	bf00      	nop
 8003aba:	e7fe      	b.n	8003aba <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	3318      	adds	r3, #24
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fe fcd1 	bl	8002468 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ac6:	4b1f      	ldr	r3, [pc, #124]	; (8003b44 <xTaskRemoveFromEventList+0xb4>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d120      	bne.n	8003b10 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fe fcc8 	bl	8002468 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f003 fd88 	bl	80075f0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	409a      	lsls	r2, r3
 8003ae8:	4b17      	ldr	r3, [pc, #92]	; (8003b48 <xTaskRemoveFromEventList+0xb8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	4a16      	ldr	r2, [pc, #88]	; (8003b48 <xTaskRemoveFromEventList+0xb8>)
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af6:	4613      	mov	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4a13      	ldr	r2, [pc, #76]	; (8003b4c <xTaskRemoveFromEventList+0xbc>)
 8003b00:	441a      	add	r2, r3
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	3304      	adds	r3, #4
 8003b06:	4619      	mov	r1, r3
 8003b08:	4610      	mov	r0, r2
 8003b0a:	f7fe fc50 	bl	80023ae <vListInsertEnd>
 8003b0e:	e005      	b.n	8003b1c <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	3318      	adds	r3, #24
 8003b14:	4619      	mov	r1, r3
 8003b16:	480e      	ldr	r0, [pc, #56]	; (8003b50 <xTaskRemoveFromEventList+0xc0>)
 8003b18:	f7fe fc49 	bl	80023ae <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b20:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <xTaskRemoveFromEventList+0xc4>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d905      	bls.n	8003b36 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <xTaskRemoveFromEventList+0xc8>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	e001      	b.n	8003b3a <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003b3a:	697b      	ldr	r3, [r7, #20]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	200001dc 	.word	0x200001dc
 8003b48:	200001bc 	.word	0x200001bc
 8003b4c:	200000e0 	.word	0x200000e0
 8003b50:	20000174 	.word	0x20000174
 8003b54:	200000dc 	.word	0x200000dc
 8003b58:	200001c8 	.word	0x200001c8

08003b5c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b64:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <vTaskInternalSetTimeOutState+0x24>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003b6c:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <vTaskInternalSetTimeOutState+0x28>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	605a      	str	r2, [r3, #4]
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	200001cc 	.word	0x200001cc
 8003b84:	200001b8 	.word	0x200001b8

08003b88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10a      	bne.n	8003bae <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9c:	f383 8811 	msr	BASEPRI, r3
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	613b      	str	r3, [r7, #16]
    }
 8003baa:	bf00      	nop
 8003bac:	e7fe      	b.n	8003bac <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10a      	bne.n	8003bca <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	60fb      	str	r3, [r7, #12]
    }
 8003bc6:	bf00      	nop
 8003bc8:	e7fe      	b.n	8003bc8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003bca:	f000 ffd5 	bl	8004b78 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003bce:	4b1f      	ldr	r3, [pc, #124]	; (8003c4c <xTaskCheckForTimeOut+0xc4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be6:	d102      	bne.n	8003bee <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61fb      	str	r3, [r7, #28]
 8003bec:	e026      	b.n	8003c3c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	4b17      	ldr	r3, [pc, #92]	; (8003c50 <xTaskCheckForTimeOut+0xc8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d00a      	beq.n	8003c10 <xTaskCheckForTimeOut+0x88>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d305      	bcc.n	8003c10 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003c04:	2301      	movs	r3, #1
 8003c06:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	e015      	b.n	8003c3c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d20b      	bcs.n	8003c32 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	1ad2      	subs	r2, r2, r3
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff ff98 	bl	8003b5c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61fb      	str	r3, [r7, #28]
 8003c30:	e004      	b.n	8003c3c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003c3c:	f000 ffcc 	bl	8004bd8 <vPortExitCritical>

    return xReturn;
 8003c40:	69fb      	ldr	r3, [r7, #28]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3720      	adds	r7, #32
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	200001b8 	.word	0x200001b8
 8003c50:	200001cc 	.word	0x200001cc

08003c54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003c58:	4b03      	ldr	r3, [pc, #12]	; (8003c68 <vTaskMissedYield+0x14>)
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]
}
 8003c5e:	bf00      	nop
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	200001c8 	.word	0x200001c8

08003c6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003c74:	f000 f852 	bl	8003d1c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c78:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <prvIdleTask+0x28>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d9f9      	bls.n	8003c74 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <prvIdleTask+0x2c>)
 8003c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003c90:	e7f0      	b.n	8003c74 <prvIdleTask+0x8>
 8003c92:	bf00      	nop
 8003c94:	200000e0 	.word	0x200000e0
 8003c98:	e000ed04 	.word	0xe000ed04

08003c9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	607b      	str	r3, [r7, #4]
 8003ca6:	e00c      	b.n	8003cc2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4a12      	ldr	r2, [pc, #72]	; (8003cfc <prvInitialiseTaskLists+0x60>)
 8003cb4:	4413      	add	r3, r2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fe fb4c 	bl	8002354 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	607b      	str	r3, [r7, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	d9ef      	bls.n	8003ca8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003cc8:	480d      	ldr	r0, [pc, #52]	; (8003d00 <prvInitialiseTaskLists+0x64>)
 8003cca:	f7fe fb43 	bl	8002354 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003cce:	480d      	ldr	r0, [pc, #52]	; (8003d04 <prvInitialiseTaskLists+0x68>)
 8003cd0:	f7fe fb40 	bl	8002354 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003cd4:	480c      	ldr	r0, [pc, #48]	; (8003d08 <prvInitialiseTaskLists+0x6c>)
 8003cd6:	f7fe fb3d 	bl	8002354 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003cda:	480c      	ldr	r0, [pc, #48]	; (8003d0c <prvInitialiseTaskLists+0x70>)
 8003cdc:	f7fe fb3a 	bl	8002354 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003ce0:	480b      	ldr	r0, [pc, #44]	; (8003d10 <prvInitialiseTaskLists+0x74>)
 8003ce2:	f7fe fb37 	bl	8002354 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <prvInitialiseTaskLists+0x78>)
 8003ce8:	4a05      	ldr	r2, [pc, #20]	; (8003d00 <prvInitialiseTaskLists+0x64>)
 8003cea:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003cec:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <prvInitialiseTaskLists+0x7c>)
 8003cee:	4a05      	ldr	r2, [pc, #20]	; (8003d04 <prvInitialiseTaskLists+0x68>)
 8003cf0:	601a      	str	r2, [r3, #0]
}
 8003cf2:	bf00      	nop
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	200000e0 	.word	0x200000e0
 8003d00:	20000144 	.word	0x20000144
 8003d04:	20000158 	.word	0x20000158
 8003d08:	20000174 	.word	0x20000174
 8003d0c:	20000188 	.word	0x20000188
 8003d10:	200001a0 	.word	0x200001a0
 8003d14:	2000016c 	.word	0x2000016c
 8003d18:	20000170 	.word	0x20000170

08003d1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d22:	e019      	b.n	8003d58 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003d24:	f000 ff28 	bl	8004b78 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d28:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <prvCheckTasksWaitingTermination+0x50>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3304      	adds	r3, #4
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fe fb97 	bl	8002468 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <prvCheckTasksWaitingTermination+0x54>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	4a0b      	ldr	r2, [pc, #44]	; (8003d70 <prvCheckTasksWaitingTermination+0x54>)
 8003d42:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003d44:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <prvCheckTasksWaitingTermination+0x58>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	4a0a      	ldr	r2, [pc, #40]	; (8003d74 <prvCheckTasksWaitingTermination+0x58>)
 8003d4c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003d4e:	f000 ff43 	bl	8004bd8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f810 	bl	8003d78 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d58:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <prvCheckTasksWaitingTermination+0x58>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e1      	bne.n	8003d24 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003d60:	bf00      	nop
 8003d62:	bf00      	nop
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000188 	.word	0x20000188
 8003d70:	200001b4 	.word	0x200001b4
 8003d74:	2000019c 	.word	0x2000019c

08003d78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	4618      	mov	r0, r3
 8003d86:	f001 f901 	bl	8004f8c <vPortFree>
                vPortFree( pxTCB );
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f001 f8fe 	bl	8004f8c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003d90:	bf00      	nop
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <prvResetNextTaskUnblockTime+0x30>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d104      	bne.n	8003db0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003da6:	4b09      	ldr	r3, [pc, #36]	; (8003dcc <prvResetNextTaskUnblockTime+0x34>)
 8003da8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003dae:	e005      	b.n	8003dbc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <prvResetNextTaskUnblockTime+0x30>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a04      	ldr	r2, [pc, #16]	; (8003dcc <prvResetNextTaskUnblockTime+0x34>)
 8003dba:	6013      	str	r3, [r2, #0]
}
 8003dbc:	bf00      	nop
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	2000016c 	.word	0x2000016c
 8003dcc:	200001d4 	.word	0x200001d4

08003dd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003dd6:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <xTaskGetSchedulerState+0x34>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d102      	bne.n	8003de4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003dde:	2301      	movs	r3, #1
 8003de0:	607b      	str	r3, [r7, #4]
 8003de2:	e008      	b.n	8003df6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003de4:	4b08      	ldr	r3, [pc, #32]	; (8003e08 <xTaskGetSchedulerState+0x38>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d102      	bne.n	8003df2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003dec:	2302      	movs	r3, #2
 8003dee:	607b      	str	r3, [r7, #4]
 8003df0:	e001      	b.n	8003df6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003df2:	2300      	movs	r3, #0
 8003df4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003df6:	687b      	ldr	r3, [r7, #4]
    }
 8003df8:	4618      	mov	r0, r3
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	200001c0 	.word	0x200001c0
 8003e08:	200001dc 	.word	0x200001dc

08003e0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d068      	beq.n	8003ef4 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003e22:	4b37      	ldr	r3, [pc, #220]	; (8003f00 <xTaskPriorityDisinherit+0xf4>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d00a      	beq.n	8003e42 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	60fb      	str	r3, [r7, #12]
    }
 8003e3e:	bf00      	nop
 8003e40:	e7fe      	b.n	8003e40 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10a      	bne.n	8003e60 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	60bb      	str	r3, [r7, #8]
    }
 8003e5c:	bf00      	nop
 8003e5e:	e7fe      	b.n	8003e5e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e64:	1e5a      	subs	r2, r3, #1
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d03e      	beq.n	8003ef4 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d13a      	bne.n	8003ef4 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	3304      	adds	r3, #4
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fe faf0 	bl	8002468 <uxListRemove>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10a      	bne.n	8003ea4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e92:	2201      	movs	r2, #1
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43da      	mvns	r2, r3
 8003e9a:	4b1a      	ldr	r3, [pc, #104]	; (8003f04 <xTaskPriorityDisinherit+0xf8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	4a18      	ldr	r2, [pc, #96]	; (8003f04 <xTaskPriorityDisinherit+0xf8>)
 8003ea2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	204a      	movs	r0, #74	; 0x4a
 8003eaa:	f002 fe1f 	bl	8006aec <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	f1c3 0205 	rsb	r2, r3, #5
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	409a      	lsls	r2, r3
 8003eca:	4b0e      	ldr	r3, [pc, #56]	; (8003f04 <xTaskPriorityDisinherit+0xf8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	4a0c      	ldr	r2, [pc, #48]	; (8003f04 <xTaskPriorityDisinherit+0xf8>)
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4a09      	ldr	r2, [pc, #36]	; (8003f08 <xTaskPriorityDisinherit+0xfc>)
 8003ee2:	441a      	add	r2, r3
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4610      	mov	r0, r2
 8003eec:	f7fe fa5f 	bl	80023ae <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003ef4:	697b      	ldr	r3, [r7, #20]
    }
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	200000dc 	.word	0x200000dc
 8003f04:	200001bc 	.word	0x200001bc
 8003f08:	200000e0 	.word	0x200000e0

08003f0c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b088      	sub	sp, #32
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	613b      	str	r3, [r7, #16]
    }
 8003f32:	bf00      	nop
 8003f34:	e7fe      	b.n	8003f34 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003f36:	f000 fe1f 	bl	8004b78 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003f3a:	4b36      	ldr	r3, [pc, #216]	; (8004014 <xTaskGenericNotifyWait+0x108>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4413      	add	r3, r2
 8003f42:	3354      	adds	r3, #84	; 0x54
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d022      	beq.n	8003f92 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003f4c:	4b31      	ldr	r3, [pc, #196]	; (8004014 <xTaskGenericNotifyWait+0x108>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	3214      	adds	r2, #20
 8003f54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	43d2      	mvns	r2, r2
 8003f5c:	4011      	ands	r1, r2
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	3214      	adds	r2, #20
 8003f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003f66:	4b2b      	ldr	r3, [pc, #172]	; (8004014 <xTaskGenericNotifyWait+0x108>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	3354      	adds	r3, #84	; 0x54
 8003f70:	2201      	movs	r2, #1
 8003f72:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00b      	beq.n	8003f92 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	6a38      	ldr	r0, [r7, #32]
 8003f7e:	f000 f93f 	bl	8004200 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003f82:	4b25      	ldr	r3, [pc, #148]	; (8004018 <xTaskGenericNotifyWait+0x10c>)
 8003f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003f92:	f000 fe21 	bl	8004bd8 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003f96:	f000 fdef 	bl	8004b78 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	68b9      	ldr	r1, [r7, #8]
 8003fa6:	2040      	movs	r0, #64	; 0x40
 8003fa8:	f002 feac 	bl	8006d04 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d007      	beq.n	8003fc2 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003fb2:	4b18      	ldr	r3, [pc, #96]	; (8004014 <xTaskGenericNotifyWait+0x108>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	3214      	adds	r2, #20
 8003fba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003fc2:	4b14      	ldr	r3, [pc, #80]	; (8004014 <xTaskGenericNotifyWait+0x108>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4413      	add	r3, r2
 8003fca:	3354      	adds	r3, #84	; 0x54
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d002      	beq.n	8003fda <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	e00e      	b.n	8003ff8 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003fda:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <xTaskGenericNotifyWait+0x108>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	3214      	adds	r2, #20
 8003fe2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	43d2      	mvns	r2, r2
 8003fea:	4011      	ands	r1, r2
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	3214      	adds	r2, #20
 8003ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003ff8:	4b06      	ldr	r3, [pc, #24]	; (8004014 <xTaskGenericNotifyWait+0x108>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4413      	add	r3, r2
 8004000:	3354      	adds	r3, #84	; 0x54
 8004002:	2200      	movs	r2, #0
 8004004:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8004006:	f000 fde7 	bl	8004bd8 <vPortExitCritical>

        return xReturn;
 800400a:	697b      	ldr	r3, [r7, #20]
    }
 800400c:	4618      	mov	r0, r3
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	200000dc 	.word	0x200000dc
 8004018:	e000ed04 	.word	0xe000ed04

0800401c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800401c:	b580      	push	{r7, lr}
 800401e:	b08e      	sub	sp, #56	; 0x38
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800402a:	2301      	movs	r3, #1
 800402c:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <xTaskGenericNotify+0x2e>
        __asm volatile
 8004034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	623b      	str	r3, [r7, #32]
    }
 8004046:	bf00      	nop
 8004048:	e7fe      	b.n	8004048 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10a      	bne.n	8004066 <xTaskGenericNotify+0x4a>
        __asm volatile
 8004050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004054:	f383 8811 	msr	BASEPRI, r3
 8004058:	f3bf 8f6f 	isb	sy
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	61fb      	str	r3, [r7, #28]
    }
 8004062:	bf00      	nop
 8004064:	e7fe      	b.n	8004064 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800406a:	f000 fd85 	bl	8004b78 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800406e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004070:	2b00      	cmp	r3, #0
 8004072:	d006      	beq.n	8004082 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	3214      	adds	r2, #20
 800407a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800407e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004080:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4413      	add	r3, r2
 8004088:	3354      	adds	r3, #84	; 0x54
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	4413      	add	r3, r2
 8004096:	3354      	adds	r3, #84	; 0x54
 8004098:	2202      	movs	r2, #2
 800409a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d83b      	bhi.n	800411a <xTaskGenericNotify+0xfe>
 80040a2:	a201      	add	r2, pc, #4	; (adr r2, 80040a8 <xTaskGenericNotify+0x8c>)
 80040a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a8:	08004139 	.word	0x08004139
 80040ac:	080040bd 	.word	0x080040bd
 80040b0:	080040d9 	.word	0x080040d9
 80040b4:	080040f1 	.word	0x080040f1
 80040b8:	080040ff 	.word	0x080040ff
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80040bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	3214      	adds	r2, #20
 80040c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	ea42 0103 	orr.w	r1, r2, r3
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	3214      	adds	r2, #20
 80040d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80040d6:	e032      	b.n	800413e <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80040d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	3214      	adds	r2, #20
 80040de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e2:	1c59      	adds	r1, r3, #1
 80040e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	3214      	adds	r2, #20
 80040ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80040ee:	e026      	b.n	800413e <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80040f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	3214      	adds	r2, #20
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80040fc:	e01f      	b.n	800413e <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80040fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004102:	2b02      	cmp	r3, #2
 8004104:	d006      	beq.n	8004114 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	3214      	adds	r2, #20
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004112:	e014      	b.n	800413e <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8004114:	2300      	movs	r3, #0
 8004116:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8004118:	e011      	b.n	800413e <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800411a:	4b34      	ldr	r3, [pc, #208]	; (80041ec <xTaskGenericNotify+0x1d0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00c      	beq.n	800413c <xTaskGenericNotify+0x120>
        __asm volatile
 8004122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	61bb      	str	r3, [r7, #24]
    }
 8004134:	bf00      	nop
 8004136:	e7fe      	b.n	8004136 <xTaskGenericNotify+0x11a>
                    break;
 8004138:	bf00      	nop
 800413a:	e000      	b.n	800413e <xTaskGenericNotify+0x122>

                    break;
 800413c:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800413e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004140:	4618      	mov	r0, r3
 8004142:	f003 faf7 	bl	8007734 <SEGGER_SYSVIEW_ShrinkId>
 8004146:	4601      	mov	r1, r0
 8004148:	78fa      	ldrb	r2, [r7, #3]
 800414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	4613      	mov	r3, r2
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	203e      	movs	r0, #62	; 0x3e
 8004154:	f002 fdd6 	bl	8006d04 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800415c:	2b01      	cmp	r3, #1
 800415e:	d13d      	bne.n	80041dc <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004162:	3304      	adds	r3, #4
 8004164:	4618      	mov	r0, r3
 8004166:	f7fe f97f 	bl	8002468 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416c:	4618      	mov	r0, r3
 800416e:	f003 fa3f 	bl	80075f0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	2201      	movs	r2, #1
 8004178:	409a      	lsls	r2, r3
 800417a:	4b1d      	ldr	r3, [pc, #116]	; (80041f0 <xTaskGenericNotify+0x1d4>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4313      	orrs	r3, r2
 8004180:	4a1b      	ldr	r2, [pc, #108]	; (80041f0 <xTaskGenericNotify+0x1d4>)
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004188:	4613      	mov	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4a18      	ldr	r2, [pc, #96]	; (80041f4 <xTaskGenericNotify+0x1d8>)
 8004192:	441a      	add	r2, r3
 8004194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004196:	3304      	adds	r3, #4
 8004198:	4619      	mov	r1, r3
 800419a:	4610      	mov	r0, r2
 800419c:	f7fe f907 	bl	80023ae <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80041a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00a      	beq.n	80041be <xTaskGenericNotify+0x1a2>
        __asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	617b      	str	r3, [r7, #20]
    }
 80041ba:	bf00      	nop
 80041bc:	e7fe      	b.n	80041bc <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c2:	4b0d      	ldr	r3, [pc, #52]	; (80041f8 <xTaskGenericNotify+0x1dc>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d907      	bls.n	80041dc <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80041cc:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <xTaskGenericNotify+0x1e0>)
 80041ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80041dc:	f000 fcfc 	bl	8004bd8 <vPortExitCritical>

        return xReturn;
 80041e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80041e2:	4618      	mov	r0, r3
 80041e4:	3730      	adds	r7, #48	; 0x30
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	200001b8 	.word	0x200001b8
 80041f0:	200001bc 	.word	0x200001bc
 80041f4:	200000e0 	.word	0x200000e0
 80041f8:	200000dc 	.word	0x200000dc
 80041fc:	e000ed04 	.word	0xe000ed04

08004200 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800420a:	4b32      	ldr	r3, [pc, #200]	; (80042d4 <prvAddCurrentTaskToDelayedList+0xd4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004210:	4b31      	ldr	r3, [pc, #196]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3304      	adds	r3, #4
 8004216:	4618      	mov	r0, r3
 8004218:	f7fe f926 	bl	8002468 <uxListRemove>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10b      	bne.n	800423a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004222:	4b2d      	ldr	r3, [pc, #180]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	2201      	movs	r2, #1
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	43da      	mvns	r2, r3
 8004230:	4b2a      	ldr	r3, [pc, #168]	; (80042dc <prvAddCurrentTaskToDelayedList+0xdc>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4013      	ands	r3, r2
 8004236:	4a29      	ldr	r2, [pc, #164]	; (80042dc <prvAddCurrentTaskToDelayedList+0xdc>)
 8004238:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004240:	d110      	bne.n	8004264 <prvAddCurrentTaskToDelayedList+0x64>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00d      	beq.n	8004264 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8004248:	4b23      	ldr	r3, [pc, #140]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	211b      	movs	r1, #27
 800424e:	4618      	mov	r0, r3
 8004250:	f003 fa10 	bl	8007674 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004254:	4b20      	ldr	r3, [pc, #128]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3304      	adds	r3, #4
 800425a:	4619      	mov	r1, r3
 800425c:	4820      	ldr	r0, [pc, #128]	; (80042e0 <prvAddCurrentTaskToDelayedList+0xe0>)
 800425e:	f7fe f8a6 	bl	80023ae <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004262:	e032      	b.n	80042ca <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4413      	add	r3, r2
 800426a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800426c:	4b1a      	ldr	r3, [pc, #104]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	429a      	cmp	r2, r3
 800427a:	d20f      	bcs.n	800429c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800427c:	4b16      	ldr	r3, [pc, #88]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2104      	movs	r1, #4
 8004282:	4618      	mov	r0, r3
 8004284:	f003 f9f6 	bl	8007674 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004288:	4b16      	ldr	r3, [pc, #88]	; (80042e4 <prvAddCurrentTaskToDelayedList+0xe4>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	4b12      	ldr	r3, [pc, #72]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3304      	adds	r3, #4
 8004292:	4619      	mov	r1, r3
 8004294:	4610      	mov	r0, r2
 8004296:	f7fe f8ae 	bl	80023f6 <vListInsert>
}
 800429a:	e016      	b.n	80042ca <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800429c:	4b0e      	ldr	r3, [pc, #56]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2104      	movs	r1, #4
 80042a2:	4618      	mov	r0, r3
 80042a4:	f003 f9e6 	bl	8007674 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042a8:	4b0f      	ldr	r3, [pc, #60]	; (80042e8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3304      	adds	r3, #4
 80042b2:	4619      	mov	r1, r3
 80042b4:	4610      	mov	r0, r2
 80042b6:	f7fe f89e 	bl	80023f6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80042ba:	4b0c      	ldr	r3, [pc, #48]	; (80042ec <prvAddCurrentTaskToDelayedList+0xec>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d202      	bcs.n	80042ca <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80042c4:	4a09      	ldr	r2, [pc, #36]	; (80042ec <prvAddCurrentTaskToDelayedList+0xec>)
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	6013      	str	r3, [r2, #0]
}
 80042ca:	bf00      	nop
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	200001b8 	.word	0x200001b8
 80042d8:	200000dc 	.word	0x200000dc
 80042dc:	200001bc 	.word	0x200001bc
 80042e0:	200001a0 	.word	0x200001a0
 80042e4:	20000170 	.word	0x20000170
 80042e8:	2000016c 	.word	0x2000016c
 80042ec:	200001d4 	.word	0x200001d4

080042f0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80042fa:	f000 fad5 	bl	80048a8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80042fe:	4b11      	ldr	r3, [pc, #68]	; (8004344 <xTimerCreateTimerTask+0x54>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00b      	beq.n	800431e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004306:	4b10      	ldr	r3, [pc, #64]	; (8004348 <xTimerCreateTimerTask+0x58>)
 8004308:	9301      	str	r3, [sp, #4]
 800430a:	2302      	movs	r3, #2
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	2300      	movs	r3, #0
 8004310:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004314:	490d      	ldr	r1, [pc, #52]	; (800434c <xTimerCreateTimerTask+0x5c>)
 8004316:	480e      	ldr	r0, [pc, #56]	; (8004350 <xTimerCreateTimerTask+0x60>)
 8004318:	f7fe fe2a 	bl	8002f70 <xTaskCreate>
 800431c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10a      	bne.n	800433a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	603b      	str	r3, [r7, #0]
    }
 8004336:	bf00      	nop
 8004338:	e7fe      	b.n	8004338 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800433a:	687b      	ldr	r3, [r7, #4]
    }
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20000210 	.word	0x20000210
 8004348:	20000214 	.word	0x20000214
 800434c:	08007b90 	.word	0x08007b90
 8004350:	08004489 	.word	0x08004489

08004354 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004354:	b580      	push	{r7, lr}
 8004356:	b08a      	sub	sp, #40	; 0x28
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004362:	2300      	movs	r3, #0
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <xTimerGenericCommand+0x2e>
        __asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	623b      	str	r3, [r7, #32]
    }
 800437e:	bf00      	nop
 8004380:	e7fe      	b.n	8004380 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004382:	4b1a      	ldr	r3, [pc, #104]	; (80043ec <xTimerGenericCommand+0x98>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d02a      	beq.n	80043e0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2b05      	cmp	r3, #5
 800439a:	dc18      	bgt.n	80043ce <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800439c:	f7ff fd18 	bl	8003dd0 <xTaskGetSchedulerState>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d109      	bne.n	80043ba <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80043a6:	4b11      	ldr	r3, [pc, #68]	; (80043ec <xTimerGenericCommand+0x98>)
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	f107 0114 	add.w	r1, r7, #20
 80043ae:	2300      	movs	r3, #0
 80043b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b2:	f7fe f973 	bl	800269c <xQueueGenericSend>
 80043b6:	6278      	str	r0, [r7, #36]	; 0x24
 80043b8:	e012      	b.n	80043e0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80043ba:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <xTimerGenericCommand+0x98>)
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	f107 0114 	add.w	r1, r7, #20
 80043c2:	2300      	movs	r3, #0
 80043c4:	2200      	movs	r2, #0
 80043c6:	f7fe f969 	bl	800269c <xQueueGenericSend>
 80043ca:	6278      	str	r0, [r7, #36]	; 0x24
 80043cc:	e008      	b.n	80043e0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80043ce:	4b07      	ldr	r3, [pc, #28]	; (80043ec <xTimerGenericCommand+0x98>)
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	f107 0114 	add.w	r1, r7, #20
 80043d6:	2300      	movs	r3, #0
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	f7fe fa85 	bl	80028e8 <xQueueGenericSendFromISR>
 80043de:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80043e2:	4618      	mov	r0, r3
 80043e4:	3728      	adds	r7, #40	; 0x28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20000210 	.word	0x20000210

080043f0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043fa:	4b22      	ldr	r3, [pc, #136]	; (8004484 <prvProcessExpiredTimer+0x94>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	3304      	adds	r3, #4
 8004408:	4618      	mov	r0, r3
 800440a:	f7fe f82d 	bl	8002468 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	d022      	beq.n	8004462 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	699a      	ldr	r2, [r3, #24]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	18d1      	adds	r1, r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	6978      	ldr	r0, [r7, #20]
 800442a:	f000 f8d1 	bl	80045d0 <prvInsertTimerInActiveList>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d01f      	beq.n	8004474 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004434:	2300      	movs	r3, #0
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	2300      	movs	r3, #0
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	2100      	movs	r1, #0
 800443e:	6978      	ldr	r0, [r7, #20]
 8004440:	f7ff ff88 	bl	8004354 <xTimerGenericCommand>
 8004444:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d113      	bne.n	8004474 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800444c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004450:	f383 8811 	msr	BASEPRI, r3
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	60fb      	str	r3, [r7, #12]
    }
 800445e:	bf00      	nop
 8004460:	e7fe      	b.n	8004460 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004468:	f023 0301 	bic.w	r3, r3, #1
 800446c:	b2da      	uxtb	r2, r3
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	6978      	ldr	r0, [r7, #20]
 800447a:	4798      	blx	r3
    }
 800447c:	bf00      	nop
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	20000208 	.word	0x20000208

08004488 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004490:	f107 0308 	add.w	r3, r7, #8
 8004494:	4618      	mov	r0, r3
 8004496:	f000 f857 	bl	8004548 <prvGetNextExpireTime>
 800449a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4619      	mov	r1, r3
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f803 	bl	80044ac <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80044a6:	f000 f8d5 	bl	8004654 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044aa:	e7f1      	b.n	8004490 <prvTimerTask+0x8>

080044ac <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80044b6:	f7ff f8a3 	bl	8003600 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044ba:	f107 0308 	add.w	r3, r7, #8
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 f866 	bl	8004590 <prvSampleTimeNow>
 80044c4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d130      	bne.n	800452e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10a      	bne.n	80044e8 <prvProcessTimerOrBlockTask+0x3c>
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d806      	bhi.n	80044e8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80044da:	f7ff f89f 	bl	800361c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80044de:	68f9      	ldr	r1, [r7, #12]
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7ff ff85 	bl	80043f0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80044e6:	e024      	b.n	8004532 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d008      	beq.n	8004500 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80044ee:	4b13      	ldr	r3, [pc, #76]	; (800453c <prvProcessTimerOrBlockTask+0x90>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <prvProcessTimerOrBlockTask+0x50>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <prvProcessTimerOrBlockTask+0x52>
 80044fc:	2300      	movs	r3, #0
 80044fe:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004500:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <prvProcessTimerOrBlockTask+0x94>)
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	4619      	mov	r1, r3
 800450e:	f7fe fcfb 	bl	8002f08 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004512:	f7ff f883 	bl	800361c <xTaskResumeAll>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10a      	bne.n	8004532 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800451c:	4b09      	ldr	r3, [pc, #36]	; (8004544 <prvProcessTimerOrBlockTask+0x98>)
 800451e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	f3bf 8f6f 	isb	sy
    }
 800452c:	e001      	b.n	8004532 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800452e:	f7ff f875 	bl	800361c <xTaskResumeAll>
    }
 8004532:	bf00      	nop
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	2000020c 	.word	0x2000020c
 8004540:	20000210 	.word	0x20000210
 8004544:	e000ed04 	.word	0xe000ed04

08004548 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004550:	4b0e      	ldr	r3, [pc, #56]	; (800458c <prvGetNextExpireTime+0x44>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <prvGetNextExpireTime+0x16>
 800455a:	2201      	movs	r2, #1
 800455c:	e000      	b.n	8004560 <prvGetNextExpireTime+0x18>
 800455e:	2200      	movs	r2, #0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d105      	bne.n	8004578 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800456c:	4b07      	ldr	r3, [pc, #28]	; (800458c <prvGetNextExpireTime+0x44>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	60fb      	str	r3, [r7, #12]
 8004576:	e001      	b.n	800457c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800457c:	68fb      	ldr	r3, [r7, #12]
    }
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	20000208 	.word	0x20000208

08004590 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004598:	f7ff f8e0 	bl	800375c <xTaskGetTickCount>
 800459c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800459e:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <prvSampleTimeNow+0x3c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d205      	bcs.n	80045b4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80045a8:	f000 f91a 	bl	80047e0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	e002      	b.n	80045ba <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80045ba:	4a04      	ldr	r2, [pc, #16]	; (80045cc <prvSampleTimeNow+0x3c>)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80045c0:	68fb      	ldr	r3, [r7, #12]
    }
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000218 	.word	0x20000218

080045d0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
 80045dc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80045de:	2300      	movs	r3, #0
 80045e0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d812      	bhi.n	800461c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	1ad2      	subs	r2, r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	429a      	cmp	r2, r3
 8004602:	d302      	bcc.n	800460a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004604:	2301      	movs	r3, #1
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	e01b      	b.n	8004642 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800460a:	4b10      	ldr	r3, [pc, #64]	; (800464c <prvInsertTimerInActiveList+0x7c>)
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3304      	adds	r3, #4
 8004612:	4619      	mov	r1, r3
 8004614:	4610      	mov	r0, r2
 8004616:	f7fd feee 	bl	80023f6 <vListInsert>
 800461a:	e012      	b.n	8004642 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	429a      	cmp	r2, r3
 8004622:	d206      	bcs.n	8004632 <prvInsertTimerInActiveList+0x62>
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d302      	bcc.n	8004632 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800462c:	2301      	movs	r3, #1
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	e007      	b.n	8004642 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004632:	4b07      	ldr	r3, [pc, #28]	; (8004650 <prvInsertTimerInActiveList+0x80>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3304      	adds	r3, #4
 800463a:	4619      	mov	r1, r3
 800463c:	4610      	mov	r0, r2
 800463e:	f7fd feda 	bl	80023f6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004642:	697b      	ldr	r3, [r7, #20]
    }
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	2000020c 	.word	0x2000020c
 8004650:	20000208 	.word	0x20000208

08004654 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004654:	b580      	push	{r7, lr}
 8004656:	b08c      	sub	sp, #48	; 0x30
 8004658:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800465a:	e0ae      	b.n	80047ba <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	f2c0 80ab 	blt.w	80047ba <prvProcessReceivedCommands+0x166>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d004      	beq.n	800467a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	3304      	adds	r3, #4
 8004674:	4618      	mov	r0, r3
 8004676:	f7fd fef7 	bl	8002468 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800467a:	1d3b      	adds	r3, r7, #4
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff ff87 	bl	8004590 <prvSampleTimeNow>
 8004682:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b09      	cmp	r3, #9
 8004688:	f200 8096 	bhi.w	80047b8 <prvProcessReceivedCommands+0x164>
 800468c:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <prvProcessReceivedCommands+0x40>)
 800468e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004692:	bf00      	nop
 8004694:	080046bd 	.word	0x080046bd
 8004698:	080046bd 	.word	0x080046bd
 800469c:	080046bd 	.word	0x080046bd
 80046a0:	08004731 	.word	0x08004731
 80046a4:	08004745 	.word	0x08004745
 80046a8:	0800478f 	.word	0x0800478f
 80046ac:	080046bd 	.word	0x080046bd
 80046b0:	080046bd 	.word	0x080046bd
 80046b4:	08004731 	.word	0x08004731
 80046b8:	08004745 	.word	0x08004745
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046c2:	f043 0301 	orr.w	r3, r3, #1
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	18d1      	adds	r1, r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a3a      	ldr	r2, [r7, #32]
 80046da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046dc:	f7ff ff78 	bl	80045d0 <prvInsertTimerInActiveList>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d069      	beq.n	80047ba <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046ec:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d05e      	beq.n	80047ba <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	441a      	add	r2, r3
 8004704:	2300      	movs	r3, #0
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	2300      	movs	r3, #0
 800470a:	2100      	movs	r1, #0
 800470c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800470e:	f7ff fe21 	bl	8004354 <xTimerGenericCommand>
 8004712:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d14f      	bne.n	80047ba <prvProcessReceivedCommands+0x166>
        __asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	61bb      	str	r3, [r7, #24]
    }
 800472c:	bf00      	nop
 800472e:	e7fe      	b.n	800472e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004736:	f023 0301 	bic.w	r3, r3, #1
 800473a:	b2da      	uxtb	r2, r3
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004742:	e03a      	b.n	80047ba <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800474a:	f043 0301 	orr.w	r3, r3, #1
 800474e:	b2da      	uxtb	r2, r3
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10a      	bne.n	800477a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	617b      	str	r3, [r7, #20]
    }
 8004776:	bf00      	nop
 8004778:	e7fe      	b.n	8004778 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	18d1      	adds	r1, r2, r3
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	6a3a      	ldr	r2, [r7, #32]
 8004786:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004788:	f7ff ff22 	bl	80045d0 <prvInsertTimerInActiveList>
                        break;
 800478c:	e015      	b.n	80047ba <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d103      	bne.n	80047a4 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800479c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800479e:	f000 fbf5 	bl	8004f8c <vPortFree>
 80047a2:	e00a      	b.n	80047ba <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047aa:	f023 0301 	bic.w	r3, r3, #1
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80047b6:	e000      	b.n	80047ba <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
 80047b8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047ba:	4b08      	ldr	r3, [pc, #32]	; (80047dc <prvProcessReceivedCommands+0x188>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f107 0108 	add.w	r1, r7, #8
 80047c2:	2200      	movs	r2, #0
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fe f94d 	bl	8002a64 <xQueueReceive>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f47f af45 	bne.w	800465c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80047d2:	bf00      	nop
 80047d4:	bf00      	nop
 80047d6:	3728      	adds	r7, #40	; 0x28
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	20000210 	.word	0x20000210

080047e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b088      	sub	sp, #32
 80047e4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047e6:	e048      	b.n	800487a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047e8:	4b2d      	ldr	r3, [pc, #180]	; (80048a0 <prvSwitchTimerLists+0xc0>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047f2:	4b2b      	ldr	r3, [pc, #172]	; (80048a0 <prvSwitchTimerLists+0xc0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3304      	adds	r3, #4
 8004800:	4618      	mov	r0, r3
 8004802:	f7fd fe31 	bl	8002468 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d02e      	beq.n	800487a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	4413      	add	r3, r2
 8004824:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	429a      	cmp	r2, r3
 800482c:	d90e      	bls.n	800484c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800483a:	4b19      	ldr	r3, [pc, #100]	; (80048a0 <prvSwitchTimerLists+0xc0>)
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	3304      	adds	r3, #4
 8004842:	4619      	mov	r1, r3
 8004844:	4610      	mov	r0, r2
 8004846:	f7fd fdd6 	bl	80023f6 <vListInsert>
 800484a:	e016      	b.n	800487a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800484c:	2300      	movs	r3, #0
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	2300      	movs	r3, #0
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	2100      	movs	r1, #0
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f7ff fd7c 	bl	8004354 <xTimerGenericCommand>
 800485c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10a      	bne.n	800487a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	603b      	str	r3, [r7, #0]
    }
 8004876:	bf00      	nop
 8004878:	e7fe      	b.n	8004878 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800487a:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <prvSwitchTimerLists+0xc0>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1b1      	bne.n	80047e8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004884:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <prvSwitchTimerLists+0xc0>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800488a:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <prvSwitchTimerLists+0xc4>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a04      	ldr	r2, [pc, #16]	; (80048a0 <prvSwitchTimerLists+0xc0>)
 8004890:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004892:	4a04      	ldr	r2, [pc, #16]	; (80048a4 <prvSwitchTimerLists+0xc4>)
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	6013      	str	r3, [r2, #0]
    }
 8004898:	bf00      	nop
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	20000208 	.word	0x20000208
 80048a4:	2000020c 	.word	0x2000020c

080048a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80048ac:	f000 f964 	bl	8004b78 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80048b0:	4b12      	ldr	r3, [pc, #72]	; (80048fc <prvCheckForValidListAndQueue+0x54>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d11d      	bne.n	80048f4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80048b8:	4811      	ldr	r0, [pc, #68]	; (8004900 <prvCheckForValidListAndQueue+0x58>)
 80048ba:	f7fd fd4b 	bl	8002354 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80048be:	4811      	ldr	r0, [pc, #68]	; (8004904 <prvCheckForValidListAndQueue+0x5c>)
 80048c0:	f7fd fd48 	bl	8002354 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80048c4:	4b10      	ldr	r3, [pc, #64]	; (8004908 <prvCheckForValidListAndQueue+0x60>)
 80048c6:	4a0e      	ldr	r2, [pc, #56]	; (8004900 <prvCheckForValidListAndQueue+0x58>)
 80048c8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80048ca:	4b10      	ldr	r3, [pc, #64]	; (800490c <prvCheckForValidListAndQueue+0x64>)
 80048cc:	4a0d      	ldr	r2, [pc, #52]	; (8004904 <prvCheckForValidListAndQueue+0x5c>)
 80048ce:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80048d0:	2200      	movs	r2, #0
 80048d2:	210c      	movs	r1, #12
 80048d4:	200a      	movs	r0, #10
 80048d6:	f7fd fe59 	bl	800258c <xQueueGenericCreate>
 80048da:	4603      	mov	r3, r0
 80048dc:	4a07      	ldr	r2, [pc, #28]	; (80048fc <prvCheckForValidListAndQueue+0x54>)
 80048de:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80048e0:	4b06      	ldr	r3, [pc, #24]	; (80048fc <prvCheckForValidListAndQueue+0x54>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80048e8:	4b04      	ldr	r3, [pc, #16]	; (80048fc <prvCheckForValidListAndQueue+0x54>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4908      	ldr	r1, [pc, #32]	; (8004910 <prvCheckForValidListAndQueue+0x68>)
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fe fad8 	bl	8002ea4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80048f4:	f000 f970 	bl	8004bd8 <vPortExitCritical>
    }
 80048f8:	bf00      	nop
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	20000210 	.word	0x20000210
 8004900:	200001e0 	.word	0x200001e0
 8004904:	200001f4 	.word	0x200001f4
 8004908:	20000208 	.word	0x20000208
 800490c:	2000020c 	.word	0x2000020c
 8004910:	08007b98 	.word	0x08007b98

08004914 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	3b04      	subs	r3, #4
 8004924:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800492c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3b04      	subs	r3, #4
 8004932:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f023 0201 	bic.w	r2, r3, #1
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	3b04      	subs	r3, #4
 8004942:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004944:	4a0c      	ldr	r2, [pc, #48]	; (8004978 <pxPortInitialiseStack+0x64>)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3b14      	subs	r3, #20
 800494e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3b04      	subs	r3, #4
 800495a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f06f 0202 	mvn.w	r2, #2
 8004962:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	3b20      	subs	r3, #32
 8004968:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800496a:	68fb      	ldr	r3, [r7, #12]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	0800497d 	.word	0x0800497d

0800497c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004982:	2300      	movs	r3, #0
 8004984:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004986:	4b12      	ldr	r3, [pc, #72]	; (80049d0 <prvTaskExitError+0x54>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498e:	d00a      	beq.n	80049a6 <prvTaskExitError+0x2a>
        __asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	60fb      	str	r3, [r7, #12]
    }
 80049a2:	bf00      	nop
 80049a4:	e7fe      	b.n	80049a4 <prvTaskExitError+0x28>
        __asm volatile
 80049a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	60bb      	str	r3, [r7, #8]
    }
 80049b8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80049ba:	bf00      	nop
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0fc      	beq.n	80049bc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80049c2:	bf00      	nop
 80049c4:	bf00      	nop
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	20000010 	.word	0x20000010
	...

080049e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80049e0:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <pxCurrentTCBConst2>)
 80049e2:	6819      	ldr	r1, [r3, #0]
 80049e4:	6808      	ldr	r0, [r1, #0]
 80049e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ea:	f380 8809 	msr	PSP, r0
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f04f 0000 	mov.w	r0, #0
 80049f6:	f380 8811 	msr	BASEPRI, r0
 80049fa:	4770      	bx	lr
 80049fc:	f3af 8000 	nop.w

08004a00 <pxCurrentTCBConst2>:
 8004a00:	200000dc 	.word	0x200000dc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004a04:	bf00      	nop
 8004a06:	bf00      	nop

08004a08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004a08:	4808      	ldr	r0, [pc, #32]	; (8004a2c <prvPortStartFirstTask+0x24>)
 8004a0a:	6800      	ldr	r0, [r0, #0]
 8004a0c:	6800      	ldr	r0, [r0, #0]
 8004a0e:	f380 8808 	msr	MSP, r0
 8004a12:	f04f 0000 	mov.w	r0, #0
 8004a16:	f380 8814 	msr	CONTROL, r0
 8004a1a:	b662      	cpsie	i
 8004a1c:	b661      	cpsie	f
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	df00      	svc	0
 8004a28:	bf00      	nop
 8004a2a:	0000      	.short	0x0000
 8004a2c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004a30:	bf00      	nop
 8004a32:	bf00      	nop

08004a34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a3a:	4b46      	ldr	r3, [pc, #280]	; (8004b54 <xPortStartScheduler+0x120>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a46      	ldr	r2, [pc, #280]	; (8004b58 <xPortStartScheduler+0x124>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d10a      	bne.n	8004a5a <xPortStartScheduler+0x26>
        __asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	613b      	str	r3, [r7, #16]
    }
 8004a56:	bf00      	nop
 8004a58:	e7fe      	b.n	8004a58 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a5a:	4b3e      	ldr	r3, [pc, #248]	; (8004b54 <xPortStartScheduler+0x120>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a3f      	ldr	r2, [pc, #252]	; (8004b5c <xPortStartScheduler+0x128>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d10a      	bne.n	8004a7a <xPortStartScheduler+0x46>
        __asm volatile
 8004a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a68:	f383 8811 	msr	BASEPRI, r3
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	60fb      	str	r3, [r7, #12]
    }
 8004a76:	bf00      	nop
 8004a78:	e7fe      	b.n	8004a78 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a7a:	4b39      	ldr	r3, [pc, #228]	; (8004b60 <xPortStartScheduler+0x12c>)
 8004a7c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	22ff      	movs	r2, #255	; 0xff
 8004a8a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a94:	78fb      	ldrb	r3, [r7, #3]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	4b31      	ldr	r3, [pc, #196]	; (8004b64 <xPortStartScheduler+0x130>)
 8004aa0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004aa2:	4b31      	ldr	r3, [pc, #196]	; (8004b68 <xPortStartScheduler+0x134>)
 8004aa4:	2207      	movs	r2, #7
 8004aa6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004aa8:	e009      	b.n	8004abe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004aaa:	4b2f      	ldr	r3, [pc, #188]	; (8004b68 <xPortStartScheduler+0x134>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	4a2d      	ldr	r2, [pc, #180]	; (8004b68 <xPortStartScheduler+0x134>)
 8004ab2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ab4:	78fb      	ldrb	r3, [r7, #3]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004abe:	78fb      	ldrb	r3, [r7, #3]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac6:	2b80      	cmp	r3, #128	; 0x80
 8004ac8:	d0ef      	beq.n	8004aaa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004aca:	4b27      	ldr	r3, [pc, #156]	; (8004b68 <xPortStartScheduler+0x134>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f1c3 0307 	rsb	r3, r3, #7
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d00a      	beq.n	8004aec <xPortStartScheduler+0xb8>
        __asm volatile
 8004ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	60bb      	str	r3, [r7, #8]
    }
 8004ae8:	bf00      	nop
 8004aea:	e7fe      	b.n	8004aea <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004aec:	4b1e      	ldr	r3, [pc, #120]	; (8004b68 <xPortStartScheduler+0x134>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	021b      	lsls	r3, r3, #8
 8004af2:	4a1d      	ldr	r2, [pc, #116]	; (8004b68 <xPortStartScheduler+0x134>)
 8004af4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004af6:	4b1c      	ldr	r3, [pc, #112]	; (8004b68 <xPortStartScheduler+0x134>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004afe:	4a1a      	ldr	r2, [pc, #104]	; (8004b68 <xPortStartScheduler+0x134>)
 8004b00:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004b0a:	4b18      	ldr	r3, [pc, #96]	; (8004b6c <xPortStartScheduler+0x138>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a17      	ldr	r2, [pc, #92]	; (8004b6c <xPortStartScheduler+0x138>)
 8004b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b14:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004b16:	4b15      	ldr	r3, [pc, #84]	; (8004b6c <xPortStartScheduler+0x138>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a14      	ldr	r2, [pc, #80]	; (8004b6c <xPortStartScheduler+0x138>)
 8004b1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b20:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004b22:	f000 f8e3 	bl	8004cec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004b26:	4b12      	ldr	r3, [pc, #72]	; (8004b70 <xPortStartScheduler+0x13c>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004b2c:	f000 f902 	bl	8004d34 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b30:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <xPortStartScheduler+0x140>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a0f      	ldr	r2, [pc, #60]	; (8004b74 <xPortStartScheduler+0x140>)
 8004b36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b3a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004b3c:	f7ff ff64 	bl	8004a08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004b40:	f7fe feea 	bl	8003918 <vTaskSwitchContext>
    prvTaskExitError();
 8004b44:	f7ff ff1a 	bl	800497c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	e000ed00 	.word	0xe000ed00
 8004b58:	410fc271 	.word	0x410fc271
 8004b5c:	410fc270 	.word	0x410fc270
 8004b60:	e000e400 	.word	0xe000e400
 8004b64:	2000021c 	.word	0x2000021c
 8004b68:	20000220 	.word	0x20000220
 8004b6c:	e000ed20 	.word	0xe000ed20
 8004b70:	20000010 	.word	0x20000010
 8004b74:	e000ef34 	.word	0xe000ef34

08004b78 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
        __asm volatile
 8004b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	607b      	str	r3, [r7, #4]
    }
 8004b90:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004b92:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <vPortEnterCritical+0x58>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3301      	adds	r3, #1
 8004b98:	4a0d      	ldr	r2, [pc, #52]	; (8004bd0 <vPortEnterCritical+0x58>)
 8004b9a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004b9c:	4b0c      	ldr	r3, [pc, #48]	; (8004bd0 <vPortEnterCritical+0x58>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d10f      	bne.n	8004bc4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ba4:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <vPortEnterCritical+0x5c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <vPortEnterCritical+0x4c>
        __asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	603b      	str	r3, [r7, #0]
    }
 8004bc0:	bf00      	nop
 8004bc2:	e7fe      	b.n	8004bc2 <vPortEnterCritical+0x4a>
    }
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	20000010 	.word	0x20000010
 8004bd4:	e000ed04 	.word	0xe000ed04

08004bd8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004bde:	4b12      	ldr	r3, [pc, #72]	; (8004c28 <vPortExitCritical+0x50>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10a      	bne.n	8004bfc <vPortExitCritical+0x24>
        __asm volatile
 8004be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	607b      	str	r3, [r7, #4]
    }
 8004bf8:	bf00      	nop
 8004bfa:	e7fe      	b.n	8004bfa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004bfc:	4b0a      	ldr	r3, [pc, #40]	; (8004c28 <vPortExitCritical+0x50>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3b01      	subs	r3, #1
 8004c02:	4a09      	ldr	r2, [pc, #36]	; (8004c28 <vPortExitCritical+0x50>)
 8004c04:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004c06:	4b08      	ldr	r3, [pc, #32]	; (8004c28 <vPortExitCritical+0x50>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d105      	bne.n	8004c1a <vPortExitCritical+0x42>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	f383 8811 	msr	BASEPRI, r3
    }
 8004c18:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	20000010 	.word	0x20000010
 8004c2c:	00000000 	.word	0x00000000

08004c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004c30:	f3ef 8009 	mrs	r0, PSP
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	4b15      	ldr	r3, [pc, #84]	; (8004c90 <pxCurrentTCBConst>)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	f01e 0f10 	tst.w	lr, #16
 8004c40:	bf08      	it	eq
 8004c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c4a:	6010      	str	r0, [r2, #0]
 8004c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c54:	f380 8811 	msr	BASEPRI, r0
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f7fe fe5a 	bl	8003918 <vTaskSwitchContext>
 8004c64:	f04f 0000 	mov.w	r0, #0
 8004c68:	f380 8811 	msr	BASEPRI, r0
 8004c6c:	bc09      	pop	{r0, r3}
 8004c6e:	6819      	ldr	r1, [r3, #0]
 8004c70:	6808      	ldr	r0, [r1, #0]
 8004c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c76:	f01e 0f10 	tst.w	lr, #16
 8004c7a:	bf08      	it	eq
 8004c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c80:	f380 8809 	msr	PSP, r0
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	f3af 8000 	nop.w

08004c90 <pxCurrentTCBConst>:
 8004c90:	200000dc 	.word	0x200000dc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop

08004c98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
        __asm volatile
 8004c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	607b      	str	r3, [r7, #4]
    }
 8004cb0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004cb2:	f002 fb83 	bl	80073bc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004cb6:	f7fe fd73 	bl	80037a0 <xTaskIncrementTick>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d006      	beq.n	8004cce <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004cc0:	f002 fbda 	bl	8007478 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004cc4:	4b08      	ldr	r3, [pc, #32]	; (8004ce8 <SysTick_Handler+0x50>)
 8004cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	e001      	b.n	8004cd2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004cce:	f002 fbb7 	bl	8007440 <SEGGER_SYSVIEW_RecordExitISR>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	f383 8811 	msr	BASEPRI, r3
    }
 8004cdc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004cde:	bf00      	nop
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	e000ed04 	.word	0xe000ed04

08004cec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <vPortSetupTimerInterrupt+0x34>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <vPortSetupTimerInterrupt+0x38>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	; (8004d28 <vPortSetupTimerInterrupt+0x3c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <vPortSetupTimerInterrupt+0x40>)
 8004d02:	fba2 2303 	umull	r2, r3, r2, r3
 8004d06:	099b      	lsrs	r3, r3, #6
 8004d08:	4a09      	ldr	r2, [pc, #36]	; (8004d30 <vPortSetupTimerInterrupt+0x44>)
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d0e:	4b04      	ldr	r3, [pc, #16]	; (8004d20 <vPortSetupTimerInterrupt+0x34>)
 8004d10:	2207      	movs	r2, #7
 8004d12:	601a      	str	r2, [r3, #0]
}
 8004d14:	bf00      	nop
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	e000e010 	.word	0xe000e010
 8004d24:	e000e018 	.word	0xe000e018
 8004d28:	20000000 	.word	0x20000000
 8004d2c:	10624dd3 	.word	0x10624dd3
 8004d30:	e000e014 	.word	0xe000e014

08004d34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004d34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d44 <vPortEnableVFP+0x10>
 8004d38:	6801      	ldr	r1, [r0, #0]
 8004d3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d3e:	6001      	str	r1, [r0, #0]
 8004d40:	4770      	bx	lr
 8004d42:	0000      	.short	0x0000
 8004d44:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004d48:	bf00      	nop
 8004d4a:	bf00      	nop

08004d4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004d52:	f3ef 8305 	mrs	r3, IPSR
 8004d56:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b0f      	cmp	r3, #15
 8004d5c:	d914      	bls.n	8004d88 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d5e:	4a17      	ldr	r2, [pc, #92]	; (8004dbc <vPortValidateInterruptPriority+0x70>)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4413      	add	r3, r2
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d68:	4b15      	ldr	r3, [pc, #84]	; (8004dc0 <vPortValidateInterruptPriority+0x74>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	7afa      	ldrb	r2, [r7, #11]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d20a      	bcs.n	8004d88 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	607b      	str	r3, [r7, #4]
    }
 8004d84:	bf00      	nop
 8004d86:	e7fe      	b.n	8004d86 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d88:	4b0e      	ldr	r3, [pc, #56]	; (8004dc4 <vPortValidateInterruptPriority+0x78>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d90:	4b0d      	ldr	r3, [pc, #52]	; (8004dc8 <vPortValidateInterruptPriority+0x7c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d90a      	bls.n	8004dae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9c:	f383 8811 	msr	BASEPRI, r3
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	603b      	str	r3, [r7, #0]
    }
 8004daa:	bf00      	nop
 8004dac:	e7fe      	b.n	8004dac <vPortValidateInterruptPriority+0x60>
    }
 8004dae:	bf00      	nop
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	e000e3f0 	.word	0xe000e3f0
 8004dc0:	2000021c 	.word	0x2000021c
 8004dc4:	e000ed0c 	.word	0xe000ed0c
 8004dc8:	20000220 	.word	0x20000220

08004dcc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08a      	sub	sp, #40	; 0x28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004dd8:	f7fe fc12 	bl	8003600 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004ddc:	4b65      	ldr	r3, [pc, #404]	; (8004f74 <pvPortMalloc+0x1a8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004de4:	f000 f934 	bl	8005050 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004de8:	4b63      	ldr	r3, [pc, #396]	; (8004f78 <pvPortMalloc+0x1ac>)
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4013      	ands	r3, r2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f040 80a7 	bne.w	8004f44 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d02d      	beq.n	8004e58 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004dfc:	2208      	movs	r2, #8
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d227      	bcs.n	8004e58 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004e08:	2208      	movs	r2, #8
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d021      	beq.n	8004e5e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f023 0307 	bic.w	r3, r3, #7
 8004e20:	3308      	adds	r3, #8
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d214      	bcs.n	8004e52 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f023 0307 	bic.w	r3, r3, #7
 8004e2e:	3308      	adds	r3, #8
 8004e30:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d010      	beq.n	8004e5e <pvPortMalloc+0x92>
        __asm volatile
 8004e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	617b      	str	r3, [r7, #20]
    }
 8004e4e:	bf00      	nop
 8004e50:	e7fe      	b.n	8004e50 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e56:	e002      	b.n	8004e5e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	607b      	str	r3, [r7, #4]
 8004e5c:	e000      	b.n	8004e60 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e5e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d06e      	beq.n	8004f44 <pvPortMalloc+0x178>
 8004e66:	4b45      	ldr	r3, [pc, #276]	; (8004f7c <pvPortMalloc+0x1b0>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d869      	bhi.n	8004f44 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004e70:	4b43      	ldr	r3, [pc, #268]	; (8004f80 <pvPortMalloc+0x1b4>)
 8004e72:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004e74:	4b42      	ldr	r3, [pc, #264]	; (8004f80 <pvPortMalloc+0x1b4>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e7a:	e004      	b.n	8004e86 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d903      	bls.n	8004e98 <pvPortMalloc+0xcc>
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1f1      	bne.n	8004e7c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004e98:	4b36      	ldr	r3, [pc, #216]	; (8004f74 <pvPortMalloc+0x1a8>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d050      	beq.n	8004f44 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2208      	movs	r2, #8
 8004ea8:	4413      	add	r3, r2
 8004eaa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	1ad2      	subs	r2, r2, r3
 8004ebc:	2308      	movs	r3, #8
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d91f      	bls.n	8004f04 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4413      	add	r3, r2
 8004eca:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	f003 0307 	and.w	r3, r3, #7
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <pvPortMalloc+0x120>
        __asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	613b      	str	r3, [r7, #16]
    }
 8004ee8:	bf00      	nop
 8004eea:	e7fe      	b.n	8004eea <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	1ad2      	subs	r2, r2, r3
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004efe:	69b8      	ldr	r0, [r7, #24]
 8004f00:	f000 f908 	bl	8005114 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f04:	4b1d      	ldr	r3, [pc, #116]	; (8004f7c <pvPortMalloc+0x1b0>)
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	4a1b      	ldr	r2, [pc, #108]	; (8004f7c <pvPortMalloc+0x1b0>)
 8004f10:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f12:	4b1a      	ldr	r3, [pc, #104]	; (8004f7c <pvPortMalloc+0x1b0>)
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	4b1b      	ldr	r3, [pc, #108]	; (8004f84 <pvPortMalloc+0x1b8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d203      	bcs.n	8004f26 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f1e:	4b17      	ldr	r3, [pc, #92]	; (8004f7c <pvPortMalloc+0x1b0>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a18      	ldr	r2, [pc, #96]	; (8004f84 <pvPortMalloc+0x1b8>)
 8004f24:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	4b13      	ldr	r3, [pc, #76]	; (8004f78 <pvPortMalloc+0x1ac>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004f3a:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <pvPortMalloc+0x1bc>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	4a11      	ldr	r2, [pc, #68]	; (8004f88 <pvPortMalloc+0x1bc>)
 8004f42:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004f44:	f7fe fb6a 	bl	800361c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <pvPortMalloc+0x19c>
        __asm volatile
 8004f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f56:	f383 8811 	msr	BASEPRI, r3
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	60fb      	str	r3, [r7, #12]
    }
 8004f64:	bf00      	nop
 8004f66:	e7fe      	b.n	8004f66 <pvPortMalloc+0x19a>
    return pvReturn;
 8004f68:	69fb      	ldr	r3, [r7, #28]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3728      	adds	r7, #40	; 0x28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20012e2c 	.word	0x20012e2c
 8004f78:	20012e40 	.word	0x20012e40
 8004f7c:	20012e30 	.word	0x20012e30
 8004f80:	20012e24 	.word	0x20012e24
 8004f84:	20012e34 	.word	0x20012e34
 8004f88:	20012e38 	.word	0x20012e38

08004f8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d04d      	beq.n	800503a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004f9e:	2308      	movs	r3, #8
 8004fa0:	425b      	negs	r3, r3
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	4b24      	ldr	r3, [pc, #144]	; (8005044 <vPortFree+0xb8>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10a      	bne.n	8004fd0 <vPortFree+0x44>
        __asm volatile
 8004fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	60fb      	str	r3, [r7, #12]
    }
 8004fcc:	bf00      	nop
 8004fce:	e7fe      	b.n	8004fce <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00a      	beq.n	8004fee <vPortFree+0x62>
        __asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	60bb      	str	r3, [r7, #8]
    }
 8004fea:	bf00      	nop
 8004fec:	e7fe      	b.n	8004fec <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	4b14      	ldr	r3, [pc, #80]	; (8005044 <vPortFree+0xb8>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d01e      	beq.n	800503a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d11a      	bne.n	800503a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	4b0e      	ldr	r3, [pc, #56]	; (8005044 <vPortFree+0xb8>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	43db      	mvns	r3, r3
 800500e:	401a      	ands	r2, r3
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005014:	f7fe faf4 	bl	8003600 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <vPortFree+0xbc>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4413      	add	r3, r2
 8005022:	4a09      	ldr	r2, [pc, #36]	; (8005048 <vPortFree+0xbc>)
 8005024:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005026:	6938      	ldr	r0, [r7, #16]
 8005028:	f000 f874 	bl	8005114 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800502c:	4b07      	ldr	r3, [pc, #28]	; (800504c <vPortFree+0xc0>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3301      	adds	r3, #1
 8005032:	4a06      	ldr	r2, [pc, #24]	; (800504c <vPortFree+0xc0>)
 8005034:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005036:	f7fe faf1 	bl	800361c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800503a:	bf00      	nop
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20012e40 	.word	0x20012e40
 8005048:	20012e30 	.word	0x20012e30
 800504c:	20012e3c 	.word	0x20012e3c

08005050 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005056:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800505a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800505c:	4b27      	ldr	r3, [pc, #156]	; (80050fc <prvHeapInit+0xac>)
 800505e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00c      	beq.n	8005084 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	3307      	adds	r3, #7
 800506e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0307 	bic.w	r3, r3, #7
 8005076:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	4a1f      	ldr	r2, [pc, #124]	; (80050fc <prvHeapInit+0xac>)
 8005080:	4413      	add	r3, r2
 8005082:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005088:	4a1d      	ldr	r2, [pc, #116]	; (8005100 <prvHeapInit+0xb0>)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800508e:	4b1c      	ldr	r3, [pc, #112]	; (8005100 <prvHeapInit+0xb0>)
 8005090:	2200      	movs	r2, #0
 8005092:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	4413      	add	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800509c:	2208      	movs	r2, #8
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	1a9b      	subs	r3, r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0307 	bic.w	r3, r3, #7
 80050aa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4a15      	ldr	r2, [pc, #84]	; (8005104 <prvHeapInit+0xb4>)
 80050b0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80050b2:	4b14      	ldr	r3, [pc, #80]	; (8005104 <prvHeapInit+0xb4>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2200      	movs	r2, #0
 80050b8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80050ba:	4b12      	ldr	r3, [pc, #72]	; (8005104 <prvHeapInit+0xb4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	1ad2      	subs	r2, r2, r3
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050d0:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <prvHeapInit+0xb4>)
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	4a0a      	ldr	r2, [pc, #40]	; (8005108 <prvHeapInit+0xb8>)
 80050de:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	4a09      	ldr	r2, [pc, #36]	; (800510c <prvHeapInit+0xbc>)
 80050e6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050e8:	4b09      	ldr	r3, [pc, #36]	; (8005110 <prvHeapInit+0xc0>)
 80050ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80050ee:	601a      	str	r2, [r3, #0]
}
 80050f0:	bf00      	nop
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	20000224 	.word	0x20000224
 8005100:	20012e24 	.word	0x20012e24
 8005104:	20012e2c 	.word	0x20012e2c
 8005108:	20012e34 	.word	0x20012e34
 800510c:	20012e30 	.word	0x20012e30
 8005110:	20012e40 	.word	0x20012e40

08005114 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800511c:	4b28      	ldr	r3, [pc, #160]	; (80051c0 <prvInsertBlockIntoFreeList+0xac>)
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	e002      	b.n	8005128 <prvInsertBlockIntoFreeList+0x14>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	429a      	cmp	r2, r3
 8005130:	d8f7      	bhi.n	8005122 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	4413      	add	r3, r2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	429a      	cmp	r2, r3
 8005142:	d108      	bne.n	8005156 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	441a      	add	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	441a      	add	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	429a      	cmp	r2, r3
 8005168:	d118      	bne.n	800519c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	4b15      	ldr	r3, [pc, #84]	; (80051c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d00d      	beq.n	8005192 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	441a      	add	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	e008      	b.n	80051a4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005192:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	e003      	b.n	80051a4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d002      	beq.n	80051b2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80051b2:	bf00      	nop
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	20012e24 	.word	0x20012e24
 80051c4:	20012e2c 	.word	0x20012e2c

080051c8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80051cc:	4803      	ldr	r0, [pc, #12]	; (80051dc <_cbSendSystemDesc+0x14>)
 80051ce:	f002 f89f 	bl	8007310 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80051d2:	4803      	ldr	r0, [pc, #12]	; (80051e0 <_cbSendSystemDesc+0x18>)
 80051d4:	f002 f89c 	bl	8007310 <SEGGER_SYSVIEW_SendSysDesc>
}
 80051d8:	bf00      	nop
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	08007ba0 	.word	0x08007ba0
 80051e0:	08007be4 	.word	0x08007be4

080051e4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80051e8:	4b06      	ldr	r3, [pc, #24]	; (8005204 <SEGGER_SYSVIEW_Conf+0x20>)
 80051ea:	6818      	ldr	r0, [r3, #0]
 80051ec:	4b05      	ldr	r3, [pc, #20]	; (8005204 <SEGGER_SYSVIEW_Conf+0x20>)
 80051ee:	6819      	ldr	r1, [r3, #0]
 80051f0:	4b05      	ldr	r3, [pc, #20]	; (8005208 <SEGGER_SYSVIEW_Conf+0x24>)
 80051f2:	4a06      	ldr	r2, [pc, #24]	; (800520c <SEGGER_SYSVIEW_Conf+0x28>)
 80051f4:	f001 fc08 	bl	8006a08 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80051f8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80051fc:	f001 fc48 	bl	8006a90 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005200:	bf00      	nop
 8005202:	bd80      	pop	{r7, pc}
 8005204:	20000000 	.word	0x20000000
 8005208:	080051c9 	.word	0x080051c9
 800520c:	08007c84 	.word	0x08007c84

08005210 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005212:	b085      	sub	sp, #20
 8005214:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005216:	2300      	movs	r3, #0
 8005218:	607b      	str	r3, [r7, #4]
 800521a:	e033      	b.n	8005284 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800521c:	491e      	ldr	r1, [pc, #120]	; (8005298 <_cbSendTaskList+0x88>)
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	4613      	mov	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	440b      	add	r3, r1
 800522a:	6818      	ldr	r0, [r3, #0]
 800522c:	491a      	ldr	r1, [pc, #104]	; (8005298 <_cbSendTaskList+0x88>)
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	440b      	add	r3, r1
 800523a:	3304      	adds	r3, #4
 800523c:	6819      	ldr	r1, [r3, #0]
 800523e:	4c16      	ldr	r4, [pc, #88]	; (8005298 <_cbSendTaskList+0x88>)
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	4613      	mov	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4423      	add	r3, r4
 800524c:	3308      	adds	r3, #8
 800524e:	681c      	ldr	r4, [r3, #0]
 8005250:	4d11      	ldr	r5, [pc, #68]	; (8005298 <_cbSendTaskList+0x88>)
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	4613      	mov	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	442b      	add	r3, r5
 800525e:	330c      	adds	r3, #12
 8005260:	681d      	ldr	r5, [r3, #0]
 8005262:	4e0d      	ldr	r6, [pc, #52]	; (8005298 <_cbSendTaskList+0x88>)
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	4613      	mov	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4433      	add	r3, r6
 8005270:	3310      	adds	r3, #16
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	462b      	mov	r3, r5
 8005278:	4622      	mov	r2, r4
 800527a:	f000 f8bd 	bl	80053f8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	3301      	adds	r3, #1
 8005282:	607b      	str	r3, [r7, #4]
 8005284:	4b05      	ldr	r3, [pc, #20]	; (800529c <_cbSendTaskList+0x8c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	429a      	cmp	r2, r3
 800528c:	d3c6      	bcc.n	800521c <_cbSendTaskList+0xc>
  }
}
 800528e:	bf00      	nop
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005298:	20012e44 	.word	0x20012e44
 800529c:	20012ee4 	.word	0x20012ee4

080052a0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80052a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052a4:	b082      	sub	sp, #8
 80052a6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80052a8:	f7fe fa68 	bl	800377c <xTaskGetTickCountFromISR>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2200      	movs	r2, #0
 80052b0:	469a      	mov	sl, r3
 80052b2:	4693      	mov	fp, r2
 80052b4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80052b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	f04f 0a00 	mov.w	sl, #0
 80052c4:	f04f 0b00 	mov.w	fp, #0
 80052c8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80052cc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80052d0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80052d4:	4652      	mov	r2, sl
 80052d6:	465b      	mov	r3, fp
 80052d8:	1a14      	subs	r4, r2, r0
 80052da:	eb63 0501 	sbc.w	r5, r3, r1
 80052de:	f04f 0200 	mov.w	r2, #0
 80052e2:	f04f 0300 	mov.w	r3, #0
 80052e6:	00ab      	lsls	r3, r5, #2
 80052e8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80052ec:	00a2      	lsls	r2, r4, #2
 80052ee:	4614      	mov	r4, r2
 80052f0:	461d      	mov	r5, r3
 80052f2:	eb14 0800 	adds.w	r8, r4, r0
 80052f6:	eb45 0901 	adc.w	r9, r5, r1
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005306:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800530a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800530e:	4690      	mov	r8, r2
 8005310:	4699      	mov	r9, r3
 8005312:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005316:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800531a:	4610      	mov	r0, r2
 800531c:	4619      	mov	r1, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005328 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af02      	add	r7, sp, #8
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005336:	2205      	movs	r2, #5
 8005338:	492b      	ldr	r1, [pc, #172]	; (80053e8 <SYSVIEW_AddTask+0xc0>)
 800533a:	68b8      	ldr	r0, [r7, #8]
 800533c:	f002 fb84 	bl	8007a48 <memcmp>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d04b      	beq.n	80053de <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005346:	4b29      	ldr	r3, [pc, #164]	; (80053ec <SYSVIEW_AddTask+0xc4>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2b07      	cmp	r3, #7
 800534c:	d903      	bls.n	8005356 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800534e:	4828      	ldr	r0, [pc, #160]	; (80053f0 <SYSVIEW_AddTask+0xc8>)
 8005350:	f002 faf0 	bl	8007934 <SEGGER_SYSVIEW_Warn>
    return;
 8005354:	e044      	b.n	80053e0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005356:	4b25      	ldr	r3, [pc, #148]	; (80053ec <SYSVIEW_AddTask+0xc4>)
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	4926      	ldr	r1, [pc, #152]	; (80053f4 <SYSVIEW_AddTask+0xcc>)
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	440b      	add	r3, r1
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800536a:	4b20      	ldr	r3, [pc, #128]	; (80053ec <SYSVIEW_AddTask+0xc4>)
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4921      	ldr	r1, [pc, #132]	; (80053f4 <SYSVIEW_AddTask+0xcc>)
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	440b      	add	r3, r1
 800537a:	3304      	adds	r3, #4
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005380:	4b1a      	ldr	r3, [pc, #104]	; (80053ec <SYSVIEW_AddTask+0xc4>)
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	491b      	ldr	r1, [pc, #108]	; (80053f4 <SYSVIEW_AddTask+0xcc>)
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	440b      	add	r3, r1
 8005390:	3308      	adds	r3, #8
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005396:	4b15      	ldr	r3, [pc, #84]	; (80053ec <SYSVIEW_AddTask+0xc4>)
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	4916      	ldr	r1, [pc, #88]	; (80053f4 <SYSVIEW_AddTask+0xcc>)
 800539c:	4613      	mov	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	440b      	add	r3, r1
 80053a6:	330c      	adds	r3, #12
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80053ac:	4b0f      	ldr	r3, [pc, #60]	; (80053ec <SYSVIEW_AddTask+0xc4>)
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	4910      	ldr	r1, [pc, #64]	; (80053f4 <SYSVIEW_AddTask+0xcc>)
 80053b2:	4613      	mov	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	440b      	add	r3, r1
 80053bc:	3310      	adds	r3, #16
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80053c2:	4b0a      	ldr	r3, [pc, #40]	; (80053ec <SYSVIEW_AddTask+0xc4>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3301      	adds	r3, #1
 80053c8:	4a08      	ldr	r2, [pc, #32]	; (80053ec <SYSVIEW_AddTask+0xc4>)
 80053ca:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	68b9      	ldr	r1, [r7, #8]
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f000 f80e 	bl	80053f8 <SYSVIEW_SendTaskInfo>
 80053dc:	e000      	b.n	80053e0 <SYSVIEW_AddTask+0xb8>
    return;
 80053de:	bf00      	nop

}
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	08007bf4 	.word	0x08007bf4
 80053ec:	20012ee4 	.word	0x20012ee4
 80053f0:	08007bfc 	.word	0x08007bfc
 80053f4:	20012e44 	.word	0x20012e44

080053f8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08a      	sub	sp, #40	; 0x28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
 8005404:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005406:	f107 0314 	add.w	r3, r7, #20
 800540a:	2214      	movs	r2, #20
 800540c:	2100      	movs	r1, #0
 800540e:	4618      	mov	r0, r3
 8005410:	f002 fb2a 	bl	8007a68 <memset>
  TaskInfo.TaskID     = TaskID;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005428:	f107 0314 	add.w	r3, r7, #20
 800542c:	4618      	mov	r0, r3
 800542e:	f001 fe77 	bl	8007120 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005432:	bf00      	nop
 8005434:	3728      	adds	r7, #40	; 0x28
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <__NVIC_EnableIRQ>:
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	4603      	mov	r3, r0
 8005444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800544a:	2b00      	cmp	r3, #0
 800544c:	db0b      	blt.n	8005466 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800544e:	79fb      	ldrb	r3, [r7, #7]
 8005450:	f003 021f 	and.w	r2, r3, #31
 8005454:	4907      	ldr	r1, [pc, #28]	; (8005474 <__NVIC_EnableIRQ+0x38>)
 8005456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800545a:	095b      	lsrs	r3, r3, #5
 800545c:	2001      	movs	r0, #1
 800545e:	fa00 f202 	lsl.w	r2, r0, r2
 8005462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	e000e100 	.word	0xe000e100

08005478 <__NVIC_SetPriority>:
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	4603      	mov	r3, r0
 8005480:	6039      	str	r1, [r7, #0]
 8005482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005488:	2b00      	cmp	r3, #0
 800548a:	db0a      	blt.n	80054a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	b2da      	uxtb	r2, r3
 8005490:	490c      	ldr	r1, [pc, #48]	; (80054c4 <__NVIC_SetPriority+0x4c>)
 8005492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005496:	0112      	lsls	r2, r2, #4
 8005498:	b2d2      	uxtb	r2, r2
 800549a:	440b      	add	r3, r1
 800549c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80054a0:	e00a      	b.n	80054b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	4908      	ldr	r1, [pc, #32]	; (80054c8 <__NVIC_SetPriority+0x50>)
 80054a8:	79fb      	ldrb	r3, [r7, #7]
 80054aa:	f003 030f 	and.w	r3, r3, #15
 80054ae:	3b04      	subs	r3, #4
 80054b0:	0112      	lsls	r2, r2, #4
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	440b      	add	r3, r1
 80054b6:	761a      	strb	r2, [r3, #24]
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	e000e100 	.word	0xe000e100
 80054c8:	e000ed00 	.word	0xe000ed00

080054cc <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80054d2:	f002 fa8b 	bl	80079ec <SEGGER_SYSVIEW_IsStarted>
 80054d6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80054de:	f001 fca3 	bl	8006e28 <SEGGER_SYSVIEW_Start>
  }
}
 80054e2:	bf00      	nop
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	4603      	mov	r3, r0
 80054f4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80054f6:	4b0c      	ldr	r3, [pc, #48]	; (8005528 <_cbOnUARTRx+0x3c>)
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b03      	cmp	r3, #3
 80054fc:	d806      	bhi.n	800550c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80054fe:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <_cbOnUARTRx+0x3c>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	3301      	adds	r3, #1
 8005504:	b2da      	uxtb	r2, r3
 8005506:	4b08      	ldr	r3, [pc, #32]	; (8005528 <_cbOnUARTRx+0x3c>)
 8005508:	701a      	strb	r2, [r3, #0]
    goto Done;
 800550a:	e009      	b.n	8005520 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800550c:	f7ff ffde 	bl	80054cc <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005510:	4b05      	ldr	r3, [pc, #20]	; (8005528 <_cbOnUARTRx+0x3c>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	4618      	mov	r0, r3
 8005516:	1dfb      	adds	r3, r7, #7
 8005518:	2201      	movs	r2, #1
 800551a:	4619      	mov	r1, r3
 800551c:	f000 fb9a 	bl	8005c54 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005520:	bf00      	nop
}
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	20000014 	.word	0x20000014

0800552c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005534:	4b14      	ldr	r3, [pc, #80]	; (8005588 <_cbOnUARTTx+0x5c>)
 8005536:	785b      	ldrb	r3, [r3, #1]
 8005538:	2b03      	cmp	r3, #3
 800553a:	d80f      	bhi.n	800555c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800553c:	4b12      	ldr	r3, [pc, #72]	; (8005588 <_cbOnUARTTx+0x5c>)
 800553e:	785b      	ldrb	r3, [r3, #1]
 8005540:	461a      	mov	r2, r3
 8005542:	4b12      	ldr	r3, [pc, #72]	; (800558c <_cbOnUARTTx+0x60>)
 8005544:	5c9a      	ldrb	r2, [r3, r2]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800554a:	4b0f      	ldr	r3, [pc, #60]	; (8005588 <_cbOnUARTTx+0x5c>)
 800554c:	785b      	ldrb	r3, [r3, #1]
 800554e:	3301      	adds	r3, #1
 8005550:	b2da      	uxtb	r2, r3
 8005552:	4b0d      	ldr	r3, [pc, #52]	; (8005588 <_cbOnUARTTx+0x5c>)
 8005554:	705a      	strb	r2, [r3, #1]
    r = 1;
 8005556:	2301      	movs	r3, #1
 8005558:	60fb      	str	r3, [r7, #12]
    goto Done;
 800555a:	e00f      	b.n	800557c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800555c:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <_cbOnUARTTx+0x5c>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	4618      	mov	r0, r3
 8005566:	f000 fa19 	bl	800599c <SEGGER_RTT_ReadUpBufferNoLock>
 800556a:	4603      	mov	r3, r0
 800556c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	da02      	bge.n	800557a <_cbOnUARTTx+0x4e>
    r = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	e000      	b.n	800557c <_cbOnUARTTx+0x50>
  }
Done:
 800557a:	bf00      	nop
  return r;
 800557c:	68fb      	ldr	r3, [r7, #12]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	20000014 	.word	0x20000014
 800558c:	08007c8c 	.word	0x08007c8c

08005590 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005598:	4a04      	ldr	r2, [pc, #16]	; (80055ac <SEGGER_UART_init+0x1c>)
 800559a:	4905      	ldr	r1, [pc, #20]	; (80055b0 <SEGGER_UART_init+0x20>)
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f863 	bl	8005668 <HIF_UART_Init>
}
 80055a2:	bf00      	nop
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	080054ed 	.word	0x080054ed
 80055b0:	0800552d 	.word	0x0800552d

080055b4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80055ba:	4b1e      	ldr	r3, [pc, #120]	; (8005634 <USART2_IRQHandler+0x80>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f003 0320 	and.w	r3, r3, #32
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d011      	beq.n	80055ee <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80055ca:	4b1b      	ldr	r3, [pc, #108]	; (8005638 <USART2_IRQHandler+0x84>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f003 030b 	and.w	r3, r3, #11
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d108      	bne.n	80055ee <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80055dc:	4b17      	ldr	r3, [pc, #92]	; (800563c <USART2_IRQHandler+0x88>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d004      	beq.n	80055ee <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80055e4:	4b15      	ldr	r3, [pc, #84]	; (800563c <USART2_IRQHandler+0x88>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	79fa      	ldrb	r2, [r7, #7]
 80055ea:	4610      	mov	r0, r2
 80055ec:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d01a      	beq.n	800562e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80055f8:	4b11      	ldr	r3, [pc, #68]	; (8005640 <USART2_IRQHandler+0x8c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d015      	beq.n	800562c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005600:	4b0f      	ldr	r3, [pc, #60]	; (8005640 <USART2_IRQHandler+0x8c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	1dfa      	adds	r2, r7, #7
 8005606:	4610      	mov	r0, r2
 8005608:	4798      	blx	r3
 800560a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d106      	bne.n	8005620 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005612:	4b0c      	ldr	r3, [pc, #48]	; (8005644 <USART2_IRQHandler+0x90>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a0b      	ldr	r2, [pc, #44]	; (8005644 <USART2_IRQHandler+0x90>)
 8005618:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800561c:	6013      	str	r3, [r2, #0]
 800561e:	e006      	b.n	800562e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005620:	4b04      	ldr	r3, [pc, #16]	; (8005634 <USART2_IRQHandler+0x80>)
 8005622:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005624:	79fa      	ldrb	r2, [r7, #7]
 8005626:	4b04      	ldr	r3, [pc, #16]	; (8005638 <USART2_IRQHandler+0x84>)
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	e000      	b.n	800562e <USART2_IRQHandler+0x7a>
      return;
 800562c:	bf00      	nop
    }
  }
}
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	40004400 	.word	0x40004400
 8005638:	40004404 	.word	0x40004404
 800563c:	20012ee8 	.word	0x20012ee8
 8005640:	20012eec 	.word	0x20012eec
 8005644:	4000440c 	.word	0x4000440c

08005648 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800564c:	4b05      	ldr	r3, [pc, #20]	; (8005664 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a04      	ldr	r2, [pc, #16]	; (8005664 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005656:	6013      	str	r3, [r2, #0]
}
 8005658:	bf00      	nop
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	4000440c 	.word	0x4000440c

08005668 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005674:	4b2e      	ldr	r3, [pc, #184]	; (8005730 <HIF_UART_Init+0xc8>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a2d      	ldr	r2, [pc, #180]	; (8005730 <HIF_UART_Init+0xc8>)
 800567a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800567e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005680:	4b2c      	ldr	r3, [pc, #176]	; (8005734 <HIF_UART_Init+0xcc>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a2b      	ldr	r2, [pc, #172]	; (8005734 <HIF_UART_Init+0xcc>)
 8005686:	f043 0301 	orr.w	r3, r3, #1
 800568a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800568c:	4b2a      	ldr	r3, [pc, #168]	; (8005738 <HIF_UART_Init+0xd0>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005698:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80056a0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80056a2:	4a25      	ldr	r2, [pc, #148]	; (8005738 <HIF_UART_Init+0xd0>)
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80056a8:	4b24      	ldr	r3, [pc, #144]	; (800573c <HIF_UART_Init+0xd4>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056b4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80056bc:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80056be:	4a1f      	ldr	r2, [pc, #124]	; (800573c <HIF_UART_Init+0xd4>)
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80056c4:	4b1e      	ldr	r3, [pc, #120]	; (8005740 <HIF_UART_Init+0xd8>)
 80056c6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80056ca:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80056cc:	4b1d      	ldr	r3, [pc, #116]	; (8005744 <HIF_UART_Init+0xdc>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80056d2:	4b1d      	ldr	r3, [pc, #116]	; (8005748 <HIF_UART_Init+0xe0>)
 80056d4:	2280      	movs	r2, #128	; 0x80
 80056d6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80056de:	4a1b      	ldr	r2, [pc, #108]	; (800574c <HIF_UART_Init+0xe4>)
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e6:	3301      	adds	r3, #1
 80056e8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	085b      	lsrs	r3, r3, #1
 80056ee:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f6:	d302      	bcc.n	80056fe <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80056f8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80056fc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d004      	beq.n	800570e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	4a11      	ldr	r2, [pc, #68]	; (8005750 <HIF_UART_Init+0xe8>)
 800570a:	b29b      	uxth	r3, r3
 800570c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800570e:	4a11      	ldr	r2, [pc, #68]	; (8005754 <HIF_UART_Init+0xec>)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005714:	4a10      	ldr	r2, [pc, #64]	; (8005758 <HIF_UART_Init+0xf0>)
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800571a:	2106      	movs	r1, #6
 800571c:	2026      	movs	r0, #38	; 0x26
 800571e:	f7ff feab 	bl	8005478 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005722:	2026      	movs	r0, #38	; 0x26
 8005724:	f7ff fe8a 	bl	800543c <__NVIC_EnableIRQ>
}
 8005728:	bf00      	nop
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40023840 	.word	0x40023840
 8005734:	40023830 	.word	0x40023830
 8005738:	40020020 	.word	0x40020020
 800573c:	40020000 	.word	0x40020000
 8005740:	4000440c 	.word	0x4000440c
 8005744:	40004410 	.word	0x40004410
 8005748:	40004414 	.word	0x40004414
 800574c:	0501bd00 	.word	0x0501bd00
 8005750:	40004408 	.word	0x40004408
 8005754:	20012ee8 	.word	0x20012ee8
 8005758:	20012eec 	.word	0x20012eec

0800575c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005762:	4b24      	ldr	r3, [pc, #144]	; (80057f4 <_DoInit+0x98>)
 8005764:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2203      	movs	r2, #3
 800576a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2203      	movs	r2, #3
 8005770:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a20      	ldr	r2, [pc, #128]	; (80057f8 <_DoInit+0x9c>)
 8005776:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a20      	ldr	r2, [pc, #128]	; (80057fc <_DoInit+0xa0>)
 800577c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005784:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a17      	ldr	r2, [pc, #92]	; (80057f8 <_DoInit+0x9c>)
 800579c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a17      	ldr	r2, [pc, #92]	; (8005800 <_DoInit+0xa4>)
 80057a2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2210      	movs	r2, #16
 80057a8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3307      	adds	r3, #7
 80057c0:	4a10      	ldr	r2, [pc, #64]	; (8005804 <_DoInit+0xa8>)
 80057c2:	6810      	ldr	r0, [r2, #0]
 80057c4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80057c6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a0e      	ldr	r2, [pc, #56]	; (8005808 <_DoInit+0xac>)
 80057ce:	6810      	ldr	r0, [r2, #0]
 80057d0:	6018      	str	r0, [r3, #0]
 80057d2:	8891      	ldrh	r1, [r2, #4]
 80057d4:	7992      	ldrb	r2, [r2, #6]
 80057d6:	8099      	strh	r1, [r3, #4]
 80057d8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80057da:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2220      	movs	r2, #32
 80057e2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80057e4:	f3bf 8f5f 	dmb	sy
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	20012ef0 	.word	0x20012ef0
 80057f8:	08007c4c 	.word	0x08007c4c
 80057fc:	20012f98 	.word	0x20012f98
 8005800:	20013398 	.word	0x20013398
 8005804:	08007c58 	.word	0x08007c58
 8005808:	08007c5c 	.word	0x08007c5c

0800580c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800580c:	b580      	push	{r7, lr}
 800580e:	b08a      	sub	sp, #40	; 0x28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005818:	2300      	movs	r3, #0
 800581a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	429a      	cmp	r2, r3
 800582e:	d905      	bls.n	800583c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	3b01      	subs	r3, #1
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
 800583a:	e007      	b.n	800584c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	69b9      	ldr	r1, [r7, #24]
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	1acb      	subs	r3, r1, r3
 8005846:	4413      	add	r3, r2
 8005848:	3b01      	subs	r3, #1
 800584a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005856:	4293      	cmp	r3, r2
 8005858:	bf28      	it	cs
 800585a:	4613      	movcs	r3, r2
 800585c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800585e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4293      	cmp	r3, r2
 8005864:	bf28      	it	cs
 8005866:	4613      	movcs	r3, r2
 8005868:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	4413      	add	r3, r2
 8005872:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005876:	68b9      	ldr	r1, [r7, #8]
 8005878:	6978      	ldr	r0, [r7, #20]
 800587a:	f002 f921 	bl	8007ac0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800587e:	6a3a      	ldr	r2, [r7, #32]
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	4413      	add	r3, r2
 8005884:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	4413      	add	r3, r2
 800588c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005896:	69fa      	ldr	r2, [r7, #28]
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	4413      	add	r3, r2
 800589c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	69fa      	ldr	r2, [r7, #28]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d101      	bne.n	80058ac <_WriteBlocking+0xa0>
      WrOff = 0u;
 80058a8:	2300      	movs	r3, #0
 80058aa:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80058ac:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	69fa      	ldr	r2, [r7, #28]
 80058b4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1b2      	bne.n	8005822 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80058bc:	6a3b      	ldr	r3, [r7, #32]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3728      	adds	r7, #40	; 0x28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b088      	sub	sp, #32
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	60b9      	str	r1, [r7, #8]
 80058d0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d911      	bls.n	800590e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	4413      	add	r3, r2
 80058f2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	68b9      	ldr	r1, [r7, #8]
 80058f8:	6938      	ldr	r0, [r7, #16]
 80058fa:	f002 f8e1 	bl	8007ac0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80058fe:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005902:	69fa      	ldr	r2, [r7, #28]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	441a      	add	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800590c:	e01f      	b.n	800594e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	4413      	add	r3, r2
 800591a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	68b9      	ldr	r1, [r7, #8]
 8005920:	6938      	ldr	r0, [r7, #16]
 8005922:	f002 f8cd 	bl	8007ac0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	4413      	add	r3, r2
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	4619      	mov	r1, r3
 800593e:	6938      	ldr	r0, [r7, #16]
 8005940:	f002 f8be 	bl	8007ac0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005944:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	60da      	str	r2, [r3, #12]
}
 800594e:	bf00      	nop
 8005950:	3720      	adds	r7, #32
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005956:	b480      	push	{r7}
 8005958:	b087      	sub	sp, #28
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	429a      	cmp	r2, r3
 8005970:	d808      	bhi.n	8005984 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	1ad2      	subs	r2, r2, r3
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	4413      	add	r3, r2
 800597e:	3b01      	subs	r3, #1
 8005980:	617b      	str	r3, [r7, #20]
 8005982:	e004      	b.n	800598e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	3b01      	subs	r3, #1
 800598c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800598e:	697b      	ldr	r3, [r7, #20]
}
 8005990:	4618      	mov	r0, r3
 8005992:	371c      	adds	r7, #28
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800599c:	b580      	push	{r7, lr}
 800599e:	b08c      	sub	sp, #48	; 0x30
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80059a8:	4b3e      	ldr	r3, [pc, #248]	; (8005aa4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80059aa:	623b      	str	r3, [r7, #32]
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80059b6:	f7ff fed1 	bl	800575c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	4613      	mov	r3, r2
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	4413      	add	r3, r2
 80059c4:	00db      	lsls	r3, r3, #3
 80059c6:	4a37      	ldr	r2, [pc, #220]	; (8005aa4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80059c8:	4413      	add	r3, r2
 80059ca:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80059dc:	2300      	movs	r3, #0
 80059de:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80059e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d92b      	bls.n	8005a40 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	689a      	ldr	r2, [r3, #8]
 80059ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4293      	cmp	r3, r2
 80059f8:	bf28      	it	cs
 80059fa:	4613      	movcs	r3, r2
 80059fc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	4413      	add	r3, r2
 8005a06:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	6939      	ldr	r1, [r7, #16]
 8005a0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a0e:	f002 f857 	bl	8007ac0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	4413      	add	r3, r2
 8005a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	4413      	add	r3, r2
 8005a20:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005a2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	4413      	add	r3, r2
 8005a30:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d101      	bne.n	8005a40 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	bf28      	it	cs
 8005a50:	4613      	movcs	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d019      	beq.n	8005a8e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	4413      	add	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	6939      	ldr	r1, [r7, #16]
 8005a68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a6a:	f002 f829 	bl	8007ac0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	4413      	add	r3, r2
 8005a74:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a98:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3730      	adds	r7, #48	; 0x30
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	20012ef0 	.word	0x20012ef0

08005aa8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08c      	sub	sp, #48	; 0x30
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005ab4:	4b3e      	ldr	r3, [pc, #248]	; (8005bb0 <SEGGER_RTT_ReadNoLock+0x108>)
 8005ab6:	623b      	str	r3, [r7, #32]
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <SEGGER_RTT_ReadNoLock+0x1e>
 8005ac2:	f7ff fe4b 	bl	800575c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	4413      	add	r3, r2
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	3360      	adds	r3, #96	; 0x60
 8005ad2:	4a37      	ldr	r2, [pc, #220]	; (8005bb0 <SEGGER_RTT_ReadNoLock+0x108>)
 8005ad4:	4413      	add	r3, r2
 8005ad6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d92b      	bls.n	8005b4c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4293      	cmp	r3, r2
 8005b04:	bf28      	it	cs
 8005b06:	4613      	movcs	r3, r2
 8005b08:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b10:	4413      	add	r3, r2
 8005b12:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	6939      	ldr	r1, [r7, #16]
 8005b18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b1a:	f001 ffd1 	bl	8007ac0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	4413      	add	r3, r2
 8005b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d101      	bne.n	8005b4c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	bf28      	it	cs
 8005b5c:	4613      	movcs	r3, r2
 8005b5e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d019      	beq.n	8005b9a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	4413      	add	r3, r2
 8005b6e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	6939      	ldr	r1, [r7, #16]
 8005b74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b76:	f001 ffa3 	bl	8007ac0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	4413      	add	r3, r2
 8005b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	4413      	add	r3, r2
 8005b88:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005b92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	4413      	add	r3, r2
 8005b98:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ba4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3730      	adds	r7, #48	; 0x30
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	20012ef0 	.word	0x20012ef0

08005bb4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b088      	sub	sp, #32
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	4413      	add	r3, r2
 8005bcc:	00db      	lsls	r3, r3, #3
 8005bce:	3360      	adds	r3, #96	; 0x60
 8005bd0:	4a1f      	ldr	r2, [pc, #124]	; (8005c50 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005bd2:	4413      	add	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d029      	beq.n	8005c32 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d82e      	bhi.n	8005c40 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d013      	beq.n	8005c12 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005bea:	e029      	b.n	8005c40 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005bec:	6978      	ldr	r0, [r7, #20]
 8005bee:	f7ff feb2 	bl	8005956 <_GetAvailWriteSpace>
 8005bf2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d202      	bcs.n	8005c02 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005c00:	e021      	b.n	8005c46 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	69b9      	ldr	r1, [r7, #24]
 8005c0a:	6978      	ldr	r0, [r7, #20]
 8005c0c:	f7ff fe5b 	bl	80058c6 <_WriteNoCheck>
    break;
 8005c10:	e019      	b.n	8005c46 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005c12:	6978      	ldr	r0, [r7, #20]
 8005c14:	f7ff fe9f 	bl	8005956 <_GetAvailWriteSpace>
 8005c18:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	bf28      	it	cs
 8005c22:	4613      	movcs	r3, r2
 8005c24:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	69b9      	ldr	r1, [r7, #24]
 8005c2a:	6978      	ldr	r0, [r7, #20]
 8005c2c:	f7ff fe4b 	bl	80058c6 <_WriteNoCheck>
    break;
 8005c30:	e009      	b.n	8005c46 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	69b9      	ldr	r1, [r7, #24]
 8005c36:	6978      	ldr	r0, [r7, #20]
 8005c38:	f7ff fde8 	bl	800580c <_WriteBlocking>
 8005c3c:	61f8      	str	r0, [r7, #28]
    break;
 8005c3e:	e002      	b.n	8005c46 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61fb      	str	r3, [r7, #28]
    break;
 8005c44:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005c46:	69fb      	ldr	r3, [r7, #28]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3720      	adds	r7, #32
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	20012ef0 	.word	0x20012ef0

08005c54 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b088      	sub	sp, #32
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005c60:	4b0e      	ldr	r3, [pc, #56]	; (8005c9c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005c62:	61fb      	str	r3, [r7, #28]
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005c6e:	f7ff fd75 	bl	800575c <_DoInit>
  SEGGER_RTT_LOCK();
 8005c72:	f3ef 8311 	mrs	r3, BASEPRI
 8005c76:	f04f 0120 	mov.w	r1, #32
 8005c7a:	f381 8811 	msr	BASEPRI, r1
 8005c7e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	68b9      	ldr	r1, [r7, #8]
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f7ff ff95 	bl	8005bb4 <SEGGER_RTT_WriteDownBufferNoLock>
 8005c8a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005c92:	697b      	ldr	r3, [r7, #20]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3720      	adds	r7, #32
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	20012ef0 	.word	0x20012ef0

08005ca0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b088      	sub	sp, #32
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
 8005cac:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005cae:	4b3d      	ldr	r3, [pc, #244]	; (8005da4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005cb0:	61bb      	str	r3, [r7, #24]
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005cbc:	f7ff fd4e 	bl	800575c <_DoInit>
  SEGGER_RTT_LOCK();
 8005cc0:	f3ef 8311 	mrs	r3, BASEPRI
 8005cc4:	f04f 0120 	mov.w	r1, #32
 8005cc8:	f381 8811 	msr	BASEPRI, r1
 8005ccc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005cce:	4b35      	ldr	r3, [pc, #212]	; (8005da4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005cd0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005cd6:	6939      	ldr	r1, [r7, #16]
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	4613      	mov	r3, r2
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	4413      	add	r3, r2
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	440b      	add	r3, r1
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d008      	beq.n	8005d00 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	69fa      	ldr	r2, [r7, #28]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	dbeb      	blt.n	8005cd6 <SEGGER_RTT_AllocUpBuffer+0x36>
 8005cfe:	e000      	b.n	8005d02 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005d00:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	69fa      	ldr	r2, [r7, #28]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	da3f      	bge.n	8005d8c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005d0c:	6939      	ldr	r1, [r7, #16]
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	4613      	mov	r3, r2
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	4413      	add	r3, r2
 8005d18:	00db      	lsls	r3, r3, #3
 8005d1a:	440b      	add	r3, r1
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005d20:	6939      	ldr	r1, [r7, #16]
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	1c5a      	adds	r2, r3, #1
 8005d26:	4613      	mov	r3, r2
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	4413      	add	r3, r2
 8005d2c:	00db      	lsls	r3, r3, #3
 8005d2e:	440b      	add	r3, r1
 8005d30:	3304      	adds	r3, #4
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005d36:	6939      	ldr	r1, [r7, #16]
 8005d38:	69fa      	ldr	r2, [r7, #28]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	4413      	add	r3, r2
 8005d40:	00db      	lsls	r3, r3, #3
 8005d42:	440b      	add	r3, r1
 8005d44:	3320      	adds	r3, #32
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005d4a:	6939      	ldr	r1, [r7, #16]
 8005d4c:	69fa      	ldr	r2, [r7, #28]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	4413      	add	r3, r2
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	440b      	add	r3, r1
 8005d58:	3328      	adds	r3, #40	; 0x28
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005d5e:	6939      	ldr	r1, [r7, #16]
 8005d60:	69fa      	ldr	r2, [r7, #28]
 8005d62:	4613      	mov	r3, r2
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	4413      	add	r3, r2
 8005d68:	00db      	lsls	r3, r3, #3
 8005d6a:	440b      	add	r3, r1
 8005d6c:	3324      	adds	r3, #36	; 0x24
 8005d6e:	2200      	movs	r2, #0
 8005d70:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005d72:	6939      	ldr	r1, [r7, #16]
 8005d74:	69fa      	ldr	r2, [r7, #28]
 8005d76:	4613      	mov	r3, r2
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	4413      	add	r3, r2
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	440b      	add	r3, r1
 8005d80:	332c      	adds	r3, #44	; 0x2c
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005d86:	f3bf 8f5f 	dmb	sy
 8005d8a:	e002      	b.n	8005d92 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d90:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005d98:	69fb      	ldr	r3, [r7, #28]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3720      	adds	r7, #32
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	20012ef0 	.word	0x20012ef0

08005da8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b088      	sub	sp, #32
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
 8005db4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005db6:	4b33      	ldr	r3, [pc, #204]	; (8005e84 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005db8:	61bb      	str	r3, [r7, #24]
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005dc4:	f7ff fcca 	bl	800575c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005dc8:	4b2e      	ldr	r3, [pc, #184]	; (8005e84 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005dca:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d24d      	bcs.n	8005e74 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005dd8:	f3ef 8311 	mrs	r3, BASEPRI
 8005ddc:	f04f 0120 	mov.w	r1, #32
 8005de0:	f381 8811 	msr	BASEPRI, r1
 8005de4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d031      	beq.n	8005e50 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005dec:	6979      	ldr	r1, [r7, #20]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	4613      	mov	r3, r2
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	4413      	add	r3, r2
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	440b      	add	r3, r1
 8005dfa:	3360      	adds	r3, #96	; 0x60
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005e00:	6979      	ldr	r1, [r7, #20]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	4613      	mov	r3, r2
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	4413      	add	r3, r2
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	440b      	add	r3, r1
 8005e0e:	3364      	adds	r3, #100	; 0x64
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005e14:	6979      	ldr	r1, [r7, #20]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	4413      	add	r3, r2
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	440b      	add	r3, r1
 8005e22:	3368      	adds	r3, #104	; 0x68
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005e28:	6979      	ldr	r1, [r7, #20]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	4413      	add	r3, r2
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	440b      	add	r3, r1
 8005e36:	3370      	adds	r3, #112	; 0x70
 8005e38:	2200      	movs	r2, #0
 8005e3a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005e3c:	6979      	ldr	r1, [r7, #20]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	4613      	mov	r3, r2
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	4413      	add	r3, r2
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	440b      	add	r3, r1
 8005e4a:	336c      	adds	r3, #108	; 0x6c
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005e50:	6979      	ldr	r1, [r7, #20]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	4613      	mov	r3, r2
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	4413      	add	r3, r2
 8005e5a:	00db      	lsls	r3, r3, #3
 8005e5c:	440b      	add	r3, r1
 8005e5e:	3374      	adds	r3, #116	; 0x74
 8005e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e62:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005e64:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	61fb      	str	r3, [r7, #28]
 8005e72:	e002      	b.n	8005e7a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005e74:	f04f 33ff 	mov.w	r3, #4294967295
 8005e78:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005e7a:	69fb      	ldr	r3, [r7, #28]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3720      	adds	r7, #32
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	20012ef0 	.word	0x20012ef0

08005e88 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005e94:	2300      	movs	r3, #0
 8005e96:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005e98:	e002      	b.n	8005ea0 <_EncodeStr+0x18>
    Len++;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1f6      	bne.n	8005e9a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d901      	bls.n	8005eb8 <_EncodeStr+0x30>
    Len = Limit;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	2bfe      	cmp	r3, #254	; 0xfe
 8005ebc:	d806      	bhi.n	8005ecc <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	60fa      	str	r2, [r7, #12]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	b2d2      	uxtb	r2, r2
 8005ec8:	701a      	strb	r2, [r3, #0]
 8005eca:	e011      	b.n	8005ef0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	60fa      	str	r2, [r7, #12]
 8005ed2:	22ff      	movs	r2, #255	; 0xff
 8005ed4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	60fa      	str	r2, [r7, #12]
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	b2d2      	uxtb	r2, r2
 8005ee0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	0a19      	lsrs	r1, r3, #8
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	60fa      	str	r2, [r7, #12]
 8005eec:	b2ca      	uxtb	r2, r1
 8005eee:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005ef4:	e00a      	b.n	8005f0c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	1c53      	adds	r3, r2, #1
 8005efa:	60bb      	str	r3, [r7, #8]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	1c59      	adds	r1, r3, #1
 8005f00:	60f9      	str	r1, [r7, #12]
 8005f02:	7812      	ldrb	r2, [r2, #0]
 8005f04:	701a      	strb	r2, [r3, #0]
    n++;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d3f0      	bcc.n	8005ef6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005f14:	68fb      	ldr	r3, [r7, #12]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005f22:	b480      	push	{r7}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	3304      	adds	r3, #4
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
	...

08005f3c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005f42:	4b35      	ldr	r3, [pc, #212]	; (8006018 <_HandleIncomingPacket+0xdc>)
 8005f44:	7e1b      	ldrb	r3, [r3, #24]
 8005f46:	4618      	mov	r0, r3
 8005f48:	1cfb      	adds	r3, r7, #3
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	f7ff fdab 	bl	8005aa8 <SEGGER_RTT_ReadNoLock>
 8005f52:	4603      	mov	r3, r0
 8005f54:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	dd59      	ble.n	8006010 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005f5c:	78fb      	ldrb	r3, [r7, #3]
 8005f5e:	2b80      	cmp	r3, #128	; 0x80
 8005f60:	d032      	beq.n	8005fc8 <_HandleIncomingPacket+0x8c>
 8005f62:	2b80      	cmp	r3, #128	; 0x80
 8005f64:	dc42      	bgt.n	8005fec <_HandleIncomingPacket+0xb0>
 8005f66:	2b07      	cmp	r3, #7
 8005f68:	dc16      	bgt.n	8005f98 <_HandleIncomingPacket+0x5c>
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	dd3e      	ble.n	8005fec <_HandleIncomingPacket+0xb0>
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	2b06      	cmp	r3, #6
 8005f72:	d83b      	bhi.n	8005fec <_HandleIncomingPacket+0xb0>
 8005f74:	a201      	add	r2, pc, #4	; (adr r2, 8005f7c <_HandleIncomingPacket+0x40>)
 8005f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7a:	bf00      	nop
 8005f7c:	08005f9f 	.word	0x08005f9f
 8005f80:	08005fa5 	.word	0x08005fa5
 8005f84:	08005fab 	.word	0x08005fab
 8005f88:	08005fb1 	.word	0x08005fb1
 8005f8c:	08005fb7 	.word	0x08005fb7
 8005f90:	08005fbd 	.word	0x08005fbd
 8005f94:	08005fc3 	.word	0x08005fc3
 8005f98:	2b7f      	cmp	r3, #127	; 0x7f
 8005f9a:	d034      	beq.n	8006006 <_HandleIncomingPacket+0xca>
 8005f9c:	e026      	b.n	8005fec <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005f9e:	f000 ff43 	bl	8006e28 <SEGGER_SYSVIEW_Start>
      break;
 8005fa2:	e035      	b.n	8006010 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005fa4:	f000 fffc 	bl	8006fa0 <SEGGER_SYSVIEW_Stop>
      break;
 8005fa8:	e032      	b.n	8006010 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005faa:	f001 f9d5 	bl	8007358 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005fae:	e02f      	b.n	8006010 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005fb0:	f001 f99a 	bl	80072e8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005fb4:	e02c      	b.n	8006010 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005fb6:	f001 f819 	bl	8006fec <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005fba:	e029      	b.n	8006010 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005fbc:	f001 fc68 	bl	8007890 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005fc0:	e026      	b.n	8006010 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005fc2:	f001 fc47 	bl	8007854 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005fc6:	e023      	b.n	8006010 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005fc8:	4b13      	ldr	r3, [pc, #76]	; (8006018 <_HandleIncomingPacket+0xdc>)
 8005fca:	7e1b      	ldrb	r3, [r3, #24]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	1cfb      	adds	r3, r7, #3
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	f7ff fd68 	bl	8005aa8 <SEGGER_RTT_ReadNoLock>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	dd13      	ble.n	800600a <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005fe2:	78fb      	ldrb	r3, [r7, #3]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f001 fbb5 	bl	8007754 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005fea:	e00e      	b.n	800600a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005fec:	78fb      	ldrb	r3, [r7, #3]
 8005fee:	b25b      	sxtb	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	da0c      	bge.n	800600e <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005ff4:	4b08      	ldr	r3, [pc, #32]	; (8006018 <_HandleIncomingPacket+0xdc>)
 8005ff6:	7e1b      	ldrb	r3, [r3, #24]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	1cfb      	adds	r3, r7, #3
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	4619      	mov	r1, r3
 8006000:	f7ff fd52 	bl	8005aa8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006004:	e003      	b.n	800600e <_HandleIncomingPacket+0xd2>
      break;
 8006006:	bf00      	nop
 8006008:	e002      	b.n	8006010 <_HandleIncomingPacket+0xd4>
      break;
 800600a:	bf00      	nop
 800600c:	e000      	b.n	8006010 <_HandleIncomingPacket+0xd4>
      break;
 800600e:	bf00      	nop
    }
  }
}
 8006010:	bf00      	nop
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	200143b0 	.word	0x200143b0

0800601c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800601c:	b580      	push	{r7, lr}
 800601e:	b08c      	sub	sp, #48	; 0x30
 8006020:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006022:	2301      	movs	r3, #1
 8006024:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006026:	1d3b      	adds	r3, r7, #4
 8006028:	3301      	adds	r3, #1
 800602a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006030:	4b32      	ldr	r3, [pc, #200]	; (80060fc <_TrySendOverflowPacket+0xe0>)
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	62bb      	str	r3, [r7, #40]	; 0x28
 8006036:	e00b      	b.n	8006050 <_TrySendOverflowPacket+0x34>
 8006038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603a:	b2da      	uxtb	r2, r3
 800603c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603e:	1c59      	adds	r1, r3, #1
 8006040:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006042:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006046:	b2d2      	uxtb	r2, r2
 8006048:	701a      	strb	r2, [r3, #0]
 800604a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604c:	09db      	lsrs	r3, r3, #7
 800604e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006052:	2b7f      	cmp	r3, #127	; 0x7f
 8006054:	d8f0      	bhi.n	8006038 <_TrySendOverflowPacket+0x1c>
 8006056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800605c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800605e:	b2d2      	uxtb	r2, r2
 8006060:	701a      	strb	r2, [r3, #0]
 8006062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006064:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006066:	4b26      	ldr	r3, [pc, #152]	; (8006100 <_TrySendOverflowPacket+0xe4>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800606c:	4b23      	ldr	r3, [pc, #140]	; (80060fc <_TrySendOverflowPacket+0xe0>)
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	627b      	str	r3, [r7, #36]	; 0x24
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	623b      	str	r3, [r7, #32]
 800607e:	e00b      	b.n	8006098 <_TrySendOverflowPacket+0x7c>
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	b2da      	uxtb	r2, r3
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	1c59      	adds	r1, r3, #1
 8006088:	6279      	str	r1, [r7, #36]	; 0x24
 800608a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	701a      	strb	r2, [r3, #0]
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	09db      	lsrs	r3, r3, #7
 8006096:	623b      	str	r3, [r7, #32]
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	2b7f      	cmp	r3, #127	; 0x7f
 800609c:	d8f0      	bhi.n	8006080 <_TrySendOverflowPacket+0x64>
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	627a      	str	r2, [r7, #36]	; 0x24
 80060a4:	6a3a      	ldr	r2, [r7, #32]
 80060a6:	b2d2      	uxtb	r2, r2
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80060ae:	4b13      	ldr	r3, [pc, #76]	; (80060fc <_TrySendOverflowPacket+0xe0>)
 80060b0:	785b      	ldrb	r3, [r3, #1]
 80060b2:	4618      	mov	r0, r3
 80060b4:	1d3b      	adds	r3, r7, #4
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	461a      	mov	r2, r3
 80060bc:	1d3b      	adds	r3, r7, #4
 80060be:	4619      	mov	r1, r3
 80060c0:	f7fa f886 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80060c4:	4603      	mov	r3, r0
 80060c6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80060c8:	f7ff fabe 	bl	8005648 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d009      	beq.n	80060e6 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80060d2:	4a0a      	ldr	r2, [pc, #40]	; (80060fc <_TrySendOverflowPacket+0xe0>)
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80060d8:	4b08      	ldr	r3, [pc, #32]	; (80060fc <_TrySendOverflowPacket+0xe0>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	3b01      	subs	r3, #1
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	4b06      	ldr	r3, [pc, #24]	; (80060fc <_TrySendOverflowPacket+0xe0>)
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	e004      	b.n	80060f0 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80060e6:	4b05      	ldr	r3, [pc, #20]	; (80060fc <_TrySendOverflowPacket+0xe0>)
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	3301      	adds	r3, #1
 80060ec:	4a03      	ldr	r2, [pc, #12]	; (80060fc <_TrySendOverflowPacket+0xe0>)
 80060ee:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80060f0:	693b      	ldr	r3, [r7, #16]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3730      	adds	r7, #48	; 0x30
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	200143b0 	.word	0x200143b0
 8006100:	e0001004 	.word	0xe0001004

08006104 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006104:	b580      	push	{r7, lr}
 8006106:	b08a      	sub	sp, #40	; 0x28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006110:	4b6d      	ldr	r3, [pc, #436]	; (80062c8 <_SendPacket+0x1c4>)
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d010      	beq.n	800613a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006118:	4b6b      	ldr	r3, [pc, #428]	; (80062c8 <_SendPacket+0x1c4>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	f000 80a5 	beq.w	800626c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006122:	4b69      	ldr	r3, [pc, #420]	; (80062c8 <_SendPacket+0x1c4>)
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	2b02      	cmp	r3, #2
 8006128:	d109      	bne.n	800613e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800612a:	f7ff ff77 	bl	800601c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800612e:	4b66      	ldr	r3, [pc, #408]	; (80062c8 <_SendPacket+0x1c4>)
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b01      	cmp	r3, #1
 8006134:	f040 809c 	bne.w	8006270 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8006138:	e001      	b.n	800613e <_SendPacket+0x3a>
    goto Send;
 800613a:	bf00      	nop
 800613c:	e000      	b.n	8006140 <_SendPacket+0x3c>
Send:
 800613e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b1f      	cmp	r3, #31
 8006144:	d809      	bhi.n	800615a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8006146:	4b60      	ldr	r3, [pc, #384]	; (80062c8 <_SendPacket+0x1c4>)
 8006148:	69da      	ldr	r2, [r3, #28]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	fa22 f303 	lsr.w	r3, r2, r3
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	f040 808d 	bne.w	8006274 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b17      	cmp	r3, #23
 800615e:	d807      	bhi.n	8006170 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	3b01      	subs	r3, #1
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	b2da      	uxtb	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	701a      	strb	r2, [r3, #0]
 800616e:	e03d      	b.n	80061ec <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	2b7f      	cmp	r3, #127	; 0x7f
 800617c:	d912      	bls.n	80061a4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	09da      	lsrs	r2, r3, #7
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	3b01      	subs	r3, #1
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	b2db      	uxtb	r3, r3
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	3a01      	subs	r2, #1
 8006196:	60fa      	str	r2, [r7, #12]
 8006198:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800619c:	b2da      	uxtb	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	e006      	b.n	80061b2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	60fb      	str	r3, [r7, #12]
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b7f      	cmp	r3, #127	; 0x7f
 80061b6:	d912      	bls.n	80061de <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	09da      	lsrs	r2, r3, #7
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	3b01      	subs	r3, #1
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	b2d2      	uxtb	r2, r2
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	3a01      	subs	r2, #1
 80061d0:	60fa      	str	r2, [r7, #12]
 80061d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	701a      	strb	r2, [r3, #0]
 80061dc:	e006      	b.n	80061ec <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80061ec:	4b37      	ldr	r3, [pc, #220]	; (80062cc <_SendPacket+0x1c8>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80061f2:	4b35      	ldr	r3, [pc, #212]	; (80062c8 <_SendPacket+0x1c4>)
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	623b      	str	r3, [r7, #32]
 8006204:	e00b      	b.n	800621e <_SendPacket+0x11a>
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	b2da      	uxtb	r2, r3
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	1c59      	adds	r1, r3, #1
 800620e:	6279      	str	r1, [r7, #36]	; 0x24
 8006210:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006214:	b2d2      	uxtb	r2, r2
 8006216:	701a      	strb	r2, [r3, #0]
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	09db      	lsrs	r3, r3, #7
 800621c:	623b      	str	r3, [r7, #32]
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	2b7f      	cmp	r3, #127	; 0x7f
 8006222:	d8f0      	bhi.n	8006206 <_SendPacket+0x102>
 8006224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006226:	1c5a      	adds	r2, r3, #1
 8006228:	627a      	str	r2, [r7, #36]	; 0x24
 800622a:	6a3a      	ldr	r2, [r7, #32]
 800622c:	b2d2      	uxtb	r2, r2
 800622e:	701a      	strb	r2, [r3, #0]
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8006234:	4b24      	ldr	r3, [pc, #144]	; (80062c8 <_SendPacket+0x1c4>)
 8006236:	785b      	ldrb	r3, [r3, #1]
 8006238:	4618      	mov	r0, r3
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	461a      	mov	r2, r3
 8006242:	68f9      	ldr	r1, [r7, #12]
 8006244:	f7f9 ffc4 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006248:	4603      	mov	r3, r0
 800624a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800624c:	f7ff f9fc 	bl	8005648 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006256:	4a1c      	ldr	r2, [pc, #112]	; (80062c8 <_SendPacket+0x1c4>)
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	60d3      	str	r3, [r2, #12]
 800625c:	e00b      	b.n	8006276 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800625e:	4b1a      	ldr	r3, [pc, #104]	; (80062c8 <_SendPacket+0x1c4>)
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	3301      	adds	r3, #1
 8006264:	b2da      	uxtb	r2, r3
 8006266:	4b18      	ldr	r3, [pc, #96]	; (80062c8 <_SendPacket+0x1c4>)
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	e004      	b.n	8006276 <_SendPacket+0x172>
    goto SendDone;
 800626c:	bf00      	nop
 800626e:	e002      	b.n	8006276 <_SendPacket+0x172>
      goto SendDone;
 8006270:	bf00      	nop
 8006272:	e000      	b.n	8006276 <_SendPacket+0x172>
      goto SendDone;
 8006274:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006276:	4b14      	ldr	r3, [pc, #80]	; (80062c8 <_SendPacket+0x1c4>)
 8006278:	7e1b      	ldrb	r3, [r3, #24]
 800627a:	4619      	mov	r1, r3
 800627c:	4a14      	ldr	r2, [pc, #80]	; (80062d0 <_SendPacket+0x1cc>)
 800627e:	460b      	mov	r3, r1
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	440b      	add	r3, r1
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	4413      	add	r3, r2
 8006288:	336c      	adds	r3, #108	; 0x6c
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	4b0e      	ldr	r3, [pc, #56]	; (80062c8 <_SendPacket+0x1c4>)
 800628e:	7e1b      	ldrb	r3, [r3, #24]
 8006290:	4618      	mov	r0, r3
 8006292:	490f      	ldr	r1, [pc, #60]	; (80062d0 <_SendPacket+0x1cc>)
 8006294:	4603      	mov	r3, r0
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	4403      	add	r3, r0
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	440b      	add	r3, r1
 800629e:	3370      	adds	r3, #112	; 0x70
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d00b      	beq.n	80062be <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80062a6:	4b08      	ldr	r3, [pc, #32]	; (80062c8 <_SendPacket+0x1c4>)
 80062a8:	789b      	ldrb	r3, [r3, #2]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d107      	bne.n	80062be <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80062ae:	4b06      	ldr	r3, [pc, #24]	; (80062c8 <_SendPacket+0x1c4>)
 80062b0:	2201      	movs	r2, #1
 80062b2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80062b4:	f7ff fe42 	bl	8005f3c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80062b8:	4b03      	ldr	r3, [pc, #12]	; (80062c8 <_SendPacket+0x1c4>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80062be:	bf00      	nop
 80062c0:	3728      	adds	r7, #40	; 0x28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	200143b0 	.word	0x200143b0
 80062cc:	e0001004 	.word	0xe0001004
 80062d0:	20012ef0 	.word	0x20012ef0

080062d4 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b08a      	sub	sp, #40	; 0x28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	460b      	mov	r3, r1
 80062de:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	3301      	adds	r3, #1
 80062ea:	2b80      	cmp	r3, #128	; 0x80
 80062ec:	d80a      	bhi.n	8006304 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	1c59      	adds	r1, r3, #1
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	6051      	str	r1, [r2, #4]
 80062f8:	78fa      	ldrb	r2, [r7, #3]
 80062fa:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	1c5a      	adds	r2, r3, #1
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	2b80      	cmp	r3, #128	; 0x80
 800630a:	d15a      	bne.n	80063c2 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	691a      	ldr	r2, [r3, #16]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	b2d2      	uxtb	r2, r2
 8006316:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	627b      	str	r3, [r7, #36]	; 0x24
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	623b      	str	r3, [r7, #32]
 800632c:	e00b      	b.n	8006346 <_StoreChar+0x72>
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	b2da      	uxtb	r2, r3
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	1c59      	adds	r1, r3, #1
 8006336:	6279      	str	r1, [r7, #36]	; 0x24
 8006338:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	701a      	strb	r2, [r3, #0]
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	09db      	lsrs	r3, r3, #7
 8006344:	623b      	str	r3, [r7, #32]
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	2b7f      	cmp	r3, #127	; 0x7f
 800634a:	d8f0      	bhi.n	800632e <_StoreChar+0x5a>
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	1c5a      	adds	r2, r3, #1
 8006350:	627a      	str	r2, [r7, #36]	; 0x24
 8006352:	6a3a      	ldr	r2, [r7, #32]
 8006354:	b2d2      	uxtb	r2, r2
 8006356:	701a      	strb	r2, [r3, #0]
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	61fb      	str	r3, [r7, #28]
 8006360:	2300      	movs	r3, #0
 8006362:	61bb      	str	r3, [r7, #24]
 8006364:	e00b      	b.n	800637e <_StoreChar+0xaa>
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	b2da      	uxtb	r2, r3
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	1c59      	adds	r1, r3, #1
 800636e:	61f9      	str	r1, [r7, #28]
 8006370:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	09db      	lsrs	r3, r3, #7
 800637c:	61bb      	str	r3, [r7, #24]
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	2b7f      	cmp	r3, #127	; 0x7f
 8006382:	d8f0      	bhi.n	8006366 <_StoreChar+0x92>
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	61fa      	str	r2, [r7, #28]
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	701a      	strb	r2, [r3, #0]
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	221a      	movs	r2, #26
 800639a:	6939      	ldr	r1, [r7, #16]
 800639c:	4618      	mov	r0, r3
 800639e:	f7ff feb1 	bl	8006104 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7ff fdbb 	bl	8005f22 <_PreparePacket>
 80063ac:	4602      	mov	r2, r0
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	611a      	str	r2, [r3, #16]
  }
}
 80063c2:	bf00      	nop
 80063c4:	3728      	adds	r7, #40	; 0x28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
	...

080063cc <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08a      	sub	sp, #40	; 0x28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80063de:	2301      	movs	r3, #1
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80063e2:	2301      	movs	r3, #1
 80063e4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80063e6:	e007      	b.n	80063f8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80063e8:	6a3a      	ldr	r2, [r7, #32]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f0:	623b      	str	r3, [r7, #32]
    Width++;
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	3301      	adds	r3, #1
 80063f6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80063f8:	6a3a      	ldr	r2, [r7, #32]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d2f3      	bcs.n	80063e8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	429a      	cmp	r2, r3
 8006406:	d901      	bls.n	800640c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800640c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	d11f      	bne.n	8006456 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01c      	beq.n	8006456 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800641c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d005      	beq.n	8006432 <_PrintUnsigned+0x66>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d102      	bne.n	8006432 <_PrintUnsigned+0x66>
        c = '0';
 800642c:	2330      	movs	r3, #48	; 0x30
 800642e:	76fb      	strb	r3, [r7, #27]
 8006430:	e001      	b.n	8006436 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8006432:	2320      	movs	r3, #32
 8006434:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006436:	e007      	b.n	8006448 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8006438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643a:	3b01      	subs	r3, #1
 800643c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800643e:	7efb      	ldrb	r3, [r7, #27]
 8006440:	4619      	mov	r1, r3
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f7ff ff46 	bl	80062d4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <_PrintUnsigned+0x8a>
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	429a      	cmp	r2, r3
 8006454:	d3f0      	bcc.n	8006438 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d903      	bls.n	8006464 <_PrintUnsigned+0x98>
      NumDigits--;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	3b01      	subs	r3, #1
 8006460:	603b      	str	r3, [r7, #0]
 8006462:	e009      	b.n	8006478 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	fbb2 f3f3 	udiv	r3, r2, r3
 800646c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	429a      	cmp	r2, r3
 8006474:	d200      	bcs.n	8006478 <_PrintUnsigned+0xac>
        break;
 8006476:	e005      	b.n	8006484 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	fb02 f303 	mul.w	r3, r2, r3
 8006480:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006482:	e7e8      	b.n	8006456 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	fbb2 f3f3 	udiv	r3, r2, r3
 800648c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006492:	fb02 f303 	mul.w	r3, r2, r3
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800649c:	4a15      	ldr	r2, [pc, #84]	; (80064f4 <_PrintUnsigned+0x128>)
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	4413      	add	r3, r2
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	4619      	mov	r1, r3
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f7ff ff14 	bl	80062d4 <_StoreChar>
    Digit /= Base;
 80064ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b4:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1e3      	bne.n	8006484 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80064bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d011      	beq.n	80064ea <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80064c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00e      	beq.n	80064ea <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80064cc:	e006      	b.n	80064dc <_PrintUnsigned+0x110>
        FieldWidth--;
 80064ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d0:	3b01      	subs	r3, #1
 80064d2:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80064d4:	2120      	movs	r1, #32
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f7ff fefc 	bl	80062d4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <_PrintUnsigned+0x11e>
 80064e2:	69fa      	ldr	r2, [r7, #28]
 80064e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d3f1      	bcc.n	80064ce <_PrintUnsigned+0x102>
      }
    }
  }
}
 80064ea:	bf00      	nop
 80064ec:	3728      	adds	r7, #40	; 0x28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	08007c9c 	.word	0x08007c9c

080064f8 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b088      	sub	sp, #32
 80064fc:	af02      	add	r7, sp, #8
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2b00      	cmp	r3, #0
 800650a:	bfb8      	it	lt
 800650c:	425b      	neglt	r3, r3
 800650e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006510:	2301      	movs	r3, #1
 8006512:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006514:	e007      	b.n	8006526 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	fb92 f3f3 	sdiv	r3, r2, r3
 800651e:	613b      	str	r3, [r7, #16]
    Width++;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	3301      	adds	r3, #1
 8006524:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	429a      	cmp	r2, r3
 800652c:	daf3      	bge.n	8006516 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	429a      	cmp	r2, r3
 8006534:	d901      	bls.n	800653a <_PrintInt+0x42>
    Width = NumDigits;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00a      	beq.n	8006556 <_PrintInt+0x5e>
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2b00      	cmp	r3, #0
 8006544:	db04      	blt.n	8006550 <_PrintInt+0x58>
 8006546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006548:	f003 0304 	and.w	r3, r3, #4
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <_PrintInt+0x5e>
    FieldWidth--;
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	3b01      	subs	r3, #1
 8006554:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8006556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <_PrintInt+0x6e>
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d016      	beq.n	8006594 <_PrintInt+0x9c>
 8006566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d111      	bne.n	8006594 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00e      	beq.n	8006594 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006576:	e006      	b.n	8006586 <_PrintInt+0x8e>
        FieldWidth--;
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	3b01      	subs	r3, #1
 800657c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800657e:	2120      	movs	r1, #32
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f7ff fea7 	bl	80062d4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006586:	6a3b      	ldr	r3, [r7, #32]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d003      	beq.n	8006594 <_PrintInt+0x9c>
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	6a3b      	ldr	r3, [r7, #32]
 8006590:	429a      	cmp	r2, r3
 8006592:	d3f1      	bcc.n	8006578 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	da07      	bge.n	80065aa <_PrintInt+0xb2>
    v = -v;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	425b      	negs	r3, r3
 800659e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80065a0:	212d      	movs	r1, #45	; 0x2d
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f7ff fe96 	bl	80062d4 <_StoreChar>
 80065a8:	e008      	b.n	80065bc <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d003      	beq.n	80065bc <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80065b4:	212b      	movs	r1, #43	; 0x2b
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f7ff fe8c 	bl	80062d4 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d019      	beq.n	80065fa <_PrintInt+0x102>
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d114      	bne.n	80065fa <_PrintInt+0x102>
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d111      	bne.n	80065fa <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00e      	beq.n	80065fa <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80065dc:	e006      	b.n	80065ec <_PrintInt+0xf4>
        FieldWidth--;
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80065e4:	2130      	movs	r1, #48	; 0x30
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f7ff fe74 	bl	80062d4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <_PrintInt+0x102>
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d3f1      	bcc.n	80065de <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80065fa:	68b9      	ldr	r1, [r7, #8]
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	9301      	str	r3, [sp, #4]
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f7ff fedf 	bl	80063cc <_PrintUnsigned>
}
 800660e:	bf00      	nop
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
	...

08006618 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006618:	b580      	push	{r7, lr}
 800661a:	b098      	sub	sp, #96	; 0x60
 800661c:	af02      	add	r7, sp, #8
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006624:	f3ef 8311 	mrs	r3, BASEPRI
 8006628:	f04f 0120 	mov.w	r1, #32
 800662c:	f381 8811 	msr	BASEPRI, r1
 8006630:	633b      	str	r3, [r7, #48]	; 0x30
 8006632:	48b7      	ldr	r0, [pc, #732]	; (8006910 <_VPrintTarget+0x2f8>)
 8006634:	f7ff fc75 	bl	8005f22 <_PreparePacket>
 8006638:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800663a:	4bb5      	ldr	r3, [pc, #724]	; (8006910 <_VPrintTarget+0x2f8>)
 800663c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800663e:	2300      	movs	r3, #0
 8006640:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006644:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	3301      	adds	r3, #1
 800664a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	3301      	adds	r3, #1
 800665c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800665e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006662:	2b00      	cmp	r3, #0
 8006664:	f000 8183 	beq.w	800696e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8006668:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800666c:	2b25      	cmp	r3, #37	; 0x25
 800666e:	f040 8170 	bne.w	8006952 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006672:	2300      	movs	r3, #0
 8006674:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8006676:	2301      	movs	r3, #1
 8006678:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8006682:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006686:	3b23      	subs	r3, #35	; 0x23
 8006688:	2b0d      	cmp	r3, #13
 800668a:	d83f      	bhi.n	800670c <_VPrintTarget+0xf4>
 800668c:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <_VPrintTarget+0x7c>)
 800668e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006692:	bf00      	nop
 8006694:	080066fd 	.word	0x080066fd
 8006698:	0800670d 	.word	0x0800670d
 800669c:	0800670d 	.word	0x0800670d
 80066a0:	0800670d 	.word	0x0800670d
 80066a4:	0800670d 	.word	0x0800670d
 80066a8:	0800670d 	.word	0x0800670d
 80066ac:	0800670d 	.word	0x0800670d
 80066b0:	0800670d 	.word	0x0800670d
 80066b4:	080066ed 	.word	0x080066ed
 80066b8:	0800670d 	.word	0x0800670d
 80066bc:	080066cd 	.word	0x080066cd
 80066c0:	0800670d 	.word	0x0800670d
 80066c4:	0800670d 	.word	0x0800670d
 80066c8:	080066dd 	.word	0x080066dd
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80066cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ce:	f043 0301 	orr.w	r3, r3, #1
 80066d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	3301      	adds	r3, #1
 80066d8:	60fb      	str	r3, [r7, #12]
 80066da:	e01a      	b.n	8006712 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80066dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066de:	f043 0302 	orr.w	r3, r3, #2
 80066e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	3301      	adds	r3, #1
 80066e8:	60fb      	str	r3, [r7, #12]
 80066ea:	e012      	b.n	8006712 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80066ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ee:	f043 0304 	orr.w	r3, r3, #4
 80066f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	3301      	adds	r3, #1
 80066f8:	60fb      	str	r3, [r7, #12]
 80066fa:	e00a      	b.n	8006712 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80066fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066fe:	f043 0308 	orr.w	r3, r3, #8
 8006702:	64bb      	str	r3, [r7, #72]	; 0x48
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	3301      	adds	r3, #1
 8006708:	60fb      	str	r3, [r7, #12]
 800670a:	e002      	b.n	8006712 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800670c:	2300      	movs	r3, #0
 800670e:	653b      	str	r3, [r7, #80]	; 0x50
 8006710:	bf00      	nop
        }
      } while (v);
 8006712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1b0      	bne.n	800667a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006718:	2300      	movs	r3, #0
 800671a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8006724:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006728:	2b2f      	cmp	r3, #47	; 0x2f
 800672a:	d912      	bls.n	8006752 <_VPrintTarget+0x13a>
 800672c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006730:	2b39      	cmp	r3, #57	; 0x39
 8006732:	d80e      	bhi.n	8006752 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	3301      	adds	r3, #1
 8006738:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800673a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800673c:	4613      	mov	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	461a      	mov	r2, r3
 8006746:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800674a:	4413      	add	r3, r2
 800674c:	3b30      	subs	r3, #48	; 0x30
 800674e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8006750:	e7e4      	b.n	800671c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006752:	2300      	movs	r3, #0
 8006754:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800675e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006762:	2b2e      	cmp	r3, #46	; 0x2e
 8006764:	d11d      	bne.n	80067a2 <_VPrintTarget+0x18a>
        sFormat++;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	3301      	adds	r3, #1
 800676a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006774:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006778:	2b2f      	cmp	r3, #47	; 0x2f
 800677a:	d912      	bls.n	80067a2 <_VPrintTarget+0x18a>
 800677c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006780:	2b39      	cmp	r3, #57	; 0x39
 8006782:	d80e      	bhi.n	80067a2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3301      	adds	r3, #1
 8006788:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800678a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800678c:	4613      	mov	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	461a      	mov	r2, r3
 8006796:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800679a:	4413      	add	r3, r2
 800679c:	3b30      	subs	r3, #48	; 0x30
 800679e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80067a0:	e7e4      	b.n	800676c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80067aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067ae:	2b6c      	cmp	r3, #108	; 0x6c
 80067b0:	d003      	beq.n	80067ba <_VPrintTarget+0x1a2>
 80067b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067b6:	2b68      	cmp	r3, #104	; 0x68
 80067b8:	d107      	bne.n	80067ca <_VPrintTarget+0x1b2>
          c = *sFormat;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	3301      	adds	r3, #1
 80067c6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80067c8:	e7ef      	b.n	80067aa <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80067ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067ce:	2b25      	cmp	r3, #37	; 0x25
 80067d0:	f000 80b3 	beq.w	800693a <_VPrintTarget+0x322>
 80067d4:	2b25      	cmp	r3, #37	; 0x25
 80067d6:	f2c0 80b7 	blt.w	8006948 <_VPrintTarget+0x330>
 80067da:	2b78      	cmp	r3, #120	; 0x78
 80067dc:	f300 80b4 	bgt.w	8006948 <_VPrintTarget+0x330>
 80067e0:	2b58      	cmp	r3, #88	; 0x58
 80067e2:	f2c0 80b1 	blt.w	8006948 <_VPrintTarget+0x330>
 80067e6:	3b58      	subs	r3, #88	; 0x58
 80067e8:	2b20      	cmp	r3, #32
 80067ea:	f200 80ad 	bhi.w	8006948 <_VPrintTarget+0x330>
 80067ee:	a201      	add	r2, pc, #4	; (adr r2, 80067f4 <_VPrintTarget+0x1dc>)
 80067f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f4:	080068eb 	.word	0x080068eb
 80067f8:	08006949 	.word	0x08006949
 80067fc:	08006949 	.word	0x08006949
 8006800:	08006949 	.word	0x08006949
 8006804:	08006949 	.word	0x08006949
 8006808:	08006949 	.word	0x08006949
 800680c:	08006949 	.word	0x08006949
 8006810:	08006949 	.word	0x08006949
 8006814:	08006949 	.word	0x08006949
 8006818:	08006949 	.word	0x08006949
 800681c:	08006949 	.word	0x08006949
 8006820:	08006879 	.word	0x08006879
 8006824:	0800689f 	.word	0x0800689f
 8006828:	08006949 	.word	0x08006949
 800682c:	08006949 	.word	0x08006949
 8006830:	08006949 	.word	0x08006949
 8006834:	08006949 	.word	0x08006949
 8006838:	08006949 	.word	0x08006949
 800683c:	08006949 	.word	0x08006949
 8006840:	08006949 	.word	0x08006949
 8006844:	08006949 	.word	0x08006949
 8006848:	08006949 	.word	0x08006949
 800684c:	08006949 	.word	0x08006949
 8006850:	08006949 	.word	0x08006949
 8006854:	08006915 	.word	0x08006915
 8006858:	08006949 	.word	0x08006949
 800685c:	08006949 	.word	0x08006949
 8006860:	08006949 	.word	0x08006949
 8006864:	08006949 	.word	0x08006949
 8006868:	080068c5 	.word	0x080068c5
 800686c:	08006949 	.word	0x08006949
 8006870:	08006949 	.word	0x08006949
 8006874:	080068eb 	.word	0x080068eb
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	1d19      	adds	r1, r3, #4
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	6011      	str	r1, [r2, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8006886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006888:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 800688c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006890:	f107 0314 	add.w	r3, r7, #20
 8006894:	4611      	mov	r1, r2
 8006896:	4618      	mov	r0, r3
 8006898:	f7ff fd1c 	bl	80062d4 <_StoreChar>
        break;
 800689c:	e055      	b.n	800694a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	1d19      	adds	r1, r3, #4
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	6011      	str	r1, [r2, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80068ac:	f107 0014 	add.w	r0, r7, #20
 80068b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068b2:	9301      	str	r3, [sp, #4]
 80068b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ba:	220a      	movs	r2, #10
 80068bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80068be:	f7ff fe1b 	bl	80064f8 <_PrintInt>
        break;
 80068c2:	e042      	b.n	800694a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	1d19      	adds	r1, r3, #4
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	6011      	str	r1, [r2, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80068d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80068d4:	f107 0014 	add.w	r0, r7, #20
 80068d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068da:	9301      	str	r3, [sp, #4]
 80068dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e2:	220a      	movs	r2, #10
 80068e4:	f7ff fd72 	bl	80063cc <_PrintUnsigned>
        break;
 80068e8:	e02f      	b.n	800694a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	1d19      	adds	r1, r3, #4
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	6011      	str	r1, [r2, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80068f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80068fa:	f107 0014 	add.w	r0, r7, #20
 80068fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006900:	9301      	str	r3, [sp, #4]
 8006902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006908:	2210      	movs	r2, #16
 800690a:	f7ff fd5f 	bl	80063cc <_PrintUnsigned>
        break;
 800690e:	e01c      	b.n	800694a <_VPrintTarget+0x332>
 8006910:	200143e0 	.word	0x200143e0
      case 'p':
        v = va_arg(*pParamList, int);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	1d19      	adds	r1, r3, #4
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	6011      	str	r1, [r2, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006922:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006924:	f107 0014 	add.w	r0, r7, #20
 8006928:	2300      	movs	r3, #0
 800692a:	9301      	str	r3, [sp, #4]
 800692c:	2308      	movs	r3, #8
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	2308      	movs	r3, #8
 8006932:	2210      	movs	r2, #16
 8006934:	f7ff fd4a 	bl	80063cc <_PrintUnsigned>
        break;
 8006938:	e007      	b.n	800694a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800693a:	f107 0314 	add.w	r3, r7, #20
 800693e:	2125      	movs	r1, #37	; 0x25
 8006940:	4618      	mov	r0, r3
 8006942:	f7ff fcc7 	bl	80062d4 <_StoreChar>
        break;
 8006946:	e000      	b.n	800694a <_VPrintTarget+0x332>
      default:
        break;
 8006948:	bf00      	nop
      }
      sFormat++;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3301      	adds	r3, #1
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	e007      	b.n	8006962 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8006952:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006956:	f107 0314 	add.w	r3, r7, #20
 800695a:	4611      	mov	r1, r2
 800695c:	4618      	mov	r0, r3
 800695e:	f7ff fcb9 	bl	80062d4 <_StoreChar>
    }
  } while (*sFormat);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	f47f ae72 	bne.w	8006650 <_VPrintTarget+0x38>
 800696c:	e000      	b.n	8006970 <_VPrintTarget+0x358>
      break;
 800696e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	2b00      	cmp	r3, #0
 8006974:	d041      	beq.n	80069fa <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8006976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	b2d2      	uxtb	r2, r2
 800697c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	643b      	str	r3, [r7, #64]	; 0x40
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006986:	e00b      	b.n	80069a0 <_VPrintTarget+0x388>
 8006988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800698a:	b2da      	uxtb	r2, r3
 800698c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800698e:	1c59      	adds	r1, r3, #1
 8006990:	6439      	str	r1, [r7, #64]	; 0x40
 8006992:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006996:	b2d2      	uxtb	r2, r2
 8006998:	701a      	strb	r2, [r3, #0]
 800699a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699c:	09db      	lsrs	r3, r3, #7
 800699e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a2:	2b7f      	cmp	r3, #127	; 0x7f
 80069a4:	d8f0      	bhi.n	8006988 <_VPrintTarget+0x370>
 80069a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069a8:	1c5a      	adds	r2, r3, #1
 80069aa:	643a      	str	r2, [r7, #64]	; 0x40
 80069ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069ae:	b2d2      	uxtb	r2, r2
 80069b0:	701a      	strb	r2, [r3, #0]
 80069b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069b4:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80069ba:	2300      	movs	r3, #0
 80069bc:	637b      	str	r3, [r7, #52]	; 0x34
 80069be:	e00b      	b.n	80069d8 <_VPrintTarget+0x3c0>
 80069c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c2:	b2da      	uxtb	r2, r3
 80069c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c6:	1c59      	adds	r1, r3, #1
 80069c8:	63b9      	str	r1, [r7, #56]	; 0x38
 80069ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069ce:	b2d2      	uxtb	r2, r2
 80069d0:	701a      	strb	r2, [r3, #0]
 80069d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d4:	09db      	lsrs	r3, r3, #7
 80069d6:	637b      	str	r3, [r7, #52]	; 0x34
 80069d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069da:	2b7f      	cmp	r3, #127	; 0x7f
 80069dc:	d8f0      	bhi.n	80069c0 <_VPrintTarget+0x3a8>
 80069de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e0:	1c5a      	adds	r2, r3, #1
 80069e2:	63ba      	str	r2, [r7, #56]	; 0x38
 80069e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069e6:	b2d2      	uxtb	r2, r2
 80069e8:	701a      	strb	r2, [r3, #0]
 80069ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ec:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	69b9      	ldr	r1, [r7, #24]
 80069f2:	221a      	movs	r2, #26
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7ff fb85 	bl	8006104 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80069fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fc:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006a00:	bf00      	nop
 8006a02:	3758      	adds	r7, #88	; 0x58
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af02      	add	r7, sp, #8
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
 8006a14:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006a16:	2300      	movs	r3, #0
 8006a18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a1c:	4917      	ldr	r1, [pc, #92]	; (8006a7c <SEGGER_SYSVIEW_Init+0x74>)
 8006a1e:	4818      	ldr	r0, [pc, #96]	; (8006a80 <SEGGER_SYSVIEW_Init+0x78>)
 8006a20:	f7ff f93e 	bl	8005ca0 <SEGGER_RTT_AllocUpBuffer>
 8006a24:	4603      	mov	r3, r0
 8006a26:	b2da      	uxtb	r2, r3
 8006a28:	4b16      	ldr	r3, [pc, #88]	; (8006a84 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a2a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006a2c:	4b15      	ldr	r3, [pc, #84]	; (8006a84 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a2e:	785a      	ldrb	r2, [r3, #1]
 8006a30:	4b14      	ldr	r3, [pc, #80]	; (8006a84 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a32:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006a34:	4b13      	ldr	r3, [pc, #76]	; (8006a84 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a36:	7e1b      	ldrb	r3, [r3, #24]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	2308      	movs	r3, #8
 8006a40:	4a11      	ldr	r2, [pc, #68]	; (8006a88 <SEGGER_SYSVIEW_Init+0x80>)
 8006a42:	490f      	ldr	r1, [pc, #60]	; (8006a80 <SEGGER_SYSVIEW_Init+0x78>)
 8006a44:	f7ff f9b0 	bl	8005da8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006a48:	4b0e      	ldr	r3, [pc, #56]	; (8006a84 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006a4e:	4b0f      	ldr	r3, [pc, #60]	; (8006a8c <SEGGER_SYSVIEW_Init+0x84>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a0c      	ldr	r2, [pc, #48]	; (8006a84 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a54:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006a56:	4a0b      	ldr	r2, [pc, #44]	; (8006a84 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006a5c:	4a09      	ldr	r2, [pc, #36]	; (8006a84 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006a62:	4a08      	ldr	r2, [pc, #32]	; (8006a84 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006a68:	4a06      	ldr	r2, [pc, #24]	; (8006a84 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006a6e:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006a74:	bf00      	nop
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	200133a8 	.word	0x200133a8
 8006a80:	08007c64 	.word	0x08007c64
 8006a84:	200143b0 	.word	0x200143b0
 8006a88:	200143a8 	.word	0x200143a8
 8006a8c:	e0001004 	.word	0xe0001004

08006a90 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006a98:	4a04      	ldr	r2, [pc, #16]	; (8006aac <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6113      	str	r3, [r2, #16]
}
 8006a9e:	bf00      	nop
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	200143b0 	.word	0x200143b0

08006ab0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006ab8:	f3ef 8311 	mrs	r3, BASEPRI
 8006abc:	f04f 0120 	mov.w	r1, #32
 8006ac0:	f381 8811 	msr	BASEPRI, r1
 8006ac4:	60fb      	str	r3, [r7, #12]
 8006ac6:	4808      	ldr	r0, [pc, #32]	; (8006ae8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006ac8:	f7ff fa2b 	bl	8005f22 <_PreparePacket>
 8006acc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	68b9      	ldr	r1, [r7, #8]
 8006ad2:	68b8      	ldr	r0, [r7, #8]
 8006ad4:	f7ff fb16 	bl	8006104 <_SendPacket>
  RECORD_END();
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f383 8811 	msr	BASEPRI, r3
}
 8006ade:	bf00      	nop
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	200143e0 	.word	0x200143e0

08006aec <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b088      	sub	sp, #32
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006af6:	f3ef 8311 	mrs	r3, BASEPRI
 8006afa:	f04f 0120 	mov.w	r1, #32
 8006afe:	f381 8811 	msr	BASEPRI, r1
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	4816      	ldr	r0, [pc, #88]	; (8006b60 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006b06:	f7ff fa0c 	bl	8005f22 <_PreparePacket>
 8006b0a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	61fb      	str	r3, [r7, #28]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	61bb      	str	r3, [r7, #24]
 8006b18:	e00b      	b.n	8006b32 <SEGGER_SYSVIEW_RecordU32+0x46>
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	b2da      	uxtb	r2, r3
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	1c59      	adds	r1, r3, #1
 8006b22:	61f9      	str	r1, [r7, #28]
 8006b24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b28:	b2d2      	uxtb	r2, r2
 8006b2a:	701a      	strb	r2, [r3, #0]
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	09db      	lsrs	r3, r3, #7
 8006b30:	61bb      	str	r3, [r7, #24]
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	2b7f      	cmp	r3, #127	; 0x7f
 8006b36:	d8f0      	bhi.n	8006b1a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	1c5a      	adds	r2, r3, #1
 8006b3c:	61fa      	str	r2, [r7, #28]
 8006b3e:	69ba      	ldr	r2, [r7, #24]
 8006b40:	b2d2      	uxtb	r2, r2
 8006b42:	701a      	strb	r2, [r3, #0]
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	68f9      	ldr	r1, [r7, #12]
 8006b4c:	6938      	ldr	r0, [r7, #16]
 8006b4e:	f7ff fad9 	bl	8006104 <_SendPacket>
  RECORD_END();
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f383 8811 	msr	BASEPRI, r3
}
 8006b58:	bf00      	nop
 8006b5a:	3720      	adds	r7, #32
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	200143e0 	.word	0x200143e0

08006b64 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08c      	sub	sp, #48	; 0x30
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b70:	f3ef 8311 	mrs	r3, BASEPRI
 8006b74:	f04f 0120 	mov.w	r1, #32
 8006b78:	f381 8811 	msr	BASEPRI, r1
 8006b7c:	61fb      	str	r3, [r7, #28]
 8006b7e:	4825      	ldr	r0, [pc, #148]	; (8006c14 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006b80:	f7ff f9cf 	bl	8005f22 <_PreparePacket>
 8006b84:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b92:	e00b      	b.n	8006bac <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9a:	1c59      	adds	r1, r3, #1
 8006b9c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006b9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ba2:	b2d2      	uxtb	r2, r2
 8006ba4:	701a      	strb	r2, [r3, #0]
 8006ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba8:	09db      	lsrs	r3, r3, #7
 8006baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	2b7f      	cmp	r3, #127	; 0x7f
 8006bb0:	d8f0      	bhi.n	8006b94 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb4:	1c5a      	adds	r2, r3, #1
 8006bb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bba:	b2d2      	uxtb	r2, r2
 8006bbc:	701a      	strb	r2, [r3, #0]
 8006bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	623b      	str	r3, [r7, #32]
 8006bca:	e00b      	b.n	8006be4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	1c59      	adds	r1, r3, #1
 8006bd4:	6279      	str	r1, [r7, #36]	; 0x24
 8006bd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bda:	b2d2      	uxtb	r2, r2
 8006bdc:	701a      	strb	r2, [r3, #0]
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	09db      	lsrs	r3, r3, #7
 8006be2:	623b      	str	r3, [r7, #32]
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	2b7f      	cmp	r3, #127	; 0x7f
 8006be8:	d8f0      	bhi.n	8006bcc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	627a      	str	r2, [r7, #36]	; 0x24
 8006bf0:	6a3a      	ldr	r2, [r7, #32]
 8006bf2:	b2d2      	uxtb	r2, r2
 8006bf4:	701a      	strb	r2, [r3, #0]
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	6979      	ldr	r1, [r7, #20]
 8006bfe:	69b8      	ldr	r0, [r7, #24]
 8006c00:	f7ff fa80 	bl	8006104 <_SendPacket>
  RECORD_END();
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	f383 8811 	msr	BASEPRI, r3
}
 8006c0a:	bf00      	nop
 8006c0c:	3730      	adds	r7, #48	; 0x30
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	200143e0 	.word	0x200143e0

08006c18 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b08e      	sub	sp, #56	; 0x38
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c26:	f3ef 8311 	mrs	r3, BASEPRI
 8006c2a:	f04f 0120 	mov.w	r1, #32
 8006c2e:	f381 8811 	msr	BASEPRI, r1
 8006c32:	61fb      	str	r3, [r7, #28]
 8006c34:	4832      	ldr	r0, [pc, #200]	; (8006d00 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006c36:	f7ff f974 	bl	8005f22 <_PreparePacket>
 8006c3a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	637b      	str	r3, [r7, #52]	; 0x34
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	633b      	str	r3, [r7, #48]	; 0x30
 8006c48:	e00b      	b.n	8006c62 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c50:	1c59      	adds	r1, r3, #1
 8006c52:	6379      	str	r1, [r7, #52]	; 0x34
 8006c54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c58:	b2d2      	uxtb	r2, r2
 8006c5a:	701a      	strb	r2, [r3, #0]
 8006c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5e:	09db      	lsrs	r3, r3, #7
 8006c60:	633b      	str	r3, [r7, #48]	; 0x30
 8006c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c64:	2b7f      	cmp	r3, #127	; 0x7f
 8006c66:	d8f0      	bhi.n	8006c4a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	637a      	str	r2, [r7, #52]	; 0x34
 8006c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c70:	b2d2      	uxtb	r2, r2
 8006c72:	701a      	strb	r2, [r3, #0]
 8006c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c76:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c80:	e00b      	b.n	8006c9a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c88:	1c59      	adds	r1, r3, #1
 8006c8a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006c8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c90:	b2d2      	uxtb	r2, r2
 8006c92:	701a      	strb	r2, [r3, #0]
 8006c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c96:	09db      	lsrs	r3, r3, #7
 8006c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9c:	2b7f      	cmp	r3, #127	; 0x7f
 8006c9e:	d8f0      	bhi.n	8006c82 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ca8:	b2d2      	uxtb	r2, r2
 8006caa:	701a      	strb	r2, [r3, #0]
 8006cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	623b      	str	r3, [r7, #32]
 8006cb8:	e00b      	b.n	8006cd2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	1c59      	adds	r1, r3, #1
 8006cc2:	6279      	str	r1, [r7, #36]	; 0x24
 8006cc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cc8:	b2d2      	uxtb	r2, r2
 8006cca:	701a      	strb	r2, [r3, #0]
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	09db      	lsrs	r3, r3, #7
 8006cd0:	623b      	str	r3, [r7, #32]
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8006cd6:	d8f0      	bhi.n	8006cba <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	1c5a      	adds	r2, r3, #1
 8006cdc:	627a      	str	r2, [r7, #36]	; 0x24
 8006cde:	6a3a      	ldr	r2, [r7, #32]
 8006ce0:	b2d2      	uxtb	r2, r2
 8006ce2:	701a      	strb	r2, [r3, #0]
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	6979      	ldr	r1, [r7, #20]
 8006cec:	69b8      	ldr	r0, [r7, #24]
 8006cee:	f7ff fa09 	bl	8006104 <_SendPacket>
  RECORD_END();
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	f383 8811 	msr	BASEPRI, r3
}
 8006cf8:	bf00      	nop
 8006cfa:	3738      	adds	r7, #56	; 0x38
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	200143e0 	.word	0x200143e0

08006d04 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b090      	sub	sp, #64	; 0x40
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d12:	f3ef 8311 	mrs	r3, BASEPRI
 8006d16:	f04f 0120 	mov.w	r1, #32
 8006d1a:	f381 8811 	msr	BASEPRI, r1
 8006d1e:	61fb      	str	r3, [r7, #28]
 8006d20:	4840      	ldr	r0, [pc, #256]	; (8006e24 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006d22:	f7ff f8fe 	bl	8005f22 <_PreparePacket>
 8006d26:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d34:	e00b      	b.n	8006d4e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d3c:	1c59      	adds	r1, r3, #1
 8006d3e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006d40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d44:	b2d2      	uxtb	r2, r2
 8006d46:	701a      	strb	r2, [r3, #0]
 8006d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4a:	09db      	lsrs	r3, r3, #7
 8006d4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d50:	2b7f      	cmp	r3, #127	; 0x7f
 8006d52:	d8f0      	bhi.n	8006d36 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006d5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d5c:	b2d2      	uxtb	r2, r2
 8006d5e:	701a      	strb	r2, [r3, #0]
 8006d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d62:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	637b      	str	r3, [r7, #52]	; 0x34
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	633b      	str	r3, [r7, #48]	; 0x30
 8006d6c:	e00b      	b.n	8006d86 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d70:	b2da      	uxtb	r2, r3
 8006d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d74:	1c59      	adds	r1, r3, #1
 8006d76:	6379      	str	r1, [r7, #52]	; 0x34
 8006d78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d7c:	b2d2      	uxtb	r2, r2
 8006d7e:	701a      	strb	r2, [r3, #0]
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	09db      	lsrs	r3, r3, #7
 8006d84:	633b      	str	r3, [r7, #48]	; 0x30
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	2b7f      	cmp	r3, #127	; 0x7f
 8006d8a:	d8f0      	bhi.n	8006d6e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d8e:	1c5a      	adds	r2, r3, #1
 8006d90:	637a      	str	r2, [r7, #52]	; 0x34
 8006d92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d94:	b2d2      	uxtb	r2, r2
 8006d96:	701a      	strb	r2, [r3, #0]
 8006d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d9a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006da4:	e00b      	b.n	8006dbe <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dac:	1c59      	adds	r1, r3, #1
 8006dae:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006db0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006db4:	b2d2      	uxtb	r2, r2
 8006db6:	701a      	strb	r2, [r3, #0]
 8006db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dba:	09db      	lsrs	r3, r3, #7
 8006dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc0:	2b7f      	cmp	r3, #127	; 0x7f
 8006dc2:	d8f0      	bhi.n	8006da6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dcc:	b2d2      	uxtb	r2, r2
 8006dce:	701a      	strb	r2, [r3, #0]
 8006dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8006dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dda:	623b      	str	r3, [r7, #32]
 8006ddc:	e00b      	b.n	8006df6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006dde:	6a3b      	ldr	r3, [r7, #32]
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de4:	1c59      	adds	r1, r3, #1
 8006de6:	6279      	str	r1, [r7, #36]	; 0x24
 8006de8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dec:	b2d2      	uxtb	r2, r2
 8006dee:	701a      	strb	r2, [r3, #0]
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	09db      	lsrs	r3, r3, #7
 8006df4:	623b      	str	r3, [r7, #32]
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	2b7f      	cmp	r3, #127	; 0x7f
 8006dfa:	d8f0      	bhi.n	8006dde <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	1c5a      	adds	r2, r3, #1
 8006e00:	627a      	str	r2, [r7, #36]	; 0x24
 8006e02:	6a3a      	ldr	r2, [r7, #32]
 8006e04:	b2d2      	uxtb	r2, r2
 8006e06:	701a      	strb	r2, [r3, #0]
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	6979      	ldr	r1, [r7, #20]
 8006e10:	69b8      	ldr	r0, [r7, #24]
 8006e12:	f7ff f977 	bl	8006104 <_SendPacket>
  RECORD_END();
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	f383 8811 	msr	BASEPRI, r3
}
 8006e1c:	bf00      	nop
 8006e1e:	3740      	adds	r7, #64	; 0x40
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	200143e0 	.word	0x200143e0

08006e28 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b08c      	sub	sp, #48	; 0x30
 8006e2c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006e2e:	4b59      	ldr	r3, [pc, #356]	; (8006f94 <SEGGER_SYSVIEW_Start+0x16c>)
 8006e30:	2201      	movs	r2, #1
 8006e32:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006e34:	f3ef 8311 	mrs	r3, BASEPRI
 8006e38:	f04f 0120 	mov.w	r1, #32
 8006e3c:	f381 8811 	msr	BASEPRI, r1
 8006e40:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006e42:	4b54      	ldr	r3, [pc, #336]	; (8006f94 <SEGGER_SYSVIEW_Start+0x16c>)
 8006e44:	785b      	ldrb	r3, [r3, #1]
 8006e46:	220a      	movs	r2, #10
 8006e48:	4953      	ldr	r1, [pc, #332]	; (8006f98 <SEGGER_SYSVIEW_Start+0x170>)
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7f9 f9c0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006e56:	f7fe fbf7 	bl	8005648 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006e5a:	200a      	movs	r0, #10
 8006e5c:	f7ff fe28 	bl	8006ab0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006e60:	f3ef 8311 	mrs	r3, BASEPRI
 8006e64:	f04f 0120 	mov.w	r1, #32
 8006e68:	f381 8811 	msr	BASEPRI, r1
 8006e6c:	60bb      	str	r3, [r7, #8]
 8006e6e:	484b      	ldr	r0, [pc, #300]	; (8006f9c <SEGGER_SYSVIEW_Start+0x174>)
 8006e70:	f7ff f857 	bl	8005f22 <_PreparePacket>
 8006e74:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e7e:	4b45      	ldr	r3, [pc, #276]	; (8006f94 <SEGGER_SYSVIEW_Start+0x16c>)
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e84:	e00b      	b.n	8006e9e <SEGGER_SYSVIEW_Start+0x76>
 8006e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8c:	1c59      	adds	r1, r3, #1
 8006e8e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006e90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e94:	b2d2      	uxtb	r2, r2
 8006e96:	701a      	strb	r2, [r3, #0]
 8006e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9a:	09db      	lsrs	r3, r3, #7
 8006e9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ea2:	d8f0      	bhi.n	8006e86 <SEGGER_SYSVIEW_Start+0x5e>
 8006ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea6:	1c5a      	adds	r2, r3, #1
 8006ea8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eac:	b2d2      	uxtb	r2, r2
 8006eae:	701a      	strb	r2, [r3, #0]
 8006eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8006eb8:	4b36      	ldr	r3, [pc, #216]	; (8006f94 <SEGGER_SYSVIEW_Start+0x16c>)
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	623b      	str	r3, [r7, #32]
 8006ebe:	e00b      	b.n	8006ed8 <SEGGER_SYSVIEW_Start+0xb0>
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	1c59      	adds	r1, r3, #1
 8006ec8:	6279      	str	r1, [r7, #36]	; 0x24
 8006eca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ece:	b2d2      	uxtb	r2, r2
 8006ed0:	701a      	strb	r2, [r3, #0]
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	09db      	lsrs	r3, r3, #7
 8006ed6:	623b      	str	r3, [r7, #32]
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	2b7f      	cmp	r3, #127	; 0x7f
 8006edc:	d8f0      	bhi.n	8006ec0 <SEGGER_SYSVIEW_Start+0x98>
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	627a      	str	r2, [r7, #36]	; 0x24
 8006ee4:	6a3a      	ldr	r2, [r7, #32]
 8006ee6:	b2d2      	uxtb	r2, r2
 8006ee8:	701a      	strb	r2, [r3, #0]
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	61fb      	str	r3, [r7, #28]
 8006ef2:	4b28      	ldr	r3, [pc, #160]	; (8006f94 <SEGGER_SYSVIEW_Start+0x16c>)
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	61bb      	str	r3, [r7, #24]
 8006ef8:	e00b      	b.n	8006f12 <SEGGER_SYSVIEW_Start+0xea>
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	1c59      	adds	r1, r3, #1
 8006f02:	61f9      	str	r1, [r7, #28]
 8006f04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f08:	b2d2      	uxtb	r2, r2
 8006f0a:	701a      	strb	r2, [r3, #0]
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	09db      	lsrs	r3, r3, #7
 8006f10:	61bb      	str	r3, [r7, #24]
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	2b7f      	cmp	r3, #127	; 0x7f
 8006f16:	d8f0      	bhi.n	8006efa <SEGGER_SYSVIEW_Start+0xd2>
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	1c5a      	adds	r2, r3, #1
 8006f1c:	61fa      	str	r2, [r7, #28]
 8006f1e:	69ba      	ldr	r2, [r7, #24]
 8006f20:	b2d2      	uxtb	r2, r2
 8006f22:	701a      	strb	r2, [r3, #0]
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	617b      	str	r3, [r7, #20]
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	613b      	str	r3, [r7, #16]
 8006f30:	e00b      	b.n	8006f4a <SEGGER_SYSVIEW_Start+0x122>
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	b2da      	uxtb	r2, r3
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	1c59      	adds	r1, r3, #1
 8006f3a:	6179      	str	r1, [r7, #20]
 8006f3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f40:	b2d2      	uxtb	r2, r2
 8006f42:	701a      	strb	r2, [r3, #0]
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	09db      	lsrs	r3, r3, #7
 8006f48:	613b      	str	r3, [r7, #16]
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	2b7f      	cmp	r3, #127	; 0x7f
 8006f4e:	d8f0      	bhi.n	8006f32 <SEGGER_SYSVIEW_Start+0x10a>
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	1c5a      	adds	r2, r3, #1
 8006f54:	617a      	str	r2, [r7, #20]
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	b2d2      	uxtb	r2, r2
 8006f5a:	701a      	strb	r2, [r3, #0]
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006f60:	2218      	movs	r2, #24
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f7ff f8cd 	bl	8006104 <_SendPacket>
      RECORD_END();
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006f70:	4b08      	ldr	r3, [pc, #32]	; (8006f94 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d002      	beq.n	8006f7e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006f78:	4b06      	ldr	r3, [pc, #24]	; (8006f94 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006f7e:	f000 f9eb 	bl	8007358 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006f82:	f000 f9b1 	bl	80072e8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006f86:	f000 fc83 	bl	8007890 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006f8a:	bf00      	nop
 8006f8c:	3730      	adds	r7, #48	; 0x30
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	200143b0 	.word	0x200143b0
 8006f98:	08007c90 	.word	0x08007c90
 8006f9c:	200143e0 	.word	0x200143e0

08006fa0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006fa6:	f3ef 8311 	mrs	r3, BASEPRI
 8006faa:	f04f 0120 	mov.w	r1, #32
 8006fae:	f381 8811 	msr	BASEPRI, r1
 8006fb2:	607b      	str	r3, [r7, #4]
 8006fb4:	480b      	ldr	r0, [pc, #44]	; (8006fe4 <SEGGER_SYSVIEW_Stop+0x44>)
 8006fb6:	f7fe ffb4 	bl	8005f22 <_PreparePacket>
 8006fba:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006fbc:	4b0a      	ldr	r3, [pc, #40]	; (8006fe8 <SEGGER_SYSVIEW_Stop+0x48>)
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d007      	beq.n	8006fd4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006fc4:	220b      	movs	r2, #11
 8006fc6:	6839      	ldr	r1, [r7, #0]
 8006fc8:	6838      	ldr	r0, [r7, #0]
 8006fca:	f7ff f89b 	bl	8006104 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006fce:	4b06      	ldr	r3, [pc, #24]	; (8006fe8 <SEGGER_SYSVIEW_Stop+0x48>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f383 8811 	msr	BASEPRI, r3
}
 8006fda:	bf00      	nop
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	200143e0 	.word	0x200143e0
 8006fe8:	200143b0 	.word	0x200143b0

08006fec <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b08c      	sub	sp, #48	; 0x30
 8006ff0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006ff2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ff6:	f04f 0120 	mov.w	r1, #32
 8006ffa:	f381 8811 	msr	BASEPRI, r1
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	4845      	ldr	r0, [pc, #276]	; (8007118 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007002:	f7fe ff8e 	bl	8005f22 <_PreparePacket>
 8007006:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007010:	4b42      	ldr	r3, [pc, #264]	; (800711c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	62bb      	str	r3, [r7, #40]	; 0x28
 8007016:	e00b      	b.n	8007030 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701a:	b2da      	uxtb	r2, r3
 800701c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701e:	1c59      	adds	r1, r3, #1
 8007020:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007022:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007026:	b2d2      	uxtb	r2, r2
 8007028:	701a      	strb	r2, [r3, #0]
 800702a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702c:	09db      	lsrs	r3, r3, #7
 800702e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007032:	2b7f      	cmp	r3, #127	; 0x7f
 8007034:	d8f0      	bhi.n	8007018 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800703c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800703e:	b2d2      	uxtb	r2, r2
 8007040:	701a      	strb	r2, [r3, #0]
 8007042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007044:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	627b      	str	r3, [r7, #36]	; 0x24
 800704a:	4b34      	ldr	r3, [pc, #208]	; (800711c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	623b      	str	r3, [r7, #32]
 8007050:	e00b      	b.n	800706a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	b2da      	uxtb	r2, r3
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	1c59      	adds	r1, r3, #1
 800705a:	6279      	str	r1, [r7, #36]	; 0x24
 800705c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007060:	b2d2      	uxtb	r2, r2
 8007062:	701a      	strb	r2, [r3, #0]
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	09db      	lsrs	r3, r3, #7
 8007068:	623b      	str	r3, [r7, #32]
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	2b7f      	cmp	r3, #127	; 0x7f
 800706e:	d8f0      	bhi.n	8007052 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	1c5a      	adds	r2, r3, #1
 8007074:	627a      	str	r2, [r7, #36]	; 0x24
 8007076:	6a3a      	ldr	r2, [r7, #32]
 8007078:	b2d2      	uxtb	r2, r2
 800707a:	701a      	strb	r2, [r3, #0]
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	61fb      	str	r3, [r7, #28]
 8007084:	4b25      	ldr	r3, [pc, #148]	; (800711c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	61bb      	str	r3, [r7, #24]
 800708a:	e00b      	b.n	80070a4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	b2da      	uxtb	r2, r3
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	1c59      	adds	r1, r3, #1
 8007094:	61f9      	str	r1, [r7, #28]
 8007096:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	701a      	strb	r2, [r3, #0]
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	09db      	lsrs	r3, r3, #7
 80070a2:	61bb      	str	r3, [r7, #24]
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	2b7f      	cmp	r3, #127	; 0x7f
 80070a8:	d8f0      	bhi.n	800708c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	61fa      	str	r2, [r7, #28]
 80070b0:	69ba      	ldr	r2, [r7, #24]
 80070b2:	b2d2      	uxtb	r2, r2
 80070b4:	701a      	strb	r2, [r3, #0]
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	617b      	str	r3, [r7, #20]
 80070be:	2300      	movs	r3, #0
 80070c0:	613b      	str	r3, [r7, #16]
 80070c2:	e00b      	b.n	80070dc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	1c59      	adds	r1, r3, #1
 80070cc:	6179      	str	r1, [r7, #20]
 80070ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070d2:	b2d2      	uxtb	r2, r2
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	09db      	lsrs	r3, r3, #7
 80070da:	613b      	str	r3, [r7, #16]
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	2b7f      	cmp	r3, #127	; 0x7f
 80070e0:	d8f0      	bhi.n	80070c4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	1c5a      	adds	r2, r3, #1
 80070e6:	617a      	str	r2, [r7, #20]
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	b2d2      	uxtb	r2, r2
 80070ec:	701a      	strb	r2, [r3, #0]
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80070f2:	2218      	movs	r2, #24
 80070f4:	6879      	ldr	r1, [r7, #4]
 80070f6:	68b8      	ldr	r0, [r7, #8]
 80070f8:	f7ff f804 	bl	8006104 <_SendPacket>
  RECORD_END();
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007102:	4b06      	ldr	r3, [pc, #24]	; (800711c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007106:	2b00      	cmp	r3, #0
 8007108:	d002      	beq.n	8007110 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800710a:	4b04      	ldr	r3, [pc, #16]	; (800711c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800710c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710e:	4798      	blx	r3
  }
}
 8007110:	bf00      	nop
 8007112:	3730      	adds	r7, #48	; 0x30
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	200143e0 	.word	0x200143e0
 800711c:	200143b0 	.word	0x200143b0

08007120 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007120:	b580      	push	{r7, lr}
 8007122:	b092      	sub	sp, #72	; 0x48
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007128:	f3ef 8311 	mrs	r3, BASEPRI
 800712c:	f04f 0120 	mov.w	r1, #32
 8007130:	f381 8811 	msr	BASEPRI, r1
 8007134:	617b      	str	r3, [r7, #20]
 8007136:	486a      	ldr	r0, [pc, #424]	; (80072e0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007138:	f7fe fef3 	bl	8005f22 <_PreparePacket>
 800713c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	647b      	str	r3, [r7, #68]	; 0x44
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	4b66      	ldr	r3, [pc, #408]	; (80072e4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	643b      	str	r3, [r7, #64]	; 0x40
 8007152:	e00b      	b.n	800716c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007156:	b2da      	uxtb	r2, r3
 8007158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800715a:	1c59      	adds	r1, r3, #1
 800715c:	6479      	str	r1, [r7, #68]	; 0x44
 800715e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007162:	b2d2      	uxtb	r2, r2
 8007164:	701a      	strb	r2, [r3, #0]
 8007166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007168:	09db      	lsrs	r3, r3, #7
 800716a:	643b      	str	r3, [r7, #64]	; 0x40
 800716c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800716e:	2b7f      	cmp	r3, #127	; 0x7f
 8007170:	d8f0      	bhi.n	8007154 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007174:	1c5a      	adds	r2, r3, #1
 8007176:	647a      	str	r2, [r7, #68]	; 0x44
 8007178:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800717a:	b2d2      	uxtb	r2, r2
 800717c:	701a      	strb	r2, [r3, #0]
 800717e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007180:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	63bb      	str	r3, [r7, #56]	; 0x38
 800718c:	e00b      	b.n	80071a6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800718e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007190:	b2da      	uxtb	r2, r3
 8007192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007194:	1c59      	adds	r1, r3, #1
 8007196:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007198:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800719c:	b2d2      	uxtb	r2, r2
 800719e:	701a      	strb	r2, [r3, #0]
 80071a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a2:	09db      	lsrs	r3, r3, #7
 80071a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80071a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a8:	2b7f      	cmp	r3, #127	; 0x7f
 80071aa:	d8f0      	bhi.n	800718e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80071ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ae:	1c5a      	adds	r2, r3, #1
 80071b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80071b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071b4:	b2d2      	uxtb	r2, r2
 80071b6:	701a      	strb	r2, [r3, #0]
 80071b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ba:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	2220      	movs	r2, #32
 80071c2:	4619      	mov	r1, r3
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f7fe fe5f 	bl	8005e88 <_EncodeStr>
 80071ca:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80071cc:	2209      	movs	r2, #9
 80071ce:	68f9      	ldr	r1, [r7, #12]
 80071d0:	6938      	ldr	r0, [r7, #16]
 80071d2:	f7fe ff97 	bl	8006104 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	637b      	str	r3, [r7, #52]	; 0x34
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	4b40      	ldr	r3, [pc, #256]	; (80072e4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	633b      	str	r3, [r7, #48]	; 0x30
 80071ea:	e00b      	b.n	8007204 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80071ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ee:	b2da      	uxtb	r2, r3
 80071f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f2:	1c59      	adds	r1, r3, #1
 80071f4:	6379      	str	r1, [r7, #52]	; 0x34
 80071f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071fa:	b2d2      	uxtb	r2, r2
 80071fc:	701a      	strb	r2, [r3, #0]
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	09db      	lsrs	r3, r3, #7
 8007202:	633b      	str	r3, [r7, #48]	; 0x30
 8007204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007206:	2b7f      	cmp	r3, #127	; 0x7f
 8007208:	d8f0      	bhi.n	80071ec <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800720a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800720c:	1c5a      	adds	r2, r3, #1
 800720e:	637a      	str	r2, [r7, #52]	; 0x34
 8007210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007212:	b2d2      	uxtb	r2, r2
 8007214:	701a      	strb	r2, [r3, #0]
 8007216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007218:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	62bb      	str	r3, [r7, #40]	; 0x28
 8007224:	e00b      	b.n	800723e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007228:	b2da      	uxtb	r2, r3
 800722a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722c:	1c59      	adds	r1, r3, #1
 800722e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007230:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007234:	b2d2      	uxtb	r2, r2
 8007236:	701a      	strb	r2, [r3, #0]
 8007238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723a:	09db      	lsrs	r3, r3, #7
 800723c:	62bb      	str	r3, [r7, #40]	; 0x28
 800723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007240:	2b7f      	cmp	r3, #127	; 0x7f
 8007242:	d8f0      	bhi.n	8007226 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	62fa      	str	r2, [r7, #44]	; 0x2c
 800724a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800724c:	b2d2      	uxtb	r2, r2
 800724e:	701a      	strb	r2, [r3, #0]
 8007250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007252:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	627b      	str	r3, [r7, #36]	; 0x24
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	623b      	str	r3, [r7, #32]
 800725e:	e00b      	b.n	8007278 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007260:	6a3b      	ldr	r3, [r7, #32]
 8007262:	b2da      	uxtb	r2, r3
 8007264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007266:	1c59      	adds	r1, r3, #1
 8007268:	6279      	str	r1, [r7, #36]	; 0x24
 800726a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800726e:	b2d2      	uxtb	r2, r2
 8007270:	701a      	strb	r2, [r3, #0]
 8007272:	6a3b      	ldr	r3, [r7, #32]
 8007274:	09db      	lsrs	r3, r3, #7
 8007276:	623b      	str	r3, [r7, #32]
 8007278:	6a3b      	ldr	r3, [r7, #32]
 800727a:	2b7f      	cmp	r3, #127	; 0x7f
 800727c:	d8f0      	bhi.n	8007260 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	1c5a      	adds	r2, r3, #1
 8007282:	627a      	str	r2, [r7, #36]	; 0x24
 8007284:	6a3a      	ldr	r2, [r7, #32]
 8007286:	b2d2      	uxtb	r2, r2
 8007288:	701a      	strb	r2, [r3, #0]
 800728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	61fb      	str	r3, [r7, #28]
 8007292:	2300      	movs	r3, #0
 8007294:	61bb      	str	r3, [r7, #24]
 8007296:	e00b      	b.n	80072b0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	b2da      	uxtb	r2, r3
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	1c59      	adds	r1, r3, #1
 80072a0:	61f9      	str	r1, [r7, #28]
 80072a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	701a      	strb	r2, [r3, #0]
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	09db      	lsrs	r3, r3, #7
 80072ae:	61bb      	str	r3, [r7, #24]
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	2b7f      	cmp	r3, #127	; 0x7f
 80072b4:	d8f0      	bhi.n	8007298 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	1c5a      	adds	r2, r3, #1
 80072ba:	61fa      	str	r2, [r7, #28]
 80072bc:	69ba      	ldr	r2, [r7, #24]
 80072be:	b2d2      	uxtb	r2, r2
 80072c0:	701a      	strb	r2, [r3, #0]
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80072c6:	2215      	movs	r2, #21
 80072c8:	68f9      	ldr	r1, [r7, #12]
 80072ca:	6938      	ldr	r0, [r7, #16]
 80072cc:	f7fe ff1a 	bl	8006104 <_SendPacket>
  RECORD_END();
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f383 8811 	msr	BASEPRI, r3
}
 80072d6:	bf00      	nop
 80072d8:	3748      	adds	r7, #72	; 0x48
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	200143e0 	.word	0x200143e0
 80072e4:	200143b0 	.word	0x200143b0

080072e8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80072e8:	b580      	push	{r7, lr}
 80072ea:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80072ec:	4b07      	ldr	r3, [pc, #28]	; (800730c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d008      	beq.n	8007306 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80072f4:	4b05      	ldr	r3, [pc, #20]	; (800730c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80072fe:	4b03      	ldr	r3, [pc, #12]	; (800730c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	4798      	blx	r3
  }
}
 8007306:	bf00      	nop
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	200143b0 	.word	0x200143b0

08007310 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007318:	f3ef 8311 	mrs	r3, BASEPRI
 800731c:	f04f 0120 	mov.w	r1, #32
 8007320:	f381 8811 	msr	BASEPRI, r1
 8007324:	617b      	str	r3, [r7, #20]
 8007326:	480b      	ldr	r0, [pc, #44]	; (8007354 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007328:	f7fe fdfb 	bl	8005f22 <_PreparePacket>
 800732c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800732e:	2280      	movs	r2, #128	; 0x80
 8007330:	6879      	ldr	r1, [r7, #4]
 8007332:	6938      	ldr	r0, [r7, #16]
 8007334:	f7fe fda8 	bl	8005e88 <_EncodeStr>
 8007338:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800733a:	220e      	movs	r2, #14
 800733c:	68f9      	ldr	r1, [r7, #12]
 800733e:	6938      	ldr	r0, [r7, #16]
 8007340:	f7fe fee0 	bl	8006104 <_SendPacket>
  RECORD_END();
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f383 8811 	msr	BASEPRI, r3
}
 800734a:	bf00      	nop
 800734c:	3718      	adds	r7, #24
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	200143e0 	.word	0x200143e0

08007358 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007358:	b590      	push	{r4, r7, lr}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800735e:	4b15      	ldr	r3, [pc, #84]	; (80073b4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007360:	6a1b      	ldr	r3, [r3, #32]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d01a      	beq.n	800739c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007366:	4b13      	ldr	r3, [pc, #76]	; (80073b4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d015      	beq.n	800739c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007370:	4b10      	ldr	r3, [pc, #64]	; (80073b4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4798      	blx	r3
 8007378:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800737c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800737e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007382:	f04f 0200 	mov.w	r2, #0
 8007386:	f04f 0300 	mov.w	r3, #0
 800738a:	000a      	movs	r2, r1
 800738c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800738e:	4613      	mov	r3, r2
 8007390:	461a      	mov	r2, r3
 8007392:	4621      	mov	r1, r4
 8007394:	200d      	movs	r0, #13
 8007396:	f7ff fbe5 	bl	8006b64 <SEGGER_SYSVIEW_RecordU32x2>
 800739a:	e006      	b.n	80073aa <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800739c:	4b06      	ldr	r3, [pc, #24]	; (80073b8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4619      	mov	r1, r3
 80073a2:	200c      	movs	r0, #12
 80073a4:	f7ff fba2 	bl	8006aec <SEGGER_SYSVIEW_RecordU32>
  }
}
 80073a8:	bf00      	nop
 80073aa:	bf00      	nop
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd90      	pop	{r4, r7, pc}
 80073b2:	bf00      	nop
 80073b4:	200143b0 	.word	0x200143b0
 80073b8:	e0001004 	.word	0xe0001004

080073bc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80073c2:	f3ef 8311 	mrs	r3, BASEPRI
 80073c6:	f04f 0120 	mov.w	r1, #32
 80073ca:	f381 8811 	msr	BASEPRI, r1
 80073ce:	60fb      	str	r3, [r7, #12]
 80073d0:	4819      	ldr	r0, [pc, #100]	; (8007438 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80073d2:	f7fe fda6 	bl	8005f22 <_PreparePacket>
 80073d6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80073dc:	4b17      	ldr	r3, [pc, #92]	; (800743c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	617b      	str	r3, [r7, #20]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	613b      	str	r3, [r7, #16]
 80073ee:	e00b      	b.n	8007408 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	b2da      	uxtb	r2, r3
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	1c59      	adds	r1, r3, #1
 80073f8:	6179      	str	r1, [r7, #20]
 80073fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073fe:	b2d2      	uxtb	r2, r2
 8007400:	701a      	strb	r2, [r3, #0]
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	09db      	lsrs	r3, r3, #7
 8007406:	613b      	str	r3, [r7, #16]
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	2b7f      	cmp	r3, #127	; 0x7f
 800740c:	d8f0      	bhi.n	80073f0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	1c5a      	adds	r2, r3, #1
 8007412:	617a      	str	r2, [r7, #20]
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	b2d2      	uxtb	r2, r2
 8007418:	701a      	strb	r2, [r3, #0]
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800741e:	2202      	movs	r2, #2
 8007420:	6879      	ldr	r1, [r7, #4]
 8007422:	68b8      	ldr	r0, [r7, #8]
 8007424:	f7fe fe6e 	bl	8006104 <_SendPacket>
  RECORD_END();
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f383 8811 	msr	BASEPRI, r3
}
 800742e:	bf00      	nop
 8007430:	3718      	adds	r7, #24
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	200143e0 	.word	0x200143e0
 800743c:	e000ed04 	.word	0xe000ed04

08007440 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007446:	f3ef 8311 	mrs	r3, BASEPRI
 800744a:	f04f 0120 	mov.w	r1, #32
 800744e:	f381 8811 	msr	BASEPRI, r1
 8007452:	607b      	str	r3, [r7, #4]
 8007454:	4807      	ldr	r0, [pc, #28]	; (8007474 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007456:	f7fe fd64 	bl	8005f22 <_PreparePacket>
 800745a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800745c:	2203      	movs	r2, #3
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	6838      	ldr	r0, [r7, #0]
 8007462:	f7fe fe4f 	bl	8006104 <_SendPacket>
  RECORD_END();
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f383 8811 	msr	BASEPRI, r3
}
 800746c:	bf00      	nop
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	200143e0 	.word	0x200143e0

08007478 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800747e:	f3ef 8311 	mrs	r3, BASEPRI
 8007482:	f04f 0120 	mov.w	r1, #32
 8007486:	f381 8811 	msr	BASEPRI, r1
 800748a:	607b      	str	r3, [r7, #4]
 800748c:	4807      	ldr	r0, [pc, #28]	; (80074ac <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800748e:	f7fe fd48 	bl	8005f22 <_PreparePacket>
 8007492:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007494:	2212      	movs	r2, #18
 8007496:	6839      	ldr	r1, [r7, #0]
 8007498:	6838      	ldr	r0, [r7, #0]
 800749a:	f7fe fe33 	bl	8006104 <_SendPacket>
  RECORD_END();
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f383 8811 	msr	BASEPRI, r3
}
 80074a4:	bf00      	nop
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	200143e0 	.word	0x200143e0

080074b0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80074b6:	f3ef 8311 	mrs	r3, BASEPRI
 80074ba:	f04f 0120 	mov.w	r1, #32
 80074be:	f381 8811 	msr	BASEPRI, r1
 80074c2:	607b      	str	r3, [r7, #4]
 80074c4:	4807      	ldr	r0, [pc, #28]	; (80074e4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80074c6:	f7fe fd2c 	bl	8005f22 <_PreparePacket>
 80074ca:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80074cc:	2211      	movs	r2, #17
 80074ce:	6839      	ldr	r1, [r7, #0]
 80074d0:	6838      	ldr	r0, [r7, #0]
 80074d2:	f7fe fe17 	bl	8006104 <_SendPacket>
  RECORD_END();
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f383 8811 	msr	BASEPRI, r3
}
 80074dc:	bf00      	nop
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	200143e0 	.word	0x200143e0

080074e8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80074f0:	f3ef 8311 	mrs	r3, BASEPRI
 80074f4:	f04f 0120 	mov.w	r1, #32
 80074f8:	f381 8811 	msr	BASEPRI, r1
 80074fc:	617b      	str	r3, [r7, #20]
 80074fe:	4819      	ldr	r0, [pc, #100]	; (8007564 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007500:	f7fe fd0f 	bl	8005f22 <_PreparePacket>
 8007504:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800750a:	4b17      	ldr	r3, [pc, #92]	; (8007568 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	61fb      	str	r3, [r7, #28]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	61bb      	str	r3, [r7, #24]
 800751c:	e00b      	b.n	8007536 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	b2da      	uxtb	r2, r3
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	1c59      	adds	r1, r3, #1
 8007526:	61f9      	str	r1, [r7, #28]
 8007528:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800752c:	b2d2      	uxtb	r2, r2
 800752e:	701a      	strb	r2, [r3, #0]
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	09db      	lsrs	r3, r3, #7
 8007534:	61bb      	str	r3, [r7, #24]
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	2b7f      	cmp	r3, #127	; 0x7f
 800753a:	d8f0      	bhi.n	800751e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	1c5a      	adds	r2, r3, #1
 8007540:	61fa      	str	r2, [r7, #28]
 8007542:	69ba      	ldr	r2, [r7, #24]
 8007544:	b2d2      	uxtb	r2, r2
 8007546:	701a      	strb	r2, [r3, #0]
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800754c:	2208      	movs	r2, #8
 800754e:	68f9      	ldr	r1, [r7, #12]
 8007550:	6938      	ldr	r0, [r7, #16]
 8007552:	f7fe fdd7 	bl	8006104 <_SendPacket>
  RECORD_END();
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f383 8811 	msr	BASEPRI, r3
}
 800755c:	bf00      	nop
 800755e:	3720      	adds	r7, #32
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	200143e0 	.word	0x200143e0
 8007568:	200143b0 	.word	0x200143b0

0800756c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800756c:	b580      	push	{r7, lr}
 800756e:	b088      	sub	sp, #32
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007574:	f3ef 8311 	mrs	r3, BASEPRI
 8007578:	f04f 0120 	mov.w	r1, #32
 800757c:	f381 8811 	msr	BASEPRI, r1
 8007580:	617b      	str	r3, [r7, #20]
 8007582:	4819      	ldr	r0, [pc, #100]	; (80075e8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007584:	f7fe fccd 	bl	8005f22 <_PreparePacket>
 8007588:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800758e:	4b17      	ldr	r3, [pc, #92]	; (80075ec <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	61fb      	str	r3, [r7, #28]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	61bb      	str	r3, [r7, #24]
 80075a0:	e00b      	b.n	80075ba <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	1c59      	adds	r1, r3, #1
 80075aa:	61f9      	str	r1, [r7, #28]
 80075ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075b0:	b2d2      	uxtb	r2, r2
 80075b2:	701a      	strb	r2, [r3, #0]
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	09db      	lsrs	r3, r3, #7
 80075b8:	61bb      	str	r3, [r7, #24]
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	2b7f      	cmp	r3, #127	; 0x7f
 80075be:	d8f0      	bhi.n	80075a2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	1c5a      	adds	r2, r3, #1
 80075c4:	61fa      	str	r2, [r7, #28]
 80075c6:	69ba      	ldr	r2, [r7, #24]
 80075c8:	b2d2      	uxtb	r2, r2
 80075ca:	701a      	strb	r2, [r3, #0]
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80075d0:	2204      	movs	r2, #4
 80075d2:	68f9      	ldr	r1, [r7, #12]
 80075d4:	6938      	ldr	r0, [r7, #16]
 80075d6:	f7fe fd95 	bl	8006104 <_SendPacket>
  RECORD_END();
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f383 8811 	msr	BASEPRI, r3
}
 80075e0:	bf00      	nop
 80075e2:	3720      	adds	r7, #32
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	200143e0 	.word	0x200143e0
 80075ec:	200143b0 	.word	0x200143b0

080075f0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b088      	sub	sp, #32
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80075f8:	f3ef 8311 	mrs	r3, BASEPRI
 80075fc:	f04f 0120 	mov.w	r1, #32
 8007600:	f381 8811 	msr	BASEPRI, r1
 8007604:	617b      	str	r3, [r7, #20]
 8007606:	4819      	ldr	r0, [pc, #100]	; (800766c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007608:	f7fe fc8b 	bl	8005f22 <_PreparePacket>
 800760c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007612:	4b17      	ldr	r3, [pc, #92]	; (8007670 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	61fb      	str	r3, [r7, #28]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	61bb      	str	r3, [r7, #24]
 8007624:	e00b      	b.n	800763e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	b2da      	uxtb	r2, r3
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	1c59      	adds	r1, r3, #1
 800762e:	61f9      	str	r1, [r7, #28]
 8007630:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007634:	b2d2      	uxtb	r2, r2
 8007636:	701a      	strb	r2, [r3, #0]
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	09db      	lsrs	r3, r3, #7
 800763c:	61bb      	str	r3, [r7, #24]
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	2b7f      	cmp	r3, #127	; 0x7f
 8007642:	d8f0      	bhi.n	8007626 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	1c5a      	adds	r2, r3, #1
 8007648:	61fa      	str	r2, [r7, #28]
 800764a:	69ba      	ldr	r2, [r7, #24]
 800764c:	b2d2      	uxtb	r2, r2
 800764e:	701a      	strb	r2, [r3, #0]
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007654:	2206      	movs	r2, #6
 8007656:	68f9      	ldr	r1, [r7, #12]
 8007658:	6938      	ldr	r0, [r7, #16]
 800765a:	f7fe fd53 	bl	8006104 <_SendPacket>
  RECORD_END();
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	f383 8811 	msr	BASEPRI, r3
}
 8007664:	bf00      	nop
 8007666:	3720      	adds	r7, #32
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	200143e0 	.word	0x200143e0
 8007670:	200143b0 	.word	0x200143b0

08007674 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007674:	b580      	push	{r7, lr}
 8007676:	b08a      	sub	sp, #40	; 0x28
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800767e:	f3ef 8311 	mrs	r3, BASEPRI
 8007682:	f04f 0120 	mov.w	r1, #32
 8007686:	f381 8811 	msr	BASEPRI, r1
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	4827      	ldr	r0, [pc, #156]	; (800772c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800768e:	f7fe fc48 	bl	8005f22 <_PreparePacket>
 8007692:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007698:	4b25      	ldr	r3, [pc, #148]	; (8007730 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	627b      	str	r3, [r7, #36]	; 0x24
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	623b      	str	r3, [r7, #32]
 80076aa:	e00b      	b.n	80076c4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	1c59      	adds	r1, r3, #1
 80076b4:	6279      	str	r1, [r7, #36]	; 0x24
 80076b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076ba:	b2d2      	uxtb	r2, r2
 80076bc:	701a      	strb	r2, [r3, #0]
 80076be:	6a3b      	ldr	r3, [r7, #32]
 80076c0:	09db      	lsrs	r3, r3, #7
 80076c2:	623b      	str	r3, [r7, #32]
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	2b7f      	cmp	r3, #127	; 0x7f
 80076c8:	d8f0      	bhi.n	80076ac <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	1c5a      	adds	r2, r3, #1
 80076ce:	627a      	str	r2, [r7, #36]	; 0x24
 80076d0:	6a3a      	ldr	r2, [r7, #32]
 80076d2:	b2d2      	uxtb	r2, r2
 80076d4:	701a      	strb	r2, [r3, #0]
 80076d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	61fb      	str	r3, [r7, #28]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	61bb      	str	r3, [r7, #24]
 80076e2:	e00b      	b.n	80076fc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	1c59      	adds	r1, r3, #1
 80076ec:	61f9      	str	r1, [r7, #28]
 80076ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076f2:	b2d2      	uxtb	r2, r2
 80076f4:	701a      	strb	r2, [r3, #0]
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	09db      	lsrs	r3, r3, #7
 80076fa:	61bb      	str	r3, [r7, #24]
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	2b7f      	cmp	r3, #127	; 0x7f
 8007700:	d8f0      	bhi.n	80076e4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	1c5a      	adds	r2, r3, #1
 8007706:	61fa      	str	r2, [r7, #28]
 8007708:	69ba      	ldr	r2, [r7, #24]
 800770a:	b2d2      	uxtb	r2, r2
 800770c:	701a      	strb	r2, [r3, #0]
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007712:	2207      	movs	r2, #7
 8007714:	68f9      	ldr	r1, [r7, #12]
 8007716:	6938      	ldr	r0, [r7, #16]
 8007718:	f7fe fcf4 	bl	8006104 <_SendPacket>
  RECORD_END();
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	f383 8811 	msr	BASEPRI, r3
}
 8007722:	bf00      	nop
 8007724:	3728      	adds	r7, #40	; 0x28
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	200143e0 	.word	0x200143e0
 8007730:	200143b0 	.word	0x200143b0

08007734 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800773c:	4b04      	ldr	r3, [pc, #16]	; (8007750 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	1ad3      	subs	r3, r2, r3
}
 8007744:	4618      	mov	r0, r3
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr
 8007750:	200143b0 	.word	0x200143b0

08007754 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007754:	b580      	push	{r7, lr}
 8007756:	b08c      	sub	sp, #48	; 0x30
 8007758:	af00      	add	r7, sp, #0
 800775a:	4603      	mov	r3, r0
 800775c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800775e:	4b3b      	ldr	r3, [pc, #236]	; (800784c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d06d      	beq.n	8007842 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007766:	4b39      	ldr	r3, [pc, #228]	; (800784c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800776c:	2300      	movs	r3, #0
 800776e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007770:	e008      	b.n	8007784 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777a:	2b00      	cmp	r3, #0
 800777c:	d007      	beq.n	800778e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800777e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007780:	3301      	adds	r3, #1
 8007782:	62bb      	str	r3, [r7, #40]	; 0x28
 8007784:	79fb      	ldrb	r3, [r7, #7]
 8007786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007788:	429a      	cmp	r2, r3
 800778a:	d3f2      	bcc.n	8007772 <SEGGER_SYSVIEW_SendModule+0x1e>
 800778c:	e000      	b.n	8007790 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800778e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007792:	2b00      	cmp	r3, #0
 8007794:	d055      	beq.n	8007842 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007796:	f3ef 8311 	mrs	r3, BASEPRI
 800779a:	f04f 0120 	mov.w	r1, #32
 800779e:	f381 8811 	msr	BASEPRI, r1
 80077a2:	617b      	str	r3, [r7, #20]
 80077a4:	482a      	ldr	r0, [pc, #168]	; (8007850 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80077a6:	f7fe fbbc 	bl	8005f22 <_PreparePacket>
 80077aa:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	627b      	str	r3, [r7, #36]	; 0x24
 80077b4:	79fb      	ldrb	r3, [r7, #7]
 80077b6:	623b      	str	r3, [r7, #32]
 80077b8:	e00b      	b.n	80077d2 <SEGGER_SYSVIEW_SendModule+0x7e>
 80077ba:	6a3b      	ldr	r3, [r7, #32]
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c0:	1c59      	adds	r1, r3, #1
 80077c2:	6279      	str	r1, [r7, #36]	; 0x24
 80077c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077c8:	b2d2      	uxtb	r2, r2
 80077ca:	701a      	strb	r2, [r3, #0]
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	09db      	lsrs	r3, r3, #7
 80077d0:	623b      	str	r3, [r7, #32]
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	2b7f      	cmp	r3, #127	; 0x7f
 80077d6:	d8f0      	bhi.n	80077ba <SEGGER_SYSVIEW_SendModule+0x66>
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	627a      	str	r2, [r7, #36]	; 0x24
 80077de:	6a3a      	ldr	r2, [r7, #32]
 80077e0:	b2d2      	uxtb	r2, r2
 80077e2:	701a      	strb	r2, [r3, #0]
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	61fb      	str	r3, [r7, #28]
 80077ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	61bb      	str	r3, [r7, #24]
 80077f2:	e00b      	b.n	800780c <SEGGER_SYSVIEW_SendModule+0xb8>
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	1c59      	adds	r1, r3, #1
 80077fc:	61f9      	str	r1, [r7, #28]
 80077fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007802:	b2d2      	uxtb	r2, r2
 8007804:	701a      	strb	r2, [r3, #0]
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	09db      	lsrs	r3, r3, #7
 800780a:	61bb      	str	r3, [r7, #24]
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	2b7f      	cmp	r3, #127	; 0x7f
 8007810:	d8f0      	bhi.n	80077f4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	1c5a      	adds	r2, r3, #1
 8007816:	61fa      	str	r2, [r7, #28]
 8007818:	69ba      	ldr	r2, [r7, #24]
 800781a:	b2d2      	uxtb	r2, r2
 800781c:	701a      	strb	r2, [r3, #0]
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2280      	movs	r2, #128	; 0x80
 8007828:	4619      	mov	r1, r3
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f7fe fb2c 	bl	8005e88 <_EncodeStr>
 8007830:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007832:	2216      	movs	r2, #22
 8007834:	68f9      	ldr	r1, [r7, #12]
 8007836:	6938      	ldr	r0, [r7, #16]
 8007838:	f7fe fc64 	bl	8006104 <_SendPacket>
      RECORD_END();
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007842:	bf00      	nop
 8007844:	3730      	adds	r7, #48	; 0x30
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	200143d8 	.word	0x200143d8
 8007850:	200143e0 	.word	0x200143e0

08007854 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800785a:	4b0c      	ldr	r3, [pc, #48]	; (800788c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00f      	beq.n	8007882 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007862:	4b0a      	ldr	r3, [pc, #40]	; (800788c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d002      	beq.n	8007876 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1f2      	bne.n	8007868 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007882:	bf00      	nop
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	200143d8 	.word	0x200143d8

08007890 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007896:	f3ef 8311 	mrs	r3, BASEPRI
 800789a:	f04f 0120 	mov.w	r1, #32
 800789e:	f381 8811 	msr	BASEPRI, r1
 80078a2:	60fb      	str	r3, [r7, #12]
 80078a4:	4817      	ldr	r0, [pc, #92]	; (8007904 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80078a6:	f7fe fb3c 	bl	8005f22 <_PreparePacket>
 80078aa:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	617b      	str	r3, [r7, #20]
 80078b4:	4b14      	ldr	r3, [pc, #80]	; (8007908 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	613b      	str	r3, [r7, #16]
 80078ba:	e00b      	b.n	80078d4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	b2da      	uxtb	r2, r3
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	1c59      	adds	r1, r3, #1
 80078c4:	6179      	str	r1, [r7, #20]
 80078c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078ca:	b2d2      	uxtb	r2, r2
 80078cc:	701a      	strb	r2, [r3, #0]
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	09db      	lsrs	r3, r3, #7
 80078d2:	613b      	str	r3, [r7, #16]
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	2b7f      	cmp	r3, #127	; 0x7f
 80078d8:	d8f0      	bhi.n	80078bc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	1c5a      	adds	r2, r3, #1
 80078de:	617a      	str	r2, [r7, #20]
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	b2d2      	uxtb	r2, r2
 80078e4:	701a      	strb	r2, [r3, #0]
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80078ea:	221b      	movs	r2, #27
 80078ec:	6879      	ldr	r1, [r7, #4]
 80078ee:	68b8      	ldr	r0, [r7, #8]
 80078f0:	f7fe fc08 	bl	8006104 <_SendPacket>
  RECORD_END();
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f383 8811 	msr	BASEPRI, r3
}
 80078fa:	bf00      	nop
 80078fc:	3718      	adds	r7, #24
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	200143e0 	.word	0x200143e0
 8007908:	200143dc 	.word	0x200143dc

0800790c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 800790c:	b40f      	push	{r0, r1, r2, r3}
 800790e:	b580      	push	{r7, lr}
 8007910:	b082      	sub	sp, #8
 8007912:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007914:	f107 0314 	add.w	r3, r7, #20
 8007918:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800791a:	1d3b      	adds	r3, r7, #4
 800791c:	461a      	mov	r2, r3
 800791e:	2100      	movs	r1, #0
 8007920:	6938      	ldr	r0, [r7, #16]
 8007922:	f7fe fe79 	bl	8006618 <_VPrintTarget>
  va_end(ParamList);
}
 8007926:	bf00      	nop
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007930:	b004      	add	sp, #16
 8007932:	4770      	bx	lr

08007934 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007934:	b580      	push	{r7, lr}
 8007936:	b08a      	sub	sp, #40	; 0x28
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800793c:	f3ef 8311 	mrs	r3, BASEPRI
 8007940:	f04f 0120 	mov.w	r1, #32
 8007944:	f381 8811 	msr	BASEPRI, r1
 8007948:	617b      	str	r3, [r7, #20]
 800794a:	4827      	ldr	r0, [pc, #156]	; (80079e8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800794c:	f7fe fae9 	bl	8005f22 <_PreparePacket>
 8007950:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007952:	2280      	movs	r2, #128	; 0x80
 8007954:	6879      	ldr	r1, [r7, #4]
 8007956:	6938      	ldr	r0, [r7, #16]
 8007958:	f7fe fa96 	bl	8005e88 <_EncodeStr>
 800795c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	627b      	str	r3, [r7, #36]	; 0x24
 8007962:	2301      	movs	r3, #1
 8007964:	623b      	str	r3, [r7, #32]
 8007966:	e00b      	b.n	8007980 <SEGGER_SYSVIEW_Warn+0x4c>
 8007968:	6a3b      	ldr	r3, [r7, #32]
 800796a:	b2da      	uxtb	r2, r3
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	1c59      	adds	r1, r3, #1
 8007970:	6279      	str	r1, [r7, #36]	; 0x24
 8007972:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007976:	b2d2      	uxtb	r2, r2
 8007978:	701a      	strb	r2, [r3, #0]
 800797a:	6a3b      	ldr	r3, [r7, #32]
 800797c:	09db      	lsrs	r3, r3, #7
 800797e:	623b      	str	r3, [r7, #32]
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	2b7f      	cmp	r3, #127	; 0x7f
 8007984:	d8f0      	bhi.n	8007968 <SEGGER_SYSVIEW_Warn+0x34>
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	627a      	str	r2, [r7, #36]	; 0x24
 800798c:	6a3a      	ldr	r2, [r7, #32]
 800798e:	b2d2      	uxtb	r2, r2
 8007990:	701a      	strb	r2, [r3, #0]
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	61fb      	str	r3, [r7, #28]
 800799a:	2300      	movs	r3, #0
 800799c:	61bb      	str	r3, [r7, #24]
 800799e:	e00b      	b.n	80079b8 <SEGGER_SYSVIEW_Warn+0x84>
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	b2da      	uxtb	r2, r3
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	1c59      	adds	r1, r3, #1
 80079a8:	61f9      	str	r1, [r7, #28]
 80079aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079ae:	b2d2      	uxtb	r2, r2
 80079b0:	701a      	strb	r2, [r3, #0]
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	09db      	lsrs	r3, r3, #7
 80079b6:	61bb      	str	r3, [r7, #24]
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	2b7f      	cmp	r3, #127	; 0x7f
 80079bc:	d8f0      	bhi.n	80079a0 <SEGGER_SYSVIEW_Warn+0x6c>
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	1c5a      	adds	r2, r3, #1
 80079c2:	61fa      	str	r2, [r7, #28]
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	b2d2      	uxtb	r2, r2
 80079c8:	701a      	strb	r2, [r3, #0]
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80079ce:	221a      	movs	r2, #26
 80079d0:	68f9      	ldr	r1, [r7, #12]
 80079d2:	6938      	ldr	r0, [r7, #16]
 80079d4:	f7fe fb96 	bl	8006104 <_SendPacket>
  RECORD_END();
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	f383 8811 	msr	BASEPRI, r3
}
 80079de:	bf00      	nop
 80079e0:	3728      	adds	r7, #40	; 0x28
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	200143e0 	.word	0x200143e0

080079ec <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80079ec:	b580      	push	{r7, lr}
 80079ee:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80079f0:	4b13      	ldr	r3, [pc, #76]	; (8007a40 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80079f2:	7e1b      	ldrb	r3, [r3, #24]
 80079f4:	4619      	mov	r1, r3
 80079f6:	4a13      	ldr	r2, [pc, #76]	; (8007a44 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80079f8:	460b      	mov	r3, r1
 80079fa:	005b      	lsls	r3, r3, #1
 80079fc:	440b      	add	r3, r1
 80079fe:	00db      	lsls	r3, r3, #3
 8007a00:	4413      	add	r3, r2
 8007a02:	336c      	adds	r3, #108	; 0x6c
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	4b0e      	ldr	r3, [pc, #56]	; (8007a40 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a08:	7e1b      	ldrb	r3, [r3, #24]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	490d      	ldr	r1, [pc, #52]	; (8007a44 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007a0e:	4603      	mov	r3, r0
 8007a10:	005b      	lsls	r3, r3, #1
 8007a12:	4403      	add	r3, r0
 8007a14:	00db      	lsls	r3, r3, #3
 8007a16:	440b      	add	r3, r1
 8007a18:	3370      	adds	r3, #112	; 0x70
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d00b      	beq.n	8007a38 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007a20:	4b07      	ldr	r3, [pc, #28]	; (8007a40 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a22:	789b      	ldrb	r3, [r3, #2]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d107      	bne.n	8007a38 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007a28:	4b05      	ldr	r3, [pc, #20]	; (8007a40 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007a2e:	f7fe fa85 	bl	8005f3c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007a32:	4b03      	ldr	r3, [pc, #12]	; (8007a40 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007a38:	4b01      	ldr	r3, [pc, #4]	; (8007a40 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a3a:	781b      	ldrb	r3, [r3, #0]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	200143b0 	.word	0x200143b0
 8007a44:	20012ef0 	.word	0x20012ef0

08007a48 <memcmp>:
 8007a48:	b510      	push	{r4, lr}
 8007a4a:	3901      	subs	r1, #1
 8007a4c:	4402      	add	r2, r0
 8007a4e:	4290      	cmp	r0, r2
 8007a50:	d101      	bne.n	8007a56 <memcmp+0xe>
 8007a52:	2000      	movs	r0, #0
 8007a54:	e005      	b.n	8007a62 <memcmp+0x1a>
 8007a56:	7803      	ldrb	r3, [r0, #0]
 8007a58:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007a5c:	42a3      	cmp	r3, r4
 8007a5e:	d001      	beq.n	8007a64 <memcmp+0x1c>
 8007a60:	1b18      	subs	r0, r3, r4
 8007a62:	bd10      	pop	{r4, pc}
 8007a64:	3001      	adds	r0, #1
 8007a66:	e7f2      	b.n	8007a4e <memcmp+0x6>

08007a68 <memset>:
 8007a68:	4402      	add	r2, r0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d100      	bne.n	8007a72 <memset+0xa>
 8007a70:	4770      	bx	lr
 8007a72:	f803 1b01 	strb.w	r1, [r3], #1
 8007a76:	e7f9      	b.n	8007a6c <memset+0x4>

08007a78 <__libc_init_array>:
 8007a78:	b570      	push	{r4, r5, r6, lr}
 8007a7a:	4d0d      	ldr	r5, [pc, #52]	; (8007ab0 <__libc_init_array+0x38>)
 8007a7c:	4c0d      	ldr	r4, [pc, #52]	; (8007ab4 <__libc_init_array+0x3c>)
 8007a7e:	1b64      	subs	r4, r4, r5
 8007a80:	10a4      	asrs	r4, r4, #2
 8007a82:	2600      	movs	r6, #0
 8007a84:	42a6      	cmp	r6, r4
 8007a86:	d109      	bne.n	8007a9c <__libc_init_array+0x24>
 8007a88:	4d0b      	ldr	r5, [pc, #44]	; (8007ab8 <__libc_init_array+0x40>)
 8007a8a:	4c0c      	ldr	r4, [pc, #48]	; (8007abc <__libc_init_array+0x44>)
 8007a8c:	f000 f826 	bl	8007adc <_init>
 8007a90:	1b64      	subs	r4, r4, r5
 8007a92:	10a4      	asrs	r4, r4, #2
 8007a94:	2600      	movs	r6, #0
 8007a96:	42a6      	cmp	r6, r4
 8007a98:	d105      	bne.n	8007aa6 <__libc_init_array+0x2e>
 8007a9a:	bd70      	pop	{r4, r5, r6, pc}
 8007a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aa0:	4798      	blx	r3
 8007aa2:	3601      	adds	r6, #1
 8007aa4:	e7ee      	b.n	8007a84 <__libc_init_array+0xc>
 8007aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aaa:	4798      	blx	r3
 8007aac:	3601      	adds	r6, #1
 8007aae:	e7f2      	b.n	8007a96 <__libc_init_array+0x1e>
 8007ab0:	08007cb4 	.word	0x08007cb4
 8007ab4:	08007cb4 	.word	0x08007cb4
 8007ab8:	08007cb4 	.word	0x08007cb4
 8007abc:	08007cb8 	.word	0x08007cb8

08007ac0 <memcpy>:
 8007ac0:	440a      	add	r2, r1
 8007ac2:	4291      	cmp	r1, r2
 8007ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ac8:	d100      	bne.n	8007acc <memcpy+0xc>
 8007aca:	4770      	bx	lr
 8007acc:	b510      	push	{r4, lr}
 8007ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ad6:	4291      	cmp	r1, r2
 8007ad8:	d1f9      	bne.n	8007ace <memcpy+0xe>
 8007ada:	bd10      	pop	{r4, pc}

08007adc <_init>:
 8007adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ade:	bf00      	nop
 8007ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ae2:	bc08      	pop	{r3}
 8007ae4:	469e      	mov	lr, r3
 8007ae6:	4770      	bx	lr

08007ae8 <_fini>:
 8007ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aea:	bf00      	nop
 8007aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aee:	bc08      	pop	{r3}
 8007af0:	469e      	mov	lr, r3
 8007af2:	4770      	bx	lr
