
000TASK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ebc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800504c  0800504c  0001504c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050f0  080050f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080050f0  080050f0  000150f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050f8  080050f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050f8  080050f8  000150f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050fc  080050fc  000150fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00012f18  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012f88  20012f88  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009340  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002068  00000000  00000000  00029423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009f0  00000000  00000000  0002b490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000763  00000000  00000000  0002be80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022112  00000000  00000000  0002c5e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000bcba  00000000  00000000  0004e6f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cad8e  00000000  00000000  0005a3af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002e50  00000000  00000000  00125140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00127f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005034 	.word	0x08005034

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005034 	.word	0x08005034

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 fb73 	bl	8000c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f845 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 f8ad 	bl	80006d8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 800057e:	f107 0308 	add.w	r3, r7, #8
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	2302      	movs	r3, #2
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	4b18      	ldr	r3, [pc, #96]	; (80005ec <main+0x80>)
 800058a:	22c8      	movs	r2, #200	; 0xc8
 800058c:	4918      	ldr	r1, [pc, #96]	; (80005f0 <main+0x84>)
 800058e:	4819      	ldr	r0, [pc, #100]	; (80005f4 <main+0x88>)
 8000590:	f002 f856 	bl	8002640 <xTaskCreate>
 8000594:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d00a      	beq.n	80005b2 <main+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800059c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a0:	f383 8811 	msr	BASEPRI, r3
 80005a4:	f3bf 8f6f 	isb	sy
 80005a8:	f3bf 8f4f 	dsb	sy
 80005ac:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ae:	bf00      	nop
 80005b0:	e7fe      	b.n	80005b0 <main+0x44>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2302      	movs	r3, #2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <main+0x8c>)
 80005bc:	22c8      	movs	r2, #200	; 0xc8
 80005be:	490f      	ldr	r1, [pc, #60]	; (80005fc <main+0x90>)
 80005c0:	480f      	ldr	r0, [pc, #60]	; (8000600 <main+0x94>)
 80005c2:	f002 f83d 	bl	8002640 <xTaskCreate>
 80005c6:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d00a      	beq.n	80005e4 <main+0x78>
        __asm volatile
 80005ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005d2:	f383 8811 	msr	BASEPRI, r3
 80005d6:	f3bf 8f6f 	isb	sy
 80005da:	f3bf 8f4f 	dsb	sy
 80005de:	60fb      	str	r3, [r7, #12]
    }
 80005e0:	bf00      	nop
 80005e2:	e7fe      	b.n	80005e2 <main+0x76>

    //start the freeRTOS scheduler
  vTaskStartScheduler();
 80005e4:	f002 f972 	bl	80028cc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <main+0x7c>
 80005ea:	bf00      	nop
 80005ec:	0800504c 	.word	0x0800504c
 80005f0:	08005064 	.word	0x08005064
 80005f4:	08000995 	.word	0x08000995
 80005f8:	0800506c 	.word	0x0800506c
 80005fc:	08005084 	.word	0x08005084
 8000600:	080009ad 	.word	0x080009ad

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fedf 	bl	80043d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a27      	ldr	r2, [pc, #156]	; (80006d0 <SystemClock_Config+0xcc>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <SystemClock_Config+0xd0>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	2302      	movs	r3, #2
 800066e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000670:	2300      	movs	r3, #0
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000674:	2308      	movs	r3, #8
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000678:	2332      	movs	r3, #50	; 0x32
 800067a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800067c:	2304      	movs	r3, #4
 800067e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000680:	2307      	movs	r3, #7
 8000682:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0320 	add.w	r3, r7, #32
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fde1 	bl	8001250 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000694:	f000 f996 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 f842 	bl	8001740 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006c2:	f000 f97f 	bl	80009c4 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	; 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08c      	sub	sp, #48	; 0x30
 80006dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
 80006f2:	4ba2      	ldr	r3, [pc, #648]	; (800097c <MX_GPIO_Init+0x2a4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4aa1      	ldr	r2, [pc, #644]	; (800097c <MX_GPIO_Init+0x2a4>)
 80006f8:	f043 0310 	orr.w	r3, r3, #16
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b9f      	ldr	r3, [pc, #636]	; (800097c <MX_GPIO_Init+0x2a4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0310 	and.w	r3, r3, #16
 8000706:	61bb      	str	r3, [r7, #24]
 8000708:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
 800070e:	4b9b      	ldr	r3, [pc, #620]	; (800097c <MX_GPIO_Init+0x2a4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a9a      	ldr	r2, [pc, #616]	; (800097c <MX_GPIO_Init+0x2a4>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b98      	ldr	r3, [pc, #608]	; (800097c <MX_GPIO_Init+0x2a4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	617b      	str	r3, [r7, #20]
 8000724:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
 800072a:	4b94      	ldr	r3, [pc, #592]	; (800097c <MX_GPIO_Init+0x2a4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a93      	ldr	r2, [pc, #588]	; (800097c <MX_GPIO_Init+0x2a4>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b91      	ldr	r3, [pc, #580]	; (800097c <MX_GPIO_Init+0x2a4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	4b8d      	ldr	r3, [pc, #564]	; (800097c <MX_GPIO_Init+0x2a4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a8c      	ldr	r2, [pc, #560]	; (800097c <MX_GPIO_Init+0x2a4>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b8a      	ldr	r3, [pc, #552]	; (800097c <MX_GPIO_Init+0x2a4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	4b86      	ldr	r3, [pc, #536]	; (800097c <MX_GPIO_Init+0x2a4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a85      	ldr	r2, [pc, #532]	; (800097c <MX_GPIO_Init+0x2a4>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b83      	ldr	r3, [pc, #524]	; (800097c <MX_GPIO_Init+0x2a4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b7f      	ldr	r3, [pc, #508]	; (800097c <MX_GPIO_Init+0x2a4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a7e      	ldr	r2, [pc, #504]	; (800097c <MX_GPIO_Init+0x2a4>)
 8000784:	f043 0308 	orr.w	r3, r3, #8
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b7c      	ldr	r3, [pc, #496]	; (800097c <MX_GPIO_Init+0x2a4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0308 	and.w	r3, r3, #8
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2108      	movs	r1, #8
 800079a:	4879      	ldr	r0, [pc, #484]	; (8000980 <MX_GPIO_Init+0x2a8>)
 800079c:	f000 fd3e 	bl	800121c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2101      	movs	r1, #1
 80007a4:	4877      	ldr	r0, [pc, #476]	; (8000984 <MX_GPIO_Init+0x2ac>)
 80007a6:	f000 fd39 	bl	800121c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007aa:	2200      	movs	r2, #0
 80007ac:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007b0:	4875      	ldr	r0, [pc, #468]	; (8000988 <MX_GPIO_Init+0x2b0>)
 80007b2:	f000 fd33 	bl	800121c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007b6:	2308      	movs	r3, #8
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	486c      	ldr	r0, [pc, #432]	; (8000980 <MX_GPIO_Init+0x2a8>)
 80007ce:	f000 fb89 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	4619      	mov	r1, r3
 80007e8:	4866      	ldr	r0, [pc, #408]	; (8000984 <MX_GPIO_Init+0x2ac>)
 80007ea:	f000 fb7b 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007ee:	2308      	movs	r3, #8
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f2:	2302      	movs	r3, #2
 80007f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007fe:	2305      	movs	r3, #5
 8000800:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	485e      	ldr	r0, [pc, #376]	; (8000984 <MX_GPIO_Init+0x2ac>)
 800080a:	f000 fb6b 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800080e:	2301      	movs	r3, #1
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000812:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	485a      	ldr	r0, [pc, #360]	; (800098c <MX_GPIO_Init+0x2b4>)
 8000824:	f000 fb5e 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000828:	2310      	movs	r3, #16
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000838:	2306      	movs	r3, #6
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	4852      	ldr	r0, [pc, #328]	; (800098c <MX_GPIO_Init+0x2b4>)
 8000844:	f000 fb4e 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000848:	23e0      	movs	r3, #224	; 0xe0
 800084a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000858:	2305      	movs	r3, #5
 800085a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	484a      	ldr	r0, [pc, #296]	; (800098c <MX_GPIO_Init+0x2b4>)
 8000864:	f000 fb3e 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000868:	2304      	movs	r3, #4
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	4845      	ldr	r0, [pc, #276]	; (8000990 <MX_GPIO_Init+0x2b8>)
 800087c:	f000 fb32 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000892:	2305      	movs	r3, #5
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	483c      	ldr	r0, [pc, #240]	; (8000990 <MX_GPIO_Init+0x2b8>)
 800089e:	f000 fb21 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008a2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008a6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4833      	ldr	r0, [pc, #204]	; (8000988 <MX_GPIO_Init+0x2b0>)
 80008bc:	f000 fb12 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008c0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d2:	2306      	movs	r3, #6
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4829      	ldr	r0, [pc, #164]	; (8000984 <MX_GPIO_Init+0x2ac>)
 80008de:	f000 fb01 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4825      	ldr	r0, [pc, #148]	; (800098c <MX_GPIO_Init+0x2b4>)
 80008f8:	f000 faf4 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80008fc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800090e:	230a      	movs	r3, #10
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	481c      	ldr	r0, [pc, #112]	; (800098c <MX_GPIO_Init+0x2b4>)
 800091a:	f000 fae3 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800091e:	2320      	movs	r3, #32
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4815      	ldr	r0, [pc, #84]	; (8000988 <MX_GPIO_Init+0x2b0>)
 8000932:	f000 fad7 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000936:	f44f 7310 	mov.w	r3, #576	; 0x240
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093c:	2312      	movs	r3, #18
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000948:	2304      	movs	r3, #4
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	480f      	ldr	r0, [pc, #60]	; (8000990 <MX_GPIO_Init+0x2b8>)
 8000954:	f000 fac6 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000958:	2302      	movs	r3, #2
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800095c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_GPIO_Init+0x2a8>)
 800096e:	f000 fab9 	bl	8000ee4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000972:	bf00      	nop
 8000974:	3730      	adds	r7, #48	; 0x30
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800
 8000980:	40021000 	.word	0x40021000
 8000984:	40020800 	.word	0x40020800
 8000988:	40020c00 	.word	0x40020c00
 800098c:	40020000 	.word	0x40020000
 8000990:	40020400 	.word	0x40020400

08000994 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		printf("%s \n",(char*)parameters);
 800099c:	6879      	ldr	r1, [r7, #4]
 800099e:	4802      	ldr	r0, [pc, #8]	; (80009a8 <task1_handler+0x14>)
 80009a0:	f003 fcc4 	bl	800432c <iprintf>
 80009a4:	e7fa      	b.n	800099c <task1_handler+0x8>
 80009a6:	bf00      	nop
 80009a8:	0800508c 	.word	0x0800508c

080009ac <task2_handler>:

}


static void task2_handler(void* parameters)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

	while(1)
	{
		printf("%s \n",(char*)parameters);
 80009b4:	6879      	ldr	r1, [r7, #4]
 80009b6:	4802      	ldr	r0, [pc, #8]	; (80009c0 <task2_handler+0x14>)
 80009b8:	f003 fcb8 	bl	800432c <iprintf>
 80009bc:	e7fa      	b.n	80009b4 <task2_handler+0x8>
 80009be:	bf00      	nop
 80009c0:	0800508c 	.word	0x0800508c

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	e7fe      	b.n	80009cc <Error_Handler+0x8>
	...

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <HAL_MspInit+0x4c>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e4:	6453      	str	r3, [r2, #68]	; 0x44
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <HAL_MspInit+0x4c>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <HAL_MspInit+0x4c>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a00:	6413      	str	r3, [r2, #64]	; 0x40
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_MspInit+0x4c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a0e:	2007      	movs	r0, #7
 8000a10:	f000 fa34 	bl	8000e7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a24:	e7fe      	b.n	8000a24 <NMI_Handler+0x4>

08000a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <MemManage_Handler+0x4>

08000a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <ITM_SendChar+0x48>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <ITM_SendChar+0x48>)
 8000a5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a60:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000a62:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <ITM_SendChar+0x4c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a0c      	ldr	r2, [pc, #48]	; (8000a98 <ITM_SendChar+0x4c>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000a6e:	bf00      	nop
 8000a70:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d0f8      	beq.n	8000a70 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000a7e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	6013      	str	r3, [r2, #0]
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000edfc 	.word	0xe000edfc
 8000a98:	e0000e00 	.word	0xe0000e00

08000a9c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	e00a      	b.n	8000ac4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aae:	f3af 8000 	nop.w
 8000ab2:	4601      	mov	r1, r0
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	60ba      	str	r2, [r7, #8]
 8000aba:	b2ca      	uxtb	r2, r1
 8000abc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697a      	ldr	r2, [r7, #20]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	dbf0      	blt.n	8000aae <_read+0x12>
  }

  return len;
 8000acc:	687b      	ldr	r3, [r7, #4]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b086      	sub	sp, #24
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	60f8      	str	r0, [r7, #12]
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	e009      	b.n	8000afc <_write+0x26>
  {
//    __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	60ba      	str	r2, [r7, #8]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ffab 	bl	8000a4c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	3301      	adds	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697a      	ldr	r2, [r7, #20]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	dbf1      	blt.n	8000ae8 <_write+0x12>
  }
  return len;
 8000b04:	687b      	ldr	r3, [r7, #4]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <_close>:

int _close(int file)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b36:	605a      	str	r2, [r3, #4]
  return 0;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <_isatty>:

int _isatty(int file)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b4e:	2301      	movs	r3, #1
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b80:	4a14      	ldr	r2, [pc, #80]	; (8000bd4 <_sbrk+0x5c>)
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <_sbrk+0x60>)
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <_sbrk+0x64>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <_sbrk+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d207      	bcs.n	8000bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba8:	f003 fc64 	bl	8004474 <__errno>
 8000bac:	4603      	mov	r3, r0
 8000bae:	220c      	movs	r2, #12
 8000bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	e009      	b.n	8000bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <_sbrk+0x64>)
 8000bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20020000 	.word	0x20020000
 8000bd8:	00000400 	.word	0x00000400
 8000bdc:	2000008c 	.word	0x2000008c
 8000be0:	20012f88 	.word	0x20012f88

08000be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <SystemInit+0x20>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <SystemInit+0x20>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c0c:	f7ff ffea 	bl	8000be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c12:	490d      	ldr	r1, [pc, #52]	; (8000c48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c14:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c28:	4c0a      	ldr	r4, [pc, #40]	; (8000c54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c36:	f003 fc23 	bl	8004480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c3a:	f7ff fc97 	bl	800056c <main>
  bx  lr    
 8000c3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c4c:	08005100 	.word	0x08005100
  ldr r2, =_sbss
 8000c50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c54:	20012f88 	.word	0x20012f88

08000c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC_IRQHandler>
	...

08000c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <HAL_Init+0x40>)
 8000c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <HAL_Init+0x40>)
 8000c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <HAL_Init+0x40>)
 8000c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 f8f9 	bl	8000e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f000 f808 	bl	8000ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c90:	f7ff fe9e 	bl	80009d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023c00 	.word	0x40023c00

08000ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_InitTick+0x54>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_InitTick+0x58>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f903 	bl	8000eca <HAL_SYSTICK_Config>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00e      	b.n	8000cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d80a      	bhi.n	8000cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f000 f8d9 	bl	8000e92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce0:	4a06      	ldr	r2, [pc, #24]	; (8000cfc <HAL_InitTick+0x5c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e000      	b.n	8000cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000004 	.word	0x20000004

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <HAL_GetTick+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000090 	.word	0x20000090

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db0a      	blt.n	8000da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	490c      	ldr	r1, [pc, #48]	; (8000dc8 <__NVIC_SetPriority+0x4c>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	0112      	lsls	r2, r2, #4
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	440b      	add	r3, r1
 8000da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da4:	e00a      	b.n	8000dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4908      	ldr	r1, [pc, #32]	; (8000dcc <__NVIC_SetPriority+0x50>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	3b04      	subs	r3, #4
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	440b      	add	r3, r1
 8000dba:	761a      	strb	r2, [r3, #24]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	; 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f1c3 0307 	rsb	r3, r3, #7
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	bf28      	it	cs
 8000dee:	2304      	movcs	r3, #4
 8000df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3304      	adds	r3, #4
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	d902      	bls.n	8000e00 <NVIC_EncodePriority+0x30>
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3b03      	subs	r3, #3
 8000dfe:	e000      	b.n	8000e02 <NVIC_EncodePriority+0x32>
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	4313      	orrs	r3, r2
         );
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	; 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e48:	d301      	bcc.n	8000e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00f      	b.n	8000e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <SysTick_Config+0x40>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e56:	210f      	movs	r1, #15
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f7ff ff8e 	bl	8000d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <SysTick_Config+0x40>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <SysTick_Config+0x40>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff47 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea4:	f7ff ff5c 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000ea8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff ff8e 	bl	8000dd0 <NVIC_EncodePriority>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff5d 	bl	8000d7c <__NVIC_SetPriority>
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ffb0 	bl	8000e38 <SysTick_Config>
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	e16b      	b.n	80011d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f00:	2201      	movs	r2, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	f040 815a 	bne.w	80011d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d005      	beq.n	8000f36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d130      	bne.n	8000f98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	091b      	lsrs	r3, r3, #4
 8000f82:	f003 0201 	and.w	r2, r3, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d017      	beq.n	8000fd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d123      	bne.n	8001028 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	08da      	lsrs	r2, r3, #3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3208      	adds	r2, #8
 8000fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	220f      	movs	r2, #15
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	691a      	ldr	r2, [r3, #16]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	08da      	lsrs	r2, r3, #3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3208      	adds	r2, #8
 8001022:	69b9      	ldr	r1, [r7, #24]
 8001024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0203 	and.w	r2, r3, #3
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 80b4 	beq.w	80011d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b60      	ldr	r3, [pc, #384]	; (80011f0 <HAL_GPIO_Init+0x30c>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a5f      	ldr	r2, [pc, #380]	; (80011f0 <HAL_GPIO_Init+0x30c>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b5d      	ldr	r3, [pc, #372]	; (80011f0 <HAL_GPIO_Init+0x30c>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001086:	4a5b      	ldr	r2, [pc, #364]	; (80011f4 <HAL_GPIO_Init+0x310>)
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	3302      	adds	r3, #2
 800108e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a52      	ldr	r2, [pc, #328]	; (80011f8 <HAL_GPIO_Init+0x314>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d02b      	beq.n	800110a <HAL_GPIO_Init+0x226>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a51      	ldr	r2, [pc, #324]	; (80011fc <HAL_GPIO_Init+0x318>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d025      	beq.n	8001106 <HAL_GPIO_Init+0x222>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a50      	ldr	r2, [pc, #320]	; (8001200 <HAL_GPIO_Init+0x31c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d01f      	beq.n	8001102 <HAL_GPIO_Init+0x21e>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4f      	ldr	r2, [pc, #316]	; (8001204 <HAL_GPIO_Init+0x320>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d019      	beq.n	80010fe <HAL_GPIO_Init+0x21a>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4e      	ldr	r2, [pc, #312]	; (8001208 <HAL_GPIO_Init+0x324>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d013      	beq.n	80010fa <HAL_GPIO_Init+0x216>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4d      	ldr	r2, [pc, #308]	; (800120c <HAL_GPIO_Init+0x328>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d00d      	beq.n	80010f6 <HAL_GPIO_Init+0x212>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4c      	ldr	r2, [pc, #304]	; (8001210 <HAL_GPIO_Init+0x32c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d007      	beq.n	80010f2 <HAL_GPIO_Init+0x20e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4b      	ldr	r2, [pc, #300]	; (8001214 <HAL_GPIO_Init+0x330>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d101      	bne.n	80010ee <HAL_GPIO_Init+0x20a>
 80010ea:	2307      	movs	r3, #7
 80010ec:	e00e      	b.n	800110c <HAL_GPIO_Init+0x228>
 80010ee:	2308      	movs	r3, #8
 80010f0:	e00c      	b.n	800110c <HAL_GPIO_Init+0x228>
 80010f2:	2306      	movs	r3, #6
 80010f4:	e00a      	b.n	800110c <HAL_GPIO_Init+0x228>
 80010f6:	2305      	movs	r3, #5
 80010f8:	e008      	b.n	800110c <HAL_GPIO_Init+0x228>
 80010fa:	2304      	movs	r3, #4
 80010fc:	e006      	b.n	800110c <HAL_GPIO_Init+0x228>
 80010fe:	2303      	movs	r3, #3
 8001100:	e004      	b.n	800110c <HAL_GPIO_Init+0x228>
 8001102:	2302      	movs	r3, #2
 8001104:	e002      	b.n	800110c <HAL_GPIO_Init+0x228>
 8001106:	2301      	movs	r3, #1
 8001108:	e000      	b.n	800110c <HAL_GPIO_Init+0x228>
 800110a:	2300      	movs	r3, #0
 800110c:	69fa      	ldr	r2, [r7, #28]
 800110e:	f002 0203 	and.w	r2, r2, #3
 8001112:	0092      	lsls	r2, r2, #2
 8001114:	4093      	lsls	r3, r2
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800111c:	4935      	ldr	r1, [pc, #212]	; (80011f4 <HAL_GPIO_Init+0x310>)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	3302      	adds	r3, #2
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800112a:	4b3b      	ldr	r3, [pc, #236]	; (8001218 <HAL_GPIO_Init+0x334>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800114e:	4a32      	ldr	r2, [pc, #200]	; (8001218 <HAL_GPIO_Init+0x334>)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001154:	4b30      	ldr	r3, [pc, #192]	; (8001218 <HAL_GPIO_Init+0x334>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001178:	4a27      	ldr	r2, [pc, #156]	; (8001218 <HAL_GPIO_Init+0x334>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800117e:	4b26      	ldr	r3, [pc, #152]	; (8001218 <HAL_GPIO_Init+0x334>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a2:	4a1d      	ldr	r2, [pc, #116]	; (8001218 <HAL_GPIO_Init+0x334>)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <HAL_GPIO_Init+0x334>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011cc:	4a12      	ldr	r2, [pc, #72]	; (8001218 <HAL_GPIO_Init+0x334>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3301      	adds	r3, #1
 80011d6:	61fb      	str	r3, [r7, #28]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	2b0f      	cmp	r3, #15
 80011dc:	f67f ae90 	bls.w	8000f00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40013800 	.word	0x40013800
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40020400 	.word	0x40020400
 8001200:	40020800 	.word	0x40020800
 8001204:	40020c00 	.word	0x40020c00
 8001208:	40021000 	.word	0x40021000
 800120c:	40021400 	.word	0x40021400
 8001210:	40021800 	.word	0x40021800
 8001214:	40021c00 	.word	0x40021c00
 8001218:	40013c00 	.word	0x40013c00

0800121c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]
 8001228:	4613      	mov	r3, r2
 800122a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800122c:	787b      	ldrb	r3, [r7, #1]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001232:	887a      	ldrh	r2, [r7, #2]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001238:	e003      	b.n	8001242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800123a:	887b      	ldrh	r3, [r7, #2]
 800123c:	041a      	lsls	r2, r3, #16
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	619a      	str	r2, [r3, #24]
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e267      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d075      	beq.n	800135a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126e:	4b88      	ldr	r3, [pc, #544]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b04      	cmp	r3, #4
 8001278:	d00c      	beq.n	8001294 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127a:	4b85      	ldr	r3, [pc, #532]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001282:	2b08      	cmp	r3, #8
 8001284:	d112      	bne.n	80012ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001286:	4b82      	ldr	r3, [pc, #520]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001292:	d10b      	bne.n	80012ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001294:	4b7e      	ldr	r3, [pc, #504]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d05b      	beq.n	8001358 <HAL_RCC_OscConfig+0x108>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d157      	bne.n	8001358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e242      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b4:	d106      	bne.n	80012c4 <HAL_RCC_OscConfig+0x74>
 80012b6:	4b76      	ldr	r3, [pc, #472]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a75      	ldr	r2, [pc, #468]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	e01d      	b.n	8001300 <HAL_RCC_OscConfig+0xb0>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012cc:	d10c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x98>
 80012ce:	4b70      	ldr	r3, [pc, #448]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a6f      	ldr	r2, [pc, #444]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4b6d      	ldr	r3, [pc, #436]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a6c      	ldr	r2, [pc, #432]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e00b      	b.n	8001300 <HAL_RCC_OscConfig+0xb0>
 80012e8:	4b69      	ldr	r3, [pc, #420]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a68      	ldr	r2, [pc, #416]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b66      	ldr	r3, [pc, #408]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a65      	ldr	r2, [pc, #404]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d013      	beq.n	8001330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fcfa 	bl	8000d00 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff fcf6 	bl	8000d00 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b64      	cmp	r3, #100	; 0x64
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e207      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001322:	4b5b      	ldr	r3, [pc, #364]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0xc0>
 800132e:	e014      	b.n	800135a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001330:	f7ff fce6 	bl	8000d00 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001338:	f7ff fce2 	bl	8000d00 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b64      	cmp	r3, #100	; 0x64
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e1f3      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134a:	4b51      	ldr	r3, [pc, #324]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f0      	bne.n	8001338 <HAL_RCC_OscConfig+0xe8>
 8001356:	e000      	b.n	800135a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d063      	beq.n	800142e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001366:	4b4a      	ldr	r3, [pc, #296]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00b      	beq.n	800138a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001372:	4b47      	ldr	r3, [pc, #284]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800137a:	2b08      	cmp	r3, #8
 800137c:	d11c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800137e:	4b44      	ldr	r3, [pc, #272]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d116      	bne.n	80013b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138a:	4b41      	ldr	r3, [pc, #260]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d005      	beq.n	80013a2 <HAL_RCC_OscConfig+0x152>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d001      	beq.n	80013a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e1c7      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a2:	4b3b      	ldr	r3, [pc, #236]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	4937      	ldr	r1, [pc, #220]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b6:	e03a      	b.n	800142e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d020      	beq.n	8001402 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c0:	4b34      	ldr	r3, [pc, #208]	; (8001494 <HAL_RCC_OscConfig+0x244>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c6:	f7ff fc9b 	bl	8000d00 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ce:	f7ff fc97 	bl	8000d00 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e1a8      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e0:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ec:	4b28      	ldr	r3, [pc, #160]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	4925      	ldr	r1, [pc, #148]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	600b      	str	r3, [r1, #0]
 8001400:	e015      	b.n	800142e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001402:	4b24      	ldr	r3, [pc, #144]	; (8001494 <HAL_RCC_OscConfig+0x244>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff fc7a 	bl	8000d00 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001410:	f7ff fc76 	bl	8000d00 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e187      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001422:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d036      	beq.n	80014a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d016      	beq.n	8001470 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_RCC_OscConfig+0x248>)
 8001444:	2201      	movs	r2, #1
 8001446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001448:	f7ff fc5a 	bl	8000d00 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001450:	f7ff fc56 	bl	8000d00 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e167      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0x200>
 800146e:	e01b      	b.n	80014a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_RCC_OscConfig+0x248>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001476:	f7ff fc43 	bl	8000d00 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147c:	e00e      	b.n	800149c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147e:	f7ff fc3f 	bl	8000d00 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d907      	bls.n	800149c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e150      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
 8001490:	40023800 	.word	0x40023800
 8001494:	42470000 	.word	0x42470000
 8001498:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800149c:	4b88      	ldr	r3, [pc, #544]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800149e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1ea      	bne.n	800147e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 8097 	beq.w	80015e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b6:	2300      	movs	r3, #0
 80014b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ba:	4b81      	ldr	r3, [pc, #516]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10f      	bne.n	80014e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b7d      	ldr	r3, [pc, #500]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a7c      	ldr	r2, [pc, #496]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b7a      	ldr	r3, [pc, #488]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014e2:	2301      	movs	r3, #1
 80014e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e6:	4b77      	ldr	r3, [pc, #476]	; (80016c4 <HAL_RCC_OscConfig+0x474>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d118      	bne.n	8001524 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f2:	4b74      	ldr	r3, [pc, #464]	; (80016c4 <HAL_RCC_OscConfig+0x474>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a73      	ldr	r2, [pc, #460]	; (80016c4 <HAL_RCC_OscConfig+0x474>)
 80014f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fbff 	bl	8000d00 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001506:	f7ff fbfb 	bl	8000d00 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e10c      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001518:	4b6a      	ldr	r3, [pc, #424]	; (80016c4 <HAL_RCC_OscConfig+0x474>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d106      	bne.n	800153a <HAL_RCC_OscConfig+0x2ea>
 800152c:	4b64      	ldr	r3, [pc, #400]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800152e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001530:	4a63      	ldr	r2, [pc, #396]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6713      	str	r3, [r2, #112]	; 0x70
 8001538:	e01c      	b.n	8001574 <HAL_RCC_OscConfig+0x324>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b05      	cmp	r3, #5
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0x30c>
 8001542:	4b5f      	ldr	r3, [pc, #380]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001546:	4a5e      	ldr	r2, [pc, #376]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	6713      	str	r3, [r2, #112]	; 0x70
 800154e:	4b5c      	ldr	r3, [pc, #368]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001552:	4a5b      	ldr	r2, [pc, #364]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6713      	str	r3, [r2, #112]	; 0x70
 800155a:	e00b      	b.n	8001574 <HAL_RCC_OscConfig+0x324>
 800155c:	4b58      	ldr	r3, [pc, #352]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800155e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001560:	4a57      	ldr	r2, [pc, #348]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001562:	f023 0301 	bic.w	r3, r3, #1
 8001566:	6713      	str	r3, [r2, #112]	; 0x70
 8001568:	4b55      	ldr	r3, [pc, #340]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800156a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156c:	4a54      	ldr	r2, [pc, #336]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800156e:	f023 0304 	bic.w	r3, r3, #4
 8001572:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d015      	beq.n	80015a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157c:	f7ff fbc0 	bl	8000d00 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001582:	e00a      	b.n	800159a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001584:	f7ff fbbc 	bl	8000d00 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e0cb      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159a:	4b49      	ldr	r3, [pc, #292]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0ee      	beq.n	8001584 <HAL_RCC_OscConfig+0x334>
 80015a6:	e014      	b.n	80015d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a8:	f7ff fbaa 	bl	8000d00 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ae:	e00a      	b.n	80015c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b0:	f7ff fba6 	bl	8000d00 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80015be:	4293      	cmp	r3, r2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e0b5      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c6:	4b3e      	ldr	r3, [pc, #248]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80015c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1ee      	bne.n	80015b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015d2:	7dfb      	ldrb	r3, [r7, #23]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d105      	bne.n	80015e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d8:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	4a38      	ldr	r2, [pc, #224]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80015de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 80a1 	beq.w	8001730 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ee:	4b34      	ldr	r3, [pc, #208]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d05c      	beq.n	80016b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d141      	bne.n	8001686 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001602:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <HAL_RCC_OscConfig+0x478>)
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001608:	f7ff fb7a 	bl	8000d00 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001610:	f7ff fb76 	bl	8000d00 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e087      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001622:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69da      	ldr	r2, [r3, #28]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	019b      	lsls	r3, r3, #6
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001644:	085b      	lsrs	r3, r3, #1
 8001646:	3b01      	subs	r3, #1
 8001648:	041b      	lsls	r3, r3, #16
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	061b      	lsls	r3, r3, #24
 8001652:	491b      	ldr	r1, [pc, #108]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <HAL_RCC_OscConfig+0x478>)
 800165a:	2201      	movs	r2, #1
 800165c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165e:	f7ff fb4f 	bl	8000d00 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001666:	f7ff fb4b 	bl	8000d00 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e05c      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x416>
 8001684:	e054      	b.n	8001730 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <HAL_RCC_OscConfig+0x478>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fb38 	bl	8000d00 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001694:	f7ff fb34 	bl	8000d00 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e045      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x444>
 80016b2:	e03d      	b.n	8001730 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d107      	bne.n	80016cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e038      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40007000 	.word	0x40007000
 80016c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <HAL_RCC_OscConfig+0x4ec>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d028      	beq.n	800172c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d121      	bne.n	800172c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d11a      	bne.n	800172c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016fc:	4013      	ands	r3, r2
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001702:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001704:	4293      	cmp	r3, r2
 8001706:	d111      	bne.n	800172c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	085b      	lsrs	r3, r3, #1
 8001714:	3b01      	subs	r3, #1
 8001716:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001718:	429a      	cmp	r2, r3
 800171a:	d107      	bne.n	800172c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e000      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800

08001740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0cc      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001754:	4b68      	ldr	r3, [pc, #416]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d90c      	bls.n	800177c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001762:	4b65      	ldr	r3, [pc, #404]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176a:	4b63      	ldr	r3, [pc, #396]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0b8      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d020      	beq.n	80017ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001794:	4b59      	ldr	r3, [pc, #356]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a58      	ldr	r2, [pc, #352]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800179e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017ac:	4b53      	ldr	r3, [pc, #332]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	4a52      	ldr	r2, [pc, #328]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b8:	4b50      	ldr	r3, [pc, #320]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	494d      	ldr	r1, [pc, #308]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d044      	beq.n	8001860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	4b47      	ldr	r3, [pc, #284]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d119      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e07f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d003      	beq.n	80017fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fe:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d109      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e06f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180e:	4b3b      	ldr	r3, [pc, #236]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e067      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181e:	4b37      	ldr	r3, [pc, #220]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f023 0203 	bic.w	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4934      	ldr	r1, [pc, #208]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	4313      	orrs	r3, r2
 800182e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001830:	f7ff fa66 	bl	8000d00 <HAL_GetTick>
 8001834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	e00a      	b.n	800184e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001838:	f7ff fa62 	bl	8000d00 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	f241 3288 	movw	r2, #5000	; 0x1388
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e04f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184e:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 020c 	and.w	r2, r3, #12
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	429a      	cmp	r2, r3
 800185e:	d1eb      	bne.n	8001838 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001860:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d20c      	bcs.n	8001888 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186e:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001876:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e032      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d008      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4916      	ldr	r1, [pc, #88]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d009      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	490e      	ldr	r1, [pc, #56]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018c6:	f000 f821 	bl	800190c <HAL_RCC_GetSysClockFreq>
 80018ca:	4602      	mov	r2, r0
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	490a      	ldr	r1, [pc, #40]	; (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 80018d8:	5ccb      	ldrb	r3, [r1, r3]
 80018da:	fa22 f303 	lsr.w	r3, r2, r3
 80018de:	4a09      	ldr	r2, [pc, #36]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80018e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_RCC_ClockConfig+0x1c8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff f9da 	bl	8000ca0 <HAL_InitTick>

  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023c00 	.word	0x40023c00
 80018fc:	40023800 	.word	0x40023800
 8001900:	080050ac 	.word	0x080050ac
 8001904:	20000000 	.word	0x20000000
 8001908:	20000004 	.word	0x20000004

0800190c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800190c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001910:	b094      	sub	sp, #80	; 0x50
 8001912:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	647b      	str	r3, [r7, #68]	; 0x44
 8001918:	2300      	movs	r3, #0
 800191a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800191c:	2300      	movs	r3, #0
 800191e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001924:	4b79      	ldr	r3, [pc, #484]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	2b08      	cmp	r3, #8
 800192e:	d00d      	beq.n	800194c <HAL_RCC_GetSysClockFreq+0x40>
 8001930:	2b08      	cmp	r3, #8
 8001932:	f200 80e1 	bhi.w	8001af8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0x34>
 800193a:	2b04      	cmp	r3, #4
 800193c:	d003      	beq.n	8001946 <HAL_RCC_GetSysClockFreq+0x3a>
 800193e:	e0db      	b.n	8001af8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001940:	4b73      	ldr	r3, [pc, #460]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x204>)
 8001942:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001944:	e0db      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001946:	4b73      	ldr	r3, [pc, #460]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x208>)
 8001948:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800194a:	e0d8      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800194c:	4b6f      	ldr	r3, [pc, #444]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001954:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001956:	4b6d      	ldr	r3, [pc, #436]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d063      	beq.n	8001a2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001962:	4b6a      	ldr	r3, [pc, #424]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	099b      	lsrs	r3, r3, #6
 8001968:	2200      	movs	r2, #0
 800196a:	63bb      	str	r3, [r7, #56]	; 0x38
 800196c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800196e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
 8001976:	2300      	movs	r3, #0
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
 800197a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800197e:	4622      	mov	r2, r4
 8001980:	462b      	mov	r3, r5
 8001982:	f04f 0000 	mov.w	r0, #0
 8001986:	f04f 0100 	mov.w	r1, #0
 800198a:	0159      	lsls	r1, r3, #5
 800198c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001990:	0150      	lsls	r0, r2, #5
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4621      	mov	r1, r4
 8001998:	1a51      	subs	r1, r2, r1
 800199a:	6139      	str	r1, [r7, #16]
 800199c:	4629      	mov	r1, r5
 800199e:	eb63 0301 	sbc.w	r3, r3, r1
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019b0:	4659      	mov	r1, fp
 80019b2:	018b      	lsls	r3, r1, #6
 80019b4:	4651      	mov	r1, sl
 80019b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ba:	4651      	mov	r1, sl
 80019bc:	018a      	lsls	r2, r1, #6
 80019be:	4651      	mov	r1, sl
 80019c0:	ebb2 0801 	subs.w	r8, r2, r1
 80019c4:	4659      	mov	r1, fp
 80019c6:	eb63 0901 	sbc.w	r9, r3, r1
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019de:	4690      	mov	r8, r2
 80019e0:	4699      	mov	r9, r3
 80019e2:	4623      	mov	r3, r4
 80019e4:	eb18 0303 	adds.w	r3, r8, r3
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	462b      	mov	r3, r5
 80019ec:	eb49 0303 	adc.w	r3, r9, r3
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019fe:	4629      	mov	r1, r5
 8001a00:	024b      	lsls	r3, r1, #9
 8001a02:	4621      	mov	r1, r4
 8001a04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a08:	4621      	mov	r1, r4
 8001a0a:	024a      	lsls	r2, r1, #9
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a12:	2200      	movs	r2, #0
 8001a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a1c:	f7fe fc28 	bl	8000270 <__aeabi_uldivmod>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4613      	mov	r3, r2
 8001a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a28:	e058      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2a:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	099b      	lsrs	r3, r3, #6
 8001a30:	2200      	movs	r2, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	4611      	mov	r1, r2
 8001a36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a3a:	623b      	str	r3, [r7, #32]
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a44:	4642      	mov	r2, r8
 8001a46:	464b      	mov	r3, r9
 8001a48:	f04f 0000 	mov.w	r0, #0
 8001a4c:	f04f 0100 	mov.w	r1, #0
 8001a50:	0159      	lsls	r1, r3, #5
 8001a52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a56:	0150      	lsls	r0, r2, #5
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4641      	mov	r1, r8
 8001a5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a62:	4649      	mov	r1, r9
 8001a64:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a7c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a80:	eb63 050b 	sbc.w	r5, r3, fp
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	00eb      	lsls	r3, r5, #3
 8001a8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a92:	00e2      	lsls	r2, r4, #3
 8001a94:	4614      	mov	r4, r2
 8001a96:	461d      	mov	r5, r3
 8001a98:	4643      	mov	r3, r8
 8001a9a:	18e3      	adds	r3, r4, r3
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	464b      	mov	r3, r9
 8001aa0:	eb45 0303 	adc.w	r3, r5, r3
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ab2:	4629      	mov	r1, r5
 8001ab4:	028b      	lsls	r3, r1, #10
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001abc:	4621      	mov	r1, r4
 8001abe:	028a      	lsls	r2, r1, #10
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
 8001aca:	61fa      	str	r2, [r7, #28]
 8001acc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ad0:	f7fe fbce 	bl	8000270 <__aeabi_uldivmod>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4613      	mov	r3, r2
 8001ada:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	0c1b      	lsrs	r3, r3, #16
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001aec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001af6:	e002      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x204>)
 8001afa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001afc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3750      	adds	r7, #80	; 0x50
 8001b04:	46bd      	mov	sp, r7
 8001b06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	00f42400 	.word	0x00f42400
 8001b14:	007a1200 	.word	0x007a1200

08001b18 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f103 0208 	add.w	r2, r3, #8
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b30:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f103 0208 	add.w	r2, r3, #8
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f103 0208 	add.w	r2, r3, #8
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001b72:	b480      	push	{r7}
 8001b74:	b085      	sub	sp, #20
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	601a      	str	r2, [r3, #0]
}
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b085      	sub	sp, #20
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd0:	d103      	bne.n	8001bda <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	e00c      	b.n	8001bf4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3308      	adds	r3, #8
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	e002      	b.n	8001be8 <vListInsert+0x2e>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d2f6      	bcs.n	8001be2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	601a      	str	r2, [r3, #0]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6892      	ldr	r2, [r2, #8]
 8001c42:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6852      	ldr	r2, [r2, #4]
 8001c4c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d103      	bne.n	8001c60 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	1e5a      	subs	r2, r3, #1
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10a      	bne.n	8001caa <xQueueGenericReset+0x2a>
        __asm volatile
 8001c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c98:	f383 8811 	msr	BASEPRI, r3
 8001c9c:	f3bf 8f6f 	isb	sy
 8001ca0:	f3bf 8f4f 	dsb	sy
 8001ca4:	60bb      	str	r3, [r7, #8]
    }
 8001ca6:	bf00      	nop
 8001ca8:	e7fe      	b.n	8001ca8 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8001caa:	f001 ff5d 	bl	8003b68 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb6:	68f9      	ldr	r1, [r7, #12]
 8001cb8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001cba:	fb01 f303 	mul.w	r3, r1, r3
 8001cbe:	441a      	add	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	68f9      	ldr	r1, [r7, #12]
 8001cde:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ce0:	fb01 f303 	mul.w	r3, r1, r3
 8001ce4:	441a      	add	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	22ff      	movs	r2, #255	; 0xff
 8001cee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	22ff      	movs	r2, #255	; 0xff
 8001cf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d114      	bne.n	8001d2a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d01a      	beq.n	8001d3e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	3310      	adds	r3, #16
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f001 f84d 	bl	8002dac <xTaskRemoveFromEventList>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d012      	beq.n	8001d3e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <xQueueGenericReset+0xcc>)
 8001d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	f3bf 8f4f 	dsb	sy
 8001d24:	f3bf 8f6f 	isb	sy
 8001d28:	e009      	b.n	8001d3e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	3310      	adds	r3, #16
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fef2 	bl	8001b18 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3324      	adds	r3, #36	; 0x24
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff feed 	bl	8001b18 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001d3e:	f001 ff43 	bl	8003bc8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001d42:	2301      	movs	r3, #1
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	e000ed04 	.word	0xe000ed04

08001d50 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08c      	sub	sp, #48	; 0x30
 8001d54:	af02      	add	r7, sp, #8
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10a      	bne.n	8001d7a <xQueueGenericCreate+0x2a>
        __asm volatile
 8001d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d68:	f383 8811 	msr	BASEPRI, r3
 8001d6c:	f3bf 8f6f 	isb	sy
 8001d70:	f3bf 8f4f 	dsb	sy
 8001d74:	61bb      	str	r3, [r7, #24]
    }
 8001d76:	bf00      	nop
 8001d78:	e7fe      	b.n	8001d78 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	68ba      	ldr	r2, [r7, #8]
 8001d7e:	fb02 f303 	mul.w	r3, r2, r3
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d006      	beq.n	8001d98 <xQueueGenericCreate+0x48>
 8001d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d101      	bne.n	8001d9c <xQueueGenericCreate+0x4c>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <xQueueGenericCreate+0x4e>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10a      	bne.n	8001db8 <xQueueGenericCreate+0x68>
        __asm volatile
 8001da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da6:	f383 8811 	msr	BASEPRI, r3
 8001daa:	f3bf 8f6f 	isb	sy
 8001dae:	f3bf 8f4f 	dsb	sy
 8001db2:	617b      	str	r3, [r7, #20]
    }
 8001db4:	bf00      	nop
 8001db6:	e7fe      	b.n	8001db6 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001dbe:	d90a      	bls.n	8001dd6 <xQueueGenericCreate+0x86>
        __asm volatile
 8001dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc4:	f383 8811 	msr	BASEPRI, r3
 8001dc8:	f3bf 8f6f 	isb	sy
 8001dcc:	f3bf 8f4f 	dsb	sy
 8001dd0:	613b      	str	r3, [r7, #16]
    }
 8001dd2:	bf00      	nop
 8001dd4:	e7fe      	b.n	8001dd4 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	3350      	adds	r3, #80	; 0x50
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f001 ffe6 	bl	8003dac <pvPortMalloc>
 8001de0:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00d      	beq.n	8001e04 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	3350      	adds	r3, #80	; 0x50
 8001df0:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001df2:	79fa      	ldrb	r2, [r7, #7]
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	68b9      	ldr	r1, [r7, #8]
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f805 	bl	8001e0e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001e04:	6a3b      	ldr	r3, [r7, #32]
    }
 8001e06:	4618      	mov	r0, r3
 8001e08:	3728      	adds	r7, #40	; 0x28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d103      	bne.n	8001e2a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	e002      	b.n	8001e30 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	69b8      	ldr	r0, [r7, #24]
 8001e40:	f7ff ff1e 	bl	8001c80 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	78fa      	ldrb	r2, [r7, #3]
 8001e48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08e      	sub	sp, #56	; 0x38
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
 8001e60:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001e62:	2300      	movs	r3, #0
 8001e64:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10a      	bne.n	8001e86 <xQueueGenericSend+0x32>
        __asm volatile
 8001e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e74:	f383 8811 	msr	BASEPRI, r3
 8001e78:	f3bf 8f6f 	isb	sy
 8001e7c:	f3bf 8f4f 	dsb	sy
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001e82:	bf00      	nop
 8001e84:	e7fe      	b.n	8001e84 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d103      	bne.n	8001e94 <xQueueGenericSend+0x40>
 8001e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <xQueueGenericSend+0x44>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <xQueueGenericSend+0x46>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10a      	bne.n	8001eb4 <xQueueGenericSend+0x60>
        __asm volatile
 8001e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ea2:	f383 8811 	msr	BASEPRI, r3
 8001ea6:	f3bf 8f6f 	isb	sy
 8001eaa:	f3bf 8f4f 	dsb	sy
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001eb0:	bf00      	nop
 8001eb2:	e7fe      	b.n	8001eb2 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d103      	bne.n	8001ec2 <xQueueGenericSend+0x6e>
 8001eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <xQueueGenericSend+0x72>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <xQueueGenericSend+0x74>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10a      	bne.n	8001ee2 <xQueueGenericSend+0x8e>
        __asm volatile
 8001ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed0:	f383 8811 	msr	BASEPRI, r3
 8001ed4:	f3bf 8f6f 	isb	sy
 8001ed8:	f3bf 8f4f 	dsb	sy
 8001edc:	623b      	str	r3, [r7, #32]
    }
 8001ede:	bf00      	nop
 8001ee0:	e7fe      	b.n	8001ee0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ee2:	f001 f8ff 	bl	80030e4 <xTaskGetSchedulerState>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d102      	bne.n	8001ef2 <xQueueGenericSend+0x9e>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <xQueueGenericSend+0xa2>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <xQueueGenericSend+0xa4>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10a      	bne.n	8001f12 <xQueueGenericSend+0xbe>
        __asm volatile
 8001efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f00:	f383 8811 	msr	BASEPRI, r3
 8001f04:	f3bf 8f6f 	isb	sy
 8001f08:	f3bf 8f4f 	dsb	sy
 8001f0c:	61fb      	str	r3, [r7, #28]
    }
 8001f0e:	bf00      	nop
 8001f10:	e7fe      	b.n	8001f10 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001f12:	f001 fe29 	bl	8003b68 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d302      	bcc.n	8001f28 <xQueueGenericSend+0xd4>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d129      	bne.n	8001f7c <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	68b9      	ldr	r1, [r7, #8]
 8001f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f2e:	f000 fa19 	bl	8002364 <prvCopyDataToQueue>
 8001f32:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d010      	beq.n	8001f5e <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3e:	3324      	adds	r3, #36	; 0x24
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 ff33 	bl	8002dac <xTaskRemoveFromEventList>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d013      	beq.n	8001f74 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001f4c:	4b3f      	ldr	r3, [pc, #252]	; (800204c <xQueueGenericSend+0x1f8>)
 8001f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	f3bf 8f4f 	dsb	sy
 8001f58:	f3bf 8f6f 	isb	sy
 8001f5c:	e00a      	b.n	8001f74 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8001f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d007      	beq.n	8001f74 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001f64:	4b39      	ldr	r3, [pc, #228]	; (800204c <xQueueGenericSend+0x1f8>)
 8001f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	f3bf 8f4f 	dsb	sy
 8001f70:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001f74:	f001 fe28 	bl	8003bc8 <vPortExitCritical>
                return pdPASS;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e063      	b.n	8002044 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d103      	bne.n	8001f8a <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001f82:	f001 fe21 	bl	8003bc8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e05c      	b.n	8002044 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d106      	bne.n	8001f9e <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 ff6b 	bl	8002e70 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001f9e:	f001 fe13 	bl	8003bc8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001fa2:	f000 fce5 	bl	8002970 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001fa6:	f001 fddf 	bl	8003b68 <vPortEnterCritical>
 8001faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001fb0:	b25b      	sxtb	r3, r3
 8001fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb6:	d103      	bne.n	8001fc0 <xQueueGenericSend+0x16c>
 8001fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fc6:	b25b      	sxtb	r3, r3
 8001fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fcc:	d103      	bne.n	8001fd6 <xQueueGenericSend+0x182>
 8001fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001fd6:	f001 fdf7 	bl	8003bc8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001fda:	1d3a      	adds	r2, r7, #4
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 ff5a 	bl	8002e9c <xTaskCheckForTimeOut>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d124      	bne.n	8002038 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001fee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ff0:	f000 fab0 	bl	8002554 <prvIsQueueFull>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d018      	beq.n	800202c <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffc:	3310      	adds	r3, #16
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f000 fe82 	bl	8002d0c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800200a:	f000 fa3b 	bl	8002484 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800200e:	f000 fcbd 	bl	800298c <xTaskResumeAll>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	f47f af7c 	bne.w	8001f12 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <xQueueGenericSend+0x1f8>)
 800201c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	f3bf 8f4f 	dsb	sy
 8002026:	f3bf 8f6f 	isb	sy
 800202a:	e772      	b.n	8001f12 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800202c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800202e:	f000 fa29 	bl	8002484 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002032:	f000 fcab 	bl	800298c <xTaskResumeAll>
 8002036:	e76c      	b.n	8001f12 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800203a:	f000 fa23 	bl	8002484 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800203e:	f000 fca5 	bl	800298c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002042:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002044:	4618      	mov	r0, r3
 8002046:	3738      	adds	r7, #56	; 0x38
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	e000ed04 	.word	0xe000ed04

08002050 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b090      	sub	sp, #64	; 0x40
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
 800205c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10a      	bne.n	800207e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800206c:	f383 8811 	msr	BASEPRI, r3
 8002070:	f3bf 8f6f 	isb	sy
 8002074:	f3bf 8f4f 	dsb	sy
 8002078:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800207a:	bf00      	nop
 800207c:	e7fe      	b.n	800207c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d103      	bne.n	800208c <xQueueGenericSendFromISR+0x3c>
 8002084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <xQueueGenericSendFromISR+0x40>
 800208c:	2301      	movs	r3, #1
 800208e:	e000      	b.n	8002092 <xQueueGenericSendFromISR+0x42>
 8002090:	2300      	movs	r3, #0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10a      	bne.n	80020ac <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800209a:	f383 8811 	msr	BASEPRI, r3
 800209e:	f3bf 8f6f 	isb	sy
 80020a2:	f3bf 8f4f 	dsb	sy
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80020a8:	bf00      	nop
 80020aa:	e7fe      	b.n	80020aa <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d103      	bne.n	80020ba <xQueueGenericSendFromISR+0x6a>
 80020b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <xQueueGenericSendFromISR+0x6e>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <xQueueGenericSendFromISR+0x70>
 80020be:	2300      	movs	r3, #0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10a      	bne.n	80020da <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80020c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c8:	f383 8811 	msr	BASEPRI, r3
 80020cc:	f3bf 8f6f 	isb	sy
 80020d0:	f3bf 8f4f 	dsb	sy
 80020d4:	623b      	str	r3, [r7, #32]
    }
 80020d6:	bf00      	nop
 80020d8:	e7fe      	b.n	80020d8 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80020da:	f001 fe27 	bl	8003d2c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80020de:	f3ef 8211 	mrs	r2, BASEPRI
 80020e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e6:	f383 8811 	msr	BASEPRI, r3
 80020ea:	f3bf 8f6f 	isb	sy
 80020ee:	f3bf 8f4f 	dsb	sy
 80020f2:	61fa      	str	r2, [r7, #28]
 80020f4:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80020f6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80020f8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80020fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002102:	429a      	cmp	r2, r3
 8002104:	d302      	bcc.n	800210c <xQueueGenericSendFromISR+0xbc>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b02      	cmp	r3, #2
 800210a:	d13e      	bne.n	800218a <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800210c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800210e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211a:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	68b9      	ldr	r1, [r7, #8]
 8002120:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002122:	f000 f91f 	bl	8002364 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002126:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800212a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212e:	d112      	bne.n	8002156 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	2b00      	cmp	r3, #0
 8002136:	d025      	beq.n	8002184 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213a:	3324      	adds	r3, #36	; 0x24
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fe35 	bl	8002dac <xTaskRemoveFromEventList>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d01d      	beq.n	8002184 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d01a      	beq.n	8002184 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	e016      	b.n	8002184 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002156:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800215a:	2b7f      	cmp	r3, #127	; 0x7f
 800215c:	d10a      	bne.n	8002174 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 800215e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002162:	f383 8811 	msr	BASEPRI, r3
 8002166:	f3bf 8f6f 	isb	sy
 800216a:	f3bf 8f4f 	dsb	sy
 800216e:	617b      	str	r3, [r7, #20]
    }
 8002170:	bf00      	nop
 8002172:	e7fe      	b.n	8002172 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002174:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002178:	3301      	adds	r3, #1
 800217a:	b2db      	uxtb	r3, r3
 800217c:	b25a      	sxtb	r2, r3
 800217e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002184:	2301      	movs	r3, #1
 8002186:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002188:	e001      	b.n	800218e <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800218a:	2300      	movs	r3, #0
 800218c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800218e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002190:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002198:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800219a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800219c:	4618      	mov	r0, r3
 800219e:	3740      	adds	r7, #64	; 0x40
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08c      	sub	sp, #48	; 0x30
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80021b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10a      	bne.n	80021d4 <xQueueReceive+0x30>
        __asm volatile
 80021be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c2:	f383 8811 	msr	BASEPRI, r3
 80021c6:	f3bf 8f6f 	isb	sy
 80021ca:	f3bf 8f4f 	dsb	sy
 80021ce:	623b      	str	r3, [r7, #32]
    }
 80021d0:	bf00      	nop
 80021d2:	e7fe      	b.n	80021d2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d103      	bne.n	80021e2 <xQueueReceive+0x3e>
 80021da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <xQueueReceive+0x42>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <xQueueReceive+0x44>
 80021e6:	2300      	movs	r3, #0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10a      	bne.n	8002202 <xQueueReceive+0x5e>
        __asm volatile
 80021ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f0:	f383 8811 	msr	BASEPRI, r3
 80021f4:	f3bf 8f6f 	isb	sy
 80021f8:	f3bf 8f4f 	dsb	sy
 80021fc:	61fb      	str	r3, [r7, #28]
    }
 80021fe:	bf00      	nop
 8002200:	e7fe      	b.n	8002200 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002202:	f000 ff6f 	bl	80030e4 <xTaskGetSchedulerState>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d102      	bne.n	8002212 <xQueueReceive+0x6e>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <xQueueReceive+0x72>
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <xQueueReceive+0x74>
 8002216:	2300      	movs	r3, #0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10a      	bne.n	8002232 <xQueueReceive+0x8e>
        __asm volatile
 800221c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002220:	f383 8811 	msr	BASEPRI, r3
 8002224:	f3bf 8f6f 	isb	sy
 8002228:	f3bf 8f4f 	dsb	sy
 800222c:	61bb      	str	r3, [r7, #24]
    }
 800222e:	bf00      	nop
 8002230:	e7fe      	b.n	8002230 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002232:	f001 fc99 	bl	8003b68 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	2b00      	cmp	r3, #0
 8002240:	d01f      	beq.n	8002282 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002242:	68b9      	ldr	r1, [r7, #8]
 8002244:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002246:	f000 f8f7 	bl	8002438 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	1e5a      	subs	r2, r3, #1
 800224e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002250:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00f      	beq.n	800227a <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800225a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225c:	3310      	adds	r3, #16
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fda4 	bl	8002dac <xTaskRemoveFromEventList>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d007      	beq.n	800227a <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800226a:	4b3d      	ldr	r3, [pc, #244]	; (8002360 <xQueueReceive+0x1bc>)
 800226c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	f3bf 8f4f 	dsb	sy
 8002276:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800227a:	f001 fca5 	bl	8003bc8 <vPortExitCritical>
                return pdPASS;
 800227e:	2301      	movs	r3, #1
 8002280:	e069      	b.n	8002356 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d103      	bne.n	8002290 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002288:	f001 fc9e 	bl	8003bc8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800228c:	2300      	movs	r3, #0
 800228e:	e062      	b.n	8002356 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002292:	2b00      	cmp	r3, #0
 8002294:	d106      	bne.n	80022a4 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002296:	f107 0310 	add.w	r3, r7, #16
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fde8 	bl	8002e70 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80022a0:	2301      	movs	r3, #1
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80022a4:	f001 fc90 	bl	8003bc8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80022a8:	f000 fb62 	bl	8002970 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80022ac:	f001 fc5c 	bl	8003b68 <vPortEnterCritical>
 80022b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022b6:	b25b      	sxtb	r3, r3
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022bc:	d103      	bne.n	80022c6 <xQueueReceive+0x122>
 80022be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022cc:	b25b      	sxtb	r3, r3
 80022ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d2:	d103      	bne.n	80022dc <xQueueReceive+0x138>
 80022d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022dc:	f001 fc74 	bl	8003bc8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80022e0:	1d3a      	adds	r2, r7, #4
 80022e2:	f107 0310 	add.w	r3, r7, #16
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 fdd7 	bl	8002e9c <xTaskCheckForTimeOut>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d123      	bne.n	800233c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022f6:	f000 f917 	bl	8002528 <prvIsQueueEmpty>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d017      	beq.n	8002330 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002302:	3324      	adds	r3, #36	; 0x24
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fcff 	bl	8002d0c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800230e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002310:	f000 f8b8 	bl	8002484 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002314:	f000 fb3a 	bl	800298c <xTaskResumeAll>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d189      	bne.n	8002232 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <xQueueReceive+0x1bc>)
 8002320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	f3bf 8f4f 	dsb	sy
 800232a:	f3bf 8f6f 	isb	sy
 800232e:	e780      	b.n	8002232 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002332:	f000 f8a7 	bl	8002484 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002336:	f000 fb29 	bl	800298c <xTaskResumeAll>
 800233a:	e77a      	b.n	8002232 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800233c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800233e:	f000 f8a1 	bl	8002484 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002342:	f000 fb23 	bl	800298c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002348:	f000 f8ee 	bl	8002528 <prvIsQueueEmpty>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	f43f af6f 	beq.w	8002232 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002354:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002356:	4618      	mov	r0, r3
 8002358:	3730      	adds	r7, #48	; 0x30
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	e000ed04 	.word	0xe000ed04

08002364 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002378:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10d      	bne.n	800239e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d14d      	bne.n	8002426 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	4618      	mov	r0, r3
 8002390:	f000 fec6 	bl	8003120 <xTaskPriorityDisinherit>
 8002394:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	e043      	b.n	8002426 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d119      	bne.n	80023d8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6858      	ldr	r0, [r3, #4]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	461a      	mov	r2, r3
 80023ae:	68b9      	ldr	r1, [r7, #8]
 80023b0:	f002 f88d 	bl	80044ce <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	441a      	add	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d32b      	bcc.n	8002426 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	e026      	b.n	8002426 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	68d8      	ldr	r0, [r3, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	461a      	mov	r2, r3
 80023e2:	68b9      	ldr	r1, [r7, #8]
 80023e4:	f002 f873 	bl	80044ce <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	425b      	negs	r3, r3
 80023f2:	441a      	add	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d207      	bcs.n	8002414 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	425b      	negs	r3, r3
 800240e:	441a      	add	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d105      	bne.n	8002426 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	3b01      	subs	r3, #1
 8002424:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800242e:	697b      	ldr	r3, [r7, #20]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	2b00      	cmp	r3, #0
 8002448:	d018      	beq.n	800247c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	441a      	add	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	429a      	cmp	r2, r3
 8002462:	d303      	bcc.n	800246c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68d9      	ldr	r1, [r3, #12]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	461a      	mov	r2, r3
 8002476:	6838      	ldr	r0, [r7, #0]
 8002478:	f002 f829 	bl	80044ce <memcpy>
    }
}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800248c:	f001 fb6c 	bl	8003b68 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002496:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002498:	e011      	b.n	80024be <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d012      	beq.n	80024c8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3324      	adds	r3, #36	; 0x24
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 fc80 	bl	8002dac <xTaskRemoveFromEventList>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80024b2:	f000 fd59 	bl	8002f68 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80024be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	dce9      	bgt.n	800249a <prvUnlockQueue+0x16>
 80024c6:	e000      	b.n	80024ca <prvUnlockQueue+0x46>
                        break;
 80024c8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	22ff      	movs	r2, #255	; 0xff
 80024ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80024d2:	f001 fb79 	bl	8003bc8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80024d6:	f001 fb47 	bl	8003b68 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024e0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80024e2:	e011      	b.n	8002508 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d012      	beq.n	8002512 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3310      	adds	r3, #16
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 fc5b 	bl	8002dac <xTaskRemoveFromEventList>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80024fc:	f000 fd34 	bl	8002f68 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002500:	7bbb      	ldrb	r3, [r7, #14]
 8002502:	3b01      	subs	r3, #1
 8002504:	b2db      	uxtb	r3, r3
 8002506:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800250c:	2b00      	cmp	r3, #0
 800250e:	dce9      	bgt.n	80024e4 <prvUnlockQueue+0x60>
 8002510:	e000      	b.n	8002514 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002512:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	22ff      	movs	r2, #255	; 0xff
 8002518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800251c:	f001 fb54 	bl	8003bc8 <vPortExitCritical>
}
 8002520:	bf00      	nop
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002530:	f001 fb1a 	bl	8003b68 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002538:	2b00      	cmp	r3, #0
 800253a:	d102      	bne.n	8002542 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800253c:	2301      	movs	r3, #1
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	e001      	b.n	8002546 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002546:	f001 fb3f 	bl	8003bc8 <vPortExitCritical>

    return xReturn;
 800254a:	68fb      	ldr	r3, [r7, #12]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800255c:	f001 fb04 	bl	8003b68 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002568:	429a      	cmp	r2, r3
 800256a:	d102      	bne.n	8002572 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800256c:	2301      	movs	r3, #1
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	e001      	b.n	8002576 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002576:	f001 fb27 	bl	8003bc8 <vPortExitCritical>

    return xReturn;
 800257a:	68fb      	ldr	r3, [r7, #12]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	e014      	b.n	80025be <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002594:	4a0f      	ldr	r2, [pc, #60]	; (80025d4 <vQueueAddToRegistry+0x50>)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10b      	bne.n	80025b8 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80025a0:	490c      	ldr	r1, [pc, #48]	; (80025d4 <vQueueAddToRegistry+0x50>)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80025aa:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <vQueueAddToRegistry+0x50>)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4413      	add	r3, r2
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80025b6:	e006      	b.n	80025c6 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	3301      	adds	r3, #1
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b07      	cmp	r3, #7
 80025c2:	d9e7      	bls.n	8002594 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000094 	.word	0x20000094

080025d8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80025e8:	f001 fabe 	bl	8003b68 <vPortEnterCritical>
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025f2:	b25b      	sxtb	r3, r3
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f8:	d103      	bne.n	8002602 <vQueueWaitForMessageRestricted+0x2a>
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002608:	b25b      	sxtb	r3, r3
 800260a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260e:	d103      	bne.n	8002618 <vQueueWaitForMessageRestricted+0x40>
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002618:	f001 fad6 	bl	8003bc8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002620:	2b00      	cmp	r3, #0
 8002622:	d106      	bne.n	8002632 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	3324      	adds	r3, #36	; 0x24
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	68b9      	ldr	r1, [r7, #8]
 800262c:	4618      	mov	r0, r3
 800262e:	f000 fb91 	bl	8002d54 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002632:	6978      	ldr	r0, [r7, #20]
 8002634:	f7ff ff26 	bl	8002484 <prvUnlockQueue>
    }
 8002638:	bf00      	nop
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002640:	b580      	push	{r7, lr}
 8002642:	b08c      	sub	sp, #48	; 0x30
 8002644:	af04      	add	r7, sp, #16
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	4613      	mov	r3, r2
 800264e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002650:	88fb      	ldrh	r3, [r7, #6]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4618      	mov	r0, r3
 8002656:	f001 fba9 	bl	8003dac <pvPortMalloc>
 800265a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00e      	beq.n	8002680 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002662:	2058      	movs	r0, #88	; 0x58
 8002664:	f001 fba2 	bl	8003dac <pvPortMalloc>
 8002668:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	631a      	str	r2, [r3, #48]	; 0x30
 8002676:	e005      	b.n	8002684 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002678:	6978      	ldr	r0, [r7, #20]
 800267a:	f001 fc77 	bl	8003f6c <vPortFree>
 800267e:	e001      	b.n	8002684 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002680:	2300      	movs	r3, #0
 8002682:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d013      	beq.n	80026b2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800268a:	88fa      	ldrh	r2, [r7, #6]
 800268c:	2300      	movs	r3, #0
 800268e:	9303      	str	r3, [sp, #12]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	9302      	str	r3, [sp, #8]
 8002694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	68b9      	ldr	r1, [r7, #8]
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 f80e 	bl	80026c2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80026a6:	69f8      	ldr	r0, [r7, #28]
 80026a8:	f000 f8a2 	bl	80027f0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80026ac:	2301      	movs	r3, #1
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	e002      	b.n	80026b8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295
 80026b6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80026b8:	69bb      	ldr	r3, [r7, #24]
    }
 80026ba:	4618      	mov	r0, r3
 80026bc:	3720      	adds	r7, #32
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b088      	sub	sp, #32
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	60f8      	str	r0, [r7, #12]
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80026d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	461a      	mov	r2, r3
 80026da:	21a5      	movs	r1, #165	; 0xa5
 80026dc:	f001 fe7b 	bl	80043d6 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80026e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026ea:	3b01      	subs	r3, #1
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	f023 0307 	bic.w	r3, r3, #7
 80026f8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002708:	f383 8811 	msr	BASEPRI, r3
 800270c:	f3bf 8f6f 	isb	sy
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	617b      	str	r3, [r7, #20]
    }
 8002716:	bf00      	nop
 8002718:	e7fe      	b.n	8002718 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d01f      	beq.n	8002760 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002720:	2300      	movs	r3, #0
 8002722:	61fb      	str	r3, [r7, #28]
 8002724:	e012      	b.n	800274c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	4413      	add	r3, r2
 800272c:	7819      	ldrb	r1, [r3, #0]
 800272e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	4413      	add	r3, r2
 8002734:	3334      	adds	r3, #52	; 0x34
 8002736:	460a      	mov	r2, r1
 8002738:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	4413      	add	r3, r2
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d006      	beq.n	8002754 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3301      	adds	r3, #1
 800274a:	61fb      	str	r3, [r7, #28]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	2b09      	cmp	r3, #9
 8002750:	d9e9      	bls.n	8002726 <prvInitialiseNewTask+0x64>
 8002752:	e000      	b.n	8002756 <prvInitialiseNewTask+0x94>
            {
                break;
 8002754:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800275e:	e003      	b.n	8002768 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276a:	2b04      	cmp	r3, #4
 800276c:	d901      	bls.n	8002772 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800276e:	2304      	movs	r3, #4
 8002770:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002776:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800277c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800277e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002780:	2200      	movs	r2, #0
 8002782:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002786:	3304      	adds	r3, #4
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff f9e5 	bl	8001b58 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800278e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002790:	3318      	adds	r3, #24
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff f9e0 	bl	8001b58 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800279c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a0:	f1c3 0205 	rsb	r2, r3, #5
 80027a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80027a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027ac:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80027ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b0:	3350      	adds	r3, #80	; 0x50
 80027b2:	2204      	movs	r2, #4
 80027b4:	2100      	movs	r1, #0
 80027b6:	4618      	mov	r0, r3
 80027b8:	f001 fe0d 	bl	80043d6 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80027bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027be:	3354      	adds	r3, #84	; 0x54
 80027c0:	2201      	movs	r2, #1
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f001 fe06 	bl	80043d6 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	68f9      	ldr	r1, [r7, #12]
 80027ce:	69b8      	ldr	r0, [r7, #24]
 80027d0:	f001 f898 	bl	8003904 <pxPortInitialiseStack>
 80027d4:	4602      	mov	r2, r0
 80027d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80027da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80027e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027e4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80027e6:	bf00      	nop
 80027e8:	3720      	adds	r7, #32
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80027f8:	f001 f9b6 	bl	8003b68 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80027fc:	4b2c      	ldr	r3, [pc, #176]	; (80028b0 <prvAddNewTaskToReadyList+0xc0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	3301      	adds	r3, #1
 8002802:	4a2b      	ldr	r2, [pc, #172]	; (80028b0 <prvAddNewTaskToReadyList+0xc0>)
 8002804:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002806:	4b2b      	ldr	r3, [pc, #172]	; (80028b4 <prvAddNewTaskToReadyList+0xc4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800280e:	4a29      	ldr	r2, [pc, #164]	; (80028b4 <prvAddNewTaskToReadyList+0xc4>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002814:	4b26      	ldr	r3, [pc, #152]	; (80028b0 <prvAddNewTaskToReadyList+0xc0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d110      	bne.n	800283e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800281c:	f000 fbc8 	bl	8002fb0 <prvInitialiseTaskLists>
 8002820:	e00d      	b.n	800283e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002822:	4b25      	ldr	r3, [pc, #148]	; (80028b8 <prvAddNewTaskToReadyList+0xc8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d109      	bne.n	800283e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800282a:	4b22      	ldr	r3, [pc, #136]	; (80028b4 <prvAddNewTaskToReadyList+0xc4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	429a      	cmp	r2, r3
 8002836:	d802      	bhi.n	800283e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002838:	4a1e      	ldr	r2, [pc, #120]	; (80028b4 <prvAddNewTaskToReadyList+0xc4>)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800283e:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <prvAddNewTaskToReadyList+0xcc>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	3301      	adds	r3, #1
 8002844:	4a1d      	ldr	r2, [pc, #116]	; (80028bc <prvAddNewTaskToReadyList+0xcc>)
 8002846:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002848:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <prvAddNewTaskToReadyList+0xcc>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	2201      	movs	r2, #1
 8002856:	409a      	lsls	r2, r3
 8002858:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <prvAddNewTaskToReadyList+0xd0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4313      	orrs	r3, r2
 800285e:	4a18      	ldr	r2, [pc, #96]	; (80028c0 <prvAddNewTaskToReadyList+0xd0>)
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4a15      	ldr	r2, [pc, #84]	; (80028c4 <prvAddNewTaskToReadyList+0xd4>)
 8002870:	441a      	add	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3304      	adds	r3, #4
 8002876:	4619      	mov	r1, r3
 8002878:	4610      	mov	r0, r2
 800287a:	f7ff f97a 	bl	8001b72 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800287e:	f001 f9a3 	bl	8003bc8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002882:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <prvAddNewTaskToReadyList+0xc8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00e      	beq.n	80028a8 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <prvAddNewTaskToReadyList+0xc4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	429a      	cmp	r2, r3
 8002896:	d207      	bcs.n	80028a8 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <prvAddNewTaskToReadyList+0xd8>)
 800289a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	200001ac 	.word	0x200001ac
 80028b4:	200000d4 	.word	0x200000d4
 80028b8:	200001b8 	.word	0x200001b8
 80028bc:	200001c8 	.word	0x200001c8
 80028c0:	200001b4 	.word	0x200001b4
 80028c4:	200000d8 	.word	0x200000d8
 80028c8:	e000ed04 	.word	0xe000ed04

080028cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80028d2:	4b20      	ldr	r3, [pc, #128]	; (8002954 <vTaskStartScheduler+0x88>)
 80028d4:	9301      	str	r3, [sp, #4]
 80028d6:	2300      	movs	r3, #0
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	2300      	movs	r3, #0
 80028dc:	2282      	movs	r2, #130	; 0x82
 80028de:	491e      	ldr	r1, [pc, #120]	; (8002958 <vTaskStartScheduler+0x8c>)
 80028e0:	481e      	ldr	r0, [pc, #120]	; (800295c <vTaskStartScheduler+0x90>)
 80028e2:	f7ff fead 	bl	8002640 <xTaskCreate>
 80028e6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d102      	bne.n	80028f4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80028ee:	f000 fcf7 	bl	80032e0 <xTimerCreateTimerTask>
 80028f2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d116      	bne.n	8002928 <vTaskStartScheduler+0x5c>
        __asm volatile
 80028fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fe:	f383 8811 	msr	BASEPRI, r3
 8002902:	f3bf 8f6f 	isb	sy
 8002906:	f3bf 8f4f 	dsb	sy
 800290a:	60bb      	str	r3, [r7, #8]
    }
 800290c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800290e:	4b14      	ldr	r3, [pc, #80]	; (8002960 <vTaskStartScheduler+0x94>)
 8002910:	f04f 32ff 	mov.w	r2, #4294967295
 8002914:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002916:	4b13      	ldr	r3, [pc, #76]	; (8002964 <vTaskStartScheduler+0x98>)
 8002918:	2201      	movs	r2, #1
 800291a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800291c:	4b12      	ldr	r3, [pc, #72]	; (8002968 <vTaskStartScheduler+0x9c>)
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002922:	f001 f87f 	bl	8003a24 <xPortStartScheduler>
 8002926:	e00e      	b.n	8002946 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292e:	d10a      	bne.n	8002946 <vTaskStartScheduler+0x7a>
        __asm volatile
 8002930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002934:	f383 8811 	msr	BASEPRI, r3
 8002938:	f3bf 8f6f 	isb	sy
 800293c:	f3bf 8f4f 	dsb	sy
 8002940:	607b      	str	r3, [r7, #4]
    }
 8002942:	bf00      	nop
 8002944:	e7fe      	b.n	8002944 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <vTaskStartScheduler+0xa0>)
 8002948:	681b      	ldr	r3, [r3, #0]
}
 800294a:	bf00      	nop
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	200001d0 	.word	0x200001d0
 8002958:	08005094 	.word	0x08005094
 800295c:	08002f81 	.word	0x08002f81
 8002960:	200001cc 	.word	0x200001cc
 8002964:	200001b8 	.word	0x200001b8
 8002968:	200001b0 	.word	0x200001b0
 800296c:	2000000c 	.word	0x2000000c

08002970 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002974:	4b04      	ldr	r3, [pc, #16]	; (8002988 <vTaskSuspendAll+0x18>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3301      	adds	r3, #1
 800297a:	4a03      	ldr	r2, [pc, #12]	; (8002988 <vTaskSuspendAll+0x18>)
 800297c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800297e:	bf00      	nop
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	200001d4 	.word	0x200001d4

0800298c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002996:	2300      	movs	r3, #0
 8002998:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800299a:	4b41      	ldr	r3, [pc, #260]	; (8002aa0 <xTaskResumeAll+0x114>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10a      	bne.n	80029b8 <xTaskResumeAll+0x2c>
        __asm volatile
 80029a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a6:	f383 8811 	msr	BASEPRI, r3
 80029aa:	f3bf 8f6f 	isb	sy
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	603b      	str	r3, [r7, #0]
    }
 80029b4:	bf00      	nop
 80029b6:	e7fe      	b.n	80029b6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80029b8:	f001 f8d6 	bl	8003b68 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80029bc:	4b38      	ldr	r3, [pc, #224]	; (8002aa0 <xTaskResumeAll+0x114>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3b01      	subs	r3, #1
 80029c2:	4a37      	ldr	r2, [pc, #220]	; (8002aa0 <xTaskResumeAll+0x114>)
 80029c4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029c6:	4b36      	ldr	r3, [pc, #216]	; (8002aa0 <xTaskResumeAll+0x114>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d161      	bne.n	8002a92 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80029ce:	4b35      	ldr	r3, [pc, #212]	; (8002aa4 <xTaskResumeAll+0x118>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d05d      	beq.n	8002a92 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029d6:	e02e      	b.n	8002a36 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029d8:	4b33      	ldr	r3, [pc, #204]	; (8002aa8 <xTaskResumeAll+0x11c>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3318      	adds	r3, #24
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff f921 	bl	8001c2c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	3304      	adds	r3, #4
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff f91c 	bl	8001c2c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	2201      	movs	r2, #1
 80029fa:	409a      	lsls	r2, r3
 80029fc:	4b2b      	ldr	r3, [pc, #172]	; (8002aac <xTaskResumeAll+0x120>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	4a2a      	ldr	r2, [pc, #168]	; (8002aac <xTaskResumeAll+0x120>)
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4a27      	ldr	r2, [pc, #156]	; (8002ab0 <xTaskResumeAll+0x124>)
 8002a14:	441a      	add	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	f7ff f8a8 	bl	8001b72 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a26:	4b23      	ldr	r3, [pc, #140]	; (8002ab4 <xTaskResumeAll+0x128>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d302      	bcc.n	8002a36 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8002a30:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <xTaskResumeAll+0x12c>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a36:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <xTaskResumeAll+0x11c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1cc      	bne.n	80029d8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002a44:	f000 fb32 	bl	80030ac <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002a48:	4b1c      	ldr	r3, [pc, #112]	; (8002abc <xTaskResumeAll+0x130>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d010      	beq.n	8002a76 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002a54:	f000 f846 	bl	8002ae4 <xTaskIncrementTick>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8002a5e:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <xTaskResumeAll+0x12c>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1f1      	bne.n	8002a54 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8002a70:	4b12      	ldr	r3, [pc, #72]	; (8002abc <xTaskResumeAll+0x130>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002a76:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <xTaskResumeAll+0x12c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d009      	beq.n	8002a92 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002a82:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <xTaskResumeAll+0x134>)
 8002a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	f3bf 8f4f 	dsb	sy
 8002a8e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002a92:	f001 f899 	bl	8003bc8 <vPortExitCritical>

    return xAlreadyYielded;
 8002a96:	68bb      	ldr	r3, [r7, #8]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	200001d4 	.word	0x200001d4
 8002aa4:	200001ac 	.word	0x200001ac
 8002aa8:	2000016c 	.word	0x2000016c
 8002aac:	200001b4 	.word	0x200001b4
 8002ab0:	200000d8 	.word	0x200000d8
 8002ab4:	200000d4 	.word	0x200000d4
 8002ab8:	200001c0 	.word	0x200001c0
 8002abc:	200001bc 	.word	0x200001bc
 8002ac0:	e000ed04 	.word	0xe000ed04

08002ac4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002aca:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <xTaskGetTickCount+0x1c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002ad0:	687b      	ldr	r3, [r7, #4]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	200001b0 	.word	0x200001b0

08002ae4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002aee:	4b4e      	ldr	r3, [pc, #312]	; (8002c28 <xTaskIncrementTick+0x144>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f040 808e 	bne.w	8002c14 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002af8:	4b4c      	ldr	r3, [pc, #304]	; (8002c2c <xTaskIncrementTick+0x148>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	3301      	adds	r3, #1
 8002afe:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002b00:	4a4a      	ldr	r2, [pc, #296]	; (8002c2c <xTaskIncrementTick+0x148>)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d120      	bne.n	8002b4e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002b0c:	4b48      	ldr	r3, [pc, #288]	; (8002c30 <xTaskIncrementTick+0x14c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <xTaskIncrementTick+0x48>
        __asm volatile
 8002b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1a:	f383 8811 	msr	BASEPRI, r3
 8002b1e:	f3bf 8f6f 	isb	sy
 8002b22:	f3bf 8f4f 	dsb	sy
 8002b26:	603b      	str	r3, [r7, #0]
    }
 8002b28:	bf00      	nop
 8002b2a:	e7fe      	b.n	8002b2a <xTaskIncrementTick+0x46>
 8002b2c:	4b40      	ldr	r3, [pc, #256]	; (8002c30 <xTaskIncrementTick+0x14c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	4b40      	ldr	r3, [pc, #256]	; (8002c34 <xTaskIncrementTick+0x150>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a3e      	ldr	r2, [pc, #248]	; (8002c30 <xTaskIncrementTick+0x14c>)
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	4a3e      	ldr	r2, [pc, #248]	; (8002c34 <xTaskIncrementTick+0x150>)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	4b3d      	ldr	r3, [pc, #244]	; (8002c38 <xTaskIncrementTick+0x154>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3301      	adds	r3, #1
 8002b46:	4a3c      	ldr	r2, [pc, #240]	; (8002c38 <xTaskIncrementTick+0x154>)
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	f000 faaf 	bl	80030ac <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002b4e:	4b3b      	ldr	r3, [pc, #236]	; (8002c3c <xTaskIncrementTick+0x158>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d348      	bcc.n	8002bea <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b58:	4b35      	ldr	r3, [pc, #212]	; (8002c30 <xTaskIncrementTick+0x14c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d104      	bne.n	8002b6c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b62:	4b36      	ldr	r3, [pc, #216]	; (8002c3c <xTaskIncrementTick+0x158>)
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295
 8002b68:	601a      	str	r2, [r3, #0]
                    break;
 8002b6a:	e03e      	b.n	8002bea <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b6c:	4b30      	ldr	r3, [pc, #192]	; (8002c30 <xTaskIncrementTick+0x14c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d203      	bcs.n	8002b8c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002b84:	4a2d      	ldr	r2, [pc, #180]	; (8002c3c <xTaskIncrementTick+0x158>)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002b8a:	e02e      	b.n	8002bea <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	3304      	adds	r3, #4
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff f84b 	bl	8001c2c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d004      	beq.n	8002ba8 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	3318      	adds	r3, #24
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff f842 	bl	8001c2c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	2201      	movs	r2, #1
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	4b23      	ldr	r3, [pc, #140]	; (8002c40 <xTaskIncrementTick+0x15c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	4a22      	ldr	r2, [pc, #136]	; (8002c40 <xTaskIncrementTick+0x15c>)
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4a1f      	ldr	r2, [pc, #124]	; (8002c44 <xTaskIncrementTick+0x160>)
 8002bc8:	441a      	add	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	f7fe ffce 	bl	8001b72 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bda:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <xTaskIncrementTick+0x164>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d3b9      	bcc.n	8002b58 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002be4:	2301      	movs	r3, #1
 8002be6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002be8:	e7b6      	b.n	8002b58 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002bea:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <xTaskIncrementTick+0x164>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf0:	4914      	ldr	r1, [pc, #80]	; (8002c44 <xTaskIncrementTick+0x160>)
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d901      	bls.n	8002c06 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8002c02:	2301      	movs	r3, #1
 8002c04:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002c06:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <xTaskIncrementTick+0x168>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d007      	beq.n	8002c1e <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	e004      	b.n	8002c1e <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002c14:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <xTaskIncrementTick+0x16c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	4a0d      	ldr	r2, [pc, #52]	; (8002c50 <xTaskIncrementTick+0x16c>)
 8002c1c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002c1e:	697b      	ldr	r3, [r7, #20]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	200001d4 	.word	0x200001d4
 8002c2c:	200001b0 	.word	0x200001b0
 8002c30:	20000164 	.word	0x20000164
 8002c34:	20000168 	.word	0x20000168
 8002c38:	200001c4 	.word	0x200001c4
 8002c3c:	200001cc 	.word	0x200001cc
 8002c40:	200001b4 	.word	0x200001b4
 8002c44:	200000d8 	.word	0x200000d8
 8002c48:	200000d4 	.word	0x200000d4
 8002c4c:	200001c0 	.word	0x200001c0
 8002c50:	200001bc 	.word	0x200001bc

08002c54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c5a:	4b27      	ldr	r3, [pc, #156]	; (8002cf8 <vTaskSwitchContext+0xa4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002c62:	4b26      	ldr	r3, [pc, #152]	; (8002cfc <vTaskSwitchContext+0xa8>)
 8002c64:	2201      	movs	r2, #1
 8002c66:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002c68:	e03f      	b.n	8002cea <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002c6a:	4b24      	ldr	r3, [pc, #144]	; (8002cfc <vTaskSwitchContext+0xa8>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c70:	4b23      	ldr	r3, [pc, #140]	; (8002d00 <vTaskSwitchContext+0xac>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	fab3 f383 	clz	r3, r3
 8002c7c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002c7e:	7afb      	ldrb	r3, [r7, #11]
 8002c80:	f1c3 031f 	rsb	r3, r3, #31
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	491f      	ldr	r1, [pc, #124]	; (8002d04 <vTaskSwitchContext+0xb0>)
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10a      	bne.n	8002cb0 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9e:	f383 8811 	msr	BASEPRI, r3
 8002ca2:	f3bf 8f6f 	isb	sy
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	607b      	str	r3, [r7, #4]
    }
 8002cac:	bf00      	nop
 8002cae:	e7fe      	b.n	8002cae <vTaskSwitchContext+0x5a>
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4a12      	ldr	r2, [pc, #72]	; (8002d04 <vTaskSwitchContext+0xb0>)
 8002cbc:	4413      	add	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	3308      	adds	r3, #8
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d104      	bne.n	8002ce0 <vTaskSwitchContext+0x8c>
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	605a      	str	r2, [r3, #4]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	4a08      	ldr	r2, [pc, #32]	; (8002d08 <vTaskSwitchContext+0xb4>)
 8002ce8:	6013      	str	r3, [r2, #0]
}
 8002cea:	bf00      	nop
 8002cec:	371c      	adds	r7, #28
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	200001d4 	.word	0x200001d4
 8002cfc:	200001c0 	.word	0x200001c0
 8002d00:	200001b4 	.word	0x200001b4
 8002d04:	200000d8 	.word	0x200000d8
 8002d08:	200000d4 	.word	0x200000d4

08002d0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10a      	bne.n	8002d32 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d20:	f383 8811 	msr	BASEPRI, r3
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	60fb      	str	r3, [r7, #12]
    }
 8002d2e:	bf00      	nop
 8002d30:	e7fe      	b.n	8002d30 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d32:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <vTaskPlaceOnEventList+0x44>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	3318      	adds	r3, #24
 8002d38:	4619      	mov	r1, r3
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fe ff3d 	bl	8001bba <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d40:	2101      	movs	r1, #1
 8002d42:	6838      	ldr	r0, [r7, #0]
 8002d44:	f000 fa66 	bl	8003214 <prvAddCurrentTaskToDelayedList>
}
 8002d48:	bf00      	nop
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	200000d4 	.word	0x200000d4

08002d54 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10a      	bne.n	8002d7c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6a:	f383 8811 	msr	BASEPRI, r3
 8002d6e:	f3bf 8f6f 	isb	sy
 8002d72:	f3bf 8f4f 	dsb	sy
 8002d76:	617b      	str	r3, [r7, #20]
    }
 8002d78:	bf00      	nop
 8002d7a:	e7fe      	b.n	8002d7a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d7c:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <vTaskPlaceOnEventListRestricted+0x54>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	3318      	adds	r3, #24
 8002d82:	4619      	mov	r1, r3
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f7fe fef4 	bl	8001b72 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8002d90:	f04f 33ff 	mov.w	r3, #4294967295
 8002d94:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	68b8      	ldr	r0, [r7, #8]
 8002d9a:	f000 fa3b 	bl	8003214 <prvAddCurrentTaskToDelayedList>
    }
 8002d9e:	bf00      	nop
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	200000d4 	.word	0x200000d4

08002dac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10a      	bne.n	8002dd8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc6:	f383 8811 	msr	BASEPRI, r3
 8002dca:	f3bf 8f6f 	isb	sy
 8002dce:	f3bf 8f4f 	dsb	sy
 8002dd2:	60fb      	str	r3, [r7, #12]
    }
 8002dd4:	bf00      	nop
 8002dd6:	e7fe      	b.n	8002dd6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	3318      	adds	r3, #24
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fe ff25 	bl	8001c2c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002de2:	4b1d      	ldr	r3, [pc, #116]	; (8002e58 <xTaskRemoveFromEventList+0xac>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d11c      	bne.n	8002e24 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	3304      	adds	r3, #4
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe ff1c 	bl	8001c2c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	2201      	movs	r2, #1
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	4b17      	ldr	r3, [pc, #92]	; (8002e5c <xTaskRemoveFromEventList+0xb0>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	4a16      	ldr	r2, [pc, #88]	; (8002e5c <xTaskRemoveFromEventList+0xb0>)
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4a13      	ldr	r2, [pc, #76]	; (8002e60 <xTaskRemoveFromEventList+0xb4>)
 8002e14:	441a      	add	r2, r3
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	3304      	adds	r3, #4
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	f7fe fea8 	bl	8001b72 <vListInsertEnd>
 8002e22:	e005      	b.n	8002e30 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	3318      	adds	r3, #24
 8002e28:	4619      	mov	r1, r3
 8002e2a:	480e      	ldr	r0, [pc, #56]	; (8002e64 <xTaskRemoveFromEventList+0xb8>)
 8002e2c:	f7fe fea1 	bl	8001b72 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e34:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <xTaskRemoveFromEventList+0xbc>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d905      	bls.n	8002e4a <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002e42:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <xTaskRemoveFromEventList+0xc0>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	e001      	b.n	8002e4e <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002e4e:	697b      	ldr	r3, [r7, #20]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	200001d4 	.word	0x200001d4
 8002e5c:	200001b4 	.word	0x200001b4
 8002e60:	200000d8 	.word	0x200000d8
 8002e64:	2000016c 	.word	0x2000016c
 8002e68:	200000d4 	.word	0x200000d4
 8002e6c:	200001c0 	.word	0x200001c0

08002e70 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002e78:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <vTaskInternalSetTimeOutState+0x24>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <vTaskInternalSetTimeOutState+0x28>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	605a      	str	r2, [r3, #4]
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	200001c4 	.word	0x200001c4
 8002e98:	200001b0 	.word	0x200001b0

08002e9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10a      	bne.n	8002ec2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb0:	f383 8811 	msr	BASEPRI, r3
 8002eb4:	f3bf 8f6f 	isb	sy
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	613b      	str	r3, [r7, #16]
    }
 8002ebe:	bf00      	nop
 8002ec0:	e7fe      	b.n	8002ec0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10a      	bne.n	8002ede <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	60fb      	str	r3, [r7, #12]
    }
 8002eda:	bf00      	nop
 8002edc:	e7fe      	b.n	8002edc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002ede:	f000 fe43 	bl	8003b68 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002ee2:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <xTaskCheckForTimeOut+0xc4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efa:	d102      	bne.n	8002f02 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61fb      	str	r3, [r7, #28]
 8002f00:	e026      	b.n	8002f50 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4b17      	ldr	r3, [pc, #92]	; (8002f64 <xTaskCheckForTimeOut+0xc8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d00a      	beq.n	8002f24 <xTaskCheckForTimeOut+0x88>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d305      	bcc.n	8002f24 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	e015      	b.n	8002f50 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d20b      	bcs.n	8002f46 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	1ad2      	subs	r2, r2, r3
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff ff98 	bl	8002e70 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61fb      	str	r3, [r7, #28]
 8002f44:	e004      	b.n	8002f50 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002f50:	f000 fe3a 	bl	8003bc8 <vPortExitCritical>

    return xReturn;
 8002f54:	69fb      	ldr	r3, [r7, #28]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3720      	adds	r7, #32
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	200001b0 	.word	0x200001b0
 8002f64:	200001c4 	.word	0x200001c4

08002f68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002f6c:	4b03      	ldr	r3, [pc, #12]	; (8002f7c <vTaskMissedYield+0x14>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]
}
 8002f72:	bf00      	nop
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	200001c0 	.word	0x200001c0

08002f80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002f88:	f000 f852 	bl	8003030 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <prvIdleTask+0x28>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d9f9      	bls.n	8002f88 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002f94:	4b05      	ldr	r3, [pc, #20]	; (8002fac <prvIdleTask+0x2c>)
 8002f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002fa4:	e7f0      	b.n	8002f88 <prvIdleTask+0x8>
 8002fa6:	bf00      	nop
 8002fa8:	200000d8 	.word	0x200000d8
 8002fac:	e000ed04 	.word	0xe000ed04

08002fb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	607b      	str	r3, [r7, #4]
 8002fba:	e00c      	b.n	8002fd6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4a12      	ldr	r2, [pc, #72]	; (8003010 <prvInitialiseTaskLists+0x60>)
 8002fc8:	4413      	add	r3, r2
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fe fda4 	bl	8001b18 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	607b      	str	r3, [r7, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d9ef      	bls.n	8002fbc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002fdc:	480d      	ldr	r0, [pc, #52]	; (8003014 <prvInitialiseTaskLists+0x64>)
 8002fde:	f7fe fd9b 	bl	8001b18 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002fe2:	480d      	ldr	r0, [pc, #52]	; (8003018 <prvInitialiseTaskLists+0x68>)
 8002fe4:	f7fe fd98 	bl	8001b18 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002fe8:	480c      	ldr	r0, [pc, #48]	; (800301c <prvInitialiseTaskLists+0x6c>)
 8002fea:	f7fe fd95 	bl	8001b18 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002fee:	480c      	ldr	r0, [pc, #48]	; (8003020 <prvInitialiseTaskLists+0x70>)
 8002ff0:	f7fe fd92 	bl	8001b18 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002ff4:	480b      	ldr	r0, [pc, #44]	; (8003024 <prvInitialiseTaskLists+0x74>)
 8002ff6:	f7fe fd8f 	bl	8001b18 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <prvInitialiseTaskLists+0x78>)
 8002ffc:	4a05      	ldr	r2, [pc, #20]	; (8003014 <prvInitialiseTaskLists+0x64>)
 8002ffe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003000:	4b0a      	ldr	r3, [pc, #40]	; (800302c <prvInitialiseTaskLists+0x7c>)
 8003002:	4a05      	ldr	r2, [pc, #20]	; (8003018 <prvInitialiseTaskLists+0x68>)
 8003004:	601a      	str	r2, [r3, #0]
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	200000d8 	.word	0x200000d8
 8003014:	2000013c 	.word	0x2000013c
 8003018:	20000150 	.word	0x20000150
 800301c:	2000016c 	.word	0x2000016c
 8003020:	20000180 	.word	0x20000180
 8003024:	20000198 	.word	0x20000198
 8003028:	20000164 	.word	0x20000164
 800302c:	20000168 	.word	0x20000168

08003030 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003036:	e019      	b.n	800306c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003038:	f000 fd96 	bl	8003b68 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800303c:	4b10      	ldr	r3, [pc, #64]	; (8003080 <prvCheckTasksWaitingTermination+0x50>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3304      	adds	r3, #4
 8003048:	4618      	mov	r0, r3
 800304a:	f7fe fdef 	bl	8001c2c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800304e:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <prvCheckTasksWaitingTermination+0x54>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	3b01      	subs	r3, #1
 8003054:	4a0b      	ldr	r2, [pc, #44]	; (8003084 <prvCheckTasksWaitingTermination+0x54>)
 8003056:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <prvCheckTasksWaitingTermination+0x58>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3b01      	subs	r3, #1
 800305e:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <prvCheckTasksWaitingTermination+0x58>)
 8003060:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003062:	f000 fdb1 	bl	8003bc8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f810 	bl	800308c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800306c:	4b06      	ldr	r3, [pc, #24]	; (8003088 <prvCheckTasksWaitingTermination+0x58>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1e1      	bne.n	8003038 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003074:	bf00      	nop
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20000180 	.word	0x20000180
 8003084:	200001ac 	.word	0x200001ac
 8003088:	20000194 	.word	0x20000194

0800308c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	4618      	mov	r0, r3
 800309a:	f000 ff67 	bl	8003f6c <vPortFree>
                vPortFree( pxTCB );
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 ff64 	bl	8003f6c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80030a4:	bf00      	nop
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030b0:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <prvResetNextTaskUnblockTime+0x30>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d104      	bne.n	80030c4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80030ba:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <prvResetNextTaskUnblockTime+0x34>)
 80030bc:	f04f 32ff 	mov.w	r2, #4294967295
 80030c0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80030c2:	e005      	b.n	80030d0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80030c4:	4b05      	ldr	r3, [pc, #20]	; (80030dc <prvResetNextTaskUnblockTime+0x30>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a04      	ldr	r2, [pc, #16]	; (80030e0 <prvResetNextTaskUnblockTime+0x34>)
 80030ce:	6013      	str	r3, [r2, #0]
}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	20000164 	.word	0x20000164
 80030e0:	200001cc 	.word	0x200001cc

080030e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80030ea:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <xTaskGetSchedulerState+0x34>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d102      	bne.n	80030f8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80030f2:	2301      	movs	r3, #1
 80030f4:	607b      	str	r3, [r7, #4]
 80030f6:	e008      	b.n	800310a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030f8:	4b08      	ldr	r3, [pc, #32]	; (800311c <xTaskGetSchedulerState+0x38>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d102      	bne.n	8003106 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003100:	2302      	movs	r3, #2
 8003102:	607b      	str	r3, [r7, #4]
 8003104:	e001      	b.n	800310a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003106:	2300      	movs	r3, #0
 8003108:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800310a:	687b      	ldr	r3, [r7, #4]
    }
 800310c:	4618      	mov	r0, r3
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	200001b8 	.word	0x200001b8
 800311c:	200001d4 	.word	0x200001d4

08003120 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800312c:	2300      	movs	r3, #0
 800312e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d063      	beq.n	80031fe <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003136:	4b34      	ldr	r3, [pc, #208]	; (8003208 <xTaskPriorityDisinherit+0xe8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	429a      	cmp	r2, r3
 800313e:	d00a      	beq.n	8003156 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	60fb      	str	r3, [r7, #12]
    }
 8003152:	bf00      	nop
 8003154:	e7fe      	b.n	8003154 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10a      	bne.n	8003174 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800315e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003162:	f383 8811 	msr	BASEPRI, r3
 8003166:	f3bf 8f6f 	isb	sy
 800316a:	f3bf 8f4f 	dsb	sy
 800316e:	60bb      	str	r3, [r7, #8]
    }
 8003170:	bf00      	nop
 8003172:	e7fe      	b.n	8003172 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003178:	1e5a      	subs	r2, r3, #1
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003186:	429a      	cmp	r2, r3
 8003188:	d039      	beq.n	80031fe <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318e:	2b00      	cmp	r3, #0
 8003190:	d135      	bne.n	80031fe <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	3304      	adds	r3, #4
 8003196:	4618      	mov	r0, r3
 8003198:	f7fe fd48 	bl	8001c2c <uxListRemove>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10a      	bne.n	80031b8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a6:	2201      	movs	r2, #1
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43da      	mvns	r2, r3
 80031ae:	4b17      	ldr	r3, [pc, #92]	; (800320c <xTaskPriorityDisinherit+0xec>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4013      	ands	r3, r2
 80031b4:	4a15      	ldr	r2, [pc, #84]	; (800320c <xTaskPriorityDisinherit+0xec>)
 80031b6:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c4:	f1c3 0205 	rsb	r2, r3, #5
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	2201      	movs	r2, #1
 80031d2:	409a      	lsls	r2, r3
 80031d4:	4b0d      	ldr	r3, [pc, #52]	; (800320c <xTaskPriorityDisinherit+0xec>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4313      	orrs	r3, r2
 80031da:	4a0c      	ldr	r2, [pc, #48]	; (800320c <xTaskPriorityDisinherit+0xec>)
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4a09      	ldr	r2, [pc, #36]	; (8003210 <xTaskPriorityDisinherit+0xf0>)
 80031ec:	441a      	add	r2, r3
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	3304      	adds	r3, #4
 80031f2:	4619      	mov	r1, r3
 80031f4:	4610      	mov	r0, r2
 80031f6:	f7fe fcbc 	bl	8001b72 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80031fa:	2301      	movs	r3, #1
 80031fc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80031fe:	697b      	ldr	r3, [r7, #20]
    }
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	200000d4 	.word	0x200000d4
 800320c:	200001b4 	.word	0x200001b4
 8003210:	200000d8 	.word	0x200000d8

08003214 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800321e:	4b29      	ldr	r3, [pc, #164]	; (80032c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003224:	4b28      	ldr	r3, [pc, #160]	; (80032c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	3304      	adds	r3, #4
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe fcfe 	bl	8001c2c <uxListRemove>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10b      	bne.n	800324e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003236:	4b24      	ldr	r3, [pc, #144]	; (80032c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	2201      	movs	r2, #1
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43da      	mvns	r2, r3
 8003244:	4b21      	ldr	r3, [pc, #132]	; (80032cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4013      	ands	r3, r2
 800324a:	4a20      	ldr	r2, [pc, #128]	; (80032cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800324c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003254:	d10a      	bne.n	800326c <prvAddCurrentTaskToDelayedList+0x58>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d007      	beq.n	800326c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800325c:	4b1a      	ldr	r3, [pc, #104]	; (80032c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3304      	adds	r3, #4
 8003262:	4619      	mov	r1, r3
 8003264:	481a      	ldr	r0, [pc, #104]	; (80032d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003266:	f7fe fc84 	bl	8001b72 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800326a:	e026      	b.n	80032ba <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4413      	add	r3, r2
 8003272:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003274:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	429a      	cmp	r2, r3
 8003282:	d209      	bcs.n	8003298 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003284:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	4b0f      	ldr	r3, [pc, #60]	; (80032c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3304      	adds	r3, #4
 800328e:	4619      	mov	r1, r3
 8003290:	4610      	mov	r0, r2
 8003292:	f7fe fc92 	bl	8001bba <vListInsert>
}
 8003296:	e010      	b.n	80032ba <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003298:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3304      	adds	r3, #4
 80032a2:	4619      	mov	r1, r3
 80032a4:	4610      	mov	r0, r2
 80032a6:	f7fe fc88 	bl	8001bba <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80032aa:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d202      	bcs.n	80032ba <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80032b4:	4a09      	ldr	r2, [pc, #36]	; (80032dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	6013      	str	r3, [r2, #0]
}
 80032ba:	bf00      	nop
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	200001b0 	.word	0x200001b0
 80032c8:	200000d4 	.word	0x200000d4
 80032cc:	200001b4 	.word	0x200001b4
 80032d0:	20000198 	.word	0x20000198
 80032d4:	20000168 	.word	0x20000168
 80032d8:	20000164 	.word	0x20000164
 80032dc:	200001cc 	.word	0x200001cc

080032e0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80032ea:	f000 fad5 	bl	8003898 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80032ee:	4b11      	ldr	r3, [pc, #68]	; (8003334 <xTimerCreateTimerTask+0x54>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00b      	beq.n	800330e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80032f6:	4b10      	ldr	r3, [pc, #64]	; (8003338 <xTimerCreateTimerTask+0x58>)
 80032f8:	9301      	str	r3, [sp, #4]
 80032fa:	2302      	movs	r3, #2
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	2300      	movs	r3, #0
 8003300:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003304:	490d      	ldr	r1, [pc, #52]	; (800333c <xTimerCreateTimerTask+0x5c>)
 8003306:	480e      	ldr	r0, [pc, #56]	; (8003340 <xTimerCreateTimerTask+0x60>)
 8003308:	f7ff f99a 	bl	8002640 <xTaskCreate>
 800330c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10a      	bne.n	800332a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	603b      	str	r3, [r7, #0]
    }
 8003326:	bf00      	nop
 8003328:	e7fe      	b.n	8003328 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800332a:	687b      	ldr	r3, [r7, #4]
    }
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	20000208 	.word	0x20000208
 8003338:	2000020c 	.word	0x2000020c
 800333c:	0800509c 	.word	0x0800509c
 8003340:	08003479 	.word	0x08003479

08003344 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003344:	b580      	push	{r7, lr}
 8003346:	b08a      	sub	sp, #40	; 0x28
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003352:	2300      	movs	r3, #0
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10a      	bne.n	8003372 <xTimerGenericCommand+0x2e>
        __asm volatile
 800335c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003360:	f383 8811 	msr	BASEPRI, r3
 8003364:	f3bf 8f6f 	isb	sy
 8003368:	f3bf 8f4f 	dsb	sy
 800336c:	623b      	str	r3, [r7, #32]
    }
 800336e:	bf00      	nop
 8003370:	e7fe      	b.n	8003370 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003372:	4b1a      	ldr	r3, [pc, #104]	; (80033dc <xTimerGenericCommand+0x98>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d02a      	beq.n	80033d0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b05      	cmp	r3, #5
 800338a:	dc18      	bgt.n	80033be <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800338c:	f7ff feaa 	bl	80030e4 <xTaskGetSchedulerState>
 8003390:	4603      	mov	r3, r0
 8003392:	2b02      	cmp	r3, #2
 8003394:	d109      	bne.n	80033aa <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003396:	4b11      	ldr	r3, [pc, #68]	; (80033dc <xTimerGenericCommand+0x98>)
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	f107 0114 	add.w	r1, r7, #20
 800339e:	2300      	movs	r3, #0
 80033a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033a2:	f7fe fd57 	bl	8001e54 <xQueueGenericSend>
 80033a6:	6278      	str	r0, [r7, #36]	; 0x24
 80033a8:	e012      	b.n	80033d0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80033aa:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <xTimerGenericCommand+0x98>)
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	f107 0114 	add.w	r1, r7, #20
 80033b2:	2300      	movs	r3, #0
 80033b4:	2200      	movs	r2, #0
 80033b6:	f7fe fd4d 	bl	8001e54 <xQueueGenericSend>
 80033ba:	6278      	str	r0, [r7, #36]	; 0x24
 80033bc:	e008      	b.n	80033d0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80033be:	4b07      	ldr	r3, [pc, #28]	; (80033dc <xTimerGenericCommand+0x98>)
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	f107 0114 	add.w	r1, r7, #20
 80033c6:	2300      	movs	r3, #0
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	f7fe fe41 	bl	8002050 <xQueueGenericSendFromISR>
 80033ce:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80033d2:	4618      	mov	r0, r3
 80033d4:	3728      	adds	r7, #40	; 0x28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	20000208 	.word	0x20000208

080033e0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af02      	add	r7, sp, #8
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033ea:	4b22      	ldr	r3, [pc, #136]	; (8003474 <prvProcessExpiredTimer+0x94>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	3304      	adds	r3, #4
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fe fc17 	bl	8001c2c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d022      	beq.n	8003452 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	699a      	ldr	r2, [r3, #24]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	18d1      	adds	r1, r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	6978      	ldr	r0, [r7, #20]
 800341a:	f000 f8d1 	bl	80035c0 <prvInsertTimerInActiveList>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01f      	beq.n	8003464 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003424:	2300      	movs	r3, #0
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	2300      	movs	r3, #0
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	2100      	movs	r1, #0
 800342e:	6978      	ldr	r0, [r7, #20]
 8003430:	f7ff ff88 	bl	8003344 <xTimerGenericCommand>
 8003434:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d113      	bne.n	8003464 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800343c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003440:	f383 8811 	msr	BASEPRI, r3
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	60fb      	str	r3, [r7, #12]
    }
 800344e:	bf00      	nop
 8003450:	e7fe      	b.n	8003450 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003458:	f023 0301 	bic.w	r3, r3, #1
 800345c:	b2da      	uxtb	r2, r3
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	6978      	ldr	r0, [r7, #20]
 800346a:	4798      	blx	r3
    }
 800346c:	bf00      	nop
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000200 	.word	0x20000200

08003478 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003480:	f107 0308 	add.w	r3, r7, #8
 8003484:	4618      	mov	r0, r3
 8003486:	f000 f857 	bl	8003538 <prvGetNextExpireTime>
 800348a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	4619      	mov	r1, r3
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 f803 	bl	800349c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003496:	f000 f8d5 	bl	8003644 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800349a:	e7f1      	b.n	8003480 <prvTimerTask+0x8>

0800349c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80034a6:	f7ff fa63 	bl	8002970 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80034aa:	f107 0308 	add.w	r3, r7, #8
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 f866 	bl	8003580 <prvSampleTimeNow>
 80034b4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d130      	bne.n	800351e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10a      	bne.n	80034d8 <prvProcessTimerOrBlockTask+0x3c>
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d806      	bhi.n	80034d8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80034ca:	f7ff fa5f 	bl	800298c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80034ce:	68f9      	ldr	r1, [r7, #12]
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff ff85 	bl	80033e0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80034d6:	e024      	b.n	8003522 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d008      	beq.n	80034f0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80034de:	4b13      	ldr	r3, [pc, #76]	; (800352c <prvProcessTimerOrBlockTask+0x90>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <prvProcessTimerOrBlockTask+0x50>
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <prvProcessTimerOrBlockTask+0x52>
 80034ec:	2300      	movs	r3, #0
 80034ee:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80034f0:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <prvProcessTimerOrBlockTask+0x94>)
 80034f2:	6818      	ldr	r0, [r3, #0]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	4619      	mov	r1, r3
 80034fe:	f7ff f86b 	bl	80025d8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003502:	f7ff fa43 	bl	800298c <xTaskResumeAll>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10a      	bne.n	8003522 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800350c:	4b09      	ldr	r3, [pc, #36]	; (8003534 <prvProcessTimerOrBlockTask+0x98>)
 800350e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	f3bf 8f6f 	isb	sy
    }
 800351c:	e001      	b.n	8003522 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800351e:	f7ff fa35 	bl	800298c <xTaskResumeAll>
    }
 8003522:	bf00      	nop
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000204 	.word	0x20000204
 8003530:	20000208 	.word	0x20000208
 8003534:	e000ed04 	.word	0xe000ed04

08003538 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003540:	4b0e      	ldr	r3, [pc, #56]	; (800357c <prvGetNextExpireTime+0x44>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <prvGetNextExpireTime+0x16>
 800354a:	2201      	movs	r2, #1
 800354c:	e000      	b.n	8003550 <prvGetNextExpireTime+0x18>
 800354e:	2200      	movs	r2, #0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d105      	bne.n	8003568 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800355c:	4b07      	ldr	r3, [pc, #28]	; (800357c <prvGetNextExpireTime+0x44>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	e001      	b.n	800356c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800356c:	68fb      	ldr	r3, [r7, #12]
    }
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	20000200 	.word	0x20000200

08003580 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003588:	f7ff fa9c 	bl	8002ac4 <xTaskGetTickCount>
 800358c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800358e:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <prvSampleTimeNow+0x3c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	429a      	cmp	r2, r3
 8003596:	d205      	bcs.n	80035a4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003598:	f000 f91a 	bl	80037d0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	e002      	b.n	80035aa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80035aa:	4a04      	ldr	r2, [pc, #16]	; (80035bc <prvSampleTimeNow+0x3c>)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80035b0:	68fb      	ldr	r3, [r7, #12]
    }
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20000210 	.word	0x20000210

080035c0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d812      	bhi.n	800360c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	1ad2      	subs	r2, r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d302      	bcc.n	80035fa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80035f4:	2301      	movs	r3, #1
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	e01b      	b.n	8003632 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80035fa:	4b10      	ldr	r3, [pc, #64]	; (800363c <prvInsertTimerInActiveList+0x7c>)
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	3304      	adds	r3, #4
 8003602:	4619      	mov	r1, r3
 8003604:	4610      	mov	r0, r2
 8003606:	f7fe fad8 	bl	8001bba <vListInsert>
 800360a:	e012      	b.n	8003632 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d206      	bcs.n	8003622 <prvInsertTimerInActiveList+0x62>
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d302      	bcc.n	8003622 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800361c:	2301      	movs	r3, #1
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	e007      	b.n	8003632 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003622:	4b07      	ldr	r3, [pc, #28]	; (8003640 <prvInsertTimerInActiveList+0x80>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	3304      	adds	r3, #4
 800362a:	4619      	mov	r1, r3
 800362c:	4610      	mov	r0, r2
 800362e:	f7fe fac4 	bl	8001bba <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003632:	697b      	ldr	r3, [r7, #20]
    }
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	20000204 	.word	0x20000204
 8003640:	20000200 	.word	0x20000200

08003644 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003644:	b580      	push	{r7, lr}
 8003646:	b08c      	sub	sp, #48	; 0x30
 8003648:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800364a:	e0ae      	b.n	80037aa <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	f2c0 80ab 	blt.w	80037aa <prvProcessReceivedCommands+0x166>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d004      	beq.n	800366a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	3304      	adds	r3, #4
 8003664:	4618      	mov	r0, r3
 8003666:	f7fe fae1 	bl	8001c2c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800366a:	1d3b      	adds	r3, r7, #4
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff ff87 	bl	8003580 <prvSampleTimeNow>
 8003672:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b09      	cmp	r3, #9
 8003678:	f200 8096 	bhi.w	80037a8 <prvProcessReceivedCommands+0x164>
 800367c:	a201      	add	r2, pc, #4	; (adr r2, 8003684 <prvProcessReceivedCommands+0x40>)
 800367e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003682:	bf00      	nop
 8003684:	080036ad 	.word	0x080036ad
 8003688:	080036ad 	.word	0x080036ad
 800368c:	080036ad 	.word	0x080036ad
 8003690:	08003721 	.word	0x08003721
 8003694:	08003735 	.word	0x08003735
 8003698:	0800377f 	.word	0x0800377f
 800369c:	080036ad 	.word	0x080036ad
 80036a0:	080036ad 	.word	0x080036ad
 80036a4:	08003721 	.word	0x08003721
 80036a8:	08003735 	.word	0x08003735
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	18d1      	adds	r1, r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6a3a      	ldr	r2, [r7, #32]
 80036ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036cc:	f7ff ff78 	bl	80035c0 <prvInsertTimerInActiveList>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d069      	beq.n	80037aa <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036dc:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d05e      	beq.n	80037aa <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	441a      	add	r2, r3
 80036f4:	2300      	movs	r3, #0
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	2300      	movs	r3, #0
 80036fa:	2100      	movs	r1, #0
 80036fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036fe:	f7ff fe21 	bl	8003344 <xTimerGenericCommand>
 8003702:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d14f      	bne.n	80037aa <prvProcessReceivedCommands+0x166>
        __asm volatile
 800370a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370e:	f383 8811 	msr	BASEPRI, r3
 8003712:	f3bf 8f6f 	isb	sy
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	61bb      	str	r3, [r7, #24]
    }
 800371c:	bf00      	nop
 800371e:	e7fe      	b.n	800371e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003726:	f023 0301 	bic.w	r3, r3, #1
 800372a:	b2da      	uxtb	r2, r3
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003732:	e03a      	b.n	80037aa <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	b2da      	uxtb	r2, r3
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10a      	bne.n	800376a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	617b      	str	r3, [r7, #20]
    }
 8003766:	bf00      	nop
 8003768:	e7fe      	b.n	8003768 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	18d1      	adds	r1, r2, r3
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	6a3a      	ldr	r2, [r7, #32]
 8003776:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003778:	f7ff ff22 	bl	80035c0 <prvInsertTimerInActiveList>
                        break;
 800377c:	e015      	b.n	80037aa <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d103      	bne.n	8003794 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800378c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800378e:	f000 fbed 	bl	8003f6c <vPortFree>
 8003792:	e00a      	b.n	80037aa <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800379a:	f023 0301 	bic.w	r3, r3, #1
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80037a6:	e000      	b.n	80037aa <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
 80037a8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80037aa:	4b08      	ldr	r3, [pc, #32]	; (80037cc <prvProcessReceivedCommands+0x188>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f107 0108 	add.w	r1, r7, #8
 80037b2:	2200      	movs	r2, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fe fcf5 	bl	80021a4 <xQueueReceive>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f47f af45 	bne.w	800364c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80037c2:	bf00      	nop
 80037c4:	bf00      	nop
 80037c6:	3728      	adds	r7, #40	; 0x28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20000208 	.word	0x20000208

080037d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80037d6:	e048      	b.n	800386a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037d8:	4b2d      	ldr	r3, [pc, #180]	; (8003890 <prvSwitchTimerLists+0xc0>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037e2:	4b2b      	ldr	r3, [pc, #172]	; (8003890 <prvSwitchTimerLists+0xc0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	3304      	adds	r3, #4
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fe fa1b 	bl	8001c2c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d02e      	beq.n	800386a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	4413      	add	r3, r2
 8003814:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	429a      	cmp	r2, r3
 800381c:	d90e      	bls.n	800383c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800382a:	4b19      	ldr	r3, [pc, #100]	; (8003890 <prvSwitchTimerLists+0xc0>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	3304      	adds	r3, #4
 8003832:	4619      	mov	r1, r3
 8003834:	4610      	mov	r0, r2
 8003836:	f7fe f9c0 	bl	8001bba <vListInsert>
 800383a:	e016      	b.n	800386a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800383c:	2300      	movs	r3, #0
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	2300      	movs	r3, #0
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	2100      	movs	r1, #0
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f7ff fd7c 	bl	8003344 <xTimerGenericCommand>
 800384c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10a      	bne.n	800386a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	603b      	str	r3, [r7, #0]
    }
 8003866:	bf00      	nop
 8003868:	e7fe      	b.n	8003868 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800386a:	4b09      	ldr	r3, [pc, #36]	; (8003890 <prvSwitchTimerLists+0xc0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1b1      	bne.n	80037d8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003874:	4b06      	ldr	r3, [pc, #24]	; (8003890 <prvSwitchTimerLists+0xc0>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800387a:	4b06      	ldr	r3, [pc, #24]	; (8003894 <prvSwitchTimerLists+0xc4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a04      	ldr	r2, [pc, #16]	; (8003890 <prvSwitchTimerLists+0xc0>)
 8003880:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003882:	4a04      	ldr	r2, [pc, #16]	; (8003894 <prvSwitchTimerLists+0xc4>)
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	6013      	str	r3, [r2, #0]
    }
 8003888:	bf00      	nop
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	20000200 	.word	0x20000200
 8003894:	20000204 	.word	0x20000204

08003898 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800389c:	f000 f964 	bl	8003b68 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80038a0:	4b12      	ldr	r3, [pc, #72]	; (80038ec <prvCheckForValidListAndQueue+0x54>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d11d      	bne.n	80038e4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80038a8:	4811      	ldr	r0, [pc, #68]	; (80038f0 <prvCheckForValidListAndQueue+0x58>)
 80038aa:	f7fe f935 	bl	8001b18 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80038ae:	4811      	ldr	r0, [pc, #68]	; (80038f4 <prvCheckForValidListAndQueue+0x5c>)
 80038b0:	f7fe f932 	bl	8001b18 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80038b4:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <prvCheckForValidListAndQueue+0x60>)
 80038b6:	4a0e      	ldr	r2, [pc, #56]	; (80038f0 <prvCheckForValidListAndQueue+0x58>)
 80038b8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80038ba:	4b10      	ldr	r3, [pc, #64]	; (80038fc <prvCheckForValidListAndQueue+0x64>)
 80038bc:	4a0d      	ldr	r2, [pc, #52]	; (80038f4 <prvCheckForValidListAndQueue+0x5c>)
 80038be:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80038c0:	2200      	movs	r2, #0
 80038c2:	210c      	movs	r1, #12
 80038c4:	200a      	movs	r0, #10
 80038c6:	f7fe fa43 	bl	8001d50 <xQueueGenericCreate>
 80038ca:	4603      	mov	r3, r0
 80038cc:	4a07      	ldr	r2, [pc, #28]	; (80038ec <prvCheckForValidListAndQueue+0x54>)
 80038ce:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80038d0:	4b06      	ldr	r3, [pc, #24]	; (80038ec <prvCheckForValidListAndQueue+0x54>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80038d8:	4b04      	ldr	r3, [pc, #16]	; (80038ec <prvCheckForValidListAndQueue+0x54>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4908      	ldr	r1, [pc, #32]	; (8003900 <prvCheckForValidListAndQueue+0x68>)
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fe fe50 	bl	8002584 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80038e4:	f000 f970 	bl	8003bc8 <vPortExitCritical>
    }
 80038e8:	bf00      	nop
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	20000208 	.word	0x20000208
 80038f0:	200001d8 	.word	0x200001d8
 80038f4:	200001ec 	.word	0x200001ec
 80038f8:	20000200 	.word	0x20000200
 80038fc:	20000204 	.word	0x20000204
 8003900:	080050a4 	.word	0x080050a4

08003904 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	3b04      	subs	r3, #4
 8003914:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800391c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	3b04      	subs	r3, #4
 8003922:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f023 0201 	bic.w	r2, r3, #1
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	3b04      	subs	r3, #4
 8003932:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003934:	4a0c      	ldr	r2, [pc, #48]	; (8003968 <pxPortInitialiseStack+0x64>)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	3b14      	subs	r3, #20
 800393e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	3b04      	subs	r3, #4
 800394a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f06f 0202 	mvn.w	r2, #2
 8003952:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	3b20      	subs	r3, #32
 8003958:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800395a:	68fb      	ldr	r3, [r7, #12]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	0800396d 	.word	0x0800396d

0800396c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003972:	2300      	movs	r3, #0
 8003974:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003976:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <prvTaskExitError+0x54>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397e:	d00a      	beq.n	8003996 <prvTaskExitError+0x2a>
        __asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	60fb      	str	r3, [r7, #12]
    }
 8003992:	bf00      	nop
 8003994:	e7fe      	b.n	8003994 <prvTaskExitError+0x28>
        __asm volatile
 8003996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399a:	f383 8811 	msr	BASEPRI, r3
 800399e:	f3bf 8f6f 	isb	sy
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	60bb      	str	r3, [r7, #8]
    }
 80039a8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80039aa:	bf00      	nop
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0fc      	beq.n	80039ac <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80039b2:	bf00      	nop
 80039b4:	bf00      	nop
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	20000010 	.word	0x20000010
	...

080039d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80039d0:	4b07      	ldr	r3, [pc, #28]	; (80039f0 <pxCurrentTCBConst2>)
 80039d2:	6819      	ldr	r1, [r3, #0]
 80039d4:	6808      	ldr	r0, [r1, #0]
 80039d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039da:	f380 8809 	msr	PSP, r0
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f04f 0000 	mov.w	r0, #0
 80039e6:	f380 8811 	msr	BASEPRI, r0
 80039ea:	4770      	bx	lr
 80039ec:	f3af 8000 	nop.w

080039f0 <pxCurrentTCBConst2>:
 80039f0:	200000d4 	.word	0x200000d4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80039f4:	bf00      	nop
 80039f6:	bf00      	nop

080039f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80039f8:	4808      	ldr	r0, [pc, #32]	; (8003a1c <prvPortStartFirstTask+0x24>)
 80039fa:	6800      	ldr	r0, [r0, #0]
 80039fc:	6800      	ldr	r0, [r0, #0]
 80039fe:	f380 8808 	msr	MSP, r0
 8003a02:	f04f 0000 	mov.w	r0, #0
 8003a06:	f380 8814 	msr	CONTROL, r0
 8003a0a:	b662      	cpsie	i
 8003a0c:	b661      	cpsie	f
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	f3bf 8f6f 	isb	sy
 8003a16:	df00      	svc	0
 8003a18:	bf00      	nop
 8003a1a:	0000      	.short	0x0000
 8003a1c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003a20:	bf00      	nop
 8003a22:	bf00      	nop

08003a24 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003a2a:	4b46      	ldr	r3, [pc, #280]	; (8003b44 <xPortStartScheduler+0x120>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a46      	ldr	r2, [pc, #280]	; (8003b48 <xPortStartScheduler+0x124>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d10a      	bne.n	8003a4a <xPortStartScheduler+0x26>
        __asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	613b      	str	r3, [r7, #16]
    }
 8003a46:	bf00      	nop
 8003a48:	e7fe      	b.n	8003a48 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003a4a:	4b3e      	ldr	r3, [pc, #248]	; (8003b44 <xPortStartScheduler+0x120>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a3f      	ldr	r2, [pc, #252]	; (8003b4c <xPortStartScheduler+0x128>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d10a      	bne.n	8003a6a <xPortStartScheduler+0x46>
        __asm volatile
 8003a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	60fb      	str	r3, [r7, #12]
    }
 8003a66:	bf00      	nop
 8003a68:	e7fe      	b.n	8003a68 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a6a:	4b39      	ldr	r3, [pc, #228]	; (8003b50 <xPortStartScheduler+0x12c>)
 8003a6c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	22ff      	movs	r2, #255	; 0xff
 8003a7a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a84:	78fb      	ldrb	r3, [r7, #3]
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	4b31      	ldr	r3, [pc, #196]	; (8003b54 <xPortStartScheduler+0x130>)
 8003a90:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a92:	4b31      	ldr	r3, [pc, #196]	; (8003b58 <xPortStartScheduler+0x134>)
 8003a94:	2207      	movs	r2, #7
 8003a96:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a98:	e009      	b.n	8003aae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003a9a:	4b2f      	ldr	r3, [pc, #188]	; (8003b58 <xPortStartScheduler+0x134>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	4a2d      	ldr	r2, [pc, #180]	; (8003b58 <xPortStartScheduler+0x134>)
 8003aa2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003aa4:	78fb      	ldrb	r3, [r7, #3]
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003aae:	78fb      	ldrb	r3, [r7, #3]
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab6:	2b80      	cmp	r3, #128	; 0x80
 8003ab8:	d0ef      	beq.n	8003a9a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003aba:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <xPortStartScheduler+0x134>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f1c3 0307 	rsb	r3, r3, #7
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d00a      	beq.n	8003adc <xPortStartScheduler+0xb8>
        __asm volatile
 8003ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aca:	f383 8811 	msr	BASEPRI, r3
 8003ace:	f3bf 8f6f 	isb	sy
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	60bb      	str	r3, [r7, #8]
    }
 8003ad8:	bf00      	nop
 8003ada:	e7fe      	b.n	8003ada <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003adc:	4b1e      	ldr	r3, [pc, #120]	; (8003b58 <xPortStartScheduler+0x134>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	021b      	lsls	r3, r3, #8
 8003ae2:	4a1d      	ldr	r2, [pc, #116]	; (8003b58 <xPortStartScheduler+0x134>)
 8003ae4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ae6:	4b1c      	ldr	r3, [pc, #112]	; (8003b58 <xPortStartScheduler+0x134>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003aee:	4a1a      	ldr	r2, [pc, #104]	; (8003b58 <xPortStartScheduler+0x134>)
 8003af0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003afa:	4b18      	ldr	r3, [pc, #96]	; (8003b5c <xPortStartScheduler+0x138>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a17      	ldr	r2, [pc, #92]	; (8003b5c <xPortStartScheduler+0x138>)
 8003b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b04:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003b06:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <xPortStartScheduler+0x138>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a14      	ldr	r2, [pc, #80]	; (8003b5c <xPortStartScheduler+0x138>)
 8003b0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003b10:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003b12:	f000 f8db 	bl	8003ccc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003b16:	4b12      	ldr	r3, [pc, #72]	; (8003b60 <xPortStartScheduler+0x13c>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003b1c:	f000 f8fa 	bl	8003d14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003b20:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <xPortStartScheduler+0x140>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a0f      	ldr	r2, [pc, #60]	; (8003b64 <xPortStartScheduler+0x140>)
 8003b26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003b2a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003b2c:	f7ff ff64 	bl	80039f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003b30:	f7ff f890 	bl	8002c54 <vTaskSwitchContext>
    prvTaskExitError();
 8003b34:	f7ff ff1a 	bl	800396c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	e000ed00 	.word	0xe000ed00
 8003b48:	410fc271 	.word	0x410fc271
 8003b4c:	410fc270 	.word	0x410fc270
 8003b50:	e000e400 	.word	0xe000e400
 8003b54:	20000214 	.word	0x20000214
 8003b58:	20000218 	.word	0x20000218
 8003b5c:	e000ed20 	.word	0xe000ed20
 8003b60:	20000010 	.word	0x20000010
 8003b64:	e000ef34 	.word	0xe000ef34

08003b68 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
        __asm volatile
 8003b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	607b      	str	r3, [r7, #4]
    }
 8003b80:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003b82:	4b0f      	ldr	r3, [pc, #60]	; (8003bc0 <vPortEnterCritical+0x58>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3301      	adds	r3, #1
 8003b88:	4a0d      	ldr	r2, [pc, #52]	; (8003bc0 <vPortEnterCritical+0x58>)
 8003b8a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <vPortEnterCritical+0x58>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d10f      	bne.n	8003bb4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <vPortEnterCritical+0x5c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <vPortEnterCritical+0x4c>
        __asm volatile
 8003b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba2:	f383 8811 	msr	BASEPRI, r3
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	603b      	str	r3, [r7, #0]
    }
 8003bb0:	bf00      	nop
 8003bb2:	e7fe      	b.n	8003bb2 <vPortEnterCritical+0x4a>
    }
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	20000010 	.word	0x20000010
 8003bc4:	e000ed04 	.word	0xe000ed04

08003bc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003bce:	4b12      	ldr	r3, [pc, #72]	; (8003c18 <vPortExitCritical+0x50>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10a      	bne.n	8003bec <vPortExitCritical+0x24>
        __asm volatile
 8003bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	607b      	str	r3, [r7, #4]
    }
 8003be8:	bf00      	nop
 8003bea:	e7fe      	b.n	8003bea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003bec:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <vPortExitCritical+0x50>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	4a09      	ldr	r2, [pc, #36]	; (8003c18 <vPortExitCritical+0x50>)
 8003bf4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003bf6:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <vPortExitCritical+0x50>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d105      	bne.n	8003c0a <vPortExitCritical+0x42>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	f383 8811 	msr	BASEPRI, r3
    }
 8003c08:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	20000010 	.word	0x20000010
 8003c1c:	00000000 	.word	0x00000000

08003c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003c20:	f3ef 8009 	mrs	r0, PSP
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	4b15      	ldr	r3, [pc, #84]	; (8003c80 <pxCurrentTCBConst>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	f01e 0f10 	tst.w	lr, #16
 8003c30:	bf08      	it	eq
 8003c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c3a:	6010      	str	r0, [r2, #0]
 8003c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003c44:	f380 8811 	msr	BASEPRI, r0
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f7ff f800 	bl	8002c54 <vTaskSwitchContext>
 8003c54:	f04f 0000 	mov.w	r0, #0
 8003c58:	f380 8811 	msr	BASEPRI, r0
 8003c5c:	bc09      	pop	{r0, r3}
 8003c5e:	6819      	ldr	r1, [r3, #0]
 8003c60:	6808      	ldr	r0, [r1, #0]
 8003c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c66:	f01e 0f10 	tst.w	lr, #16
 8003c6a:	bf08      	it	eq
 8003c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003c70:	f380 8809 	msr	PSP, r0
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	f3af 8000 	nop.w

08003c80 <pxCurrentTCBConst>:
 8003c80:	200000d4 	.word	0x200000d4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop

08003c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
        __asm volatile
 8003c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c92:	f383 8811 	msr	BASEPRI, r3
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	607b      	str	r3, [r7, #4]
    }
 8003ca0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003ca2:	f7fe ff1f 	bl	8002ae4 <xTaskIncrementTick>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003cac:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <SysTick_Handler+0x40>)
 8003cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	f383 8811 	msr	BASEPRI, r3
    }
 8003cbe:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8003cc0:	bf00      	nop
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	e000ed04 	.word	0xe000ed04

08003ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <vPortSetupTimerInterrupt+0x34>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003cd6:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <vPortSetupTimerInterrupt+0x38>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003cdc:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <vPortSetupTimerInterrupt+0x3c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a0a      	ldr	r2, [pc, #40]	; (8003d0c <vPortSetupTimerInterrupt+0x40>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	099b      	lsrs	r3, r3, #6
 8003ce8:	4a09      	ldr	r2, [pc, #36]	; (8003d10 <vPortSetupTimerInterrupt+0x44>)
 8003cea:	3b01      	subs	r3, #1
 8003cec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003cee:	4b04      	ldr	r3, [pc, #16]	; (8003d00 <vPortSetupTimerInterrupt+0x34>)
 8003cf0:	2207      	movs	r2, #7
 8003cf2:	601a      	str	r2, [r3, #0]
}
 8003cf4:	bf00      	nop
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	e000e010 	.word	0xe000e010
 8003d04:	e000e018 	.word	0xe000e018
 8003d08:	20000000 	.word	0x20000000
 8003d0c:	10624dd3 	.word	0x10624dd3
 8003d10:	e000e014 	.word	0xe000e014

08003d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003d14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003d24 <vPortEnableVFP+0x10>
 8003d18:	6801      	ldr	r1, [r0, #0]
 8003d1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003d1e:	6001      	str	r1, [r0, #0]
 8003d20:	4770      	bx	lr
 8003d22:	0000      	.short	0x0000
 8003d24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop

08003d2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003d32:	f3ef 8305 	mrs	r3, IPSR
 8003d36:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b0f      	cmp	r3, #15
 8003d3c:	d914      	bls.n	8003d68 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003d3e:	4a17      	ldr	r2, [pc, #92]	; (8003d9c <vPortValidateInterruptPriority+0x70>)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4413      	add	r3, r2
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003d48:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <vPortValidateInterruptPriority+0x74>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	7afa      	ldrb	r2, [r7, #11]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d20a      	bcs.n	8003d68 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	607b      	str	r3, [r7, #4]
    }
 8003d64:	bf00      	nop
 8003d66:	e7fe      	b.n	8003d66 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003d68:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <vPortValidateInterruptPriority+0x78>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d70:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <vPortValidateInterruptPriority+0x7c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d90a      	bls.n	8003d8e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	603b      	str	r3, [r7, #0]
    }
 8003d8a:	bf00      	nop
 8003d8c:	e7fe      	b.n	8003d8c <vPortValidateInterruptPriority+0x60>
    }
 8003d8e:	bf00      	nop
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	e000e3f0 	.word	0xe000e3f0
 8003da0:	20000214 	.word	0x20000214
 8003da4:	e000ed0c 	.word	0xe000ed0c
 8003da8:	20000218 	.word	0x20000218

08003dac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08a      	sub	sp, #40	; 0x28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003db4:	2300      	movs	r3, #0
 8003db6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003db8:	f7fe fdda 	bl	8002970 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003dbc:	4b65      	ldr	r3, [pc, #404]	; (8003f54 <pvPortMalloc+0x1a8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003dc4:	f000 f934 	bl	8004030 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003dc8:	4b63      	ldr	r3, [pc, #396]	; (8003f58 <pvPortMalloc+0x1ac>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f040 80a7 	bne.w	8003f24 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d02d      	beq.n	8003e38 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003ddc:	2208      	movs	r2, #8
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d227      	bcs.n	8003e38 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003de8:	2208      	movs	r2, #8
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4413      	add	r3, r2
 8003dee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d021      	beq.n	8003e3e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f023 0307 	bic.w	r3, r3, #7
 8003e00:	3308      	adds	r3, #8
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d214      	bcs.n	8003e32 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f023 0307 	bic.w	r3, r3, #7
 8003e0e:	3308      	adds	r3, #8
 8003e10:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d010      	beq.n	8003e3e <pvPortMalloc+0x92>
        __asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	617b      	str	r3, [r7, #20]
    }
 8003e2e:	bf00      	nop
 8003e30:	e7fe      	b.n	8003e30 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003e32:	2300      	movs	r3, #0
 8003e34:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e36:	e002      	b.n	8003e3e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	607b      	str	r3, [r7, #4]
 8003e3c:	e000      	b.n	8003e40 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e3e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d06e      	beq.n	8003f24 <pvPortMalloc+0x178>
 8003e46:	4b45      	ldr	r3, [pc, #276]	; (8003f5c <pvPortMalloc+0x1b0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d869      	bhi.n	8003f24 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003e50:	4b43      	ldr	r3, [pc, #268]	; (8003f60 <pvPortMalloc+0x1b4>)
 8003e52:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003e54:	4b42      	ldr	r3, [pc, #264]	; (8003f60 <pvPortMalloc+0x1b4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e5a:	e004      	b.n	8003e66 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d903      	bls.n	8003e78 <pvPortMalloc+0xcc>
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1f1      	bne.n	8003e5c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003e78:	4b36      	ldr	r3, [pc, #216]	; (8003f54 <pvPortMalloc+0x1a8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d050      	beq.n	8003f24 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2208      	movs	r2, #8
 8003e88:	4413      	add	r3, r2
 8003e8a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	1ad2      	subs	r2, r2, r3
 8003e9c:	2308      	movs	r3, #8
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d91f      	bls.n	8003ee4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <pvPortMalloc+0x120>
        __asm volatile
 8003eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	613b      	str	r3, [r7, #16]
    }
 8003ec8:	bf00      	nop
 8003eca:	e7fe      	b.n	8003eca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	1ad2      	subs	r2, r2, r3
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003ede:	69b8      	ldr	r0, [r7, #24]
 8003ee0:	f000 f908 	bl	80040f4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003ee4:	4b1d      	ldr	r3, [pc, #116]	; (8003f5c <pvPortMalloc+0x1b0>)
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	4a1b      	ldr	r2, [pc, #108]	; (8003f5c <pvPortMalloc+0x1b0>)
 8003ef0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003ef2:	4b1a      	ldr	r3, [pc, #104]	; (8003f5c <pvPortMalloc+0x1b0>)
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	4b1b      	ldr	r3, [pc, #108]	; (8003f64 <pvPortMalloc+0x1b8>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d203      	bcs.n	8003f06 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003efe:	4b17      	ldr	r3, [pc, #92]	; (8003f5c <pvPortMalloc+0x1b0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a18      	ldr	r2, [pc, #96]	; (8003f64 <pvPortMalloc+0x1b8>)
 8003f04:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	4b13      	ldr	r3, [pc, #76]	; (8003f58 <pvPortMalloc+0x1ac>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003f1a:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <pvPortMalloc+0x1bc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	4a11      	ldr	r2, [pc, #68]	; (8003f68 <pvPortMalloc+0x1bc>)
 8003f22:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003f24:	f7fe fd32 	bl	800298c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <pvPortMalloc+0x19c>
        __asm volatile
 8003f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	60fb      	str	r3, [r7, #12]
    }
 8003f44:	bf00      	nop
 8003f46:	e7fe      	b.n	8003f46 <pvPortMalloc+0x19a>
    return pvReturn;
 8003f48:	69fb      	ldr	r3, [r7, #28]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3728      	adds	r7, #40	; 0x28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	20012e24 	.word	0x20012e24
 8003f58:	20012e38 	.word	0x20012e38
 8003f5c:	20012e28 	.word	0x20012e28
 8003f60:	20012e1c 	.word	0x20012e1c
 8003f64:	20012e2c 	.word	0x20012e2c
 8003f68:	20012e30 	.word	0x20012e30

08003f6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d04d      	beq.n	800401a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003f7e:	2308      	movs	r3, #8
 8003f80:	425b      	negs	r3, r3
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4413      	add	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	4b24      	ldr	r3, [pc, #144]	; (8004024 <vPortFree+0xb8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4013      	ands	r3, r2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10a      	bne.n	8003fb0 <vPortFree+0x44>
        __asm volatile
 8003f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9e:	f383 8811 	msr	BASEPRI, r3
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	60fb      	str	r3, [r7, #12]
    }
 8003fac:	bf00      	nop
 8003fae:	e7fe      	b.n	8003fae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00a      	beq.n	8003fce <vPortFree+0x62>
        __asm volatile
 8003fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbc:	f383 8811 	msr	BASEPRI, r3
 8003fc0:	f3bf 8f6f 	isb	sy
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	60bb      	str	r3, [r7, #8]
    }
 8003fca:	bf00      	nop
 8003fcc:	e7fe      	b.n	8003fcc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	4b14      	ldr	r3, [pc, #80]	; (8004024 <vPortFree+0xb8>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01e      	beq.n	800401a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d11a      	bne.n	800401a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	4b0e      	ldr	r3, [pc, #56]	; (8004024 <vPortFree+0xb8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	43db      	mvns	r3, r3
 8003fee:	401a      	ands	r2, r3
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003ff4:	f7fe fcbc 	bl	8002970 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <vPortFree+0xbc>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4413      	add	r3, r2
 8004002:	4a09      	ldr	r2, [pc, #36]	; (8004028 <vPortFree+0xbc>)
 8004004:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004006:	6938      	ldr	r0, [r7, #16]
 8004008:	f000 f874 	bl	80040f4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800400c:	4b07      	ldr	r3, [pc, #28]	; (800402c <vPortFree+0xc0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3301      	adds	r3, #1
 8004012:	4a06      	ldr	r2, [pc, #24]	; (800402c <vPortFree+0xc0>)
 8004014:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004016:	f7fe fcb9 	bl	800298c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800401a:	bf00      	nop
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20012e38 	.word	0x20012e38
 8004028:	20012e28 	.word	0x20012e28
 800402c:	20012e34 	.word	0x20012e34

08004030 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004036:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800403a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800403c:	4b27      	ldr	r3, [pc, #156]	; (80040dc <prvHeapInit+0xac>)
 800403e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00c      	beq.n	8004064 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	3307      	adds	r3, #7
 800404e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0307 	bic.w	r3, r3, #7
 8004056:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	4a1f      	ldr	r2, [pc, #124]	; (80040dc <prvHeapInit+0xac>)
 8004060:	4413      	add	r3, r2
 8004062:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004068:	4a1d      	ldr	r2, [pc, #116]	; (80040e0 <prvHeapInit+0xb0>)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800406e:	4b1c      	ldr	r3, [pc, #112]	; (80040e0 <prvHeapInit+0xb0>)
 8004070:	2200      	movs	r2, #0
 8004072:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	4413      	add	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800407c:	2208      	movs	r2, #8
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	1a9b      	subs	r3, r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 0307 	bic.w	r3, r3, #7
 800408a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4a15      	ldr	r2, [pc, #84]	; (80040e4 <prvHeapInit+0xb4>)
 8004090:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004092:	4b14      	ldr	r3, [pc, #80]	; (80040e4 <prvHeapInit+0xb4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2200      	movs	r2, #0
 8004098:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800409a:	4b12      	ldr	r3, [pc, #72]	; (80040e4 <prvHeapInit+0xb4>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	1ad2      	subs	r2, r2, r3
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80040b0:	4b0c      	ldr	r3, [pc, #48]	; (80040e4 <prvHeapInit+0xb4>)
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	4a0a      	ldr	r2, [pc, #40]	; (80040e8 <prvHeapInit+0xb8>)
 80040be:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	4a09      	ldr	r2, [pc, #36]	; (80040ec <prvHeapInit+0xbc>)
 80040c6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80040c8:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <prvHeapInit+0xc0>)
 80040ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80040ce:	601a      	str	r2, [r3, #0]
}
 80040d0:	bf00      	nop
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	2000021c 	.word	0x2000021c
 80040e0:	20012e1c 	.word	0x20012e1c
 80040e4:	20012e24 	.word	0x20012e24
 80040e8:	20012e2c 	.word	0x20012e2c
 80040ec:	20012e28 	.word	0x20012e28
 80040f0:	20012e38 	.word	0x20012e38

080040f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80040fc:	4b28      	ldr	r3, [pc, #160]	; (80041a0 <prvInsertBlockIntoFreeList+0xac>)
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	e002      	b.n	8004108 <prvInsertBlockIntoFreeList+0x14>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	429a      	cmp	r2, r3
 8004110:	d8f7      	bhi.n	8004102 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	4413      	add	r3, r2
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	429a      	cmp	r2, r3
 8004122:	d108      	bne.n	8004136 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	441a      	add	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	441a      	add	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d118      	bne.n	800417c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	4b15      	ldr	r3, [pc, #84]	; (80041a4 <prvInsertBlockIntoFreeList+0xb0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d00d      	beq.n	8004172 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	441a      	add	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	e008      	b.n	8004184 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004172:	4b0c      	ldr	r3, [pc, #48]	; (80041a4 <prvInsertBlockIntoFreeList+0xb0>)
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	e003      	b.n	8004184 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	429a      	cmp	r2, r3
 800418a:	d002      	beq.n	8004192 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004192:	bf00      	nop
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	20012e1c 	.word	0x20012e1c
 80041a4:	20012e24 	.word	0x20012e24

080041a8 <std>:
 80041a8:	2300      	movs	r3, #0
 80041aa:	b510      	push	{r4, lr}
 80041ac:	4604      	mov	r4, r0
 80041ae:	e9c0 3300 	strd	r3, r3, [r0]
 80041b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041b6:	6083      	str	r3, [r0, #8]
 80041b8:	8181      	strh	r1, [r0, #12]
 80041ba:	6643      	str	r3, [r0, #100]	; 0x64
 80041bc:	81c2      	strh	r2, [r0, #14]
 80041be:	6183      	str	r3, [r0, #24]
 80041c0:	4619      	mov	r1, r3
 80041c2:	2208      	movs	r2, #8
 80041c4:	305c      	adds	r0, #92	; 0x5c
 80041c6:	f000 f906 	bl	80043d6 <memset>
 80041ca:	4b0d      	ldr	r3, [pc, #52]	; (8004200 <std+0x58>)
 80041cc:	6263      	str	r3, [r4, #36]	; 0x24
 80041ce:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <std+0x5c>)
 80041d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80041d2:	4b0d      	ldr	r3, [pc, #52]	; (8004208 <std+0x60>)
 80041d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041d6:	4b0d      	ldr	r3, [pc, #52]	; (800420c <std+0x64>)
 80041d8:	6323      	str	r3, [r4, #48]	; 0x30
 80041da:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <std+0x68>)
 80041dc:	6224      	str	r4, [r4, #32]
 80041de:	429c      	cmp	r4, r3
 80041e0:	d006      	beq.n	80041f0 <std+0x48>
 80041e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80041e6:	4294      	cmp	r4, r2
 80041e8:	d002      	beq.n	80041f0 <std+0x48>
 80041ea:	33d0      	adds	r3, #208	; 0xd0
 80041ec:	429c      	cmp	r4, r3
 80041ee:	d105      	bne.n	80041fc <std+0x54>
 80041f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80041f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041f8:	f000 b966 	b.w	80044c8 <__retarget_lock_init_recursive>
 80041fc:	bd10      	pop	{r4, pc}
 80041fe:	bf00      	nop
 8004200:	08004351 	.word	0x08004351
 8004204:	08004373 	.word	0x08004373
 8004208:	080043ab 	.word	0x080043ab
 800420c:	080043cf 	.word	0x080043cf
 8004210:	20012e3c 	.word	0x20012e3c

08004214 <stdio_exit_handler>:
 8004214:	4a02      	ldr	r2, [pc, #8]	; (8004220 <stdio_exit_handler+0xc>)
 8004216:	4903      	ldr	r1, [pc, #12]	; (8004224 <stdio_exit_handler+0x10>)
 8004218:	4803      	ldr	r0, [pc, #12]	; (8004228 <stdio_exit_handler+0x14>)
 800421a:	f000 b869 	b.w	80042f0 <_fwalk_sglue>
 800421e:	bf00      	nop
 8004220:	20000014 	.word	0x20000014
 8004224:	08004d91 	.word	0x08004d91
 8004228:	20000020 	.word	0x20000020

0800422c <cleanup_stdio>:
 800422c:	6841      	ldr	r1, [r0, #4]
 800422e:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <cleanup_stdio+0x34>)
 8004230:	4299      	cmp	r1, r3
 8004232:	b510      	push	{r4, lr}
 8004234:	4604      	mov	r4, r0
 8004236:	d001      	beq.n	800423c <cleanup_stdio+0x10>
 8004238:	f000 fdaa 	bl	8004d90 <_fflush_r>
 800423c:	68a1      	ldr	r1, [r4, #8]
 800423e:	4b09      	ldr	r3, [pc, #36]	; (8004264 <cleanup_stdio+0x38>)
 8004240:	4299      	cmp	r1, r3
 8004242:	d002      	beq.n	800424a <cleanup_stdio+0x1e>
 8004244:	4620      	mov	r0, r4
 8004246:	f000 fda3 	bl	8004d90 <_fflush_r>
 800424a:	68e1      	ldr	r1, [r4, #12]
 800424c:	4b06      	ldr	r3, [pc, #24]	; (8004268 <cleanup_stdio+0x3c>)
 800424e:	4299      	cmp	r1, r3
 8004250:	d004      	beq.n	800425c <cleanup_stdio+0x30>
 8004252:	4620      	mov	r0, r4
 8004254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004258:	f000 bd9a 	b.w	8004d90 <_fflush_r>
 800425c:	bd10      	pop	{r4, pc}
 800425e:	bf00      	nop
 8004260:	20012e3c 	.word	0x20012e3c
 8004264:	20012ea4 	.word	0x20012ea4
 8004268:	20012f0c 	.word	0x20012f0c

0800426c <global_stdio_init.part.0>:
 800426c:	b510      	push	{r4, lr}
 800426e:	4b0b      	ldr	r3, [pc, #44]	; (800429c <global_stdio_init.part.0+0x30>)
 8004270:	4c0b      	ldr	r4, [pc, #44]	; (80042a0 <global_stdio_init.part.0+0x34>)
 8004272:	4a0c      	ldr	r2, [pc, #48]	; (80042a4 <global_stdio_init.part.0+0x38>)
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	4620      	mov	r0, r4
 8004278:	2200      	movs	r2, #0
 800427a:	2104      	movs	r1, #4
 800427c:	f7ff ff94 	bl	80041a8 <std>
 8004280:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004284:	2201      	movs	r2, #1
 8004286:	2109      	movs	r1, #9
 8004288:	f7ff ff8e 	bl	80041a8 <std>
 800428c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004290:	2202      	movs	r2, #2
 8004292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004296:	2112      	movs	r1, #18
 8004298:	f7ff bf86 	b.w	80041a8 <std>
 800429c:	20012f74 	.word	0x20012f74
 80042a0:	20012e3c 	.word	0x20012e3c
 80042a4:	08004215 	.word	0x08004215

080042a8 <__sfp_lock_acquire>:
 80042a8:	4801      	ldr	r0, [pc, #4]	; (80042b0 <__sfp_lock_acquire+0x8>)
 80042aa:	f000 b90e 	b.w	80044ca <__retarget_lock_acquire_recursive>
 80042ae:	bf00      	nop
 80042b0:	20012f7d 	.word	0x20012f7d

080042b4 <__sfp_lock_release>:
 80042b4:	4801      	ldr	r0, [pc, #4]	; (80042bc <__sfp_lock_release+0x8>)
 80042b6:	f000 b909 	b.w	80044cc <__retarget_lock_release_recursive>
 80042ba:	bf00      	nop
 80042bc:	20012f7d 	.word	0x20012f7d

080042c0 <__sinit>:
 80042c0:	b510      	push	{r4, lr}
 80042c2:	4604      	mov	r4, r0
 80042c4:	f7ff fff0 	bl	80042a8 <__sfp_lock_acquire>
 80042c8:	6a23      	ldr	r3, [r4, #32]
 80042ca:	b11b      	cbz	r3, 80042d4 <__sinit+0x14>
 80042cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042d0:	f7ff bff0 	b.w	80042b4 <__sfp_lock_release>
 80042d4:	4b04      	ldr	r3, [pc, #16]	; (80042e8 <__sinit+0x28>)
 80042d6:	6223      	str	r3, [r4, #32]
 80042d8:	4b04      	ldr	r3, [pc, #16]	; (80042ec <__sinit+0x2c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1f5      	bne.n	80042cc <__sinit+0xc>
 80042e0:	f7ff ffc4 	bl	800426c <global_stdio_init.part.0>
 80042e4:	e7f2      	b.n	80042cc <__sinit+0xc>
 80042e6:	bf00      	nop
 80042e8:	0800422d 	.word	0x0800422d
 80042ec:	20012f74 	.word	0x20012f74

080042f0 <_fwalk_sglue>:
 80042f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042f4:	4607      	mov	r7, r0
 80042f6:	4688      	mov	r8, r1
 80042f8:	4614      	mov	r4, r2
 80042fa:	2600      	movs	r6, #0
 80042fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004300:	f1b9 0901 	subs.w	r9, r9, #1
 8004304:	d505      	bpl.n	8004312 <_fwalk_sglue+0x22>
 8004306:	6824      	ldr	r4, [r4, #0]
 8004308:	2c00      	cmp	r4, #0
 800430a:	d1f7      	bne.n	80042fc <_fwalk_sglue+0xc>
 800430c:	4630      	mov	r0, r6
 800430e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004312:	89ab      	ldrh	r3, [r5, #12]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d907      	bls.n	8004328 <_fwalk_sglue+0x38>
 8004318:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800431c:	3301      	adds	r3, #1
 800431e:	d003      	beq.n	8004328 <_fwalk_sglue+0x38>
 8004320:	4629      	mov	r1, r5
 8004322:	4638      	mov	r0, r7
 8004324:	47c0      	blx	r8
 8004326:	4306      	orrs	r6, r0
 8004328:	3568      	adds	r5, #104	; 0x68
 800432a:	e7e9      	b.n	8004300 <_fwalk_sglue+0x10>

0800432c <iprintf>:
 800432c:	b40f      	push	{r0, r1, r2, r3}
 800432e:	b507      	push	{r0, r1, r2, lr}
 8004330:	4906      	ldr	r1, [pc, #24]	; (800434c <iprintf+0x20>)
 8004332:	ab04      	add	r3, sp, #16
 8004334:	6808      	ldr	r0, [r1, #0]
 8004336:	f853 2b04 	ldr.w	r2, [r3], #4
 800433a:	6881      	ldr	r1, [r0, #8]
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	f000 f9f7 	bl	8004730 <_vfiprintf_r>
 8004342:	b003      	add	sp, #12
 8004344:	f85d eb04 	ldr.w	lr, [sp], #4
 8004348:	b004      	add	sp, #16
 800434a:	4770      	bx	lr
 800434c:	2000006c 	.word	0x2000006c

08004350 <__sread>:
 8004350:	b510      	push	{r4, lr}
 8004352:	460c      	mov	r4, r1
 8004354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004358:	f000 f868 	bl	800442c <_read_r>
 800435c:	2800      	cmp	r0, #0
 800435e:	bfab      	itete	ge
 8004360:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004362:	89a3      	ldrhlt	r3, [r4, #12]
 8004364:	181b      	addge	r3, r3, r0
 8004366:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800436a:	bfac      	ite	ge
 800436c:	6563      	strge	r3, [r4, #84]	; 0x54
 800436e:	81a3      	strhlt	r3, [r4, #12]
 8004370:	bd10      	pop	{r4, pc}

08004372 <__swrite>:
 8004372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004376:	461f      	mov	r7, r3
 8004378:	898b      	ldrh	r3, [r1, #12]
 800437a:	05db      	lsls	r3, r3, #23
 800437c:	4605      	mov	r5, r0
 800437e:	460c      	mov	r4, r1
 8004380:	4616      	mov	r6, r2
 8004382:	d505      	bpl.n	8004390 <__swrite+0x1e>
 8004384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004388:	2302      	movs	r3, #2
 800438a:	2200      	movs	r2, #0
 800438c:	f000 f83c 	bl	8004408 <_lseek_r>
 8004390:	89a3      	ldrh	r3, [r4, #12]
 8004392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004396:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800439a:	81a3      	strh	r3, [r4, #12]
 800439c:	4632      	mov	r2, r6
 800439e:	463b      	mov	r3, r7
 80043a0:	4628      	mov	r0, r5
 80043a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043a6:	f000 b853 	b.w	8004450 <_write_r>

080043aa <__sseek>:
 80043aa:	b510      	push	{r4, lr}
 80043ac:	460c      	mov	r4, r1
 80043ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043b2:	f000 f829 	bl	8004408 <_lseek_r>
 80043b6:	1c43      	adds	r3, r0, #1
 80043b8:	89a3      	ldrh	r3, [r4, #12]
 80043ba:	bf15      	itete	ne
 80043bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80043be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80043c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80043c6:	81a3      	strheq	r3, [r4, #12]
 80043c8:	bf18      	it	ne
 80043ca:	81a3      	strhne	r3, [r4, #12]
 80043cc:	bd10      	pop	{r4, pc}

080043ce <__sclose>:
 80043ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043d2:	f000 b809 	b.w	80043e8 <_close_r>

080043d6 <memset>:
 80043d6:	4402      	add	r2, r0
 80043d8:	4603      	mov	r3, r0
 80043da:	4293      	cmp	r3, r2
 80043dc:	d100      	bne.n	80043e0 <memset+0xa>
 80043de:	4770      	bx	lr
 80043e0:	f803 1b01 	strb.w	r1, [r3], #1
 80043e4:	e7f9      	b.n	80043da <memset+0x4>
	...

080043e8 <_close_r>:
 80043e8:	b538      	push	{r3, r4, r5, lr}
 80043ea:	4d06      	ldr	r5, [pc, #24]	; (8004404 <_close_r+0x1c>)
 80043ec:	2300      	movs	r3, #0
 80043ee:	4604      	mov	r4, r0
 80043f0:	4608      	mov	r0, r1
 80043f2:	602b      	str	r3, [r5, #0]
 80043f4:	f7fc fb8b 	bl	8000b0e <_close>
 80043f8:	1c43      	adds	r3, r0, #1
 80043fa:	d102      	bne.n	8004402 <_close_r+0x1a>
 80043fc:	682b      	ldr	r3, [r5, #0]
 80043fe:	b103      	cbz	r3, 8004402 <_close_r+0x1a>
 8004400:	6023      	str	r3, [r4, #0]
 8004402:	bd38      	pop	{r3, r4, r5, pc}
 8004404:	20012f78 	.word	0x20012f78

08004408 <_lseek_r>:
 8004408:	b538      	push	{r3, r4, r5, lr}
 800440a:	4d07      	ldr	r5, [pc, #28]	; (8004428 <_lseek_r+0x20>)
 800440c:	4604      	mov	r4, r0
 800440e:	4608      	mov	r0, r1
 8004410:	4611      	mov	r1, r2
 8004412:	2200      	movs	r2, #0
 8004414:	602a      	str	r2, [r5, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	f7fc fba0 	bl	8000b5c <_lseek>
 800441c:	1c43      	adds	r3, r0, #1
 800441e:	d102      	bne.n	8004426 <_lseek_r+0x1e>
 8004420:	682b      	ldr	r3, [r5, #0]
 8004422:	b103      	cbz	r3, 8004426 <_lseek_r+0x1e>
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	bd38      	pop	{r3, r4, r5, pc}
 8004428:	20012f78 	.word	0x20012f78

0800442c <_read_r>:
 800442c:	b538      	push	{r3, r4, r5, lr}
 800442e:	4d07      	ldr	r5, [pc, #28]	; (800444c <_read_r+0x20>)
 8004430:	4604      	mov	r4, r0
 8004432:	4608      	mov	r0, r1
 8004434:	4611      	mov	r1, r2
 8004436:	2200      	movs	r2, #0
 8004438:	602a      	str	r2, [r5, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	f7fc fb2e 	bl	8000a9c <_read>
 8004440:	1c43      	adds	r3, r0, #1
 8004442:	d102      	bne.n	800444a <_read_r+0x1e>
 8004444:	682b      	ldr	r3, [r5, #0]
 8004446:	b103      	cbz	r3, 800444a <_read_r+0x1e>
 8004448:	6023      	str	r3, [r4, #0]
 800444a:	bd38      	pop	{r3, r4, r5, pc}
 800444c:	20012f78 	.word	0x20012f78

08004450 <_write_r>:
 8004450:	b538      	push	{r3, r4, r5, lr}
 8004452:	4d07      	ldr	r5, [pc, #28]	; (8004470 <_write_r+0x20>)
 8004454:	4604      	mov	r4, r0
 8004456:	4608      	mov	r0, r1
 8004458:	4611      	mov	r1, r2
 800445a:	2200      	movs	r2, #0
 800445c:	602a      	str	r2, [r5, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	f7fc fb39 	bl	8000ad6 <_write>
 8004464:	1c43      	adds	r3, r0, #1
 8004466:	d102      	bne.n	800446e <_write_r+0x1e>
 8004468:	682b      	ldr	r3, [r5, #0]
 800446a:	b103      	cbz	r3, 800446e <_write_r+0x1e>
 800446c:	6023      	str	r3, [r4, #0]
 800446e:	bd38      	pop	{r3, r4, r5, pc}
 8004470:	20012f78 	.word	0x20012f78

08004474 <__errno>:
 8004474:	4b01      	ldr	r3, [pc, #4]	; (800447c <__errno+0x8>)
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	2000006c 	.word	0x2000006c

08004480 <__libc_init_array>:
 8004480:	b570      	push	{r4, r5, r6, lr}
 8004482:	4d0d      	ldr	r5, [pc, #52]	; (80044b8 <__libc_init_array+0x38>)
 8004484:	4c0d      	ldr	r4, [pc, #52]	; (80044bc <__libc_init_array+0x3c>)
 8004486:	1b64      	subs	r4, r4, r5
 8004488:	10a4      	asrs	r4, r4, #2
 800448a:	2600      	movs	r6, #0
 800448c:	42a6      	cmp	r6, r4
 800448e:	d109      	bne.n	80044a4 <__libc_init_array+0x24>
 8004490:	4d0b      	ldr	r5, [pc, #44]	; (80044c0 <__libc_init_array+0x40>)
 8004492:	4c0c      	ldr	r4, [pc, #48]	; (80044c4 <__libc_init_array+0x44>)
 8004494:	f000 fdce 	bl	8005034 <_init>
 8004498:	1b64      	subs	r4, r4, r5
 800449a:	10a4      	asrs	r4, r4, #2
 800449c:	2600      	movs	r6, #0
 800449e:	42a6      	cmp	r6, r4
 80044a0:	d105      	bne.n	80044ae <__libc_init_array+0x2e>
 80044a2:	bd70      	pop	{r4, r5, r6, pc}
 80044a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044a8:	4798      	blx	r3
 80044aa:	3601      	adds	r6, #1
 80044ac:	e7ee      	b.n	800448c <__libc_init_array+0xc>
 80044ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b2:	4798      	blx	r3
 80044b4:	3601      	adds	r6, #1
 80044b6:	e7f2      	b.n	800449e <__libc_init_array+0x1e>
 80044b8:	080050f8 	.word	0x080050f8
 80044bc:	080050f8 	.word	0x080050f8
 80044c0:	080050f8 	.word	0x080050f8
 80044c4:	080050fc 	.word	0x080050fc

080044c8 <__retarget_lock_init_recursive>:
 80044c8:	4770      	bx	lr

080044ca <__retarget_lock_acquire_recursive>:
 80044ca:	4770      	bx	lr

080044cc <__retarget_lock_release_recursive>:
 80044cc:	4770      	bx	lr

080044ce <memcpy>:
 80044ce:	440a      	add	r2, r1
 80044d0:	4291      	cmp	r1, r2
 80044d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80044d6:	d100      	bne.n	80044da <memcpy+0xc>
 80044d8:	4770      	bx	lr
 80044da:	b510      	push	{r4, lr}
 80044dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044e4:	4291      	cmp	r1, r2
 80044e6:	d1f9      	bne.n	80044dc <memcpy+0xe>
 80044e8:	bd10      	pop	{r4, pc}
	...

080044ec <_free_r>:
 80044ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044ee:	2900      	cmp	r1, #0
 80044f0:	d044      	beq.n	800457c <_free_r+0x90>
 80044f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044f6:	9001      	str	r0, [sp, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f1a1 0404 	sub.w	r4, r1, #4
 80044fe:	bfb8      	it	lt
 8004500:	18e4      	addlt	r4, r4, r3
 8004502:	f000 f8df 	bl	80046c4 <__malloc_lock>
 8004506:	4a1e      	ldr	r2, [pc, #120]	; (8004580 <_free_r+0x94>)
 8004508:	9801      	ldr	r0, [sp, #4]
 800450a:	6813      	ldr	r3, [r2, #0]
 800450c:	b933      	cbnz	r3, 800451c <_free_r+0x30>
 800450e:	6063      	str	r3, [r4, #4]
 8004510:	6014      	str	r4, [r2, #0]
 8004512:	b003      	add	sp, #12
 8004514:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004518:	f000 b8da 	b.w	80046d0 <__malloc_unlock>
 800451c:	42a3      	cmp	r3, r4
 800451e:	d908      	bls.n	8004532 <_free_r+0x46>
 8004520:	6825      	ldr	r5, [r4, #0]
 8004522:	1961      	adds	r1, r4, r5
 8004524:	428b      	cmp	r3, r1
 8004526:	bf01      	itttt	eq
 8004528:	6819      	ldreq	r1, [r3, #0]
 800452a:	685b      	ldreq	r3, [r3, #4]
 800452c:	1949      	addeq	r1, r1, r5
 800452e:	6021      	streq	r1, [r4, #0]
 8004530:	e7ed      	b.n	800450e <_free_r+0x22>
 8004532:	461a      	mov	r2, r3
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	b10b      	cbz	r3, 800453c <_free_r+0x50>
 8004538:	42a3      	cmp	r3, r4
 800453a:	d9fa      	bls.n	8004532 <_free_r+0x46>
 800453c:	6811      	ldr	r1, [r2, #0]
 800453e:	1855      	adds	r5, r2, r1
 8004540:	42a5      	cmp	r5, r4
 8004542:	d10b      	bne.n	800455c <_free_r+0x70>
 8004544:	6824      	ldr	r4, [r4, #0]
 8004546:	4421      	add	r1, r4
 8004548:	1854      	adds	r4, r2, r1
 800454a:	42a3      	cmp	r3, r4
 800454c:	6011      	str	r1, [r2, #0]
 800454e:	d1e0      	bne.n	8004512 <_free_r+0x26>
 8004550:	681c      	ldr	r4, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	6053      	str	r3, [r2, #4]
 8004556:	440c      	add	r4, r1
 8004558:	6014      	str	r4, [r2, #0]
 800455a:	e7da      	b.n	8004512 <_free_r+0x26>
 800455c:	d902      	bls.n	8004564 <_free_r+0x78>
 800455e:	230c      	movs	r3, #12
 8004560:	6003      	str	r3, [r0, #0]
 8004562:	e7d6      	b.n	8004512 <_free_r+0x26>
 8004564:	6825      	ldr	r5, [r4, #0]
 8004566:	1961      	adds	r1, r4, r5
 8004568:	428b      	cmp	r3, r1
 800456a:	bf04      	itt	eq
 800456c:	6819      	ldreq	r1, [r3, #0]
 800456e:	685b      	ldreq	r3, [r3, #4]
 8004570:	6063      	str	r3, [r4, #4]
 8004572:	bf04      	itt	eq
 8004574:	1949      	addeq	r1, r1, r5
 8004576:	6021      	streq	r1, [r4, #0]
 8004578:	6054      	str	r4, [r2, #4]
 800457a:	e7ca      	b.n	8004512 <_free_r+0x26>
 800457c:	b003      	add	sp, #12
 800457e:	bd30      	pop	{r4, r5, pc}
 8004580:	20012f80 	.word	0x20012f80

08004584 <sbrk_aligned>:
 8004584:	b570      	push	{r4, r5, r6, lr}
 8004586:	4e0e      	ldr	r6, [pc, #56]	; (80045c0 <sbrk_aligned+0x3c>)
 8004588:	460c      	mov	r4, r1
 800458a:	6831      	ldr	r1, [r6, #0]
 800458c:	4605      	mov	r5, r0
 800458e:	b911      	cbnz	r1, 8004596 <sbrk_aligned+0x12>
 8004590:	f000 fcbc 	bl	8004f0c <_sbrk_r>
 8004594:	6030      	str	r0, [r6, #0]
 8004596:	4621      	mov	r1, r4
 8004598:	4628      	mov	r0, r5
 800459a:	f000 fcb7 	bl	8004f0c <_sbrk_r>
 800459e:	1c43      	adds	r3, r0, #1
 80045a0:	d00a      	beq.n	80045b8 <sbrk_aligned+0x34>
 80045a2:	1cc4      	adds	r4, r0, #3
 80045a4:	f024 0403 	bic.w	r4, r4, #3
 80045a8:	42a0      	cmp	r0, r4
 80045aa:	d007      	beq.n	80045bc <sbrk_aligned+0x38>
 80045ac:	1a21      	subs	r1, r4, r0
 80045ae:	4628      	mov	r0, r5
 80045b0:	f000 fcac 	bl	8004f0c <_sbrk_r>
 80045b4:	3001      	adds	r0, #1
 80045b6:	d101      	bne.n	80045bc <sbrk_aligned+0x38>
 80045b8:	f04f 34ff 	mov.w	r4, #4294967295
 80045bc:	4620      	mov	r0, r4
 80045be:	bd70      	pop	{r4, r5, r6, pc}
 80045c0:	20012f84 	.word	0x20012f84

080045c4 <_malloc_r>:
 80045c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045c8:	1ccd      	adds	r5, r1, #3
 80045ca:	f025 0503 	bic.w	r5, r5, #3
 80045ce:	3508      	adds	r5, #8
 80045d0:	2d0c      	cmp	r5, #12
 80045d2:	bf38      	it	cc
 80045d4:	250c      	movcc	r5, #12
 80045d6:	2d00      	cmp	r5, #0
 80045d8:	4607      	mov	r7, r0
 80045da:	db01      	blt.n	80045e0 <_malloc_r+0x1c>
 80045dc:	42a9      	cmp	r1, r5
 80045de:	d905      	bls.n	80045ec <_malloc_r+0x28>
 80045e0:	230c      	movs	r3, #12
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	2600      	movs	r6, #0
 80045e6:	4630      	mov	r0, r6
 80045e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80046c0 <_malloc_r+0xfc>
 80045f0:	f000 f868 	bl	80046c4 <__malloc_lock>
 80045f4:	f8d8 3000 	ldr.w	r3, [r8]
 80045f8:	461c      	mov	r4, r3
 80045fa:	bb5c      	cbnz	r4, 8004654 <_malloc_r+0x90>
 80045fc:	4629      	mov	r1, r5
 80045fe:	4638      	mov	r0, r7
 8004600:	f7ff ffc0 	bl	8004584 <sbrk_aligned>
 8004604:	1c43      	adds	r3, r0, #1
 8004606:	4604      	mov	r4, r0
 8004608:	d155      	bne.n	80046b6 <_malloc_r+0xf2>
 800460a:	f8d8 4000 	ldr.w	r4, [r8]
 800460e:	4626      	mov	r6, r4
 8004610:	2e00      	cmp	r6, #0
 8004612:	d145      	bne.n	80046a0 <_malloc_r+0xdc>
 8004614:	2c00      	cmp	r4, #0
 8004616:	d048      	beq.n	80046aa <_malloc_r+0xe6>
 8004618:	6823      	ldr	r3, [r4, #0]
 800461a:	4631      	mov	r1, r6
 800461c:	4638      	mov	r0, r7
 800461e:	eb04 0903 	add.w	r9, r4, r3
 8004622:	f000 fc73 	bl	8004f0c <_sbrk_r>
 8004626:	4581      	cmp	r9, r0
 8004628:	d13f      	bne.n	80046aa <_malloc_r+0xe6>
 800462a:	6821      	ldr	r1, [r4, #0]
 800462c:	1a6d      	subs	r5, r5, r1
 800462e:	4629      	mov	r1, r5
 8004630:	4638      	mov	r0, r7
 8004632:	f7ff ffa7 	bl	8004584 <sbrk_aligned>
 8004636:	3001      	adds	r0, #1
 8004638:	d037      	beq.n	80046aa <_malloc_r+0xe6>
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	442b      	add	r3, r5
 800463e:	6023      	str	r3, [r4, #0]
 8004640:	f8d8 3000 	ldr.w	r3, [r8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d038      	beq.n	80046ba <_malloc_r+0xf6>
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	42a2      	cmp	r2, r4
 800464c:	d12b      	bne.n	80046a6 <_malloc_r+0xe2>
 800464e:	2200      	movs	r2, #0
 8004650:	605a      	str	r2, [r3, #4]
 8004652:	e00f      	b.n	8004674 <_malloc_r+0xb0>
 8004654:	6822      	ldr	r2, [r4, #0]
 8004656:	1b52      	subs	r2, r2, r5
 8004658:	d41f      	bmi.n	800469a <_malloc_r+0xd6>
 800465a:	2a0b      	cmp	r2, #11
 800465c:	d917      	bls.n	800468e <_malloc_r+0xca>
 800465e:	1961      	adds	r1, r4, r5
 8004660:	42a3      	cmp	r3, r4
 8004662:	6025      	str	r5, [r4, #0]
 8004664:	bf18      	it	ne
 8004666:	6059      	strne	r1, [r3, #4]
 8004668:	6863      	ldr	r3, [r4, #4]
 800466a:	bf08      	it	eq
 800466c:	f8c8 1000 	streq.w	r1, [r8]
 8004670:	5162      	str	r2, [r4, r5]
 8004672:	604b      	str	r3, [r1, #4]
 8004674:	4638      	mov	r0, r7
 8004676:	f104 060b 	add.w	r6, r4, #11
 800467a:	f000 f829 	bl	80046d0 <__malloc_unlock>
 800467e:	f026 0607 	bic.w	r6, r6, #7
 8004682:	1d23      	adds	r3, r4, #4
 8004684:	1af2      	subs	r2, r6, r3
 8004686:	d0ae      	beq.n	80045e6 <_malloc_r+0x22>
 8004688:	1b9b      	subs	r3, r3, r6
 800468a:	50a3      	str	r3, [r4, r2]
 800468c:	e7ab      	b.n	80045e6 <_malloc_r+0x22>
 800468e:	42a3      	cmp	r3, r4
 8004690:	6862      	ldr	r2, [r4, #4]
 8004692:	d1dd      	bne.n	8004650 <_malloc_r+0x8c>
 8004694:	f8c8 2000 	str.w	r2, [r8]
 8004698:	e7ec      	b.n	8004674 <_malloc_r+0xb0>
 800469a:	4623      	mov	r3, r4
 800469c:	6864      	ldr	r4, [r4, #4]
 800469e:	e7ac      	b.n	80045fa <_malloc_r+0x36>
 80046a0:	4634      	mov	r4, r6
 80046a2:	6876      	ldr	r6, [r6, #4]
 80046a4:	e7b4      	b.n	8004610 <_malloc_r+0x4c>
 80046a6:	4613      	mov	r3, r2
 80046a8:	e7cc      	b.n	8004644 <_malloc_r+0x80>
 80046aa:	230c      	movs	r3, #12
 80046ac:	603b      	str	r3, [r7, #0]
 80046ae:	4638      	mov	r0, r7
 80046b0:	f000 f80e 	bl	80046d0 <__malloc_unlock>
 80046b4:	e797      	b.n	80045e6 <_malloc_r+0x22>
 80046b6:	6025      	str	r5, [r4, #0]
 80046b8:	e7dc      	b.n	8004674 <_malloc_r+0xb0>
 80046ba:	605b      	str	r3, [r3, #4]
 80046bc:	deff      	udf	#255	; 0xff
 80046be:	bf00      	nop
 80046c0:	20012f80 	.word	0x20012f80

080046c4 <__malloc_lock>:
 80046c4:	4801      	ldr	r0, [pc, #4]	; (80046cc <__malloc_lock+0x8>)
 80046c6:	f7ff bf00 	b.w	80044ca <__retarget_lock_acquire_recursive>
 80046ca:	bf00      	nop
 80046cc:	20012f7c 	.word	0x20012f7c

080046d0 <__malloc_unlock>:
 80046d0:	4801      	ldr	r0, [pc, #4]	; (80046d8 <__malloc_unlock+0x8>)
 80046d2:	f7ff befb 	b.w	80044cc <__retarget_lock_release_recursive>
 80046d6:	bf00      	nop
 80046d8:	20012f7c 	.word	0x20012f7c

080046dc <__sfputc_r>:
 80046dc:	6893      	ldr	r3, [r2, #8]
 80046de:	3b01      	subs	r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	b410      	push	{r4}
 80046e4:	6093      	str	r3, [r2, #8]
 80046e6:	da08      	bge.n	80046fa <__sfputc_r+0x1e>
 80046e8:	6994      	ldr	r4, [r2, #24]
 80046ea:	42a3      	cmp	r3, r4
 80046ec:	db01      	blt.n	80046f2 <__sfputc_r+0x16>
 80046ee:	290a      	cmp	r1, #10
 80046f0:	d103      	bne.n	80046fa <__sfputc_r+0x1e>
 80046f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046f6:	f000 bb73 	b.w	8004de0 <__swbuf_r>
 80046fa:	6813      	ldr	r3, [r2, #0]
 80046fc:	1c58      	adds	r0, r3, #1
 80046fe:	6010      	str	r0, [r2, #0]
 8004700:	7019      	strb	r1, [r3, #0]
 8004702:	4608      	mov	r0, r1
 8004704:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004708:	4770      	bx	lr

0800470a <__sfputs_r>:
 800470a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470c:	4606      	mov	r6, r0
 800470e:	460f      	mov	r7, r1
 8004710:	4614      	mov	r4, r2
 8004712:	18d5      	adds	r5, r2, r3
 8004714:	42ac      	cmp	r4, r5
 8004716:	d101      	bne.n	800471c <__sfputs_r+0x12>
 8004718:	2000      	movs	r0, #0
 800471a:	e007      	b.n	800472c <__sfputs_r+0x22>
 800471c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004720:	463a      	mov	r2, r7
 8004722:	4630      	mov	r0, r6
 8004724:	f7ff ffda 	bl	80046dc <__sfputc_r>
 8004728:	1c43      	adds	r3, r0, #1
 800472a:	d1f3      	bne.n	8004714 <__sfputs_r+0xa>
 800472c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004730 <_vfiprintf_r>:
 8004730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004734:	460d      	mov	r5, r1
 8004736:	b09d      	sub	sp, #116	; 0x74
 8004738:	4614      	mov	r4, r2
 800473a:	4698      	mov	r8, r3
 800473c:	4606      	mov	r6, r0
 800473e:	b118      	cbz	r0, 8004748 <_vfiprintf_r+0x18>
 8004740:	6a03      	ldr	r3, [r0, #32]
 8004742:	b90b      	cbnz	r3, 8004748 <_vfiprintf_r+0x18>
 8004744:	f7ff fdbc 	bl	80042c0 <__sinit>
 8004748:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800474a:	07d9      	lsls	r1, r3, #31
 800474c:	d405      	bmi.n	800475a <_vfiprintf_r+0x2a>
 800474e:	89ab      	ldrh	r3, [r5, #12]
 8004750:	059a      	lsls	r2, r3, #22
 8004752:	d402      	bmi.n	800475a <_vfiprintf_r+0x2a>
 8004754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004756:	f7ff feb8 	bl	80044ca <__retarget_lock_acquire_recursive>
 800475a:	89ab      	ldrh	r3, [r5, #12]
 800475c:	071b      	lsls	r3, r3, #28
 800475e:	d501      	bpl.n	8004764 <_vfiprintf_r+0x34>
 8004760:	692b      	ldr	r3, [r5, #16]
 8004762:	b99b      	cbnz	r3, 800478c <_vfiprintf_r+0x5c>
 8004764:	4629      	mov	r1, r5
 8004766:	4630      	mov	r0, r6
 8004768:	f000 fb78 	bl	8004e5c <__swsetup_r>
 800476c:	b170      	cbz	r0, 800478c <_vfiprintf_r+0x5c>
 800476e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004770:	07dc      	lsls	r4, r3, #31
 8004772:	d504      	bpl.n	800477e <_vfiprintf_r+0x4e>
 8004774:	f04f 30ff 	mov.w	r0, #4294967295
 8004778:	b01d      	add	sp, #116	; 0x74
 800477a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800477e:	89ab      	ldrh	r3, [r5, #12]
 8004780:	0598      	lsls	r0, r3, #22
 8004782:	d4f7      	bmi.n	8004774 <_vfiprintf_r+0x44>
 8004784:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004786:	f7ff fea1 	bl	80044cc <__retarget_lock_release_recursive>
 800478a:	e7f3      	b.n	8004774 <_vfiprintf_r+0x44>
 800478c:	2300      	movs	r3, #0
 800478e:	9309      	str	r3, [sp, #36]	; 0x24
 8004790:	2320      	movs	r3, #32
 8004792:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004796:	f8cd 800c 	str.w	r8, [sp, #12]
 800479a:	2330      	movs	r3, #48	; 0x30
 800479c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004950 <_vfiprintf_r+0x220>
 80047a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047a4:	f04f 0901 	mov.w	r9, #1
 80047a8:	4623      	mov	r3, r4
 80047aa:	469a      	mov	sl, r3
 80047ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047b0:	b10a      	cbz	r2, 80047b6 <_vfiprintf_r+0x86>
 80047b2:	2a25      	cmp	r2, #37	; 0x25
 80047b4:	d1f9      	bne.n	80047aa <_vfiprintf_r+0x7a>
 80047b6:	ebba 0b04 	subs.w	fp, sl, r4
 80047ba:	d00b      	beq.n	80047d4 <_vfiprintf_r+0xa4>
 80047bc:	465b      	mov	r3, fp
 80047be:	4622      	mov	r2, r4
 80047c0:	4629      	mov	r1, r5
 80047c2:	4630      	mov	r0, r6
 80047c4:	f7ff ffa1 	bl	800470a <__sfputs_r>
 80047c8:	3001      	adds	r0, #1
 80047ca:	f000 80a9 	beq.w	8004920 <_vfiprintf_r+0x1f0>
 80047ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047d0:	445a      	add	r2, fp
 80047d2:	9209      	str	r2, [sp, #36]	; 0x24
 80047d4:	f89a 3000 	ldrb.w	r3, [sl]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 80a1 	beq.w	8004920 <_vfiprintf_r+0x1f0>
 80047de:	2300      	movs	r3, #0
 80047e0:	f04f 32ff 	mov.w	r2, #4294967295
 80047e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047e8:	f10a 0a01 	add.w	sl, sl, #1
 80047ec:	9304      	str	r3, [sp, #16]
 80047ee:	9307      	str	r3, [sp, #28]
 80047f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047f4:	931a      	str	r3, [sp, #104]	; 0x68
 80047f6:	4654      	mov	r4, sl
 80047f8:	2205      	movs	r2, #5
 80047fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047fe:	4854      	ldr	r0, [pc, #336]	; (8004950 <_vfiprintf_r+0x220>)
 8004800:	f7fb fce6 	bl	80001d0 <memchr>
 8004804:	9a04      	ldr	r2, [sp, #16]
 8004806:	b9d8      	cbnz	r0, 8004840 <_vfiprintf_r+0x110>
 8004808:	06d1      	lsls	r1, r2, #27
 800480a:	bf44      	itt	mi
 800480c:	2320      	movmi	r3, #32
 800480e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004812:	0713      	lsls	r3, r2, #28
 8004814:	bf44      	itt	mi
 8004816:	232b      	movmi	r3, #43	; 0x2b
 8004818:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800481c:	f89a 3000 	ldrb.w	r3, [sl]
 8004820:	2b2a      	cmp	r3, #42	; 0x2a
 8004822:	d015      	beq.n	8004850 <_vfiprintf_r+0x120>
 8004824:	9a07      	ldr	r2, [sp, #28]
 8004826:	4654      	mov	r4, sl
 8004828:	2000      	movs	r0, #0
 800482a:	f04f 0c0a 	mov.w	ip, #10
 800482e:	4621      	mov	r1, r4
 8004830:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004834:	3b30      	subs	r3, #48	; 0x30
 8004836:	2b09      	cmp	r3, #9
 8004838:	d94d      	bls.n	80048d6 <_vfiprintf_r+0x1a6>
 800483a:	b1b0      	cbz	r0, 800486a <_vfiprintf_r+0x13a>
 800483c:	9207      	str	r2, [sp, #28]
 800483e:	e014      	b.n	800486a <_vfiprintf_r+0x13a>
 8004840:	eba0 0308 	sub.w	r3, r0, r8
 8004844:	fa09 f303 	lsl.w	r3, r9, r3
 8004848:	4313      	orrs	r3, r2
 800484a:	9304      	str	r3, [sp, #16]
 800484c:	46a2      	mov	sl, r4
 800484e:	e7d2      	b.n	80047f6 <_vfiprintf_r+0xc6>
 8004850:	9b03      	ldr	r3, [sp, #12]
 8004852:	1d19      	adds	r1, r3, #4
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	9103      	str	r1, [sp, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	bfbb      	ittet	lt
 800485c:	425b      	neglt	r3, r3
 800485e:	f042 0202 	orrlt.w	r2, r2, #2
 8004862:	9307      	strge	r3, [sp, #28]
 8004864:	9307      	strlt	r3, [sp, #28]
 8004866:	bfb8      	it	lt
 8004868:	9204      	strlt	r2, [sp, #16]
 800486a:	7823      	ldrb	r3, [r4, #0]
 800486c:	2b2e      	cmp	r3, #46	; 0x2e
 800486e:	d10c      	bne.n	800488a <_vfiprintf_r+0x15a>
 8004870:	7863      	ldrb	r3, [r4, #1]
 8004872:	2b2a      	cmp	r3, #42	; 0x2a
 8004874:	d134      	bne.n	80048e0 <_vfiprintf_r+0x1b0>
 8004876:	9b03      	ldr	r3, [sp, #12]
 8004878:	1d1a      	adds	r2, r3, #4
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	9203      	str	r2, [sp, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	bfb8      	it	lt
 8004882:	f04f 33ff 	movlt.w	r3, #4294967295
 8004886:	3402      	adds	r4, #2
 8004888:	9305      	str	r3, [sp, #20]
 800488a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004960 <_vfiprintf_r+0x230>
 800488e:	7821      	ldrb	r1, [r4, #0]
 8004890:	2203      	movs	r2, #3
 8004892:	4650      	mov	r0, sl
 8004894:	f7fb fc9c 	bl	80001d0 <memchr>
 8004898:	b138      	cbz	r0, 80048aa <_vfiprintf_r+0x17a>
 800489a:	9b04      	ldr	r3, [sp, #16]
 800489c:	eba0 000a 	sub.w	r0, r0, sl
 80048a0:	2240      	movs	r2, #64	; 0x40
 80048a2:	4082      	lsls	r2, r0
 80048a4:	4313      	orrs	r3, r2
 80048a6:	3401      	adds	r4, #1
 80048a8:	9304      	str	r3, [sp, #16]
 80048aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ae:	4829      	ldr	r0, [pc, #164]	; (8004954 <_vfiprintf_r+0x224>)
 80048b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048b4:	2206      	movs	r2, #6
 80048b6:	f7fb fc8b 	bl	80001d0 <memchr>
 80048ba:	2800      	cmp	r0, #0
 80048bc:	d03f      	beq.n	800493e <_vfiprintf_r+0x20e>
 80048be:	4b26      	ldr	r3, [pc, #152]	; (8004958 <_vfiprintf_r+0x228>)
 80048c0:	bb1b      	cbnz	r3, 800490a <_vfiprintf_r+0x1da>
 80048c2:	9b03      	ldr	r3, [sp, #12]
 80048c4:	3307      	adds	r3, #7
 80048c6:	f023 0307 	bic.w	r3, r3, #7
 80048ca:	3308      	adds	r3, #8
 80048cc:	9303      	str	r3, [sp, #12]
 80048ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048d0:	443b      	add	r3, r7
 80048d2:	9309      	str	r3, [sp, #36]	; 0x24
 80048d4:	e768      	b.n	80047a8 <_vfiprintf_r+0x78>
 80048d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80048da:	460c      	mov	r4, r1
 80048dc:	2001      	movs	r0, #1
 80048de:	e7a6      	b.n	800482e <_vfiprintf_r+0xfe>
 80048e0:	2300      	movs	r3, #0
 80048e2:	3401      	adds	r4, #1
 80048e4:	9305      	str	r3, [sp, #20]
 80048e6:	4619      	mov	r1, r3
 80048e8:	f04f 0c0a 	mov.w	ip, #10
 80048ec:	4620      	mov	r0, r4
 80048ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048f2:	3a30      	subs	r2, #48	; 0x30
 80048f4:	2a09      	cmp	r2, #9
 80048f6:	d903      	bls.n	8004900 <_vfiprintf_r+0x1d0>
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0c6      	beq.n	800488a <_vfiprintf_r+0x15a>
 80048fc:	9105      	str	r1, [sp, #20]
 80048fe:	e7c4      	b.n	800488a <_vfiprintf_r+0x15a>
 8004900:	fb0c 2101 	mla	r1, ip, r1, r2
 8004904:	4604      	mov	r4, r0
 8004906:	2301      	movs	r3, #1
 8004908:	e7f0      	b.n	80048ec <_vfiprintf_r+0x1bc>
 800490a:	ab03      	add	r3, sp, #12
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	462a      	mov	r2, r5
 8004910:	4b12      	ldr	r3, [pc, #72]	; (800495c <_vfiprintf_r+0x22c>)
 8004912:	a904      	add	r1, sp, #16
 8004914:	4630      	mov	r0, r6
 8004916:	f3af 8000 	nop.w
 800491a:	4607      	mov	r7, r0
 800491c:	1c78      	adds	r0, r7, #1
 800491e:	d1d6      	bne.n	80048ce <_vfiprintf_r+0x19e>
 8004920:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004922:	07d9      	lsls	r1, r3, #31
 8004924:	d405      	bmi.n	8004932 <_vfiprintf_r+0x202>
 8004926:	89ab      	ldrh	r3, [r5, #12]
 8004928:	059a      	lsls	r2, r3, #22
 800492a:	d402      	bmi.n	8004932 <_vfiprintf_r+0x202>
 800492c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800492e:	f7ff fdcd 	bl	80044cc <__retarget_lock_release_recursive>
 8004932:	89ab      	ldrh	r3, [r5, #12]
 8004934:	065b      	lsls	r3, r3, #25
 8004936:	f53f af1d 	bmi.w	8004774 <_vfiprintf_r+0x44>
 800493a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800493c:	e71c      	b.n	8004778 <_vfiprintf_r+0x48>
 800493e:	ab03      	add	r3, sp, #12
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	462a      	mov	r2, r5
 8004944:	4b05      	ldr	r3, [pc, #20]	; (800495c <_vfiprintf_r+0x22c>)
 8004946:	a904      	add	r1, sp, #16
 8004948:	4630      	mov	r0, r6
 800494a:	f000 f879 	bl	8004a40 <_printf_i>
 800494e:	e7e4      	b.n	800491a <_vfiprintf_r+0x1ea>
 8004950:	080050bc 	.word	0x080050bc
 8004954:	080050c6 	.word	0x080050c6
 8004958:	00000000 	.word	0x00000000
 800495c:	0800470b 	.word	0x0800470b
 8004960:	080050c2 	.word	0x080050c2

08004964 <_printf_common>:
 8004964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004968:	4616      	mov	r6, r2
 800496a:	4699      	mov	r9, r3
 800496c:	688a      	ldr	r2, [r1, #8]
 800496e:	690b      	ldr	r3, [r1, #16]
 8004970:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004974:	4293      	cmp	r3, r2
 8004976:	bfb8      	it	lt
 8004978:	4613      	movlt	r3, r2
 800497a:	6033      	str	r3, [r6, #0]
 800497c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004980:	4607      	mov	r7, r0
 8004982:	460c      	mov	r4, r1
 8004984:	b10a      	cbz	r2, 800498a <_printf_common+0x26>
 8004986:	3301      	adds	r3, #1
 8004988:	6033      	str	r3, [r6, #0]
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	0699      	lsls	r1, r3, #26
 800498e:	bf42      	ittt	mi
 8004990:	6833      	ldrmi	r3, [r6, #0]
 8004992:	3302      	addmi	r3, #2
 8004994:	6033      	strmi	r3, [r6, #0]
 8004996:	6825      	ldr	r5, [r4, #0]
 8004998:	f015 0506 	ands.w	r5, r5, #6
 800499c:	d106      	bne.n	80049ac <_printf_common+0x48>
 800499e:	f104 0a19 	add.w	sl, r4, #25
 80049a2:	68e3      	ldr	r3, [r4, #12]
 80049a4:	6832      	ldr	r2, [r6, #0]
 80049a6:	1a9b      	subs	r3, r3, r2
 80049a8:	42ab      	cmp	r3, r5
 80049aa:	dc26      	bgt.n	80049fa <_printf_common+0x96>
 80049ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049b0:	1e13      	subs	r3, r2, #0
 80049b2:	6822      	ldr	r2, [r4, #0]
 80049b4:	bf18      	it	ne
 80049b6:	2301      	movne	r3, #1
 80049b8:	0692      	lsls	r2, r2, #26
 80049ba:	d42b      	bmi.n	8004a14 <_printf_common+0xb0>
 80049bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049c0:	4649      	mov	r1, r9
 80049c2:	4638      	mov	r0, r7
 80049c4:	47c0      	blx	r8
 80049c6:	3001      	adds	r0, #1
 80049c8:	d01e      	beq.n	8004a08 <_printf_common+0xa4>
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	6922      	ldr	r2, [r4, #16]
 80049ce:	f003 0306 	and.w	r3, r3, #6
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	bf02      	ittt	eq
 80049d6:	68e5      	ldreq	r5, [r4, #12]
 80049d8:	6833      	ldreq	r3, [r6, #0]
 80049da:	1aed      	subeq	r5, r5, r3
 80049dc:	68a3      	ldr	r3, [r4, #8]
 80049de:	bf0c      	ite	eq
 80049e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049e4:	2500      	movne	r5, #0
 80049e6:	4293      	cmp	r3, r2
 80049e8:	bfc4      	itt	gt
 80049ea:	1a9b      	subgt	r3, r3, r2
 80049ec:	18ed      	addgt	r5, r5, r3
 80049ee:	2600      	movs	r6, #0
 80049f0:	341a      	adds	r4, #26
 80049f2:	42b5      	cmp	r5, r6
 80049f4:	d11a      	bne.n	8004a2c <_printf_common+0xc8>
 80049f6:	2000      	movs	r0, #0
 80049f8:	e008      	b.n	8004a0c <_printf_common+0xa8>
 80049fa:	2301      	movs	r3, #1
 80049fc:	4652      	mov	r2, sl
 80049fe:	4649      	mov	r1, r9
 8004a00:	4638      	mov	r0, r7
 8004a02:	47c0      	blx	r8
 8004a04:	3001      	adds	r0, #1
 8004a06:	d103      	bne.n	8004a10 <_printf_common+0xac>
 8004a08:	f04f 30ff 	mov.w	r0, #4294967295
 8004a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a10:	3501      	adds	r5, #1
 8004a12:	e7c6      	b.n	80049a2 <_printf_common+0x3e>
 8004a14:	18e1      	adds	r1, r4, r3
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	2030      	movs	r0, #48	; 0x30
 8004a1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a1e:	4422      	add	r2, r4
 8004a20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a28:	3302      	adds	r3, #2
 8004a2a:	e7c7      	b.n	80049bc <_printf_common+0x58>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	4622      	mov	r2, r4
 8004a30:	4649      	mov	r1, r9
 8004a32:	4638      	mov	r0, r7
 8004a34:	47c0      	blx	r8
 8004a36:	3001      	adds	r0, #1
 8004a38:	d0e6      	beq.n	8004a08 <_printf_common+0xa4>
 8004a3a:	3601      	adds	r6, #1
 8004a3c:	e7d9      	b.n	80049f2 <_printf_common+0x8e>
	...

08004a40 <_printf_i>:
 8004a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a44:	7e0f      	ldrb	r7, [r1, #24]
 8004a46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a48:	2f78      	cmp	r7, #120	; 0x78
 8004a4a:	4691      	mov	r9, r2
 8004a4c:	4680      	mov	r8, r0
 8004a4e:	460c      	mov	r4, r1
 8004a50:	469a      	mov	sl, r3
 8004a52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a56:	d807      	bhi.n	8004a68 <_printf_i+0x28>
 8004a58:	2f62      	cmp	r7, #98	; 0x62
 8004a5a:	d80a      	bhi.n	8004a72 <_printf_i+0x32>
 8004a5c:	2f00      	cmp	r7, #0
 8004a5e:	f000 80d4 	beq.w	8004c0a <_printf_i+0x1ca>
 8004a62:	2f58      	cmp	r7, #88	; 0x58
 8004a64:	f000 80c0 	beq.w	8004be8 <_printf_i+0x1a8>
 8004a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a70:	e03a      	b.n	8004ae8 <_printf_i+0xa8>
 8004a72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a76:	2b15      	cmp	r3, #21
 8004a78:	d8f6      	bhi.n	8004a68 <_printf_i+0x28>
 8004a7a:	a101      	add	r1, pc, #4	; (adr r1, 8004a80 <_printf_i+0x40>)
 8004a7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a80:	08004ad9 	.word	0x08004ad9
 8004a84:	08004aed 	.word	0x08004aed
 8004a88:	08004a69 	.word	0x08004a69
 8004a8c:	08004a69 	.word	0x08004a69
 8004a90:	08004a69 	.word	0x08004a69
 8004a94:	08004a69 	.word	0x08004a69
 8004a98:	08004aed 	.word	0x08004aed
 8004a9c:	08004a69 	.word	0x08004a69
 8004aa0:	08004a69 	.word	0x08004a69
 8004aa4:	08004a69 	.word	0x08004a69
 8004aa8:	08004a69 	.word	0x08004a69
 8004aac:	08004bf1 	.word	0x08004bf1
 8004ab0:	08004b19 	.word	0x08004b19
 8004ab4:	08004bab 	.word	0x08004bab
 8004ab8:	08004a69 	.word	0x08004a69
 8004abc:	08004a69 	.word	0x08004a69
 8004ac0:	08004c13 	.word	0x08004c13
 8004ac4:	08004a69 	.word	0x08004a69
 8004ac8:	08004b19 	.word	0x08004b19
 8004acc:	08004a69 	.word	0x08004a69
 8004ad0:	08004a69 	.word	0x08004a69
 8004ad4:	08004bb3 	.word	0x08004bb3
 8004ad8:	682b      	ldr	r3, [r5, #0]
 8004ada:	1d1a      	adds	r2, r3, #4
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	602a      	str	r2, [r5, #0]
 8004ae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e09f      	b.n	8004c2c <_printf_i+0x1ec>
 8004aec:	6820      	ldr	r0, [r4, #0]
 8004aee:	682b      	ldr	r3, [r5, #0]
 8004af0:	0607      	lsls	r7, r0, #24
 8004af2:	f103 0104 	add.w	r1, r3, #4
 8004af6:	6029      	str	r1, [r5, #0]
 8004af8:	d501      	bpl.n	8004afe <_printf_i+0xbe>
 8004afa:	681e      	ldr	r6, [r3, #0]
 8004afc:	e003      	b.n	8004b06 <_printf_i+0xc6>
 8004afe:	0646      	lsls	r6, r0, #25
 8004b00:	d5fb      	bpl.n	8004afa <_printf_i+0xba>
 8004b02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004b06:	2e00      	cmp	r6, #0
 8004b08:	da03      	bge.n	8004b12 <_printf_i+0xd2>
 8004b0a:	232d      	movs	r3, #45	; 0x2d
 8004b0c:	4276      	negs	r6, r6
 8004b0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b12:	485a      	ldr	r0, [pc, #360]	; (8004c7c <_printf_i+0x23c>)
 8004b14:	230a      	movs	r3, #10
 8004b16:	e012      	b.n	8004b3e <_printf_i+0xfe>
 8004b18:	682b      	ldr	r3, [r5, #0]
 8004b1a:	6820      	ldr	r0, [r4, #0]
 8004b1c:	1d19      	adds	r1, r3, #4
 8004b1e:	6029      	str	r1, [r5, #0]
 8004b20:	0605      	lsls	r5, r0, #24
 8004b22:	d501      	bpl.n	8004b28 <_printf_i+0xe8>
 8004b24:	681e      	ldr	r6, [r3, #0]
 8004b26:	e002      	b.n	8004b2e <_printf_i+0xee>
 8004b28:	0641      	lsls	r1, r0, #25
 8004b2a:	d5fb      	bpl.n	8004b24 <_printf_i+0xe4>
 8004b2c:	881e      	ldrh	r6, [r3, #0]
 8004b2e:	4853      	ldr	r0, [pc, #332]	; (8004c7c <_printf_i+0x23c>)
 8004b30:	2f6f      	cmp	r7, #111	; 0x6f
 8004b32:	bf0c      	ite	eq
 8004b34:	2308      	moveq	r3, #8
 8004b36:	230a      	movne	r3, #10
 8004b38:	2100      	movs	r1, #0
 8004b3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b3e:	6865      	ldr	r5, [r4, #4]
 8004b40:	60a5      	str	r5, [r4, #8]
 8004b42:	2d00      	cmp	r5, #0
 8004b44:	bfa2      	ittt	ge
 8004b46:	6821      	ldrge	r1, [r4, #0]
 8004b48:	f021 0104 	bicge.w	r1, r1, #4
 8004b4c:	6021      	strge	r1, [r4, #0]
 8004b4e:	b90e      	cbnz	r6, 8004b54 <_printf_i+0x114>
 8004b50:	2d00      	cmp	r5, #0
 8004b52:	d04b      	beq.n	8004bec <_printf_i+0x1ac>
 8004b54:	4615      	mov	r5, r2
 8004b56:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b5a:	fb03 6711 	mls	r7, r3, r1, r6
 8004b5e:	5dc7      	ldrb	r7, [r0, r7]
 8004b60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b64:	4637      	mov	r7, r6
 8004b66:	42bb      	cmp	r3, r7
 8004b68:	460e      	mov	r6, r1
 8004b6a:	d9f4      	bls.n	8004b56 <_printf_i+0x116>
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d10b      	bne.n	8004b88 <_printf_i+0x148>
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	07de      	lsls	r6, r3, #31
 8004b74:	d508      	bpl.n	8004b88 <_printf_i+0x148>
 8004b76:	6923      	ldr	r3, [r4, #16]
 8004b78:	6861      	ldr	r1, [r4, #4]
 8004b7a:	4299      	cmp	r1, r3
 8004b7c:	bfde      	ittt	le
 8004b7e:	2330      	movle	r3, #48	; 0x30
 8004b80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b88:	1b52      	subs	r2, r2, r5
 8004b8a:	6122      	str	r2, [r4, #16]
 8004b8c:	f8cd a000 	str.w	sl, [sp]
 8004b90:	464b      	mov	r3, r9
 8004b92:	aa03      	add	r2, sp, #12
 8004b94:	4621      	mov	r1, r4
 8004b96:	4640      	mov	r0, r8
 8004b98:	f7ff fee4 	bl	8004964 <_printf_common>
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	d14a      	bne.n	8004c36 <_printf_i+0x1f6>
 8004ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba4:	b004      	add	sp, #16
 8004ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	f043 0320 	orr.w	r3, r3, #32
 8004bb0:	6023      	str	r3, [r4, #0]
 8004bb2:	4833      	ldr	r0, [pc, #204]	; (8004c80 <_printf_i+0x240>)
 8004bb4:	2778      	movs	r7, #120	; 0x78
 8004bb6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	6829      	ldr	r1, [r5, #0]
 8004bbe:	061f      	lsls	r7, r3, #24
 8004bc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bc4:	d402      	bmi.n	8004bcc <_printf_i+0x18c>
 8004bc6:	065f      	lsls	r7, r3, #25
 8004bc8:	bf48      	it	mi
 8004bca:	b2b6      	uxthmi	r6, r6
 8004bcc:	07df      	lsls	r7, r3, #31
 8004bce:	bf48      	it	mi
 8004bd0:	f043 0320 	orrmi.w	r3, r3, #32
 8004bd4:	6029      	str	r1, [r5, #0]
 8004bd6:	bf48      	it	mi
 8004bd8:	6023      	strmi	r3, [r4, #0]
 8004bda:	b91e      	cbnz	r6, 8004be4 <_printf_i+0x1a4>
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	f023 0320 	bic.w	r3, r3, #32
 8004be2:	6023      	str	r3, [r4, #0]
 8004be4:	2310      	movs	r3, #16
 8004be6:	e7a7      	b.n	8004b38 <_printf_i+0xf8>
 8004be8:	4824      	ldr	r0, [pc, #144]	; (8004c7c <_printf_i+0x23c>)
 8004bea:	e7e4      	b.n	8004bb6 <_printf_i+0x176>
 8004bec:	4615      	mov	r5, r2
 8004bee:	e7bd      	b.n	8004b6c <_printf_i+0x12c>
 8004bf0:	682b      	ldr	r3, [r5, #0]
 8004bf2:	6826      	ldr	r6, [r4, #0]
 8004bf4:	6961      	ldr	r1, [r4, #20]
 8004bf6:	1d18      	adds	r0, r3, #4
 8004bf8:	6028      	str	r0, [r5, #0]
 8004bfa:	0635      	lsls	r5, r6, #24
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	d501      	bpl.n	8004c04 <_printf_i+0x1c4>
 8004c00:	6019      	str	r1, [r3, #0]
 8004c02:	e002      	b.n	8004c0a <_printf_i+0x1ca>
 8004c04:	0670      	lsls	r0, r6, #25
 8004c06:	d5fb      	bpl.n	8004c00 <_printf_i+0x1c0>
 8004c08:	8019      	strh	r1, [r3, #0]
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	6123      	str	r3, [r4, #16]
 8004c0e:	4615      	mov	r5, r2
 8004c10:	e7bc      	b.n	8004b8c <_printf_i+0x14c>
 8004c12:	682b      	ldr	r3, [r5, #0]
 8004c14:	1d1a      	adds	r2, r3, #4
 8004c16:	602a      	str	r2, [r5, #0]
 8004c18:	681d      	ldr	r5, [r3, #0]
 8004c1a:	6862      	ldr	r2, [r4, #4]
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	4628      	mov	r0, r5
 8004c20:	f7fb fad6 	bl	80001d0 <memchr>
 8004c24:	b108      	cbz	r0, 8004c2a <_printf_i+0x1ea>
 8004c26:	1b40      	subs	r0, r0, r5
 8004c28:	6060      	str	r0, [r4, #4]
 8004c2a:	6863      	ldr	r3, [r4, #4]
 8004c2c:	6123      	str	r3, [r4, #16]
 8004c2e:	2300      	movs	r3, #0
 8004c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c34:	e7aa      	b.n	8004b8c <_printf_i+0x14c>
 8004c36:	6923      	ldr	r3, [r4, #16]
 8004c38:	462a      	mov	r2, r5
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	4640      	mov	r0, r8
 8004c3e:	47d0      	blx	sl
 8004c40:	3001      	adds	r0, #1
 8004c42:	d0ad      	beq.n	8004ba0 <_printf_i+0x160>
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	079b      	lsls	r3, r3, #30
 8004c48:	d413      	bmi.n	8004c72 <_printf_i+0x232>
 8004c4a:	68e0      	ldr	r0, [r4, #12]
 8004c4c:	9b03      	ldr	r3, [sp, #12]
 8004c4e:	4298      	cmp	r0, r3
 8004c50:	bfb8      	it	lt
 8004c52:	4618      	movlt	r0, r3
 8004c54:	e7a6      	b.n	8004ba4 <_printf_i+0x164>
 8004c56:	2301      	movs	r3, #1
 8004c58:	4632      	mov	r2, r6
 8004c5a:	4649      	mov	r1, r9
 8004c5c:	4640      	mov	r0, r8
 8004c5e:	47d0      	blx	sl
 8004c60:	3001      	adds	r0, #1
 8004c62:	d09d      	beq.n	8004ba0 <_printf_i+0x160>
 8004c64:	3501      	adds	r5, #1
 8004c66:	68e3      	ldr	r3, [r4, #12]
 8004c68:	9903      	ldr	r1, [sp, #12]
 8004c6a:	1a5b      	subs	r3, r3, r1
 8004c6c:	42ab      	cmp	r3, r5
 8004c6e:	dcf2      	bgt.n	8004c56 <_printf_i+0x216>
 8004c70:	e7eb      	b.n	8004c4a <_printf_i+0x20a>
 8004c72:	2500      	movs	r5, #0
 8004c74:	f104 0619 	add.w	r6, r4, #25
 8004c78:	e7f5      	b.n	8004c66 <_printf_i+0x226>
 8004c7a:	bf00      	nop
 8004c7c:	080050cd 	.word	0x080050cd
 8004c80:	080050de 	.word	0x080050de

08004c84 <__sflush_r>:
 8004c84:	898a      	ldrh	r2, [r1, #12]
 8004c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c8a:	4605      	mov	r5, r0
 8004c8c:	0710      	lsls	r0, r2, #28
 8004c8e:	460c      	mov	r4, r1
 8004c90:	d458      	bmi.n	8004d44 <__sflush_r+0xc0>
 8004c92:	684b      	ldr	r3, [r1, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	dc05      	bgt.n	8004ca4 <__sflush_r+0x20>
 8004c98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	dc02      	bgt.n	8004ca4 <__sflush_r+0x20>
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ca6:	2e00      	cmp	r6, #0
 8004ca8:	d0f9      	beq.n	8004c9e <__sflush_r+0x1a>
 8004caa:	2300      	movs	r3, #0
 8004cac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004cb0:	682f      	ldr	r7, [r5, #0]
 8004cb2:	6a21      	ldr	r1, [r4, #32]
 8004cb4:	602b      	str	r3, [r5, #0]
 8004cb6:	d032      	beq.n	8004d1e <__sflush_r+0x9a>
 8004cb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004cba:	89a3      	ldrh	r3, [r4, #12]
 8004cbc:	075a      	lsls	r2, r3, #29
 8004cbe:	d505      	bpl.n	8004ccc <__sflush_r+0x48>
 8004cc0:	6863      	ldr	r3, [r4, #4]
 8004cc2:	1ac0      	subs	r0, r0, r3
 8004cc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cc6:	b10b      	cbz	r3, 8004ccc <__sflush_r+0x48>
 8004cc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cca:	1ac0      	subs	r0, r0, r3
 8004ccc:	2300      	movs	r3, #0
 8004cce:	4602      	mov	r2, r0
 8004cd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cd2:	6a21      	ldr	r1, [r4, #32]
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	47b0      	blx	r6
 8004cd8:	1c43      	adds	r3, r0, #1
 8004cda:	89a3      	ldrh	r3, [r4, #12]
 8004cdc:	d106      	bne.n	8004cec <__sflush_r+0x68>
 8004cde:	6829      	ldr	r1, [r5, #0]
 8004ce0:	291d      	cmp	r1, #29
 8004ce2:	d82b      	bhi.n	8004d3c <__sflush_r+0xb8>
 8004ce4:	4a29      	ldr	r2, [pc, #164]	; (8004d8c <__sflush_r+0x108>)
 8004ce6:	410a      	asrs	r2, r1
 8004ce8:	07d6      	lsls	r6, r2, #31
 8004cea:	d427      	bmi.n	8004d3c <__sflush_r+0xb8>
 8004cec:	2200      	movs	r2, #0
 8004cee:	6062      	str	r2, [r4, #4]
 8004cf0:	04d9      	lsls	r1, r3, #19
 8004cf2:	6922      	ldr	r2, [r4, #16]
 8004cf4:	6022      	str	r2, [r4, #0]
 8004cf6:	d504      	bpl.n	8004d02 <__sflush_r+0x7e>
 8004cf8:	1c42      	adds	r2, r0, #1
 8004cfa:	d101      	bne.n	8004d00 <__sflush_r+0x7c>
 8004cfc:	682b      	ldr	r3, [r5, #0]
 8004cfe:	b903      	cbnz	r3, 8004d02 <__sflush_r+0x7e>
 8004d00:	6560      	str	r0, [r4, #84]	; 0x54
 8004d02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d04:	602f      	str	r7, [r5, #0]
 8004d06:	2900      	cmp	r1, #0
 8004d08:	d0c9      	beq.n	8004c9e <__sflush_r+0x1a>
 8004d0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d0e:	4299      	cmp	r1, r3
 8004d10:	d002      	beq.n	8004d18 <__sflush_r+0x94>
 8004d12:	4628      	mov	r0, r5
 8004d14:	f7ff fbea 	bl	80044ec <_free_r>
 8004d18:	2000      	movs	r0, #0
 8004d1a:	6360      	str	r0, [r4, #52]	; 0x34
 8004d1c:	e7c0      	b.n	8004ca0 <__sflush_r+0x1c>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	4628      	mov	r0, r5
 8004d22:	47b0      	blx	r6
 8004d24:	1c41      	adds	r1, r0, #1
 8004d26:	d1c8      	bne.n	8004cba <__sflush_r+0x36>
 8004d28:	682b      	ldr	r3, [r5, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0c5      	beq.n	8004cba <__sflush_r+0x36>
 8004d2e:	2b1d      	cmp	r3, #29
 8004d30:	d001      	beq.n	8004d36 <__sflush_r+0xb2>
 8004d32:	2b16      	cmp	r3, #22
 8004d34:	d101      	bne.n	8004d3a <__sflush_r+0xb6>
 8004d36:	602f      	str	r7, [r5, #0]
 8004d38:	e7b1      	b.n	8004c9e <__sflush_r+0x1a>
 8004d3a:	89a3      	ldrh	r3, [r4, #12]
 8004d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d40:	81a3      	strh	r3, [r4, #12]
 8004d42:	e7ad      	b.n	8004ca0 <__sflush_r+0x1c>
 8004d44:	690f      	ldr	r7, [r1, #16]
 8004d46:	2f00      	cmp	r7, #0
 8004d48:	d0a9      	beq.n	8004c9e <__sflush_r+0x1a>
 8004d4a:	0793      	lsls	r3, r2, #30
 8004d4c:	680e      	ldr	r6, [r1, #0]
 8004d4e:	bf08      	it	eq
 8004d50:	694b      	ldreq	r3, [r1, #20]
 8004d52:	600f      	str	r7, [r1, #0]
 8004d54:	bf18      	it	ne
 8004d56:	2300      	movne	r3, #0
 8004d58:	eba6 0807 	sub.w	r8, r6, r7
 8004d5c:	608b      	str	r3, [r1, #8]
 8004d5e:	f1b8 0f00 	cmp.w	r8, #0
 8004d62:	dd9c      	ble.n	8004c9e <__sflush_r+0x1a>
 8004d64:	6a21      	ldr	r1, [r4, #32]
 8004d66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d68:	4643      	mov	r3, r8
 8004d6a:	463a      	mov	r2, r7
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	47b0      	blx	r6
 8004d70:	2800      	cmp	r0, #0
 8004d72:	dc06      	bgt.n	8004d82 <__sflush_r+0xfe>
 8004d74:	89a3      	ldrh	r3, [r4, #12]
 8004d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d7a:	81a3      	strh	r3, [r4, #12]
 8004d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d80:	e78e      	b.n	8004ca0 <__sflush_r+0x1c>
 8004d82:	4407      	add	r7, r0
 8004d84:	eba8 0800 	sub.w	r8, r8, r0
 8004d88:	e7e9      	b.n	8004d5e <__sflush_r+0xda>
 8004d8a:	bf00      	nop
 8004d8c:	dfbffffe 	.word	0xdfbffffe

08004d90 <_fflush_r>:
 8004d90:	b538      	push	{r3, r4, r5, lr}
 8004d92:	690b      	ldr	r3, [r1, #16]
 8004d94:	4605      	mov	r5, r0
 8004d96:	460c      	mov	r4, r1
 8004d98:	b913      	cbnz	r3, 8004da0 <_fflush_r+0x10>
 8004d9a:	2500      	movs	r5, #0
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	bd38      	pop	{r3, r4, r5, pc}
 8004da0:	b118      	cbz	r0, 8004daa <_fflush_r+0x1a>
 8004da2:	6a03      	ldr	r3, [r0, #32]
 8004da4:	b90b      	cbnz	r3, 8004daa <_fflush_r+0x1a>
 8004da6:	f7ff fa8b 	bl	80042c0 <__sinit>
 8004daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f3      	beq.n	8004d9a <_fflush_r+0xa>
 8004db2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004db4:	07d0      	lsls	r0, r2, #31
 8004db6:	d404      	bmi.n	8004dc2 <_fflush_r+0x32>
 8004db8:	0599      	lsls	r1, r3, #22
 8004dba:	d402      	bmi.n	8004dc2 <_fflush_r+0x32>
 8004dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dbe:	f7ff fb84 	bl	80044ca <__retarget_lock_acquire_recursive>
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	f7ff ff5d 	bl	8004c84 <__sflush_r>
 8004dca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dcc:	07da      	lsls	r2, r3, #31
 8004dce:	4605      	mov	r5, r0
 8004dd0:	d4e4      	bmi.n	8004d9c <_fflush_r+0xc>
 8004dd2:	89a3      	ldrh	r3, [r4, #12]
 8004dd4:	059b      	lsls	r3, r3, #22
 8004dd6:	d4e1      	bmi.n	8004d9c <_fflush_r+0xc>
 8004dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dda:	f7ff fb77 	bl	80044cc <__retarget_lock_release_recursive>
 8004dde:	e7dd      	b.n	8004d9c <_fflush_r+0xc>

08004de0 <__swbuf_r>:
 8004de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de2:	460e      	mov	r6, r1
 8004de4:	4614      	mov	r4, r2
 8004de6:	4605      	mov	r5, r0
 8004de8:	b118      	cbz	r0, 8004df2 <__swbuf_r+0x12>
 8004dea:	6a03      	ldr	r3, [r0, #32]
 8004dec:	b90b      	cbnz	r3, 8004df2 <__swbuf_r+0x12>
 8004dee:	f7ff fa67 	bl	80042c0 <__sinit>
 8004df2:	69a3      	ldr	r3, [r4, #24]
 8004df4:	60a3      	str	r3, [r4, #8]
 8004df6:	89a3      	ldrh	r3, [r4, #12]
 8004df8:	071a      	lsls	r2, r3, #28
 8004dfa:	d525      	bpl.n	8004e48 <__swbuf_r+0x68>
 8004dfc:	6923      	ldr	r3, [r4, #16]
 8004dfe:	b31b      	cbz	r3, 8004e48 <__swbuf_r+0x68>
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	6922      	ldr	r2, [r4, #16]
 8004e04:	1a98      	subs	r0, r3, r2
 8004e06:	6963      	ldr	r3, [r4, #20]
 8004e08:	b2f6      	uxtb	r6, r6
 8004e0a:	4283      	cmp	r3, r0
 8004e0c:	4637      	mov	r7, r6
 8004e0e:	dc04      	bgt.n	8004e1a <__swbuf_r+0x3a>
 8004e10:	4621      	mov	r1, r4
 8004e12:	4628      	mov	r0, r5
 8004e14:	f7ff ffbc 	bl	8004d90 <_fflush_r>
 8004e18:	b9e0      	cbnz	r0, 8004e54 <__swbuf_r+0x74>
 8004e1a:	68a3      	ldr	r3, [r4, #8]
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	60a3      	str	r3, [r4, #8]
 8004e20:	6823      	ldr	r3, [r4, #0]
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	6022      	str	r2, [r4, #0]
 8004e26:	701e      	strb	r6, [r3, #0]
 8004e28:	6962      	ldr	r2, [r4, #20]
 8004e2a:	1c43      	adds	r3, r0, #1
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d004      	beq.n	8004e3a <__swbuf_r+0x5a>
 8004e30:	89a3      	ldrh	r3, [r4, #12]
 8004e32:	07db      	lsls	r3, r3, #31
 8004e34:	d506      	bpl.n	8004e44 <__swbuf_r+0x64>
 8004e36:	2e0a      	cmp	r6, #10
 8004e38:	d104      	bne.n	8004e44 <__swbuf_r+0x64>
 8004e3a:	4621      	mov	r1, r4
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	f7ff ffa7 	bl	8004d90 <_fflush_r>
 8004e42:	b938      	cbnz	r0, 8004e54 <__swbuf_r+0x74>
 8004e44:	4638      	mov	r0, r7
 8004e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e48:	4621      	mov	r1, r4
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	f000 f806 	bl	8004e5c <__swsetup_r>
 8004e50:	2800      	cmp	r0, #0
 8004e52:	d0d5      	beq.n	8004e00 <__swbuf_r+0x20>
 8004e54:	f04f 37ff 	mov.w	r7, #4294967295
 8004e58:	e7f4      	b.n	8004e44 <__swbuf_r+0x64>
	...

08004e5c <__swsetup_r>:
 8004e5c:	b538      	push	{r3, r4, r5, lr}
 8004e5e:	4b2a      	ldr	r3, [pc, #168]	; (8004f08 <__swsetup_r+0xac>)
 8004e60:	4605      	mov	r5, r0
 8004e62:	6818      	ldr	r0, [r3, #0]
 8004e64:	460c      	mov	r4, r1
 8004e66:	b118      	cbz	r0, 8004e70 <__swsetup_r+0x14>
 8004e68:	6a03      	ldr	r3, [r0, #32]
 8004e6a:	b90b      	cbnz	r3, 8004e70 <__swsetup_r+0x14>
 8004e6c:	f7ff fa28 	bl	80042c0 <__sinit>
 8004e70:	89a3      	ldrh	r3, [r4, #12]
 8004e72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e76:	0718      	lsls	r0, r3, #28
 8004e78:	d422      	bmi.n	8004ec0 <__swsetup_r+0x64>
 8004e7a:	06d9      	lsls	r1, r3, #27
 8004e7c:	d407      	bmi.n	8004e8e <__swsetup_r+0x32>
 8004e7e:	2309      	movs	r3, #9
 8004e80:	602b      	str	r3, [r5, #0]
 8004e82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e86:	81a3      	strh	r3, [r4, #12]
 8004e88:	f04f 30ff 	mov.w	r0, #4294967295
 8004e8c:	e034      	b.n	8004ef8 <__swsetup_r+0x9c>
 8004e8e:	0758      	lsls	r0, r3, #29
 8004e90:	d512      	bpl.n	8004eb8 <__swsetup_r+0x5c>
 8004e92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e94:	b141      	cbz	r1, 8004ea8 <__swsetup_r+0x4c>
 8004e96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e9a:	4299      	cmp	r1, r3
 8004e9c:	d002      	beq.n	8004ea4 <__swsetup_r+0x48>
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	f7ff fb24 	bl	80044ec <_free_r>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	6363      	str	r3, [r4, #52]	; 0x34
 8004ea8:	89a3      	ldrh	r3, [r4, #12]
 8004eaa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004eae:	81a3      	strh	r3, [r4, #12]
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	6063      	str	r3, [r4, #4]
 8004eb4:	6923      	ldr	r3, [r4, #16]
 8004eb6:	6023      	str	r3, [r4, #0]
 8004eb8:	89a3      	ldrh	r3, [r4, #12]
 8004eba:	f043 0308 	orr.w	r3, r3, #8
 8004ebe:	81a3      	strh	r3, [r4, #12]
 8004ec0:	6923      	ldr	r3, [r4, #16]
 8004ec2:	b94b      	cbnz	r3, 8004ed8 <__swsetup_r+0x7c>
 8004ec4:	89a3      	ldrh	r3, [r4, #12]
 8004ec6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ece:	d003      	beq.n	8004ed8 <__swsetup_r+0x7c>
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	f000 f850 	bl	8004f78 <__smakebuf_r>
 8004ed8:	89a0      	ldrh	r0, [r4, #12]
 8004eda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ede:	f010 0301 	ands.w	r3, r0, #1
 8004ee2:	d00a      	beq.n	8004efa <__swsetup_r+0x9e>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60a3      	str	r3, [r4, #8]
 8004ee8:	6963      	ldr	r3, [r4, #20]
 8004eea:	425b      	negs	r3, r3
 8004eec:	61a3      	str	r3, [r4, #24]
 8004eee:	6923      	ldr	r3, [r4, #16]
 8004ef0:	b943      	cbnz	r3, 8004f04 <__swsetup_r+0xa8>
 8004ef2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ef6:	d1c4      	bne.n	8004e82 <__swsetup_r+0x26>
 8004ef8:	bd38      	pop	{r3, r4, r5, pc}
 8004efa:	0781      	lsls	r1, r0, #30
 8004efc:	bf58      	it	pl
 8004efe:	6963      	ldrpl	r3, [r4, #20]
 8004f00:	60a3      	str	r3, [r4, #8]
 8004f02:	e7f4      	b.n	8004eee <__swsetup_r+0x92>
 8004f04:	2000      	movs	r0, #0
 8004f06:	e7f7      	b.n	8004ef8 <__swsetup_r+0x9c>
 8004f08:	2000006c 	.word	0x2000006c

08004f0c <_sbrk_r>:
 8004f0c:	b538      	push	{r3, r4, r5, lr}
 8004f0e:	4d06      	ldr	r5, [pc, #24]	; (8004f28 <_sbrk_r+0x1c>)
 8004f10:	2300      	movs	r3, #0
 8004f12:	4604      	mov	r4, r0
 8004f14:	4608      	mov	r0, r1
 8004f16:	602b      	str	r3, [r5, #0]
 8004f18:	f7fb fe2e 	bl	8000b78 <_sbrk>
 8004f1c:	1c43      	adds	r3, r0, #1
 8004f1e:	d102      	bne.n	8004f26 <_sbrk_r+0x1a>
 8004f20:	682b      	ldr	r3, [r5, #0]
 8004f22:	b103      	cbz	r3, 8004f26 <_sbrk_r+0x1a>
 8004f24:	6023      	str	r3, [r4, #0]
 8004f26:	bd38      	pop	{r3, r4, r5, pc}
 8004f28:	20012f78 	.word	0x20012f78

08004f2c <__swhatbuf_r>:
 8004f2c:	b570      	push	{r4, r5, r6, lr}
 8004f2e:	460c      	mov	r4, r1
 8004f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f34:	2900      	cmp	r1, #0
 8004f36:	b096      	sub	sp, #88	; 0x58
 8004f38:	4615      	mov	r5, r2
 8004f3a:	461e      	mov	r6, r3
 8004f3c:	da0d      	bge.n	8004f5a <__swhatbuf_r+0x2e>
 8004f3e:	89a3      	ldrh	r3, [r4, #12]
 8004f40:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004f44:	f04f 0100 	mov.w	r1, #0
 8004f48:	bf0c      	ite	eq
 8004f4a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004f4e:	2340      	movne	r3, #64	; 0x40
 8004f50:	2000      	movs	r0, #0
 8004f52:	6031      	str	r1, [r6, #0]
 8004f54:	602b      	str	r3, [r5, #0]
 8004f56:	b016      	add	sp, #88	; 0x58
 8004f58:	bd70      	pop	{r4, r5, r6, pc}
 8004f5a:	466a      	mov	r2, sp
 8004f5c:	f000 f848 	bl	8004ff0 <_fstat_r>
 8004f60:	2800      	cmp	r0, #0
 8004f62:	dbec      	blt.n	8004f3e <__swhatbuf_r+0x12>
 8004f64:	9901      	ldr	r1, [sp, #4]
 8004f66:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004f6a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004f6e:	4259      	negs	r1, r3
 8004f70:	4159      	adcs	r1, r3
 8004f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f76:	e7eb      	b.n	8004f50 <__swhatbuf_r+0x24>

08004f78 <__smakebuf_r>:
 8004f78:	898b      	ldrh	r3, [r1, #12]
 8004f7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f7c:	079d      	lsls	r5, r3, #30
 8004f7e:	4606      	mov	r6, r0
 8004f80:	460c      	mov	r4, r1
 8004f82:	d507      	bpl.n	8004f94 <__smakebuf_r+0x1c>
 8004f84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	6123      	str	r3, [r4, #16]
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	6163      	str	r3, [r4, #20]
 8004f90:	b002      	add	sp, #8
 8004f92:	bd70      	pop	{r4, r5, r6, pc}
 8004f94:	ab01      	add	r3, sp, #4
 8004f96:	466a      	mov	r2, sp
 8004f98:	f7ff ffc8 	bl	8004f2c <__swhatbuf_r>
 8004f9c:	9900      	ldr	r1, [sp, #0]
 8004f9e:	4605      	mov	r5, r0
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	f7ff fb0f 	bl	80045c4 <_malloc_r>
 8004fa6:	b948      	cbnz	r0, 8004fbc <__smakebuf_r+0x44>
 8004fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fac:	059a      	lsls	r2, r3, #22
 8004fae:	d4ef      	bmi.n	8004f90 <__smakebuf_r+0x18>
 8004fb0:	f023 0303 	bic.w	r3, r3, #3
 8004fb4:	f043 0302 	orr.w	r3, r3, #2
 8004fb8:	81a3      	strh	r3, [r4, #12]
 8004fba:	e7e3      	b.n	8004f84 <__smakebuf_r+0xc>
 8004fbc:	89a3      	ldrh	r3, [r4, #12]
 8004fbe:	6020      	str	r0, [r4, #0]
 8004fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc4:	81a3      	strh	r3, [r4, #12]
 8004fc6:	9b00      	ldr	r3, [sp, #0]
 8004fc8:	6163      	str	r3, [r4, #20]
 8004fca:	9b01      	ldr	r3, [sp, #4]
 8004fcc:	6120      	str	r0, [r4, #16]
 8004fce:	b15b      	cbz	r3, 8004fe8 <__smakebuf_r+0x70>
 8004fd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fd4:	4630      	mov	r0, r6
 8004fd6:	f000 f81d 	bl	8005014 <_isatty_r>
 8004fda:	b128      	cbz	r0, 8004fe8 <__smakebuf_r+0x70>
 8004fdc:	89a3      	ldrh	r3, [r4, #12]
 8004fde:	f023 0303 	bic.w	r3, r3, #3
 8004fe2:	f043 0301 	orr.w	r3, r3, #1
 8004fe6:	81a3      	strh	r3, [r4, #12]
 8004fe8:	89a3      	ldrh	r3, [r4, #12]
 8004fea:	431d      	orrs	r5, r3
 8004fec:	81a5      	strh	r5, [r4, #12]
 8004fee:	e7cf      	b.n	8004f90 <__smakebuf_r+0x18>

08004ff0 <_fstat_r>:
 8004ff0:	b538      	push	{r3, r4, r5, lr}
 8004ff2:	4d07      	ldr	r5, [pc, #28]	; (8005010 <_fstat_r+0x20>)
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	4608      	mov	r0, r1
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	602b      	str	r3, [r5, #0]
 8004ffe:	f7fb fd92 	bl	8000b26 <_fstat>
 8005002:	1c43      	adds	r3, r0, #1
 8005004:	d102      	bne.n	800500c <_fstat_r+0x1c>
 8005006:	682b      	ldr	r3, [r5, #0]
 8005008:	b103      	cbz	r3, 800500c <_fstat_r+0x1c>
 800500a:	6023      	str	r3, [r4, #0]
 800500c:	bd38      	pop	{r3, r4, r5, pc}
 800500e:	bf00      	nop
 8005010:	20012f78 	.word	0x20012f78

08005014 <_isatty_r>:
 8005014:	b538      	push	{r3, r4, r5, lr}
 8005016:	4d06      	ldr	r5, [pc, #24]	; (8005030 <_isatty_r+0x1c>)
 8005018:	2300      	movs	r3, #0
 800501a:	4604      	mov	r4, r0
 800501c:	4608      	mov	r0, r1
 800501e:	602b      	str	r3, [r5, #0]
 8005020:	f7fb fd91 	bl	8000b46 <_isatty>
 8005024:	1c43      	adds	r3, r0, #1
 8005026:	d102      	bne.n	800502e <_isatty_r+0x1a>
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	b103      	cbz	r3, 800502e <_isatty_r+0x1a>
 800502c:	6023      	str	r3, [r4, #0]
 800502e:	bd38      	pop	{r3, r4, r5, pc}
 8005030:	20012f78 	.word	0x20012f78

08005034 <_init>:
 8005034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005036:	bf00      	nop
 8005038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503a:	bc08      	pop	{r3}
 800503c:	469e      	mov	lr, r3
 800503e:	4770      	bx	lr

08005040 <_fini>:
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	bf00      	nop
 8005044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005046:	bc08      	pop	{r3}
 8005048:	469e      	mov	lr, r3
 800504a:	4770      	bx	lr
