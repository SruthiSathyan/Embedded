
CountingSemaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08005f90  08005f90  00015f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061e8  080061e8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080061e8  080061e8  000161e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061f0  080061f0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061f0  080061f0  000161f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061f4  080061f4  000161f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080061f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00004074  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004090  20004090  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011bba  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002b32  00000000  00000000  00031c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001048  00000000  00000000  00034780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cb4  00000000  00000000  000357c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000227b7  00000000  00000000  0003647c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013940  00000000  00000000  00058c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d2e77  00000000  00000000  0006c573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004468  00000000  00000000  0013f3ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  00143854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f78 	.word	0x08005f78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08005f78 	.word	0x08005f78

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000038 	.word	0x20000038
 800050c:	2000008c 	.word	0x2000008c

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 ff47 	bl	80013a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f869 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f8fb 	bl	8000718 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000522:	f000 f8cf 	bl	80006c4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

//  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
  CountingSem = xSemaphoreCreateCounting(3, 0);
 8000526:	2100      	movs	r1, #0
 8000528:	2003      	movs	r0, #3
 800052a:	f003 fbe0 	bl	8003cee <xQueueCreateCountingSemaphore>
 800052e:	4603      	mov	r3, r0
 8000530:	4a1f      	ldr	r2, [pc, #124]	; (80005b0 <main+0xa0>)
 8000532:	6013      	str	r3, [r2, #0]
  if(CountingSem == NULL)
 8000534:	4b1e      	ldr	r3, [pc, #120]	; (80005b0 <main+0xa0>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d106      	bne.n	800054a <main+0x3a>
  {
	  HAL_UART_Transmit(&huart2, (uint8_t*)"Unable to create semaphore \n\n", 28, 100);
 800053c:	2364      	movs	r3, #100	; 0x64
 800053e:	221c      	movs	r2, #28
 8000540:	491c      	ldr	r1, [pc, #112]	; (80005b4 <main+0xa4>)
 8000542:	481d      	ldr	r0, [pc, #116]	; (80005b8 <main+0xa8>)
 8000544:	f002 fa58 	bl	80029f8 <HAL_UART_Transmit>
 8000548:	e006      	b.n	8000558 <main+0x48>
  }
  else
  {
	  HAL_UART_Transmit(&huart2, (uint8_t*)"Counting semaphore created successfully \n\n", 28, 1000);
 800054a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800054e:	221c      	movs	r2, #28
 8000550:	491a      	ldr	r1, [pc, #104]	; (80005bc <main+0xac>)
 8000552:	4819      	ldr	r0, [pc, #100]	; (80005b8 <main+0xa8>)
 8000554:	f002 fa50 	bl	80029f8 <HAL_UART_Transmit>
  }

  	xTaskCreate(HPT_TASK, "HPT", 128, NULL, 3, &HPThandler);
 8000558:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <main+0xb0>)
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	2303      	movs	r3, #3
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2300      	movs	r3, #0
 8000562:	2280      	movs	r2, #128	; 0x80
 8000564:	4917      	ldr	r1, [pc, #92]	; (80005c4 <main+0xb4>)
 8000566:	4818      	ldr	r0, [pc, #96]	; (80005c8 <main+0xb8>)
 8000568:	f004 f809 	bl	800457e <xTaskCreate>
    xTaskCreate(MPT_TASK, "MPT", 128, NULL, 2, &MPThandler);
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <main+0xbc>)
 800056e:	9301      	str	r3, [sp, #4]
 8000570:	2302      	movs	r3, #2
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	2300      	movs	r3, #0
 8000576:	2280      	movs	r2, #128	; 0x80
 8000578:	4915      	ldr	r1, [pc, #84]	; (80005d0 <main+0xc0>)
 800057a:	4816      	ldr	r0, [pc, #88]	; (80005d4 <main+0xc4>)
 800057c:	f003 ffff 	bl	800457e <xTaskCreate>
    xTaskCreate(LPT_TASK, "LPT", 128, NULL, 1, &LPThandler);
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <main+0xc8>)
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	2301      	movs	r3, #1
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	2300      	movs	r3, #0
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	4913      	ldr	r1, [pc, #76]	; (80005dc <main+0xcc>)
 800058e:	4814      	ldr	r0, [pc, #80]	; (80005e0 <main+0xd0>)
 8000590:	f003 fff5 	bl	800457e <xTaskCreate>
    xTaskCreate(VLPT_TASK, "VLPT", 128, NULL, 0, &VLPThandler);
 8000594:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <main+0xd4>)
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	2300      	movs	r3, #0
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2300      	movs	r3, #0
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	4911      	ldr	r1, [pc, #68]	; (80005e8 <main+0xd8>)
 80005a2:	4812      	ldr	r0, [pc, #72]	; (80005ec <main+0xdc>)
 80005a4:	f003 ffeb 	bl	800457e <xTaskCreate>

    vTaskStartScheduler();
 80005a8:	f004 f9e4 	bl	8004974 <vTaskStartScheduler>
//  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <main+0x9c>
 80005ae:	bf00      	nop
 80005b0:	200002e4 	.word	0x200002e4
 80005b4:	08005f90 	.word	0x08005f90
 80005b8:	2000028c 	.word	0x2000028c
 80005bc:	08005fb0 	.word	0x08005fb0
 80005c0:	200002d4 	.word	0x200002d4
 80005c4:	08005fdc 	.word	0x08005fdc
 80005c8:	080009d5 	.word	0x080009d5
 80005cc:	200002d8 	.word	0x200002d8
 80005d0:	08005fe0 	.word	0x08005fe0
 80005d4:	08000b91 	.word	0x08000b91
 80005d8:	200002dc 	.word	0x200002dc
 80005dc:	08005fe4 	.word	0x08005fe4
 80005e0:	08000d35 	.word	0x08000d35
 80005e4:	200002e0 	.word	0x200002e0
 80005e8:	08005fe8 	.word	0x08005fe8
 80005ec:	08000ec9 	.word	0x08000ec9

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f005 fc70 	bl	8005ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b28      	ldr	r3, [pc, #160]	; (80006bc <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a27      	ldr	r2, [pc, #156]	; (80006bc <SystemClock_Config+0xcc>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <SystemClock_Config+0xd0>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000654:	2310      	movs	r3, #16
 8000656:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065c:	2300      	movs	r3, #0
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000660:	2308      	movs	r3, #8
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000664:	23a8      	movs	r3, #168	; 0xa8
 8000666:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800066c:	2307      	movs	r3, #7
 800066e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fa03 	bl	8001a80 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000680:	f000 fd2e 	bl	80010e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2302      	movs	r3, #2
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000690:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000694:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2105      	movs	r1, #5
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fc64 	bl	8001f70 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ae:	f000 fd17 	bl	80010e0 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3750      	adds	r7, #80	; 0x50
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_USART2_UART_Init+0x50>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006fc:	f002 f92c 	bl	8002958 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000706:	f000 fceb 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	2000028c 	.word	0x2000028c
 8000714:	40004400 	.word	0x40004400

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08c      	sub	sp, #48	; 0x30
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
 8000732:	4ba2      	ldr	r3, [pc, #648]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4aa1      	ldr	r2, [pc, #644]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b9f      	ldr	r3, [pc, #636]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	4b9b      	ldr	r3, [pc, #620]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a9a      	ldr	r2, [pc, #616]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b98      	ldr	r3, [pc, #608]	; (80009bc <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b94      	ldr	r3, [pc, #592]	; (80009bc <MX_GPIO_Init+0x2a4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a93      	ldr	r2, [pc, #588]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b91      	ldr	r3, [pc, #580]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b8d      	ldr	r3, [pc, #564]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a8c      	ldr	r2, [pc, #560]	; (80009bc <MX_GPIO_Init+0x2a4>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b8a      	ldr	r3, [pc, #552]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b86      	ldr	r3, [pc, #536]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a85      	ldr	r2, [pc, #532]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b83      	ldr	r3, [pc, #524]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b7f      	ldr	r3, [pc, #508]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a7e      	ldr	r2, [pc, #504]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b7c      	ldr	r3, [pc, #496]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2108      	movs	r1, #8
 80007da:	4879      	ldr	r0, [pc, #484]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 80007dc:	f001 f936 	bl	8001a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2101      	movs	r1, #1
 80007e4:	4877      	ldr	r0, [pc, #476]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 80007e6:	f001 f931 	bl	8001a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ea:	2200      	movs	r2, #0
 80007ec:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007f0:	4875      	ldr	r0, [pc, #468]	; (80009c8 <MX_GPIO_Init+0x2b0>)
 80007f2:	f001 f92b 	bl	8001a4c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007f6:	2308      	movs	r3, #8
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	486c      	ldr	r0, [pc, #432]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 800080e:	f000 ff81 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	4866      	ldr	r0, [pc, #408]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 800082a:	f000 ff73 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800082e:	2308      	movs	r3, #8
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800083e:	2305      	movs	r3, #5
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	485e      	ldr	r0, [pc, #376]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 800084a:	f000 ff63 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084e:	2301      	movs	r3, #1
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000852:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	485a      	ldr	r0, [pc, #360]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000864:	f000 ff56 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000868:	2310      	movs	r3, #16
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000878:	2306      	movs	r3, #6
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4852      	ldr	r0, [pc, #328]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000884:	f000 ff46 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000888:	23e0      	movs	r3, #224	; 0xe0
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000898:	2305      	movs	r3, #5
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	484a      	ldr	r0, [pc, #296]	; (80009cc <MX_GPIO_Init+0x2b4>)
 80008a4:	f000 ff36 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008a8:	2304      	movs	r3, #4
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4845      	ldr	r0, [pc, #276]	; (80009d0 <MX_GPIO_Init+0x2b8>)
 80008bc:	f000 ff2a 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d2:	2305      	movs	r3, #5
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	483c      	ldr	r0, [pc, #240]	; (80009d0 <MX_GPIO_Init+0x2b8>)
 80008de:	f000 ff19 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008e6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4833      	ldr	r0, [pc, #204]	; (80009c8 <MX_GPIO_Init+0x2b0>)
 80008fc:	f000 ff0a 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000900:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000912:	2306      	movs	r3, #6
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4829      	ldr	r0, [pc, #164]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 800091e:	f000 fef9 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4825      	ldr	r0, [pc, #148]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000938:	f000 feec 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800093c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800094e:	230a      	movs	r3, #10
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	481c      	ldr	r0, [pc, #112]	; (80009cc <MX_GPIO_Init+0x2b4>)
 800095a:	f000 fedb 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800095e:	2320      	movs	r3, #32
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4815      	ldr	r0, [pc, #84]	; (80009c8 <MX_GPIO_Init+0x2b0>)
 8000972:	f000 fecf 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000976:	f44f 7310 	mov.w	r3, #576	; 0x240
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800097c:	2312      	movs	r3, #18
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000988:	2304      	movs	r3, #4
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	480f      	ldr	r0, [pc, #60]	; (80009d0 <MX_GPIO_Init+0x2b8>)
 8000994:	f000 febe 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000998:	2302      	movs	r3, #2
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800099c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 80009ae:	f000 feb1 	bl	8001714 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b2:	bf00      	nop
 80009b4:	3730      	adds	r7, #48	; 0x30
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40020800 	.word	0x40020800
 80009c8:	40020c00 	.word	0x40020c00
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020400 	.word	0x40020400

080009d4 <HPT_TASK>:

/* USER CODE BEGIN 4 */

void HPT_TASK(void *pvParameters)
{
 80009d4:	b5b0      	push	{r4, r5, r7, lr}
 80009d6:	b0ac      	sub	sp, #176	; 0xb0
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	char sresource[3];

	int semcount = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	char ssemcount[2];

	//Give 3 semaphores at the beginning
	xSemaphoreGive(CountingSem);
 80009e2:	4b62      	ldr	r3, [pc, #392]	; (8000b6c <HPT_TASK+0x198>)
 80009e4:	6818      	ldr	r0, [r3, #0]
 80009e6:	2300      	movs	r3, #0
 80009e8:	2200      	movs	r2, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	f003 f9b2 	bl	8003d54 <xQueueGenericSend>
	xSemaphoreGive(CountingSem);
 80009f0:	4b5e      	ldr	r3, [pc, #376]	; (8000b6c <HPT_TASK+0x198>)
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	2300      	movs	r3, #0
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	f003 f9ab 	bl	8003d54 <xQueueGenericSend>
	xSemaphoreGive(CountingSem);
 80009fe:	4b5b      	ldr	r3, [pc, #364]	; (8000b6c <HPT_TASK+0x198>)
 8000a00:	6818      	ldr	r0, [r3, #0]
 8000a02:	2300      	movs	r3, #0
 8000a04:	2200      	movs	r2, #0
 8000a06:	2100      	movs	r1, #0
 8000a08:	f003 f9a4 	bl	8003d54 <xQueueGenericSend>

	while(1)
	{
		char str[150];
		strcpy(str, "Entered HPT Task\n About to acquire to semaphore \n");
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	4a57      	ldr	r2, [pc, #348]	; (8000b70 <HPT_TASK+0x19c>)
 8000a12:	461c      	mov	r4, r3
 8000a14:	4615      	mov	r5, r2
 8000a16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a22:	682b      	ldr	r3, [r5, #0]
 8000a24:	8023      	strh	r3, [r4, #0]
		itoa(semcount,ssemcount,10);
 8000a26:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a2a:	220a      	movs	r2, #10
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8000a32:	f005 fa13 	bl	8005e5c <itoa>
		strcat(str , "Tokens available are :");
 8000a36:	f107 030c 	add.w	r3, r7, #12
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fbc8 	bl	80001d0 <strlen>
 8000a40:	4603      	mov	r3, r0
 8000a42:	461a      	mov	r2, r3
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	4413      	add	r3, r2
 8000a4a:	4a4a      	ldr	r2, [pc, #296]	; (8000b74 <HPT_TASK+0x1a0>)
 8000a4c:	461c      	mov	r4, r3
 8000a4e:	4615      	mov	r5, r2
 8000a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a52:	6020      	str	r0, [r4, #0]
 8000a54:	6061      	str	r1, [r4, #4]
 8000a56:	60a2      	str	r2, [r4, #8]
 8000a58:	60e3      	str	r3, [r4, #12]
 8000a5a:	6828      	ldr	r0, [r5, #0]
 8000a5c:	6120      	str	r0, [r4, #16]
 8000a5e:	88ab      	ldrh	r3, [r5, #4]
 8000a60:	79aa      	ldrb	r2, [r5, #6]
 8000a62:	82a3      	strh	r3, [r4, #20]
 8000a64:	4613      	mov	r3, r2
 8000a66:	75a3      	strb	r3, [r4, #22]
		strcat(str, ssemcount);
 8000a68:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	4611      	mov	r1, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f005 fa3e 	bl	8005ef4 <strcat>
		strcat(str, "\n\n");
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fba7 	bl	80001d0 <strlen>
 8000a82:	4603      	mov	r3, r0
 8000a84:	461a      	mov	r2, r3
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	4413      	add	r3, r2
 8000a8c:	4a3a      	ldr	r2, [pc, #232]	; (8000b78 <HPT_TASK+0x1a4>)
 8000a8e:	8811      	ldrh	r1, [r2, #0]
 8000a90:	7892      	ldrb	r2, [r2, #2]
 8000a92:	8019      	strh	r1, [r3, #0]
 8000a94:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fb98 	bl	80001d0 <strlen>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	f107 010c 	add.w	r1, r7, #12
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aac:	4833      	ldr	r0, [pc, #204]	; (8000b7c <HPT_TASK+0x1a8>)
 8000aae:	f001 ffa3 	bl	80029f8 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem, portMAX_DELAY);
 8000ab2:	4b2e      	ldr	r3, [pc, #184]	; (8000b6c <HPT_TASK+0x198>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f04f 31ff 	mov.w	r1, #4294967295
 8000aba:	4618      	mov	r0, r3
 8000abc:	f003 fad6 	bl	800406c <xQueueSemaphoreTake>

		itoa(resource[indx], sresource, 10);
 8000ac0:	4b2f      	ldr	r3, [pc, #188]	; (8000b80 <HPT_TASK+0x1ac>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a2f      	ldr	r2, [pc, #188]	; (8000b84 <HPT_TASK+0x1b0>)
 8000ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aca:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8000ace:	220a      	movs	r2, #10
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f005 f9c3 	bl	8005e5c <itoa>
		strcpy(str, "Leaving HPT Tasks \n Data ACCESSED is ::");
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	4a2b      	ldr	r2, [pc, #172]	; (8000b88 <HPT_TASK+0x1b4>)
 8000adc:	461c      	mov	r4, r3
 8000ade:	4615      	mov	r5, r2
 8000ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000aec:	e884 0003 	stmia.w	r4, {r0, r1}
		strcat(str, sresource);
 8000af0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	4611      	mov	r1, r2
 8000afa:	4618      	mov	r0, r3
 8000afc:	f005 f9fa 	bl	8005ef4 <strcat>
		strcat(str, "\n Not releasing the semaphore\n\n");
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fb63 	bl	80001d0 <strlen>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	4413      	add	r3, r2
 8000b14:	4a1d      	ldr	r2, [pc, #116]	; (8000b8c <HPT_TASK+0x1b8>)
 8000b16:	461c      	mov	r4, r3
 8000b18:	4615      	mov	r5, r2
 8000b1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b1c:	6020      	str	r0, [r4, #0]
 8000b1e:	6061      	str	r1, [r4, #4]
 8000b20:	60a2      	str	r2, [r4, #8]
 8000b22:	60e3      	str	r3, [r4, #12]
 8000b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b26:	6120      	str	r0, [r4, #16]
 8000b28:	6161      	str	r1, [r4, #20]
 8000b2a:	61a2      	str	r2, [r4, #24]
 8000b2c:	61e3      	str	r3, [r4, #28]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fb4c 	bl	80001d0 <strlen>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	f107 010c 	add.w	r1, r7, #12
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
 8000b44:	480d      	ldr	r0, [pc, #52]	; (8000b7c <HPT_TASK+0x1a8>)
 8000b46:	f001 ff57 	bl	80029f8 <HAL_UART_Transmit>

		indx++;
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <HPT_TASK+0x1ac>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <HPT_TASK+0x1ac>)
 8000b52:	6013      	str	r3, [r2, #0]
		if(indx>2)
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <HPT_TASK+0x1ac>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	dd02      	ble.n	8000b62 <HPT_TASK+0x18e>
		{
			indx=0;
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HPT_TASK+0x1ac>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
		}
//		vTaskDelay(3000);
		vTaskDelete(NULL);
 8000b62:	2000      	movs	r0, #0
 8000b64:	f003 fe42 	bl	80047ec <vTaskDelete>
	{
 8000b68:	e750      	b.n	8000a0c <HPT_TASK+0x38>
 8000b6a:	bf00      	nop
 8000b6c:	200002e4 	.word	0x200002e4
 8000b70:	08005ff0 	.word	0x08005ff0
 8000b74:	08006024 	.word	0x08006024
 8000b78:	0800603c 	.word	0x0800603c
 8000b7c:	2000028c 	.word	0x2000028c
 8000b80:	200002e8 	.word	0x200002e8
 8000b84:	20000000 	.word	0x20000000
 8000b88:	08006040 	.word	0x08006040
 8000b8c:	08006068 	.word	0x08006068

08000b90 <MPT_TASK>:
	}
}

void MPT_TASK(void *pvParameters)
{
 8000b90:	b5b0      	push	{r4, r5, r7, lr}
 8000b92:	b0ac      	sub	sp, #176	; 0xb0
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	char sresource[3];

	int semcount = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	char ssemcount[2];

	while(1)
	{
		char str[150];
		strcpy(str, "Entered MPT Task\n About to acquire to semaphore \n");
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	4a5b      	ldr	r2, [pc, #364]	; (8000d10 <MPT_TASK+0x180>)
 8000ba4:	461c      	mov	r4, r3
 8000ba6:	4615      	mov	r5, r2
 8000ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb4:	682b      	ldr	r3, [r5, #0]
 8000bb6:	8023      	strh	r3, [r4, #0]
		semcount = uxSemaphoreGetCount(CountingSem);
 8000bb8:	4b56      	ldr	r3, [pc, #344]	; (8000d14 <MPT_TASK+0x184>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f003 fb61 	bl	8004284 <uxQueueMessagesWaiting>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		itoa(semcount,ssemcount,10);
 8000bc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bcc:	220a      	movs	r2, #10
 8000bce:	4619      	mov	r1, r3
 8000bd0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8000bd4:	f005 f942 	bl	8005e5c <itoa>
		strcat(str , "Tokens available are :");
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff faf7 	bl	80001d0 <strlen>
 8000be2:	4603      	mov	r3, r0
 8000be4:	461a      	mov	r2, r3
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	4413      	add	r3, r2
 8000bec:	4a4a      	ldr	r2, [pc, #296]	; (8000d18 <MPT_TASK+0x188>)
 8000bee:	461c      	mov	r4, r3
 8000bf0:	4615      	mov	r5, r2
 8000bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf4:	6020      	str	r0, [r4, #0]
 8000bf6:	6061      	str	r1, [r4, #4]
 8000bf8:	60a2      	str	r2, [r4, #8]
 8000bfa:	60e3      	str	r3, [r4, #12]
 8000bfc:	6828      	ldr	r0, [r5, #0]
 8000bfe:	6120      	str	r0, [r4, #16]
 8000c00:	88ab      	ldrh	r3, [r5, #4]
 8000c02:	79aa      	ldrb	r2, [r5, #6]
 8000c04:	82a3      	strh	r3, [r4, #20]
 8000c06:	4613      	mov	r3, r2
 8000c08:	75a3      	strb	r3, [r4, #22]
		strcat(str, ssemcount);
 8000c0a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	4611      	mov	r1, r2
 8000c14:	4618      	mov	r0, r3
 8000c16:	f005 f96d 	bl	8005ef4 <strcat>
		strcat(str, "\n\n");
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fad6 	bl	80001d0 <strlen>
 8000c24:	4603      	mov	r3, r0
 8000c26:	461a      	mov	r2, r3
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4a3b      	ldr	r2, [pc, #236]	; (8000d1c <MPT_TASK+0x18c>)
 8000c30:	8811      	ldrh	r1, [r2, #0]
 8000c32:	7892      	ldrb	r2, [r2, #2]
 8000c34:	8019      	strh	r1, [r3, #0]
 8000c36:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000c38:	f107 030c 	add.w	r3, r7, #12
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fac7 	bl	80001d0 <strlen>
 8000c42:	4603      	mov	r3, r0
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	f107 010c 	add.w	r1, r7, #12
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4e:	4834      	ldr	r0, [pc, #208]	; (8000d20 <MPT_TASK+0x190>)
 8000c50:	f001 fed2 	bl	80029f8 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem, portMAX_DELAY);
 8000c54:	4b2f      	ldr	r3, [pc, #188]	; (8000d14 <MPT_TASK+0x184>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f04f 31ff 	mov.w	r1, #4294967295
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f003 fa05 	bl	800406c <xQueueSemaphoreTake>

		itoa(resource[indx], sresource, 10);
 8000c62:	4b30      	ldr	r3, [pc, #192]	; (8000d24 <MPT_TASK+0x194>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a30      	ldr	r2, [pc, #192]	; (8000d28 <MPT_TASK+0x198>)
 8000c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6c:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8000c70:	220a      	movs	r2, #10
 8000c72:	4618      	mov	r0, r3
 8000c74:	f005 f8f2 	bl	8005e5c <itoa>
		strcpy(str, "Leaving MPT Tasks \n Data ACCESSED is ::");
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	4a2b      	ldr	r2, [pc, #172]	; (8000d2c <MPT_TASK+0x19c>)
 8000c7e:	461c      	mov	r4, r3
 8000c80:	4615      	mov	r5, r2
 8000c82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c8a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c8e:	e884 0003 	stmia.w	r4, {r0, r1}
		strcat(str, sresource);
 8000c92:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000c96:	f107 030c 	add.w	r3, r7, #12
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f005 f929 	bl	8005ef4 <strcat>
		strcat(str, "\n Not releasing the semaphore\n\n");
 8000ca2:	f107 030c 	add.w	r3, r7, #12
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fa92 	bl	80001d0 <strlen>
 8000cac:	4603      	mov	r3, r0
 8000cae:	461a      	mov	r2, r3
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4a1e      	ldr	r2, [pc, #120]	; (8000d30 <MPT_TASK+0x1a0>)
 8000cb8:	461c      	mov	r4, r3
 8000cba:	4615      	mov	r5, r2
 8000cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cbe:	6020      	str	r0, [r4, #0]
 8000cc0:	6061      	str	r1, [r4, #4]
 8000cc2:	60a2      	str	r2, [r4, #8]
 8000cc4:	60e3      	str	r3, [r4, #12]
 8000cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc8:	6120      	str	r0, [r4, #16]
 8000cca:	6161      	str	r1, [r4, #20]
 8000ccc:	61a2      	str	r2, [r4, #24]
 8000cce:	61e3      	str	r3, [r4, #28]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fa7b 	bl	80001d0 <strlen>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	f107 010c 	add.w	r1, r7, #12
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	480e      	ldr	r0, [pc, #56]	; (8000d20 <MPT_TASK+0x190>)
 8000ce8:	f001 fe86 	bl	80029f8 <HAL_UART_Transmit>

		indx++;
 8000cec:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <MPT_TASK+0x194>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	4a0c      	ldr	r2, [pc, #48]	; (8000d24 <MPT_TASK+0x194>)
 8000cf4:	6013      	str	r3, [r2, #0]
		if(indx>2)
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MPT_TASK+0x194>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	dd02      	ble.n	8000d04 <MPT_TASK+0x174>
		{
			indx=0;
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MPT_TASK+0x194>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
		}
		vTaskDelay(2000);
 8000d04:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d08:	f003 fe00 	bl	800490c <vTaskDelay>
	{
 8000d0c:	e747      	b.n	8000b9e <MPT_TASK+0xe>
 8000d0e:	bf00      	nop
 8000d10:	08006088 	.word	0x08006088
 8000d14:	200002e4 	.word	0x200002e4
 8000d18:	08006024 	.word	0x08006024
 8000d1c:	0800603c 	.word	0x0800603c
 8000d20:	2000028c 	.word	0x2000028c
 8000d24:	200002e8 	.word	0x200002e8
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	080060bc 	.word	0x080060bc
 8000d30:	08006068 	.word	0x08006068

08000d34 <LPT_TASK>:
	}
}

void LPT_TASK(void *pvParameters)
{
 8000d34:	b5b0      	push	{r4, r5, r7, lr}
 8000d36:	b0ac      	sub	sp, #176	; 0xb0
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	char sresource[3];
	int semcount = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac


	while(1)
	{
		char str[150];
		strcpy(str, "Entered LPT Task\n About to acquire to semaphore \n");
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	4a57      	ldr	r2, [pc, #348]	; (8000ea4 <LPT_TASK+0x170>)
 8000d48:	461c      	mov	r4, r3
 8000d4a:	4615      	mov	r5, r2
 8000d4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d58:	682b      	ldr	r3, [r5, #0]
 8000d5a:	8023      	strh	r3, [r4, #0]
		itoa(semcount,ssemcount,10);
 8000d5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d60:	220a      	movs	r2, #10
 8000d62:	4619      	mov	r1, r3
 8000d64:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8000d68:	f005 f878 	bl	8005e5c <itoa>
		strcat(str , "Tokens available are :");
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fa2d 	bl	80001d0 <strlen>
 8000d76:	4603      	mov	r3, r0
 8000d78:	461a      	mov	r2, r3
 8000d7a:	f107 030c 	add.w	r3, r7, #12
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a49      	ldr	r2, [pc, #292]	; (8000ea8 <LPT_TASK+0x174>)
 8000d82:	461c      	mov	r4, r3
 8000d84:	4615      	mov	r5, r2
 8000d86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d88:	6020      	str	r0, [r4, #0]
 8000d8a:	6061      	str	r1, [r4, #4]
 8000d8c:	60a2      	str	r2, [r4, #8]
 8000d8e:	60e3      	str	r3, [r4, #12]
 8000d90:	6828      	ldr	r0, [r5, #0]
 8000d92:	6120      	str	r0, [r4, #16]
 8000d94:	88ab      	ldrh	r3, [r5, #4]
 8000d96:	79aa      	ldrb	r2, [r5, #6]
 8000d98:	82a3      	strh	r3, [r4, #20]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	75a3      	strb	r3, [r4, #22]
		strcat(str, ssemcount);
 8000d9e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	4611      	mov	r1, r2
 8000da8:	4618      	mov	r0, r3
 8000daa:	f005 f8a3 	bl	8005ef4 <strcat>
		strcat(str, "\n\n");
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fa0c 	bl	80001d0 <strlen>
 8000db8:	4603      	mov	r3, r0
 8000dba:	461a      	mov	r2, r3
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a3a      	ldr	r2, [pc, #232]	; (8000eac <LPT_TASK+0x178>)
 8000dc4:	8811      	ldrh	r1, [r2, #0]
 8000dc6:	7892      	ldrb	r2, [r2, #2]
 8000dc8:	8019      	strh	r1, [r3, #0]
 8000dca:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff f9fd 	bl	80001d0 <strlen>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	f107 010c 	add.w	r1, r7, #12
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	4833      	ldr	r0, [pc, #204]	; (8000eb0 <LPT_TASK+0x17c>)
 8000de4:	f001 fe08 	bl	80029f8 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem, portMAX_DELAY);
 8000de8:	4b32      	ldr	r3, [pc, #200]	; (8000eb4 <LPT_TASK+0x180>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f04f 31ff 	mov.w	r1, #4294967295
 8000df0:	4618      	mov	r0, r3
 8000df2:	f003 f93b 	bl	800406c <xQueueSemaphoreTake>

		itoa(resource[indx], sresource, 10);
 8000df6:	4b30      	ldr	r3, [pc, #192]	; (8000eb8 <LPT_TASK+0x184>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a30      	ldr	r2, [pc, #192]	; (8000ebc <LPT_TASK+0x188>)
 8000dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e00:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8000e04:	220a      	movs	r2, #10
 8000e06:	4618      	mov	r0, r3
 8000e08:	f005 f828 	bl	8005e5c <itoa>
		strcpy(str, "Leaving LPT Tasks \n Data ACCESSED is ::");
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	4a2b      	ldr	r2, [pc, #172]	; (8000ec0 <LPT_TASK+0x18c>)
 8000e12:	461c      	mov	r4, r3
 8000e14:	4615      	mov	r5, r2
 8000e16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e1e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e22:	e884 0003 	stmia.w	r4, {r0, r1}
		strcat(str, sresource);
 8000e26:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f005 f85f 	bl	8005ef4 <strcat>
		strcat(str, "\n Not releasing the semaphore\n\n");
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff f9c8 	bl	80001d0 <strlen>
 8000e40:	4603      	mov	r3, r0
 8000e42:	461a      	mov	r2, r3
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	4413      	add	r3, r2
 8000e4a:	4a1e      	ldr	r2, [pc, #120]	; (8000ec4 <LPT_TASK+0x190>)
 8000e4c:	461c      	mov	r4, r3
 8000e4e:	4615      	mov	r5, r2
 8000e50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e52:	6020      	str	r0, [r4, #0]
 8000e54:	6061      	str	r1, [r4, #4]
 8000e56:	60a2      	str	r2, [r4, #8]
 8000e58:	60e3      	str	r3, [r4, #12]
 8000e5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e5c:	6120      	str	r0, [r4, #16]
 8000e5e:	6161      	str	r1, [r4, #20]
 8000e60:	61a2      	str	r2, [r4, #24]
 8000e62:	61e3      	str	r3, [r4, #28]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000e64:	f107 030c 	add.w	r3, r7, #12
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff f9b1 	bl	80001d0 <strlen>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	f107 010c 	add.w	r1, r7, #12
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7a:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <LPT_TASK+0x17c>)
 8000e7c:	f001 fdbc 	bl	80029f8 <HAL_UART_Transmit>

		indx++;
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <LPT_TASK+0x184>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	3301      	adds	r3, #1
 8000e86:	4a0c      	ldr	r2, [pc, #48]	; (8000eb8 <LPT_TASK+0x184>)
 8000e88:	6013      	str	r3, [r2, #0]
		if(indx>2)
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <LPT_TASK+0x184>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	dd02      	ble.n	8000e98 <LPT_TASK+0x164>
		{
			indx=0;
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <LPT_TASK+0x184>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
		}
		vTaskDelay(1000);
 8000e98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e9c:	f003 fd36 	bl	800490c <vTaskDelay>
	{
 8000ea0:	e74f      	b.n	8000d42 <LPT_TASK+0xe>
 8000ea2:	bf00      	nop
 8000ea4:	080060e4 	.word	0x080060e4
 8000ea8:	08006024 	.word	0x08006024
 8000eac:	0800603c 	.word	0x0800603c
 8000eb0:	2000028c 	.word	0x2000028c
 8000eb4:	200002e4 	.word	0x200002e4
 8000eb8:	200002e8 	.word	0x200002e8
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	08006118 	.word	0x08006118
 8000ec4:	08006068 	.word	0x08006068

08000ec8 <VLPT_TASK>:
	}
}
void VLPT_TASK(void *pvParameters)
{
 8000ec8:	b5b0      	push	{r4, r5, r7, lr}
 8000eca:	b0ac      	sub	sp, #176	; 0xb0
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	char sresource[3];
	int semcount = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	char ssemcount[2];

	while(1)
	{
		char str[150];
		strcpy(str, "Entered VLPT Task\n About to acquire to semaphore \n");
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	4a59      	ldr	r2, [pc, #356]	; (8001040 <VLPT_TASK+0x178>)
 8000edc:	461c      	mov	r4, r3
 8000ede:	4615      	mov	r5, r2
 8000ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eec:	682b      	ldr	r3, [r5, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	8022      	strh	r2, [r4, #0]
 8000ef2:	3402      	adds	r4, #2
 8000ef4:	0c1b      	lsrs	r3, r3, #16
 8000ef6:	7023      	strb	r3, [r4, #0]
		itoa(semcount,ssemcount,10);
 8000ef8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000efc:	220a      	movs	r2, #10
 8000efe:	4619      	mov	r1, r3
 8000f00:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8000f04:	f004 ffaa 	bl	8005e5c <itoa>
		strcat(str , "Tokens available are :");
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff f95f 	bl	80001d0 <strlen>
 8000f12:	4603      	mov	r3, r0
 8000f14:	461a      	mov	r2, r3
 8000f16:	f107 030c 	add.w	r3, r7, #12
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a49      	ldr	r2, [pc, #292]	; (8001044 <VLPT_TASK+0x17c>)
 8000f1e:	461c      	mov	r4, r3
 8000f20:	4615      	mov	r5, r2
 8000f22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f24:	6020      	str	r0, [r4, #0]
 8000f26:	6061      	str	r1, [r4, #4]
 8000f28:	60a2      	str	r2, [r4, #8]
 8000f2a:	60e3      	str	r3, [r4, #12]
 8000f2c:	6828      	ldr	r0, [r5, #0]
 8000f2e:	6120      	str	r0, [r4, #16]
 8000f30:	88ab      	ldrh	r3, [r5, #4]
 8000f32:	79aa      	ldrb	r2, [r5, #6]
 8000f34:	82a3      	strh	r3, [r4, #20]
 8000f36:	4613      	mov	r3, r2
 8000f38:	75a3      	strb	r3, [r4, #22]
		strcat(str, ssemcount);
 8000f3a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f004 ffd5 	bl	8005ef4 <strcat>
		strcat(str, "\n\n");
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff f93e 	bl	80001d0 <strlen>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4a3a      	ldr	r2, [pc, #232]	; (8001048 <VLPT_TASK+0x180>)
 8000f60:	8811      	ldrh	r1, [r2, #0]
 8000f62:	7892      	ldrb	r2, [r2, #2]
 8000f64:	8019      	strh	r1, [r3, #0]
 8000f66:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff f92f 	bl	80001d0 <strlen>
 8000f72:	4603      	mov	r3, r0
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	f107 010c 	add.w	r1, r7, #12
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	4833      	ldr	r0, [pc, #204]	; (800104c <VLPT_TASK+0x184>)
 8000f80:	f001 fd3a 	bl	80029f8 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem, portMAX_DELAY);
 8000f84:	4b32      	ldr	r3, [pc, #200]	; (8001050 <VLPT_TASK+0x188>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f003 f86d 	bl	800406c <xQueueSemaphoreTake>

		itoa(resource[indx], sresource, 10);
 8000f92:	4b30      	ldr	r3, [pc, #192]	; (8001054 <VLPT_TASK+0x18c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a30      	ldr	r2, [pc, #192]	; (8001058 <VLPT_TASK+0x190>)
 8000f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9c:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8000fa0:	220a      	movs	r2, #10
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f004 ff5a 	bl	8005e5c <itoa>
		strcpy(str, "Leaving VLPT Tasks \n Data ACCESSED is ::");
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	4a2b      	ldr	r2, [pc, #172]	; (800105c <VLPT_TASK+0x194>)
 8000fae:	461c      	mov	r4, r3
 8000fb0:	4615      	mov	r5, r2
 8000fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fbe:	c403      	stmia	r4!, {r0, r1}
 8000fc0:	7022      	strb	r2, [r4, #0]
		strcat(str, sresource);
 8000fc2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	4611      	mov	r1, r2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f004 ff91 	bl	8005ef4 <strcat>
		strcat(str, "\n Not releasing the semaphore\n\n");
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff f8fa 	bl	80001d0 <strlen>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	461a      	mov	r2, r3
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4a1e      	ldr	r2, [pc, #120]	; (8001060 <VLPT_TASK+0x198>)
 8000fe8:	461c      	mov	r4, r3
 8000fea:	4615      	mov	r5, r2
 8000fec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fee:	6020      	str	r0, [r4, #0]
 8000ff0:	6061      	str	r1, [r4, #4]
 8000ff2:	60a2      	str	r2, [r4, #8]
 8000ff4:	60e3      	str	r3, [r4, #12]
 8000ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff8:	6120      	str	r0, [r4, #16]
 8000ffa:	6161      	str	r1, [r4, #20]
 8000ffc:	61a2      	str	r2, [r4, #24]
 8000ffe:	61e3      	str	r3, [r4, #28]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff f8e3 	bl	80001d0 <strlen>
 800100a:	4603      	mov	r3, r0
 800100c:	b29a      	uxth	r2, r3
 800100e:	f107 010c 	add.w	r1, r7, #12
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	480d      	ldr	r0, [pc, #52]	; (800104c <VLPT_TASK+0x184>)
 8001018:	f001 fcee 	bl	80029f8 <HAL_UART_Transmit>

		indx++;
 800101c:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <VLPT_TASK+0x18c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	4a0c      	ldr	r2, [pc, #48]	; (8001054 <VLPT_TASK+0x18c>)
 8001024:	6013      	str	r3, [r2, #0]
		if(indx>2)
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <VLPT_TASK+0x18c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b02      	cmp	r3, #2
 800102c:	dd02      	ble.n	8001034 <VLPT_TASK+0x16c>
		{
			indx=0;
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <VLPT_TASK+0x18c>)
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
		}
		vTaskDelay(500);
 8001034:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001038:	f003 fc68 	bl	800490c <vTaskDelay>
	{
 800103c:	e74b      	b.n	8000ed6 <VLPT_TASK+0xe>
 800103e:	bf00      	nop
 8001040:	08006140 	.word	0x08006140
 8001044:	08006024 	.word	0x08006024
 8001048:	0800603c 	.word	0x0800603c
 800104c:	2000028c 	.word	0x2000028c
 8001050:	200002e4 	.word	0x200002e4
 8001054:	200002e8 	.word	0x200002e8
 8001058:	20000000 	.word	0x20000000
 800105c:	08006174 	.word	0x08006174
 8001060:	08006068 	.word	0x08006068

08001064 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, &rx_data, 1);
 800106c:	2201      	movs	r2, #1
 800106e:	4910      	ldr	r1, [pc, #64]	; (80010b0 <HAL_UART_RxCpltCallback+0x4c>)
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f001 fd4c 	bl	8002b0e <HAL_UART_Receive_IT>
	if (rx_data == 'r')
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_UART_RxCpltCallback+0x4c>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b72      	cmp	r3, #114	; 0x72
 800107c:	d114      	bne.n	80010a8 <HAL_UART_RxCpltCallback+0x44>
	{
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]

		xSemaphoreGiveFromISR(CountingSem, &xHigherPriorityTaskWoken);
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <HAL_UART_RxCpltCallback+0x50>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f107 020c 	add.w	r2, r7, #12
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f002 ff5f 	bl	8003f50 <xQueueGiveFromISR>
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d007      	beq.n	80010a8 <HAL_UART_RxCpltCallback+0x44>
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <HAL_UART_RxCpltCallback+0x54>)
 800109a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	f3bf 8f4f 	dsb	sy
 80010a4:	f3bf 8f6f 	isb	sy
	}
}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200002ec 	.word	0x200002ec
 80010b4:	200002e4 	.word	0x200002e4
 80010b8:	e000ed04 	.word	0xe000ed04

080010bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a04      	ldr	r2, [pc, #16]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d101      	bne.n	80010d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010ce:	f000 f98d 	bl	80013ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40001000 	.word	0x40001000

080010e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e4:	b672      	cpsid	i
}
 80010e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <Error_Handler+0x8>
	...

080010ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_MspInit+0x54>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	4a11      	ldr	r2, [pc, #68]	; (8001140 <HAL_MspInit+0x54>)
 80010fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001100:	6453      	str	r3, [r2, #68]	; 0x44
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <HAL_MspInit+0x54>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <HAL_MspInit+0x54>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <HAL_MspInit+0x54>)
 8001118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111c:	6413      	str	r3, [r2, #64]	; 0x40
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <HAL_MspInit+0x54>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	210f      	movs	r1, #15
 800112e:	f06f 0001 	mvn.w	r0, #1
 8001132:	f000 fa33 	bl	800159c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800

08001144 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a1d      	ldr	r2, [pc, #116]	; (80011d8 <HAL_UART_MspInit+0x94>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d133      	bne.n	80011ce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <HAL_UART_MspInit+0x98>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	4a1b      	ldr	r2, [pc, #108]	; (80011dc <HAL_UART_MspInit+0x98>)
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	6413      	str	r3, [r2, #64]	; 0x40
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <HAL_UART_MspInit+0x98>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <HAL_UART_MspInit+0x98>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a14      	ldr	r2, [pc, #80]	; (80011dc <HAL_UART_MspInit+0x98>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_UART_MspInit+0x98>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800119e:	230c      	movs	r3, #12
 80011a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011ae:	2307      	movs	r3, #7
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	4809      	ldr	r0, [pc, #36]	; (80011e0 <HAL_UART_MspInit+0x9c>)
 80011ba:	f000 faab 	bl	8001714 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2105      	movs	r1, #5
 80011c2:	2026      	movs	r0, #38	; 0x26
 80011c4:	f000 f9ea 	bl	800159c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011c8:	2026      	movs	r0, #38	; 0x26
 80011ca:	f000 fa03 	bl	80015d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011ce:	bf00      	nop
 80011d0:	3728      	adds	r7, #40	; 0x28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40004400 	.word	0x40004400
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020000 	.word	0x40020000

080011e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08e      	sub	sp, #56	; 0x38
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	4b33      	ldr	r3, [pc, #204]	; (80012c8 <HAL_InitTick+0xe4>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	4a32      	ldr	r2, [pc, #200]	; (80012c8 <HAL_InitTick+0xe4>)
 80011fe:	f043 0310 	orr.w	r3, r3, #16
 8001202:	6413      	str	r3, [r2, #64]	; 0x40
 8001204:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <HAL_InitTick+0xe4>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	f003 0310 	and.w	r3, r3, #16
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001210:	f107 0210 	add.w	r2, r7, #16
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f001 f8c8 	bl	80023b0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001226:	2b00      	cmp	r3, #0
 8001228:	d103      	bne.n	8001232 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800122a:	f001 f899 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 800122e:	6378      	str	r0, [r7, #52]	; 0x34
 8001230:	e004      	b.n	800123c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001232:	f001 f895 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 8001236:	4603      	mov	r3, r0
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800123c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123e:	4a23      	ldr	r2, [pc, #140]	; (80012cc <HAL_InitTick+0xe8>)
 8001240:	fba2 2303 	umull	r2, r3, r2, r3
 8001244:	0c9b      	lsrs	r3, r3, #18
 8001246:	3b01      	subs	r3, #1
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_InitTick+0xec>)
 800124c:	4a21      	ldr	r2, [pc, #132]	; (80012d4 <HAL_InitTick+0xf0>)
 800124e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <HAL_InitTick+0xec>)
 8001252:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001256:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001258:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <HAL_InitTick+0xec>)
 800125a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800125c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <HAL_InitTick+0xec>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <HAL_InitTick+0xec>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_InitTick+0xec>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001270:	4817      	ldr	r0, [pc, #92]	; (80012d0 <HAL_InitTick+0xec>)
 8001272:	f001 f8cf 	bl	8002414 <HAL_TIM_Base_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800127c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001280:	2b00      	cmp	r3, #0
 8001282:	d11b      	bne.n	80012bc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001284:	4812      	ldr	r0, [pc, #72]	; (80012d0 <HAL_InitTick+0xec>)
 8001286:	f001 f91f 	bl	80024c8 <HAL_TIM_Base_Start_IT>
 800128a:	4603      	mov	r3, r0
 800128c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001290:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001294:	2b00      	cmp	r3, #0
 8001296:	d111      	bne.n	80012bc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001298:	2036      	movs	r0, #54	; 0x36
 800129a:	f000 f99b 	bl	80015d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b0f      	cmp	r3, #15
 80012a2:	d808      	bhi.n	80012b6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80012a4:	2200      	movs	r2, #0
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	2036      	movs	r0, #54	; 0x36
 80012aa:	f000 f977 	bl	800159c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <HAL_InitTick+0xf4>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	e002      	b.n	80012bc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3738      	adds	r7, #56	; 0x38
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40023800 	.word	0x40023800
 80012cc:	431bde83 	.word	0x431bde83
 80012d0:	200002f0 	.word	0x200002f0
 80012d4:	40001000 	.word	0x40001000
 80012d8:	20000010 	.word	0x20000010

080012dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e0:	e7fe      	b.n	80012e0 <NMI_Handler+0x4>

080012e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <HardFault_Handler+0x4>

080012e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <MemManage_Handler+0x4>

080012ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <BusFault_Handler+0x4>

080012f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <UsageFault_Handler+0x4>

080012fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800130c:	4802      	ldr	r0, [pc, #8]	; (8001318 <USART2_IRQHandler+0x10>)
 800130e:	f001 fc23 	bl	8002b58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	2000028c 	.word	0x2000028c

0800131c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <TIM6_DAC_IRQHandler+0x10>)
 8001322:	f001 f941 	bl	80025a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200002f0 	.word	0x200002f0

08001330 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <SystemInit+0x20>)
 8001336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800133a:	4a05      	ldr	r2, [pc, #20]	; (8001350 <SystemInit+0x20>)
 800133c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800138c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001358:	f7ff ffea 	bl	8001330 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800135c:	480c      	ldr	r0, [pc, #48]	; (8001390 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800135e:	490d      	ldr	r1, [pc, #52]	; (8001394 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001360:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001364:	e002      	b.n	800136c <LoopCopyDataInit>

08001366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136a:	3304      	adds	r3, #4

0800136c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800136c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001370:	d3f9      	bcc.n	8001366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001372:	4a0a      	ldr	r2, [pc, #40]	; (800139c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001374:	4c0a      	ldr	r4, [pc, #40]	; (80013a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001378:	e001      	b.n	800137e <LoopFillZerobss>

0800137a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800137c:	3204      	adds	r2, #4

0800137e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001380:	d3fb      	bcc.n	800137a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001382:	f004 fdc7 	bl	8005f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001386:	f7ff f8c3 	bl	8000510 <main>
  bx  lr    
 800138a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800138c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001394:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001398:	080061f8 	.word	0x080061f8
  ldr r2, =_sbss
 800139c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80013a0:	20004090 	.word	0x20004090

080013a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a4:	e7fe      	b.n	80013a4 <ADC_IRQHandler>
	...

080013a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_Init+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0d      	ldr	r2, [pc, #52]	; (80013e8 <HAL_Init+0x40>)
 80013b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_Init+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <HAL_Init+0x40>)
 80013be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_Init+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a07      	ldr	r2, [pc, #28]	; (80013e8 <HAL_Init+0x40>)
 80013ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d0:	2003      	movs	r0, #3
 80013d2:	f000 f8d8 	bl	8001586 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d6:	200f      	movs	r0, #15
 80013d8:	f7ff ff04 	bl	80011e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013dc:	f7ff fe86 	bl	80010ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023c00 	.word	0x40023c00

080013ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_IncTick+0x20>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_IncTick+0x24>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	4a04      	ldr	r2, [pc, #16]	; (8001410 <HAL_IncTick+0x24>)
 80013fe:	6013      	str	r3, [r2, #0]
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000014 	.word	0x20000014
 8001410:	20000338 	.word	0x20000338

08001414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return uwTick;
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <HAL_GetTick+0x14>)
 800141a:	681b      	ldr	r3, [r3, #0]
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000338 	.word	0x20000338

0800142c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001448:	4013      	ands	r3, r2
 800144a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800145c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145e:	4a04      	ldr	r2, [pc, #16]	; (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	60d3      	str	r3, [r2, #12]
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <__NVIC_GetPriorityGrouping+0x18>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	f003 0307 	and.w	r3, r3, #7
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	db0b      	blt.n	80014ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	f003 021f 	and.w	r2, r3, #31
 80014a8:	4907      	ldr	r1, [pc, #28]	; (80014c8 <__NVIC_EnableIRQ+0x38>)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	095b      	lsrs	r3, r3, #5
 80014b0:	2001      	movs	r0, #1
 80014b2:	fa00 f202 	lsl.w	r2, r0, r2
 80014b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000e100 	.word	0xe000e100

080014cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	db0a      	blt.n	80014f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	490c      	ldr	r1, [pc, #48]	; (8001518 <__NVIC_SetPriority+0x4c>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	0112      	lsls	r2, r2, #4
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	440b      	add	r3, r1
 80014f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f4:	e00a      	b.n	800150c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4908      	ldr	r1, [pc, #32]	; (800151c <__NVIC_SetPriority+0x50>)
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	3b04      	subs	r3, #4
 8001504:	0112      	lsls	r2, r2, #4
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	440b      	add	r3, r1
 800150a:	761a      	strb	r2, [r3, #24]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000e100 	.word	0xe000e100
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001520:	b480      	push	{r7}
 8001522:	b089      	sub	sp, #36	; 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f1c3 0307 	rsb	r3, r3, #7
 800153a:	2b04      	cmp	r3, #4
 800153c:	bf28      	it	cs
 800153e:	2304      	movcs	r3, #4
 8001540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3304      	adds	r3, #4
 8001546:	2b06      	cmp	r3, #6
 8001548:	d902      	bls.n	8001550 <NVIC_EncodePriority+0x30>
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3b03      	subs	r3, #3
 800154e:	e000      	b.n	8001552 <NVIC_EncodePriority+0x32>
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	f04f 32ff 	mov.w	r2, #4294967295
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43da      	mvns	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	401a      	ands	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001568:	f04f 31ff 	mov.w	r1, #4294967295
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fa01 f303 	lsl.w	r3, r1, r3
 8001572:	43d9      	mvns	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	4313      	orrs	r3, r2
         );
}
 800157a:	4618      	mov	r0, r3
 800157c:	3724      	adds	r7, #36	; 0x24
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ff4c 	bl	800142c <__NVIC_SetPriorityGrouping>
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
 80015a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ae:	f7ff ff61 	bl	8001474 <__NVIC_GetPriorityGrouping>
 80015b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	68b9      	ldr	r1, [r7, #8]
 80015b8:	6978      	ldr	r0, [r7, #20]
 80015ba:	f7ff ffb1 	bl	8001520 <NVIC_EncodePriority>
 80015be:	4602      	mov	r2, r0
 80015c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c4:	4611      	mov	r1, r2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff ff80 	bl	80014cc <__NVIC_SetPriority>
}
 80015cc:	bf00      	nop
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff54 	bl	8001490 <__NVIC_EnableIRQ>
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015fe:	f7ff ff09 	bl	8001414 <HAL_GetTick>
 8001602:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d008      	beq.n	8001622 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2280      	movs	r2, #128	; 0x80
 8001614:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e052      	b.n	80016c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 0216 	bic.w	r2, r2, #22
 8001630:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	695a      	ldr	r2, [r3, #20]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001640:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	2b00      	cmp	r3, #0
 8001648:	d103      	bne.n	8001652 <HAL_DMA_Abort+0x62>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800164e:	2b00      	cmp	r3, #0
 8001650:	d007      	beq.n	8001662 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0208 	bic.w	r2, r2, #8
 8001660:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 0201 	bic.w	r2, r2, #1
 8001670:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001672:	e013      	b.n	800169c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001674:	f7ff fece 	bl	8001414 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b05      	cmp	r3, #5
 8001680:	d90c      	bls.n	800169c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2220      	movs	r2, #32
 8001686:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2203      	movs	r2, #3
 800168c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e015      	b.n	80016c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1e4      	bne.n	8001674 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ae:	223f      	movs	r2, #63	; 0x3f
 80016b0:	409a      	lsls	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d004      	beq.n	80016ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2280      	movs	r2, #128	; 0x80
 80016e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00c      	b.n	8001708 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2205      	movs	r2, #5
 80016f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0201 	bic.w	r2, r2, #1
 8001704:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001726:	2300      	movs	r3, #0
 8001728:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
 800172e:	e16b      	b.n	8001a08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001730:	2201      	movs	r2, #1
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	429a      	cmp	r2, r3
 800174a:	f040 815a 	bne.w	8001a02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	2b01      	cmp	r3, #1
 8001758:	d005      	beq.n	8001766 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001762:	2b02      	cmp	r3, #2
 8001764:	d130      	bne.n	80017c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	2203      	movs	r2, #3
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800179c:	2201      	movs	r2, #1
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	f003 0201 	and.w	r2, r3, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d017      	beq.n	8001804 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d123      	bne.n	8001858 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	08da      	lsrs	r2, r3, #3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3208      	adds	r2, #8
 8001818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800181c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	220f      	movs	r2, #15
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	691a      	ldr	r2, [r3, #16]
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	08da      	lsrs	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3208      	adds	r2, #8
 8001852:	69b9      	ldr	r1, [r7, #24]
 8001854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	2203      	movs	r2, #3
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0203 	and.w	r2, r3, #3
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80b4 	beq.w	8001a02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b60      	ldr	r3, [pc, #384]	; (8001a20 <HAL_GPIO_Init+0x30c>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	4a5f      	ldr	r2, [pc, #380]	; (8001a20 <HAL_GPIO_Init+0x30c>)
 80018a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a8:	6453      	str	r3, [r2, #68]	; 0x44
 80018aa:	4b5d      	ldr	r3, [pc, #372]	; (8001a20 <HAL_GPIO_Init+0x30c>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018b6:	4a5b      	ldr	r2, [pc, #364]	; (8001a24 <HAL_GPIO_Init+0x310>)
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	089b      	lsrs	r3, r3, #2
 80018bc:	3302      	adds	r3, #2
 80018be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	220f      	movs	r2, #15
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a52      	ldr	r2, [pc, #328]	; (8001a28 <HAL_GPIO_Init+0x314>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d02b      	beq.n	800193a <HAL_GPIO_Init+0x226>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a51      	ldr	r2, [pc, #324]	; (8001a2c <HAL_GPIO_Init+0x318>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d025      	beq.n	8001936 <HAL_GPIO_Init+0x222>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a50      	ldr	r2, [pc, #320]	; (8001a30 <HAL_GPIO_Init+0x31c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d01f      	beq.n	8001932 <HAL_GPIO_Init+0x21e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4f      	ldr	r2, [pc, #316]	; (8001a34 <HAL_GPIO_Init+0x320>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d019      	beq.n	800192e <HAL_GPIO_Init+0x21a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4e      	ldr	r2, [pc, #312]	; (8001a38 <HAL_GPIO_Init+0x324>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d013      	beq.n	800192a <HAL_GPIO_Init+0x216>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4d      	ldr	r2, [pc, #308]	; (8001a3c <HAL_GPIO_Init+0x328>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d00d      	beq.n	8001926 <HAL_GPIO_Init+0x212>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4c      	ldr	r2, [pc, #304]	; (8001a40 <HAL_GPIO_Init+0x32c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d007      	beq.n	8001922 <HAL_GPIO_Init+0x20e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4b      	ldr	r2, [pc, #300]	; (8001a44 <HAL_GPIO_Init+0x330>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d101      	bne.n	800191e <HAL_GPIO_Init+0x20a>
 800191a:	2307      	movs	r3, #7
 800191c:	e00e      	b.n	800193c <HAL_GPIO_Init+0x228>
 800191e:	2308      	movs	r3, #8
 8001920:	e00c      	b.n	800193c <HAL_GPIO_Init+0x228>
 8001922:	2306      	movs	r3, #6
 8001924:	e00a      	b.n	800193c <HAL_GPIO_Init+0x228>
 8001926:	2305      	movs	r3, #5
 8001928:	e008      	b.n	800193c <HAL_GPIO_Init+0x228>
 800192a:	2304      	movs	r3, #4
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x228>
 800192e:	2303      	movs	r3, #3
 8001930:	e004      	b.n	800193c <HAL_GPIO_Init+0x228>
 8001932:	2302      	movs	r3, #2
 8001934:	e002      	b.n	800193c <HAL_GPIO_Init+0x228>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_GPIO_Init+0x228>
 800193a:	2300      	movs	r3, #0
 800193c:	69fa      	ldr	r2, [r7, #28]
 800193e:	f002 0203 	and.w	r2, r2, #3
 8001942:	0092      	lsls	r2, r2, #2
 8001944:	4093      	lsls	r3, r2
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800194c:	4935      	ldr	r1, [pc, #212]	; (8001a24 <HAL_GPIO_Init+0x310>)
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	3302      	adds	r3, #2
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800195a:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <HAL_GPIO_Init+0x334>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800197e:	4a32      	ldr	r2, [pc, #200]	; (8001a48 <HAL_GPIO_Init+0x334>)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001984:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <HAL_GPIO_Init+0x334>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019a8:	4a27      	ldr	r2, [pc, #156]	; (8001a48 <HAL_GPIO_Init+0x334>)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ae:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <HAL_GPIO_Init+0x334>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019d2:	4a1d      	ldr	r2, [pc, #116]	; (8001a48 <HAL_GPIO_Init+0x334>)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <HAL_GPIO_Init+0x334>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019fc:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <HAL_GPIO_Init+0x334>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3301      	adds	r3, #1
 8001a06:	61fb      	str	r3, [r7, #28]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	2b0f      	cmp	r3, #15
 8001a0c:	f67f ae90 	bls.w	8001730 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3724      	adds	r7, #36	; 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40013800 	.word	0x40013800
 8001a28:	40020000 	.word	0x40020000
 8001a2c:	40020400 	.word	0x40020400
 8001a30:	40020800 	.word	0x40020800
 8001a34:	40020c00 	.word	0x40020c00
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40021400 	.word	0x40021400
 8001a40:	40021800 	.word	0x40021800
 8001a44:	40021c00 	.word	0x40021c00
 8001a48:	40013c00 	.word	0x40013c00

08001a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a5c:	787b      	ldrb	r3, [r7, #1]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a62:	887a      	ldrh	r2, [r7, #2]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a68:	e003      	b.n	8001a72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a6a:	887b      	ldrh	r3, [r7, #2]
 8001a6c:	041a      	lsls	r2, r3, #16
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	619a      	str	r2, [r3, #24]
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e267      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d075      	beq.n	8001b8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a9e:	4b88      	ldr	r3, [pc, #544]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d00c      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aaa:	4b85      	ldr	r3, [pc, #532]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d112      	bne.n	8001adc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ab6:	4b82      	ldr	r3, [pc, #520]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ac2:	d10b      	bne.n	8001adc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac4:	4b7e      	ldr	r3, [pc, #504]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d05b      	beq.n	8001b88 <HAL_RCC_OscConfig+0x108>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d157      	bne.n	8001b88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e242      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae4:	d106      	bne.n	8001af4 <HAL_RCC_OscConfig+0x74>
 8001ae6:	4b76      	ldr	r3, [pc, #472]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a75      	ldr	r2, [pc, #468]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e01d      	b.n	8001b30 <HAL_RCC_OscConfig+0xb0>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x98>
 8001afe:	4b70      	ldr	r3, [pc, #448]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a6f      	ldr	r2, [pc, #444]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	4b6d      	ldr	r3, [pc, #436]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a6c      	ldr	r2, [pc, #432]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	e00b      	b.n	8001b30 <HAL_RCC_OscConfig+0xb0>
 8001b18:	4b69      	ldr	r3, [pc, #420]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a68      	ldr	r2, [pc, #416]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	4b66      	ldr	r3, [pc, #408]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a65      	ldr	r2, [pc, #404]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d013      	beq.n	8001b60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7ff fc6c 	bl	8001414 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b40:	f7ff fc68 	bl	8001414 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b64      	cmp	r3, #100	; 0x64
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e207      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b52:	4b5b      	ldr	r3, [pc, #364]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0xc0>
 8001b5e:	e014      	b.n	8001b8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff fc58 	bl	8001414 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b68:	f7ff fc54 	bl	8001414 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b64      	cmp	r3, #100	; 0x64
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e1f3      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7a:	4b51      	ldr	r3, [pc, #324]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0xe8>
 8001b86:	e000      	b.n	8001b8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d063      	beq.n	8001c5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b96:	4b4a      	ldr	r3, [pc, #296]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00b      	beq.n	8001bba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ba2:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d11c      	bne.n	8001be8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bae:	4b44      	ldr	r3, [pc, #272]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d116      	bne.n	8001be8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bba:	4b41      	ldr	r3, [pc, #260]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d005      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x152>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d001      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e1c7      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd2:	4b3b      	ldr	r3, [pc, #236]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4937      	ldr	r1, [pc, #220]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be6:	e03a      	b.n	8001c5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d020      	beq.n	8001c32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf0:	4b34      	ldr	r3, [pc, #208]	; (8001cc4 <HAL_RCC_OscConfig+0x244>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf6:	f7ff fc0d 	bl	8001414 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bfe:	f7ff fc09 	bl	8001414 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e1a8      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c10:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1c:	4b28      	ldr	r3, [pc, #160]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	4925      	ldr	r1, [pc, #148]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	600b      	str	r3, [r1, #0]
 8001c30:	e015      	b.n	8001c5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c32:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <HAL_RCC_OscConfig+0x244>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7ff fbec 	bl	8001414 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c40:	f7ff fbe8 	bl	8001414 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e187      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c52:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d036      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d016      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <HAL_RCC_OscConfig+0x248>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c78:	f7ff fbcc 	bl	8001414 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c80:	f7ff fbc8 	bl	8001414 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e167      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c92:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0x200>
 8001c9e:	e01b      	b.n	8001cd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_RCC_OscConfig+0x248>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca6:	f7ff fbb5 	bl	8001414 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cac:	e00e      	b.n	8001ccc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cae:	f7ff fbb1 	bl	8001414 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d907      	bls.n	8001ccc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e150      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	42470000 	.word	0x42470000
 8001cc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ccc:	4b88      	ldr	r3, [pc, #544]	; (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1ea      	bne.n	8001cae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 8097 	beq.w	8001e14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cea:	4b81      	ldr	r3, [pc, #516]	; (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10f      	bne.n	8001d16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	4b7d      	ldr	r3, [pc, #500]	; (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	4a7c      	ldr	r2, [pc, #496]	; (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d04:	6413      	str	r3, [r2, #64]	; 0x40
 8001d06:	4b7a      	ldr	r3, [pc, #488]	; (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d12:	2301      	movs	r3, #1
 8001d14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d16:	4b77      	ldr	r3, [pc, #476]	; (8001ef4 <HAL_RCC_OscConfig+0x474>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d118      	bne.n	8001d54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d22:	4b74      	ldr	r3, [pc, #464]	; (8001ef4 <HAL_RCC_OscConfig+0x474>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a73      	ldr	r2, [pc, #460]	; (8001ef4 <HAL_RCC_OscConfig+0x474>)
 8001d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d2e:	f7ff fb71 	bl	8001414 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d36:	f7ff fb6d 	bl	8001414 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e10c      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d48:	4b6a      	ldr	r3, [pc, #424]	; (8001ef4 <HAL_RCC_OscConfig+0x474>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f0      	beq.n	8001d36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d106      	bne.n	8001d6a <HAL_RCC_OscConfig+0x2ea>
 8001d5c:	4b64      	ldr	r3, [pc, #400]	; (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d60:	4a63      	ldr	r2, [pc, #396]	; (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	6713      	str	r3, [r2, #112]	; 0x70
 8001d68:	e01c      	b.n	8001da4 <HAL_RCC_OscConfig+0x324>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b05      	cmp	r3, #5
 8001d70:	d10c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x30c>
 8001d72:	4b5f      	ldr	r3, [pc, #380]	; (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d76:	4a5e      	ldr	r2, [pc, #376]	; (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001d78:	f043 0304 	orr.w	r3, r3, #4
 8001d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d7e:	4b5c      	ldr	r3, [pc, #368]	; (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d82:	4a5b      	ldr	r2, [pc, #364]	; (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6713      	str	r3, [r2, #112]	; 0x70
 8001d8a:	e00b      	b.n	8001da4 <HAL_RCC_OscConfig+0x324>
 8001d8c:	4b58      	ldr	r3, [pc, #352]	; (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d90:	4a57      	ldr	r2, [pc, #348]	; (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001d92:	f023 0301 	bic.w	r3, r3, #1
 8001d96:	6713      	str	r3, [r2, #112]	; 0x70
 8001d98:	4b55      	ldr	r3, [pc, #340]	; (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9c:	4a54      	ldr	r2, [pc, #336]	; (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001d9e:	f023 0304 	bic.w	r3, r3, #4
 8001da2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d015      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dac:	f7ff fb32 	bl	8001414 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db2:	e00a      	b.n	8001dca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db4:	f7ff fb2e 	bl	8001414 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e0cb      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dca:	4b49      	ldr	r3, [pc, #292]	; (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0ee      	beq.n	8001db4 <HAL_RCC_OscConfig+0x334>
 8001dd6:	e014      	b.n	8001e02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd8:	f7ff fb1c 	bl	8001414 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dde:	e00a      	b.n	8001df6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de0:	f7ff fb18 	bl	8001414 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e0b5      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df6:	4b3e      	ldr	r3, [pc, #248]	; (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1ee      	bne.n	8001de0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e02:	7dfb      	ldrb	r3, [r7, #23]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d105      	bne.n	8001e14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e08:	4b39      	ldr	r3, [pc, #228]	; (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	4a38      	ldr	r2, [pc, #224]	; (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001e0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 80a1 	beq.w	8001f60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e1e:	4b34      	ldr	r3, [pc, #208]	; (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d05c      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d141      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e32:	4b31      	ldr	r3, [pc, #196]	; (8001ef8 <HAL_RCC_OscConfig+0x478>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7ff faec 	bl	8001414 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e40:	f7ff fae8 	bl	8001414 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e087      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e52:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69da      	ldr	r2, [r3, #28]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	019b      	lsls	r3, r3, #6
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e74:	085b      	lsrs	r3, r3, #1
 8001e76:	3b01      	subs	r3, #1
 8001e78:	041b      	lsls	r3, r3, #16
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e80:	061b      	lsls	r3, r3, #24
 8001e82:	491b      	ldr	r1, [pc, #108]	; (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <HAL_RCC_OscConfig+0x478>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8e:	f7ff fac1 	bl	8001414 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e96:	f7ff fabd 	bl	8001414 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e05c      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x416>
 8001eb4:	e054      	b.n	8001f60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <HAL_RCC_OscConfig+0x478>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7ff faaa 	bl	8001414 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7ff faa6 	bl	8001414 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e045      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x444>
 8001ee2:	e03d      	b.n	8001f60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d107      	bne.n	8001efc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e038      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40007000 	.word	0x40007000
 8001ef8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001efc:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <HAL_RCC_OscConfig+0x4ec>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d028      	beq.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d121      	bne.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d11a      	bne.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d111      	bne.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f42:	085b      	lsrs	r3, r3, #1
 8001f44:	3b01      	subs	r3, #1
 8001f46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d107      	bne.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800

08001f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0cc      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f84:	4b68      	ldr	r3, [pc, #416]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d90c      	bls.n	8001fac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b65      	ldr	r3, [pc, #404]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b63      	ldr	r3, [pc, #396]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0b8      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d020      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc4:	4b59      	ldr	r3, [pc, #356]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	4a58      	ldr	r2, [pc, #352]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fdc:	4b53      	ldr	r3, [pc, #332]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	4a52      	ldr	r2, [pc, #328]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fe6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe8:	4b50      	ldr	r3, [pc, #320]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	494d      	ldr	r1, [pc, #308]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d044      	beq.n	8002090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d107      	bne.n	800201e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	4b47      	ldr	r3, [pc, #284]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d119      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e07f      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d003      	beq.n	800202e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800202a:	2b03      	cmp	r3, #3
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202e:	4b3f      	ldr	r3, [pc, #252]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e06f      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203e:	4b3b      	ldr	r3, [pc, #236]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e067      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204e:	4b37      	ldr	r3, [pc, #220]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f023 0203 	bic.w	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4934      	ldr	r1, [pc, #208]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	4313      	orrs	r3, r2
 800205e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002060:	f7ff f9d8 	bl	8001414 <HAL_GetTick>
 8002064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002066:	e00a      	b.n	800207e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002068:	f7ff f9d4 	bl	8001414 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	; 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e04f      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	4b2b      	ldr	r3, [pc, #172]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 020c 	and.w	r2, r3, #12
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	429a      	cmp	r2, r3
 800208e:	d1eb      	bne.n	8002068 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002090:	4b25      	ldr	r3, [pc, #148]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d20c      	bcs.n	80020b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b22      	ldr	r3, [pc, #136]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b20      	ldr	r3, [pc, #128]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e032      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4916      	ldr	r1, [pc, #88]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d009      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	490e      	ldr	r1, [pc, #56]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020f6:	f000 f821 	bl	800213c <HAL_RCC_GetSysClockFreq>
 80020fa:	4602      	mov	r2, r0
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	490a      	ldr	r1, [pc, #40]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	5ccb      	ldrb	r3, [r1, r3]
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	4a09      	ldr	r2, [pc, #36]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff f864 	bl	80011e4 <HAL_InitTick>

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40023c00 	.word	0x40023c00
 800212c:	40023800 	.word	0x40023800
 8002130:	080061a8 	.word	0x080061a8
 8002134:	2000000c 	.word	0x2000000c
 8002138:	20000010 	.word	0x20000010

0800213c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800213c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002140:	b094      	sub	sp, #80	; 0x50
 8002142:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	647b      	str	r3, [r7, #68]	; 0x44
 8002148:	2300      	movs	r3, #0
 800214a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800214c:	2300      	movs	r3, #0
 800214e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002154:	4b79      	ldr	r3, [pc, #484]	; (800233c <HAL_RCC_GetSysClockFreq+0x200>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 030c 	and.w	r3, r3, #12
 800215c:	2b08      	cmp	r3, #8
 800215e:	d00d      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0x40>
 8002160:	2b08      	cmp	r3, #8
 8002162:	f200 80e1 	bhi.w	8002328 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002166:	2b00      	cmp	r3, #0
 8002168:	d002      	beq.n	8002170 <HAL_RCC_GetSysClockFreq+0x34>
 800216a:	2b04      	cmp	r3, #4
 800216c:	d003      	beq.n	8002176 <HAL_RCC_GetSysClockFreq+0x3a>
 800216e:	e0db      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002170:	4b73      	ldr	r3, [pc, #460]	; (8002340 <HAL_RCC_GetSysClockFreq+0x204>)
 8002172:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002174:	e0db      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002176:	4b73      	ldr	r3, [pc, #460]	; (8002344 <HAL_RCC_GetSysClockFreq+0x208>)
 8002178:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800217a:	e0d8      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800217c:	4b6f      	ldr	r3, [pc, #444]	; (800233c <HAL_RCC_GetSysClockFreq+0x200>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002184:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002186:	4b6d      	ldr	r3, [pc, #436]	; (800233c <HAL_RCC_GetSysClockFreq+0x200>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d063      	beq.n	800225a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002192:	4b6a      	ldr	r3, [pc, #424]	; (800233c <HAL_RCC_GetSysClockFreq+0x200>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	099b      	lsrs	r3, r3, #6
 8002198:	2200      	movs	r2, #0
 800219a:	63bb      	str	r3, [r7, #56]	; 0x38
 800219c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800219e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021a4:	633b      	str	r3, [r7, #48]	; 0x30
 80021a6:	2300      	movs	r3, #0
 80021a8:	637b      	str	r3, [r7, #52]	; 0x34
 80021aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021ae:	4622      	mov	r2, r4
 80021b0:	462b      	mov	r3, r5
 80021b2:	f04f 0000 	mov.w	r0, #0
 80021b6:	f04f 0100 	mov.w	r1, #0
 80021ba:	0159      	lsls	r1, r3, #5
 80021bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021c0:	0150      	lsls	r0, r2, #5
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4621      	mov	r1, r4
 80021c8:	1a51      	subs	r1, r2, r1
 80021ca:	6139      	str	r1, [r7, #16]
 80021cc:	4629      	mov	r1, r5
 80021ce:	eb63 0301 	sbc.w	r3, r3, r1
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021e0:	4659      	mov	r1, fp
 80021e2:	018b      	lsls	r3, r1, #6
 80021e4:	4651      	mov	r1, sl
 80021e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021ea:	4651      	mov	r1, sl
 80021ec:	018a      	lsls	r2, r1, #6
 80021ee:	4651      	mov	r1, sl
 80021f0:	ebb2 0801 	subs.w	r8, r2, r1
 80021f4:	4659      	mov	r1, fp
 80021f6:	eb63 0901 	sbc.w	r9, r3, r1
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	f04f 0300 	mov.w	r3, #0
 8002202:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002206:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800220a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800220e:	4690      	mov	r8, r2
 8002210:	4699      	mov	r9, r3
 8002212:	4623      	mov	r3, r4
 8002214:	eb18 0303 	adds.w	r3, r8, r3
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	462b      	mov	r3, r5
 800221c:	eb49 0303 	adc.w	r3, r9, r3
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	f04f 0300 	mov.w	r3, #0
 800222a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800222e:	4629      	mov	r1, r5
 8002230:	024b      	lsls	r3, r1, #9
 8002232:	4621      	mov	r1, r4
 8002234:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002238:	4621      	mov	r1, r4
 800223a:	024a      	lsls	r2, r1, #9
 800223c:	4610      	mov	r0, r2
 800223e:	4619      	mov	r1, r3
 8002240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002242:	2200      	movs	r2, #0
 8002244:	62bb      	str	r3, [r7, #40]	; 0x28
 8002246:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002248:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800224c:	f7fd ffc8 	bl	80001e0 <__aeabi_uldivmod>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4613      	mov	r3, r2
 8002256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002258:	e058      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800225a:	4b38      	ldr	r3, [pc, #224]	; (800233c <HAL_RCC_GetSysClockFreq+0x200>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	099b      	lsrs	r3, r3, #6
 8002260:	2200      	movs	r2, #0
 8002262:	4618      	mov	r0, r3
 8002264:	4611      	mov	r1, r2
 8002266:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800226a:	623b      	str	r3, [r7, #32]
 800226c:	2300      	movs	r3, #0
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
 8002270:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002274:	4642      	mov	r2, r8
 8002276:	464b      	mov	r3, r9
 8002278:	f04f 0000 	mov.w	r0, #0
 800227c:	f04f 0100 	mov.w	r1, #0
 8002280:	0159      	lsls	r1, r3, #5
 8002282:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002286:	0150      	lsls	r0, r2, #5
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4641      	mov	r1, r8
 800228e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002292:	4649      	mov	r1, r9
 8002294:	eb63 0b01 	sbc.w	fp, r3, r1
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022ac:	ebb2 040a 	subs.w	r4, r2, sl
 80022b0:	eb63 050b 	sbc.w	r5, r3, fp
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	00eb      	lsls	r3, r5, #3
 80022be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022c2:	00e2      	lsls	r2, r4, #3
 80022c4:	4614      	mov	r4, r2
 80022c6:	461d      	mov	r5, r3
 80022c8:	4643      	mov	r3, r8
 80022ca:	18e3      	adds	r3, r4, r3
 80022cc:	603b      	str	r3, [r7, #0]
 80022ce:	464b      	mov	r3, r9
 80022d0:	eb45 0303 	adc.w	r3, r5, r3
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022e2:	4629      	mov	r1, r5
 80022e4:	028b      	lsls	r3, r1, #10
 80022e6:	4621      	mov	r1, r4
 80022e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022ec:	4621      	mov	r1, r4
 80022ee:	028a      	lsls	r2, r1, #10
 80022f0:	4610      	mov	r0, r2
 80022f2:	4619      	mov	r1, r3
 80022f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022f6:	2200      	movs	r2, #0
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	61fa      	str	r2, [r7, #28]
 80022fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002300:	f7fd ff6e 	bl	80001e0 <__aeabi_uldivmod>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4613      	mov	r3, r2
 800230a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_RCC_GetSysClockFreq+0x200>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	0c1b      	lsrs	r3, r3, #16
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	3301      	adds	r3, #1
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800231c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800231e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002320:	fbb2 f3f3 	udiv	r3, r2, r3
 8002324:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002326:	e002      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002328:	4b05      	ldr	r3, [pc, #20]	; (8002340 <HAL_RCC_GetSysClockFreq+0x204>)
 800232a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800232c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800232e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002330:	4618      	mov	r0, r3
 8002332:	3750      	adds	r7, #80	; 0x50
 8002334:	46bd      	mov	sp, r7
 8002336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800
 8002340:	00f42400 	.word	0x00f42400
 8002344:	007a1200 	.word	0x007a1200

08002348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800234c:	4b03      	ldr	r3, [pc, #12]	; (800235c <HAL_RCC_GetHCLKFreq+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	2000000c 	.word	0x2000000c

08002360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002364:	f7ff fff0 	bl	8002348 <HAL_RCC_GetHCLKFreq>
 8002368:	4602      	mov	r2, r0
 800236a:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	0a9b      	lsrs	r3, r3, #10
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	4903      	ldr	r1, [pc, #12]	; (8002384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002376:	5ccb      	ldrb	r3, [r1, r3]
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800237c:	4618      	mov	r0, r3
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40023800 	.word	0x40023800
 8002384:	080061b8 	.word	0x080061b8

08002388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800238c:	f7ff ffdc 	bl	8002348 <HAL_RCC_GetHCLKFreq>
 8002390:	4602      	mov	r2, r0
 8002392:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	0b5b      	lsrs	r3, r3, #13
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	4903      	ldr	r1, [pc, #12]	; (80023ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800239e:	5ccb      	ldrb	r3, [r1, r3]
 80023a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40023800 	.word	0x40023800
 80023ac:	080061b8 	.word	0x080061b8

080023b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	220f      	movs	r2, #15
 80023be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023c0:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_RCC_GetClockConfig+0x5c>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 0203 	and.w	r2, r3, #3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023cc:	4b0f      	ldr	r3, [pc, #60]	; (800240c <HAL_RCC_GetClockConfig+0x5c>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <HAL_RCC_GetClockConfig+0x5c>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <HAL_RCC_GetClockConfig+0x5c>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	08db      	lsrs	r3, r3, #3
 80023ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023f2:	4b07      	ldr	r3, [pc, #28]	; (8002410 <HAL_RCC_GetClockConfig+0x60>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0207 	and.w	r2, r3, #7
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	601a      	str	r2, [r3, #0]
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800
 8002410:	40023c00 	.word	0x40023c00

08002414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e041      	b.n	80024aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d106      	bne.n	8002440 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f839 	bl	80024b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2202      	movs	r2, #2
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3304      	adds	r3, #4
 8002450:	4619      	mov	r1, r3
 8002452:	4610      	mov	r0, r2
 8002454:	f000 f9c0 	bl	80027d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d001      	beq.n	80024e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e04e      	b.n	800257e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a23      	ldr	r2, [pc, #140]	; (800258c <HAL_TIM_Base_Start_IT+0xc4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d022      	beq.n	8002548 <HAL_TIM_Base_Start_IT+0x80>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250a:	d01d      	beq.n	8002548 <HAL_TIM_Base_Start_IT+0x80>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1f      	ldr	r2, [pc, #124]	; (8002590 <HAL_TIM_Base_Start_IT+0xc8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d018      	beq.n	8002548 <HAL_TIM_Base_Start_IT+0x80>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a1e      	ldr	r2, [pc, #120]	; (8002594 <HAL_TIM_Base_Start_IT+0xcc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d013      	beq.n	8002548 <HAL_TIM_Base_Start_IT+0x80>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a1c      	ldr	r2, [pc, #112]	; (8002598 <HAL_TIM_Base_Start_IT+0xd0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00e      	beq.n	8002548 <HAL_TIM_Base_Start_IT+0x80>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a1b      	ldr	r2, [pc, #108]	; (800259c <HAL_TIM_Base_Start_IT+0xd4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d009      	beq.n	8002548 <HAL_TIM_Base_Start_IT+0x80>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a19      	ldr	r2, [pc, #100]	; (80025a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d004      	beq.n	8002548 <HAL_TIM_Base_Start_IT+0x80>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a18      	ldr	r2, [pc, #96]	; (80025a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d111      	bne.n	800256c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2b06      	cmp	r3, #6
 8002558:	d010      	beq.n	800257c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 0201 	orr.w	r2, r2, #1
 8002568:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800256a:	e007      	b.n	800257c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40010000 	.word	0x40010000
 8002590:	40000400 	.word	0x40000400
 8002594:	40000800 	.word	0x40000800
 8002598:	40000c00 	.word	0x40000c00
 800259c:	40010400 	.word	0x40010400
 80025a0:	40014000 	.word	0x40014000
 80025a4:	40001800 	.word	0x40001800

080025a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d020      	beq.n	800260c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01b      	beq.n	800260c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f06f 0202 	mvn.w	r2, #2
 80025dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f8d2 	bl	800279c <HAL_TIM_IC_CaptureCallback>
 80025f8:	e005      	b.n	8002606 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f8c4 	bl	8002788 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f8d5 	bl	80027b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b00      	cmp	r3, #0
 8002614:	d020      	beq.n	8002658 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d01b      	beq.n	8002658 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0204 	mvn.w	r2, #4
 8002628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2202      	movs	r2, #2
 800262e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f8ac 	bl	800279c <HAL_TIM_IC_CaptureCallback>
 8002644:	e005      	b.n	8002652 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f89e 	bl	8002788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f8af 	bl	80027b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d020      	beq.n	80026a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b00      	cmp	r3, #0
 800266a:	d01b      	beq.n	80026a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f06f 0208 	mvn.w	r2, #8
 8002674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2204      	movs	r2, #4
 800267a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f886 	bl	800279c <HAL_TIM_IC_CaptureCallback>
 8002690:	e005      	b.n	800269e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f878 	bl	8002788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f889 	bl	80027b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f003 0310 	and.w	r3, r3, #16
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d020      	beq.n	80026f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f003 0310 	and.w	r3, r3, #16
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d01b      	beq.n	80026f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f06f 0210 	mvn.w	r2, #16
 80026c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2208      	movs	r2, #8
 80026c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f860 	bl	800279c <HAL_TIM_IC_CaptureCallback>
 80026dc:	e005      	b.n	80026ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f852 	bl	8002788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f863 	bl	80027b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00c      	beq.n	8002714 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	d007      	beq.n	8002714 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f06f 0201 	mvn.w	r2, #1
 800270c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7fe fcd4 	bl	80010bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00c      	beq.n	8002738 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002724:	2b00      	cmp	r3, #0
 8002726:	d007      	beq.n	8002738 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f906 	bl	8002944 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00c      	beq.n	800275c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002748:	2b00      	cmp	r3, #0
 800274a:	d007      	beq.n	800275c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f834 	bl	80027c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00c      	beq.n	8002780 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	2b00      	cmp	r3, #0
 800276e:	d007      	beq.n	8002780 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f06f 0220 	mvn.w	r2, #32
 8002778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f8d8 	bl	8002930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002780:	bf00      	nop
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a46      	ldr	r2, [pc, #280]	; (8002904 <TIM_Base_SetConfig+0x12c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d013      	beq.n	8002818 <TIM_Base_SetConfig+0x40>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f6:	d00f      	beq.n	8002818 <TIM_Base_SetConfig+0x40>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a43      	ldr	r2, [pc, #268]	; (8002908 <TIM_Base_SetConfig+0x130>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00b      	beq.n	8002818 <TIM_Base_SetConfig+0x40>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a42      	ldr	r2, [pc, #264]	; (800290c <TIM_Base_SetConfig+0x134>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d007      	beq.n	8002818 <TIM_Base_SetConfig+0x40>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a41      	ldr	r2, [pc, #260]	; (8002910 <TIM_Base_SetConfig+0x138>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d003      	beq.n	8002818 <TIM_Base_SetConfig+0x40>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a40      	ldr	r2, [pc, #256]	; (8002914 <TIM_Base_SetConfig+0x13c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d108      	bne.n	800282a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a35      	ldr	r2, [pc, #212]	; (8002904 <TIM_Base_SetConfig+0x12c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d02b      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002838:	d027      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a32      	ldr	r2, [pc, #200]	; (8002908 <TIM_Base_SetConfig+0x130>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d023      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a31      	ldr	r2, [pc, #196]	; (800290c <TIM_Base_SetConfig+0x134>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d01f      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a30      	ldr	r2, [pc, #192]	; (8002910 <TIM_Base_SetConfig+0x138>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d01b      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a2f      	ldr	r2, [pc, #188]	; (8002914 <TIM_Base_SetConfig+0x13c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d017      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a2e      	ldr	r2, [pc, #184]	; (8002918 <TIM_Base_SetConfig+0x140>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d013      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a2d      	ldr	r2, [pc, #180]	; (800291c <TIM_Base_SetConfig+0x144>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d00f      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a2c      	ldr	r2, [pc, #176]	; (8002920 <TIM_Base_SetConfig+0x148>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d00b      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a2b      	ldr	r2, [pc, #172]	; (8002924 <TIM_Base_SetConfig+0x14c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d007      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a2a      	ldr	r2, [pc, #168]	; (8002928 <TIM_Base_SetConfig+0x150>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d003      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a29      	ldr	r2, [pc, #164]	; (800292c <TIM_Base_SetConfig+0x154>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d108      	bne.n	800289c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	4313      	orrs	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a10      	ldr	r2, [pc, #64]	; (8002904 <TIM_Base_SetConfig+0x12c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d003      	beq.n	80028d0 <TIM_Base_SetConfig+0xf8>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a12      	ldr	r2, [pc, #72]	; (8002914 <TIM_Base_SetConfig+0x13c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d103      	bne.n	80028d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d105      	bne.n	80028f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f023 0201 	bic.w	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	611a      	str	r2, [r3, #16]
  }
}
 80028f6:	bf00      	nop
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40010000 	.word	0x40010000
 8002908:	40000400 	.word	0x40000400
 800290c:	40000800 	.word	0x40000800
 8002910:	40000c00 	.word	0x40000c00
 8002914:	40010400 	.word	0x40010400
 8002918:	40014000 	.word	0x40014000
 800291c:	40014400 	.word	0x40014400
 8002920:	40014800 	.word	0x40014800
 8002924:	40001800 	.word	0x40001800
 8002928:	40001c00 	.word	0x40001c00
 800292c:	40002000 	.word	0x40002000

08002930 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e042      	b.n	80029f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7fe fbe0 	bl	8001144 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2224      	movs	r2, #36	; 0x24
 8002988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800299a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 fdbd 	bl	800351c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08a      	sub	sp, #40	; 0x28
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	4613      	mov	r3, r2
 8002a06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	d175      	bne.n	8002b04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <HAL_UART_Transmit+0x2c>
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e06e      	b.n	8002b06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2221      	movs	r2, #33	; 0x21
 8002a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a36:	f7fe fced 	bl	8001414 <HAL_GetTick>
 8002a3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	88fa      	ldrh	r2, [r7, #6]
 8002a40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	88fa      	ldrh	r2, [r7, #6]
 8002a46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a50:	d108      	bne.n	8002a64 <HAL_UART_Transmit+0x6c>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d104      	bne.n	8002a64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	e003      	b.n	8002a6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a6c:	e02e      	b.n	8002acc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2200      	movs	r2, #0
 8002a76:	2180      	movs	r1, #128	; 0x80
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 fb1f 	bl	80030bc <UART_WaitOnFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e03a      	b.n	8002b06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10b      	bne.n	8002aae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aa4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	61bb      	str	r3, [r7, #24]
 8002aac:	e007      	b.n	8002abe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	781a      	ldrb	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	3301      	adds	r3, #1
 8002abc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1cb      	bne.n	8002a6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2200      	movs	r2, #0
 8002ade:	2140      	movs	r1, #64	; 0x40
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 faeb 	bl	80030bc <UART_WaitOnFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e006      	b.n	8002b06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	e000      	b.n	8002b06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002b04:	2302      	movs	r3, #2
  }
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3720      	adds	r7, #32
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b20      	cmp	r3, #32
 8002b26:	d112      	bne.n	8002b4e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_UART_Receive_IT+0x26>
 8002b2e:	88fb      	ldrh	r3, [r7, #6]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e00b      	b.n	8002b50 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	461a      	mov	r2, r3
 8002b42:	68b9      	ldr	r1, [r7, #8]
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 fb12 	bl	800316e <UART_Start_Receive_IT>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	e000      	b.n	8002b50 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002b4e:	2302      	movs	r3, #2
  }
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b0ba      	sub	sp, #232	; 0xe8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002b96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10f      	bne.n	8002bbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d009      	beq.n	8002bbe <HAL_UART_IRQHandler+0x66>
 8002baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fbf2 	bl	80033a0 <UART_Receive_IT>
      return;
 8002bbc:	e25b      	b.n	8003076 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002bbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 80de 	beq.w	8002d84 <HAL_UART_IRQHandler+0x22c>
 8002bc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d106      	bne.n	8002be2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bd8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80d1 	beq.w	8002d84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00b      	beq.n	8002c06 <HAL_UART_IRQHandler+0xae>
 8002bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d005      	beq.n	8002c06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	f043 0201 	orr.w	r2, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00b      	beq.n	8002c2a <HAL_UART_IRQHandler+0xd2>
 8002c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	f043 0202 	orr.w	r2, r3, #2
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00b      	beq.n	8002c4e <HAL_UART_IRQHandler+0xf6>
 8002c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d005      	beq.n	8002c4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	f043 0204 	orr.w	r2, r3, #4
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d011      	beq.n	8002c7e <HAL_UART_IRQHandler+0x126>
 8002c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c5e:	f003 0320 	and.w	r3, r3, #32
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d105      	bne.n	8002c72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d005      	beq.n	8002c7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f043 0208 	orr.w	r2, r3, #8
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 81f2 	beq.w	800306c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <HAL_UART_IRQHandler+0x14e>
 8002c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c98:	f003 0320 	and.w	r3, r3, #32
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 fb7d 	bl	80033a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb0:	2b40      	cmp	r3, #64	; 0x40
 8002cb2:	bf0c      	ite	eq
 8002cb4:	2301      	moveq	r3, #1
 8002cb6:	2300      	movne	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d103      	bne.n	8002cd2 <HAL_UART_IRQHandler+0x17a>
 8002cca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d04f      	beq.n	8002d72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 fa85 	bl	80031e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce2:	2b40      	cmp	r3, #64	; 0x40
 8002ce4:	d141      	bne.n	8002d6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	3314      	adds	r3, #20
 8002cec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cf4:	e853 3f00 	ldrex	r3, [r3]
 8002cf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002cfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	3314      	adds	r3, #20
 8002d0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d22:	e841 2300 	strex	r3, r2, [r1]
 8002d26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1d9      	bne.n	8002ce6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d013      	beq.n	8002d62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3e:	4a7e      	ldr	r2, [pc, #504]	; (8002f38 <HAL_UART_IRQHandler+0x3e0>)
 8002d40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe fcc2 	bl	80016d0 <HAL_DMA_Abort_IT>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d016      	beq.n	8002d80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d60:	e00e      	b.n	8002d80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f994 	bl	8003090 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d68:	e00a      	b.n	8002d80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f990 	bl	8003090 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d70:	e006      	b.n	8002d80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f98c 	bl	8003090 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002d7e:	e175      	b.n	800306c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d80:	bf00      	nop
    return;
 8002d82:	e173      	b.n	800306c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	f040 814f 	bne.w	800302c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 8148 	beq.w	800302c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 8141 	beq.w	800302c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002daa:	2300      	movs	r3, #0
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dca:	2b40      	cmp	r3, #64	; 0x40
 8002dcc:	f040 80b6 	bne.w	8002f3c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ddc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 8145 	beq.w	8003070 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002dea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dee:	429a      	cmp	r2, r3
 8002df0:	f080 813e 	bcs.w	8003070 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dfa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e06:	f000 8088 	beq.w	8002f1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	330c      	adds	r3, #12
 8002e10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e18:	e853 3f00 	ldrex	r3, [r3]
 8002e1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	330c      	adds	r3, #12
 8002e32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002e36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e46:	e841 2300 	strex	r3, r2, [r1]
 8002e4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1d9      	bne.n	8002e0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3314      	adds	r3, #20
 8002e5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e60:	e853 3f00 	ldrex	r3, [r3]
 8002e64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	3314      	adds	r3, #20
 8002e76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e86:	e841 2300 	strex	r3, r2, [r1]
 8002e8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1e1      	bne.n	8002e56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3314      	adds	r3, #20
 8002e98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e9c:	e853 3f00 	ldrex	r3, [r3]
 8002ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ea2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3314      	adds	r3, #20
 8002eb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002eb6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002eb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ebc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ebe:	e841 2300 	strex	r3, r2, [r1]
 8002ec2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1e3      	bne.n	8002e92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	330c      	adds	r3, #12
 8002ede:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee2:	e853 3f00 	ldrex	r3, [r3]
 8002ee6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eea:	f023 0310 	bic.w	r3, r3, #16
 8002eee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	330c      	adds	r3, #12
 8002ef8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002efc:	65ba      	str	r2, [r7, #88]	; 0x58
 8002efe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f04:	e841 2300 	strex	r3, r2, [r1]
 8002f08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e3      	bne.n	8002ed8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fe fb6b 	bl	80015f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f8b7 	bl	80030a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f36:	e09b      	b.n	8003070 <HAL_UART_IRQHandler+0x518>
 8002f38:	080032a9 	.word	0x080032a9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 808e 	beq.w	8003074 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002f58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 8089 	beq.w	8003074 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	330c      	adds	r3, #12
 8002f68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6c:	e853 3f00 	ldrex	r3, [r3]
 8002f70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	330c      	adds	r3, #12
 8002f82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002f86:	647a      	str	r2, [r7, #68]	; 0x44
 8002f88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f8e:	e841 2300 	strex	r3, r2, [r1]
 8002f92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1e3      	bne.n	8002f62 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3314      	adds	r3, #20
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	e853 3f00 	ldrex	r3, [r3]
 8002fa8:	623b      	str	r3, [r7, #32]
   return(result);
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	f023 0301 	bic.w	r3, r3, #1
 8002fb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	3314      	adds	r3, #20
 8002fba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002fbe:	633a      	str	r2, [r7, #48]	; 0x30
 8002fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fc6:	e841 2300 	strex	r3, r2, [r1]
 8002fca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1e3      	bne.n	8002f9a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	330c      	adds	r3, #12
 8002fe6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	e853 3f00 	ldrex	r3, [r3]
 8002fee:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0310 	bic.w	r3, r3, #16
 8002ff6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	330c      	adds	r3, #12
 8003000:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003004:	61fa      	str	r2, [r7, #28]
 8003006:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003008:	69b9      	ldr	r1, [r7, #24]
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	e841 2300 	strex	r3, r2, [r1]
 8003010:	617b      	str	r3, [r7, #20]
   return(result);
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1e3      	bne.n	8002fe0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800301e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003022:	4619      	mov	r1, r3
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f83d 	bl	80030a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800302a:	e023      	b.n	8003074 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800302c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003034:	2b00      	cmp	r3, #0
 8003036:	d009      	beq.n	800304c <HAL_UART_IRQHandler+0x4f4>
 8003038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800303c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f943 	bl	80032d0 <UART_Transmit_IT>
    return;
 800304a:	e014      	b.n	8003076 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800304c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00e      	beq.n	8003076 <HAL_UART_IRQHandler+0x51e>
 8003058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800305c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003060:	2b00      	cmp	r3, #0
 8003062:	d008      	beq.n	8003076 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f983 	bl	8003370 <UART_EndTransmit_IT>
    return;
 800306a:	e004      	b.n	8003076 <HAL_UART_IRQHandler+0x51e>
    return;
 800306c:	bf00      	nop
 800306e:	e002      	b.n	8003076 <HAL_UART_IRQHandler+0x51e>
      return;
 8003070:	bf00      	nop
 8003072:	e000      	b.n	8003076 <HAL_UART_IRQHandler+0x51e>
      return;
 8003074:	bf00      	nop
  }
}
 8003076:	37e8      	adds	r7, #232	; 0xe8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	4613      	mov	r3, r2
 80030ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030cc:	e03b      	b.n	8003146 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d4:	d037      	beq.n	8003146 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d6:	f7fe f99d 	bl	8001414 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	6a3a      	ldr	r2, [r7, #32]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d302      	bcc.n	80030ec <UART_WaitOnFlagUntilTimeout+0x30>
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e03a      	b.n	8003166 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d023      	beq.n	8003146 <UART_WaitOnFlagUntilTimeout+0x8a>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b80      	cmp	r3, #128	; 0x80
 8003102:	d020      	beq.n	8003146 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b40      	cmp	r3, #64	; 0x40
 8003108:	d01d      	beq.n	8003146 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b08      	cmp	r3, #8
 8003116:	d116      	bne.n	8003146 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 f857 	bl	80031e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2208      	movs	r2, #8
 8003138:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e00f      	b.n	8003166 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	4013      	ands	r3, r2
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	429a      	cmp	r2, r3
 8003154:	bf0c      	ite	eq
 8003156:	2301      	moveq	r3, #1
 8003158:	2300      	movne	r3, #0
 800315a:	b2db      	uxtb	r3, r3
 800315c:	461a      	mov	r2, r3
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	429a      	cmp	r2, r3
 8003162:	d0b4      	beq.n	80030ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800316e:	b480      	push	{r7}
 8003170:	b085      	sub	sp, #20
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	4613      	mov	r3, r2
 800317a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	88fa      	ldrh	r2, [r7, #6]
 8003186:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	88fa      	ldrh	r2, [r7, #6]
 800318c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2222      	movs	r2, #34	; 0x22
 8003198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d007      	beq.n	80031b4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031b2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695a      	ldr	r2, [r3, #20]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0220 	orr.w	r2, r2, #32
 80031d2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b095      	sub	sp, #84	; 0x54
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	330c      	adds	r3, #12
 80031f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f4:	e853 3f00 	ldrex	r3, [r3]
 80031f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80031fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003200:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	330c      	adds	r3, #12
 8003208:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800320a:	643a      	str	r2, [r7, #64]	; 0x40
 800320c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003210:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003212:	e841 2300 	strex	r3, r2, [r1]
 8003216:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1e5      	bne.n	80031ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	3314      	adds	r3, #20
 8003224:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	e853 3f00 	ldrex	r3, [r3]
 800322c:	61fb      	str	r3, [r7, #28]
   return(result);
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f023 0301 	bic.w	r3, r3, #1
 8003234:	64bb      	str	r3, [r7, #72]	; 0x48
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	3314      	adds	r3, #20
 800323c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800323e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003240:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003242:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003246:	e841 2300 	strex	r3, r2, [r1]
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1e5      	bne.n	800321e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	2b01      	cmp	r3, #1
 8003258:	d119      	bne.n	800328e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	330c      	adds	r3, #12
 8003260:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	e853 3f00 	ldrex	r3, [r3]
 8003268:	60bb      	str	r3, [r7, #8]
   return(result);
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f023 0310 	bic.w	r3, r3, #16
 8003270:	647b      	str	r3, [r7, #68]	; 0x44
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	330c      	adds	r3, #12
 8003278:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800327a:	61ba      	str	r2, [r7, #24]
 800327c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327e:	6979      	ldr	r1, [r7, #20]
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	e841 2300 	strex	r3, r2, [r1]
 8003286:	613b      	str	r3, [r7, #16]
   return(result);
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1e5      	bne.n	800325a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800329c:	bf00      	nop
 800329e:	3754      	adds	r7, #84	; 0x54
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f7ff fee4 	bl	8003090 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b21      	cmp	r3, #33	; 0x21
 80032e2:	d13e      	bne.n	8003362 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ec:	d114      	bne.n	8003318 <UART_Transmit_IT+0x48>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d110      	bne.n	8003318 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	461a      	mov	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800330a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	1c9a      	adds	r2, r3, #2
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	621a      	str	r2, [r3, #32]
 8003316:	e008      	b.n	800332a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	1c59      	adds	r1, r3, #1
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6211      	str	r1, [r2, #32]
 8003322:	781a      	ldrb	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29b      	uxth	r3, r3
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	4619      	mov	r1, r3
 8003338:	84d1      	strh	r1, [r2, #38]	; 0x26
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10f      	bne.n	800335e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800334c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800335c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	e000      	b.n	8003364 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003362:	2302      	movs	r3, #2
  }
}
 8003364:	4618      	mov	r0, r3
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003386:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff fe73 	bl	800307c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08c      	sub	sp, #48	; 0x30
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b22      	cmp	r3, #34	; 0x22
 80033b2:	f040 80ae 	bne.w	8003512 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033be:	d117      	bne.n	80033f0 <UART_Receive_IT+0x50>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d113      	bne.n	80033f0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033de:	b29a      	uxth	r2, r3
 80033e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	1c9a      	adds	r2, r3, #2
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	629a      	str	r2, [r3, #40]	; 0x28
 80033ee:	e026      	b.n	800343e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003402:	d007      	beq.n	8003414 <UART_Receive_IT+0x74>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10a      	bne.n	8003422 <UART_Receive_IT+0x82>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d106      	bne.n	8003422 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	b2da      	uxtb	r2, r3
 800341c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341e:	701a      	strb	r2, [r3, #0]
 8003420:	e008      	b.n	8003434 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800342e:	b2da      	uxtb	r2, r3
 8003430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003432:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003442:	b29b      	uxth	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	b29b      	uxth	r3, r3
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	4619      	mov	r1, r3
 800344c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800344e:	2b00      	cmp	r3, #0
 8003450:	d15d      	bne.n	800350e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0220 	bic.w	r2, r2, #32
 8003460:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003470:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0201 	bic.w	r2, r2, #1
 8003480:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	2b01      	cmp	r3, #1
 8003496:	d135      	bne.n	8003504 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	330c      	adds	r3, #12
 80034a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	e853 3f00 	ldrex	r3, [r3]
 80034ac:	613b      	str	r3, [r7, #16]
   return(result);
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f023 0310 	bic.w	r3, r3, #16
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	330c      	adds	r3, #12
 80034bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034be:	623a      	str	r2, [r7, #32]
 80034c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c2:	69f9      	ldr	r1, [r7, #28]
 80034c4:	6a3a      	ldr	r2, [r7, #32]
 80034c6:	e841 2300 	strex	r3, r2, [r1]
 80034ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1e5      	bne.n	800349e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	2b10      	cmp	r3, #16
 80034de:	d10a      	bne.n	80034f6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034fa:	4619      	mov	r1, r3
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff fdd1 	bl	80030a4 <HAL_UARTEx_RxEventCallback>
 8003502:	e002      	b.n	800350a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7fd fdad 	bl	8001064 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	e002      	b.n	8003514 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	e000      	b.n	8003514 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003512:	2302      	movs	r3, #2
  }
}
 8003514:	4618      	mov	r0, r3
 8003516:	3730      	adds	r7, #48	; 0x30
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800351c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003520:	b0c0      	sub	sp, #256	; 0x100
 8003522:	af00      	add	r7, sp, #0
 8003524:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003538:	68d9      	ldr	r1, [r3, #12]
 800353a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	ea40 0301 	orr.w	r3, r0, r1
 8003544:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	431a      	orrs	r2, r3
 8003554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	431a      	orrs	r2, r3
 800355c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003574:	f021 010c 	bic.w	r1, r1, #12
 8003578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003582:	430b      	orrs	r3, r1
 8003584:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003596:	6999      	ldr	r1, [r3, #24]
 8003598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	ea40 0301 	orr.w	r3, r0, r1
 80035a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	4b8f      	ldr	r3, [pc, #572]	; (80037e8 <UART_SetConfig+0x2cc>)
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d005      	beq.n	80035bc <UART_SetConfig+0xa0>
 80035b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	4b8d      	ldr	r3, [pc, #564]	; (80037ec <UART_SetConfig+0x2d0>)
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d104      	bne.n	80035c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035bc:	f7fe fee4 	bl	8002388 <HAL_RCC_GetPCLK2Freq>
 80035c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80035c4:	e003      	b.n	80035ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035c6:	f7fe fecb 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 80035ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035d8:	f040 810c 	bne.w	80037f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035e0:	2200      	movs	r2, #0
 80035e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035ee:	4622      	mov	r2, r4
 80035f0:	462b      	mov	r3, r5
 80035f2:	1891      	adds	r1, r2, r2
 80035f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80035f6:	415b      	adcs	r3, r3
 80035f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035fe:	4621      	mov	r1, r4
 8003600:	eb12 0801 	adds.w	r8, r2, r1
 8003604:	4629      	mov	r1, r5
 8003606:	eb43 0901 	adc.w	r9, r3, r1
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003616:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800361a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800361e:	4690      	mov	r8, r2
 8003620:	4699      	mov	r9, r3
 8003622:	4623      	mov	r3, r4
 8003624:	eb18 0303 	adds.w	r3, r8, r3
 8003628:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800362c:	462b      	mov	r3, r5
 800362e:	eb49 0303 	adc.w	r3, r9, r3
 8003632:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003642:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003646:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800364a:	460b      	mov	r3, r1
 800364c:	18db      	adds	r3, r3, r3
 800364e:	653b      	str	r3, [r7, #80]	; 0x50
 8003650:	4613      	mov	r3, r2
 8003652:	eb42 0303 	adc.w	r3, r2, r3
 8003656:	657b      	str	r3, [r7, #84]	; 0x54
 8003658:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800365c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003660:	f7fc fdbe 	bl	80001e0 <__aeabi_uldivmod>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4b61      	ldr	r3, [pc, #388]	; (80037f0 <UART_SetConfig+0x2d4>)
 800366a:	fba3 2302 	umull	r2, r3, r3, r2
 800366e:	095b      	lsrs	r3, r3, #5
 8003670:	011c      	lsls	r4, r3, #4
 8003672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003676:	2200      	movs	r2, #0
 8003678:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800367c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003680:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003684:	4642      	mov	r2, r8
 8003686:	464b      	mov	r3, r9
 8003688:	1891      	adds	r1, r2, r2
 800368a:	64b9      	str	r1, [r7, #72]	; 0x48
 800368c:	415b      	adcs	r3, r3
 800368e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003690:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003694:	4641      	mov	r1, r8
 8003696:	eb12 0a01 	adds.w	sl, r2, r1
 800369a:	4649      	mov	r1, r9
 800369c:	eb43 0b01 	adc.w	fp, r3, r1
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036b4:	4692      	mov	sl, r2
 80036b6:	469b      	mov	fp, r3
 80036b8:	4643      	mov	r3, r8
 80036ba:	eb1a 0303 	adds.w	r3, sl, r3
 80036be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036c2:	464b      	mov	r3, r9
 80036c4:	eb4b 0303 	adc.w	r3, fp, r3
 80036c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80036dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036e0:	460b      	mov	r3, r1
 80036e2:	18db      	adds	r3, r3, r3
 80036e4:	643b      	str	r3, [r7, #64]	; 0x40
 80036e6:	4613      	mov	r3, r2
 80036e8:	eb42 0303 	adc.w	r3, r2, r3
 80036ec:	647b      	str	r3, [r7, #68]	; 0x44
 80036ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80036f6:	f7fc fd73 	bl	80001e0 <__aeabi_uldivmod>
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	4611      	mov	r1, r2
 8003700:	4b3b      	ldr	r3, [pc, #236]	; (80037f0 <UART_SetConfig+0x2d4>)
 8003702:	fba3 2301 	umull	r2, r3, r3, r1
 8003706:	095b      	lsrs	r3, r3, #5
 8003708:	2264      	movs	r2, #100	; 0x64
 800370a:	fb02 f303 	mul.w	r3, r2, r3
 800370e:	1acb      	subs	r3, r1, r3
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003716:	4b36      	ldr	r3, [pc, #216]	; (80037f0 <UART_SetConfig+0x2d4>)
 8003718:	fba3 2302 	umull	r2, r3, r3, r2
 800371c:	095b      	lsrs	r3, r3, #5
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003724:	441c      	add	r4, r3
 8003726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800372a:	2200      	movs	r2, #0
 800372c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003730:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003734:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003738:	4642      	mov	r2, r8
 800373a:	464b      	mov	r3, r9
 800373c:	1891      	adds	r1, r2, r2
 800373e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003740:	415b      	adcs	r3, r3
 8003742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003744:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003748:	4641      	mov	r1, r8
 800374a:	1851      	adds	r1, r2, r1
 800374c:	6339      	str	r1, [r7, #48]	; 0x30
 800374e:	4649      	mov	r1, r9
 8003750:	414b      	adcs	r3, r1
 8003752:	637b      	str	r3, [r7, #52]	; 0x34
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003760:	4659      	mov	r1, fp
 8003762:	00cb      	lsls	r3, r1, #3
 8003764:	4651      	mov	r1, sl
 8003766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800376a:	4651      	mov	r1, sl
 800376c:	00ca      	lsls	r2, r1, #3
 800376e:	4610      	mov	r0, r2
 8003770:	4619      	mov	r1, r3
 8003772:	4603      	mov	r3, r0
 8003774:	4642      	mov	r2, r8
 8003776:	189b      	adds	r3, r3, r2
 8003778:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800377c:	464b      	mov	r3, r9
 800377e:	460a      	mov	r2, r1
 8003780:	eb42 0303 	adc.w	r3, r2, r3
 8003784:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003794:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003798:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800379c:	460b      	mov	r3, r1
 800379e:	18db      	adds	r3, r3, r3
 80037a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80037a2:	4613      	mov	r3, r2
 80037a4:	eb42 0303 	adc.w	r3, r2, r3
 80037a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80037b2:	f7fc fd15 	bl	80001e0 <__aeabi_uldivmod>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4b0d      	ldr	r3, [pc, #52]	; (80037f0 <UART_SetConfig+0x2d4>)
 80037bc:	fba3 1302 	umull	r1, r3, r3, r2
 80037c0:	095b      	lsrs	r3, r3, #5
 80037c2:	2164      	movs	r1, #100	; 0x64
 80037c4:	fb01 f303 	mul.w	r3, r1, r3
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	3332      	adds	r3, #50	; 0x32
 80037ce:	4a08      	ldr	r2, [pc, #32]	; (80037f0 <UART_SetConfig+0x2d4>)
 80037d0:	fba2 2303 	umull	r2, r3, r2, r3
 80037d4:	095b      	lsrs	r3, r3, #5
 80037d6:	f003 0207 	and.w	r2, r3, #7
 80037da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4422      	add	r2, r4
 80037e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037e4:	e106      	b.n	80039f4 <UART_SetConfig+0x4d8>
 80037e6:	bf00      	nop
 80037e8:	40011000 	.word	0x40011000
 80037ec:	40011400 	.word	0x40011400
 80037f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037f8:	2200      	movs	r2, #0
 80037fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003802:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003806:	4642      	mov	r2, r8
 8003808:	464b      	mov	r3, r9
 800380a:	1891      	adds	r1, r2, r2
 800380c:	6239      	str	r1, [r7, #32]
 800380e:	415b      	adcs	r3, r3
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
 8003812:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003816:	4641      	mov	r1, r8
 8003818:	1854      	adds	r4, r2, r1
 800381a:	4649      	mov	r1, r9
 800381c:	eb43 0501 	adc.w	r5, r3, r1
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	00eb      	lsls	r3, r5, #3
 800382a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800382e:	00e2      	lsls	r2, r4, #3
 8003830:	4614      	mov	r4, r2
 8003832:	461d      	mov	r5, r3
 8003834:	4643      	mov	r3, r8
 8003836:	18e3      	adds	r3, r4, r3
 8003838:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800383c:	464b      	mov	r3, r9
 800383e:	eb45 0303 	adc.w	r3, r5, r3
 8003842:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003852:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003862:	4629      	mov	r1, r5
 8003864:	008b      	lsls	r3, r1, #2
 8003866:	4621      	mov	r1, r4
 8003868:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800386c:	4621      	mov	r1, r4
 800386e:	008a      	lsls	r2, r1, #2
 8003870:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003874:	f7fc fcb4 	bl	80001e0 <__aeabi_uldivmod>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4b60      	ldr	r3, [pc, #384]	; (8003a00 <UART_SetConfig+0x4e4>)
 800387e:	fba3 2302 	umull	r2, r3, r3, r2
 8003882:	095b      	lsrs	r3, r3, #5
 8003884:	011c      	lsls	r4, r3, #4
 8003886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800388a:	2200      	movs	r2, #0
 800388c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003890:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003894:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003898:	4642      	mov	r2, r8
 800389a:	464b      	mov	r3, r9
 800389c:	1891      	adds	r1, r2, r2
 800389e:	61b9      	str	r1, [r7, #24]
 80038a0:	415b      	adcs	r3, r3
 80038a2:	61fb      	str	r3, [r7, #28]
 80038a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038a8:	4641      	mov	r1, r8
 80038aa:	1851      	adds	r1, r2, r1
 80038ac:	6139      	str	r1, [r7, #16]
 80038ae:	4649      	mov	r1, r9
 80038b0:	414b      	adcs	r3, r1
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	f04f 0300 	mov.w	r3, #0
 80038bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038c0:	4659      	mov	r1, fp
 80038c2:	00cb      	lsls	r3, r1, #3
 80038c4:	4651      	mov	r1, sl
 80038c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ca:	4651      	mov	r1, sl
 80038cc:	00ca      	lsls	r2, r1, #3
 80038ce:	4610      	mov	r0, r2
 80038d0:	4619      	mov	r1, r3
 80038d2:	4603      	mov	r3, r0
 80038d4:	4642      	mov	r2, r8
 80038d6:	189b      	adds	r3, r3, r2
 80038d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038dc:	464b      	mov	r3, r9
 80038de:	460a      	mov	r2, r1
 80038e0:	eb42 0303 	adc.w	r3, r2, r3
 80038e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80038f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	f04f 0300 	mov.w	r3, #0
 80038fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003900:	4649      	mov	r1, r9
 8003902:	008b      	lsls	r3, r1, #2
 8003904:	4641      	mov	r1, r8
 8003906:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800390a:	4641      	mov	r1, r8
 800390c:	008a      	lsls	r2, r1, #2
 800390e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003912:	f7fc fc65 	bl	80001e0 <__aeabi_uldivmod>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4611      	mov	r1, r2
 800391c:	4b38      	ldr	r3, [pc, #224]	; (8003a00 <UART_SetConfig+0x4e4>)
 800391e:	fba3 2301 	umull	r2, r3, r3, r1
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	2264      	movs	r2, #100	; 0x64
 8003926:	fb02 f303 	mul.w	r3, r2, r3
 800392a:	1acb      	subs	r3, r1, r3
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	3332      	adds	r3, #50	; 0x32
 8003930:	4a33      	ldr	r2, [pc, #204]	; (8003a00 <UART_SetConfig+0x4e4>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	095b      	lsrs	r3, r3, #5
 8003938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800393c:	441c      	add	r4, r3
 800393e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003942:	2200      	movs	r2, #0
 8003944:	673b      	str	r3, [r7, #112]	; 0x70
 8003946:	677a      	str	r2, [r7, #116]	; 0x74
 8003948:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800394c:	4642      	mov	r2, r8
 800394e:	464b      	mov	r3, r9
 8003950:	1891      	adds	r1, r2, r2
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	415b      	adcs	r3, r3
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800395c:	4641      	mov	r1, r8
 800395e:	1851      	adds	r1, r2, r1
 8003960:	6039      	str	r1, [r7, #0]
 8003962:	4649      	mov	r1, r9
 8003964:	414b      	adcs	r3, r1
 8003966:	607b      	str	r3, [r7, #4]
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003974:	4659      	mov	r1, fp
 8003976:	00cb      	lsls	r3, r1, #3
 8003978:	4651      	mov	r1, sl
 800397a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800397e:	4651      	mov	r1, sl
 8003980:	00ca      	lsls	r2, r1, #3
 8003982:	4610      	mov	r0, r2
 8003984:	4619      	mov	r1, r3
 8003986:	4603      	mov	r3, r0
 8003988:	4642      	mov	r2, r8
 800398a:	189b      	adds	r3, r3, r2
 800398c:	66bb      	str	r3, [r7, #104]	; 0x68
 800398e:	464b      	mov	r3, r9
 8003990:	460a      	mov	r2, r1
 8003992:	eb42 0303 	adc.w	r3, r2, r3
 8003996:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	663b      	str	r3, [r7, #96]	; 0x60
 80039a2:	667a      	str	r2, [r7, #100]	; 0x64
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	f04f 0300 	mov.w	r3, #0
 80039ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80039b0:	4649      	mov	r1, r9
 80039b2:	008b      	lsls	r3, r1, #2
 80039b4:	4641      	mov	r1, r8
 80039b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039ba:	4641      	mov	r1, r8
 80039bc:	008a      	lsls	r2, r1, #2
 80039be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80039c2:	f7fc fc0d 	bl	80001e0 <__aeabi_uldivmod>
 80039c6:	4602      	mov	r2, r0
 80039c8:	460b      	mov	r3, r1
 80039ca:	4b0d      	ldr	r3, [pc, #52]	; (8003a00 <UART_SetConfig+0x4e4>)
 80039cc:	fba3 1302 	umull	r1, r3, r3, r2
 80039d0:	095b      	lsrs	r3, r3, #5
 80039d2:	2164      	movs	r1, #100	; 0x64
 80039d4:	fb01 f303 	mul.w	r3, r1, r3
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	3332      	adds	r3, #50	; 0x32
 80039de:	4a08      	ldr	r2, [pc, #32]	; (8003a00 <UART_SetConfig+0x4e4>)
 80039e0:	fba2 2303 	umull	r2, r3, r2, r3
 80039e4:	095b      	lsrs	r3, r3, #5
 80039e6:	f003 020f 	and.w	r2, r3, #15
 80039ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4422      	add	r2, r4
 80039f2:	609a      	str	r2, [r3, #8]
}
 80039f4:	bf00      	nop
 80039f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80039fa:	46bd      	mov	sp, r7
 80039fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a00:	51eb851f 	.word	0x51eb851f

08003a04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f103 0208 	add.w	r2, r3, #8
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f04f 32ff 	mov.w	r2, #4294967295
 8003a1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f103 0208 	add.w	r2, r3, #8
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f103 0208 	add.w	r2, r3, #8
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b085      	sub	sp, #20
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	601a      	str	r2, [r3, #0]
}
 8003a9a:	bf00      	nop
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b085      	sub	sp, #20
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abc:	d103      	bne.n	8003ac6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	e00c      	b.n	8003ae0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3308      	adds	r3, #8
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	e002      	b.n	8003ad4 <vListInsert+0x2e>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d2f6      	bcs.n	8003ace <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	601a      	str	r2, [r3, #0]
}
 8003b0c:	bf00      	nop
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6892      	ldr	r2, [r2, #8]
 8003b2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6852      	ldr	r2, [r2, #4]
 8003b38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d103      	bne.n	8003b4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	1e5a      	subs	r2, r3, #1
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10a      	bne.n	8003b96 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b84:	f383 8811 	msr	BASEPRI, r3
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b92:	bf00      	nop
 8003b94:	e7fe      	b.n	8003b94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003b96:	f001 fe3d 	bl	8005814 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba2:	68f9      	ldr	r1, [r7, #12]
 8003ba4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ba6:	fb01 f303 	mul.w	r3, r1, r3
 8003baa:	441a      	add	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	68f9      	ldr	r1, [r7, #12]
 8003bca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003bcc:	fb01 f303 	mul.w	r3, r1, r3
 8003bd0:	441a      	add	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	22ff      	movs	r2, #255	; 0xff
 8003bda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	22ff      	movs	r2, #255	; 0xff
 8003be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d114      	bne.n	8003c16 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01a      	beq.n	8003c2a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	3310      	adds	r3, #16
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f001 f8fd 	bl	8004df8 <xTaskRemoveFromEventList>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d012      	beq.n	8003c2a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c04:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <xQueueGenericReset+0xcc>)
 8003c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	e009      	b.n	8003c2a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	3310      	adds	r3, #16
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fef2 	bl	8003a04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	3324      	adds	r3, #36	; 0x24
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff feed 	bl	8003a04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c2a:	f001 fe23 	bl	8005874 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c2e:	2301      	movs	r3, #1
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	e000ed04 	.word	0xe000ed04

08003c3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	; 0x28
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	4613      	mov	r3, r2
 8003c48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10a      	bne.n	8003c66 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c54:	f383 8811 	msr	BASEPRI, r3
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	613b      	str	r3, [r7, #16]
}
 8003c62:	bf00      	nop
 8003c64:	e7fe      	b.n	8003c64 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	fb02 f303 	mul.w	r3, r2, r3
 8003c6e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	3348      	adds	r3, #72	; 0x48
 8003c74:	4618      	mov	r0, r3
 8003c76:	f001 feef 	bl	8005a58 <pvPortMalloc>
 8003c7a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d011      	beq.n	8003ca6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	3348      	adds	r3, #72	; 0x48
 8003c8a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c94:	79fa      	ldrb	r2, [r7, #7]
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	68b9      	ldr	r1, [r7, #8]
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f805 	bl	8003cb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ca6:	69bb      	ldr	r3, [r7, #24]
	}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3720      	adds	r7, #32
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
 8003cbc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d103      	bne.n	8003ccc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	e002      	b.n	8003cd2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003cde:	2101      	movs	r1, #1
 8003ce0:	69b8      	ldr	r0, [r7, #24]
 8003ce2:	f7ff ff43 	bl	8003b6c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ce6:	bf00      	nop
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b086      	sub	sp, #24
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10a      	bne.n	8003d14 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	613b      	str	r3, [r7, #16]
}
 8003d10:	bf00      	nop
 8003d12:	e7fe      	b.n	8003d12 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d90a      	bls.n	8003d32 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8003d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d20:	f383 8811 	msr	BASEPRI, r3
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	60fb      	str	r3, [r7, #12]
}
 8003d2e:	bf00      	nop
 8003d30:	e7fe      	b.n	8003d30 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003d32:	2202      	movs	r2, #2
 8003d34:	2100      	movs	r1, #0
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff ff80 	bl	8003c3c <xQueueGenericCreate>
 8003d3c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003d4a:	697b      	ldr	r3, [r7, #20]
	}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08e      	sub	sp, #56	; 0x38
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d62:	2300      	movs	r3, #0
 8003d64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10a      	bne.n	8003d86 <xQueueGenericSend+0x32>
	__asm volatile
 8003d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d82:	bf00      	nop
 8003d84:	e7fe      	b.n	8003d84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d103      	bne.n	8003d94 <xQueueGenericSend+0x40>
 8003d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <xQueueGenericSend+0x44>
 8003d94:	2301      	movs	r3, #1
 8003d96:	e000      	b.n	8003d9a <xQueueGenericSend+0x46>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10a      	bne.n	8003db4 <xQueueGenericSend+0x60>
	__asm volatile
 8003d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003db0:	bf00      	nop
 8003db2:	e7fe      	b.n	8003db2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d103      	bne.n	8003dc2 <xQueueGenericSend+0x6e>
 8003dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <xQueueGenericSend+0x72>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <xQueueGenericSend+0x74>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10a      	bne.n	8003de2 <xQueueGenericSend+0x8e>
	__asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	623b      	str	r3, [r7, #32]
}
 8003dde:	bf00      	nop
 8003de0:	e7fe      	b.n	8003de0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003de2:	f001 f9c5 	bl	8005170 <xTaskGetSchedulerState>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d102      	bne.n	8003df2 <xQueueGenericSend+0x9e>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <xQueueGenericSend+0xa2>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <xQueueGenericSend+0xa4>
 8003df6:	2300      	movs	r3, #0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10a      	bne.n	8003e12 <xQueueGenericSend+0xbe>
	__asm volatile
 8003dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e00:	f383 8811 	msr	BASEPRI, r3
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	61fb      	str	r3, [r7, #28]
}
 8003e0e:	bf00      	nop
 8003e10:	e7fe      	b.n	8003e10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e12:	f001 fcff 	bl	8005814 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d302      	bcc.n	8003e28 <xQueueGenericSend+0xd4>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d129      	bne.n	8003e7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	68b9      	ldr	r1, [r7, #8]
 8003e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e2e:	f000 fa5f 	bl	80042f0 <prvCopyDataToQueue>
 8003e32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d010      	beq.n	8003e5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3e:	3324      	adds	r3, #36	; 0x24
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 ffd9 	bl	8004df8 <xTaskRemoveFromEventList>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d013      	beq.n	8003e74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e4c:	4b3f      	ldr	r3, [pc, #252]	; (8003f4c <xQueueGenericSend+0x1f8>)
 8003e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	e00a      	b.n	8003e74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d007      	beq.n	8003e74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e64:	4b39      	ldr	r3, [pc, #228]	; (8003f4c <xQueueGenericSend+0x1f8>)
 8003e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e74:	f001 fcfe 	bl	8005874 <vPortExitCritical>
				return pdPASS;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e063      	b.n	8003f44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d103      	bne.n	8003e8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e82:	f001 fcf7 	bl	8005874 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	e05c      	b.n	8003f44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d106      	bne.n	8003e9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e90:	f107 0314 	add.w	r3, r7, #20
 8003e94:	4618      	mov	r0, r3
 8003e96:	f001 f811 	bl	8004ebc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e9e:	f001 fce9 	bl	8005874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ea2:	f000 fdc7 	bl	8004a34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ea6:	f001 fcb5 	bl	8005814 <vPortEnterCritical>
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eb0:	b25b      	sxtb	r3, r3
 8003eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb6:	d103      	bne.n	8003ec0 <xQueueGenericSend+0x16c>
 8003eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ec6:	b25b      	sxtb	r3, r3
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ecc:	d103      	bne.n	8003ed6 <xQueueGenericSend+0x182>
 8003ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ed6:	f001 fccd 	bl	8005874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003eda:	1d3a      	adds	r2, r7, #4
 8003edc:	f107 0314 	add.w	r3, r7, #20
 8003ee0:	4611      	mov	r1, r2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f001 f800 	bl	8004ee8 <xTaskCheckForTimeOut>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d124      	bne.n	8003f38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003eee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ef0:	f000 fad0 	bl	8004494 <prvIsQueueFull>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d018      	beq.n	8003f2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efc:	3310      	adds	r3, #16
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	4611      	mov	r1, r2
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 ff54 	bl	8004db0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f0a:	f000 fa5b 	bl	80043c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f0e:	f000 fd9f 	bl	8004a50 <xTaskResumeAll>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f47f af7c 	bne.w	8003e12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003f1a:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <xQueueGenericSend+0x1f8>)
 8003f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	e772      	b.n	8003e12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f2e:	f000 fa49 	bl	80043c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f32:	f000 fd8d 	bl	8004a50 <xTaskResumeAll>
 8003f36:	e76c      	b.n	8003e12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f3a:	f000 fa43 	bl	80043c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f3e:	f000 fd87 	bl	8004a50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3738      	adds	r7, #56	; 0x38
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	e000ed04 	.word	0xe000ed04

08003f50 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08e      	sub	sp, #56	; 0x38
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10a      	bne.n	8003f7a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	623b      	str	r3, [r7, #32]
}
 8003f76:	bf00      	nop
 8003f78:	e7fe      	b.n	8003f78 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	61fb      	str	r3, [r7, #28]
}
 8003f94:	bf00      	nop
 8003f96:	e7fe      	b.n	8003f96 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d103      	bne.n	8003fa8 <xQueueGiveFromISR+0x58>
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <xQueueGiveFromISR+0x5c>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <xQueueGiveFromISR+0x5e>
 8003fac:	2300      	movs	r3, #0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10a      	bne.n	8003fc8 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	61bb      	str	r3, [r7, #24]
}
 8003fc4:	bf00      	nop
 8003fc6:	e7fe      	b.n	8003fc6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fc8:	f001 fd06 	bl	80059d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003fcc:	f3ef 8211 	mrs	r2, BASEPRI
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	617a      	str	r2, [r7, #20]
 8003fe2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003fe4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d22b      	bcs.n	8004050 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800400a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800400e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004012:	d112      	bne.n	800403a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	2b00      	cmp	r3, #0
 800401a:	d016      	beq.n	800404a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800401c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401e:	3324      	adds	r3, #36	; 0x24
 8004020:	4618      	mov	r0, r3
 8004022:	f000 fee9 	bl	8004df8 <xTaskRemoveFromEventList>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00e      	beq.n	800404a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00b      	beq.n	800404a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	2201      	movs	r2, #1
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	e007      	b.n	800404a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800403a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800403e:	3301      	adds	r3, #1
 8004040:	b2db      	uxtb	r3, r3
 8004042:	b25a      	sxtb	r2, r3
 8004044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800404a:	2301      	movs	r3, #1
 800404c:	637b      	str	r3, [r7, #52]	; 0x34
 800404e:	e001      	b.n	8004054 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004050:	2300      	movs	r3, #0
 8004052:	637b      	str	r3, [r7, #52]	; 0x34
 8004054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004056:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800405e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004062:	4618      	mov	r0, r3
 8004064:	3738      	adds	r7, #56	; 0x38
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08e      	sub	sp, #56	; 0x38
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004076:	2300      	movs	r3, #0
 8004078:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800407e:	2300      	movs	r3, #0
 8004080:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10a      	bne.n	800409e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	623b      	str	r3, [r7, #32]
}
 800409a:	bf00      	nop
 800409c:	e7fe      	b.n	800409c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800409e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80040a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040aa:	f383 8811 	msr	BASEPRI, r3
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f3bf 8f4f 	dsb	sy
 80040b6:	61fb      	str	r3, [r7, #28]
}
 80040b8:	bf00      	nop
 80040ba:	e7fe      	b.n	80040ba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040bc:	f001 f858 	bl	8005170 <xTaskGetSchedulerState>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d102      	bne.n	80040cc <xQueueSemaphoreTake+0x60>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <xQueueSemaphoreTake+0x64>
 80040cc:	2301      	movs	r3, #1
 80040ce:	e000      	b.n	80040d2 <xQueueSemaphoreTake+0x66>
 80040d0:	2300      	movs	r3, #0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10a      	bne.n	80040ec <xQueueSemaphoreTake+0x80>
	__asm volatile
 80040d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040da:	f383 8811 	msr	BASEPRI, r3
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	61bb      	str	r3, [r7, #24]
}
 80040e8:	bf00      	nop
 80040ea:	e7fe      	b.n	80040ea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040ec:	f001 fb92 	bl	8005814 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80040f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80040f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d024      	beq.n	8004146 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	1e5a      	subs	r2, r3, #1
 8004100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004102:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d104      	bne.n	8004116 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800410c:	f001 f9d8 	bl	80054c0 <pvTaskIncrementMutexHeldCount>
 8004110:	4602      	mov	r2, r0
 8004112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004114:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00f      	beq.n	800413e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800411e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004120:	3310      	adds	r3, #16
 8004122:	4618      	mov	r0, r3
 8004124:	f000 fe68 	bl	8004df8 <xTaskRemoveFromEventList>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d007      	beq.n	800413e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800412e:	4b54      	ldr	r3, [pc, #336]	; (8004280 <xQueueSemaphoreTake+0x214>)
 8004130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800413e:	f001 fb99 	bl	8005874 <vPortExitCritical>
				return pdPASS;
 8004142:	2301      	movs	r3, #1
 8004144:	e097      	b.n	8004276 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d111      	bne.n	8004170 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800414c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	617b      	str	r3, [r7, #20]
}
 8004164:	bf00      	nop
 8004166:	e7fe      	b.n	8004166 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004168:	f001 fb84 	bl	8005874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800416c:	2300      	movs	r3, #0
 800416e:	e082      	b.n	8004276 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004172:	2b00      	cmp	r3, #0
 8004174:	d106      	bne.n	8004184 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004176:	f107 030c 	add.w	r3, r7, #12
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fe9e 	bl	8004ebc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004180:	2301      	movs	r3, #1
 8004182:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004184:	f001 fb76 	bl	8005874 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004188:	f000 fc54 	bl	8004a34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800418c:	f001 fb42 	bl	8005814 <vPortEnterCritical>
 8004190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004196:	b25b      	sxtb	r3, r3
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419c:	d103      	bne.n	80041a6 <xQueueSemaphoreTake+0x13a>
 800419e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041ac:	b25b      	sxtb	r3, r3
 80041ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b2:	d103      	bne.n	80041bc <xQueueSemaphoreTake+0x150>
 80041b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041bc:	f001 fb5a 	bl	8005874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041c0:	463a      	mov	r2, r7
 80041c2:	f107 030c 	add.w	r3, r7, #12
 80041c6:	4611      	mov	r1, r2
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 fe8d 	bl	8004ee8 <xTaskCheckForTimeOut>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d132      	bne.n	800423a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80041d6:	f000 f947 	bl	8004468 <prvIsQueueEmpty>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d026      	beq.n	800422e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d109      	bne.n	80041fc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80041e8:	f001 fb14 	bl	8005814 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80041ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 ffdb 	bl	80051ac <xTaskPriorityInherit>
 80041f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80041f8:	f001 fb3c 	bl	8005874 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80041fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fe:	3324      	adds	r3, #36	; 0x24
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	4611      	mov	r1, r2
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fdd3 	bl	8004db0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800420a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800420c:	f000 f8da 	bl	80043c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004210:	f000 fc1e 	bl	8004a50 <xTaskResumeAll>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	f47f af68 	bne.w	80040ec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800421c:	4b18      	ldr	r3, [pc, #96]	; (8004280 <xQueueSemaphoreTake+0x214>)
 800421e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	e75e      	b.n	80040ec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800422e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004230:	f000 f8c8 	bl	80043c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004234:	f000 fc0c 	bl	8004a50 <xTaskResumeAll>
 8004238:	e758      	b.n	80040ec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800423a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800423c:	f000 f8c2 	bl	80043c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004240:	f000 fc06 	bl	8004a50 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004244:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004246:	f000 f90f 	bl	8004468 <prvIsQueueEmpty>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	f43f af4d 	beq.w	80040ec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00d      	beq.n	8004274 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004258:	f001 fadc 	bl	8005814 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800425c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800425e:	f000 f82f 	bl	80042c0 <prvGetDisinheritPriorityAfterTimeout>
 8004262:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800426a:	4618      	mov	r0, r3
 800426c:	f001 f89a 	bl	80053a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004270:	f001 fb00 	bl	8005874 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004274:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004276:	4618      	mov	r0, r3
 8004278:	3738      	adds	r7, #56	; 0x38
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	e000ed04 	.word	0xe000ed04

08004284 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10a      	bne.n	80042a8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8004292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	60bb      	str	r3, [r7, #8]
}
 80042a4:	bf00      	nop
 80042a6:	e7fe      	b.n	80042a6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80042a8:	f001 fab4 	bl	8005814 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80042b2:	f001 fadf 	bl	8005874 <vPortExitCritical>

	return uxReturn;
 80042b6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d006      	beq.n	80042de <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f1c3 0307 	rsb	r3, r3, #7
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	e001      	b.n	80042e2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80042e2:	68fb      	ldr	r3, [r7, #12]
	}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80042fc:	2300      	movs	r3, #0
 80042fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004304:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10d      	bne.n	800432a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d14d      	bne.n	80043b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	4618      	mov	r0, r3
 800431c:	f000 ffbc 	bl	8005298 <xTaskPriorityDisinherit>
 8004320:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	609a      	str	r2, [r3, #8]
 8004328:	e043      	b.n	80043b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d119      	bne.n	8004364 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6858      	ldr	r0, [r3, #4]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	461a      	mov	r2, r3
 800433a:	68b9      	ldr	r1, [r7, #8]
 800433c:	f001 fe0e 	bl	8005f5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	441a      	add	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	429a      	cmp	r2, r3
 8004358:	d32b      	bcc.n	80043b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	605a      	str	r2, [r3, #4]
 8004362:	e026      	b.n	80043b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	68d8      	ldr	r0, [r3, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436c:	461a      	mov	r2, r3
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	f001 fdf4 	bl	8005f5c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	68da      	ldr	r2, [r3, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	425b      	negs	r3, r3
 800437e:	441a      	add	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	429a      	cmp	r2, r3
 800438e:	d207      	bcs.n	80043a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	425b      	negs	r3, r3
 800439a:	441a      	add	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d105      	bne.n	80043b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80043ba:	697b      	ldr	r3, [r7, #20]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80043cc:	f001 fa22 	bl	8005814 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043d8:	e011      	b.n	80043fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d012      	beq.n	8004408 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3324      	adds	r3, #36	; 0x24
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fd06 	bl	8004df8 <xTaskRemoveFromEventList>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80043f2:	f000 fddb 	bl	8004fac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004402:	2b00      	cmp	r3, #0
 8004404:	dce9      	bgt.n	80043da <prvUnlockQueue+0x16>
 8004406:	e000      	b.n	800440a <prvUnlockQueue+0x46>
					break;
 8004408:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	22ff      	movs	r2, #255	; 0xff
 800440e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004412:	f001 fa2f 	bl	8005874 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004416:	f001 f9fd 	bl	8005814 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004420:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004422:	e011      	b.n	8004448 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d012      	beq.n	8004452 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3310      	adds	r3, #16
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fce1 	bl	8004df8 <xTaskRemoveFromEventList>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800443c:	f000 fdb6 	bl	8004fac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004440:	7bbb      	ldrb	r3, [r7, #14]
 8004442:	3b01      	subs	r3, #1
 8004444:	b2db      	uxtb	r3, r3
 8004446:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004448:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800444c:	2b00      	cmp	r3, #0
 800444e:	dce9      	bgt.n	8004424 <prvUnlockQueue+0x60>
 8004450:	e000      	b.n	8004454 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004452:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	22ff      	movs	r2, #255	; 0xff
 8004458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800445c:	f001 fa0a 	bl	8005874 <vPortExitCritical>
}
 8004460:	bf00      	nop
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004470:	f001 f9d0 	bl	8005814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	2b00      	cmp	r3, #0
 800447a:	d102      	bne.n	8004482 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800447c:	2301      	movs	r3, #1
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	e001      	b.n	8004486 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004486:	f001 f9f5 	bl	8005874 <vPortExitCritical>

	return xReturn;
 800448a:	68fb      	ldr	r3, [r7, #12]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800449c:	f001 f9ba 	bl	8005814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d102      	bne.n	80044b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80044ac:	2301      	movs	r3, #1
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	e001      	b.n	80044b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044b6:	f001 f9dd 	bl	8005874 <vPortExitCritical>

	return xReturn;
 80044ba:	68fb      	ldr	r3, [r7, #12]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08e      	sub	sp, #56	; 0x38
 80044c8:	af04      	add	r7, sp, #16
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80044d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10a      	bne.n	80044ee <xTaskCreateStatic+0x2a>
	__asm volatile
 80044d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	623b      	str	r3, [r7, #32]
}
 80044ea:	bf00      	nop
 80044ec:	e7fe      	b.n	80044ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80044ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10a      	bne.n	800450a <xTaskCreateStatic+0x46>
	__asm volatile
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	61fb      	str	r3, [r7, #28]
}
 8004506:	bf00      	nop
 8004508:	e7fe      	b.n	8004508 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800450a:	2354      	movs	r3, #84	; 0x54
 800450c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	2b54      	cmp	r3, #84	; 0x54
 8004512:	d00a      	beq.n	800452a <xTaskCreateStatic+0x66>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	61bb      	str	r3, [r7, #24]
}
 8004526:	bf00      	nop
 8004528:	e7fe      	b.n	8004528 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800452a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800452c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452e:	2b00      	cmp	r3, #0
 8004530:	d01e      	beq.n	8004570 <xTaskCreateStatic+0xac>
 8004532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004534:	2b00      	cmp	r3, #0
 8004536:	d01b      	beq.n	8004570 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004540:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	2202      	movs	r2, #2
 8004546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800454a:	2300      	movs	r3, #0
 800454c:	9303      	str	r3, [sp, #12]
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	9302      	str	r3, [sp, #8]
 8004552:	f107 0314 	add.w	r3, r7, #20
 8004556:	9301      	str	r3, [sp, #4]
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	68b9      	ldr	r1, [r7, #8]
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 f850 	bl	8004608 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004568:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800456a:	f000 f8d5 	bl	8004718 <prvAddNewTaskToReadyList>
 800456e:	e001      	b.n	8004574 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004574:	697b      	ldr	r3, [r7, #20]
	}
 8004576:	4618      	mov	r0, r3
 8004578:	3728      	adds	r7, #40	; 0x28
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800457e:	b580      	push	{r7, lr}
 8004580:	b08c      	sub	sp, #48	; 0x30
 8004582:	af04      	add	r7, sp, #16
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	603b      	str	r3, [r7, #0]
 800458a:	4613      	mov	r3, r2
 800458c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4618      	mov	r0, r3
 8004594:	f001 fa60 	bl	8005a58 <pvPortMalloc>
 8004598:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00e      	beq.n	80045be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80045a0:	2054      	movs	r0, #84	; 0x54
 80045a2:	f001 fa59 	bl	8005a58 <pvPortMalloc>
 80045a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	631a      	str	r2, [r3, #48]	; 0x30
 80045b4:	e005      	b.n	80045c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80045b6:	6978      	ldr	r0, [r7, #20]
 80045b8:	f001 fb1a 	bl	8005bf0 <vPortFree>
 80045bc:	e001      	b.n	80045c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80045be:	2300      	movs	r3, #0
 80045c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d017      	beq.n	80045f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80045d0:	88fa      	ldrh	r2, [r7, #6]
 80045d2:	2300      	movs	r3, #0
 80045d4:	9303      	str	r3, [sp, #12]
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	9302      	str	r3, [sp, #8]
 80045da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045dc:	9301      	str	r3, [sp, #4]
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68b9      	ldr	r1, [r7, #8]
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 f80e 	bl	8004608 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045ec:	69f8      	ldr	r0, [r7, #28]
 80045ee:	f000 f893 	bl	8004718 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80045f2:	2301      	movs	r3, #1
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	e002      	b.n	80045fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045f8:	f04f 33ff 	mov.w	r3, #4294967295
 80045fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80045fe:	69bb      	ldr	r3, [r7, #24]
	}
 8004600:	4618      	mov	r0, r3
 8004602:	3720      	adds	r7, #32
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004620:	3b01      	subs	r3, #1
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	f023 0307 	bic.w	r3, r3, #7
 800462e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <prvInitialiseNewTask+0x48>
	__asm volatile
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	617b      	str	r3, [r7, #20]
}
 800464c:	bf00      	nop
 800464e:	e7fe      	b.n	800464e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d01f      	beq.n	8004696 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004656:	2300      	movs	r3, #0
 8004658:	61fb      	str	r3, [r7, #28]
 800465a:	e012      	b.n	8004682 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	4413      	add	r3, r2
 8004662:	7819      	ldrb	r1, [r3, #0]
 8004664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	4413      	add	r3, r2
 800466a:	3334      	adds	r3, #52	; 0x34
 800466c:	460a      	mov	r2, r1
 800466e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	4413      	add	r3, r2
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d006      	beq.n	800468a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	3301      	adds	r3, #1
 8004680:	61fb      	str	r3, [r7, #28]
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	2b0f      	cmp	r3, #15
 8004686:	d9e9      	bls.n	800465c <prvInitialiseNewTask+0x54>
 8004688:	e000      	b.n	800468c <prvInitialiseNewTask+0x84>
			{
				break;
 800468a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800468c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004694:	e003      	b.n	800469e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a0:	2b06      	cmp	r3, #6
 80046a2:	d901      	bls.n	80046a8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80046a4:	2306      	movs	r3, #6
 80046a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80046a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80046ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046b2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80046b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b6:	2200      	movs	r2, #0
 80046b8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80046ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046bc:	3304      	adds	r3, #4
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff f9c0 	bl	8003a44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	3318      	adds	r3, #24
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff f9bb 	bl	8003a44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80046ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d6:	f1c3 0207 	rsb	r2, r3, #7
 80046da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80046de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80046e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e6:	2200      	movs	r2, #0
 80046e8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	68f9      	ldr	r1, [r7, #12]
 80046f6:	69b8      	ldr	r0, [r7, #24]
 80046f8:	f000 ff5c 	bl	80055b4 <pxPortInitialiseStack>
 80046fc:	4602      	mov	r2, r0
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800470c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800470e:	bf00      	nop
 8004710:	3720      	adds	r7, #32
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004720:	f001 f878 	bl	8005814 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004724:	4b2a      	ldr	r3, [pc, #168]	; (80047d0 <prvAddNewTaskToReadyList+0xb8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	3301      	adds	r3, #1
 800472a:	4a29      	ldr	r2, [pc, #164]	; (80047d0 <prvAddNewTaskToReadyList+0xb8>)
 800472c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800472e:	4b29      	ldr	r3, [pc, #164]	; (80047d4 <prvAddNewTaskToReadyList+0xbc>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d109      	bne.n	800474a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004736:	4a27      	ldr	r2, [pc, #156]	; (80047d4 <prvAddNewTaskToReadyList+0xbc>)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800473c:	4b24      	ldr	r3, [pc, #144]	; (80047d0 <prvAddNewTaskToReadyList+0xb8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d110      	bne.n	8004766 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004744:	f000 fc56 	bl	8004ff4 <prvInitialiseTaskLists>
 8004748:	e00d      	b.n	8004766 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800474a:	4b23      	ldr	r3, [pc, #140]	; (80047d8 <prvAddNewTaskToReadyList+0xc0>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d109      	bne.n	8004766 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004752:	4b20      	ldr	r3, [pc, #128]	; (80047d4 <prvAddNewTaskToReadyList+0xbc>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	429a      	cmp	r2, r3
 800475e:	d802      	bhi.n	8004766 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004760:	4a1c      	ldr	r2, [pc, #112]	; (80047d4 <prvAddNewTaskToReadyList+0xbc>)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004766:	4b1d      	ldr	r3, [pc, #116]	; (80047dc <prvAddNewTaskToReadyList+0xc4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3301      	adds	r3, #1
 800476c:	4a1b      	ldr	r2, [pc, #108]	; (80047dc <prvAddNewTaskToReadyList+0xc4>)
 800476e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	2201      	movs	r2, #1
 8004776:	409a      	lsls	r2, r3
 8004778:	4b19      	ldr	r3, [pc, #100]	; (80047e0 <prvAddNewTaskToReadyList+0xc8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4313      	orrs	r3, r2
 800477e:	4a18      	ldr	r2, [pc, #96]	; (80047e0 <prvAddNewTaskToReadyList+0xc8>)
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004786:	4613      	mov	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4a15      	ldr	r2, [pc, #84]	; (80047e4 <prvAddNewTaskToReadyList+0xcc>)
 8004790:	441a      	add	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3304      	adds	r3, #4
 8004796:	4619      	mov	r1, r3
 8004798:	4610      	mov	r0, r2
 800479a:	f7ff f960 	bl	8003a5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800479e:	f001 f869 	bl	8005874 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80047a2:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <prvAddNewTaskToReadyList+0xc0>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00e      	beq.n	80047c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047aa:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <prvAddNewTaskToReadyList+0xbc>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d207      	bcs.n	80047c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80047b8:	4b0b      	ldr	r3, [pc, #44]	; (80047e8 <prvAddNewTaskToReadyList+0xd0>)
 80047ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	f3bf 8f4f 	dsb	sy
 80047c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047c8:	bf00      	nop
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	2000043c 	.word	0x2000043c
 80047d4:	2000033c 	.word	0x2000033c
 80047d8:	20000448 	.word	0x20000448
 80047dc:	20000458 	.word	0x20000458
 80047e0:	20000444 	.word	0x20000444
 80047e4:	20000340 	.word	0x20000340
 80047e8:	e000ed04 	.word	0xe000ed04

080047ec <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80047f4:	f001 f80e 	bl	8005814 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d102      	bne.n	8004804 <vTaskDelete+0x18>
 80047fe:	4b39      	ldr	r3, [pc, #228]	; (80048e4 <vTaskDelete+0xf8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	e000      	b.n	8004806 <vTaskDelete+0x1a>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	3304      	adds	r3, #4
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff f983 	bl	8003b18 <uxListRemove>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d115      	bne.n	8004844 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481c:	4932      	ldr	r1, [pc, #200]	; (80048e8 <vTaskDelete+0xfc>)
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	440b      	add	r3, r1
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10a      	bne.n	8004844 <vTaskDelete+0x58>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	2201      	movs	r2, #1
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	43da      	mvns	r2, r3
 800483a:	4b2c      	ldr	r3, [pc, #176]	; (80048ec <vTaskDelete+0x100>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4013      	ands	r3, r2
 8004840:	4a2a      	ldr	r2, [pc, #168]	; (80048ec <vTaskDelete+0x100>)
 8004842:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004848:	2b00      	cmp	r3, #0
 800484a:	d004      	beq.n	8004856 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	3318      	adds	r3, #24
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff f961 	bl	8003b18 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8004856:	4b26      	ldr	r3, [pc, #152]	; (80048f0 <vTaskDelete+0x104>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3301      	adds	r3, #1
 800485c:	4a24      	ldr	r2, [pc, #144]	; (80048f0 <vTaskDelete+0x104>)
 800485e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004860:	4b20      	ldr	r3, [pc, #128]	; (80048e4 <vTaskDelete+0xf8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	429a      	cmp	r2, r3
 8004868:	d10b      	bne.n	8004882 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	3304      	adds	r3, #4
 800486e:	4619      	mov	r1, r3
 8004870:	4820      	ldr	r0, [pc, #128]	; (80048f4 <vTaskDelete+0x108>)
 8004872:	f7ff f8f4 	bl	8003a5e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8004876:	4b20      	ldr	r3, [pc, #128]	; (80048f8 <vTaskDelete+0x10c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3301      	adds	r3, #1
 800487c:	4a1e      	ldr	r2, [pc, #120]	; (80048f8 <vTaskDelete+0x10c>)
 800487e:	6013      	str	r3, [r2, #0]
 8004880:	e009      	b.n	8004896 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8004882:	4b1e      	ldr	r3, [pc, #120]	; (80048fc <vTaskDelete+0x110>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3b01      	subs	r3, #1
 8004888:	4a1c      	ldr	r2, [pc, #112]	; (80048fc <vTaskDelete+0x110>)
 800488a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 fc1f 	bl	80050d0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8004892:	f000 fc4d 	bl	8005130 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8004896:	f000 ffed 	bl	8005874 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800489a:	4b19      	ldr	r3, [pc, #100]	; (8004900 <vTaskDelete+0x114>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d01b      	beq.n	80048da <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80048a2:	4b10      	ldr	r3, [pc, #64]	; (80048e4 <vTaskDelete+0xf8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d116      	bne.n	80048da <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80048ac:	4b15      	ldr	r3, [pc, #84]	; (8004904 <vTaskDelete+0x118>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00a      	beq.n	80048ca <vTaskDelete+0xde>
	__asm volatile
 80048b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	60bb      	str	r3, [r7, #8]
}
 80048c6:	bf00      	nop
 80048c8:	e7fe      	b.n	80048c8 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80048ca:	4b0f      	ldr	r3, [pc, #60]	; (8004908 <vTaskDelete+0x11c>)
 80048cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80048da:	bf00      	nop
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	2000033c 	.word	0x2000033c
 80048e8:	20000340 	.word	0x20000340
 80048ec:	20000444 	.word	0x20000444
 80048f0:	20000458 	.word	0x20000458
 80048f4:	20000410 	.word	0x20000410
 80048f8:	20000424 	.word	0x20000424
 80048fc:	2000043c 	.word	0x2000043c
 8004900:	20000448 	.word	0x20000448
 8004904:	20000464 	.word	0x20000464
 8004908:	e000ed04 	.word	0xe000ed04

0800490c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d017      	beq.n	800494e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800491e:	4b13      	ldr	r3, [pc, #76]	; (800496c <vTaskDelay+0x60>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <vTaskDelay+0x30>
	__asm volatile
 8004926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492a:	f383 8811 	msr	BASEPRI, r3
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	60bb      	str	r3, [r7, #8]
}
 8004938:	bf00      	nop
 800493a:	e7fe      	b.n	800493a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800493c:	f000 f87a 	bl	8004a34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004940:	2100      	movs	r1, #0
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fdd0 	bl	80054e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004948:	f000 f882 	bl	8004a50 <xTaskResumeAll>
 800494c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d107      	bne.n	8004964 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004954:	4b06      	ldr	r3, [pc, #24]	; (8004970 <vTaskDelay+0x64>)
 8004956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004964:	bf00      	nop
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20000464 	.word	0x20000464
 8004970:	e000ed04 	.word	0xe000ed04

08004974 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08a      	sub	sp, #40	; 0x28
 8004978:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800497a:	2300      	movs	r3, #0
 800497c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800497e:	2300      	movs	r3, #0
 8004980:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004982:	463a      	mov	r2, r7
 8004984:	1d39      	adds	r1, r7, #4
 8004986:	f107 0308 	add.w	r3, r7, #8
 800498a:	4618      	mov	r0, r3
 800498c:	f7fb fda6 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004990:	6839      	ldr	r1, [r7, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	9202      	str	r2, [sp, #8]
 8004998:	9301      	str	r3, [sp, #4]
 800499a:	2300      	movs	r3, #0
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	2300      	movs	r3, #0
 80049a0:	460a      	mov	r2, r1
 80049a2:	491e      	ldr	r1, [pc, #120]	; (8004a1c <vTaskStartScheduler+0xa8>)
 80049a4:	481e      	ldr	r0, [pc, #120]	; (8004a20 <vTaskStartScheduler+0xac>)
 80049a6:	f7ff fd8d 	bl	80044c4 <xTaskCreateStatic>
 80049aa:	4603      	mov	r3, r0
 80049ac:	4a1d      	ldr	r2, [pc, #116]	; (8004a24 <vTaskStartScheduler+0xb0>)
 80049ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80049b0:	4b1c      	ldr	r3, [pc, #112]	; (8004a24 <vTaskStartScheduler+0xb0>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d002      	beq.n	80049be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80049b8:	2301      	movs	r3, #1
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	e001      	b.n	80049c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80049be:	2300      	movs	r3, #0
 80049c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d116      	bne.n	80049f6 <vTaskStartScheduler+0x82>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	613b      	str	r3, [r7, #16]
}
 80049da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049dc:	4b12      	ldr	r3, [pc, #72]	; (8004a28 <vTaskStartScheduler+0xb4>)
 80049de:	f04f 32ff 	mov.w	r2, #4294967295
 80049e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049e4:	4b11      	ldr	r3, [pc, #68]	; (8004a2c <vTaskStartScheduler+0xb8>)
 80049e6:	2201      	movs	r2, #1
 80049e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049ea:	4b11      	ldr	r3, [pc, #68]	; (8004a30 <vTaskStartScheduler+0xbc>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049f0:	f000 fe6e 	bl	80056d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049f4:	e00e      	b.n	8004a14 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fc:	d10a      	bne.n	8004a14 <vTaskStartScheduler+0xa0>
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	60fb      	str	r3, [r7, #12]
}
 8004a10:	bf00      	nop
 8004a12:	e7fe      	b.n	8004a12 <vTaskStartScheduler+0x9e>
}
 8004a14:	bf00      	nop
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	080061a0 	.word	0x080061a0
 8004a20:	08004fc5 	.word	0x08004fc5
 8004a24:	20000460 	.word	0x20000460
 8004a28:	2000045c 	.word	0x2000045c
 8004a2c:	20000448 	.word	0x20000448
 8004a30:	20000440 	.word	0x20000440

08004a34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004a38:	4b04      	ldr	r3, [pc, #16]	; (8004a4c <vTaskSuspendAll+0x18>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	4a03      	ldr	r2, [pc, #12]	; (8004a4c <vTaskSuspendAll+0x18>)
 8004a40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004a42:	bf00      	nop
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	20000464 	.word	0x20000464

08004a50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a5e:	4b41      	ldr	r3, [pc, #260]	; (8004b64 <xTaskResumeAll+0x114>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10a      	bne.n	8004a7c <xTaskResumeAll+0x2c>
	__asm volatile
 8004a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	603b      	str	r3, [r7, #0]
}
 8004a78:	bf00      	nop
 8004a7a:	e7fe      	b.n	8004a7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a7c:	f000 feca 	bl	8005814 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a80:	4b38      	ldr	r3, [pc, #224]	; (8004b64 <xTaskResumeAll+0x114>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	4a37      	ldr	r2, [pc, #220]	; (8004b64 <xTaskResumeAll+0x114>)
 8004a88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a8a:	4b36      	ldr	r3, [pc, #216]	; (8004b64 <xTaskResumeAll+0x114>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d161      	bne.n	8004b56 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a92:	4b35      	ldr	r3, [pc, #212]	; (8004b68 <xTaskResumeAll+0x118>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d05d      	beq.n	8004b56 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a9a:	e02e      	b.n	8004afa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a9c:	4b33      	ldr	r3, [pc, #204]	; (8004b6c <xTaskResumeAll+0x11c>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	3318      	adds	r3, #24
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff f835 	bl	8003b18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff f830 	bl	8003b18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	2201      	movs	r2, #1
 8004abe:	409a      	lsls	r2, r3
 8004ac0:	4b2b      	ldr	r3, [pc, #172]	; (8004b70 <xTaskResumeAll+0x120>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	4a2a      	ldr	r2, [pc, #168]	; (8004b70 <xTaskResumeAll+0x120>)
 8004ac8:	6013      	str	r3, [r2, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ace:	4613      	mov	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4a27      	ldr	r2, [pc, #156]	; (8004b74 <xTaskResumeAll+0x124>)
 8004ad8:	441a      	add	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3304      	adds	r3, #4
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	f7fe ffbc 	bl	8003a5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aea:	4b23      	ldr	r3, [pc, #140]	; (8004b78 <xTaskResumeAll+0x128>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d302      	bcc.n	8004afa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004af4:	4b21      	ldr	r3, [pc, #132]	; (8004b7c <xTaskResumeAll+0x12c>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004afa:	4b1c      	ldr	r3, [pc, #112]	; (8004b6c <xTaskResumeAll+0x11c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1cc      	bne.n	8004a9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b08:	f000 fb12 	bl	8005130 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b0c:	4b1c      	ldr	r3, [pc, #112]	; (8004b80 <xTaskResumeAll+0x130>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d010      	beq.n	8004b3a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b18:	f000 f836 	bl	8004b88 <xTaskIncrementTick>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004b22:	4b16      	ldr	r3, [pc, #88]	; (8004b7c <xTaskResumeAll+0x12c>)
 8004b24:	2201      	movs	r2, #1
 8004b26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f1      	bne.n	8004b18 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004b34:	4b12      	ldr	r3, [pc, #72]	; (8004b80 <xTaskResumeAll+0x130>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b3a:	4b10      	ldr	r3, [pc, #64]	; (8004b7c <xTaskResumeAll+0x12c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d009      	beq.n	8004b56 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b42:	2301      	movs	r3, #1
 8004b44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b46:	4b0f      	ldr	r3, [pc, #60]	; (8004b84 <xTaskResumeAll+0x134>)
 8004b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b56:	f000 fe8d 	bl	8005874 <vPortExitCritical>

	return xAlreadyYielded;
 8004b5a:	68bb      	ldr	r3, [r7, #8]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	20000464 	.word	0x20000464
 8004b68:	2000043c 	.word	0x2000043c
 8004b6c:	200003fc 	.word	0x200003fc
 8004b70:	20000444 	.word	0x20000444
 8004b74:	20000340 	.word	0x20000340
 8004b78:	2000033c 	.word	0x2000033c
 8004b7c:	20000450 	.word	0x20000450
 8004b80:	2000044c 	.word	0x2000044c
 8004b84:	e000ed04 	.word	0xe000ed04

08004b88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b92:	4b4e      	ldr	r3, [pc, #312]	; (8004ccc <xTaskIncrementTick+0x144>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f040 808e 	bne.w	8004cb8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b9c:	4b4c      	ldr	r3, [pc, #304]	; (8004cd0 <xTaskIncrementTick+0x148>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ba4:	4a4a      	ldr	r2, [pc, #296]	; (8004cd0 <xTaskIncrementTick+0x148>)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d120      	bne.n	8004bf2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004bb0:	4b48      	ldr	r3, [pc, #288]	; (8004cd4 <xTaskIncrementTick+0x14c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <xTaskIncrementTick+0x48>
	__asm volatile
 8004bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	603b      	str	r3, [r7, #0]
}
 8004bcc:	bf00      	nop
 8004bce:	e7fe      	b.n	8004bce <xTaskIncrementTick+0x46>
 8004bd0:	4b40      	ldr	r3, [pc, #256]	; (8004cd4 <xTaskIncrementTick+0x14c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60fb      	str	r3, [r7, #12]
 8004bd6:	4b40      	ldr	r3, [pc, #256]	; (8004cd8 <xTaskIncrementTick+0x150>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a3e      	ldr	r2, [pc, #248]	; (8004cd4 <xTaskIncrementTick+0x14c>)
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	4a3e      	ldr	r2, [pc, #248]	; (8004cd8 <xTaskIncrementTick+0x150>)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	4b3d      	ldr	r3, [pc, #244]	; (8004cdc <xTaskIncrementTick+0x154>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3301      	adds	r3, #1
 8004bea:	4a3c      	ldr	r2, [pc, #240]	; (8004cdc <xTaskIncrementTick+0x154>)
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	f000 fa9f 	bl	8005130 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bf2:	4b3b      	ldr	r3, [pc, #236]	; (8004ce0 <xTaskIncrementTick+0x158>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d348      	bcc.n	8004c8e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bfc:	4b35      	ldr	r3, [pc, #212]	; (8004cd4 <xTaskIncrementTick+0x14c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d104      	bne.n	8004c10 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c06:	4b36      	ldr	r3, [pc, #216]	; (8004ce0 <xTaskIncrementTick+0x158>)
 8004c08:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0c:	601a      	str	r2, [r3, #0]
					break;
 8004c0e:	e03e      	b.n	8004c8e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c10:	4b30      	ldr	r3, [pc, #192]	; (8004cd4 <xTaskIncrementTick+0x14c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d203      	bcs.n	8004c30 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c28:	4a2d      	ldr	r2, [pc, #180]	; (8004ce0 <xTaskIncrementTick+0x158>)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c2e:	e02e      	b.n	8004c8e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	3304      	adds	r3, #4
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7fe ff6f 	bl	8003b18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d004      	beq.n	8004c4c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	3318      	adds	r3, #24
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fe ff66 	bl	8003b18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	2201      	movs	r2, #1
 8004c52:	409a      	lsls	r2, r3
 8004c54:	4b23      	ldr	r3, [pc, #140]	; (8004ce4 <xTaskIncrementTick+0x15c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	4a22      	ldr	r2, [pc, #136]	; (8004ce4 <xTaskIncrementTick+0x15c>)
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c62:	4613      	mov	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4a1f      	ldr	r2, [pc, #124]	; (8004ce8 <xTaskIncrementTick+0x160>)
 8004c6c:	441a      	add	r2, r3
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	3304      	adds	r3, #4
 8004c72:	4619      	mov	r1, r3
 8004c74:	4610      	mov	r0, r2
 8004c76:	f7fe fef2 	bl	8003a5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7e:	4b1b      	ldr	r3, [pc, #108]	; (8004cec <xTaskIncrementTick+0x164>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d3b9      	bcc.n	8004bfc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c8c:	e7b6      	b.n	8004bfc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c8e:	4b17      	ldr	r3, [pc, #92]	; (8004cec <xTaskIncrementTick+0x164>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c94:	4914      	ldr	r1, [pc, #80]	; (8004ce8 <xTaskIncrementTick+0x160>)
 8004c96:	4613      	mov	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d901      	bls.n	8004caa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004caa:	4b11      	ldr	r3, [pc, #68]	; (8004cf0 <xTaskIncrementTick+0x168>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d007      	beq.n	8004cc2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	e004      	b.n	8004cc2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004cb8:	4b0e      	ldr	r3, [pc, #56]	; (8004cf4 <xTaskIncrementTick+0x16c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	4a0d      	ldr	r2, [pc, #52]	; (8004cf4 <xTaskIncrementTick+0x16c>)
 8004cc0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004cc2:	697b      	ldr	r3, [r7, #20]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3718      	adds	r7, #24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	20000464 	.word	0x20000464
 8004cd0:	20000440 	.word	0x20000440
 8004cd4:	200003f4 	.word	0x200003f4
 8004cd8:	200003f8 	.word	0x200003f8
 8004cdc:	20000454 	.word	0x20000454
 8004ce0:	2000045c 	.word	0x2000045c
 8004ce4:	20000444 	.word	0x20000444
 8004ce8:	20000340 	.word	0x20000340
 8004cec:	2000033c 	.word	0x2000033c
 8004cf0:	20000450 	.word	0x20000450
 8004cf4:	2000044c 	.word	0x2000044c

08004cf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004cfe:	4b27      	ldr	r3, [pc, #156]	; (8004d9c <vTaskSwitchContext+0xa4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d06:	4b26      	ldr	r3, [pc, #152]	; (8004da0 <vTaskSwitchContext+0xa8>)
 8004d08:	2201      	movs	r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d0c:	e03f      	b.n	8004d8e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004d0e:	4b24      	ldr	r3, [pc, #144]	; (8004da0 <vTaskSwitchContext+0xa8>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d14:	4b23      	ldr	r3, [pc, #140]	; (8004da4 <vTaskSwitchContext+0xac>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	fab3 f383 	clz	r3, r3
 8004d20:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004d22:	7afb      	ldrb	r3, [r7, #11]
 8004d24:	f1c3 031f 	rsb	r3, r3, #31
 8004d28:	617b      	str	r3, [r7, #20]
 8004d2a:	491f      	ldr	r1, [pc, #124]	; (8004da8 <vTaskSwitchContext+0xb0>)
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	440b      	add	r3, r1
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10a      	bne.n	8004d54 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	607b      	str	r3, [r7, #4]
}
 8004d50:	bf00      	nop
 8004d52:	e7fe      	b.n	8004d52 <vTaskSwitchContext+0x5a>
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	4613      	mov	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4a12      	ldr	r2, [pc, #72]	; (8004da8 <vTaskSwitchContext+0xb0>)
 8004d60:	4413      	add	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	605a      	str	r2, [r3, #4]
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	3308      	adds	r3, #8
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d104      	bne.n	8004d84 <vTaskSwitchContext+0x8c>
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	605a      	str	r2, [r3, #4]
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	4a08      	ldr	r2, [pc, #32]	; (8004dac <vTaskSwitchContext+0xb4>)
 8004d8c:	6013      	str	r3, [r2, #0]
}
 8004d8e:	bf00      	nop
 8004d90:	371c      	adds	r7, #28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	20000464 	.word	0x20000464
 8004da0:	20000450 	.word	0x20000450
 8004da4:	20000444 	.word	0x20000444
 8004da8:	20000340 	.word	0x20000340
 8004dac:	2000033c 	.word	0x2000033c

08004db0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10a      	bne.n	8004dd6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	60fb      	str	r3, [r7, #12]
}
 8004dd2:	bf00      	nop
 8004dd4:	e7fe      	b.n	8004dd4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004dd6:	4b07      	ldr	r3, [pc, #28]	; (8004df4 <vTaskPlaceOnEventList+0x44>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	3318      	adds	r3, #24
 8004ddc:	4619      	mov	r1, r3
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fe fe61 	bl	8003aa6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004de4:	2101      	movs	r1, #1
 8004de6:	6838      	ldr	r0, [r7, #0]
 8004de8:	f000 fb7e 	bl	80054e8 <prvAddCurrentTaskToDelayedList>
}
 8004dec:	bf00      	nop
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	2000033c 	.word	0x2000033c

08004df8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10a      	bne.n	8004e24 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	60fb      	str	r3, [r7, #12]
}
 8004e20:	bf00      	nop
 8004e22:	e7fe      	b.n	8004e22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	3318      	adds	r3, #24
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7fe fe75 	bl	8003b18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e2e:	4b1d      	ldr	r3, [pc, #116]	; (8004ea4 <xTaskRemoveFromEventList+0xac>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d11c      	bne.n	8004e70 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	3304      	adds	r3, #4
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fe fe6c 	bl	8003b18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	2201      	movs	r2, #1
 8004e46:	409a      	lsls	r2, r3
 8004e48:	4b17      	ldr	r3, [pc, #92]	; (8004ea8 <xTaskRemoveFromEventList+0xb0>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	4a16      	ldr	r2, [pc, #88]	; (8004ea8 <xTaskRemoveFromEventList+0xb0>)
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e56:	4613      	mov	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4a13      	ldr	r2, [pc, #76]	; (8004eac <xTaskRemoveFromEventList+0xb4>)
 8004e60:	441a      	add	r2, r3
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	3304      	adds	r3, #4
 8004e66:	4619      	mov	r1, r3
 8004e68:	4610      	mov	r0, r2
 8004e6a:	f7fe fdf8 	bl	8003a5e <vListInsertEnd>
 8004e6e:	e005      	b.n	8004e7c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	3318      	adds	r3, #24
 8004e74:	4619      	mov	r1, r3
 8004e76:	480e      	ldr	r0, [pc, #56]	; (8004eb0 <xTaskRemoveFromEventList+0xb8>)
 8004e78:	f7fe fdf1 	bl	8003a5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e80:	4b0c      	ldr	r3, [pc, #48]	; (8004eb4 <xTaskRemoveFromEventList+0xbc>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d905      	bls.n	8004e96 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004e8e:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <xTaskRemoveFromEventList+0xc0>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	e001      	b.n	8004e9a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004e96:	2300      	movs	r3, #0
 8004e98:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004e9a:	697b      	ldr	r3, [r7, #20]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	20000464 	.word	0x20000464
 8004ea8:	20000444 	.word	0x20000444
 8004eac:	20000340 	.word	0x20000340
 8004eb0:	200003fc 	.word	0x200003fc
 8004eb4:	2000033c 	.word	0x2000033c
 8004eb8:	20000450 	.word	0x20000450

08004ebc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ec4:	4b06      	ldr	r3, [pc, #24]	; (8004ee0 <vTaskInternalSetTimeOutState+0x24>)
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ecc:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <vTaskInternalSetTimeOutState+0x28>)
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	605a      	str	r2, [r3, #4]
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	20000454 	.word	0x20000454
 8004ee4:	20000440 	.word	0x20000440

08004ee8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b088      	sub	sp, #32
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10a      	bne.n	8004f0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	613b      	str	r3, [r7, #16]
}
 8004f0a:	bf00      	nop
 8004f0c:	e7fe      	b.n	8004f0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10a      	bne.n	8004f2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	60fb      	str	r3, [r7, #12]
}
 8004f26:	bf00      	nop
 8004f28:	e7fe      	b.n	8004f28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004f2a:	f000 fc73 	bl	8005814 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f2e:	4b1d      	ldr	r3, [pc, #116]	; (8004fa4 <xTaskCheckForTimeOut+0xbc>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f46:	d102      	bne.n	8004f4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	61fb      	str	r3, [r7, #28]
 8004f4c:	e023      	b.n	8004f96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	4b15      	ldr	r3, [pc, #84]	; (8004fa8 <xTaskCheckForTimeOut+0xc0>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d007      	beq.n	8004f6a <xTaskCheckForTimeOut+0x82>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d302      	bcc.n	8004f6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004f64:	2301      	movs	r3, #1
 8004f66:	61fb      	str	r3, [r7, #28]
 8004f68:	e015      	b.n	8004f96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d20b      	bcs.n	8004f8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	1ad2      	subs	r2, r2, r3
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7ff ff9b 	bl	8004ebc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004f86:	2300      	movs	r3, #0
 8004f88:	61fb      	str	r3, [r7, #28]
 8004f8a:	e004      	b.n	8004f96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004f92:	2301      	movs	r3, #1
 8004f94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004f96:	f000 fc6d 	bl	8005874 <vPortExitCritical>

	return xReturn;
 8004f9a:	69fb      	ldr	r3, [r7, #28]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3720      	adds	r7, #32
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	20000440 	.word	0x20000440
 8004fa8:	20000454 	.word	0x20000454

08004fac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004fb0:	4b03      	ldr	r3, [pc, #12]	; (8004fc0 <vTaskMissedYield+0x14>)
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]
}
 8004fb6:	bf00      	nop
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	20000450 	.word	0x20000450

08004fc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004fcc:	f000 f852 	bl	8005074 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004fd0:	4b06      	ldr	r3, [pc, #24]	; (8004fec <prvIdleTask+0x28>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d9f9      	bls.n	8004fcc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004fd8:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <prvIdleTask+0x2c>)
 8004fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004fe8:	e7f0      	b.n	8004fcc <prvIdleTask+0x8>
 8004fea:	bf00      	nop
 8004fec:	20000340 	.word	0x20000340
 8004ff0:	e000ed04 	.word	0xe000ed04

08004ff4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	607b      	str	r3, [r7, #4]
 8004ffe:	e00c      	b.n	800501a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	4613      	mov	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4a12      	ldr	r2, [pc, #72]	; (8005054 <prvInitialiseTaskLists+0x60>)
 800500c:	4413      	add	r3, r2
 800500e:	4618      	mov	r0, r3
 8005010:	f7fe fcf8 	bl	8003a04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3301      	adds	r3, #1
 8005018:	607b      	str	r3, [r7, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b06      	cmp	r3, #6
 800501e:	d9ef      	bls.n	8005000 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005020:	480d      	ldr	r0, [pc, #52]	; (8005058 <prvInitialiseTaskLists+0x64>)
 8005022:	f7fe fcef 	bl	8003a04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005026:	480d      	ldr	r0, [pc, #52]	; (800505c <prvInitialiseTaskLists+0x68>)
 8005028:	f7fe fcec 	bl	8003a04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800502c:	480c      	ldr	r0, [pc, #48]	; (8005060 <prvInitialiseTaskLists+0x6c>)
 800502e:	f7fe fce9 	bl	8003a04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005032:	480c      	ldr	r0, [pc, #48]	; (8005064 <prvInitialiseTaskLists+0x70>)
 8005034:	f7fe fce6 	bl	8003a04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005038:	480b      	ldr	r0, [pc, #44]	; (8005068 <prvInitialiseTaskLists+0x74>)
 800503a:	f7fe fce3 	bl	8003a04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800503e:	4b0b      	ldr	r3, [pc, #44]	; (800506c <prvInitialiseTaskLists+0x78>)
 8005040:	4a05      	ldr	r2, [pc, #20]	; (8005058 <prvInitialiseTaskLists+0x64>)
 8005042:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005044:	4b0a      	ldr	r3, [pc, #40]	; (8005070 <prvInitialiseTaskLists+0x7c>)
 8005046:	4a05      	ldr	r2, [pc, #20]	; (800505c <prvInitialiseTaskLists+0x68>)
 8005048:	601a      	str	r2, [r3, #0]
}
 800504a:	bf00      	nop
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20000340 	.word	0x20000340
 8005058:	200003cc 	.word	0x200003cc
 800505c:	200003e0 	.word	0x200003e0
 8005060:	200003fc 	.word	0x200003fc
 8005064:	20000410 	.word	0x20000410
 8005068:	20000428 	.word	0x20000428
 800506c:	200003f4 	.word	0x200003f4
 8005070:	200003f8 	.word	0x200003f8

08005074 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800507a:	e019      	b.n	80050b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800507c:	f000 fbca 	bl	8005814 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005080:	4b10      	ldr	r3, [pc, #64]	; (80050c4 <prvCheckTasksWaitingTermination+0x50>)
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3304      	adds	r3, #4
 800508c:	4618      	mov	r0, r3
 800508e:	f7fe fd43 	bl	8003b18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005092:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <prvCheckTasksWaitingTermination+0x54>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3b01      	subs	r3, #1
 8005098:	4a0b      	ldr	r2, [pc, #44]	; (80050c8 <prvCheckTasksWaitingTermination+0x54>)
 800509a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800509c:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <prvCheckTasksWaitingTermination+0x58>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3b01      	subs	r3, #1
 80050a2:	4a0a      	ldr	r2, [pc, #40]	; (80050cc <prvCheckTasksWaitingTermination+0x58>)
 80050a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80050a6:	f000 fbe5 	bl	8005874 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f810 	bl	80050d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050b0:	4b06      	ldr	r3, [pc, #24]	; (80050cc <prvCheckTasksWaitingTermination+0x58>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e1      	bne.n	800507c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80050b8:	bf00      	nop
 80050ba:	bf00      	nop
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	20000410 	.word	0x20000410
 80050c8:	2000043c 	.word	0x2000043c
 80050cc:	20000424 	.word	0x20000424

080050d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d108      	bne.n	80050f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fd82 	bl	8005bf0 <vPortFree>
				vPortFree( pxTCB );
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fd7f 	bl	8005bf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80050f2:	e018      	b.n	8005126 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d103      	bne.n	8005106 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fd76 	bl	8005bf0 <vPortFree>
	}
 8005104:	e00f      	b.n	8005126 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800510c:	2b02      	cmp	r3, #2
 800510e:	d00a      	beq.n	8005126 <prvDeleteTCB+0x56>
	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	60fb      	str	r3, [r7, #12]
}
 8005122:	bf00      	nop
 8005124:	e7fe      	b.n	8005124 <prvDeleteTCB+0x54>
	}
 8005126:	bf00      	nop
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
	...

08005130 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005136:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <prvResetNextTaskUnblockTime+0x38>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d104      	bne.n	800514a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005140:	4b0a      	ldr	r3, [pc, #40]	; (800516c <prvResetNextTaskUnblockTime+0x3c>)
 8005142:	f04f 32ff 	mov.w	r2, #4294967295
 8005146:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005148:	e008      	b.n	800515c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800514a:	4b07      	ldr	r3, [pc, #28]	; (8005168 <prvResetNextTaskUnblockTime+0x38>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	4a04      	ldr	r2, [pc, #16]	; (800516c <prvResetNextTaskUnblockTime+0x3c>)
 800515a:	6013      	str	r3, [r2, #0]
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	200003f4 	.word	0x200003f4
 800516c:	2000045c 	.word	0x2000045c

08005170 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005176:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <xTaskGetSchedulerState+0x34>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d102      	bne.n	8005184 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800517e:	2301      	movs	r3, #1
 8005180:	607b      	str	r3, [r7, #4]
 8005182:	e008      	b.n	8005196 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005184:	4b08      	ldr	r3, [pc, #32]	; (80051a8 <xTaskGetSchedulerState+0x38>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d102      	bne.n	8005192 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800518c:	2302      	movs	r3, #2
 800518e:	607b      	str	r3, [r7, #4]
 8005190:	e001      	b.n	8005196 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005192:	2300      	movs	r3, #0
 8005194:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005196:	687b      	ldr	r3, [r7, #4]
	}
 8005198:	4618      	mov	r0, r3
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	20000448 	.word	0x20000448
 80051a8:	20000464 	.word	0x20000464

080051ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80051b8:	2300      	movs	r3, #0
 80051ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d05e      	beq.n	8005280 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c6:	4b31      	ldr	r3, [pc, #196]	; (800528c <xTaskPriorityInherit+0xe0>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d24e      	bcs.n	800526e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	db06      	blt.n	80051e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051d8:	4b2c      	ldr	r3, [pc, #176]	; (800528c <xTaskPriorityInherit+0xe0>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051de:	f1c3 0207 	rsb	r2, r3, #7
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	6959      	ldr	r1, [r3, #20]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4a26      	ldr	r2, [pc, #152]	; (8005290 <xTaskPriorityInherit+0xe4>)
 80051f8:	4413      	add	r3, r2
 80051fa:	4299      	cmp	r1, r3
 80051fc:	d12f      	bne.n	800525e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	3304      	adds	r3, #4
 8005202:	4618      	mov	r0, r3
 8005204:	f7fe fc88 	bl	8003b18 <uxListRemove>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10a      	bne.n	8005224 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005212:	2201      	movs	r2, #1
 8005214:	fa02 f303 	lsl.w	r3, r2, r3
 8005218:	43da      	mvns	r2, r3
 800521a:	4b1e      	ldr	r3, [pc, #120]	; (8005294 <xTaskPriorityInherit+0xe8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4013      	ands	r3, r2
 8005220:	4a1c      	ldr	r2, [pc, #112]	; (8005294 <xTaskPriorityInherit+0xe8>)
 8005222:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005224:	4b19      	ldr	r3, [pc, #100]	; (800528c <xTaskPriorityInherit+0xe0>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005232:	2201      	movs	r2, #1
 8005234:	409a      	lsls	r2, r3
 8005236:	4b17      	ldr	r3, [pc, #92]	; (8005294 <xTaskPriorityInherit+0xe8>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4313      	orrs	r3, r2
 800523c:	4a15      	ldr	r2, [pc, #84]	; (8005294 <xTaskPriorityInherit+0xe8>)
 800523e:	6013      	str	r3, [r2, #0]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005244:	4613      	mov	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4a10      	ldr	r2, [pc, #64]	; (8005290 <xTaskPriorityInherit+0xe4>)
 800524e:	441a      	add	r2, r3
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	3304      	adds	r3, #4
 8005254:	4619      	mov	r1, r3
 8005256:	4610      	mov	r0, r2
 8005258:	f7fe fc01 	bl	8003a5e <vListInsertEnd>
 800525c:	e004      	b.n	8005268 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800525e:	4b0b      	ldr	r3, [pc, #44]	; (800528c <xTaskPriorityInherit+0xe0>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005268:	2301      	movs	r3, #1
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	e008      	b.n	8005280 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005272:	4b06      	ldr	r3, [pc, #24]	; (800528c <xTaskPriorityInherit+0xe0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005278:	429a      	cmp	r2, r3
 800527a:	d201      	bcs.n	8005280 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800527c:	2301      	movs	r3, #1
 800527e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005280:	68fb      	ldr	r3, [r7, #12]
	}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	2000033c 	.word	0x2000033c
 8005290:	20000340 	.word	0x20000340
 8005294:	20000444 	.word	0x20000444

08005298 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80052a4:	2300      	movs	r3, #0
 80052a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d06e      	beq.n	800538c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80052ae:	4b3a      	ldr	r3, [pc, #232]	; (8005398 <xTaskPriorityDisinherit+0x100>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d00a      	beq.n	80052ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	60fb      	str	r3, [r7, #12]
}
 80052ca:	bf00      	nop
 80052cc:	e7fe      	b.n	80052cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10a      	bne.n	80052ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	60bb      	str	r3, [r7, #8]
}
 80052e8:	bf00      	nop
 80052ea:	e7fe      	b.n	80052ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052f0:	1e5a      	subs	r2, r3, #1
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fe:	429a      	cmp	r2, r3
 8005300:	d044      	beq.n	800538c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005306:	2b00      	cmp	r3, #0
 8005308:	d140      	bne.n	800538c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	3304      	adds	r3, #4
 800530e:	4618      	mov	r0, r3
 8005310:	f7fe fc02 	bl	8003b18 <uxListRemove>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d115      	bne.n	8005346 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531e:	491f      	ldr	r1, [pc, #124]	; (800539c <xTaskPriorityDisinherit+0x104>)
 8005320:	4613      	mov	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	440b      	add	r3, r1
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10a      	bne.n	8005346 <xTaskPriorityDisinherit+0xae>
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	2201      	movs	r2, #1
 8005336:	fa02 f303 	lsl.w	r3, r2, r3
 800533a:	43da      	mvns	r2, r3
 800533c:	4b18      	ldr	r3, [pc, #96]	; (80053a0 <xTaskPriorityDisinherit+0x108>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4013      	ands	r3, r2
 8005342:	4a17      	ldr	r2, [pc, #92]	; (80053a0 <xTaskPriorityDisinherit+0x108>)
 8005344:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005352:	f1c3 0207 	rsb	r2, r3, #7
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	2201      	movs	r2, #1
 8005360:	409a      	lsls	r2, r3
 8005362:	4b0f      	ldr	r3, [pc, #60]	; (80053a0 <xTaskPriorityDisinherit+0x108>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4313      	orrs	r3, r2
 8005368:	4a0d      	ldr	r2, [pc, #52]	; (80053a0 <xTaskPriorityDisinherit+0x108>)
 800536a:	6013      	str	r3, [r2, #0]
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4a08      	ldr	r2, [pc, #32]	; (800539c <xTaskPriorityDisinherit+0x104>)
 800537a:	441a      	add	r2, r3
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	3304      	adds	r3, #4
 8005380:	4619      	mov	r1, r3
 8005382:	4610      	mov	r0, r2
 8005384:	f7fe fb6b 	bl	8003a5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005388:	2301      	movs	r3, #1
 800538a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800538c:	697b      	ldr	r3, [r7, #20]
	}
 800538e:	4618      	mov	r0, r3
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	2000033c 	.word	0x2000033c
 800539c:	20000340 	.word	0x20000340
 80053a0:	20000444 	.word	0x20000444

080053a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80053b2:	2301      	movs	r3, #1
 80053b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d077      	beq.n	80054ac <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10a      	bne.n	80053da <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80053c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	60fb      	str	r3, [r7, #12]
}
 80053d6:	bf00      	nop
 80053d8:	e7fe      	b.n	80053d8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d902      	bls.n	80053ea <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	61fb      	str	r3, [r7, #28]
 80053e8:	e002      	b.n	80053f0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ee:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f4:	69fa      	ldr	r2, [r7, #28]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d058      	beq.n	80054ac <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	429a      	cmp	r2, r3
 8005402:	d153      	bne.n	80054ac <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005404:	4b2b      	ldr	r3, [pc, #172]	; (80054b4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	429a      	cmp	r2, r3
 800540c:	d10a      	bne.n	8005424 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	60bb      	str	r3, [r7, #8]
}
 8005420:	bf00      	nop
 8005422:	e7fe      	b.n	8005422 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	69fa      	ldr	r2, [r7, #28]
 800542e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	2b00      	cmp	r3, #0
 8005436:	db04      	blt.n	8005442 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f1c3 0207 	rsb	r2, r3, #7
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	6959      	ldr	r1, [r3, #20]
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4a19      	ldr	r2, [pc, #100]	; (80054b8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005452:	4413      	add	r3, r2
 8005454:	4299      	cmp	r1, r3
 8005456:	d129      	bne.n	80054ac <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	3304      	adds	r3, #4
 800545c:	4618      	mov	r0, r3
 800545e:	f7fe fb5b 	bl	8003b18 <uxListRemove>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10a      	bne.n	800547e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546c:	2201      	movs	r2, #1
 800546e:	fa02 f303 	lsl.w	r3, r2, r3
 8005472:	43da      	mvns	r2, r3
 8005474:	4b11      	ldr	r3, [pc, #68]	; (80054bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4013      	ands	r3, r2
 800547a:	4a10      	ldr	r2, [pc, #64]	; (80054bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800547c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005482:	2201      	movs	r2, #1
 8005484:	409a      	lsls	r2, r3
 8005486:	4b0d      	ldr	r3, [pc, #52]	; (80054bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4313      	orrs	r3, r2
 800548c:	4a0b      	ldr	r2, [pc, #44]	; (80054bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005494:	4613      	mov	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4a06      	ldr	r2, [pc, #24]	; (80054b8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800549e:	441a      	add	r2, r3
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	3304      	adds	r3, #4
 80054a4:	4619      	mov	r1, r3
 80054a6:	4610      	mov	r0, r2
 80054a8:	f7fe fad9 	bl	8003a5e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054ac:	bf00      	nop
 80054ae:	3720      	adds	r7, #32
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	2000033c 	.word	0x2000033c
 80054b8:	20000340 	.word	0x20000340
 80054bc:	20000444 	.word	0x20000444

080054c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80054c4:	4b07      	ldr	r3, [pc, #28]	; (80054e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d004      	beq.n	80054d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80054cc:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054d2:	3201      	adds	r2, #1
 80054d4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80054d6:	4b03      	ldr	r3, [pc, #12]	; (80054e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80054d8:	681b      	ldr	r3, [r3, #0]
	}
 80054da:	4618      	mov	r0, r3
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	2000033c 	.word	0x2000033c

080054e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80054f2:	4b29      	ldr	r3, [pc, #164]	; (8005598 <prvAddCurrentTaskToDelayedList+0xb0>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054f8:	4b28      	ldr	r3, [pc, #160]	; (800559c <prvAddCurrentTaskToDelayedList+0xb4>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3304      	adds	r3, #4
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fe fb0a 	bl	8003b18 <uxListRemove>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10b      	bne.n	8005522 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800550a:	4b24      	ldr	r3, [pc, #144]	; (800559c <prvAddCurrentTaskToDelayedList+0xb4>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005510:	2201      	movs	r2, #1
 8005512:	fa02 f303 	lsl.w	r3, r2, r3
 8005516:	43da      	mvns	r2, r3
 8005518:	4b21      	ldr	r3, [pc, #132]	; (80055a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4013      	ands	r3, r2
 800551e:	4a20      	ldr	r2, [pc, #128]	; (80055a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005520:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005528:	d10a      	bne.n	8005540 <prvAddCurrentTaskToDelayedList+0x58>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d007      	beq.n	8005540 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005530:	4b1a      	ldr	r3, [pc, #104]	; (800559c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3304      	adds	r3, #4
 8005536:	4619      	mov	r1, r3
 8005538:	481a      	ldr	r0, [pc, #104]	; (80055a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800553a:	f7fe fa90 	bl	8003a5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800553e:	e026      	b.n	800558e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4413      	add	r3, r2
 8005546:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005548:	4b14      	ldr	r3, [pc, #80]	; (800559c <prvAddCurrentTaskToDelayedList+0xb4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	429a      	cmp	r2, r3
 8005556:	d209      	bcs.n	800556c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005558:	4b13      	ldr	r3, [pc, #76]	; (80055a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	4b0f      	ldr	r3, [pc, #60]	; (800559c <prvAddCurrentTaskToDelayedList+0xb4>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	3304      	adds	r3, #4
 8005562:	4619      	mov	r1, r3
 8005564:	4610      	mov	r0, r2
 8005566:	f7fe fa9e 	bl	8003aa6 <vListInsert>
}
 800556a:	e010      	b.n	800558e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800556c:	4b0f      	ldr	r3, [pc, #60]	; (80055ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	4b0a      	ldr	r3, [pc, #40]	; (800559c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	3304      	adds	r3, #4
 8005576:	4619      	mov	r1, r3
 8005578:	4610      	mov	r0, r2
 800557a:	f7fe fa94 	bl	8003aa6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800557e:	4b0c      	ldr	r3, [pc, #48]	; (80055b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	429a      	cmp	r2, r3
 8005586:	d202      	bcs.n	800558e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005588:	4a09      	ldr	r2, [pc, #36]	; (80055b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	6013      	str	r3, [r2, #0]
}
 800558e:	bf00      	nop
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	20000440 	.word	0x20000440
 800559c:	2000033c 	.word	0x2000033c
 80055a0:	20000444 	.word	0x20000444
 80055a4:	20000428 	.word	0x20000428
 80055a8:	200003f8 	.word	0x200003f8
 80055ac:	200003f4 	.word	0x200003f4
 80055b0:	2000045c 	.word	0x2000045c

080055b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	3b04      	subs	r3, #4
 80055c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3b04      	subs	r3, #4
 80055d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f023 0201 	bic.w	r2, r3, #1
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	3b04      	subs	r3, #4
 80055e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80055e4:	4a0c      	ldr	r2, [pc, #48]	; (8005618 <pxPortInitialiseStack+0x64>)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3b14      	subs	r3, #20
 80055ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3b04      	subs	r3, #4
 80055fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f06f 0202 	mvn.w	r2, #2
 8005602:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	3b20      	subs	r3, #32
 8005608:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800560a:	68fb      	ldr	r3, [r7, #12]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	0800561d 	.word	0x0800561d

0800561c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005622:	2300      	movs	r3, #0
 8005624:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005626:	4b12      	ldr	r3, [pc, #72]	; (8005670 <prvTaskExitError+0x54>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562e:	d00a      	beq.n	8005646 <prvTaskExitError+0x2a>
	__asm volatile
 8005630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005634:	f383 8811 	msr	BASEPRI, r3
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	60fb      	str	r3, [r7, #12]
}
 8005642:	bf00      	nop
 8005644:	e7fe      	b.n	8005644 <prvTaskExitError+0x28>
	__asm volatile
 8005646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564a:	f383 8811 	msr	BASEPRI, r3
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f3bf 8f4f 	dsb	sy
 8005656:	60bb      	str	r3, [r7, #8]
}
 8005658:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800565a:	bf00      	nop
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0fc      	beq.n	800565c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005662:	bf00      	nop
 8005664:	bf00      	nop
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	20000018 	.word	0x20000018
	...

08005680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005680:	4b07      	ldr	r3, [pc, #28]	; (80056a0 <pxCurrentTCBConst2>)
 8005682:	6819      	ldr	r1, [r3, #0]
 8005684:	6808      	ldr	r0, [r1, #0]
 8005686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800568a:	f380 8809 	msr	PSP, r0
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f04f 0000 	mov.w	r0, #0
 8005696:	f380 8811 	msr	BASEPRI, r0
 800569a:	4770      	bx	lr
 800569c:	f3af 8000 	nop.w

080056a0 <pxCurrentTCBConst2>:
 80056a0:	2000033c 	.word	0x2000033c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80056a4:	bf00      	nop
 80056a6:	bf00      	nop

080056a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80056a8:	4808      	ldr	r0, [pc, #32]	; (80056cc <prvPortStartFirstTask+0x24>)
 80056aa:	6800      	ldr	r0, [r0, #0]
 80056ac:	6800      	ldr	r0, [r0, #0]
 80056ae:	f380 8808 	msr	MSP, r0
 80056b2:	f04f 0000 	mov.w	r0, #0
 80056b6:	f380 8814 	msr	CONTROL, r0
 80056ba:	b662      	cpsie	i
 80056bc:	b661      	cpsie	f
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	df00      	svc	0
 80056c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80056ca:	bf00      	nop
 80056cc:	e000ed08 	.word	0xe000ed08

080056d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80056d6:	4b46      	ldr	r3, [pc, #280]	; (80057f0 <xPortStartScheduler+0x120>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a46      	ldr	r2, [pc, #280]	; (80057f4 <xPortStartScheduler+0x124>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d10a      	bne.n	80056f6 <xPortStartScheduler+0x26>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	613b      	str	r3, [r7, #16]
}
 80056f2:	bf00      	nop
 80056f4:	e7fe      	b.n	80056f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80056f6:	4b3e      	ldr	r3, [pc, #248]	; (80057f0 <xPortStartScheduler+0x120>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a3f      	ldr	r2, [pc, #252]	; (80057f8 <xPortStartScheduler+0x128>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d10a      	bne.n	8005716 <xPortStartScheduler+0x46>
	__asm volatile
 8005700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	60fb      	str	r3, [r7, #12]
}
 8005712:	bf00      	nop
 8005714:	e7fe      	b.n	8005714 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005716:	4b39      	ldr	r3, [pc, #228]	; (80057fc <xPortStartScheduler+0x12c>)
 8005718:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	b2db      	uxtb	r3, r3
 8005720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	22ff      	movs	r2, #255	; 0xff
 8005726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	b2db      	uxtb	r3, r3
 800572e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005730:	78fb      	ldrb	r3, [r7, #3]
 8005732:	b2db      	uxtb	r3, r3
 8005734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005738:	b2da      	uxtb	r2, r3
 800573a:	4b31      	ldr	r3, [pc, #196]	; (8005800 <xPortStartScheduler+0x130>)
 800573c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800573e:	4b31      	ldr	r3, [pc, #196]	; (8005804 <xPortStartScheduler+0x134>)
 8005740:	2207      	movs	r2, #7
 8005742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005744:	e009      	b.n	800575a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005746:	4b2f      	ldr	r3, [pc, #188]	; (8005804 <xPortStartScheduler+0x134>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3b01      	subs	r3, #1
 800574c:	4a2d      	ldr	r2, [pc, #180]	; (8005804 <xPortStartScheduler+0x134>)
 800574e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005750:	78fb      	ldrb	r3, [r7, #3]
 8005752:	b2db      	uxtb	r3, r3
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	b2db      	uxtb	r3, r3
 8005758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800575a:	78fb      	ldrb	r3, [r7, #3]
 800575c:	b2db      	uxtb	r3, r3
 800575e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005762:	2b80      	cmp	r3, #128	; 0x80
 8005764:	d0ef      	beq.n	8005746 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005766:	4b27      	ldr	r3, [pc, #156]	; (8005804 <xPortStartScheduler+0x134>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f1c3 0307 	rsb	r3, r3, #7
 800576e:	2b04      	cmp	r3, #4
 8005770:	d00a      	beq.n	8005788 <xPortStartScheduler+0xb8>
	__asm volatile
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	60bb      	str	r3, [r7, #8]
}
 8005784:	bf00      	nop
 8005786:	e7fe      	b.n	8005786 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005788:	4b1e      	ldr	r3, [pc, #120]	; (8005804 <xPortStartScheduler+0x134>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	021b      	lsls	r3, r3, #8
 800578e:	4a1d      	ldr	r2, [pc, #116]	; (8005804 <xPortStartScheduler+0x134>)
 8005790:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005792:	4b1c      	ldr	r3, [pc, #112]	; (8005804 <xPortStartScheduler+0x134>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800579a:	4a1a      	ldr	r2, [pc, #104]	; (8005804 <xPortStartScheduler+0x134>)
 800579c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80057a6:	4b18      	ldr	r3, [pc, #96]	; (8005808 <xPortStartScheduler+0x138>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a17      	ldr	r2, [pc, #92]	; (8005808 <xPortStartScheduler+0x138>)
 80057ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80057b2:	4b15      	ldr	r3, [pc, #84]	; (8005808 <xPortStartScheduler+0x138>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a14      	ldr	r2, [pc, #80]	; (8005808 <xPortStartScheduler+0x138>)
 80057b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80057bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80057be:	f000 f8dd 	bl	800597c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80057c2:	4b12      	ldr	r3, [pc, #72]	; (800580c <xPortStartScheduler+0x13c>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80057c8:	f000 f8fc 	bl	80059c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80057cc:	4b10      	ldr	r3, [pc, #64]	; (8005810 <xPortStartScheduler+0x140>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a0f      	ldr	r2, [pc, #60]	; (8005810 <xPortStartScheduler+0x140>)
 80057d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80057d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80057d8:	f7ff ff66 	bl	80056a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80057dc:	f7ff fa8c 	bl	8004cf8 <vTaskSwitchContext>
	prvTaskExitError();
 80057e0:	f7ff ff1c 	bl	800561c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	e000ed00 	.word	0xe000ed00
 80057f4:	410fc271 	.word	0x410fc271
 80057f8:	410fc270 	.word	0x410fc270
 80057fc:	e000e400 	.word	0xe000e400
 8005800:	20000468 	.word	0x20000468
 8005804:	2000046c 	.word	0x2000046c
 8005808:	e000ed20 	.word	0xe000ed20
 800580c:	20000018 	.word	0x20000018
 8005810:	e000ef34 	.word	0xe000ef34

08005814 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
	__asm volatile
 800581a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	607b      	str	r3, [r7, #4]
}
 800582c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800582e:	4b0f      	ldr	r3, [pc, #60]	; (800586c <vPortEnterCritical+0x58>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3301      	adds	r3, #1
 8005834:	4a0d      	ldr	r2, [pc, #52]	; (800586c <vPortEnterCritical+0x58>)
 8005836:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005838:	4b0c      	ldr	r3, [pc, #48]	; (800586c <vPortEnterCritical+0x58>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d10f      	bne.n	8005860 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005840:	4b0b      	ldr	r3, [pc, #44]	; (8005870 <vPortEnterCritical+0x5c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00a      	beq.n	8005860 <vPortEnterCritical+0x4c>
	__asm volatile
 800584a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584e:	f383 8811 	msr	BASEPRI, r3
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	603b      	str	r3, [r7, #0]
}
 800585c:	bf00      	nop
 800585e:	e7fe      	b.n	800585e <vPortEnterCritical+0x4a>
	}
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	20000018 	.word	0x20000018
 8005870:	e000ed04 	.word	0xe000ed04

08005874 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800587a:	4b12      	ldr	r3, [pc, #72]	; (80058c4 <vPortExitCritical+0x50>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10a      	bne.n	8005898 <vPortExitCritical+0x24>
	__asm volatile
 8005882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	607b      	str	r3, [r7, #4]
}
 8005894:	bf00      	nop
 8005896:	e7fe      	b.n	8005896 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005898:	4b0a      	ldr	r3, [pc, #40]	; (80058c4 <vPortExitCritical+0x50>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	3b01      	subs	r3, #1
 800589e:	4a09      	ldr	r2, [pc, #36]	; (80058c4 <vPortExitCritical+0x50>)
 80058a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80058a2:	4b08      	ldr	r3, [pc, #32]	; (80058c4 <vPortExitCritical+0x50>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d105      	bne.n	80058b6 <vPortExitCritical+0x42>
 80058aa:	2300      	movs	r3, #0
 80058ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	f383 8811 	msr	BASEPRI, r3
}
 80058b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80058b6:	bf00      	nop
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	20000018 	.word	0x20000018
	...

080058d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80058d0:	f3ef 8009 	mrs	r0, PSP
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	4b15      	ldr	r3, [pc, #84]	; (8005930 <pxCurrentTCBConst>)
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	f01e 0f10 	tst.w	lr, #16
 80058e0:	bf08      	it	eq
 80058e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80058e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ea:	6010      	str	r0, [r2, #0]
 80058ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80058f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80058f4:	f380 8811 	msr	BASEPRI, r0
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f7ff f9fa 	bl	8004cf8 <vTaskSwitchContext>
 8005904:	f04f 0000 	mov.w	r0, #0
 8005908:	f380 8811 	msr	BASEPRI, r0
 800590c:	bc09      	pop	{r0, r3}
 800590e:	6819      	ldr	r1, [r3, #0]
 8005910:	6808      	ldr	r0, [r1, #0]
 8005912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005916:	f01e 0f10 	tst.w	lr, #16
 800591a:	bf08      	it	eq
 800591c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005920:	f380 8809 	msr	PSP, r0
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	f3af 8000 	nop.w

08005930 <pxCurrentTCBConst>:
 8005930:	2000033c 	.word	0x2000033c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005934:	bf00      	nop
 8005936:	bf00      	nop

08005938 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	607b      	str	r3, [r7, #4]
}
 8005950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005952:	f7ff f919 	bl	8004b88 <xTaskIncrementTick>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800595c:	4b06      	ldr	r3, [pc, #24]	; (8005978 <SysTick_Handler+0x40>)
 800595e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	2300      	movs	r3, #0
 8005966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	f383 8811 	msr	BASEPRI, r3
}
 800596e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005970:	bf00      	nop
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	e000ed04 	.word	0xe000ed04

0800597c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005980:	4b0b      	ldr	r3, [pc, #44]	; (80059b0 <vPortSetupTimerInterrupt+0x34>)
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005986:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <vPortSetupTimerInterrupt+0x38>)
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800598c:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <vPortSetupTimerInterrupt+0x3c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a0a      	ldr	r2, [pc, #40]	; (80059bc <vPortSetupTimerInterrupt+0x40>)
 8005992:	fba2 2303 	umull	r2, r3, r2, r3
 8005996:	099b      	lsrs	r3, r3, #6
 8005998:	4a09      	ldr	r2, [pc, #36]	; (80059c0 <vPortSetupTimerInterrupt+0x44>)
 800599a:	3b01      	subs	r3, #1
 800599c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800599e:	4b04      	ldr	r3, [pc, #16]	; (80059b0 <vPortSetupTimerInterrupt+0x34>)
 80059a0:	2207      	movs	r2, #7
 80059a2:	601a      	str	r2, [r3, #0]
}
 80059a4:	bf00      	nop
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	e000e010 	.word	0xe000e010
 80059b4:	e000e018 	.word	0xe000e018
 80059b8:	2000000c 	.word	0x2000000c
 80059bc:	10624dd3 	.word	0x10624dd3
 80059c0:	e000e014 	.word	0xe000e014

080059c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80059c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80059d4 <vPortEnableVFP+0x10>
 80059c8:	6801      	ldr	r1, [r0, #0]
 80059ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80059ce:	6001      	str	r1, [r0, #0]
 80059d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80059d2:	bf00      	nop
 80059d4:	e000ed88 	.word	0xe000ed88

080059d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80059de:	f3ef 8305 	mrs	r3, IPSR
 80059e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2b0f      	cmp	r3, #15
 80059e8:	d914      	bls.n	8005a14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80059ea:	4a17      	ldr	r2, [pc, #92]	; (8005a48 <vPortValidateInterruptPriority+0x70>)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80059f4:	4b15      	ldr	r3, [pc, #84]	; (8005a4c <vPortValidateInterruptPriority+0x74>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	7afa      	ldrb	r2, [r7, #11]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d20a      	bcs.n	8005a14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	607b      	str	r3, [r7, #4]
}
 8005a10:	bf00      	nop
 8005a12:	e7fe      	b.n	8005a12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005a14:	4b0e      	ldr	r3, [pc, #56]	; (8005a50 <vPortValidateInterruptPriority+0x78>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005a1c:	4b0d      	ldr	r3, [pc, #52]	; (8005a54 <vPortValidateInterruptPriority+0x7c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d90a      	bls.n	8005a3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	603b      	str	r3, [r7, #0]
}
 8005a36:	bf00      	nop
 8005a38:	e7fe      	b.n	8005a38 <vPortValidateInterruptPriority+0x60>
	}
 8005a3a:	bf00      	nop
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	e000e3f0 	.word	0xe000e3f0
 8005a4c:	20000468 	.word	0x20000468
 8005a50:	e000ed0c 	.word	0xe000ed0c
 8005a54:	2000046c 	.word	0x2000046c

08005a58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08a      	sub	sp, #40	; 0x28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a60:	2300      	movs	r3, #0
 8005a62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a64:	f7fe ffe6 	bl	8004a34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a68:	4b5b      	ldr	r3, [pc, #364]	; (8005bd8 <pvPortMalloc+0x180>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a70:	f000 f920 	bl	8005cb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a74:	4b59      	ldr	r3, [pc, #356]	; (8005bdc <pvPortMalloc+0x184>)
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f040 8093 	bne.w	8005ba8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d01d      	beq.n	8005ac4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005a88:	2208      	movs	r2, #8
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d014      	beq.n	8005ac4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f023 0307 	bic.w	r3, r3, #7
 8005aa0:	3308      	adds	r3, #8
 8005aa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <pvPortMalloc+0x6c>
	__asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	617b      	str	r3, [r7, #20]
}
 8005ac0:	bf00      	nop
 8005ac2:	e7fe      	b.n	8005ac2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d06e      	beq.n	8005ba8 <pvPortMalloc+0x150>
 8005aca:	4b45      	ldr	r3, [pc, #276]	; (8005be0 <pvPortMalloc+0x188>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d869      	bhi.n	8005ba8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ad4:	4b43      	ldr	r3, [pc, #268]	; (8005be4 <pvPortMalloc+0x18c>)
 8005ad6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ad8:	4b42      	ldr	r3, [pc, #264]	; (8005be4 <pvPortMalloc+0x18c>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ade:	e004      	b.n	8005aea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d903      	bls.n	8005afc <pvPortMalloc+0xa4>
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1f1      	bne.n	8005ae0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005afc:	4b36      	ldr	r3, [pc, #216]	; (8005bd8 <pvPortMalloc+0x180>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d050      	beq.n	8005ba8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2208      	movs	r2, #8
 8005b0c:	4413      	add	r3, r2
 8005b0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	1ad2      	subs	r2, r2, r3
 8005b20:	2308      	movs	r3, #8
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d91f      	bls.n	8005b68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	f003 0307 	and.w	r3, r3, #7
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00a      	beq.n	8005b50 <pvPortMalloc+0xf8>
	__asm volatile
 8005b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3e:	f383 8811 	msr	BASEPRI, r3
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	613b      	str	r3, [r7, #16]
}
 8005b4c:	bf00      	nop
 8005b4e:	e7fe      	b.n	8005b4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	1ad2      	subs	r2, r2, r3
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b62:	69b8      	ldr	r0, [r7, #24]
 8005b64:	f000 f908 	bl	8005d78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b68:	4b1d      	ldr	r3, [pc, #116]	; (8005be0 <pvPortMalloc+0x188>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	4a1b      	ldr	r2, [pc, #108]	; (8005be0 <pvPortMalloc+0x188>)
 8005b74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b76:	4b1a      	ldr	r3, [pc, #104]	; (8005be0 <pvPortMalloc+0x188>)
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	4b1b      	ldr	r3, [pc, #108]	; (8005be8 <pvPortMalloc+0x190>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d203      	bcs.n	8005b8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b82:	4b17      	ldr	r3, [pc, #92]	; (8005be0 <pvPortMalloc+0x188>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a18      	ldr	r2, [pc, #96]	; (8005be8 <pvPortMalloc+0x190>)
 8005b88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	4b13      	ldr	r3, [pc, #76]	; (8005bdc <pvPortMalloc+0x184>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	431a      	orrs	r2, r3
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005b9e:	4b13      	ldr	r3, [pc, #76]	; (8005bec <pvPortMalloc+0x194>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	4a11      	ldr	r2, [pc, #68]	; (8005bec <pvPortMalloc+0x194>)
 8005ba6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ba8:	f7fe ff52 	bl	8004a50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <pvPortMalloc+0x174>
	__asm volatile
 8005bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bba:	f383 8811 	msr	BASEPRI, r3
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	f3bf 8f4f 	dsb	sy
 8005bc6:	60fb      	str	r3, [r7, #12]
}
 8005bc8:	bf00      	nop
 8005bca:	e7fe      	b.n	8005bca <pvPortMalloc+0x172>
	return pvReturn;
 8005bcc:	69fb      	ldr	r3, [r7, #28]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3728      	adds	r7, #40	; 0x28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20004078 	.word	0x20004078
 8005bdc:	2000408c 	.word	0x2000408c
 8005be0:	2000407c 	.word	0x2000407c
 8005be4:	20004070 	.word	0x20004070
 8005be8:	20004080 	.word	0x20004080
 8005bec:	20004084 	.word	0x20004084

08005bf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d04d      	beq.n	8005c9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c02:	2308      	movs	r3, #8
 8005c04:	425b      	negs	r3, r3
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	4413      	add	r3, r2
 8005c0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	4b24      	ldr	r3, [pc, #144]	; (8005ca8 <vPortFree+0xb8>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10a      	bne.n	8005c34 <vPortFree+0x44>
	__asm volatile
 8005c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c22:	f383 8811 	msr	BASEPRI, r3
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	60fb      	str	r3, [r7, #12]
}
 8005c30:	bf00      	nop
 8005c32:	e7fe      	b.n	8005c32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00a      	beq.n	8005c52 <vPortFree+0x62>
	__asm volatile
 8005c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	60bb      	str	r3, [r7, #8]
}
 8005c4e:	bf00      	nop
 8005c50:	e7fe      	b.n	8005c50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	4b14      	ldr	r3, [pc, #80]	; (8005ca8 <vPortFree+0xb8>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d01e      	beq.n	8005c9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d11a      	bne.n	8005c9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	4b0e      	ldr	r3, [pc, #56]	; (8005ca8 <vPortFree+0xb8>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	43db      	mvns	r3, r3
 8005c72:	401a      	ands	r2, r3
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c78:	f7fe fedc 	bl	8004a34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	685a      	ldr	r2, [r3, #4]
 8005c80:	4b0a      	ldr	r3, [pc, #40]	; (8005cac <vPortFree+0xbc>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4413      	add	r3, r2
 8005c86:	4a09      	ldr	r2, [pc, #36]	; (8005cac <vPortFree+0xbc>)
 8005c88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c8a:	6938      	ldr	r0, [r7, #16]
 8005c8c:	f000 f874 	bl	8005d78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c90:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <vPortFree+0xc0>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	3301      	adds	r3, #1
 8005c96:	4a06      	ldr	r2, [pc, #24]	; (8005cb0 <vPortFree+0xc0>)
 8005c98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005c9a:	f7fe fed9 	bl	8004a50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c9e:	bf00      	nop
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	2000408c 	.word	0x2000408c
 8005cac:	2000407c 	.word	0x2000407c
 8005cb0:	20004088 	.word	0x20004088

08005cb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005cba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005cbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005cc0:	4b27      	ldr	r3, [pc, #156]	; (8005d60 <prvHeapInit+0xac>)
 8005cc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f003 0307 	and.w	r3, r3, #7
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00c      	beq.n	8005ce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	3307      	adds	r3, #7
 8005cd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0307 	bic.w	r3, r3, #7
 8005cda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	4a1f      	ldr	r2, [pc, #124]	; (8005d60 <prvHeapInit+0xac>)
 8005ce4:	4413      	add	r3, r2
 8005ce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cec:	4a1d      	ldr	r2, [pc, #116]	; (8005d64 <prvHeapInit+0xb0>)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cf2:	4b1c      	ldr	r3, [pc, #112]	; (8005d64 <prvHeapInit+0xb0>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d00:	2208      	movs	r2, #8
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	1a9b      	subs	r3, r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f023 0307 	bic.w	r3, r3, #7
 8005d0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4a15      	ldr	r2, [pc, #84]	; (8005d68 <prvHeapInit+0xb4>)
 8005d14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d16:	4b14      	ldr	r3, [pc, #80]	; (8005d68 <prvHeapInit+0xb4>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d1e:	4b12      	ldr	r3, [pc, #72]	; (8005d68 <prvHeapInit+0xb4>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	1ad2      	subs	r2, r2, r3
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d34:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <prvHeapInit+0xb4>)
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	4a0a      	ldr	r2, [pc, #40]	; (8005d6c <prvHeapInit+0xb8>)
 8005d42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	4a09      	ldr	r2, [pc, #36]	; (8005d70 <prvHeapInit+0xbc>)
 8005d4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d4c:	4b09      	ldr	r3, [pc, #36]	; (8005d74 <prvHeapInit+0xc0>)
 8005d4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d52:	601a      	str	r2, [r3, #0]
}
 8005d54:	bf00      	nop
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	20000470 	.word	0x20000470
 8005d64:	20004070 	.word	0x20004070
 8005d68:	20004078 	.word	0x20004078
 8005d6c:	20004080 	.word	0x20004080
 8005d70:	2000407c 	.word	0x2000407c
 8005d74:	2000408c 	.word	0x2000408c

08005d78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d80:	4b28      	ldr	r3, [pc, #160]	; (8005e24 <prvInsertBlockIntoFreeList+0xac>)
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	e002      	b.n	8005d8c <prvInsertBlockIntoFreeList+0x14>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d8f7      	bhi.n	8005d86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	4413      	add	r3, r2
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d108      	bne.n	8005dba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	441a      	add	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	441a      	add	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d118      	bne.n	8005e00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	4b15      	ldr	r3, [pc, #84]	; (8005e28 <prvInsertBlockIntoFreeList+0xb0>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d00d      	beq.n	8005df6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	441a      	add	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	e008      	b.n	8005e08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005df6:	4b0c      	ldr	r3, [pc, #48]	; (8005e28 <prvInsertBlockIntoFreeList+0xb0>)
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	601a      	str	r2, [r3, #0]
 8005dfe:	e003      	b.n	8005e08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d002      	beq.n	8005e16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e16:	bf00      	nop
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	20004070 	.word	0x20004070
 8005e28:	20004078 	.word	0x20004078

08005e2c <__itoa>:
 8005e2c:	1e93      	subs	r3, r2, #2
 8005e2e:	2b22      	cmp	r3, #34	; 0x22
 8005e30:	b510      	push	{r4, lr}
 8005e32:	460c      	mov	r4, r1
 8005e34:	d904      	bls.n	8005e40 <__itoa+0x14>
 8005e36:	2300      	movs	r3, #0
 8005e38:	700b      	strb	r3, [r1, #0]
 8005e3a:	461c      	mov	r4, r3
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	bd10      	pop	{r4, pc}
 8005e40:	2a0a      	cmp	r2, #10
 8005e42:	d109      	bne.n	8005e58 <__itoa+0x2c>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	da07      	bge.n	8005e58 <__itoa+0x2c>
 8005e48:	232d      	movs	r3, #45	; 0x2d
 8005e4a:	700b      	strb	r3, [r1, #0]
 8005e4c:	4240      	negs	r0, r0
 8005e4e:	2101      	movs	r1, #1
 8005e50:	4421      	add	r1, r4
 8005e52:	f000 f805 	bl	8005e60 <__utoa>
 8005e56:	e7f1      	b.n	8005e3c <__itoa+0x10>
 8005e58:	2100      	movs	r1, #0
 8005e5a:	e7f9      	b.n	8005e50 <__itoa+0x24>

08005e5c <itoa>:
 8005e5c:	f7ff bfe6 	b.w	8005e2c <__itoa>

08005e60 <__utoa>:
 8005e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e62:	4c1f      	ldr	r4, [pc, #124]	; (8005ee0 <__utoa+0x80>)
 8005e64:	b08b      	sub	sp, #44	; 0x2c
 8005e66:	4605      	mov	r5, r0
 8005e68:	460b      	mov	r3, r1
 8005e6a:	466e      	mov	r6, sp
 8005e6c:	f104 0c20 	add.w	ip, r4, #32
 8005e70:	6820      	ldr	r0, [r4, #0]
 8005e72:	6861      	ldr	r1, [r4, #4]
 8005e74:	4637      	mov	r7, r6
 8005e76:	c703      	stmia	r7!, {r0, r1}
 8005e78:	3408      	adds	r4, #8
 8005e7a:	4564      	cmp	r4, ip
 8005e7c:	463e      	mov	r6, r7
 8005e7e:	d1f7      	bne.n	8005e70 <__utoa+0x10>
 8005e80:	7921      	ldrb	r1, [r4, #4]
 8005e82:	7139      	strb	r1, [r7, #4]
 8005e84:	1e91      	subs	r1, r2, #2
 8005e86:	6820      	ldr	r0, [r4, #0]
 8005e88:	6038      	str	r0, [r7, #0]
 8005e8a:	2922      	cmp	r1, #34	; 0x22
 8005e8c:	f04f 0100 	mov.w	r1, #0
 8005e90:	d904      	bls.n	8005e9c <__utoa+0x3c>
 8005e92:	7019      	strb	r1, [r3, #0]
 8005e94:	460b      	mov	r3, r1
 8005e96:	4618      	mov	r0, r3
 8005e98:	b00b      	add	sp, #44	; 0x2c
 8005e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e9c:	1e58      	subs	r0, r3, #1
 8005e9e:	4684      	mov	ip, r0
 8005ea0:	fbb5 f7f2 	udiv	r7, r5, r2
 8005ea4:	fb02 5617 	mls	r6, r2, r7, r5
 8005ea8:	3628      	adds	r6, #40	; 0x28
 8005eaa:	446e      	add	r6, sp
 8005eac:	460c      	mov	r4, r1
 8005eae:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005eb2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005eb6:	462e      	mov	r6, r5
 8005eb8:	42b2      	cmp	r2, r6
 8005eba:	f101 0101 	add.w	r1, r1, #1
 8005ebe:	463d      	mov	r5, r7
 8005ec0:	d9ee      	bls.n	8005ea0 <__utoa+0x40>
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	545a      	strb	r2, [r3, r1]
 8005ec6:	1919      	adds	r1, r3, r4
 8005ec8:	1aa5      	subs	r5, r4, r2
 8005eca:	42aa      	cmp	r2, r5
 8005ecc:	dae3      	bge.n	8005e96 <__utoa+0x36>
 8005ece:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005ed2:	780e      	ldrb	r6, [r1, #0]
 8005ed4:	7006      	strb	r6, [r0, #0]
 8005ed6:	3201      	adds	r2, #1
 8005ed8:	f801 5901 	strb.w	r5, [r1], #-1
 8005edc:	e7f4      	b.n	8005ec8 <__utoa+0x68>
 8005ede:	bf00      	nop
 8005ee0:	080061c0 	.word	0x080061c0

08005ee4 <memset>:
 8005ee4:	4402      	add	r2, r0
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d100      	bne.n	8005eee <memset+0xa>
 8005eec:	4770      	bx	lr
 8005eee:	f803 1b01 	strb.w	r1, [r3], #1
 8005ef2:	e7f9      	b.n	8005ee8 <memset+0x4>

08005ef4 <strcat>:
 8005ef4:	b510      	push	{r4, lr}
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	7814      	ldrb	r4, [r2, #0]
 8005efa:	4613      	mov	r3, r2
 8005efc:	3201      	adds	r2, #1
 8005efe:	2c00      	cmp	r4, #0
 8005f00:	d1fa      	bne.n	8005ef8 <strcat+0x4>
 8005f02:	3b01      	subs	r3, #1
 8005f04:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f08:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f0c:	2a00      	cmp	r2, #0
 8005f0e:	d1f9      	bne.n	8005f04 <strcat+0x10>
 8005f10:	bd10      	pop	{r4, pc}
	...

08005f14 <__libc_init_array>:
 8005f14:	b570      	push	{r4, r5, r6, lr}
 8005f16:	4d0d      	ldr	r5, [pc, #52]	; (8005f4c <__libc_init_array+0x38>)
 8005f18:	4c0d      	ldr	r4, [pc, #52]	; (8005f50 <__libc_init_array+0x3c>)
 8005f1a:	1b64      	subs	r4, r4, r5
 8005f1c:	10a4      	asrs	r4, r4, #2
 8005f1e:	2600      	movs	r6, #0
 8005f20:	42a6      	cmp	r6, r4
 8005f22:	d109      	bne.n	8005f38 <__libc_init_array+0x24>
 8005f24:	4d0b      	ldr	r5, [pc, #44]	; (8005f54 <__libc_init_array+0x40>)
 8005f26:	4c0c      	ldr	r4, [pc, #48]	; (8005f58 <__libc_init_array+0x44>)
 8005f28:	f000 f826 	bl	8005f78 <_init>
 8005f2c:	1b64      	subs	r4, r4, r5
 8005f2e:	10a4      	asrs	r4, r4, #2
 8005f30:	2600      	movs	r6, #0
 8005f32:	42a6      	cmp	r6, r4
 8005f34:	d105      	bne.n	8005f42 <__libc_init_array+0x2e>
 8005f36:	bd70      	pop	{r4, r5, r6, pc}
 8005f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f3c:	4798      	blx	r3
 8005f3e:	3601      	adds	r6, #1
 8005f40:	e7ee      	b.n	8005f20 <__libc_init_array+0xc>
 8005f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f46:	4798      	blx	r3
 8005f48:	3601      	adds	r6, #1
 8005f4a:	e7f2      	b.n	8005f32 <__libc_init_array+0x1e>
 8005f4c:	080061f0 	.word	0x080061f0
 8005f50:	080061f0 	.word	0x080061f0
 8005f54:	080061f0 	.word	0x080061f0
 8005f58:	080061f4 	.word	0x080061f4

08005f5c <memcpy>:
 8005f5c:	440a      	add	r2, r1
 8005f5e:	4291      	cmp	r1, r2
 8005f60:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f64:	d100      	bne.n	8005f68 <memcpy+0xc>
 8005f66:	4770      	bx	lr
 8005f68:	b510      	push	{r4, lr}
 8005f6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f72:	4291      	cmp	r1, r2
 8005f74:	d1f9      	bne.n	8005f6a <memcpy+0xe>
 8005f76:	bd10      	pop	{r4, pc}

08005f78 <_init>:
 8005f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7a:	bf00      	nop
 8005f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f7e:	bc08      	pop	{r3}
 8005f80:	469e      	mov	lr, r3
 8005f82:	4770      	bx	lr

08005f84 <_fini>:
 8005f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f86:	bf00      	nop
 8005f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f8a:	bc08      	pop	{r3}
 8005f8c:	469e      	mov	lr, r3
 8005f8e:	4770      	bx	lr
