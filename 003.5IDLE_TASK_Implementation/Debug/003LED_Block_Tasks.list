
003LED_Block_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08007b84  08007b84  00017b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d14  08007d14  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08007d14  08007d14  00017d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d1c  08007d1c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d1c  08007d1c  00017d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d20  08007d20  00017d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          000144d8  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200144f4  200144f4  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000173fa  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000356f  00000000  00000000  00037489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001570  00000000  00000000  0003a9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010a2  00000000  00000000  0003bf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024034  00000000  00000000  0003d00a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019015  00000000  00000000  0006103e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000da724  00000000  00000000  0007a053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005a4c  00000000  00000000  00154778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000d7  00000000  00000000  0015a1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b6c 	.word	0x08007b6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08007b6c 	.word	0x08007b6c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f20 	.word	0x20012f20

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b970 	b.w	800055c <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9e08      	ldr	r6, [sp, #32]
 800029a:	460d      	mov	r5, r1
 800029c:	4604      	mov	r4, r0
 800029e:	460f      	mov	r7, r1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d14a      	bne.n	800033a <__udivmoddi4+0xa6>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4694      	mov	ip, r2
 80002a8:	d965      	bls.n	8000376 <__udivmoddi4+0xe2>
 80002aa:	fab2 f382 	clz	r3, r2
 80002ae:	b143      	cbz	r3, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002b4:	f1c3 0220 	rsb	r2, r3, #32
 80002b8:	409f      	lsls	r7, r3
 80002ba:	fa20 f202 	lsr.w	r2, r0, r2
 80002be:	4317      	orrs	r7, r2
 80002c0:	409c      	lsls	r4, r3
 80002c2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002c6:	fa1f f58c 	uxth.w	r5, ip
 80002ca:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ce:	0c22      	lsrs	r2, r4, #16
 80002d0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002d4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002d8:	fb01 f005 	mul.w	r0, r1, r5
 80002dc:	4290      	cmp	r0, r2
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x62>
 80002e0:	eb1c 0202 	adds.w	r2, ip, r2
 80002e4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002e8:	f080 811c 	bcs.w	8000524 <__udivmoddi4+0x290>
 80002ec:	4290      	cmp	r0, r2
 80002ee:	f240 8119 	bls.w	8000524 <__udivmoddi4+0x290>
 80002f2:	3902      	subs	r1, #2
 80002f4:	4462      	add	r2, ip
 80002f6:	1a12      	subs	r2, r2, r0
 80002f8:	b2a4      	uxth	r4, r4
 80002fa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002fe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000302:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000306:	fb00 f505 	mul.w	r5, r0, r5
 800030a:	42a5      	cmp	r5, r4
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x90>
 800030e:	eb1c 0404 	adds.w	r4, ip, r4
 8000312:	f100 32ff 	add.w	r2, r0, #4294967295
 8000316:	f080 8107 	bcs.w	8000528 <__udivmoddi4+0x294>
 800031a:	42a5      	cmp	r5, r4
 800031c:	f240 8104 	bls.w	8000528 <__udivmoddi4+0x294>
 8000320:	4464      	add	r4, ip
 8000322:	3802      	subs	r0, #2
 8000324:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000328:	1b64      	subs	r4, r4, r5
 800032a:	2100      	movs	r1, #0
 800032c:	b11e      	cbz	r6, 8000336 <__udivmoddi4+0xa2>
 800032e:	40dc      	lsrs	r4, r3
 8000330:	2300      	movs	r3, #0
 8000332:	e9c6 4300 	strd	r4, r3, [r6]
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0xbc>
 800033e:	2e00      	cmp	r6, #0
 8000340:	f000 80ed 	beq.w	800051e <__udivmoddi4+0x28a>
 8000344:	2100      	movs	r1, #0
 8000346:	e9c6 0500 	strd	r0, r5, [r6]
 800034a:	4608      	mov	r0, r1
 800034c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000350:	fab3 f183 	clz	r1, r3
 8000354:	2900      	cmp	r1, #0
 8000356:	d149      	bne.n	80003ec <__udivmoddi4+0x158>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d302      	bcc.n	8000362 <__udivmoddi4+0xce>
 800035c:	4282      	cmp	r2, r0
 800035e:	f200 80f8 	bhi.w	8000552 <__udivmoddi4+0x2be>
 8000362:	1a84      	subs	r4, r0, r2
 8000364:	eb65 0203 	sbc.w	r2, r5, r3
 8000368:	2001      	movs	r0, #1
 800036a:	4617      	mov	r7, r2
 800036c:	2e00      	cmp	r6, #0
 800036e:	d0e2      	beq.n	8000336 <__udivmoddi4+0xa2>
 8000370:	e9c6 4700 	strd	r4, r7, [r6]
 8000374:	e7df      	b.n	8000336 <__udivmoddi4+0xa2>
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xe6>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f382 	clz	r3, r2
 800037e:	2b00      	cmp	r3, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x210>
 8000384:	1a8a      	subs	r2, r1, r2
 8000386:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	2101      	movs	r1, #1
 8000390:	fbb2 f5f7 	udiv	r5, r2, r7
 8000394:	fb07 2015 	mls	r0, r7, r5, r2
 8000398:	0c22      	lsrs	r2, r4, #16
 800039a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800039e:	fb0e f005 	mul.w	r0, lr, r5
 80003a2:	4290      	cmp	r0, r2
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x124>
 80003a6:	eb1c 0202 	adds.w	r2, ip, r2
 80003aa:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x122>
 80003b0:	4290      	cmp	r0, r2
 80003b2:	f200 80cb 	bhi.w	800054c <__udivmoddi4+0x2b8>
 80003b6:	4645      	mov	r5, r8
 80003b8:	1a12      	subs	r2, r2, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb2 f0f7 	udiv	r0, r2, r7
 80003c0:	fb07 2210 	mls	r2, r7, r0, r2
 80003c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003c8:	fb0e fe00 	mul.w	lr, lr, r0
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x14e>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003d8:	d202      	bcs.n	80003e0 <__udivmoddi4+0x14c>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f200 80bb 	bhi.w	8000556 <__udivmoddi4+0x2c2>
 80003e0:	4610      	mov	r0, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ea:	e79f      	b.n	800032c <__udivmoddi4+0x98>
 80003ec:	f1c1 0720 	rsb	r7, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003fa:	fa05 f401 	lsl.w	r4, r5, r1
 80003fe:	fa20 f307 	lsr.w	r3, r0, r7
 8000402:	40fd      	lsrs	r5, r7
 8000404:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fbb5 f8f9 	udiv	r8, r5, r9
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	fb09 5518 	mls	r5, r9, r8, r5
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800041c:	fb08 f50e 	mul.w	r5, r8, lr
 8000420:	42a5      	cmp	r5, r4
 8000422:	fa02 f201 	lsl.w	r2, r2, r1
 8000426:	fa00 f001 	lsl.w	r0, r0, r1
 800042a:	d90b      	bls.n	8000444 <__udivmoddi4+0x1b0>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f108 3aff 	add.w	sl, r8, #4294967295
 8000434:	f080 8088 	bcs.w	8000548 <__udivmoddi4+0x2b4>
 8000438:	42a5      	cmp	r5, r4
 800043a:	f240 8085 	bls.w	8000548 <__udivmoddi4+0x2b4>
 800043e:	f1a8 0802 	sub.w	r8, r8, #2
 8000442:	4464      	add	r4, ip
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	b29d      	uxth	r5, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000454:	fb03 fe0e 	mul.w	lr, r3, lr
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1da>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f103 35ff 	add.w	r5, r3, #4294967295
 8000464:	d26c      	bcs.n	8000540 <__udivmoddi4+0x2ac>
 8000466:	45a6      	cmp	lr, r4
 8000468:	d96a      	bls.n	8000540 <__udivmoddi4+0x2ac>
 800046a:	3b02      	subs	r3, #2
 800046c:	4464      	add	r4, ip
 800046e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000472:	fba3 9502 	umull	r9, r5, r3, r2
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	42ac      	cmp	r4, r5
 800047c:	46c8      	mov	r8, r9
 800047e:	46ae      	mov	lr, r5
 8000480:	d356      	bcc.n	8000530 <__udivmoddi4+0x29c>
 8000482:	d053      	beq.n	800052c <__udivmoddi4+0x298>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x208>
 8000486:	ebb0 0208 	subs.w	r2, r0, r8
 800048a:	eb64 040e 	sbc.w	r4, r4, lr
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40ca      	lsrs	r2, r1
 8000494:	40cc      	lsrs	r4, r1
 8000496:	4317      	orrs	r7, r2
 8000498:	e9c6 7400 	strd	r7, r4, [r6]
 800049c:	4618      	mov	r0, r3
 800049e:	2100      	movs	r1, #0
 80004a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a4:	f1c3 0120 	rsb	r1, r3, #32
 80004a8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ac:	fa20 f201 	lsr.w	r2, r0, r1
 80004b0:	fa25 f101 	lsr.w	r1, r5, r1
 80004b4:	409d      	lsls	r5, r3
 80004b6:	432a      	orrs	r2, r5
 80004b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004bc:	fa1f fe8c 	uxth.w	lr, ip
 80004c0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004c4:	fb07 1510 	mls	r5, r7, r0, r1
 80004c8:	0c11      	lsrs	r1, r2, #16
 80004ca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ce:	fb00 f50e 	mul.w	r5, r0, lr
 80004d2:	428d      	cmp	r5, r1
 80004d4:	fa04 f403 	lsl.w	r4, r4, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x258>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e2:	d22f      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 80004e4:	428d      	cmp	r5, r1
 80004e6:	d92d      	bls.n	8000544 <__udivmoddi4+0x2b0>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4461      	add	r1, ip
 80004ec:	1b49      	subs	r1, r1, r5
 80004ee:	b292      	uxth	r2, r2
 80004f0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004f4:	fb07 1115 	mls	r1, r7, r5, r1
 80004f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fc:	fb05 f10e 	mul.w	r1, r5, lr
 8000500:	4291      	cmp	r1, r2
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x282>
 8000504:	eb1c 0202 	adds.w	r2, ip, r2
 8000508:	f105 38ff 	add.w	r8, r5, #4294967295
 800050c:	d216      	bcs.n	800053c <__udivmoddi4+0x2a8>
 800050e:	4291      	cmp	r1, r2
 8000510:	d914      	bls.n	800053c <__udivmoddi4+0x2a8>
 8000512:	3d02      	subs	r5, #2
 8000514:	4462      	add	r2, ip
 8000516:	1a52      	subs	r2, r2, r1
 8000518:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800051c:	e738      	b.n	8000390 <__udivmoddi4+0xfc>
 800051e:	4631      	mov	r1, r6
 8000520:	4630      	mov	r0, r6
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xa2>
 8000524:	4639      	mov	r1, r7
 8000526:	e6e6      	b.n	80002f6 <__udivmoddi4+0x62>
 8000528:	4610      	mov	r0, r2
 800052a:	e6fb      	b.n	8000324 <__udivmoddi4+0x90>
 800052c:	4548      	cmp	r0, r9
 800052e:	d2a9      	bcs.n	8000484 <__udivmoddi4+0x1f0>
 8000530:	ebb9 0802 	subs.w	r8, r9, r2
 8000534:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000538:	3b01      	subs	r3, #1
 800053a:	e7a3      	b.n	8000484 <__udivmoddi4+0x1f0>
 800053c:	4645      	mov	r5, r8
 800053e:	e7ea      	b.n	8000516 <__udivmoddi4+0x282>
 8000540:	462b      	mov	r3, r5
 8000542:	e794      	b.n	800046e <__udivmoddi4+0x1da>
 8000544:	4640      	mov	r0, r8
 8000546:	e7d1      	b.n	80004ec <__udivmoddi4+0x258>
 8000548:	46d0      	mov	r8, sl
 800054a:	e77b      	b.n	8000444 <__udivmoddi4+0x1b0>
 800054c:	3d02      	subs	r5, #2
 800054e:	4462      	add	r2, ip
 8000550:	e732      	b.n	80003b8 <__udivmoddi4+0x124>
 8000552:	4608      	mov	r0, r1
 8000554:	e70a      	b.n	800036c <__udivmoddi4+0xd8>
 8000556:	4464      	add	r4, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e742      	b.n	80003e2 <__udivmoddi4+0x14e>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	; 0x28
 8000564:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fc17 	bl	8000d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f86f 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f901 	bl	8000774 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000572:	f000 f8d5 	bl	8000720 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 8000576:	482d      	ldr	r0, [pc, #180]	; (800062c <main+0xcc>)
 8000578:	f005 f852 	bl	8005620 <SEGGER_UART_init>

//  Cyclic count enable
  DWT_CTRL |=(1<<0);
 800057c:	4b2c      	ldr	r3, [pc, #176]	; (8000630 <main+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a2b      	ldr	r2, [pc, #172]	; (8000630 <main+0xd0>)
 8000582:	f043 0301 	orr.w	r3, r3, #1
 8000586:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000588:	f004 fe74 	bl	8005274 <SEGGER_SYSVIEW_Conf>

//  task creation
  status = xTaskCreate(led_green_handler,
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	2302      	movs	r3, #2
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2300      	movs	r3, #0
 8000598:	22c8      	movs	r2, #200	; 0xc8
 800059a:	4926      	ldr	r1, [pc, #152]	; (8000634 <main+0xd4>)
 800059c:	4826      	ldr	r0, [pc, #152]	; (8000638 <main+0xd8>)
 800059e:	f002 ff2d 	bl	80033fc <xTaskCreate>
 80005a2:	61f8      	str	r0, [r7, #28]
              NULL,
              2,
              &task1_handle
                            );

  configASSERT(status == pdPASS);
 80005a4:	69fb      	ldr	r3, [r7, #28]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d00a      	beq.n	80005c0 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ae:	f383 8811 	msr	BASEPRI, r3
 80005b2:	f3bf 8f6f 	isb	sy
 80005b6:	f3bf 8f4f 	dsb	sy
 80005ba:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005bc:	bf00      	nop
 80005be:	e7fe      	b.n	80005be <main+0x5e>

  status = xTaskCreate(led_red_handler,
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2302      	movs	r3, #2
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	22c8      	movs	r2, #200	; 0xc8
 80005ce:	491b      	ldr	r1, [pc, #108]	; (800063c <main+0xdc>)
 80005d0:	481b      	ldr	r0, [pc, #108]	; (8000640 <main+0xe0>)
 80005d2:	f002 ff13 	bl	80033fc <xTaskCreate>
 80005d6:	61f8      	str	r0, [r7, #28]
                NULL,
                2,
                &task2_handle
                              );

    configASSERT(status == pdPASS);
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d00a      	beq.n	80005f4 <main+0x94>
        __asm volatile
 80005de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e2:	f383 8811 	msr	BASEPRI, r3
 80005e6:	f3bf 8f6f 	isb	sy
 80005ea:	f3bf 8f4f 	dsb	sy
 80005ee:	617b      	str	r3, [r7, #20]
    }
 80005f0:	bf00      	nop
 80005f2:	e7fe      	b.n	80005f2 <main+0x92>

  status = xTaskCreate(led_orange_handler,
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	2302      	movs	r3, #2
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2300      	movs	r3, #0
 80005fe:	22c8      	movs	r2, #200	; 0xc8
 8000600:	4910      	ldr	r1, [pc, #64]	; (8000644 <main+0xe4>)
 8000602:	4811      	ldr	r0, [pc, #68]	; (8000648 <main+0xe8>)
 8000604:	f002 fefa 	bl	80033fc <xTaskCreate>
 8000608:	61f8      	str	r0, [r7, #28]
                NULL,
                2,
                &task3_handle
                              );

    configASSERT(status == pdPASS);
 800060a:	69fb      	ldr	r3, [r7, #28]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d00a      	beq.n	8000626 <main+0xc6>
        __asm volatile
 8000610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000614:	f383 8811 	msr	BASEPRI, r3
 8000618:	f3bf 8f6f 	isb	sy
 800061c:	f3bf 8f4f 	dsb	sy
 8000620:	613b      	str	r3, [r7, #16]
    }
 8000622:	bf00      	nop
 8000624:	e7fe      	b.n	8000624 <main+0xc4>

//    Start the scheduler

    vTaskStartScheduler();
 8000626:	f003 f8cf 	bl	80037c8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062a:	e7fe      	b.n	800062a <main+0xca>
 800062c:	0007a120 	.word	0x0007a120
 8000630:	e0001000 	.word	0xe0001000
 8000634:	08007b84 	.word	0x08007b84
 8000638:	08000a31 	.word	0x08000a31
 800063c:	08007b94 	.word	0x08007b94
 8000640:	08000aa1 	.word	0x08000aa1
 8000644:	08007ba4 	.word	0x08007ba4
 8000648:	08000a69 	.word	0x08000a69

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2230      	movs	r2, #48	; 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f007 fa4c 	bl	8007af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	4b28      	ldr	r3, [pc, #160]	; (8000718 <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	4a27      	ldr	r2, [pc, #156]	; (8000718 <SystemClock_Config+0xcc>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	; 0x40
 8000680:	4b25      	ldr	r3, [pc, #148]	; (8000718 <SystemClock_Config+0xcc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b22      	ldr	r3, [pc, #136]	; (800071c <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a21      	ldr	r2, [pc, #132]	; (800071c <SystemClock_Config+0xd0>)
 8000696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <SystemClock_Config+0xd0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2310      	movs	r3, #16
 80006b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006bc:	2308      	movs	r3, #8
 80006be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006c0:	2332      	movs	r3, #50	; 0x32
 80006c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c4:	2304      	movs	r3, #4
 80006c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c8:	2307      	movs	r3, #7
 80006ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fe55 	bl	8001380 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006dc:	f000 fa0e 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2302      	movs	r3, #2
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 f8b6 	bl	8001870 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070a:	f000 f9f7 	bl	8000afc <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	; 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000726:	4a12      	ldr	r2, [pc, #72]	; (8000770 <MX_USART2_UART_Init+0x50>)
 8000728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000758:	f001 fd7e 	bl	8002258 <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000762:	f000 f9cb 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000038 	.word	0x20000038
 8000770:	40004400 	.word	0x40004400

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08c      	sub	sp, #48	; 0x30
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
 800078e:	4ba2      	ldr	r3, [pc, #648]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4aa1      	ldr	r2, [pc, #644]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 8000794:	f043 0310 	orr.w	r3, r3, #16
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b9f      	ldr	r3, [pc, #636]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0310 	and.w	r3, r3, #16
 80007a2:	61bb      	str	r3, [r7, #24]
 80007a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	4b9b      	ldr	r3, [pc, #620]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a9a      	ldr	r2, [pc, #616]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b98      	ldr	r3, [pc, #608]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b94      	ldr	r3, [pc, #592]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a93      	ldr	r2, [pc, #588]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b91      	ldr	r3, [pc, #580]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b8d      	ldr	r3, [pc, #564]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a8c      	ldr	r2, [pc, #560]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b8a      	ldr	r3, [pc, #552]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b86      	ldr	r3, [pc, #536]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a85      	ldr	r2, [pc, #532]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b83      	ldr	r3, [pc, #524]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b7f      	ldr	r3, [pc, #508]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a7e      	ldr	r2, [pc, #504]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 8000820:	f043 0308 	orr.w	r3, r3, #8
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b7c      	ldr	r3, [pc, #496]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0308 	and.w	r3, r3, #8
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2108      	movs	r1, #8
 8000836:	4879      	ldr	r0, [pc, #484]	; (8000a1c <MX_GPIO_Init+0x2a8>)
 8000838:	f000 fd6e 	bl	8001318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2101      	movs	r1, #1
 8000840:	4877      	ldr	r0, [pc, #476]	; (8000a20 <MX_GPIO_Init+0x2ac>)
 8000842:	f000 fd69 	bl	8001318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000846:	2200      	movs	r2, #0
 8000848:	f24f 0110 	movw	r1, #61456	; 0xf010
 800084c:	4875      	ldr	r0, [pc, #468]	; (8000a24 <MX_GPIO_Init+0x2b0>)
 800084e:	f000 fd63 	bl	8001318 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000852:	2308      	movs	r3, #8
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	486c      	ldr	r0, [pc, #432]	; (8000a1c <MX_GPIO_Init+0x2a8>)
 800086a:	f000 fbb9 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800086e:	2301      	movs	r3, #1
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	4866      	ldr	r0, [pc, #408]	; (8000a20 <MX_GPIO_Init+0x2ac>)
 8000886:	f000 fbab 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800088a:	2308      	movs	r3, #8
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089a:	2305      	movs	r3, #5
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	485e      	ldr	r0, [pc, #376]	; (8000a20 <MX_GPIO_Init+0x2ac>)
 80008a6:	f000 fb9b 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	485a      	ldr	r0, [pc, #360]	; (8000a28 <MX_GPIO_Init+0x2b4>)
 80008c0:	f000 fb8e 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008c4:	2310      	movs	r3, #16
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d4:	2306      	movs	r3, #6
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4852      	ldr	r0, [pc, #328]	; (8000a28 <MX_GPIO_Init+0x2b4>)
 80008e0:	f000 fb7e 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008e4:	23e0      	movs	r3, #224	; 0xe0
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008f4:	2305      	movs	r3, #5
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	484a      	ldr	r0, [pc, #296]	; (8000a28 <MX_GPIO_Init+0x2b4>)
 8000900:	f000 fb6e 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000904:	2304      	movs	r3, #4
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4845      	ldr	r0, [pc, #276]	; (8000a2c <MX_GPIO_Init+0x2b8>)
 8000918:	f000 fb62 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800091c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800092e:	2305      	movs	r3, #5
 8000930:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	483c      	ldr	r0, [pc, #240]	; (8000a2c <MX_GPIO_Init+0x2b8>)
 800093a:	f000 fb51 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800093e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000942:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4833      	ldr	r0, [pc, #204]	; (8000a24 <MX_GPIO_Init+0x2b0>)
 8000958:	f000 fb42 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800095c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800096e:	2306      	movs	r3, #6
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4829      	ldr	r0, [pc, #164]	; (8000a20 <MX_GPIO_Init+0x2ac>)
 800097a:	f000 fb31 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800097e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4825      	ldr	r0, [pc, #148]	; (8000a28 <MX_GPIO_Init+0x2b4>)
 8000994:	f000 fb24 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000998:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009aa:	230a      	movs	r3, #10
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	481c      	ldr	r0, [pc, #112]	; (8000a28 <MX_GPIO_Init+0x2b4>)
 80009b6:	f000 fb13 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ba:	2320      	movs	r3, #32
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4815      	ldr	r0, [pc, #84]	; (8000a24 <MX_GPIO_Init+0x2b0>)
 80009ce:	f000 fb07 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009d2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d8:	2312      	movs	r3, #18
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e4:	2304      	movs	r3, #4
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	480f      	ldr	r0, [pc, #60]	; (8000a2c <MX_GPIO_Init+0x2b8>)
 80009f0:	f000 faf6 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009f4:	2302      	movs	r3, #2
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_GPIO_Init+0x2a8>)
 8000a0a:	f000 fae9 	bl	8000fe0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a0e:	bf00      	nop
 8000a10:	3730      	adds	r7, #48	; 0x30
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40020800 	.word	0x40020800
 8000a24:	40020c00 	.word	0x40020c00
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	40020400 	.word	0x40020400

08000a30 <led_green_handler>:

/* USER CODE BEGIN 4 */


static void led_green_handler(void* parameters)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time=xTaskGetTickCount();
 8000a38:	f002 ffd6 	bl	80039e8 <xTaskGetTickCount>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green led");
 8000a40:	4807      	ldr	r0, [pc, #28]	; (8000a60 <led_green_handler+0x30>)
 8000a42:	f006 ffab 	bl	800799c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a4a:	4806      	ldr	r0, [pc, #24]	; (8000a64 <led_green_handler+0x34>)
 8000a4c:	f000 fc7d 	bl	800134a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(1000));
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f002 fe33 	bl	80036c4 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green led");
 8000a5e:	e7ef      	b.n	8000a40 <led_green_handler+0x10>
 8000a60:	08007bb4 	.word	0x08007bb4
 8000a64:	40020c00 	.word	0x40020c00

08000a68 <led_orange_handler>:
	}
}


static void led_orange_handler(void* parameters)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time=xTaskGetTickCount();
 8000a70:	f002 ffba 	bl	80039e8 <xTaskGetTickCount>
 8000a74:	4603      	mov	r3, r0
 8000a76:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange led");
 8000a78:	4807      	ldr	r0, [pc, #28]	; (8000a98 <led_orange_handler+0x30>)
 8000a7a:	f006 ff8f 	bl	800799c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a82:	4806      	ldr	r0, [pc, #24]	; (8000a9c <led_orange_handler+0x34>)
 8000a84:	f000 fc61 	bl	800134a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(800));
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 fe17 	bl	80036c4 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange led");
 8000a96:	e7ef      	b.n	8000a78 <led_orange_handler+0x10>
 8000a98:	08007bc8 	.word	0x08007bc8
 8000a9c:	40020c00 	.word	0x40020c00

08000aa0 <led_red_handler>:
	}

}

static void led_red_handler(void* parameters)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time=xTaskGetTickCount();
 8000aa8:	f002 ff9e 	bl	80039e8 <xTaskGetTickCount>
 8000aac:	4603      	mov	r3, r0
 8000aae:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red led");
 8000ab0:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <led_red_handler+0x30>)
 8000ab2:	f006 ff73 	bl	800799c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000ab6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aba:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <led_red_handler+0x34>)
 8000abc:	f000 fc45 	bl	800134a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(400));
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f002 fdfb 	bl	80036c4 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red led");
 8000ace:	e7ef      	b.n	8000ab0 <led_red_handler+0x10>
 8000ad0:	08007bdc 	.word	0x08007bdc
 8000ad4:	40020c00 	.word	0x40020c00

08000ad8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d101      	bne.n	8000aee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aea:	f000 f977 	bl	8000ddc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40001000 	.word	0x40001000

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <Error_Handler+0x8>
	...

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	4a0f      	ldr	r2, [pc, #60]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b46:	f003 ffdf 	bl	8004b08 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a19      	ldr	r2, [pc, #100]	; (8000bdc <HAL_UART_MspInit+0x84>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d12b      	bne.n	8000bd2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <HAL_UART_MspInit+0x88>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	4a17      	ldr	r2, [pc, #92]	; (8000be0 <HAL_UART_MspInit+0x88>)
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <HAL_UART_MspInit+0x88>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <HAL_UART_MspInit+0x88>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a10      	ldr	r2, [pc, #64]	; (8000be0 <HAL_UART_MspInit+0x88>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <HAL_UART_MspInit+0x88>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bb2:	230c      	movs	r3, #12
 8000bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc2:	2307      	movs	r3, #7
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	; (8000be4 <HAL_UART_MspInit+0x8c>)
 8000bce:	f000 fa07 	bl	8000fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40004400 	.word	0x40004400
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020000 	.word	0x40020000

08000be8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08e      	sub	sp, #56	; 0x38
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	4b33      	ldr	r3, [pc, #204]	; (8000ccc <HAL_InitTick+0xe4>)
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	4a32      	ldr	r2, [pc, #200]	; (8000ccc <HAL_InitTick+0xe4>)
 8000c02:	f043 0310 	orr.w	r3, r3, #16
 8000c06:	6413      	str	r3, [r2, #64]	; 0x40
 8000c08:	4b30      	ldr	r3, [pc, #192]	; (8000ccc <HAL_InitTick+0xe4>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	f003 0310 	and.w	r3, r3, #16
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c14:	f107 0210 	add.w	r2, r7, #16
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f001 f846 	bl	8001cb0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c24:	6a3b      	ldr	r3, [r7, #32]
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d103      	bne.n	8000c36 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c2e:	f001 f817 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 8000c32:	6378      	str	r0, [r7, #52]	; 0x34
 8000c34:	e004      	b.n	8000c40 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c36:	f001 f813 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c42:	4a23      	ldr	r2, [pc, #140]	; (8000cd0 <HAL_InitTick+0xe8>)
 8000c44:	fba2 2303 	umull	r2, r3, r2, r3
 8000c48:	0c9b      	lsrs	r3, r3, #18
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c4e:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <HAL_InitTick+0xec>)
 8000c50:	4a21      	ldr	r2, [pc, #132]	; (8000cd8 <HAL_InitTick+0xf0>)
 8000c52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <HAL_InitTick+0xec>)
 8000c56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c5a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c5c:	4a1d      	ldr	r2, [pc, #116]	; (8000cd4 <HAL_InitTick+0xec>)
 8000c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c60:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <HAL_InitTick+0xec>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c68:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <HAL_InitTick+0xec>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <HAL_InitTick+0xec>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c74:	4817      	ldr	r0, [pc, #92]	; (8000cd4 <HAL_InitTick+0xec>)
 8000c76:	f001 f84d 	bl	8001d14 <HAL_TIM_Base_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d11b      	bne.n	8000cc0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c88:	4812      	ldr	r0, [pc, #72]	; (8000cd4 <HAL_InitTick+0xec>)
 8000c8a:	f001 f89d 	bl	8001dc8 <HAL_TIM_Base_Start_IT>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d111      	bne.n	8000cc0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c9c:	2036      	movs	r0, #54	; 0x36
 8000c9e:	f000 f991 	bl	8000fc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b0f      	cmp	r3, #15
 8000ca6:	d808      	bhi.n	8000cba <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	2036      	movs	r0, #54	; 0x36
 8000cae:	f000 f96d 	bl	8000f8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <HAL_InitTick+0xf4>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	e002      	b.n	8000cc0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3738      	adds	r7, #56	; 0x38
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	431bde83 	.word	0x431bde83
 8000cd4:	20000080 	.word	0x20000080
 8000cd8:	40001000 	.word	0x40001000
 8000cdc:	20000004 	.word	0x20000004

08000ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <NMI_Handler+0x4>

08000ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <BusFault_Handler+0x4>

08000cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <UsageFault_Handler+0x4>

08000cfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <TIM6_DAC_IRQHandler+0x10>)
 8000d12:	f001 f8c9 	bl	8001ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000080 	.word	0x20000080

08000d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <SystemInit+0x20>)
 8000d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <SystemInit+0x20>)
 8000d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d48:	f7ff ffea 	bl	8000d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d4e:	490d      	ldr	r1, [pc, #52]	; (8000d84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d50:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d64:	4c0a      	ldr	r4, [pc, #40]	; (8000d90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d72:	f006 fec9 	bl	8007b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d76:	f7ff fbf3 	bl	8000560 <main>
  bx  lr    
 8000d7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000d88:	08007d24 	.word	0x08007d24
  ldr r2, =_sbss
 8000d8c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000d90:	200144f4 	.word	0x200144f4

08000d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC_IRQHandler>
	...

08000d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <HAL_Init+0x40>)
 8000da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_Init+0x40>)
 8000dae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <HAL_Init+0x40>)
 8000dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f000 f8d8 	bl	8000f76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f7ff ff0e 	bl	8000be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dcc:	f7ff fe9c 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023c00 	.word	0x40023c00

08000ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x24>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_IncTick+0x24>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	200000c8 	.word	0x200000c8

08000e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	200000c8 	.word	0x200000c8

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db0b      	blt.n	8000eaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <__NVIC_EnableIRQ+0x38>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db0a      	blt.n	8000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	490c      	ldr	r1, [pc, #48]	; (8000f08 <__NVIC_SetPriority+0x4c>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee4:	e00a      	b.n	8000efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4908      	ldr	r1, [pc, #32]	; (8000f0c <__NVIC_SetPriority+0x50>)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	3b04      	subs	r3, #4
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	761a      	strb	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2304      	movcs	r3, #4
 8000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d902      	bls.n	8000f40 <NVIC_EncodePriority+0x30>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b03      	subs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <NVIC_EncodePriority+0x32>
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	401a      	ands	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	4313      	orrs	r3, r2
         );
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ff4c 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9e:	f7ff ff61 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fa2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	68b9      	ldr	r1, [r7, #8]
 8000fa8:	6978      	ldr	r0, [r7, #20]
 8000faa:	f7ff ffb1 	bl	8000f10 <NVIC_EncodePriority>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff80 	bl	8000ebc <__NVIC_SetPriority>
}
 8000fbc:	bf00      	nop
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff54 	bl	8000e80 <__NVIC_EnableIRQ>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
 8000ffa:	e16b      	b.n	80012d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	429a      	cmp	r2, r3
 8001016:	f040 815a 	bne.w	80012ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	2b01      	cmp	r3, #1
 8001024:	d005      	beq.n	8001032 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800102e:	2b02      	cmp	r3, #2
 8001030:	d130      	bne.n	8001094 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2203      	movs	r2, #3
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	68da      	ldr	r2, [r3, #12]
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001068:	2201      	movs	r2, #1
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	091b      	lsrs	r3, r3, #4
 800107e:	f003 0201 	and.w	r2, r3, #1
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b03      	cmp	r3, #3
 800109e:	d017      	beq.n	80010d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	2203      	movs	r2, #3
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d123      	bne.n	8001124 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	08da      	lsrs	r2, r3, #3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3208      	adds	r2, #8
 80010e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	220f      	movs	r2, #15
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	691a      	ldr	r2, [r3, #16]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	08da      	lsrs	r2, r3, #3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3208      	adds	r2, #8
 800111e:	69b9      	ldr	r1, [r7, #24]
 8001120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0203 	and.w	r2, r3, #3
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 80b4 	beq.w	80012ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b60      	ldr	r3, [pc, #384]	; (80012ec <HAL_GPIO_Init+0x30c>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	4a5f      	ldr	r2, [pc, #380]	; (80012ec <HAL_GPIO_Init+0x30c>)
 8001170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001174:	6453      	str	r3, [r2, #68]	; 0x44
 8001176:	4b5d      	ldr	r3, [pc, #372]	; (80012ec <HAL_GPIO_Init+0x30c>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001182:	4a5b      	ldr	r2, [pc, #364]	; (80012f0 <HAL_GPIO_Init+0x310>)
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	3302      	adds	r3, #2
 800118a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	220f      	movs	r2, #15
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a52      	ldr	r2, [pc, #328]	; (80012f4 <HAL_GPIO_Init+0x314>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d02b      	beq.n	8001206 <HAL_GPIO_Init+0x226>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a51      	ldr	r2, [pc, #324]	; (80012f8 <HAL_GPIO_Init+0x318>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d025      	beq.n	8001202 <HAL_GPIO_Init+0x222>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a50      	ldr	r2, [pc, #320]	; (80012fc <HAL_GPIO_Init+0x31c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d01f      	beq.n	80011fe <HAL_GPIO_Init+0x21e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4f      	ldr	r2, [pc, #316]	; (8001300 <HAL_GPIO_Init+0x320>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d019      	beq.n	80011fa <HAL_GPIO_Init+0x21a>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4e      	ldr	r2, [pc, #312]	; (8001304 <HAL_GPIO_Init+0x324>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d013      	beq.n	80011f6 <HAL_GPIO_Init+0x216>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4d      	ldr	r2, [pc, #308]	; (8001308 <HAL_GPIO_Init+0x328>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d00d      	beq.n	80011f2 <HAL_GPIO_Init+0x212>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4c      	ldr	r2, [pc, #304]	; (800130c <HAL_GPIO_Init+0x32c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d007      	beq.n	80011ee <HAL_GPIO_Init+0x20e>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a4b      	ldr	r2, [pc, #300]	; (8001310 <HAL_GPIO_Init+0x330>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d101      	bne.n	80011ea <HAL_GPIO_Init+0x20a>
 80011e6:	2307      	movs	r3, #7
 80011e8:	e00e      	b.n	8001208 <HAL_GPIO_Init+0x228>
 80011ea:	2308      	movs	r3, #8
 80011ec:	e00c      	b.n	8001208 <HAL_GPIO_Init+0x228>
 80011ee:	2306      	movs	r3, #6
 80011f0:	e00a      	b.n	8001208 <HAL_GPIO_Init+0x228>
 80011f2:	2305      	movs	r3, #5
 80011f4:	e008      	b.n	8001208 <HAL_GPIO_Init+0x228>
 80011f6:	2304      	movs	r3, #4
 80011f8:	e006      	b.n	8001208 <HAL_GPIO_Init+0x228>
 80011fa:	2303      	movs	r3, #3
 80011fc:	e004      	b.n	8001208 <HAL_GPIO_Init+0x228>
 80011fe:	2302      	movs	r3, #2
 8001200:	e002      	b.n	8001208 <HAL_GPIO_Init+0x228>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <HAL_GPIO_Init+0x228>
 8001206:	2300      	movs	r3, #0
 8001208:	69fa      	ldr	r2, [r7, #28]
 800120a:	f002 0203 	and.w	r2, r2, #3
 800120e:	0092      	lsls	r2, r2, #2
 8001210:	4093      	lsls	r3, r2
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001218:	4935      	ldr	r1, [pc, #212]	; (80012f0 <HAL_GPIO_Init+0x310>)
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	3302      	adds	r3, #2
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001226:	4b3b      	ldr	r3, [pc, #236]	; (8001314 <HAL_GPIO_Init+0x334>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800124a:	4a32      	ldr	r2, [pc, #200]	; (8001314 <HAL_GPIO_Init+0x334>)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001250:	4b30      	ldr	r3, [pc, #192]	; (8001314 <HAL_GPIO_Init+0x334>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001274:	4a27      	ldr	r2, [pc, #156]	; (8001314 <HAL_GPIO_Init+0x334>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800127a:	4b26      	ldr	r3, [pc, #152]	; (8001314 <HAL_GPIO_Init+0x334>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800129e:	4a1d      	ldr	r2, [pc, #116]	; (8001314 <HAL_GPIO_Init+0x334>)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a4:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <HAL_GPIO_Init+0x334>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012c8:	4a12      	ldr	r2, [pc, #72]	; (8001314 <HAL_GPIO_Init+0x334>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3301      	adds	r3, #1
 80012d2:	61fb      	str	r3, [r7, #28]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	2b0f      	cmp	r3, #15
 80012d8:	f67f ae90 	bls.w	8000ffc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40013800 	.word	0x40013800
 80012f4:	40020000 	.word	0x40020000
 80012f8:	40020400 	.word	0x40020400
 80012fc:	40020800 	.word	0x40020800
 8001300:	40020c00 	.word	0x40020c00
 8001304:	40021000 	.word	0x40021000
 8001308:	40021400 	.word	0x40021400
 800130c:	40021800 	.word	0x40021800
 8001310:	40021c00 	.word	0x40021c00
 8001314:	40013c00 	.word	0x40013c00

08001318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	807b      	strh	r3, [r7, #2]
 8001324:	4613      	mov	r3, r2
 8001326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001328:	787b      	ldrb	r3, [r7, #1]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800132e:	887a      	ldrh	r2, [r7, #2]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001334:	e003      	b.n	800133e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001336:	887b      	ldrh	r3, [r7, #2]
 8001338:	041a      	lsls	r2, r3, #16
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	619a      	str	r2, [r3, #24]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800134a:	b480      	push	{r7}
 800134c:	b085      	sub	sp, #20
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	460b      	mov	r3, r1
 8001354:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800135c:	887a      	ldrh	r2, [r7, #2]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4013      	ands	r3, r2
 8001362:	041a      	lsls	r2, r3, #16
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	43d9      	mvns	r1, r3
 8001368:	887b      	ldrh	r3, [r7, #2]
 800136a:	400b      	ands	r3, r1
 800136c:	431a      	orrs	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	619a      	str	r2, [r3, #24]
}
 8001372:	bf00      	nop
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e267      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d075      	beq.n	800148a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800139e:	4b88      	ldr	r3, [pc, #544]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d00c      	beq.n	80013c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013aa:	4b85      	ldr	r3, [pc, #532]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d112      	bne.n	80013dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013b6:	4b82      	ldr	r3, [pc, #520]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013c2:	d10b      	bne.n	80013dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	4b7e      	ldr	r3, [pc, #504]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d05b      	beq.n	8001488 <HAL_RCC_OscConfig+0x108>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d157      	bne.n	8001488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e242      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e4:	d106      	bne.n	80013f4 <HAL_RCC_OscConfig+0x74>
 80013e6:	4b76      	ldr	r3, [pc, #472]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a75      	ldr	r2, [pc, #468]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80013ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e01d      	b.n	8001430 <HAL_RCC_OscConfig+0xb0>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013fc:	d10c      	bne.n	8001418 <HAL_RCC_OscConfig+0x98>
 80013fe:	4b70      	ldr	r3, [pc, #448]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a6f      	ldr	r2, [pc, #444]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	4b6d      	ldr	r3, [pc, #436]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a6c      	ldr	r2, [pc, #432]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e00b      	b.n	8001430 <HAL_RCC_OscConfig+0xb0>
 8001418:	4b69      	ldr	r3, [pc, #420]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a68      	ldr	r2, [pc, #416]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 800141e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b66      	ldr	r3, [pc, #408]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a65      	ldr	r2, [pc, #404]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 800142a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d013      	beq.n	8001460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fce4 	bl	8000e04 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fce0 	bl	8000e04 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	; 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e207      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001452:	4b5b      	ldr	r3, [pc, #364]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0xc0>
 800145e:	e014      	b.n	800148a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fcd0 	bl	8000e04 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fccc 	bl	8000e04 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	; 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e1f3      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147a:	4b51      	ldr	r3, [pc, #324]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0xe8>
 8001486:	e000      	b.n	800148a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d063      	beq.n	800155e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001496:	4b4a      	ldr	r3, [pc, #296]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00b      	beq.n	80014ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014a2:	4b47      	ldr	r3, [pc, #284]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d11c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ae:	4b44      	ldr	r3, [pc, #272]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d116      	bne.n	80014e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ba:	4b41      	ldr	r3, [pc, #260]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d005      	beq.n	80014d2 <HAL_RCC_OscConfig+0x152>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e1c7      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d2:	4b3b      	ldr	r3, [pc, #236]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4937      	ldr	r1, [pc, #220]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e6:	e03a      	b.n	800155e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d020      	beq.n	8001532 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f0:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <HAL_RCC_OscConfig+0x244>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f6:	f7ff fc85 	bl	8000e04 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014fe:	f7ff fc81 	bl	8000e04 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e1a8      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001510:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151c:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	4925      	ldr	r1, [pc, #148]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 800152c:	4313      	orrs	r3, r2
 800152e:	600b      	str	r3, [r1, #0]
 8001530:	e015      	b.n	800155e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001532:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <HAL_RCC_OscConfig+0x244>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001538:	f7ff fc64 	bl	8000e04 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001540:	f7ff fc60 	bl	8000e04 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e187      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001552:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d036      	beq.n	80015d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d016      	beq.n	80015a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <HAL_RCC_OscConfig+0x248>)
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001578:	f7ff fc44 	bl	8000e04 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001580:	f7ff fc40 	bl	8000e04 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e167      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x200>
 800159e:	e01b      	b.n	80015d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_RCC_OscConfig+0x248>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a6:	f7ff fc2d 	bl	8000e04 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ac:	e00e      	b.n	80015cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ae:	f7ff fc29 	bl	8000e04 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d907      	bls.n	80015cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e150      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
 80015c0:	40023800 	.word	0x40023800
 80015c4:	42470000 	.word	0x42470000
 80015c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015cc:	4b88      	ldr	r3, [pc, #544]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 80015ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1ea      	bne.n	80015ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 8097 	beq.w	8001714 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ea:	4b81      	ldr	r3, [pc, #516]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10f      	bne.n	8001616 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	4b7d      	ldr	r3, [pc, #500]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a7c      	ldr	r2, [pc, #496]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
 8001606:	4b7a      	ldr	r3, [pc, #488]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001612:	2301      	movs	r3, #1
 8001614:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001616:	4b77      	ldr	r3, [pc, #476]	; (80017f4 <HAL_RCC_OscConfig+0x474>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161e:	2b00      	cmp	r3, #0
 8001620:	d118      	bne.n	8001654 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001622:	4b74      	ldr	r3, [pc, #464]	; (80017f4 <HAL_RCC_OscConfig+0x474>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a73      	ldr	r2, [pc, #460]	; (80017f4 <HAL_RCC_OscConfig+0x474>)
 8001628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162e:	f7ff fbe9 	bl	8000e04 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001636:	f7ff fbe5 	bl	8000e04 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e10c      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001648:	4b6a      	ldr	r3, [pc, #424]	; (80017f4 <HAL_RCC_OscConfig+0x474>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d106      	bne.n	800166a <HAL_RCC_OscConfig+0x2ea>
 800165c:	4b64      	ldr	r3, [pc, #400]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 800165e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001660:	4a63      	ldr	r2, [pc, #396]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6713      	str	r3, [r2, #112]	; 0x70
 8001668:	e01c      	b.n	80016a4 <HAL_RCC_OscConfig+0x324>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	2b05      	cmp	r3, #5
 8001670:	d10c      	bne.n	800168c <HAL_RCC_OscConfig+0x30c>
 8001672:	4b5f      	ldr	r3, [pc, #380]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001676:	4a5e      	ldr	r2, [pc, #376]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001678:	f043 0304 	orr.w	r3, r3, #4
 800167c:	6713      	str	r3, [r2, #112]	; 0x70
 800167e:	4b5c      	ldr	r3, [pc, #368]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001682:	4a5b      	ldr	r2, [pc, #364]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6713      	str	r3, [r2, #112]	; 0x70
 800168a:	e00b      	b.n	80016a4 <HAL_RCC_OscConfig+0x324>
 800168c:	4b58      	ldr	r3, [pc, #352]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001690:	4a57      	ldr	r2, [pc, #348]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001692:	f023 0301 	bic.w	r3, r3, #1
 8001696:	6713      	str	r3, [r2, #112]	; 0x70
 8001698:	4b55      	ldr	r3, [pc, #340]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 800169a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169c:	4a54      	ldr	r2, [pc, #336]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 800169e:	f023 0304 	bic.w	r3, r3, #4
 80016a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d015      	beq.n	80016d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ac:	f7ff fbaa 	bl	8000e04 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b2:	e00a      	b.n	80016ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b4:	f7ff fba6 	bl	8000e04 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e0cb      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ca:	4b49      	ldr	r3, [pc, #292]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 80016cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0ee      	beq.n	80016b4 <HAL_RCC_OscConfig+0x334>
 80016d6:	e014      	b.n	8001702 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d8:	f7ff fb94 	bl	8000e04 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016de:	e00a      	b.n	80016f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e0:	f7ff fb90 	bl	8000e04 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e0b5      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f6:	4b3e      	ldr	r3, [pc, #248]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 80016f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1ee      	bne.n	80016e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001702:	7dfb      	ldrb	r3, [r7, #23]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d105      	bne.n	8001714 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001708:	4b39      	ldr	r3, [pc, #228]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	4a38      	ldr	r2, [pc, #224]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 800170e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001712:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 80a1 	beq.w	8001860 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800171e:	4b34      	ldr	r3, [pc, #208]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b08      	cmp	r3, #8
 8001728:	d05c      	beq.n	80017e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d141      	bne.n	80017b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001732:	4b31      	ldr	r3, [pc, #196]	; (80017f8 <HAL_RCC_OscConfig+0x478>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff fb64 	bl	8000e04 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001740:	f7ff fb60 	bl	8000e04 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e087      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001752:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69da      	ldr	r2, [r3, #28]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	019b      	lsls	r3, r3, #6
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001774:	085b      	lsrs	r3, r3, #1
 8001776:	3b01      	subs	r3, #1
 8001778:	041b      	lsls	r3, r3, #16
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	061b      	lsls	r3, r3, #24
 8001782:	491b      	ldr	r1, [pc, #108]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001784:	4313      	orrs	r3, r2
 8001786:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_RCC_OscConfig+0x478>)
 800178a:	2201      	movs	r2, #1
 800178c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178e:	f7ff fb39 	bl	8000e04 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001796:	f7ff fb35 	bl	8000e04 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e05c      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0f0      	beq.n	8001796 <HAL_RCC_OscConfig+0x416>
 80017b4:	e054      	b.n	8001860 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <HAL_RCC_OscConfig+0x478>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fb22 	bl	8000e04 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c4:	f7ff fb1e 	bl	8000e04 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e045      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x444>
 80017e2:	e03d      	b.n	8001860 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d107      	bne.n	80017fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e038      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40007000 	.word	0x40007000
 80017f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_RCC_OscConfig+0x4ec>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d028      	beq.n	800185c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001814:	429a      	cmp	r2, r3
 8001816:	d121      	bne.n	800185c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001822:	429a      	cmp	r2, r3
 8001824:	d11a      	bne.n	800185c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800182c:	4013      	ands	r3, r2
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001832:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001834:	4293      	cmp	r3, r2
 8001836:	d111      	bne.n	800185c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001842:	085b      	lsrs	r3, r3, #1
 8001844:	3b01      	subs	r3, #1
 8001846:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001848:	429a      	cmp	r2, r3
 800184a:	d107      	bne.n	800185c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001856:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800

08001870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0cc      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001884:	4b68      	ldr	r3, [pc, #416]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d90c      	bls.n	80018ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b65      	ldr	r3, [pc, #404]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189a:	4b63      	ldr	r3, [pc, #396]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0b8      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d020      	beq.n	80018fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c4:	4b59      	ldr	r3, [pc, #356]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	4a58      	ldr	r2, [pc, #352]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018dc:	4b53      	ldr	r3, [pc, #332]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4a52      	ldr	r2, [pc, #328]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e8:	4b50      	ldr	r3, [pc, #320]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	494d      	ldr	r1, [pc, #308]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d044      	beq.n	8001990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d107      	bne.n	800191e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	4b47      	ldr	r3, [pc, #284]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d119      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e07f      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d003      	beq.n	800192e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800192a:	2b03      	cmp	r3, #3
 800192c:	d107      	bne.n	800193e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192e:	4b3f      	ldr	r3, [pc, #252]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e06f      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193e:	4b3b      	ldr	r3, [pc, #236]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e067      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800194e:	4b37      	ldr	r3, [pc, #220]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f023 0203 	bic.w	r2, r3, #3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4934      	ldr	r1, [pc, #208]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	4313      	orrs	r3, r2
 800195e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001960:	f7ff fa50 	bl	8000e04 <HAL_GetTick>
 8001964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001966:	e00a      	b.n	800197e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001968:	f7ff fa4c 	bl	8000e04 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f241 3288 	movw	r2, #5000	; 0x1388
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e04f      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197e:	4b2b      	ldr	r3, [pc, #172]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 020c 	and.w	r2, r3, #12
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	429a      	cmp	r2, r3
 800198e:	d1eb      	bne.n	8001968 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001990:	4b25      	ldr	r3, [pc, #148]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d20c      	bcs.n	80019b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199e:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e032      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d008      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c4:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4916      	ldr	r1, [pc, #88]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d009      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	490e      	ldr	r1, [pc, #56]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019f6:	f000 f821 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80019fa:	4602      	mov	r2, r0
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	490a      	ldr	r1, [pc, #40]	; (8001a30 <HAL_RCC_ClockConfig+0x1c0>)
 8001a08:	5ccb      	ldrb	r3, [r1, r3]
 8001a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0e:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_RCC_ClockConfig+0x1c8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff f8e6 	bl	8000be8 <HAL_InitTick>

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023c00 	.word	0x40023c00
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	08007cd4 	.word	0x08007cd4
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000004 	.word	0x20000004

08001a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a40:	b094      	sub	sp, #80	; 0x50
 8001a42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	647b      	str	r3, [r7, #68]	; 0x44
 8001a48:	2300      	movs	r3, #0
 8001a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a54:	4b79      	ldr	r3, [pc, #484]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 030c 	and.w	r3, r3, #12
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d00d      	beq.n	8001a7c <HAL_RCC_GetSysClockFreq+0x40>
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	f200 80e1 	bhi.w	8001c28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d002      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0x34>
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d003      	beq.n	8001a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a6e:	e0db      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a70:	4b73      	ldr	r3, [pc, #460]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a74:	e0db      	b.n	8001c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a76:	4b73      	ldr	r3, [pc, #460]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a7a:	e0d8      	b.n	8001c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a7c:	4b6f      	ldr	r3, [pc, #444]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a86:	4b6d      	ldr	r3, [pc, #436]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d063      	beq.n	8001b5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a92:	4b6a      	ldr	r3, [pc, #424]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	099b      	lsrs	r3, r3, #6
 8001a98:	2200      	movs	r2, #0
 8001a9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aa4:	633b      	str	r3, [r7, #48]	; 0x30
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8001aaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001aae:	4622      	mov	r2, r4
 8001ab0:	462b      	mov	r3, r5
 8001ab2:	f04f 0000 	mov.w	r0, #0
 8001ab6:	f04f 0100 	mov.w	r1, #0
 8001aba:	0159      	lsls	r1, r3, #5
 8001abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac0:	0150      	lsls	r0, r2, #5
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4621      	mov	r1, r4
 8001ac8:	1a51      	subs	r1, r2, r1
 8001aca:	6139      	str	r1, [r7, #16]
 8001acc:	4629      	mov	r1, r5
 8001ace:	eb63 0301 	sbc.w	r3, r3, r1
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ae0:	4659      	mov	r1, fp
 8001ae2:	018b      	lsls	r3, r1, #6
 8001ae4:	4651      	mov	r1, sl
 8001ae6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aea:	4651      	mov	r1, sl
 8001aec:	018a      	lsls	r2, r1, #6
 8001aee:	4651      	mov	r1, sl
 8001af0:	ebb2 0801 	subs.w	r8, r2, r1
 8001af4:	4659      	mov	r1, fp
 8001af6:	eb63 0901 	sbc.w	r9, r3, r1
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b0e:	4690      	mov	r8, r2
 8001b10:	4699      	mov	r9, r3
 8001b12:	4623      	mov	r3, r4
 8001b14:	eb18 0303 	adds.w	r3, r8, r3
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	462b      	mov	r3, r5
 8001b1c:	eb49 0303 	adc.w	r3, r9, r3
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b2e:	4629      	mov	r1, r5
 8001b30:	024b      	lsls	r3, r1, #9
 8001b32:	4621      	mov	r1, r4
 8001b34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b38:	4621      	mov	r1, r4
 8001b3a:	024a      	lsls	r2, r1, #9
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b42:	2200      	movs	r2, #0
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b4c:	f7fe fb8a 	bl	8000264 <__aeabi_uldivmod>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4613      	mov	r3, r2
 8001b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b58:	e058      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b5a:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	099b      	lsrs	r3, r3, #6
 8001b60:	2200      	movs	r2, #0
 8001b62:	4618      	mov	r0, r3
 8001b64:	4611      	mov	r1, r2
 8001b66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b6a:	623b      	str	r3, [r7, #32]
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b74:	4642      	mov	r2, r8
 8001b76:	464b      	mov	r3, r9
 8001b78:	f04f 0000 	mov.w	r0, #0
 8001b7c:	f04f 0100 	mov.w	r1, #0
 8001b80:	0159      	lsls	r1, r3, #5
 8001b82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b86:	0150      	lsls	r0, r2, #5
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4641      	mov	r1, r8
 8001b8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b92:	4649      	mov	r1, r9
 8001b94:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ba4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ba8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bac:	ebb2 040a 	subs.w	r4, r2, sl
 8001bb0:	eb63 050b 	sbc.w	r5, r3, fp
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	00eb      	lsls	r3, r5, #3
 8001bbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bc2:	00e2      	lsls	r2, r4, #3
 8001bc4:	4614      	mov	r4, r2
 8001bc6:	461d      	mov	r5, r3
 8001bc8:	4643      	mov	r3, r8
 8001bca:	18e3      	adds	r3, r4, r3
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	464b      	mov	r3, r9
 8001bd0:	eb45 0303 	adc.w	r3, r5, r3
 8001bd4:	607b      	str	r3, [r7, #4]
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001be2:	4629      	mov	r1, r5
 8001be4:	028b      	lsls	r3, r1, #10
 8001be6:	4621      	mov	r1, r4
 8001be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bec:	4621      	mov	r1, r4
 8001bee:	028a      	lsls	r2, r1, #10
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	61fa      	str	r2, [r7, #28]
 8001bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c00:	f7fe fb30 	bl	8000264 <__aeabi_uldivmod>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4613      	mov	r3, r2
 8001c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	0c1b      	lsrs	r3, r3, #16
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	3301      	adds	r3, #1
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c26:	e002      	b.n	8001c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3750      	adds	r7, #80	; 0x50
 8001c34:	46bd      	mov	sp, r7
 8001c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	00f42400 	.word	0x00f42400
 8001c44:	007a1200 	.word	0x007a1200

08001c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000000 	.word	0x20000000

08001c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c64:	f7ff fff0 	bl	8001c48 <HAL_RCC_GetHCLKFreq>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	0a9b      	lsrs	r3, r3, #10
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	4903      	ldr	r1, [pc, #12]	; (8001c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c76:	5ccb      	ldrb	r3, [r1, r3]
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40023800 	.word	0x40023800
 8001c84:	08007ce4 	.word	0x08007ce4

08001c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c8c:	f7ff ffdc 	bl	8001c48 <HAL_RCC_GetHCLKFreq>
 8001c90:	4602      	mov	r2, r0
 8001c92:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	0b5b      	lsrs	r3, r3, #13
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	4903      	ldr	r1, [pc, #12]	; (8001cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	08007ce4 	.word	0x08007ce4

08001cb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	220f      	movs	r2, #15
 8001cbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_RCC_GetClockConfig+0x5c>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 0203 	and.w	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <HAL_RCC_GetClockConfig+0x5c>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <HAL_RCC_GetClockConfig+0x5c>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <HAL_RCC_GetClockConfig+0x5c>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	08db      	lsrs	r3, r3, #3
 8001cea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cf2:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <HAL_RCC_GetClockConfig+0x60>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0207 	and.w	r2, r3, #7
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	601a      	str	r2, [r3, #0]
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40023c00 	.word	0x40023c00

08001d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e041      	b.n	8001daa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f839 	bl	8001db2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2202      	movs	r2, #2
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3304      	adds	r3, #4
 8001d50:	4619      	mov	r1, r3
 8001d52:	4610      	mov	r0, r2
 8001d54:	f000 f9c0 	bl	80020d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d001      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e04e      	b.n	8001e7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0201 	orr.w	r2, r2, #1
 8001df6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a23      	ldr	r2, [pc, #140]	; (8001e8c <HAL_TIM_Base_Start_IT+0xc4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d022      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e0a:	d01d      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a1f      	ldr	r2, [pc, #124]	; (8001e90 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d018      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a1e      	ldr	r2, [pc, #120]	; (8001e94 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d013      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a1c      	ldr	r2, [pc, #112]	; (8001e98 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00e      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a1b      	ldr	r2, [pc, #108]	; (8001e9c <HAL_TIM_Base_Start_IT+0xd4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d009      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d004      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a18      	ldr	r2, [pc, #96]	; (8001ea4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d111      	bne.n	8001e6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	d010      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0201 	orr.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6a:	e007      	b.n	8001e7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0201 	orr.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	40000400 	.word	0x40000400
 8001e94:	40000800 	.word	0x40000800
 8001e98:	40000c00 	.word	0x40000c00
 8001e9c:	40010400 	.word	0x40010400
 8001ea0:	40014000 	.word	0x40014000
 8001ea4:	40001800 	.word	0x40001800

08001ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d020      	beq.n	8001f0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01b      	beq.n	8001f0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0202 	mvn.w	r2, #2
 8001edc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f8d2 	bl	800209c <HAL_TIM_IC_CaptureCallback>
 8001ef8:	e005      	b.n	8001f06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f8c4 	bl	8002088 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f8d5 	bl	80020b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d020      	beq.n	8001f58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d01b      	beq.n	8001f58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0204 	mvn.w	r2, #4
 8001f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f8ac 	bl	800209c <HAL_TIM_IC_CaptureCallback>
 8001f44:	e005      	b.n	8001f52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f89e 	bl	8002088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f8af 	bl	80020b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d020      	beq.n	8001fa4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d01b      	beq.n	8001fa4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0208 	mvn.w	r2, #8
 8001f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2204      	movs	r2, #4
 8001f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f886 	bl	800209c <HAL_TIM_IC_CaptureCallback>
 8001f90:	e005      	b.n	8001f9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f878 	bl	8002088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f889 	bl	80020b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d020      	beq.n	8001ff0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d01b      	beq.n	8001ff0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f06f 0210 	mvn.w	r2, #16
 8001fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2208      	movs	r2, #8
 8001fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f860 	bl	800209c <HAL_TIM_IC_CaptureCallback>
 8001fdc:	e005      	b.n	8001fea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f852 	bl	8002088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f863 	bl	80020b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00c      	beq.n	8002014 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d007      	beq.n	8002014 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0201 	mvn.w	r2, #1
 800200c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7fe fd62 	bl	8000ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00c      	beq.n	8002038 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002024:	2b00      	cmp	r3, #0
 8002026:	d007      	beq.n	8002038 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f906 	bl	8002244 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00c      	beq.n	800205c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002048:	2b00      	cmp	r3, #0
 800204a:	d007      	beq.n	800205c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f834 	bl	80020c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00c      	beq.n	8002080 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f003 0320 	and.w	r3, r3, #32
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0220 	mvn.w	r2, #32
 8002078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f8d8 	bl	8002230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a46      	ldr	r2, [pc, #280]	; (8002204 <TIM_Base_SetConfig+0x12c>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d013      	beq.n	8002118 <TIM_Base_SetConfig+0x40>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f6:	d00f      	beq.n	8002118 <TIM_Base_SetConfig+0x40>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a43      	ldr	r2, [pc, #268]	; (8002208 <TIM_Base_SetConfig+0x130>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d00b      	beq.n	8002118 <TIM_Base_SetConfig+0x40>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a42      	ldr	r2, [pc, #264]	; (800220c <TIM_Base_SetConfig+0x134>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d007      	beq.n	8002118 <TIM_Base_SetConfig+0x40>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a41      	ldr	r2, [pc, #260]	; (8002210 <TIM_Base_SetConfig+0x138>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d003      	beq.n	8002118 <TIM_Base_SetConfig+0x40>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a40      	ldr	r2, [pc, #256]	; (8002214 <TIM_Base_SetConfig+0x13c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d108      	bne.n	800212a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800211e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	4313      	orrs	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a35      	ldr	r2, [pc, #212]	; (8002204 <TIM_Base_SetConfig+0x12c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d02b      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002138:	d027      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a32      	ldr	r2, [pc, #200]	; (8002208 <TIM_Base_SetConfig+0x130>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d023      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a31      	ldr	r2, [pc, #196]	; (800220c <TIM_Base_SetConfig+0x134>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d01f      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a30      	ldr	r2, [pc, #192]	; (8002210 <TIM_Base_SetConfig+0x138>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01b      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a2f      	ldr	r2, [pc, #188]	; (8002214 <TIM_Base_SetConfig+0x13c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d017      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a2e      	ldr	r2, [pc, #184]	; (8002218 <TIM_Base_SetConfig+0x140>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d013      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a2d      	ldr	r2, [pc, #180]	; (800221c <TIM_Base_SetConfig+0x144>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00f      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a2c      	ldr	r2, [pc, #176]	; (8002220 <TIM_Base_SetConfig+0x148>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d00b      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a2b      	ldr	r2, [pc, #172]	; (8002224 <TIM_Base_SetConfig+0x14c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d007      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a2a      	ldr	r2, [pc, #168]	; (8002228 <TIM_Base_SetConfig+0x150>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d003      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a29      	ldr	r2, [pc, #164]	; (800222c <TIM_Base_SetConfig+0x154>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d108      	bne.n	800219c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4313      	orrs	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a10      	ldr	r2, [pc, #64]	; (8002204 <TIM_Base_SetConfig+0x12c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d003      	beq.n	80021d0 <TIM_Base_SetConfig+0xf8>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a12      	ldr	r2, [pc, #72]	; (8002214 <TIM_Base_SetConfig+0x13c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d103      	bne.n	80021d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d105      	bne.n	80021f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f023 0201 	bic.w	r2, r3, #1
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	611a      	str	r2, [r3, #16]
  }
}
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40010000 	.word	0x40010000
 8002208:	40000400 	.word	0x40000400
 800220c:	40000800 	.word	0x40000800
 8002210:	40000c00 	.word	0x40000c00
 8002214:	40010400 	.word	0x40010400
 8002218:	40014000 	.word	0x40014000
 800221c:	40014400 	.word	0x40014400
 8002220:	40014800 	.word	0x40014800
 8002224:	40001800 	.word	0x40001800
 8002228:	40001c00 	.word	0x40001c00
 800222c:	40002000 	.word	0x40002000

08002230 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e042      	b.n	80022f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe fc6a 	bl	8000b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2224      	movs	r2, #36	; 0x24
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800229a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f82b 	bl	80022f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695a      	ldr	r2, [r3, #20]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2220      	movs	r2, #32
 80022e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022fc:	b0c0      	sub	sp, #256	; 0x100
 80022fe:	af00      	add	r7, sp, #0
 8002300:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002314:	68d9      	ldr	r1, [r3, #12]
 8002316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	ea40 0301 	orr.w	r3, r0, r1
 8002320:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	431a      	orrs	r2, r3
 8002330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	431a      	orrs	r2, r3
 8002338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002350:	f021 010c 	bic.w	r1, r1, #12
 8002354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800235e:	430b      	orrs	r3, r1
 8002360:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800236e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002372:	6999      	ldr	r1, [r3, #24]
 8002374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	ea40 0301 	orr.w	r3, r0, r1
 800237e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	4b8f      	ldr	r3, [pc, #572]	; (80025c4 <UART_SetConfig+0x2cc>)
 8002388:	429a      	cmp	r2, r3
 800238a:	d005      	beq.n	8002398 <UART_SetConfig+0xa0>
 800238c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	4b8d      	ldr	r3, [pc, #564]	; (80025c8 <UART_SetConfig+0x2d0>)
 8002394:	429a      	cmp	r2, r3
 8002396:	d104      	bne.n	80023a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002398:	f7ff fc76 	bl	8001c88 <HAL_RCC_GetPCLK2Freq>
 800239c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80023a0:	e003      	b.n	80023aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023a2:	f7ff fc5d 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 80023a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023b4:	f040 810c 	bne.w	80025d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023bc:	2200      	movs	r2, #0
 80023be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80023c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80023c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80023ca:	4622      	mov	r2, r4
 80023cc:	462b      	mov	r3, r5
 80023ce:	1891      	adds	r1, r2, r2
 80023d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80023d2:	415b      	adcs	r3, r3
 80023d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80023da:	4621      	mov	r1, r4
 80023dc:	eb12 0801 	adds.w	r8, r2, r1
 80023e0:	4629      	mov	r1, r5
 80023e2:	eb43 0901 	adc.w	r9, r3, r1
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023fa:	4690      	mov	r8, r2
 80023fc:	4699      	mov	r9, r3
 80023fe:	4623      	mov	r3, r4
 8002400:	eb18 0303 	adds.w	r3, r8, r3
 8002404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002408:	462b      	mov	r3, r5
 800240a:	eb49 0303 	adc.w	r3, r9, r3
 800240e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800241e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002422:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002426:	460b      	mov	r3, r1
 8002428:	18db      	adds	r3, r3, r3
 800242a:	653b      	str	r3, [r7, #80]	; 0x50
 800242c:	4613      	mov	r3, r2
 800242e:	eb42 0303 	adc.w	r3, r2, r3
 8002432:	657b      	str	r3, [r7, #84]	; 0x54
 8002434:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002438:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800243c:	f7fd ff12 	bl	8000264 <__aeabi_uldivmod>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4b61      	ldr	r3, [pc, #388]	; (80025cc <UART_SetConfig+0x2d4>)
 8002446:	fba3 2302 	umull	r2, r3, r3, r2
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	011c      	lsls	r4, r3, #4
 800244e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002452:	2200      	movs	r2, #0
 8002454:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002458:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800245c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002460:	4642      	mov	r2, r8
 8002462:	464b      	mov	r3, r9
 8002464:	1891      	adds	r1, r2, r2
 8002466:	64b9      	str	r1, [r7, #72]	; 0x48
 8002468:	415b      	adcs	r3, r3
 800246a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800246c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002470:	4641      	mov	r1, r8
 8002472:	eb12 0a01 	adds.w	sl, r2, r1
 8002476:	4649      	mov	r1, r9
 8002478:	eb43 0b01 	adc.w	fp, r3, r1
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002488:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800248c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002490:	4692      	mov	sl, r2
 8002492:	469b      	mov	fp, r3
 8002494:	4643      	mov	r3, r8
 8002496:	eb1a 0303 	adds.w	r3, sl, r3
 800249a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800249e:	464b      	mov	r3, r9
 80024a0:	eb4b 0303 	adc.w	r3, fp, r3
 80024a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80024a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80024b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80024bc:	460b      	mov	r3, r1
 80024be:	18db      	adds	r3, r3, r3
 80024c0:	643b      	str	r3, [r7, #64]	; 0x40
 80024c2:	4613      	mov	r3, r2
 80024c4:	eb42 0303 	adc.w	r3, r2, r3
 80024c8:	647b      	str	r3, [r7, #68]	; 0x44
 80024ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80024ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80024d2:	f7fd fec7 	bl	8000264 <__aeabi_uldivmod>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	4611      	mov	r1, r2
 80024dc:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <UART_SetConfig+0x2d4>)
 80024de:	fba3 2301 	umull	r2, r3, r3, r1
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	2264      	movs	r2, #100	; 0x64
 80024e6:	fb02 f303 	mul.w	r3, r2, r3
 80024ea:	1acb      	subs	r3, r1, r3
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80024f2:	4b36      	ldr	r3, [pc, #216]	; (80025cc <UART_SetConfig+0x2d4>)
 80024f4:	fba3 2302 	umull	r2, r3, r3, r2
 80024f8:	095b      	lsrs	r3, r3, #5
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002500:	441c      	add	r4, r3
 8002502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002506:	2200      	movs	r2, #0
 8002508:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800250c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002510:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002514:	4642      	mov	r2, r8
 8002516:	464b      	mov	r3, r9
 8002518:	1891      	adds	r1, r2, r2
 800251a:	63b9      	str	r1, [r7, #56]	; 0x38
 800251c:	415b      	adcs	r3, r3
 800251e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002520:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002524:	4641      	mov	r1, r8
 8002526:	1851      	adds	r1, r2, r1
 8002528:	6339      	str	r1, [r7, #48]	; 0x30
 800252a:	4649      	mov	r1, r9
 800252c:	414b      	adcs	r3, r1
 800252e:	637b      	str	r3, [r7, #52]	; 0x34
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800253c:	4659      	mov	r1, fp
 800253e:	00cb      	lsls	r3, r1, #3
 8002540:	4651      	mov	r1, sl
 8002542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002546:	4651      	mov	r1, sl
 8002548:	00ca      	lsls	r2, r1, #3
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	4603      	mov	r3, r0
 8002550:	4642      	mov	r2, r8
 8002552:	189b      	adds	r3, r3, r2
 8002554:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002558:	464b      	mov	r3, r9
 800255a:	460a      	mov	r2, r1
 800255c:	eb42 0303 	adc.w	r3, r2, r3
 8002560:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002570:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002574:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002578:	460b      	mov	r3, r1
 800257a:	18db      	adds	r3, r3, r3
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
 800257e:	4613      	mov	r3, r2
 8002580:	eb42 0303 	adc.w	r3, r2, r3
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002586:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800258a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800258e:	f7fd fe69 	bl	8000264 <__aeabi_uldivmod>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <UART_SetConfig+0x2d4>)
 8002598:	fba3 1302 	umull	r1, r3, r3, r2
 800259c:	095b      	lsrs	r3, r3, #5
 800259e:	2164      	movs	r1, #100	; 0x64
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	3332      	adds	r3, #50	; 0x32
 80025aa:	4a08      	ldr	r2, [pc, #32]	; (80025cc <UART_SetConfig+0x2d4>)
 80025ac:	fba2 2303 	umull	r2, r3, r2, r3
 80025b0:	095b      	lsrs	r3, r3, #5
 80025b2:	f003 0207 	and.w	r2, r3, #7
 80025b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4422      	add	r2, r4
 80025be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025c0:	e106      	b.n	80027d0 <UART_SetConfig+0x4d8>
 80025c2:	bf00      	nop
 80025c4:	40011000 	.word	0x40011000
 80025c8:	40011400 	.word	0x40011400
 80025cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025d4:	2200      	movs	r2, #0
 80025d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80025da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80025de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80025e2:	4642      	mov	r2, r8
 80025e4:	464b      	mov	r3, r9
 80025e6:	1891      	adds	r1, r2, r2
 80025e8:	6239      	str	r1, [r7, #32]
 80025ea:	415b      	adcs	r3, r3
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
 80025ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025f2:	4641      	mov	r1, r8
 80025f4:	1854      	adds	r4, r2, r1
 80025f6:	4649      	mov	r1, r9
 80025f8:	eb43 0501 	adc.w	r5, r3, r1
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	00eb      	lsls	r3, r5, #3
 8002606:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800260a:	00e2      	lsls	r2, r4, #3
 800260c:	4614      	mov	r4, r2
 800260e:	461d      	mov	r5, r3
 8002610:	4643      	mov	r3, r8
 8002612:	18e3      	adds	r3, r4, r3
 8002614:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002618:	464b      	mov	r3, r9
 800261a:	eb45 0303 	adc.w	r3, r5, r3
 800261e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800262e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800263e:	4629      	mov	r1, r5
 8002640:	008b      	lsls	r3, r1, #2
 8002642:	4621      	mov	r1, r4
 8002644:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002648:	4621      	mov	r1, r4
 800264a:	008a      	lsls	r2, r1, #2
 800264c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002650:	f7fd fe08 	bl	8000264 <__aeabi_uldivmod>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4b60      	ldr	r3, [pc, #384]	; (80027dc <UART_SetConfig+0x4e4>)
 800265a:	fba3 2302 	umull	r2, r3, r3, r2
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	011c      	lsls	r4, r3, #4
 8002662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002666:	2200      	movs	r2, #0
 8002668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800266c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002670:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002674:	4642      	mov	r2, r8
 8002676:	464b      	mov	r3, r9
 8002678:	1891      	adds	r1, r2, r2
 800267a:	61b9      	str	r1, [r7, #24]
 800267c:	415b      	adcs	r3, r3
 800267e:	61fb      	str	r3, [r7, #28]
 8002680:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002684:	4641      	mov	r1, r8
 8002686:	1851      	adds	r1, r2, r1
 8002688:	6139      	str	r1, [r7, #16]
 800268a:	4649      	mov	r1, r9
 800268c:	414b      	adcs	r3, r1
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800269c:	4659      	mov	r1, fp
 800269e:	00cb      	lsls	r3, r1, #3
 80026a0:	4651      	mov	r1, sl
 80026a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026a6:	4651      	mov	r1, sl
 80026a8:	00ca      	lsls	r2, r1, #3
 80026aa:	4610      	mov	r0, r2
 80026ac:	4619      	mov	r1, r3
 80026ae:	4603      	mov	r3, r0
 80026b0:	4642      	mov	r2, r8
 80026b2:	189b      	adds	r3, r3, r2
 80026b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026b8:	464b      	mov	r3, r9
 80026ba:	460a      	mov	r2, r1
 80026bc:	eb42 0303 	adc.w	r3, r2, r3
 80026c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80026c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80026ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80026dc:	4649      	mov	r1, r9
 80026de:	008b      	lsls	r3, r1, #2
 80026e0:	4641      	mov	r1, r8
 80026e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026e6:	4641      	mov	r1, r8
 80026e8:	008a      	lsls	r2, r1, #2
 80026ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80026ee:	f7fd fdb9 	bl	8000264 <__aeabi_uldivmod>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4611      	mov	r1, r2
 80026f8:	4b38      	ldr	r3, [pc, #224]	; (80027dc <UART_SetConfig+0x4e4>)
 80026fa:	fba3 2301 	umull	r2, r3, r3, r1
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	2264      	movs	r2, #100	; 0x64
 8002702:	fb02 f303 	mul.w	r3, r2, r3
 8002706:	1acb      	subs	r3, r1, r3
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	3332      	adds	r3, #50	; 0x32
 800270c:	4a33      	ldr	r2, [pc, #204]	; (80027dc <UART_SetConfig+0x4e4>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002718:	441c      	add	r4, r3
 800271a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800271e:	2200      	movs	r2, #0
 8002720:	673b      	str	r3, [r7, #112]	; 0x70
 8002722:	677a      	str	r2, [r7, #116]	; 0x74
 8002724:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002728:	4642      	mov	r2, r8
 800272a:	464b      	mov	r3, r9
 800272c:	1891      	adds	r1, r2, r2
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	415b      	adcs	r3, r3
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002738:	4641      	mov	r1, r8
 800273a:	1851      	adds	r1, r2, r1
 800273c:	6039      	str	r1, [r7, #0]
 800273e:	4649      	mov	r1, r9
 8002740:	414b      	adcs	r3, r1
 8002742:	607b      	str	r3, [r7, #4]
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002750:	4659      	mov	r1, fp
 8002752:	00cb      	lsls	r3, r1, #3
 8002754:	4651      	mov	r1, sl
 8002756:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800275a:	4651      	mov	r1, sl
 800275c:	00ca      	lsls	r2, r1, #3
 800275e:	4610      	mov	r0, r2
 8002760:	4619      	mov	r1, r3
 8002762:	4603      	mov	r3, r0
 8002764:	4642      	mov	r2, r8
 8002766:	189b      	adds	r3, r3, r2
 8002768:	66bb      	str	r3, [r7, #104]	; 0x68
 800276a:	464b      	mov	r3, r9
 800276c:	460a      	mov	r2, r1
 800276e:	eb42 0303 	adc.w	r3, r2, r3
 8002772:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	663b      	str	r3, [r7, #96]	; 0x60
 800277e:	667a      	str	r2, [r7, #100]	; 0x64
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800278c:	4649      	mov	r1, r9
 800278e:	008b      	lsls	r3, r1, #2
 8002790:	4641      	mov	r1, r8
 8002792:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002796:	4641      	mov	r1, r8
 8002798:	008a      	lsls	r2, r1, #2
 800279a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800279e:	f7fd fd61 	bl	8000264 <__aeabi_uldivmod>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <UART_SetConfig+0x4e4>)
 80027a8:	fba3 1302 	umull	r1, r3, r3, r2
 80027ac:	095b      	lsrs	r3, r3, #5
 80027ae:	2164      	movs	r1, #100	; 0x64
 80027b0:	fb01 f303 	mul.w	r3, r1, r3
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	3332      	adds	r3, #50	; 0x32
 80027ba:	4a08      	ldr	r2, [pc, #32]	; (80027dc <UART_SetConfig+0x4e4>)
 80027bc:	fba2 2303 	umull	r2, r3, r2, r3
 80027c0:	095b      	lsrs	r3, r3, #5
 80027c2:	f003 020f 	and.w	r2, r3, #15
 80027c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4422      	add	r2, r4
 80027ce:	609a      	str	r2, [r3, #8]
}
 80027d0:	bf00      	nop
 80027d2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80027d6:	46bd      	mov	sp, r7
 80027d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027dc:	51eb851f 	.word	0x51eb851f

080027e0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f103 0208 	add.w	r2, r3, #8
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f04f 32ff 	mov.w	r2, #4294967295
 80027f8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f103 0208 	add.w	r2, r3, #8
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f103 0208 	add.w	r2, r3, #8
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800283a:	b480      	push	{r7}
 800283c:	b085      	sub	sp, #20
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	601a      	str	r2, [r3, #0]
}
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002882:	b480      	push	{r7}
 8002884:	b085      	sub	sp, #20
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002898:	d103      	bne.n	80028a2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	e00c      	b.n	80028bc <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3308      	adds	r3, #8
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	e002      	b.n	80028b0 <vListInsert+0x2e>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d2f6      	bcs.n	80028aa <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	601a      	str	r2, [r3, #0]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6892      	ldr	r2, [r2, #8]
 800290a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6852      	ldr	r2, [r2, #4]
 8002914:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	429a      	cmp	r2, r3
 800291e:	d103      	bne.n	8002928 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	1e5a      	subs	r2, r3, #1
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10a      	bne.n	8002972 <xQueueGenericReset+0x2a>
        __asm volatile
 800295c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002960:	f383 8811 	msr	BASEPRI, r3
 8002964:	f3bf 8f6f 	isb	sy
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	60bb      	str	r3, [r7, #8]
    }
 800296e:	bf00      	nop
 8002970:	e7fe      	b.n	8002970 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002972:	f002 f947 	bl	8004c04 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	68f9      	ldr	r1, [r7, #12]
 8002980:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	441a      	add	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a2:	3b01      	subs	r3, #1
 80029a4:	68f9      	ldr	r1, [r7, #12]
 80029a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	441a      	add	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	22ff      	movs	r2, #255	; 0xff
 80029b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	22ff      	movs	r2, #255	; 0xff
 80029be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d114      	bne.n	80029f2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d01a      	beq.n	8002a06 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	3310      	adds	r3, #16
 80029d4:	4618      	mov	r0, r3
 80029d6:	f001 f9a1 	bl	8003d1c <xTaskRemoveFromEventList>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d012      	beq.n	8002a06 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <xQueueGenericReset+0xcc>)
 80029e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	f3bf 8f4f 	dsb	sy
 80029ec:	f3bf 8f6f 	isb	sy
 80029f0:	e009      	b.n	8002a06 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	3310      	adds	r3, #16
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fef2 	bl	80027e0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	3324      	adds	r3, #36	; 0x24
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff feed 	bl	80027e0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002a06:	f002 f92d 	bl	8004c64 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002a0a:	2301      	movs	r3, #1
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	e000ed04 	.word	0xe000ed04

08002a18 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08c      	sub	sp, #48	; 0x30
 8002a1c:	af02      	add	r7, sp, #8
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	4613      	mov	r3, r2
 8002a24:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10a      	bne.n	8002a42 <xQueueGenericCreate+0x2a>
        __asm volatile
 8002a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	61bb      	str	r3, [r7, #24]
    }
 8002a3e:	bf00      	nop
 8002a40:	e7fe      	b.n	8002a40 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	fb02 f303 	mul.w	r3, r2, r3
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d006      	beq.n	8002a60 <xQueueGenericCreate+0x48>
 8002a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d101      	bne.n	8002a64 <xQueueGenericCreate+0x4c>
 8002a60:	2301      	movs	r3, #1
 8002a62:	e000      	b.n	8002a66 <xQueueGenericCreate+0x4e>
 8002a64:	2300      	movs	r3, #0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10a      	bne.n	8002a80 <xQueueGenericCreate+0x68>
        __asm volatile
 8002a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6e:	f383 8811 	msr	BASEPRI, r3
 8002a72:	f3bf 8f6f 	isb	sy
 8002a76:	f3bf 8f4f 	dsb	sy
 8002a7a:	617b      	str	r3, [r7, #20]
    }
 8002a7c:	bf00      	nop
 8002a7e:	e7fe      	b.n	8002a7e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002a86:	d90a      	bls.n	8002a9e <xQueueGenericCreate+0x86>
        __asm volatile
 8002a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8c:	f383 8811 	msr	BASEPRI, r3
 8002a90:	f3bf 8f6f 	isb	sy
 8002a94:	f3bf 8f4f 	dsb	sy
 8002a98:	613b      	str	r3, [r7, #16]
    }
 8002a9a:	bf00      	nop
 8002a9c:	e7fe      	b.n	8002a9c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	3350      	adds	r3, #80	; 0x50
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f002 f9da 	bl	8004e5c <pvPortMalloc>
 8002aa8:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00d      	beq.n	8002acc <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	3350      	adds	r3, #80	; 0x50
 8002ab8:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002aba:	79fa      	ldrb	r2, [r7, #7]
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	69fa      	ldr	r2, [r7, #28]
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f805 	bl	8002ad6 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002acc:	6a3b      	ldr	r3, [r7, #32]
    }
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3728      	adds	r7, #40	; 0x28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
 8002ae2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d103      	bne.n	8002af2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	e002      	b.n	8002af8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b04:	2101      	movs	r1, #1
 8002b06:	69b8      	ldr	r0, [r7, #24]
 8002b08:	f7ff ff1e 	bl	8002948 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	68f9      	ldr	r1, [r7, #12]
 8002b1a:	2073      	movs	r0, #115	; 0x73
 8002b1c:	f004 f8c4 	bl	8006ca8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b090      	sub	sp, #64	; 0x40
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b36:	2300      	movs	r3, #0
 8002b38:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10a      	bne.n	8002b5a <xQueueGenericSend+0x32>
        __asm volatile
 8002b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002b56:	bf00      	nop
 8002b58:	e7fe      	b.n	8002b58 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d103      	bne.n	8002b68 <xQueueGenericSend+0x40>
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <xQueueGenericSend+0x44>
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e000      	b.n	8002b6e <xQueueGenericSend+0x46>
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10a      	bne.n	8002b88 <xQueueGenericSend+0x60>
        __asm volatile
 8002b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b76:	f383 8811 	msr	BASEPRI, r3
 8002b7a:	f3bf 8f6f 	isb	sy
 8002b7e:	f3bf 8f4f 	dsb	sy
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002b84:	bf00      	nop
 8002b86:	e7fe      	b.n	8002b86 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d103      	bne.n	8002b96 <xQueueGenericSend+0x6e>
 8002b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d101      	bne.n	8002b9a <xQueueGenericSend+0x72>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <xQueueGenericSend+0x74>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10a      	bne.n	8002bb6 <xQueueGenericSend+0x8e>
        __asm volatile
 8002ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	623b      	str	r3, [r7, #32]
    }
 8002bb2:	bf00      	nop
 8002bb4:	e7fe      	b.n	8002bb4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bb6:	f001 fa51 	bl	800405c <xTaskGetSchedulerState>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d102      	bne.n	8002bc6 <xQueueGenericSend+0x9e>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <xQueueGenericSend+0xa2>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <xQueueGenericSend+0xa4>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10a      	bne.n	8002be6 <xQueueGenericSend+0xbe>
        __asm volatile
 8002bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd4:	f383 8811 	msr	BASEPRI, r3
 8002bd8:	f3bf 8f6f 	isb	sy
 8002bdc:	f3bf 8f4f 	dsb	sy
 8002be0:	61fb      	str	r3, [r7, #28]
    }
 8002be2:	bf00      	nop
 8002be4:	e7fe      	b.n	8002be4 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002be6:	f002 f80d 	bl	8004c04 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d302      	bcc.n	8002bfc <xQueueGenericSend+0xd4>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d136      	bne.n	8002c6a <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f004 fde0 	bl	80077c4 <SEGGER_SYSVIEW_ShrinkId>
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4601      	mov	r1, r0
 8002c10:	205a      	movs	r0, #90	; 0x5a
 8002c12:	f004 f8bf 	bl	8006d94 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c1c:	f000 fa78 	bl	8003110 <prvCopyDataToQueue>
 8002c20:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d010      	beq.n	8002c4c <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2c:	3324      	adds	r3, #36	; 0x24
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f001 f874 	bl	8003d1c <xTaskRemoveFromEventList>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d013      	beq.n	8002c62 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002c3a:	4b4d      	ldr	r3, [pc, #308]	; (8002d70 <xQueueGenericSend+0x248>)
 8002c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	f3bf 8f6f 	isb	sy
 8002c4a:	e00a      	b.n	8002c62 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d007      	beq.n	8002c62 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002c52:	4b47      	ldr	r3, [pc, #284]	; (8002d70 <xQueueGenericSend+0x248>)
 8002c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	f3bf 8f4f 	dsb	sy
 8002c5e:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002c62:	f001 ffff 	bl	8004c64 <vPortExitCritical>
                return pdPASS;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e07d      	b.n	8002d66 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d110      	bne.n	8002c92 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002c70:	f001 fff8 	bl	8004c64 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c76:	4618      	mov	r0, r3
 8002c78:	f004 fda4 	bl	80077c4 <SEGGER_SYSVIEW_ShrinkId>
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	460b      	mov	r3, r1
 8002c86:	4601      	mov	r1, r0
 8002c88:	205a      	movs	r0, #90	; 0x5a
 8002c8a:	f004 f883 	bl	8006d94 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	e069      	b.n	8002d66 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d106      	bne.n	8002ca6 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002c98:	f107 0314 	add.w	r3, r7, #20
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f001 f8a3 	bl	8003de8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002ca6:	f001 ffdd 	bl	8004c64 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002caa:	f000 fdef 	bl	800388c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002cae:	f001 ffa9 	bl	8004c04 <vPortEnterCritical>
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cb8:	b25b      	sxtb	r3, r3
 8002cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbe:	d103      	bne.n	8002cc8 <xQueueGenericSend+0x1a0>
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cce:	b25b      	sxtb	r3, r3
 8002cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd4:	d103      	bne.n	8002cde <xQueueGenericSend+0x1b6>
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cde:	f001 ffc1 	bl	8004c64 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ce2:	1d3a      	adds	r2, r7, #4
 8002ce4:	f107 0314 	add.w	r3, r7, #20
 8002ce8:	4611      	mov	r1, r2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f001 f892 	bl	8003e14 <xTaskCheckForTimeOut>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d124      	bne.n	8002d40 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002cf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cf8:	f000 fb02 	bl	8003300 <prvIsQueueFull>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d018      	beq.n	8002d34 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d04:	3310      	adds	r3, #16
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 ffb4 	bl	8003c78 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d12:	f000 fa8d 	bl	8003230 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002d16:	f000 fdc7 	bl	80038a8 <xTaskResumeAll>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f47f af62 	bne.w	8002be6 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002d22:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <xQueueGenericSend+0x248>)
 8002d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	f3bf 8f6f 	isb	sy
 8002d32:	e758      	b.n	8002be6 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d36:	f000 fa7b 	bl	8003230 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002d3a:	f000 fdb5 	bl	80038a8 <xTaskResumeAll>
 8002d3e:	e752      	b.n	8002be6 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002d40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d42:	f000 fa75 	bl	8003230 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002d46:	f000 fdaf 	bl	80038a8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f004 fd39 	bl	80077c4 <SEGGER_SYSVIEW_ShrinkId>
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4601      	mov	r1, r0
 8002d5e:	205a      	movs	r0, #90	; 0x5a
 8002d60:	f004 f818 	bl	8006d94 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002d64:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3738      	adds	r7, #56	; 0x38
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	e000ed04 	.word	0xe000ed04

08002d74 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b090      	sub	sp, #64	; 0x40
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10a      	bne.n	8002da2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002d9e:	bf00      	nop
 8002da0:	e7fe      	b.n	8002da0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d103      	bne.n	8002db0 <xQueueGenericSendFromISR+0x3c>
 8002da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <xQueueGenericSendFromISR+0x40>
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <xQueueGenericSendFromISR+0x42>
 8002db4:	2300      	movs	r3, #0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10a      	bne.n	8002dd0 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbe:	f383 8811 	msr	BASEPRI, r3
 8002dc2:	f3bf 8f6f 	isb	sy
 8002dc6:	f3bf 8f4f 	dsb	sy
 8002dca:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002dcc:	bf00      	nop
 8002dce:	e7fe      	b.n	8002dce <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d103      	bne.n	8002dde <xQueueGenericSendFromISR+0x6a>
 8002dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <xQueueGenericSendFromISR+0x6e>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <xQueueGenericSendFromISR+0x70>
 8002de2:	2300      	movs	r3, #0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10a      	bne.n	8002dfe <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dec:	f383 8811 	msr	BASEPRI, r3
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	623b      	str	r3, [r7, #32]
    }
 8002dfa:	bf00      	nop
 8002dfc:	e7fe      	b.n	8002dfc <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002dfe:	f001 ffed 	bl	8004ddc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002e02:	f3ef 8211 	mrs	r2, BASEPRI
 8002e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0a:	f383 8811 	msr	BASEPRI, r3
 8002e0e:	f3bf 8f6f 	isb	sy
 8002e12:	f3bf 8f4f 	dsb	sy
 8002e16:	61fa      	str	r2, [r7, #28]
 8002e18:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002e1a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e1c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d302      	bcc.n	8002e30 <xQueueGenericSendFromISR+0xbc>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d148      	bne.n	8002ec2 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e42:	4618      	mov	r0, r3
 8002e44:	f004 fcbe 	bl	80077c4 <SEGGER_SYSVIEW_ShrinkId>
 8002e48:	4601      	mov	r1, r0
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	2060      	movs	r0, #96	; 0x60
 8002e50:	f003 fed0 	bl	8006bf4 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002e5a:	f000 f959 	bl	8003110 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002e5e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e66:	d112      	bne.n	8002e8e <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d025      	beq.n	8002ebc <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e72:	3324      	adds	r3, #36	; 0x24
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 ff51 	bl	8003d1c <xTaskRemoveFromEventList>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d01d      	beq.n	8002ebc <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d01a      	beq.n	8002ebc <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	e016      	b.n	8002ebc <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002e8e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002e92:	2b7f      	cmp	r3, #127	; 0x7f
 8002e94:	d10a      	bne.n	8002eac <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9a:	f383 8811 	msr	BASEPRI, r3
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	617b      	str	r3, [r7, #20]
    }
 8002ea8:	bf00      	nop
 8002eaa:	e7fe      	b.n	8002eaa <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002eac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	b25a      	sxtb	r2, r3
 8002eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002ec0:	e00b      	b.n	8002eda <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f004 fc7d 	bl	80077c4 <SEGGER_SYSVIEW_ShrinkId>
 8002eca:	4601      	mov	r1, r0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	2060      	movs	r0, #96	; 0x60
 8002ed2:	f003 fe8f 	bl	8006bf4 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002edc:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002ee4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3740      	adds	r7, #64	; 0x40
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b08f      	sub	sp, #60	; 0x3c
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002efc:	2300      	movs	r3, #0
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10a      	bne.n	8002f20 <xQueueReceive+0x30>
        __asm volatile
 8002f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0e:	f383 8811 	msr	BASEPRI, r3
 8002f12:	f3bf 8f6f 	isb	sy
 8002f16:	f3bf 8f4f 	dsb	sy
 8002f1a:	623b      	str	r3, [r7, #32]
    }
 8002f1c:	bf00      	nop
 8002f1e:	e7fe      	b.n	8002f1e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d103      	bne.n	8002f2e <xQueueReceive+0x3e>
 8002f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <xQueueReceive+0x42>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <xQueueReceive+0x44>
 8002f32:	2300      	movs	r3, #0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10a      	bne.n	8002f4e <xQueueReceive+0x5e>
        __asm volatile
 8002f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3c:	f383 8811 	msr	BASEPRI, r3
 8002f40:	f3bf 8f6f 	isb	sy
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	61fb      	str	r3, [r7, #28]
    }
 8002f4a:	bf00      	nop
 8002f4c:	e7fe      	b.n	8002f4c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f4e:	f001 f885 	bl	800405c <xTaskGetSchedulerState>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d102      	bne.n	8002f5e <xQueueReceive+0x6e>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <xQueueReceive+0x72>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <xQueueReceive+0x74>
 8002f62:	2300      	movs	r3, #0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10a      	bne.n	8002f7e <xQueueReceive+0x8e>
        __asm volatile
 8002f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	61bb      	str	r3, [r7, #24]
    }
 8002f7a:	bf00      	nop
 8002f7c:	e7fe      	b.n	8002f7c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002f7e:	f001 fe41 	bl	8004c04 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d02f      	beq.n	8002fee <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f8e:	68b9      	ldr	r1, [r7, #8]
 8002f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f92:	f000 f927 	bl	80031e4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f004 fc13 	bl	80077c4 <SEGGER_SYSVIEW_ShrinkId>
 8002f9e:	4604      	mov	r4, r0
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	f004 fc0f 	bl	80077c4 <SEGGER_SYSVIEW_ShrinkId>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2101      	movs	r1, #1
 8002fac:	9100      	str	r1, [sp, #0]
 8002fae:	4621      	mov	r1, r4
 8002fb0:	205c      	movs	r0, #92	; 0x5c
 8002fb2:	f003 feef 	bl	8006d94 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	1e5a      	subs	r2, r3, #1
 8002fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00f      	beq.n	8002fe6 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc8:	3310      	adds	r3, #16
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fea6 	bl	8003d1c <xTaskRemoveFromEventList>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d007      	beq.n	8002fe6 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002fd6:	4b4d      	ldr	r3, [pc, #308]	; (800310c <xQueueReceive+0x21c>)
 8002fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002fe6:	f001 fe3d 	bl	8004c64 <vPortExitCritical>
                return pdPASS;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e08a      	b.n	8003104 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d113      	bne.n	800301c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002ff4:	f001 fe36 	bl	8004c64 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f004 fbe2 	bl	80077c4 <SEGGER_SYSVIEW_ShrinkId>
 8003000:	4604      	mov	r4, r0
 8003002:	2000      	movs	r0, #0
 8003004:	f004 fbde 	bl	80077c4 <SEGGER_SYSVIEW_ShrinkId>
 8003008:	4602      	mov	r2, r0
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2101      	movs	r1, #1
 800300e:	9100      	str	r1, [sp, #0]
 8003010:	4621      	mov	r1, r4
 8003012:	205c      	movs	r0, #92	; 0x5c
 8003014:	f003 febe 	bl	8006d94 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003018:	2300      	movs	r3, #0
 800301a:	e073      	b.n	8003104 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 800301c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301e:	2b00      	cmp	r3, #0
 8003020:	d106      	bne.n	8003030 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003022:	f107 0310 	add.w	r3, r7, #16
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fede 	bl	8003de8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800302c:	2301      	movs	r3, #1
 800302e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003030:	f001 fe18 	bl	8004c64 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003034:	f000 fc2a 	bl	800388c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003038:	f001 fde4 	bl	8004c04 <vPortEnterCritical>
 800303c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003042:	b25b      	sxtb	r3, r3
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d103      	bne.n	8003052 <xQueueReceive+0x162>
 800304a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003058:	b25b      	sxtb	r3, r3
 800305a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305e:	d103      	bne.n	8003068 <xQueueReceive+0x178>
 8003060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003068:	f001 fdfc 	bl	8004c64 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800306c:	1d3a      	adds	r2, r7, #4
 800306e:	f107 0310 	add.w	r3, r7, #16
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f000 fecd 	bl	8003e14 <xTaskCheckForTimeOut>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d124      	bne.n	80030ca <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003082:	f000 f927 	bl	80032d4 <prvIsQueueEmpty>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d018      	beq.n	80030be <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308e:	3324      	adds	r3, #36	; 0x24
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4611      	mov	r1, r2
 8003094:	4618      	mov	r0, r3
 8003096:	f000 fdef 	bl	8003c78 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800309a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800309c:	f000 f8c8 	bl	8003230 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80030a0:	f000 fc02 	bl	80038a8 <xTaskResumeAll>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f47f af69 	bne.w	8002f7e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80030ac:	4b17      	ldr	r3, [pc, #92]	; (800310c <xQueueReceive+0x21c>)
 80030ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	f3bf 8f4f 	dsb	sy
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	e75f      	b.n	8002f7e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80030be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030c0:	f000 f8b6 	bl	8003230 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80030c4:	f000 fbf0 	bl	80038a8 <xTaskResumeAll>
 80030c8:	e759      	b.n	8002f7e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80030ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030cc:	f000 f8b0 	bl	8003230 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80030d0:	f000 fbea 	bl	80038a8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030d6:	f000 f8fd 	bl	80032d4 <prvIsQueueEmpty>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f43f af4e 	beq.w	8002f7e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80030e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e4:	4618      	mov	r0, r3
 80030e6:	f004 fb6d 	bl	80077c4 <SEGGER_SYSVIEW_ShrinkId>
 80030ea:	4604      	mov	r4, r0
 80030ec:	2000      	movs	r0, #0
 80030ee:	f004 fb69 	bl	80077c4 <SEGGER_SYSVIEW_ShrinkId>
 80030f2:	4602      	mov	r2, r0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2101      	movs	r1, #1
 80030f8:	9100      	str	r1, [sp, #0]
 80030fa:	4621      	mov	r1, r4
 80030fc:	205c      	movs	r0, #92	; 0x5c
 80030fe:	f003 fe49 	bl	8006d94 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8003102:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003104:	4618      	mov	r0, r3
 8003106:	3734      	adds	r7, #52	; 0x34
 8003108:	46bd      	mov	sp, r7
 800310a:	bd90      	pop	{r4, r7, pc}
 800310c:	e000ed04 	.word	0xe000ed04

08003110 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800311c:	2300      	movs	r3, #0
 800311e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003124:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10d      	bne.n	800314a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d14d      	bne.n	80031d2 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	4618      	mov	r0, r3
 800313c:	f000 ffac 	bl	8004098 <xTaskPriorityDisinherit>
 8003140:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	e043      	b.n	80031d2 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d119      	bne.n	8003184 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6858      	ldr	r0, [r3, #4]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	461a      	mov	r2, r3
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	f004 fcf8 	bl	8007b50 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	441a      	add	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	429a      	cmp	r2, r3
 8003178:	d32b      	bcc.n	80031d2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	e026      	b.n	80031d2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	68d8      	ldr	r0, [r3, #12]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	461a      	mov	r2, r3
 800318e:	68b9      	ldr	r1, [r7, #8]
 8003190:	f004 fcde 	bl	8007b50 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	425b      	negs	r3, r3
 800319e:	441a      	add	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d207      	bcs.n	80031c0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	425b      	negs	r3, r3
 80031ba:	441a      	add	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d105      	bne.n	80031d2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80031da:	697b      	ldr	r3, [r7, #20]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d018      	beq.n	8003228 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	441a      	add	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	429a      	cmp	r2, r3
 800320e:	d303      	bcc.n	8003218 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68d9      	ldr	r1, [r3, #12]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	461a      	mov	r2, r3
 8003222:	6838      	ldr	r0, [r7, #0]
 8003224:	f004 fc94 	bl	8007b50 <memcpy>
    }
}
 8003228:	bf00      	nop
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003238:	f001 fce4 	bl	8004c04 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003242:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003244:	e011      	b.n	800326a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	2b00      	cmp	r3, #0
 800324c:	d012      	beq.n	8003274 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3324      	adds	r3, #36	; 0x24
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fd62 	bl	8003d1c <xTaskRemoveFromEventList>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800325e:	f000 fe3f 	bl	8003ee0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	3b01      	subs	r3, #1
 8003266:	b2db      	uxtb	r3, r3
 8003268:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800326a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800326e:	2b00      	cmp	r3, #0
 8003270:	dce9      	bgt.n	8003246 <prvUnlockQueue+0x16>
 8003272:	e000      	b.n	8003276 <prvUnlockQueue+0x46>
                        break;
 8003274:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	22ff      	movs	r2, #255	; 0xff
 800327a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800327e:	f001 fcf1 	bl	8004c64 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003282:	f001 fcbf 	bl	8004c04 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800328c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800328e:	e011      	b.n	80032b4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d012      	beq.n	80032be <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3310      	adds	r3, #16
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fd3d 	bl	8003d1c <xTaskRemoveFromEventList>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80032a8:	f000 fe1a 	bl	8003ee0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80032ac:	7bbb      	ldrb	r3, [r7, #14]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80032b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	dce9      	bgt.n	8003290 <prvUnlockQueue+0x60>
 80032bc:	e000      	b.n	80032c0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80032be:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	22ff      	movs	r2, #255	; 0xff
 80032c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80032c8:	f001 fccc 	bl	8004c64 <vPortExitCritical>
}
 80032cc:	bf00      	nop
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80032dc:	f001 fc92 	bl	8004c04 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d102      	bne.n	80032ee <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80032e8:	2301      	movs	r3, #1
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	e001      	b.n	80032f2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80032f2:	f001 fcb7 	bl	8004c64 <vPortExitCritical>

    return xReturn;
 80032f6:	68fb      	ldr	r3, [r7, #12]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003308:	f001 fc7c 	bl	8004c04 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003314:	429a      	cmp	r2, r3
 8003316:	d102      	bne.n	800331e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003318:	2301      	movs	r3, #1
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	e001      	b.n	8003322 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003322:	f001 fc9f 	bl	8004c64 <vPortExitCritical>

    return xReturn;
 8003326:	68fb      	ldr	r3, [r7, #12]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	e01e      	b.n	800337e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003340:	4a13      	ldr	r2, [pc, #76]	; (8003390 <vQueueAddToRegistry+0x60>)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d115      	bne.n	8003378 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800334c:	4910      	ldr	r1, [pc, #64]	; (8003390 <vQueueAddToRegistry+0x60>)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003356:	4a0e      	ldr	r2, [pc, #56]	; (8003390 <vQueueAddToRegistry+0x60>)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4413      	add	r3, r2
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4618      	mov	r0, r3
 8003366:	f004 fa2d 	bl	80077c4 <SEGGER_SYSVIEW_ShrinkId>
 800336a:	4601      	mov	r1, r0
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	2071      	movs	r0, #113	; 0x71
 8003372:	f003 fc3f 	bl	8006bf4 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8003376:	e006      	b.n	8003386 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	3301      	adds	r3, #1
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b07      	cmp	r3, #7
 8003382:	d9dd      	bls.n	8003340 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003384:	bf00      	nop
 8003386:	bf00      	nop
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	200000cc 	.word	0x200000cc

08003394 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80033a4:	f001 fc2e 	bl	8004c04 <vPortEnterCritical>
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033ae:	b25b      	sxtb	r3, r3
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b4:	d103      	bne.n	80033be <vQueueWaitForMessageRestricted+0x2a>
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033c4:	b25b      	sxtb	r3, r3
 80033c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ca:	d103      	bne.n	80033d4 <vQueueWaitForMessageRestricted+0x40>
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033d4:	f001 fc46 	bl	8004c64 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d106      	bne.n	80033ee <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	3324      	adds	r3, #36	; 0x24
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	68b9      	ldr	r1, [r7, #8]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fc69 	bl	8003cc0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80033ee:	6978      	ldr	r0, [r7, #20]
 80033f0:	f7ff ff1e 	bl	8003230 <prvUnlockQueue>
    }
 80033f4:	bf00      	nop
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08c      	sub	sp, #48	; 0x30
 8003400:	af04      	add	r7, sp, #16
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	603b      	str	r3, [r7, #0]
 8003408:	4613      	mov	r3, r2
 800340a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800340c:	88fb      	ldrh	r3, [r7, #6]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4618      	mov	r0, r3
 8003412:	f001 fd23 	bl	8004e5c <pvPortMalloc>
 8003416:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00e      	beq.n	800343c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800341e:	2058      	movs	r0, #88	; 0x58
 8003420:	f001 fd1c 	bl	8004e5c <pvPortMalloc>
 8003424:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	631a      	str	r2, [r3, #48]	; 0x30
 8003432:	e005      	b.n	8003440 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003434:	6978      	ldr	r0, [r7, #20]
 8003436:	f001 fdf1 	bl	800501c <vPortFree>
 800343a:	e001      	b.n	8003440 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800343c:	2300      	movs	r3, #0
 800343e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d013      	beq.n	800346e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003446:	88fa      	ldrh	r2, [r7, #6]
 8003448:	2300      	movs	r3, #0
 800344a:	9303      	str	r3, [sp, #12]
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	9302      	str	r3, [sp, #8]
 8003450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003452:	9301      	str	r3, [sp, #4]
 8003454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	68b9      	ldr	r1, [r7, #8]
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 f80e 	bl	800347e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003462:	69f8      	ldr	r0, [r7, #28]
 8003464:	f000 f8a2 	bl	80035ac <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003468:	2301      	movs	r3, #1
 800346a:	61bb      	str	r3, [r7, #24]
 800346c:	e002      	b.n	8003474 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800346e:	f04f 33ff 	mov.w	r3, #4294967295
 8003472:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003474:	69bb      	ldr	r3, [r7, #24]
    }
 8003476:	4618      	mov	r0, r3
 8003478:	3720      	adds	r7, #32
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b088      	sub	sp, #32
 8003482:	af00      	add	r7, sp, #0
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	607a      	str	r2, [r7, #4]
 800348a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800348c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	461a      	mov	r2, r3
 8003496:	21a5      	movs	r1, #165	; 0xa5
 8003498:	f004 fb2e 	bl	8007af8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800349c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034a6:	3b01      	subs	r3, #1
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	f023 0307 	bic.w	r3, r3, #7
 80034b4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <prvInitialiseNewTask+0x58>
        __asm volatile
 80034c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	617b      	str	r3, [r7, #20]
    }
 80034d2:	bf00      	nop
 80034d4:	e7fe      	b.n	80034d4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01f      	beq.n	800351c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034dc:	2300      	movs	r3, #0
 80034de:	61fb      	str	r3, [r7, #28]
 80034e0:	e012      	b.n	8003508 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	4413      	add	r3, r2
 80034e8:	7819      	ldrb	r1, [r3, #0]
 80034ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	4413      	add	r3, r2
 80034f0:	3334      	adds	r3, #52	; 0x34
 80034f2:	460a      	mov	r2, r1
 80034f4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	4413      	add	r3, r2
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d006      	beq.n	8003510 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	3301      	adds	r3, #1
 8003506:	61fb      	str	r3, [r7, #28]
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	2b09      	cmp	r3, #9
 800350c:	d9e9      	bls.n	80034e2 <prvInitialiseNewTask+0x64>
 800350e:	e000      	b.n	8003512 <prvInitialiseNewTask+0x94>
            {
                break;
 8003510:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800351a:	e003      	b.n	8003524 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800351c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003526:	2b04      	cmp	r3, #4
 8003528:	d901      	bls.n	800352e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800352a:	2304      	movs	r3, #4
 800352c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003532:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003538:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353c:	2200      	movs	r2, #0
 800353e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003542:	3304      	adds	r3, #4
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff f96b 	bl	8002820 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800354a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354c:	3318      	adds	r3, #24
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff f966 	bl	8002820 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003558:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	f1c3 0205 	rsb	r2, r3, #5
 8003560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003562:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003568:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800356a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356c:	3350      	adds	r3, #80	; 0x50
 800356e:	2204      	movs	r2, #4
 8003570:	2100      	movs	r1, #0
 8003572:	4618      	mov	r0, r3
 8003574:	f004 fac0 	bl	8007af8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357a:	3354      	adds	r3, #84	; 0x54
 800357c:	2201      	movs	r2, #1
 800357e:	2100      	movs	r1, #0
 8003580:	4618      	mov	r0, r3
 8003582:	f004 fab9 	bl	8007af8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	68f9      	ldr	r1, [r7, #12]
 800358a:	69b8      	ldr	r0, [r7, #24]
 800358c:	f001 f98e 	bl	80048ac <pxPortInitialiseStack>
 8003590:	4602      	mov	r2, r0
 8003592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003594:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800359c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035a0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80035a2:	bf00      	nop
 80035a4:	3720      	adds	r7, #32
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80035ac:	b5b0      	push	{r4, r5, r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af02      	add	r7, sp, #8
 80035b2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80035b4:	f001 fb26 	bl	8004c04 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80035b8:	4b3b      	ldr	r3, [pc, #236]	; (80036a8 <prvAddNewTaskToReadyList+0xfc>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3301      	adds	r3, #1
 80035be:	4a3a      	ldr	r2, [pc, #232]	; (80036a8 <prvAddNewTaskToReadyList+0xfc>)
 80035c0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80035c2:	4b3a      	ldr	r3, [pc, #232]	; (80036ac <prvAddNewTaskToReadyList+0x100>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80035ca:	4a38      	ldr	r2, [pc, #224]	; (80036ac <prvAddNewTaskToReadyList+0x100>)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035d0:	4b35      	ldr	r3, [pc, #212]	; (80036a8 <prvAddNewTaskToReadyList+0xfc>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d110      	bne.n	80035fa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80035d8:	f000 fca6 	bl	8003f28 <prvInitialiseTaskLists>
 80035dc:	e00d      	b.n	80035fa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80035de:	4b34      	ldr	r3, [pc, #208]	; (80036b0 <prvAddNewTaskToReadyList+0x104>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d109      	bne.n	80035fa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035e6:	4b31      	ldr	r3, [pc, #196]	; (80036ac <prvAddNewTaskToReadyList+0x100>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d802      	bhi.n	80035fa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80035f4:	4a2d      	ldr	r2, [pc, #180]	; (80036ac <prvAddNewTaskToReadyList+0x100>)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80035fa:	4b2e      	ldr	r3, [pc, #184]	; (80036b4 <prvAddNewTaskToReadyList+0x108>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	3301      	adds	r3, #1
 8003600:	4a2c      	ldr	r2, [pc, #176]	; (80036b4 <prvAddNewTaskToReadyList+0x108>)
 8003602:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003604:	4b2b      	ldr	r3, [pc, #172]	; (80036b4 <prvAddNewTaskToReadyList+0x108>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d016      	beq.n	8003640 <prvAddNewTaskToReadyList+0x94>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4618      	mov	r0, r3
 8003616:	f003 ffaf 	bl	8007578 <SEGGER_SYSVIEW_OnTaskCreate>
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	461d      	mov	r5, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461c      	mov	r4, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	1ae3      	subs	r3, r4, r3
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	462b      	mov	r3, r5
 800363c:	f001 febc 	bl	80053b8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4618      	mov	r0, r3
 8003644:	f004 f81c 	bl	8007680 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	2201      	movs	r2, #1
 800364e:	409a      	lsls	r2, r3
 8003650:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <prvAddNewTaskToReadyList+0x10c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4313      	orrs	r3, r2
 8003656:	4a18      	ldr	r2, [pc, #96]	; (80036b8 <prvAddNewTaskToReadyList+0x10c>)
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4a15      	ldr	r2, [pc, #84]	; (80036bc <prvAddNewTaskToReadyList+0x110>)
 8003668:	441a      	add	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3304      	adds	r3, #4
 800366e:	4619      	mov	r1, r3
 8003670:	4610      	mov	r0, r2
 8003672:	f7ff f8e2 	bl	800283a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003676:	f001 faf5 	bl	8004c64 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800367a:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <prvAddNewTaskToReadyList+0x104>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00e      	beq.n	80036a0 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003682:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <prvAddNewTaskToReadyList+0x100>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	429a      	cmp	r2, r3
 800368e:	d207      	bcs.n	80036a0 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <prvAddNewTaskToReadyList+0x114>)
 8003692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80036a0:	bf00      	nop
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bdb0      	pop	{r4, r5, r7, pc}
 80036a8:	200001e4 	.word	0x200001e4
 80036ac:	2000010c 	.word	0x2000010c
 80036b0:	200001f0 	.word	0x200001f0
 80036b4:	20000200 	.word	0x20000200
 80036b8:	200001ec 	.word	0x200001ec
 80036bc:	20000110 	.word	0x20000110
 80036c0:	e000ed04 	.word	0xe000ed04

080036c4 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08a      	sub	sp, #40	; 0x28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80036ce:	2300      	movs	r3, #0
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10a      	bne.n	80036ee <xTaskDelayUntil+0x2a>
        __asm volatile
 80036d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036dc:	f383 8811 	msr	BASEPRI, r3
 80036e0:	f3bf 8f6f 	isb	sy
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	617b      	str	r3, [r7, #20]
    }
 80036ea:	bf00      	nop
 80036ec:	e7fe      	b.n	80036ec <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10a      	bne.n	800370a <xTaskDelayUntil+0x46>
        __asm volatile
 80036f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f8:	f383 8811 	msr	BASEPRI, r3
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	613b      	str	r3, [r7, #16]
    }
 8003706:	bf00      	nop
 8003708:	e7fe      	b.n	8003708 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 800370a:	4b2c      	ldr	r3, [pc, #176]	; (80037bc <xTaskDelayUntil+0xf8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <xTaskDelayUntil+0x64>
        __asm volatile
 8003712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003716:	f383 8811 	msr	BASEPRI, r3
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	60fb      	str	r3, [r7, #12]
    }
 8003724:	bf00      	nop
 8003726:	e7fe      	b.n	8003726 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8003728:	f000 f8b0 	bl	800388c <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 800372c:	4b24      	ldr	r3, [pc, #144]	; (80037c0 <xTaskDelayUntil+0xfc>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	4413      	add	r3, r2
 800373a:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6a3a      	ldr	r2, [r7, #32]
 8003742:	429a      	cmp	r2, r3
 8003744:	d20b      	bcs.n	800375e <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69fa      	ldr	r2, [r7, #28]
 800374c:	429a      	cmp	r2, r3
 800374e:	d211      	bcs.n	8003774 <xTaskDelayUntil+0xb0>
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	429a      	cmp	r2, r3
 8003756:	d90d      	bls.n	8003774 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8003758:	2301      	movs	r3, #1
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
 800375c:	e00a      	b.n	8003774 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	429a      	cmp	r2, r3
 8003766:	d303      	bcc.n	8003770 <xTaskDelayUntil+0xac>
 8003768:	69fa      	ldr	r2, [r7, #28]
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	429a      	cmp	r2, r3
 800376e:	d901      	bls.n	8003774 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8003770:	2301      	movs	r3, #1
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	2b00      	cmp	r3, #0
 800377e:	d009      	beq.n	8003794 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8003780:	2024      	movs	r0, #36	; 0x24
 8003782:	f003 f9dd 	bl	8006b40 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2100      	movs	r1, #0
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fd02 	bl	8004198 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8003794:	f000 f888 	bl	80038a8 <xTaskResumeAll>
 8003798:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d107      	bne.n	80037b0 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 80037a0:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <xTaskDelayUntil+0x100>)
 80037a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80037b2:	4618      	mov	r0, r3
 80037b4:	3728      	adds	r7, #40	; 0x28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	2000020c 	.word	0x2000020c
 80037c0:	200001e8 	.word	0x200001e8
 80037c4:	e000ed04 	.word	0xe000ed04

080037c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80037ce:	4b27      	ldr	r3, [pc, #156]	; (800386c <vTaskStartScheduler+0xa4>)
 80037d0:	9301      	str	r3, [sp, #4]
 80037d2:	2300      	movs	r3, #0
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	2300      	movs	r3, #0
 80037d8:	2282      	movs	r2, #130	; 0x82
 80037da:	4925      	ldr	r1, [pc, #148]	; (8003870 <vTaskStartScheduler+0xa8>)
 80037dc:	4825      	ldr	r0, [pc, #148]	; (8003874 <vTaskStartScheduler+0xac>)
 80037de:	f7ff fe0d 	bl	80033fc <xTaskCreate>
 80037e2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d102      	bne.n	80037f0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80037ea:	f000 fd4d 	bl	8004288 <xTimerCreateTimerTask>
 80037ee:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d124      	bne.n	8003840 <vTaskStartScheduler+0x78>
        __asm volatile
 80037f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	60bb      	str	r3, [r7, #8]
    }
 8003808:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800380a:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <vTaskStartScheduler+0xb0>)
 800380c:	f04f 32ff 	mov.w	r2, #4294967295
 8003810:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003812:	4b1a      	ldr	r3, [pc, #104]	; (800387c <vTaskStartScheduler+0xb4>)
 8003814:	2201      	movs	r2, #1
 8003816:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003818:	4b19      	ldr	r3, [pc, #100]	; (8003880 <vTaskStartScheduler+0xb8>)
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800381e:	4b19      	ldr	r3, [pc, #100]	; (8003884 <vTaskStartScheduler+0xbc>)
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	4b12      	ldr	r3, [pc, #72]	; (800386c <vTaskStartScheduler+0xa4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d102      	bne.n	8003830 <vTaskStartScheduler+0x68>
 800382a:	f003 fe89 	bl	8007540 <SEGGER_SYSVIEW_OnIdle>
 800382e:	e004      	b.n	800383a <vTaskStartScheduler+0x72>
 8003830:	4b14      	ldr	r3, [pc, #80]	; (8003884 <vTaskStartScheduler+0xbc>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f003 fee1 	bl	80075fc <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800383a:	f001 f8c3 	bl	80049c4 <xPortStartScheduler>
 800383e:	e00e      	b.n	800385e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	d10a      	bne.n	800385e <vTaskStartScheduler+0x96>
        __asm volatile
 8003848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384c:	f383 8811 	msr	BASEPRI, r3
 8003850:	f3bf 8f6f 	isb	sy
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	607b      	str	r3, [r7, #4]
    }
 800385a:	bf00      	nop
 800385c:	e7fe      	b.n	800385c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800385e:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <vTaskStartScheduler+0xc0>)
 8003860:	681b      	ldr	r3, [r3, #0]
}
 8003862:	bf00      	nop
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	20000208 	.word	0x20000208
 8003870:	08007bf0 	.word	0x08007bf0
 8003874:	08003ef9 	.word	0x08003ef9
 8003878:	20000204 	.word	0x20000204
 800387c:	200001f0 	.word	0x200001f0
 8003880:	200001e8 	.word	0x200001e8
 8003884:	2000010c 	.word	0x2000010c
 8003888:	2000000c 	.word	0x2000000c

0800388c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003890:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <vTaskSuspendAll+0x18>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3301      	adds	r3, #1
 8003896:	4a03      	ldr	r2, [pc, #12]	; (80038a4 <vTaskSuspendAll+0x18>)
 8003898:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800389a:	bf00      	nop
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	2000020c 	.word	0x2000020c

080038a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80038b2:	2300      	movs	r3, #0
 80038b4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80038b6:	4b43      	ldr	r3, [pc, #268]	; (80039c4 <xTaskResumeAll+0x11c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10a      	bne.n	80038d4 <xTaskResumeAll+0x2c>
        __asm volatile
 80038be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	603b      	str	r3, [r7, #0]
    }
 80038d0:	bf00      	nop
 80038d2:	e7fe      	b.n	80038d2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80038d4:	f001 f996 	bl	8004c04 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80038d8:	4b3a      	ldr	r3, [pc, #232]	; (80039c4 <xTaskResumeAll+0x11c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3b01      	subs	r3, #1
 80038de:	4a39      	ldr	r2, [pc, #228]	; (80039c4 <xTaskResumeAll+0x11c>)
 80038e0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038e2:	4b38      	ldr	r3, [pc, #224]	; (80039c4 <xTaskResumeAll+0x11c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d165      	bne.n	80039b6 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038ea:	4b37      	ldr	r3, [pc, #220]	; (80039c8 <xTaskResumeAll+0x120>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d061      	beq.n	80039b6 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038f2:	e032      	b.n	800395a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038f4:	4b35      	ldr	r3, [pc, #212]	; (80039cc <xTaskResumeAll+0x124>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	3318      	adds	r3, #24
 8003900:	4618      	mov	r0, r3
 8003902:	f7fe fff7 	bl	80028f4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	3304      	adds	r3, #4
 800390a:	4618      	mov	r0, r3
 800390c:	f7fe fff2 	bl	80028f4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4618      	mov	r0, r3
 8003914:	f003 feb4 	bl	8007680 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	2201      	movs	r2, #1
 800391e:	409a      	lsls	r2, r3
 8003920:	4b2b      	ldr	r3, [pc, #172]	; (80039d0 <xTaskResumeAll+0x128>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4313      	orrs	r3, r2
 8003926:	4a2a      	ldr	r2, [pc, #168]	; (80039d0 <xTaskResumeAll+0x128>)
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4a27      	ldr	r2, [pc, #156]	; (80039d4 <xTaskResumeAll+0x12c>)
 8003938:	441a      	add	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	3304      	adds	r3, #4
 800393e:	4619      	mov	r1, r3
 8003940:	4610      	mov	r0, r2
 8003942:	f7fe ff7a 	bl	800283a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394a:	4b23      	ldr	r3, [pc, #140]	; (80039d8 <xTaskResumeAll+0x130>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	429a      	cmp	r2, r3
 8003952:	d302      	bcc.n	800395a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003954:	4b21      	ldr	r3, [pc, #132]	; (80039dc <xTaskResumeAll+0x134>)
 8003956:	2201      	movs	r2, #1
 8003958:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800395a:	4b1c      	ldr	r3, [pc, #112]	; (80039cc <xTaskResumeAll+0x124>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1c8      	bne.n	80038f4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003968:	f000 fb5c 	bl	8004024 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800396c:	4b1c      	ldr	r3, [pc, #112]	; (80039e0 <xTaskResumeAll+0x138>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d010      	beq.n	800399a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003978:	f000 f858 	bl	8003a2c <xTaskIncrementTick>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8003982:	4b16      	ldr	r3, [pc, #88]	; (80039dc <xTaskResumeAll+0x134>)
 8003984:	2201      	movs	r2, #1
 8003986:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3b01      	subs	r3, #1
 800398c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1f1      	bne.n	8003978 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003994:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <xTaskResumeAll+0x138>)
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800399a:	4b10      	ldr	r3, [pc, #64]	; (80039dc <xTaskResumeAll+0x134>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d009      	beq.n	80039b6 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80039a2:	2301      	movs	r3, #1
 80039a4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80039a6:	4b0f      	ldr	r3, [pc, #60]	; (80039e4 <xTaskResumeAll+0x13c>)
 80039a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80039b6:	f001 f955 	bl	8004c64 <vPortExitCritical>

    return xAlreadyYielded;
 80039ba:	68bb      	ldr	r3, [r7, #8]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	2000020c 	.word	0x2000020c
 80039c8:	200001e4 	.word	0x200001e4
 80039cc:	200001a4 	.word	0x200001a4
 80039d0:	200001ec 	.word	0x200001ec
 80039d4:	20000110 	.word	0x20000110
 80039d8:	2000010c 	.word	0x2000010c
 80039dc:	200001f8 	.word	0x200001f8
 80039e0:	200001f4 	.word	0x200001f4
 80039e4:	e000ed04 	.word	0xe000ed04

080039e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80039ee:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <xTaskGetTickCount+0x1c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80039f4:	687b      	ldr	r3, [r7, #4]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	200001e8 	.word	0x200001e8

08003a08 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a0e:	f001 f9e5 	bl	8004ddc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003a12:	2300      	movs	r3, #0
 8003a14:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003a16:	4b04      	ldr	r3, [pc, #16]	; (8003a28 <xTaskGetTickCountFromISR+0x20>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003a1c:	683b      	ldr	r3, [r7, #0]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	200001e8 	.word	0x200001e8

08003a2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a36:	4b50      	ldr	r3, [pc, #320]	; (8003b78 <xTaskIncrementTick+0x14c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f040 8092 	bne.w	8003b64 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a40:	4b4e      	ldr	r3, [pc, #312]	; (8003b7c <xTaskIncrementTick+0x150>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3301      	adds	r3, #1
 8003a46:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003a48:	4a4c      	ldr	r2, [pc, #304]	; (8003b7c <xTaskIncrementTick+0x150>)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d120      	bne.n	8003a96 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003a54:	4b4a      	ldr	r3, [pc, #296]	; (8003b80 <xTaskIncrementTick+0x154>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <xTaskIncrementTick+0x48>
        __asm volatile
 8003a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	603b      	str	r3, [r7, #0]
    }
 8003a70:	bf00      	nop
 8003a72:	e7fe      	b.n	8003a72 <xTaskIncrementTick+0x46>
 8003a74:	4b42      	ldr	r3, [pc, #264]	; (8003b80 <xTaskIncrementTick+0x154>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	4b42      	ldr	r3, [pc, #264]	; (8003b84 <xTaskIncrementTick+0x158>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a40      	ldr	r2, [pc, #256]	; (8003b80 <xTaskIncrementTick+0x154>)
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	4a40      	ldr	r2, [pc, #256]	; (8003b84 <xTaskIncrementTick+0x158>)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6013      	str	r3, [r2, #0]
 8003a88:	4b3f      	ldr	r3, [pc, #252]	; (8003b88 <xTaskIncrementTick+0x15c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	4a3e      	ldr	r2, [pc, #248]	; (8003b88 <xTaskIncrementTick+0x15c>)
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	f000 fac7 	bl	8004024 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003a96:	4b3d      	ldr	r3, [pc, #244]	; (8003b8c <xTaskIncrementTick+0x160>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d34c      	bcc.n	8003b3a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aa0:	4b37      	ldr	r3, [pc, #220]	; (8003b80 <xTaskIncrementTick+0x154>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d104      	bne.n	8003ab4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aaa:	4b38      	ldr	r3, [pc, #224]	; (8003b8c <xTaskIncrementTick+0x160>)
 8003aac:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab0:	601a      	str	r2, [r3, #0]
                    break;
 8003ab2:	e042      	b.n	8003b3a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ab4:	4b32      	ldr	r3, [pc, #200]	; (8003b80 <xTaskIncrementTick+0x154>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d203      	bcs.n	8003ad4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003acc:	4a2f      	ldr	r2, [pc, #188]	; (8003b8c <xTaskIncrementTick+0x160>)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ad2:	e032      	b.n	8003b3a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fe ff0b 	bl	80028f4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d004      	beq.n	8003af0 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	3318      	adds	r3, #24
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fe ff02 	bl	80028f4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f003 fdc4 	bl	8007680 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	2201      	movs	r2, #1
 8003afe:	409a      	lsls	r2, r3
 8003b00:	4b23      	ldr	r3, [pc, #140]	; (8003b90 <xTaskIncrementTick+0x164>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	4a22      	ldr	r2, [pc, #136]	; (8003b90 <xTaskIncrementTick+0x164>)
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0e:	4613      	mov	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4a1f      	ldr	r2, [pc, #124]	; (8003b94 <xTaskIncrementTick+0x168>)
 8003b18:	441a      	add	r2, r3
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4610      	mov	r0, r2
 8003b22:	f7fe fe8a 	bl	800283a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2a:	4b1b      	ldr	r3, [pc, #108]	; (8003b98 <xTaskIncrementTick+0x16c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d3b5      	bcc.n	8003aa0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003b34:	2301      	movs	r3, #1
 8003b36:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b38:	e7b2      	b.n	8003aa0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b3a:	4b17      	ldr	r3, [pc, #92]	; (8003b98 <xTaskIncrementTick+0x16c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b40:	4914      	ldr	r1, [pc, #80]	; (8003b94 <xTaskIncrementTick+0x168>)
 8003b42:	4613      	mov	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	440b      	add	r3, r1
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d901      	bls.n	8003b56 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8003b52:	2301      	movs	r3, #1
 8003b54:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003b56:	4b11      	ldr	r3, [pc, #68]	; (8003b9c <xTaskIncrementTick+0x170>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d007      	beq.n	8003b6e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	e004      	b.n	8003b6e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003b64:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <xTaskIncrementTick+0x174>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	4a0d      	ldr	r2, [pc, #52]	; (8003ba0 <xTaskIncrementTick+0x174>)
 8003b6c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003b6e:	697b      	ldr	r3, [r7, #20]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	2000020c 	.word	0x2000020c
 8003b7c:	200001e8 	.word	0x200001e8
 8003b80:	2000019c 	.word	0x2000019c
 8003b84:	200001a0 	.word	0x200001a0
 8003b88:	200001fc 	.word	0x200001fc
 8003b8c:	20000204 	.word	0x20000204
 8003b90:	200001ec 	.word	0x200001ec
 8003b94:	20000110 	.word	0x20000110
 8003b98:	2000010c 	.word	0x2000010c
 8003b9c:	200001f8 	.word	0x200001f8
 8003ba0:	200001f4 	.word	0x200001f4

08003ba4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003baa:	4b2d      	ldr	r3, [pc, #180]	; (8003c60 <vTaskSwitchContext+0xbc>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003bb2:	4b2c      	ldr	r3, [pc, #176]	; (8003c64 <vTaskSwitchContext+0xc0>)
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003bb8:	e04d      	b.n	8003c56 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003bba:	4b2a      	ldr	r3, [pc, #168]	; (8003c64 <vTaskSwitchContext+0xc0>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bc0:	4b29      	ldr	r3, [pc, #164]	; (8003c68 <vTaskSwitchContext+0xc4>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	fab3 f383 	clz	r3, r3
 8003bcc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003bce:	7afb      	ldrb	r3, [r7, #11]
 8003bd0:	f1c3 031f 	rsb	r3, r3, #31
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	4925      	ldr	r1, [pc, #148]	; (8003c6c <vTaskSwitchContext+0xc8>)
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	440b      	add	r3, r1
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10a      	bne.n	8003c00 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	607b      	str	r3, [r7, #4]
    }
 8003bfc:	bf00      	nop
 8003bfe:	e7fe      	b.n	8003bfe <vTaskSwitchContext+0x5a>
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	4613      	mov	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4a18      	ldr	r2, [pc, #96]	; (8003c6c <vTaskSwitchContext+0xc8>)
 8003c0c:	4413      	add	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	605a      	str	r2, [r3, #4]
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	3308      	adds	r3, #8
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d104      	bne.n	8003c30 <vTaskSwitchContext+0x8c>
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	605a      	str	r2, [r3, #4]
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	4a0e      	ldr	r2, [pc, #56]	; (8003c70 <vTaskSwitchContext+0xcc>)
 8003c38:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003c3a:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <vTaskSwitchContext+0xcc>)
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	4b0d      	ldr	r3, [pc, #52]	; (8003c74 <vTaskSwitchContext+0xd0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d102      	bne.n	8003c4c <vTaskSwitchContext+0xa8>
 8003c46:	f003 fc7b 	bl	8007540 <SEGGER_SYSVIEW_OnIdle>
}
 8003c4a:	e004      	b.n	8003c56 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003c4c:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <vTaskSwitchContext+0xcc>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f003 fcd3 	bl	80075fc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003c56:	bf00      	nop
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	2000020c 	.word	0x2000020c
 8003c64:	200001f8 	.word	0x200001f8
 8003c68:	200001ec 	.word	0x200001ec
 8003c6c:	20000110 	.word	0x20000110
 8003c70:	2000010c 	.word	0x2000010c
 8003c74:	20000208 	.word	0x20000208

08003c78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10a      	bne.n	8003c9e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8c:	f383 8811 	msr	BASEPRI, r3
 8003c90:	f3bf 8f6f 	isb	sy
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	60fb      	str	r3, [r7, #12]
    }
 8003c9a:	bf00      	nop
 8003c9c:	e7fe      	b.n	8003c9c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c9e:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <vTaskPlaceOnEventList+0x44>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3318      	adds	r3, #24
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7fe fdeb 	bl	8002882 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cac:	2101      	movs	r1, #1
 8003cae:	6838      	ldr	r0, [r7, #0]
 8003cb0:	f000 fa72 	bl	8004198 <prvAddCurrentTaskToDelayedList>
}
 8003cb4:	bf00      	nop
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	2000010c 	.word	0x2000010c

08003cc0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10a      	bne.n	8003ce8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	617b      	str	r3, [r7, #20]
    }
 8003ce4:	bf00      	nop
 8003ce6:	e7fe      	b.n	8003ce6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <vTaskPlaceOnEventListRestricted+0x58>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3318      	adds	r3, #24
 8003cee:	4619      	mov	r1, r3
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f7fe fda2 	bl	800283a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003d00:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003d02:	2024      	movs	r0, #36	; 0x24
 8003d04:	f002 ff1c 	bl	8006b40 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	68b8      	ldr	r0, [r7, #8]
 8003d0c:	f000 fa44 	bl	8004198 <prvAddCurrentTaskToDelayedList>
    }
 8003d10:	bf00      	nop
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	2000010c 	.word	0x2000010c

08003d1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10a      	bne.n	8003d48 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d36:	f383 8811 	msr	BASEPRI, r3
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	60fb      	str	r3, [r7, #12]
    }
 8003d44:	bf00      	nop
 8003d46:	e7fe      	b.n	8003d46 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	3318      	adds	r3, #24
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fe fdd1 	bl	80028f4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d52:	4b1f      	ldr	r3, [pc, #124]	; (8003dd0 <xTaskRemoveFromEventList+0xb4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d120      	bne.n	8003d9c <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fe fdc8 	bl	80028f4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f003 fc8a 	bl	8007680 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	2201      	movs	r2, #1
 8003d72:	409a      	lsls	r2, r3
 8003d74:	4b17      	ldr	r3, [pc, #92]	; (8003dd4 <xTaskRemoveFromEventList+0xb8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	4a16      	ldr	r2, [pc, #88]	; (8003dd4 <xTaskRemoveFromEventList+0xb8>)
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d82:	4613      	mov	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4a13      	ldr	r2, [pc, #76]	; (8003dd8 <xTaskRemoveFromEventList+0xbc>)
 8003d8c:	441a      	add	r2, r3
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	3304      	adds	r3, #4
 8003d92:	4619      	mov	r1, r3
 8003d94:	4610      	mov	r0, r2
 8003d96:	f7fe fd50 	bl	800283a <vListInsertEnd>
 8003d9a:	e005      	b.n	8003da8 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	3318      	adds	r3, #24
 8003da0:	4619      	mov	r1, r3
 8003da2:	480e      	ldr	r0, [pc, #56]	; (8003ddc <xTaskRemoveFromEventList+0xc0>)
 8003da4:	f7fe fd49 	bl	800283a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dac:	4b0c      	ldr	r3, [pc, #48]	; (8003de0 <xTaskRemoveFromEventList+0xc4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d905      	bls.n	8003dc2 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003db6:	2301      	movs	r3, #1
 8003db8:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003dba:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <xTaskRemoveFromEventList+0xc8>)
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	e001      	b.n	8003dc6 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003dc6:	697b      	ldr	r3, [r7, #20]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	2000020c 	.word	0x2000020c
 8003dd4:	200001ec 	.word	0x200001ec
 8003dd8:	20000110 	.word	0x20000110
 8003ddc:	200001a4 	.word	0x200001a4
 8003de0:	2000010c 	.word	0x2000010c
 8003de4:	200001f8 	.word	0x200001f8

08003de8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003df0:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <vTaskInternalSetTimeOutState+0x24>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003df8:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <vTaskInternalSetTimeOutState+0x28>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	605a      	str	r2, [r3, #4]
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	200001fc 	.word	0x200001fc
 8003e10:	200001e8 	.word	0x200001e8

08003e14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10a      	bne.n	8003e3a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	613b      	str	r3, [r7, #16]
    }
 8003e36:	bf00      	nop
 8003e38:	e7fe      	b.n	8003e38 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10a      	bne.n	8003e56 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	60fb      	str	r3, [r7, #12]
    }
 8003e52:	bf00      	nop
 8003e54:	e7fe      	b.n	8003e54 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003e56:	f000 fed5 	bl	8004c04 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003e5a:	4b1f      	ldr	r3, [pc, #124]	; (8003ed8 <xTaskCheckForTimeOut+0xc4>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e72:	d102      	bne.n	8003e7a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61fb      	str	r3, [r7, #28]
 8003e78:	e026      	b.n	8003ec8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	4b17      	ldr	r3, [pc, #92]	; (8003edc <xTaskCheckForTimeOut+0xc8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d00a      	beq.n	8003e9c <xTaskCheckForTimeOut+0x88>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d305      	bcc.n	8003e9c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003e90:	2301      	movs	r3, #1
 8003e92:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	e015      	b.n	8003ec8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d20b      	bcs.n	8003ebe <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	1ad2      	subs	r2, r2, r3
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff ff98 	bl	8003de8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	e004      	b.n	8003ec8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003ec8:	f000 fecc 	bl	8004c64 <vPortExitCritical>

    return xReturn;
 8003ecc:	69fb      	ldr	r3, [r7, #28]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3720      	adds	r7, #32
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	200001e8 	.word	0x200001e8
 8003edc:	200001fc 	.word	0x200001fc

08003ee0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003ee4:	4b03      	ldr	r3, [pc, #12]	; (8003ef4 <vTaskMissedYield+0x14>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]
}
 8003eea:	bf00      	nop
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	200001f8 	.word	0x200001f8

08003ef8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003f00:	f000 f852 	bl	8003fa8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f04:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <prvIdleTask+0x28>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d9f9      	bls.n	8003f00 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003f0c:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <prvIdleTask+0x2c>)
 8003f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003f1c:	e7f0      	b.n	8003f00 <prvIdleTask+0x8>
 8003f1e:	bf00      	nop
 8003f20:	20000110 	.word	0x20000110
 8003f24:	e000ed04 	.word	0xe000ed04

08003f28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f2e:	2300      	movs	r3, #0
 8003f30:	607b      	str	r3, [r7, #4]
 8003f32:	e00c      	b.n	8003f4e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	4613      	mov	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4a12      	ldr	r2, [pc, #72]	; (8003f88 <prvInitialiseTaskLists+0x60>)
 8003f40:	4413      	add	r3, r2
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe fc4c 	bl	80027e0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	607b      	str	r3, [r7, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d9ef      	bls.n	8003f34 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003f54:	480d      	ldr	r0, [pc, #52]	; (8003f8c <prvInitialiseTaskLists+0x64>)
 8003f56:	f7fe fc43 	bl	80027e0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003f5a:	480d      	ldr	r0, [pc, #52]	; (8003f90 <prvInitialiseTaskLists+0x68>)
 8003f5c:	f7fe fc40 	bl	80027e0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003f60:	480c      	ldr	r0, [pc, #48]	; (8003f94 <prvInitialiseTaskLists+0x6c>)
 8003f62:	f7fe fc3d 	bl	80027e0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003f66:	480c      	ldr	r0, [pc, #48]	; (8003f98 <prvInitialiseTaskLists+0x70>)
 8003f68:	f7fe fc3a 	bl	80027e0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003f6c:	480b      	ldr	r0, [pc, #44]	; (8003f9c <prvInitialiseTaskLists+0x74>)
 8003f6e:	f7fe fc37 	bl	80027e0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003f72:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <prvInitialiseTaskLists+0x78>)
 8003f74:	4a05      	ldr	r2, [pc, #20]	; (8003f8c <prvInitialiseTaskLists+0x64>)
 8003f76:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f78:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <prvInitialiseTaskLists+0x7c>)
 8003f7a:	4a05      	ldr	r2, [pc, #20]	; (8003f90 <prvInitialiseTaskLists+0x68>)
 8003f7c:	601a      	str	r2, [r3, #0]
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20000110 	.word	0x20000110
 8003f8c:	20000174 	.word	0x20000174
 8003f90:	20000188 	.word	0x20000188
 8003f94:	200001a4 	.word	0x200001a4
 8003f98:	200001b8 	.word	0x200001b8
 8003f9c:	200001d0 	.word	0x200001d0
 8003fa0:	2000019c 	.word	0x2000019c
 8003fa4:	200001a0 	.word	0x200001a0

08003fa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fae:	e019      	b.n	8003fe4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003fb0:	f000 fe28 	bl	8004c04 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fb4:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <prvCheckTasksWaitingTermination+0x50>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fe fc97 	bl	80028f4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003fc6:	4b0d      	ldr	r3, [pc, #52]	; (8003ffc <prvCheckTasksWaitingTermination+0x54>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	4a0b      	ldr	r2, [pc, #44]	; (8003ffc <prvCheckTasksWaitingTermination+0x54>)
 8003fce:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <prvCheckTasksWaitingTermination+0x58>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	4a0a      	ldr	r2, [pc, #40]	; (8004000 <prvCheckTasksWaitingTermination+0x58>)
 8003fd8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003fda:	f000 fe43 	bl	8004c64 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f810 	bl	8004004 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fe4:	4b06      	ldr	r3, [pc, #24]	; (8004000 <prvCheckTasksWaitingTermination+0x58>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1e1      	bne.n	8003fb0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003fec:	bf00      	nop
 8003fee:	bf00      	nop
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	200001b8 	.word	0x200001b8
 8003ffc:	200001e4 	.word	0x200001e4
 8004000:	200001cc 	.word	0x200001cc

08004004 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	4618      	mov	r0, r3
 8004012:	f001 f803 	bl	800501c <vPortFree>
                vPortFree( pxTCB );
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f001 f800 	bl	800501c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800401c:	bf00      	nop
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004028:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <prvResetNextTaskUnblockTime+0x30>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d104      	bne.n	800403c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <prvResetNextTaskUnblockTime+0x34>)
 8004034:	f04f 32ff 	mov.w	r2, #4294967295
 8004038:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800403a:	e005      	b.n	8004048 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800403c:	4b05      	ldr	r3, [pc, #20]	; (8004054 <prvResetNextTaskUnblockTime+0x30>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a04      	ldr	r2, [pc, #16]	; (8004058 <prvResetNextTaskUnblockTime+0x34>)
 8004046:	6013      	str	r3, [r2, #0]
}
 8004048:	bf00      	nop
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	2000019c 	.word	0x2000019c
 8004058:	20000204 	.word	0x20000204

0800405c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004062:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <xTaskGetSchedulerState+0x34>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d102      	bne.n	8004070 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800406a:	2301      	movs	r3, #1
 800406c:	607b      	str	r3, [r7, #4]
 800406e:	e008      	b.n	8004082 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004070:	4b08      	ldr	r3, [pc, #32]	; (8004094 <xTaskGetSchedulerState+0x38>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d102      	bne.n	800407e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004078:	2302      	movs	r3, #2
 800407a:	607b      	str	r3, [r7, #4]
 800407c:	e001      	b.n	8004082 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800407e:	2300      	movs	r3, #0
 8004080:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004082:	687b      	ldr	r3, [r7, #4]
    }
 8004084:	4618      	mov	r0, r3
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	200001f0 	.word	0x200001f0
 8004094:	2000020c 	.word	0x2000020c

08004098 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80040a4:	2300      	movs	r3, #0
 80040a6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d068      	beq.n	8004180 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80040ae:	4b37      	ldr	r3, [pc, #220]	; (800418c <xTaskPriorityDisinherit+0xf4>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d00a      	beq.n	80040ce <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80040b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040bc:	f383 8811 	msr	BASEPRI, r3
 80040c0:	f3bf 8f6f 	isb	sy
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	60fb      	str	r3, [r7, #12]
    }
 80040ca:	bf00      	nop
 80040cc:	e7fe      	b.n	80040cc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10a      	bne.n	80040ec <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80040d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040da:	f383 8811 	msr	BASEPRI, r3
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	60bb      	str	r3, [r7, #8]
    }
 80040e8:	bf00      	nop
 80040ea:	e7fe      	b.n	80040ea <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f0:	1e5a      	subs	r2, r3, #1
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040fe:	429a      	cmp	r2, r3
 8004100:	d03e      	beq.n	8004180 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004106:	2b00      	cmp	r3, #0
 8004108:	d13a      	bne.n	8004180 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	3304      	adds	r3, #4
 800410e:	4618      	mov	r0, r3
 8004110:	f7fe fbf0 	bl	80028f4 <uxListRemove>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10a      	bne.n	8004130 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	2201      	movs	r2, #1
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	43da      	mvns	r2, r3
 8004126:	4b1a      	ldr	r3, [pc, #104]	; (8004190 <xTaskPriorityDisinherit+0xf8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4013      	ands	r3, r2
 800412c:	4a18      	ldr	r2, [pc, #96]	; (8004190 <xTaskPriorityDisinherit+0xf8>)
 800412e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4619      	mov	r1, r3
 8004134:	204a      	movs	r0, #74	; 0x4a
 8004136:	f002 fd21 	bl	8006b7c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	f1c3 0205 	rsb	r2, r3, #5
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	2201      	movs	r2, #1
 8004154:	409a      	lsls	r2, r3
 8004156:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <xTaskPriorityDisinherit+0xf8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4313      	orrs	r3, r2
 800415c:	4a0c      	ldr	r2, [pc, #48]	; (8004190 <xTaskPriorityDisinherit+0xf8>)
 800415e:	6013      	str	r3, [r2, #0]
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4a09      	ldr	r2, [pc, #36]	; (8004194 <xTaskPriorityDisinherit+0xfc>)
 800416e:	441a      	add	r2, r3
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	3304      	adds	r3, #4
 8004174:	4619      	mov	r1, r3
 8004176:	4610      	mov	r0, r2
 8004178:	f7fe fb5f 	bl	800283a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800417c:	2301      	movs	r3, #1
 800417e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004180:	697b      	ldr	r3, [r7, #20]
    }
 8004182:	4618      	mov	r0, r3
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	2000010c 	.word	0x2000010c
 8004190:	200001ec 	.word	0x200001ec
 8004194:	20000110 	.word	0x20000110

08004198 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80041a2:	4b32      	ldr	r3, [pc, #200]	; (800426c <prvAddCurrentTaskToDelayedList+0xd4>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041a8:	4b31      	ldr	r3, [pc, #196]	; (8004270 <prvAddCurrentTaskToDelayedList+0xd8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3304      	adds	r3, #4
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fe fba0 	bl	80028f4 <uxListRemove>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10b      	bne.n	80041d2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80041ba:	4b2d      	ldr	r3, [pc, #180]	; (8004270 <prvAddCurrentTaskToDelayedList+0xd8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	2201      	movs	r2, #1
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43da      	mvns	r2, r3
 80041c8:	4b2a      	ldr	r3, [pc, #168]	; (8004274 <prvAddCurrentTaskToDelayedList+0xdc>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4013      	ands	r3, r2
 80041ce:	4a29      	ldr	r2, [pc, #164]	; (8004274 <prvAddCurrentTaskToDelayedList+0xdc>)
 80041d0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d8:	d110      	bne.n	80041fc <prvAddCurrentTaskToDelayedList+0x64>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00d      	beq.n	80041fc <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80041e0:	4b23      	ldr	r3, [pc, #140]	; (8004270 <prvAddCurrentTaskToDelayedList+0xd8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	211b      	movs	r1, #27
 80041e6:	4618      	mov	r0, r3
 80041e8:	f003 fa8c 	bl	8007704 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041ec:	4b20      	ldr	r3, [pc, #128]	; (8004270 <prvAddCurrentTaskToDelayedList+0xd8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3304      	adds	r3, #4
 80041f2:	4619      	mov	r1, r3
 80041f4:	4820      	ldr	r0, [pc, #128]	; (8004278 <prvAddCurrentTaskToDelayedList+0xe0>)
 80041f6:	f7fe fb20 	bl	800283a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80041fa:	e032      	b.n	8004262 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4413      	add	r3, r2
 8004202:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004204:	4b1a      	ldr	r3, [pc, #104]	; (8004270 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	429a      	cmp	r2, r3
 8004212:	d20f      	bcs.n	8004234 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004214:	4b16      	ldr	r3, [pc, #88]	; (8004270 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2104      	movs	r1, #4
 800421a:	4618      	mov	r0, r3
 800421c:	f003 fa72 	bl	8007704 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004220:	4b16      	ldr	r3, [pc, #88]	; (800427c <prvAddCurrentTaskToDelayedList+0xe4>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	4b12      	ldr	r3, [pc, #72]	; (8004270 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3304      	adds	r3, #4
 800422a:	4619      	mov	r1, r3
 800422c:	4610      	mov	r0, r2
 800422e:	f7fe fb28 	bl	8002882 <vListInsert>
}
 8004232:	e016      	b.n	8004262 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8004234:	4b0e      	ldr	r3, [pc, #56]	; (8004270 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2104      	movs	r1, #4
 800423a:	4618      	mov	r0, r3
 800423c:	f003 fa62 	bl	8007704 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004240:	4b0f      	ldr	r3, [pc, #60]	; (8004280 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	4b0a      	ldr	r3, [pc, #40]	; (8004270 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3304      	adds	r3, #4
 800424a:	4619      	mov	r1, r3
 800424c:	4610      	mov	r0, r2
 800424e:	f7fe fb18 	bl	8002882 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004252:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <prvAddCurrentTaskToDelayedList+0xec>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	429a      	cmp	r2, r3
 800425a:	d202      	bcs.n	8004262 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800425c:	4a09      	ldr	r2, [pc, #36]	; (8004284 <prvAddCurrentTaskToDelayedList+0xec>)
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	6013      	str	r3, [r2, #0]
}
 8004262:	bf00      	nop
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	200001e8 	.word	0x200001e8
 8004270:	2000010c 	.word	0x2000010c
 8004274:	200001ec 	.word	0x200001ec
 8004278:	200001d0 	.word	0x200001d0
 800427c:	200001a0 	.word	0x200001a0
 8004280:	2000019c 	.word	0x2000019c
 8004284:	20000204 	.word	0x20000204

08004288 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800428e:	2300      	movs	r3, #0
 8004290:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004292:	f000 fad5 	bl	8004840 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004296:	4b11      	ldr	r3, [pc, #68]	; (80042dc <xTimerCreateTimerTask+0x54>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00b      	beq.n	80042b6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800429e:	4b10      	ldr	r3, [pc, #64]	; (80042e0 <xTimerCreateTimerTask+0x58>)
 80042a0:	9301      	str	r3, [sp, #4]
 80042a2:	2302      	movs	r3, #2
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	2300      	movs	r3, #0
 80042a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80042ac:	490d      	ldr	r1, [pc, #52]	; (80042e4 <xTimerCreateTimerTask+0x5c>)
 80042ae:	480e      	ldr	r0, [pc, #56]	; (80042e8 <xTimerCreateTimerTask+0x60>)
 80042b0:	f7ff f8a4 	bl	80033fc <xTaskCreate>
 80042b4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10a      	bne.n	80042d2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	603b      	str	r3, [r7, #0]
    }
 80042ce:	bf00      	nop
 80042d0:	e7fe      	b.n	80042d0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80042d2:	687b      	ldr	r3, [r7, #4]
    }
 80042d4:	4618      	mov	r0, r3
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	20000240 	.word	0x20000240
 80042e0:	20000244 	.word	0x20000244
 80042e4:	08007bf8 	.word	0x08007bf8
 80042e8:	08004421 	.word	0x08004421

080042ec <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08a      	sub	sp, #40	; 0x28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10a      	bne.n	800431a <xTimerGenericCommand+0x2e>
        __asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	623b      	str	r3, [r7, #32]
    }
 8004316:	bf00      	nop
 8004318:	e7fe      	b.n	8004318 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800431a:	4b1a      	ldr	r3, [pc, #104]	; (8004384 <xTimerGenericCommand+0x98>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d02a      	beq.n	8004378 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b05      	cmp	r3, #5
 8004332:	dc18      	bgt.n	8004366 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004334:	f7ff fe92 	bl	800405c <xTaskGetSchedulerState>
 8004338:	4603      	mov	r3, r0
 800433a:	2b02      	cmp	r3, #2
 800433c:	d109      	bne.n	8004352 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800433e:	4b11      	ldr	r3, [pc, #68]	; (8004384 <xTimerGenericCommand+0x98>)
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	f107 0114 	add.w	r1, r7, #20
 8004346:	2300      	movs	r3, #0
 8004348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800434a:	f7fe fbed 	bl	8002b28 <xQueueGenericSend>
 800434e:	6278      	str	r0, [r7, #36]	; 0x24
 8004350:	e012      	b.n	8004378 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004352:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <xTimerGenericCommand+0x98>)
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	f107 0114 	add.w	r1, r7, #20
 800435a:	2300      	movs	r3, #0
 800435c:	2200      	movs	r2, #0
 800435e:	f7fe fbe3 	bl	8002b28 <xQueueGenericSend>
 8004362:	6278      	str	r0, [r7, #36]	; 0x24
 8004364:	e008      	b.n	8004378 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004366:	4b07      	ldr	r3, [pc, #28]	; (8004384 <xTimerGenericCommand+0x98>)
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	f107 0114 	add.w	r1, r7, #20
 800436e:	2300      	movs	r3, #0
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	f7fe fcff 	bl	8002d74 <xQueueGenericSendFromISR>
 8004376:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800437a:	4618      	mov	r0, r3
 800437c:	3728      	adds	r7, #40	; 0x28
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	20000240 	.word	0x20000240

08004388 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af02      	add	r7, sp, #8
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004392:	4b22      	ldr	r3, [pc, #136]	; (800441c <prvProcessExpiredTimer+0x94>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	3304      	adds	r3, #4
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fe faa7 	bl	80028f4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d022      	beq.n	80043fa <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	699a      	ldr	r2, [r3, #24]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	18d1      	adds	r1, r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	6978      	ldr	r0, [r7, #20]
 80043c2:	f000 f8d1 	bl	8004568 <prvInsertTimerInActiveList>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d01f      	beq.n	800440c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043cc:	2300      	movs	r3, #0
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	2300      	movs	r3, #0
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	2100      	movs	r1, #0
 80043d6:	6978      	ldr	r0, [r7, #20]
 80043d8:	f7ff ff88 	bl	80042ec <xTimerGenericCommand>
 80043dc:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d113      	bne.n	800440c <prvProcessExpiredTimer+0x84>
        __asm volatile
 80043e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e8:	f383 8811 	msr	BASEPRI, r3
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	60fb      	str	r3, [r7, #12]
    }
 80043f6:	bf00      	nop
 80043f8:	e7fe      	b.n	80043f8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	b2da      	uxtb	r2, r3
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	6978      	ldr	r0, [r7, #20]
 8004412:	4798      	blx	r3
    }
 8004414:	bf00      	nop
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	20000238 	.word	0x20000238

08004420 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004428:	f107 0308 	add.w	r3, r7, #8
 800442c:	4618      	mov	r0, r3
 800442e:	f000 f857 	bl	80044e0 <prvGetNextExpireTime>
 8004432:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4619      	mov	r1, r3
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 f803 	bl	8004444 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800443e:	f000 f8d5 	bl	80045ec <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004442:	e7f1      	b.n	8004428 <prvTimerTask+0x8>

08004444 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800444e:	f7ff fa1d 	bl	800388c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004452:	f107 0308 	add.w	r3, r7, #8
 8004456:	4618      	mov	r0, r3
 8004458:	f000 f866 	bl	8004528 <prvSampleTimeNow>
 800445c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d130      	bne.n	80044c6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10a      	bne.n	8004480 <prvProcessTimerOrBlockTask+0x3c>
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	429a      	cmp	r2, r3
 8004470:	d806      	bhi.n	8004480 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004472:	f7ff fa19 	bl	80038a8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004476:	68f9      	ldr	r1, [r7, #12]
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff ff85 	bl	8004388 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800447e:	e024      	b.n	80044ca <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d008      	beq.n	8004498 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004486:	4b13      	ldr	r3, [pc, #76]	; (80044d4 <prvProcessTimerOrBlockTask+0x90>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <prvProcessTimerOrBlockTask+0x50>
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <prvProcessTimerOrBlockTask+0x52>
 8004494:	2300      	movs	r3, #0
 8004496:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004498:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <prvProcessTimerOrBlockTask+0x94>)
 800449a:	6818      	ldr	r0, [r3, #0]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	4619      	mov	r1, r3
 80044a6:	f7fe ff75 	bl	8003394 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80044aa:	f7ff f9fd 	bl	80038a8 <xTaskResumeAll>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10a      	bne.n	80044ca <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80044b4:	4b09      	ldr	r3, [pc, #36]	; (80044dc <prvProcessTimerOrBlockTask+0x98>)
 80044b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	f3bf 8f6f 	isb	sy
    }
 80044c4:	e001      	b.n	80044ca <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80044c6:	f7ff f9ef 	bl	80038a8 <xTaskResumeAll>
    }
 80044ca:	bf00      	nop
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	2000023c 	.word	0x2000023c
 80044d8:	20000240 	.word	0x20000240
 80044dc:	e000ed04 	.word	0xe000ed04

080044e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80044e8:	4b0e      	ldr	r3, [pc, #56]	; (8004524 <prvGetNextExpireTime+0x44>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <prvGetNextExpireTime+0x16>
 80044f2:	2201      	movs	r2, #1
 80044f4:	e000      	b.n	80044f8 <prvGetNextExpireTime+0x18>
 80044f6:	2200      	movs	r2, #0
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d105      	bne.n	8004510 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004504:	4b07      	ldr	r3, [pc, #28]	; (8004524 <prvGetNextExpireTime+0x44>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	e001      	b.n	8004514 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004514:	68fb      	ldr	r3, [r7, #12]
    }
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20000238 	.word	0x20000238

08004528 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004530:	f7ff fa5a 	bl	80039e8 <xTaskGetTickCount>
 8004534:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004536:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <prvSampleTimeNow+0x3c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	429a      	cmp	r2, r3
 800453e:	d205      	bcs.n	800454c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004540:	f000 f91a 	bl	8004778 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	e002      	b.n	8004552 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004552:	4a04      	ldr	r2, [pc, #16]	; (8004564 <prvSampleTimeNow+0x3c>)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004558:	68fb      	ldr	r3, [r7, #12]
    }
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20000248 	.word	0x20000248

08004568 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004576:	2300      	movs	r3, #0
 8004578:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	429a      	cmp	r2, r3
 800458c:	d812      	bhi.n	80045b4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	1ad2      	subs	r2, r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	429a      	cmp	r2, r3
 800459a:	d302      	bcc.n	80045a2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800459c:	2301      	movs	r3, #1
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	e01b      	b.n	80045da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80045a2:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <prvInsertTimerInActiveList+0x7c>)
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	3304      	adds	r3, #4
 80045aa:	4619      	mov	r1, r3
 80045ac:	4610      	mov	r0, r2
 80045ae:	f7fe f968 	bl	8002882 <vListInsert>
 80045b2:	e012      	b.n	80045da <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d206      	bcs.n	80045ca <prvInsertTimerInActiveList+0x62>
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d302      	bcc.n	80045ca <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80045c4:	2301      	movs	r3, #1
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	e007      	b.n	80045da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045ca:	4b07      	ldr	r3, [pc, #28]	; (80045e8 <prvInsertTimerInActiveList+0x80>)
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3304      	adds	r3, #4
 80045d2:	4619      	mov	r1, r3
 80045d4:	4610      	mov	r0, r2
 80045d6:	f7fe f954 	bl	8002882 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80045da:	697b      	ldr	r3, [r7, #20]
    }
 80045dc:	4618      	mov	r0, r3
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	2000023c 	.word	0x2000023c
 80045e8:	20000238 	.word	0x20000238

080045ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08c      	sub	sp, #48	; 0x30
 80045f0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80045f2:	e0ae      	b.n	8004752 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f2c0 80ab 	blt.w	8004752 <prvProcessReceivedCommands+0x166>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d004      	beq.n	8004612 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	3304      	adds	r3, #4
 800460c:	4618      	mov	r0, r3
 800460e:	f7fe f971 	bl	80028f4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004612:	1d3b      	adds	r3, r7, #4
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff ff87 	bl	8004528 <prvSampleTimeNow>
 800461a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b09      	cmp	r3, #9
 8004620:	f200 8096 	bhi.w	8004750 <prvProcessReceivedCommands+0x164>
 8004624:	a201      	add	r2, pc, #4	; (adr r2, 800462c <prvProcessReceivedCommands+0x40>)
 8004626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462a:	bf00      	nop
 800462c:	08004655 	.word	0x08004655
 8004630:	08004655 	.word	0x08004655
 8004634:	08004655 	.word	0x08004655
 8004638:	080046c9 	.word	0x080046c9
 800463c:	080046dd 	.word	0x080046dd
 8004640:	08004727 	.word	0x08004727
 8004644:	08004655 	.word	0x08004655
 8004648:	08004655 	.word	0x08004655
 800464c:	080046c9 	.word	0x080046c9
 8004650:	080046dd 	.word	0x080046dd
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	b2da      	uxtb	r2, r3
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	18d1      	adds	r1, r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a3a      	ldr	r2, [r7, #32]
 8004672:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004674:	f7ff ff78 	bl	8004568 <prvInsertTimerInActiveList>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d069      	beq.n	8004752 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004684:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d05e      	beq.n	8004752 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	441a      	add	r2, r3
 800469c:	2300      	movs	r3, #0
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	2300      	movs	r3, #0
 80046a2:	2100      	movs	r1, #0
 80046a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046a6:	f7ff fe21 	bl	80042ec <xTimerGenericCommand>
 80046aa:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d14f      	bne.n	8004752 <prvProcessReceivedCommands+0x166>
        __asm volatile
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	61bb      	str	r3, [r7, #24]
    }
 80046c4:	bf00      	nop
 80046c6:	e7fe      	b.n	80046c6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046ce:	f023 0301 	bic.w	r3, r3, #1
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80046da:	e03a      	b.n	8004752 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046e2:	f043 0301 	orr.w	r3, r3, #1
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10a      	bne.n	8004712 <prvProcessReceivedCommands+0x126>
        __asm volatile
 80046fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	617b      	str	r3, [r7, #20]
    }
 800470e:	bf00      	nop
 8004710:	e7fe      	b.n	8004710 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	699a      	ldr	r2, [r3, #24]
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	18d1      	adds	r1, r2, r3
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	6a3a      	ldr	r2, [r7, #32]
 800471e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004720:	f7ff ff22 	bl	8004568 <prvInsertTimerInActiveList>
                        break;
 8004724:	e015      	b.n	8004752 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d103      	bne.n	800473c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004734:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004736:	f000 fc71 	bl	800501c <vPortFree>
 800473a:	e00a      	b.n	8004752 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004742:	f023 0301 	bic.w	r3, r3, #1
 8004746:	b2da      	uxtb	r2, r3
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800474e:	e000      	b.n	8004752 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004750:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004752:	4b08      	ldr	r3, [pc, #32]	; (8004774 <prvProcessReceivedCommands+0x188>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f107 0108 	add.w	r1, r7, #8
 800475a:	2200      	movs	r2, #0
 800475c:	4618      	mov	r0, r3
 800475e:	f7fe fbc7 	bl	8002ef0 <xQueueReceive>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	f47f af45 	bne.w	80045f4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800476a:	bf00      	nop
 800476c:	bf00      	nop
 800476e:	3728      	adds	r7, #40	; 0x28
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	20000240 	.word	0x20000240

08004778 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800477e:	e048      	b.n	8004812 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004780:	4b2d      	ldr	r3, [pc, #180]	; (8004838 <prvSwitchTimerLists+0xc0>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800478a:	4b2b      	ldr	r3, [pc, #172]	; (8004838 <prvSwitchTimerLists+0xc0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3304      	adds	r3, #4
 8004798:	4618      	mov	r0, r3
 800479a:	f7fe f8ab 	bl	80028f4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d02e      	beq.n	8004812 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4413      	add	r3, r2
 80047bc:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d90e      	bls.n	80047e4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047d2:	4b19      	ldr	r3, [pc, #100]	; (8004838 <prvSwitchTimerLists+0xc0>)
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	3304      	adds	r3, #4
 80047da:	4619      	mov	r1, r3
 80047dc:	4610      	mov	r0, r2
 80047de:	f7fe f850 	bl	8002882 <vListInsert>
 80047e2:	e016      	b.n	8004812 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047e4:	2300      	movs	r3, #0
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	2300      	movs	r3, #0
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	2100      	movs	r1, #0
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f7ff fd7c 	bl	80042ec <xTimerGenericCommand>
 80047f4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10a      	bne.n	8004812 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80047fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004800:	f383 8811 	msr	BASEPRI, r3
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	603b      	str	r3, [r7, #0]
    }
 800480e:	bf00      	nop
 8004810:	e7fe      	b.n	8004810 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004812:	4b09      	ldr	r3, [pc, #36]	; (8004838 <prvSwitchTimerLists+0xc0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1b1      	bne.n	8004780 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800481c:	4b06      	ldr	r3, [pc, #24]	; (8004838 <prvSwitchTimerLists+0xc0>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004822:	4b06      	ldr	r3, [pc, #24]	; (800483c <prvSwitchTimerLists+0xc4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a04      	ldr	r2, [pc, #16]	; (8004838 <prvSwitchTimerLists+0xc0>)
 8004828:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800482a:	4a04      	ldr	r2, [pc, #16]	; (800483c <prvSwitchTimerLists+0xc4>)
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	6013      	str	r3, [r2, #0]
    }
 8004830:	bf00      	nop
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	20000238 	.word	0x20000238
 800483c:	2000023c 	.word	0x2000023c

08004840 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004844:	f000 f9de 	bl	8004c04 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004848:	4b12      	ldr	r3, [pc, #72]	; (8004894 <prvCheckForValidListAndQueue+0x54>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d11d      	bne.n	800488c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004850:	4811      	ldr	r0, [pc, #68]	; (8004898 <prvCheckForValidListAndQueue+0x58>)
 8004852:	f7fd ffc5 	bl	80027e0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004856:	4811      	ldr	r0, [pc, #68]	; (800489c <prvCheckForValidListAndQueue+0x5c>)
 8004858:	f7fd ffc2 	bl	80027e0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800485c:	4b10      	ldr	r3, [pc, #64]	; (80048a0 <prvCheckForValidListAndQueue+0x60>)
 800485e:	4a0e      	ldr	r2, [pc, #56]	; (8004898 <prvCheckForValidListAndQueue+0x58>)
 8004860:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004862:	4b10      	ldr	r3, [pc, #64]	; (80048a4 <prvCheckForValidListAndQueue+0x64>)
 8004864:	4a0d      	ldr	r2, [pc, #52]	; (800489c <prvCheckForValidListAndQueue+0x5c>)
 8004866:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004868:	2200      	movs	r2, #0
 800486a:	210c      	movs	r1, #12
 800486c:	200a      	movs	r0, #10
 800486e:	f7fe f8d3 	bl	8002a18 <xQueueGenericCreate>
 8004872:	4603      	mov	r3, r0
 8004874:	4a07      	ldr	r2, [pc, #28]	; (8004894 <prvCheckForValidListAndQueue+0x54>)
 8004876:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004878:	4b06      	ldr	r3, [pc, #24]	; (8004894 <prvCheckForValidListAndQueue+0x54>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004880:	4b04      	ldr	r3, [pc, #16]	; (8004894 <prvCheckForValidListAndQueue+0x54>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4908      	ldr	r1, [pc, #32]	; (80048a8 <prvCheckForValidListAndQueue+0x68>)
 8004886:	4618      	mov	r0, r3
 8004888:	f7fe fd52 	bl	8003330 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800488c:	f000 f9ea 	bl	8004c64 <vPortExitCritical>
    }
 8004890:	bf00      	nop
 8004892:	bd80      	pop	{r7, pc}
 8004894:	20000240 	.word	0x20000240
 8004898:	20000210 	.word	0x20000210
 800489c:	20000224 	.word	0x20000224
 80048a0:	20000238 	.word	0x20000238
 80048a4:	2000023c 	.word	0x2000023c
 80048a8:	08007c00 	.word	0x08007c00

080048ac <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3b04      	subs	r3, #4
 80048bc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048c4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3b04      	subs	r3, #4
 80048ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f023 0201 	bic.w	r2, r3, #1
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3b04      	subs	r3, #4
 80048da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80048dc:	4a0c      	ldr	r2, [pc, #48]	; (8004910 <pxPortInitialiseStack+0x64>)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3b14      	subs	r3, #20
 80048e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3b04      	subs	r3, #4
 80048f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f06f 0202 	mvn.w	r2, #2
 80048fa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	3b20      	subs	r3, #32
 8004900:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004902:	68fb      	ldr	r3, [r7, #12]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	08004915 	.word	0x08004915

08004914 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800491a:	2300      	movs	r3, #0
 800491c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800491e:	4b12      	ldr	r3, [pc, #72]	; (8004968 <prvTaskExitError+0x54>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004926:	d00a      	beq.n	800493e <prvTaskExitError+0x2a>
        __asm volatile
 8004928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492c:	f383 8811 	msr	BASEPRI, r3
 8004930:	f3bf 8f6f 	isb	sy
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	60fb      	str	r3, [r7, #12]
    }
 800493a:	bf00      	nop
 800493c:	e7fe      	b.n	800493c <prvTaskExitError+0x28>
        __asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	60bb      	str	r3, [r7, #8]
    }
 8004950:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004952:	bf00      	nop
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0fc      	beq.n	8004954 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800495a:	bf00      	nop
 800495c:	bf00      	nop
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	20000010 	.word	0x20000010
 800496c:	00000000 	.word	0x00000000

08004970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004970:	4b07      	ldr	r3, [pc, #28]	; (8004990 <pxCurrentTCBConst2>)
 8004972:	6819      	ldr	r1, [r3, #0]
 8004974:	6808      	ldr	r0, [r1, #0]
 8004976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800497a:	f380 8809 	msr	PSP, r0
 800497e:	f3bf 8f6f 	isb	sy
 8004982:	f04f 0000 	mov.w	r0, #0
 8004986:	f380 8811 	msr	BASEPRI, r0
 800498a:	4770      	bx	lr
 800498c:	f3af 8000 	nop.w

08004990 <pxCurrentTCBConst2>:
 8004990:	2000010c 	.word	0x2000010c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004994:	bf00      	nop
 8004996:	bf00      	nop

08004998 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004998:	4808      	ldr	r0, [pc, #32]	; (80049bc <prvPortStartFirstTask+0x24>)
 800499a:	6800      	ldr	r0, [r0, #0]
 800499c:	6800      	ldr	r0, [r0, #0]
 800499e:	f380 8808 	msr	MSP, r0
 80049a2:	f04f 0000 	mov.w	r0, #0
 80049a6:	f380 8814 	msr	CONTROL, r0
 80049aa:	b662      	cpsie	i
 80049ac:	b661      	cpsie	f
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	df00      	svc	0
 80049b8:	bf00      	nop
 80049ba:	0000      	.short	0x0000
 80049bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80049c0:	bf00      	nop
 80049c2:	bf00      	nop

080049c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80049ca:	4b46      	ldr	r3, [pc, #280]	; (8004ae4 <xPortStartScheduler+0x120>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a46      	ldr	r2, [pc, #280]	; (8004ae8 <xPortStartScheduler+0x124>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d10a      	bne.n	80049ea <xPortStartScheduler+0x26>
        __asm volatile
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	613b      	str	r3, [r7, #16]
    }
 80049e6:	bf00      	nop
 80049e8:	e7fe      	b.n	80049e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80049ea:	4b3e      	ldr	r3, [pc, #248]	; (8004ae4 <xPortStartScheduler+0x120>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a3f      	ldr	r2, [pc, #252]	; (8004aec <xPortStartScheduler+0x128>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d10a      	bne.n	8004a0a <xPortStartScheduler+0x46>
        __asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	60fb      	str	r3, [r7, #12]
    }
 8004a06:	bf00      	nop
 8004a08:	e7fe      	b.n	8004a08 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a0a:	4b39      	ldr	r3, [pc, #228]	; (8004af0 <xPortStartScheduler+0x12c>)
 8004a0c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	22ff      	movs	r2, #255	; 0xff
 8004a1a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	4b31      	ldr	r3, [pc, #196]	; (8004af4 <xPortStartScheduler+0x130>)
 8004a30:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a32:	4b31      	ldr	r3, [pc, #196]	; (8004af8 <xPortStartScheduler+0x134>)
 8004a34:	2207      	movs	r2, #7
 8004a36:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a38:	e009      	b.n	8004a4e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004a3a:	4b2f      	ldr	r3, [pc, #188]	; (8004af8 <xPortStartScheduler+0x134>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	4a2d      	ldr	r2, [pc, #180]	; (8004af8 <xPortStartScheduler+0x134>)
 8004a42:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a4e:	78fb      	ldrb	r3, [r7, #3]
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a56:	2b80      	cmp	r3, #128	; 0x80
 8004a58:	d0ef      	beq.n	8004a3a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a5a:	4b27      	ldr	r3, [pc, #156]	; (8004af8 <xPortStartScheduler+0x134>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f1c3 0307 	rsb	r3, r3, #7
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d00a      	beq.n	8004a7c <xPortStartScheduler+0xb8>
        __asm volatile
 8004a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	60bb      	str	r3, [r7, #8]
    }
 8004a78:	bf00      	nop
 8004a7a:	e7fe      	b.n	8004a7a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a7c:	4b1e      	ldr	r3, [pc, #120]	; (8004af8 <xPortStartScheduler+0x134>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	021b      	lsls	r3, r3, #8
 8004a82:	4a1d      	ldr	r2, [pc, #116]	; (8004af8 <xPortStartScheduler+0x134>)
 8004a84:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a86:	4b1c      	ldr	r3, [pc, #112]	; (8004af8 <xPortStartScheduler+0x134>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a8e:	4a1a      	ldr	r2, [pc, #104]	; (8004af8 <xPortStartScheduler+0x134>)
 8004a90:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004a9a:	4b18      	ldr	r3, [pc, #96]	; (8004afc <xPortStartScheduler+0x138>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a17      	ldr	r2, [pc, #92]	; (8004afc <xPortStartScheduler+0x138>)
 8004aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004aa4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004aa6:	4b15      	ldr	r3, [pc, #84]	; (8004afc <xPortStartScheduler+0x138>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a14      	ldr	r2, [pc, #80]	; (8004afc <xPortStartScheduler+0x138>)
 8004aac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004ab0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004ab2:	f000 f963 	bl	8004d7c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004ab6:	4b12      	ldr	r3, [pc, #72]	; (8004b00 <xPortStartScheduler+0x13c>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004abc:	f000 f982 	bl	8004dc4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ac0:	4b10      	ldr	r3, [pc, #64]	; (8004b04 <xPortStartScheduler+0x140>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a0f      	ldr	r2, [pc, #60]	; (8004b04 <xPortStartScheduler+0x140>)
 8004ac6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004aca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004acc:	f7ff ff64 	bl	8004998 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004ad0:	f7ff f868 	bl	8003ba4 <vTaskSwitchContext>
    prvTaskExitError();
 8004ad4:	f7ff ff1e 	bl	8004914 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	e000ed00 	.word	0xe000ed00
 8004ae8:	410fc271 	.word	0x410fc271
 8004aec:	410fc270 	.word	0x410fc270
 8004af0:	e000e400 	.word	0xe000e400
 8004af4:	2000024c 	.word	0x2000024c
 8004af8:	20000250 	.word	0x20000250
 8004afc:	e000ed20 	.word	0xe000ed20
 8004b00:	20000010 	.word	0x20000010
 8004b04:	e000ef34 	.word	0xe000ef34

08004b08 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b0e:	4b37      	ldr	r3, [pc, #220]	; (8004bec <vInitPrioGroupValue+0xe4>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a37      	ldr	r2, [pc, #220]	; (8004bf0 <vInitPrioGroupValue+0xe8>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d10a      	bne.n	8004b2e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	613b      	str	r3, [r7, #16]
    }
 8004b2a:	bf00      	nop
 8004b2c:	e7fe      	b.n	8004b2c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b2e:	4b2f      	ldr	r3, [pc, #188]	; (8004bec <vInitPrioGroupValue+0xe4>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a30      	ldr	r2, [pc, #192]	; (8004bf4 <vInitPrioGroupValue+0xec>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d10a      	bne.n	8004b4e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	60fb      	str	r3, [r7, #12]
    }
 8004b4a:	bf00      	nop
 8004b4c:	e7fe      	b.n	8004b4c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b4e:	4b2a      	ldr	r3, [pc, #168]	; (8004bf8 <vInitPrioGroupValue+0xf0>)
 8004b50:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	22ff      	movs	r2, #255	; 0xff
 8004b5e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	4b22      	ldr	r3, [pc, #136]	; (8004bfc <vInitPrioGroupValue+0xf4>)
 8004b74:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b76:	4b22      	ldr	r3, [pc, #136]	; (8004c00 <vInitPrioGroupValue+0xf8>)
 8004b78:	2207      	movs	r2, #7
 8004b7a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b7c:	e009      	b.n	8004b92 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004b7e:	4b20      	ldr	r3, [pc, #128]	; (8004c00 <vInitPrioGroupValue+0xf8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	4a1e      	ldr	r2, [pc, #120]	; (8004c00 <vInitPrioGroupValue+0xf8>)
 8004b86:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b88:	78fb      	ldrb	r3, [r7, #3]
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b92:	78fb      	ldrb	r3, [r7, #3]
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9a:	2b80      	cmp	r3, #128	; 0x80
 8004b9c:	d0ef      	beq.n	8004b7e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b9e:	4b18      	ldr	r3, [pc, #96]	; (8004c00 <vInitPrioGroupValue+0xf8>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f1c3 0307 	rsb	r3, r3, #7
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d00a      	beq.n	8004bc0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	60bb      	str	r3, [r7, #8]
    }
 8004bbc:	bf00      	nop
 8004bbe:	e7fe      	b.n	8004bbe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004bc0:	4b0f      	ldr	r3, [pc, #60]	; (8004c00 <vInitPrioGroupValue+0xf8>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	021b      	lsls	r3, r3, #8
 8004bc6:	4a0e      	ldr	r2, [pc, #56]	; (8004c00 <vInitPrioGroupValue+0xf8>)
 8004bc8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004bca:	4b0d      	ldr	r3, [pc, #52]	; (8004c00 <vInitPrioGroupValue+0xf8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bd2:	4a0b      	ldr	r2, [pc, #44]	; (8004c00 <vInitPrioGroupValue+0xf8>)
 8004bd4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004bde:	bf00      	nop
 8004be0:	371c      	adds	r7, #28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	e000ed00 	.word	0xe000ed00
 8004bf0:	410fc271 	.word	0x410fc271
 8004bf4:	410fc270 	.word	0x410fc270
 8004bf8:	e000e400 	.word	0xe000e400
 8004bfc:	2000024c 	.word	0x2000024c
 8004c00:	20000250 	.word	0x20000250

08004c04 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
        __asm volatile
 8004c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	607b      	str	r3, [r7, #4]
    }
 8004c1c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004c1e:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <vPortEnterCritical+0x58>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3301      	adds	r3, #1
 8004c24:	4a0d      	ldr	r2, [pc, #52]	; (8004c5c <vPortEnterCritical+0x58>)
 8004c26:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004c28:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <vPortEnterCritical+0x58>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d10f      	bne.n	8004c50 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c30:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <vPortEnterCritical+0x5c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <vPortEnterCritical+0x4c>
        __asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	603b      	str	r3, [r7, #0]
    }
 8004c4c:	bf00      	nop
 8004c4e:	e7fe      	b.n	8004c4e <vPortEnterCritical+0x4a>
    }
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	20000010 	.word	0x20000010
 8004c60:	e000ed04 	.word	0xe000ed04

08004c64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004c6a:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <vPortExitCritical+0x50>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10a      	bne.n	8004c88 <vPortExitCritical+0x24>
        __asm volatile
 8004c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	607b      	str	r3, [r7, #4]
    }
 8004c84:	bf00      	nop
 8004c86:	e7fe      	b.n	8004c86 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004c88:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <vPortExitCritical+0x50>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	4a09      	ldr	r2, [pc, #36]	; (8004cb4 <vPortExitCritical+0x50>)
 8004c90:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004c92:	4b08      	ldr	r3, [pc, #32]	; (8004cb4 <vPortExitCritical+0x50>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d105      	bne.n	8004ca6 <vPortExitCritical+0x42>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	f383 8811 	msr	BASEPRI, r3
    }
 8004ca4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	20000010 	.word	0x20000010
	...

08004cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004cc0:	f3ef 8009 	mrs	r0, PSP
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	4b15      	ldr	r3, [pc, #84]	; (8004d20 <pxCurrentTCBConst>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	f01e 0f10 	tst.w	lr, #16
 8004cd0:	bf08      	it	eq
 8004cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cda:	6010      	str	r0, [r2, #0]
 8004cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ce0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ce4:	f380 8811 	msr	BASEPRI, r0
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f7fe ff58 	bl	8003ba4 <vTaskSwitchContext>
 8004cf4:	f04f 0000 	mov.w	r0, #0
 8004cf8:	f380 8811 	msr	BASEPRI, r0
 8004cfc:	bc09      	pop	{r0, r3}
 8004cfe:	6819      	ldr	r1, [r3, #0]
 8004d00:	6808      	ldr	r0, [r1, #0]
 8004d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d06:	f01e 0f10 	tst.w	lr, #16
 8004d0a:	bf08      	it	eq
 8004d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d10:	f380 8809 	msr	PSP, r0
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	f3af 8000 	nop.w

08004d20 <pxCurrentTCBConst>:
 8004d20:	2000010c 	.word	0x2000010c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop

08004d28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
        __asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	607b      	str	r3, [r7, #4]
    }
 8004d40:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004d42:	f002 fb83 	bl	800744c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004d46:	f7fe fe71 	bl	8003a2c <xTaskIncrementTick>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d006      	beq.n	8004d5e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004d50:	f002 fbda 	bl	8007508 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d54:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <SysTick_Handler+0x50>)
 8004d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	e001      	b.n	8004d62 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004d5e:	f002 fbb7 	bl	80074d0 <SEGGER_SYSVIEW_RecordExitISR>
 8004d62:	2300      	movs	r3, #0
 8004d64:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	f383 8811 	msr	BASEPRI, r3
    }
 8004d6c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	e000ed04 	.word	0xe000ed04

08004d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d80:	4b0b      	ldr	r3, [pc, #44]	; (8004db0 <vPortSetupTimerInterrupt+0x34>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d86:	4b0b      	ldr	r3, [pc, #44]	; (8004db4 <vPortSetupTimerInterrupt+0x38>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d8c:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <vPortSetupTimerInterrupt+0x3c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a0a      	ldr	r2, [pc, #40]	; (8004dbc <vPortSetupTimerInterrupt+0x40>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	099b      	lsrs	r3, r3, #6
 8004d98:	4a09      	ldr	r2, [pc, #36]	; (8004dc0 <vPortSetupTimerInterrupt+0x44>)
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d9e:	4b04      	ldr	r3, [pc, #16]	; (8004db0 <vPortSetupTimerInterrupt+0x34>)
 8004da0:	2207      	movs	r2, #7
 8004da2:	601a      	str	r2, [r3, #0]
}
 8004da4:	bf00      	nop
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	e000e010 	.word	0xe000e010
 8004db4:	e000e018 	.word	0xe000e018
 8004db8:	20000000 	.word	0x20000000
 8004dbc:	10624dd3 	.word	0x10624dd3
 8004dc0:	e000e014 	.word	0xe000e014

08004dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004dd4 <vPortEnableVFP+0x10>
 8004dc8:	6801      	ldr	r1, [r0, #0]
 8004dca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004dce:	6001      	str	r1, [r0, #0]
 8004dd0:	4770      	bx	lr
 8004dd2:	0000      	.short	0x0000
 8004dd4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004dd8:	bf00      	nop
 8004dda:	bf00      	nop

08004ddc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004de2:	f3ef 8305 	mrs	r3, IPSR
 8004de6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b0f      	cmp	r3, #15
 8004dec:	d914      	bls.n	8004e18 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004dee:	4a17      	ldr	r2, [pc, #92]	; (8004e4c <vPortValidateInterruptPriority+0x70>)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	4413      	add	r3, r2
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004df8:	4b15      	ldr	r3, [pc, #84]	; (8004e50 <vPortValidateInterruptPriority+0x74>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	7afa      	ldrb	r2, [r7, #11]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d20a      	bcs.n	8004e18 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	607b      	str	r3, [r7, #4]
    }
 8004e14:	bf00      	nop
 8004e16:	e7fe      	b.n	8004e16 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e18:	4b0e      	ldr	r3, [pc, #56]	; (8004e54 <vPortValidateInterruptPriority+0x78>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e20:	4b0d      	ldr	r3, [pc, #52]	; (8004e58 <vPortValidateInterruptPriority+0x7c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d90a      	bls.n	8004e3e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	603b      	str	r3, [r7, #0]
    }
 8004e3a:	bf00      	nop
 8004e3c:	e7fe      	b.n	8004e3c <vPortValidateInterruptPriority+0x60>
    }
 8004e3e:	bf00      	nop
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	e000e3f0 	.word	0xe000e3f0
 8004e50:	2000024c 	.word	0x2000024c
 8004e54:	e000ed0c 	.word	0xe000ed0c
 8004e58:	20000250 	.word	0x20000250

08004e5c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b08a      	sub	sp, #40	; 0x28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004e64:	2300      	movs	r3, #0
 8004e66:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004e68:	f7fe fd10 	bl	800388c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004e6c:	4b65      	ldr	r3, [pc, #404]	; (8005004 <pvPortMalloc+0x1a8>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004e74:	f000 f934 	bl	80050e0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e78:	4b63      	ldr	r3, [pc, #396]	; (8005008 <pvPortMalloc+0x1ac>)
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f040 80a7 	bne.w	8004fd4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d02d      	beq.n	8004ee8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004e8c:	2208      	movs	r2, #8
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d227      	bcs.n	8004ee8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004e98:	2208      	movs	r2, #8
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d021      	beq.n	8004eee <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f023 0307 	bic.w	r3, r3, #7
 8004eb0:	3308      	adds	r3, #8
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d214      	bcs.n	8004ee2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f023 0307 	bic.w	r3, r3, #7
 8004ebe:	3308      	adds	r3, #8
 8004ec0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d010      	beq.n	8004eee <pvPortMalloc+0x92>
        __asm volatile
 8004ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	617b      	str	r3, [r7, #20]
    }
 8004ede:	bf00      	nop
 8004ee0:	e7fe      	b.n	8004ee0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ee6:	e002      	b.n	8004eee <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	607b      	str	r3, [r7, #4]
 8004eec:	e000      	b.n	8004ef0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004eee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d06e      	beq.n	8004fd4 <pvPortMalloc+0x178>
 8004ef6:	4b45      	ldr	r3, [pc, #276]	; (800500c <pvPortMalloc+0x1b0>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d869      	bhi.n	8004fd4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004f00:	4b43      	ldr	r3, [pc, #268]	; (8005010 <pvPortMalloc+0x1b4>)
 8004f02:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004f04:	4b42      	ldr	r3, [pc, #264]	; (8005010 <pvPortMalloc+0x1b4>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f0a:	e004      	b.n	8004f16 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d903      	bls.n	8004f28 <pvPortMalloc+0xcc>
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1f1      	bne.n	8004f0c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004f28:	4b36      	ldr	r3, [pc, #216]	; (8005004 <pvPortMalloc+0x1a8>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d050      	beq.n	8004fd4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2208      	movs	r2, #8
 8004f38:	4413      	add	r3, r2
 8004f3a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	1ad2      	subs	r2, r2, r3
 8004f4c:	2308      	movs	r3, #8
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d91f      	bls.n	8004f94 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4413      	add	r3, r2
 8004f5a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00a      	beq.n	8004f7c <pvPortMalloc+0x120>
        __asm volatile
 8004f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	613b      	str	r3, [r7, #16]
    }
 8004f78:	bf00      	nop
 8004f7a:	e7fe      	b.n	8004f7a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	1ad2      	subs	r2, r2, r3
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f8e:	69b8      	ldr	r0, [r7, #24]
 8004f90:	f000 f908 	bl	80051a4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f94:	4b1d      	ldr	r3, [pc, #116]	; (800500c <pvPortMalloc+0x1b0>)
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	4a1b      	ldr	r2, [pc, #108]	; (800500c <pvPortMalloc+0x1b0>)
 8004fa0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004fa2:	4b1a      	ldr	r3, [pc, #104]	; (800500c <pvPortMalloc+0x1b0>)
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	4b1b      	ldr	r3, [pc, #108]	; (8005014 <pvPortMalloc+0x1b8>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d203      	bcs.n	8004fb6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004fae:	4b17      	ldr	r3, [pc, #92]	; (800500c <pvPortMalloc+0x1b0>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a18      	ldr	r2, [pc, #96]	; (8005014 <pvPortMalloc+0x1b8>)
 8004fb4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	4b13      	ldr	r3, [pc, #76]	; (8005008 <pvPortMalloc+0x1ac>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004fca:	4b13      	ldr	r3, [pc, #76]	; (8005018 <pvPortMalloc+0x1bc>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	4a11      	ldr	r2, [pc, #68]	; (8005018 <pvPortMalloc+0x1bc>)
 8004fd2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004fd4:	f7fe fc68 	bl	80038a8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <pvPortMalloc+0x19c>
        __asm volatile
 8004fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	60fb      	str	r3, [r7, #12]
    }
 8004ff4:	bf00      	nop
 8004ff6:	e7fe      	b.n	8004ff6 <pvPortMalloc+0x19a>
    return pvReturn;
 8004ff8:	69fb      	ldr	r3, [r7, #28]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3728      	adds	r7, #40	; 0x28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20012e5c 	.word	0x20012e5c
 8005008:	20012e70 	.word	0x20012e70
 800500c:	20012e60 	.word	0x20012e60
 8005010:	20012e54 	.word	0x20012e54
 8005014:	20012e64 	.word	0x20012e64
 8005018:	20012e68 	.word	0x20012e68

0800501c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d04d      	beq.n	80050ca <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800502e:	2308      	movs	r3, #8
 8005030:	425b      	negs	r3, r3
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	4413      	add	r3, r2
 8005036:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	4b24      	ldr	r3, [pc, #144]	; (80050d4 <vPortFree+0xb8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4013      	ands	r3, r2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10a      	bne.n	8005060 <vPortFree+0x44>
        __asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	60fb      	str	r3, [r7, #12]
    }
 800505c:	bf00      	nop
 800505e:	e7fe      	b.n	800505e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <vPortFree+0x62>
        __asm volatile
 8005068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506c:	f383 8811 	msr	BASEPRI, r3
 8005070:	f3bf 8f6f 	isb	sy
 8005074:	f3bf 8f4f 	dsb	sy
 8005078:	60bb      	str	r3, [r7, #8]
    }
 800507a:	bf00      	nop
 800507c:	e7fe      	b.n	800507c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	4b14      	ldr	r3, [pc, #80]	; (80050d4 <vPortFree+0xb8>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4013      	ands	r3, r2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d01e      	beq.n	80050ca <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d11a      	bne.n	80050ca <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	4b0e      	ldr	r3, [pc, #56]	; (80050d4 <vPortFree+0xb8>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	43db      	mvns	r3, r3
 800509e:	401a      	ands	r2, r3
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80050a4:	f7fe fbf2 	bl	800388c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	4b0a      	ldr	r3, [pc, #40]	; (80050d8 <vPortFree+0xbc>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4413      	add	r3, r2
 80050b2:	4a09      	ldr	r2, [pc, #36]	; (80050d8 <vPortFree+0xbc>)
 80050b4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050b6:	6938      	ldr	r0, [r7, #16]
 80050b8:	f000 f874 	bl	80051a4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80050bc:	4b07      	ldr	r3, [pc, #28]	; (80050dc <vPortFree+0xc0>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3301      	adds	r3, #1
 80050c2:	4a06      	ldr	r2, [pc, #24]	; (80050dc <vPortFree+0xc0>)
 80050c4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80050c6:	f7fe fbef 	bl	80038a8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80050ca:	bf00      	nop
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20012e70 	.word	0x20012e70
 80050d8:	20012e60 	.word	0x20012e60
 80050dc:	20012e6c 	.word	0x20012e6c

080050e0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050e6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80050ea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80050ec:	4b27      	ldr	r3, [pc, #156]	; (800518c <prvHeapInit+0xac>)
 80050ee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00c      	beq.n	8005114 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	3307      	adds	r3, #7
 80050fe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 0307 	bic.w	r3, r3, #7
 8005106:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	4a1f      	ldr	r2, [pc, #124]	; (800518c <prvHeapInit+0xac>)
 8005110:	4413      	add	r3, r2
 8005112:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005118:	4a1d      	ldr	r2, [pc, #116]	; (8005190 <prvHeapInit+0xb0>)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800511e:	4b1c      	ldr	r3, [pc, #112]	; (8005190 <prvHeapInit+0xb0>)
 8005120:	2200      	movs	r2, #0
 8005122:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	4413      	add	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800512c:	2208      	movs	r2, #8
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	1a9b      	subs	r3, r3, r2
 8005132:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 0307 	bic.w	r3, r3, #7
 800513a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4a15      	ldr	r2, [pc, #84]	; (8005194 <prvHeapInit+0xb4>)
 8005140:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005142:	4b14      	ldr	r3, [pc, #80]	; (8005194 <prvHeapInit+0xb4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2200      	movs	r2, #0
 8005148:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800514a:	4b12      	ldr	r3, [pc, #72]	; (8005194 <prvHeapInit+0xb4>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	1ad2      	subs	r2, r2, r3
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005160:	4b0c      	ldr	r3, [pc, #48]	; (8005194 <prvHeapInit+0xb4>)
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	4a0a      	ldr	r2, [pc, #40]	; (8005198 <prvHeapInit+0xb8>)
 800516e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	4a09      	ldr	r2, [pc, #36]	; (800519c <prvHeapInit+0xbc>)
 8005176:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005178:	4b09      	ldr	r3, [pc, #36]	; (80051a0 <prvHeapInit+0xc0>)
 800517a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800517e:	601a      	str	r2, [r3, #0]
}
 8005180:	bf00      	nop
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	20000254 	.word	0x20000254
 8005190:	20012e54 	.word	0x20012e54
 8005194:	20012e5c 	.word	0x20012e5c
 8005198:	20012e64 	.word	0x20012e64
 800519c:	20012e60 	.word	0x20012e60
 80051a0:	20012e70 	.word	0x20012e70

080051a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051ac:	4b28      	ldr	r3, [pc, #160]	; (8005250 <prvInsertBlockIntoFreeList+0xac>)
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	e002      	b.n	80051b8 <prvInsertBlockIntoFreeList+0x14>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d8f7      	bhi.n	80051b2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	4413      	add	r3, r2
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d108      	bne.n	80051e6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	441a      	add	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	441a      	add	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d118      	bne.n	800522c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	4b15      	ldr	r3, [pc, #84]	; (8005254 <prvInsertBlockIntoFreeList+0xb0>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	429a      	cmp	r2, r3
 8005204:	d00d      	beq.n	8005222 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	441a      	add	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	e008      	b.n	8005234 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005222:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <prvInsertBlockIntoFreeList+0xb0>)
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	e003      	b.n	8005234 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	429a      	cmp	r2, r3
 800523a:	d002      	beq.n	8005242 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005242:	bf00      	nop
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	20012e54 	.word	0x20012e54
 8005254:	20012e5c 	.word	0x20012e5c

08005258 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800525c:	4803      	ldr	r0, [pc, #12]	; (800526c <_cbSendSystemDesc+0x14>)
 800525e:	f002 f89f 	bl	80073a0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005262:	4803      	ldr	r0, [pc, #12]	; (8005270 <_cbSendSystemDesc+0x18>)
 8005264:	f002 f89c 	bl	80073a0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005268:	bf00      	nop
 800526a:	bd80      	pop	{r7, pc}
 800526c:	08007c08 	.word	0x08007c08
 8005270:	08007c4c 	.word	0x08007c4c

08005274 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005278:	4b06      	ldr	r3, [pc, #24]	; (8005294 <SEGGER_SYSVIEW_Conf+0x20>)
 800527a:	6818      	ldr	r0, [r3, #0]
 800527c:	4b05      	ldr	r3, [pc, #20]	; (8005294 <SEGGER_SYSVIEW_Conf+0x20>)
 800527e:	6819      	ldr	r1, [r3, #0]
 8005280:	4b05      	ldr	r3, [pc, #20]	; (8005298 <SEGGER_SYSVIEW_Conf+0x24>)
 8005282:	4a06      	ldr	r2, [pc, #24]	; (800529c <SEGGER_SYSVIEW_Conf+0x28>)
 8005284:	f001 fc08 	bl	8006a98 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005288:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800528c:	f001 fc48 	bl	8006b20 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005290:	bf00      	nop
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20000000 	.word	0x20000000
 8005298:	08005259 	.word	0x08005259
 800529c:	08007cec 	.word	0x08007cec

080052a0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80052a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80052a6:	2300      	movs	r3, #0
 80052a8:	607b      	str	r3, [r7, #4]
 80052aa:	e033      	b.n	8005314 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80052ac:	491e      	ldr	r1, [pc, #120]	; (8005328 <_cbSendTaskList+0x88>)
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	4613      	mov	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	440b      	add	r3, r1
 80052ba:	6818      	ldr	r0, [r3, #0]
 80052bc:	491a      	ldr	r1, [pc, #104]	; (8005328 <_cbSendTaskList+0x88>)
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	4613      	mov	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4413      	add	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	440b      	add	r3, r1
 80052ca:	3304      	adds	r3, #4
 80052cc:	6819      	ldr	r1, [r3, #0]
 80052ce:	4c16      	ldr	r4, [pc, #88]	; (8005328 <_cbSendTaskList+0x88>)
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	4613      	mov	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4423      	add	r3, r4
 80052dc:	3308      	adds	r3, #8
 80052de:	681c      	ldr	r4, [r3, #0]
 80052e0:	4d11      	ldr	r5, [pc, #68]	; (8005328 <_cbSendTaskList+0x88>)
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	4613      	mov	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	442b      	add	r3, r5
 80052ee:	330c      	adds	r3, #12
 80052f0:	681d      	ldr	r5, [r3, #0]
 80052f2:	4e0d      	ldr	r6, [pc, #52]	; (8005328 <_cbSendTaskList+0x88>)
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	4613      	mov	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4433      	add	r3, r6
 8005300:	3310      	adds	r3, #16
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	462b      	mov	r3, r5
 8005308:	4622      	mov	r2, r4
 800530a:	f000 f8bd 	bl	8005488 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3301      	adds	r3, #1
 8005312:	607b      	str	r3, [r7, #4]
 8005314:	4b05      	ldr	r3, [pc, #20]	; (800532c <_cbSendTaskList+0x8c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	429a      	cmp	r2, r3
 800531c:	d3c6      	bcc.n	80052ac <_cbSendTaskList+0xc>
  }
}
 800531e:	bf00      	nop
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005328:	20012e74 	.word	0x20012e74
 800532c:	20012f14 	.word	0x20012f14

08005330 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005334:	b082      	sub	sp, #8
 8005336:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005338:	f7fe fb66 	bl	8003a08 <xTaskGetTickCountFromISR>
 800533c:	4603      	mov	r3, r0
 800533e:	2200      	movs	r2, #0
 8005340:	469a      	mov	sl, r3
 8005342:	4693      	mov	fp, r2
 8005344:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005348:	e9d7 0100 	ldrd	r0, r1, [r7]
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	f04f 0a00 	mov.w	sl, #0
 8005354:	f04f 0b00 	mov.w	fp, #0
 8005358:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800535c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8005360:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005364:	4652      	mov	r2, sl
 8005366:	465b      	mov	r3, fp
 8005368:	1a14      	subs	r4, r2, r0
 800536a:	eb63 0501 	sbc.w	r5, r3, r1
 800536e:	f04f 0200 	mov.w	r2, #0
 8005372:	f04f 0300 	mov.w	r3, #0
 8005376:	00ab      	lsls	r3, r5, #2
 8005378:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800537c:	00a2      	lsls	r2, r4, #2
 800537e:	4614      	mov	r4, r2
 8005380:	461d      	mov	r5, r3
 8005382:	eb14 0800 	adds.w	r8, r4, r0
 8005386:	eb45 0901 	adc.w	r9, r5, r1
 800538a:	f04f 0200 	mov.w	r2, #0
 800538e:	f04f 0300 	mov.w	r3, #0
 8005392:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005396:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800539a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800539e:	4690      	mov	r8, r2
 80053a0:	4699      	mov	r9, r3
 80053a2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80053a6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80053aa:	4610      	mov	r0, r2
 80053ac:	4619      	mov	r1, r3
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080053b8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af02      	add	r7, sp, #8
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80053c6:	2205      	movs	r2, #5
 80053c8:	492b      	ldr	r1, [pc, #172]	; (8005478 <SYSVIEW_AddTask+0xc0>)
 80053ca:	68b8      	ldr	r0, [r7, #8]
 80053cc:	f002 fb84 	bl	8007ad8 <memcmp>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d04b      	beq.n	800546e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80053d6:	4b29      	ldr	r3, [pc, #164]	; (800547c <SYSVIEW_AddTask+0xc4>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b07      	cmp	r3, #7
 80053dc:	d903      	bls.n	80053e6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80053de:	4828      	ldr	r0, [pc, #160]	; (8005480 <SYSVIEW_AddTask+0xc8>)
 80053e0:	f002 faf0 	bl	80079c4 <SEGGER_SYSVIEW_Warn>
    return;
 80053e4:	e044      	b.n	8005470 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80053e6:	4b25      	ldr	r3, [pc, #148]	; (800547c <SYSVIEW_AddTask+0xc4>)
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	4926      	ldr	r1, [pc, #152]	; (8005484 <SYSVIEW_AddTask+0xcc>)
 80053ec:	4613      	mov	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80053fa:	4b20      	ldr	r3, [pc, #128]	; (800547c <SYSVIEW_AddTask+0xc4>)
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	4921      	ldr	r1, [pc, #132]	; (8005484 <SYSVIEW_AddTask+0xcc>)
 8005400:	4613      	mov	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	440b      	add	r3, r1
 800540a:	3304      	adds	r3, #4
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005410:	4b1a      	ldr	r3, [pc, #104]	; (800547c <SYSVIEW_AddTask+0xc4>)
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	491b      	ldr	r1, [pc, #108]	; (8005484 <SYSVIEW_AddTask+0xcc>)
 8005416:	4613      	mov	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	440b      	add	r3, r1
 8005420:	3308      	adds	r3, #8
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005426:	4b15      	ldr	r3, [pc, #84]	; (800547c <SYSVIEW_AddTask+0xc4>)
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	4916      	ldr	r1, [pc, #88]	; (8005484 <SYSVIEW_AddTask+0xcc>)
 800542c:	4613      	mov	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	330c      	adds	r3, #12
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800543c:	4b0f      	ldr	r3, [pc, #60]	; (800547c <SYSVIEW_AddTask+0xc4>)
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	4910      	ldr	r1, [pc, #64]	; (8005484 <SYSVIEW_AddTask+0xcc>)
 8005442:	4613      	mov	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	440b      	add	r3, r1
 800544c:	3310      	adds	r3, #16
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005452:	4b0a      	ldr	r3, [pc, #40]	; (800547c <SYSVIEW_AddTask+0xc4>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3301      	adds	r3, #1
 8005458:	4a08      	ldr	r2, [pc, #32]	; (800547c <SYSVIEW_AddTask+0xc4>)
 800545a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 f80e 	bl	8005488 <SYSVIEW_SendTaskInfo>
 800546c:	e000      	b.n	8005470 <SYSVIEW_AddTask+0xb8>
    return;
 800546e:	bf00      	nop

}
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	08007c5c 	.word	0x08007c5c
 800547c:	20012f14 	.word	0x20012f14
 8005480:	08007c64 	.word	0x08007c64
 8005484:	20012e74 	.word	0x20012e74

08005488 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005488:	b580      	push	{r7, lr}
 800548a:	b08a      	sub	sp, #40	; 0x28
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005496:	f107 0314 	add.w	r3, r7, #20
 800549a:	2214      	movs	r2, #20
 800549c:	2100      	movs	r1, #0
 800549e:	4618      	mov	r0, r3
 80054a0:	f002 fb2a 	bl	8007af8 <memset>
  TaskInfo.TaskID     = TaskID;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80054b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80054b8:	f107 0314 	add.w	r3, r7, #20
 80054bc:	4618      	mov	r0, r3
 80054be:	f001 fe77 	bl	80071b0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80054c2:	bf00      	nop
 80054c4:	3728      	adds	r7, #40	; 0x28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <__NVIC_EnableIRQ>:
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	4603      	mov	r3, r0
 80054d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	db0b      	blt.n	80054f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	f003 021f 	and.w	r2, r3, #31
 80054e4:	4907      	ldr	r1, [pc, #28]	; (8005504 <__NVIC_EnableIRQ+0x38>)
 80054e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ea:	095b      	lsrs	r3, r3, #5
 80054ec:	2001      	movs	r0, #1
 80054ee:	fa00 f202 	lsl.w	r2, r0, r2
 80054f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	e000e100 	.word	0xe000e100

08005508 <__NVIC_SetPriority>:
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	4603      	mov	r3, r0
 8005510:	6039      	str	r1, [r7, #0]
 8005512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005518:	2b00      	cmp	r3, #0
 800551a:	db0a      	blt.n	8005532 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	b2da      	uxtb	r2, r3
 8005520:	490c      	ldr	r1, [pc, #48]	; (8005554 <__NVIC_SetPriority+0x4c>)
 8005522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005526:	0112      	lsls	r2, r2, #4
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	440b      	add	r3, r1
 800552c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005530:	e00a      	b.n	8005548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	b2da      	uxtb	r2, r3
 8005536:	4908      	ldr	r1, [pc, #32]	; (8005558 <__NVIC_SetPriority+0x50>)
 8005538:	79fb      	ldrb	r3, [r7, #7]
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	3b04      	subs	r3, #4
 8005540:	0112      	lsls	r2, r2, #4
 8005542:	b2d2      	uxtb	r2, r2
 8005544:	440b      	add	r3, r1
 8005546:	761a      	strb	r2, [r3, #24]
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	e000e100 	.word	0xe000e100
 8005558:	e000ed00 	.word	0xe000ed00

0800555c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8005562:	f002 fa8b 	bl	8007a7c <SEGGER_SYSVIEW_IsStarted>
 8005566:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800556e:	f001 fca3 	bl	8006eb8 <SEGGER_SYSVIEW_Start>
  }
}
 8005572:	bf00      	nop
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	4603      	mov	r3, r0
 8005584:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8005586:	4b0c      	ldr	r3, [pc, #48]	; (80055b8 <_cbOnUARTRx+0x3c>)
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	2b03      	cmp	r3, #3
 800558c:	d806      	bhi.n	800559c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800558e:	4b0a      	ldr	r3, [pc, #40]	; (80055b8 <_cbOnUARTRx+0x3c>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	3301      	adds	r3, #1
 8005594:	b2da      	uxtb	r2, r3
 8005596:	4b08      	ldr	r3, [pc, #32]	; (80055b8 <_cbOnUARTRx+0x3c>)
 8005598:	701a      	strb	r2, [r3, #0]
    goto Done;
 800559a:	e009      	b.n	80055b0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800559c:	f7ff ffde 	bl	800555c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80055a0:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <_cbOnUARTRx+0x3c>)
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	4618      	mov	r0, r3
 80055a6:	1dfb      	adds	r3, r7, #7
 80055a8:	2201      	movs	r2, #1
 80055aa:	4619      	mov	r1, r3
 80055ac:	f000 fb9a 	bl	8005ce4 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80055b0:	bf00      	nop
}
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	20000014 	.word	0x20000014

080055bc <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80055c4:	4b14      	ldr	r3, [pc, #80]	; (8005618 <_cbOnUARTTx+0x5c>)
 80055c6:	785b      	ldrb	r3, [r3, #1]
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d80f      	bhi.n	80055ec <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80055cc:	4b12      	ldr	r3, [pc, #72]	; (8005618 <_cbOnUARTTx+0x5c>)
 80055ce:	785b      	ldrb	r3, [r3, #1]
 80055d0:	461a      	mov	r2, r3
 80055d2:	4b12      	ldr	r3, [pc, #72]	; (800561c <_cbOnUARTTx+0x60>)
 80055d4:	5c9a      	ldrb	r2, [r3, r2]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80055da:	4b0f      	ldr	r3, [pc, #60]	; (8005618 <_cbOnUARTTx+0x5c>)
 80055dc:	785b      	ldrb	r3, [r3, #1]
 80055de:	3301      	adds	r3, #1
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	4b0d      	ldr	r3, [pc, #52]	; (8005618 <_cbOnUARTTx+0x5c>)
 80055e4:	705a      	strb	r2, [r3, #1]
    r = 1;
 80055e6:	2301      	movs	r3, #1
 80055e8:	60fb      	str	r3, [r7, #12]
    goto Done;
 80055ea:	e00f      	b.n	800560c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80055ec:	4b0a      	ldr	r3, [pc, #40]	; (8005618 <_cbOnUARTTx+0x5c>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 fa19 	bl	8005a2c <SEGGER_RTT_ReadUpBufferNoLock>
 80055fa:	4603      	mov	r3, r0
 80055fc:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2b00      	cmp	r3, #0
 8005602:	da02      	bge.n	800560a <_cbOnUARTTx+0x4e>
    r = 0;
 8005604:	2300      	movs	r3, #0
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	e000      	b.n	800560c <_cbOnUARTTx+0x50>
  }
Done:
 800560a:	bf00      	nop
  return r;
 800560c:	68fb      	ldr	r3, [r7, #12]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	20000014 	.word	0x20000014
 800561c:	08007cf4 	.word	0x08007cf4

08005620 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005628:	4a04      	ldr	r2, [pc, #16]	; (800563c <SEGGER_UART_init+0x1c>)
 800562a:	4905      	ldr	r1, [pc, #20]	; (8005640 <SEGGER_UART_init+0x20>)
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f863 	bl	80056f8 <HIF_UART_Init>
}
 8005632:	bf00      	nop
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	0800557d 	.word	0x0800557d
 8005640:	080055bd 	.word	0x080055bd

08005644 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800564a:	4b1e      	ldr	r3, [pc, #120]	; (80056c4 <USART2_IRQHandler+0x80>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b00      	cmp	r3, #0
 8005658:	d011      	beq.n	800567e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800565a:	4b1b      	ldr	r3, [pc, #108]	; (80056c8 <USART2_IRQHandler+0x84>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	b2db      	uxtb	r3, r3
 8005660:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f003 030b 	and.w	r3, r3, #11
 8005668:	2b00      	cmp	r3, #0
 800566a:	d108      	bne.n	800567e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800566c:	4b17      	ldr	r3, [pc, #92]	; (80056cc <USART2_IRQHandler+0x88>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d004      	beq.n	800567e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005674:	4b15      	ldr	r3, [pc, #84]	; (80056cc <USART2_IRQHandler+0x88>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	79fa      	ldrb	r2, [r7, #7]
 800567a:	4610      	mov	r0, r2
 800567c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005684:	2b00      	cmp	r3, #0
 8005686:	d01a      	beq.n	80056be <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005688:	4b11      	ldr	r3, [pc, #68]	; (80056d0 <USART2_IRQHandler+0x8c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d015      	beq.n	80056bc <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005690:	4b0f      	ldr	r3, [pc, #60]	; (80056d0 <USART2_IRQHandler+0x8c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	1dfa      	adds	r2, r7, #7
 8005696:	4610      	mov	r0, r2
 8005698:	4798      	blx	r3
 800569a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d106      	bne.n	80056b0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80056a2:	4b0c      	ldr	r3, [pc, #48]	; (80056d4 <USART2_IRQHandler+0x90>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a0b      	ldr	r2, [pc, #44]	; (80056d4 <USART2_IRQHandler+0x90>)
 80056a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	e006      	b.n	80056be <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80056b0:	4b04      	ldr	r3, [pc, #16]	; (80056c4 <USART2_IRQHandler+0x80>)
 80056b2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80056b4:	79fa      	ldrb	r2, [r7, #7]
 80056b6:	4b04      	ldr	r3, [pc, #16]	; (80056c8 <USART2_IRQHandler+0x84>)
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	e000      	b.n	80056be <USART2_IRQHandler+0x7a>
      return;
 80056bc:	bf00      	nop
    }
  }
}
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40004400 	.word	0x40004400
 80056c8:	40004404 	.word	0x40004404
 80056cc:	20012f18 	.word	0x20012f18
 80056d0:	20012f1c 	.word	0x20012f1c
 80056d4:	4000440c 	.word	0x4000440c

080056d8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80056dc:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a04      	ldr	r2, [pc, #16]	; (80056f4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80056e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e6:	6013      	str	r3, [r2, #0]
}
 80056e8:	bf00      	nop
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	4000440c 	.word	0x4000440c

080056f8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005704:	4b2e      	ldr	r3, [pc, #184]	; (80057c0 <HIF_UART_Init+0xc8>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a2d      	ldr	r2, [pc, #180]	; (80057c0 <HIF_UART_Init+0xc8>)
 800570a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800570e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005710:	4b2c      	ldr	r3, [pc, #176]	; (80057c4 <HIF_UART_Init+0xcc>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a2b      	ldr	r2, [pc, #172]	; (80057c4 <HIF_UART_Init+0xcc>)
 8005716:	f043 0301 	orr.w	r3, r3, #1
 800571a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800571c:	4b2a      	ldr	r3, [pc, #168]	; (80057c8 <HIF_UART_Init+0xd0>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005728:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8005730:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005732:	4a25      	ldr	r2, [pc, #148]	; (80057c8 <HIF_UART_Init+0xd0>)
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005738:	4b24      	ldr	r3, [pc, #144]	; (80057cc <HIF_UART_Init+0xd4>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005744:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800574c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800574e:	4a1f      	ldr	r2, [pc, #124]	; (80057cc <HIF_UART_Init+0xd4>)
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005754:	4b1e      	ldr	r3, [pc, #120]	; (80057d0 <HIF_UART_Init+0xd8>)
 8005756:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800575a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800575c:	4b1d      	ldr	r3, [pc, #116]	; (80057d4 <HIF_UART_Init+0xdc>)
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005762:	4b1d      	ldr	r3, [pc, #116]	; (80057d8 <HIF_UART_Init+0xe0>)
 8005764:	2280      	movs	r2, #128	; 0x80
 8005766:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800576e:	4a1b      	ldr	r2, [pc, #108]	; (80057dc <HIF_UART_Init+0xe4>)
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	fbb2 f3f3 	udiv	r3, r2, r3
 8005776:	3301      	adds	r3, #1
 8005778:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	085b      	lsrs	r3, r3, #1
 800577e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005786:	d302      	bcc.n	800578e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005788:	f640 73ff 	movw	r3, #4095	; 0xfff
 800578c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d004      	beq.n	800579e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	4a11      	ldr	r2, [pc, #68]	; (80057e0 <HIF_UART_Init+0xe8>)
 800579a:	b29b      	uxth	r3, r3
 800579c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800579e:	4a11      	ldr	r2, [pc, #68]	; (80057e4 <HIF_UART_Init+0xec>)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80057a4:	4a10      	ldr	r2, [pc, #64]	; (80057e8 <HIF_UART_Init+0xf0>)
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80057aa:	2106      	movs	r1, #6
 80057ac:	2026      	movs	r0, #38	; 0x26
 80057ae:	f7ff feab 	bl	8005508 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80057b2:	2026      	movs	r0, #38	; 0x26
 80057b4:	f7ff fe8a 	bl	80054cc <__NVIC_EnableIRQ>
}
 80057b8:	bf00      	nop
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40023840 	.word	0x40023840
 80057c4:	40023830 	.word	0x40023830
 80057c8:	40020020 	.word	0x40020020
 80057cc:	40020000 	.word	0x40020000
 80057d0:	4000440c 	.word	0x4000440c
 80057d4:	40004410 	.word	0x40004410
 80057d8:	40004414 	.word	0x40004414
 80057dc:	0501bd00 	.word	0x0501bd00
 80057e0:	40004408 	.word	0x40004408
 80057e4:	20012f18 	.word	0x20012f18
 80057e8:	20012f1c 	.word	0x20012f1c

080057ec <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80057f2:	4b24      	ldr	r3, [pc, #144]	; (8005884 <_DoInit+0x98>)
 80057f4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2203      	movs	r2, #3
 80057fa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2203      	movs	r2, #3
 8005800:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a20      	ldr	r2, [pc, #128]	; (8005888 <_DoInit+0x9c>)
 8005806:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a20      	ldr	r2, [pc, #128]	; (800588c <_DoInit+0xa0>)
 800580c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005814:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a17      	ldr	r2, [pc, #92]	; (8005888 <_DoInit+0x9c>)
 800582c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a17      	ldr	r2, [pc, #92]	; (8005890 <_DoInit+0xa4>)
 8005832:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2210      	movs	r2, #16
 8005838:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3307      	adds	r3, #7
 8005850:	4a10      	ldr	r2, [pc, #64]	; (8005894 <_DoInit+0xa8>)
 8005852:	6810      	ldr	r0, [r2, #0]
 8005854:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005856:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a0e      	ldr	r2, [pc, #56]	; (8005898 <_DoInit+0xac>)
 800585e:	6810      	ldr	r0, [r2, #0]
 8005860:	6018      	str	r0, [r3, #0]
 8005862:	8891      	ldrh	r1, [r2, #4]
 8005864:	7992      	ldrb	r2, [r2, #6]
 8005866:	8099      	strh	r1, [r3, #4]
 8005868:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800586a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2220      	movs	r2, #32
 8005872:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005874:	f3bf 8f5f 	dmb	sy
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	20012f20 	.word	0x20012f20
 8005888:	08007cb4 	.word	0x08007cb4
 800588c:	20012fc8 	.word	0x20012fc8
 8005890:	200133c8 	.word	0x200133c8
 8005894:	08007cc0 	.word	0x08007cc0
 8005898:	08007cc4 	.word	0x08007cc4

0800589c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800589c:	b580      	push	{r7, lr}
 800589e:	b08a      	sub	sp, #40	; 0x28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80058a8:	2300      	movs	r3, #0
 80058aa:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d905      	bls.n	80058cc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	3b01      	subs	r3, #1
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ca:	e007      	b.n	80058dc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	689a      	ldr	r2, [r3, #8]
 80058d0:	69b9      	ldr	r1, [r7, #24]
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	1acb      	subs	r3, r1, r3
 80058d6:	4413      	add	r3, r2
 80058d8:	3b01      	subs	r3, #1
 80058da:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e6:	4293      	cmp	r3, r2
 80058e8:	bf28      	it	cs
 80058ea:	4613      	movcs	r3, r2
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80058ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4293      	cmp	r3, r2
 80058f4:	bf28      	it	cs
 80058f6:	4613      	movcs	r3, r2
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	4413      	add	r3, r2
 8005902:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005906:	68b9      	ldr	r1, [r7, #8]
 8005908:	6978      	ldr	r0, [r7, #20]
 800590a:	f002 f921 	bl	8007b50 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800590e:	6a3a      	ldr	r2, [r7, #32]
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	4413      	add	r3, r2
 8005914:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	4413      	add	r3, r2
 800591c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005926:	69fa      	ldr	r2, [r7, #28]
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	4413      	add	r3, r2
 800592c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	69fa      	ldr	r2, [r7, #28]
 8005934:	429a      	cmp	r2, r3
 8005936:	d101      	bne.n	800593c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005938:	2300      	movs	r3, #0
 800593a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800593c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	69fa      	ldr	r2, [r7, #28]
 8005944:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1b2      	bne.n	80058b2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800594c:	6a3b      	ldr	r3, [r7, #32]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3728      	adds	r7, #40	; 0x28
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005956:	b580      	push	{r7, lr}
 8005958:	b088      	sub	sp, #32
 800595a:	af00      	add	r7, sp, #0
 800595c:	60f8      	str	r0, [r7, #12]
 800595e:	60b9      	str	r1, [r7, #8]
 8005960:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	429a      	cmp	r2, r3
 8005978:	d911      	bls.n	800599e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	4413      	add	r3, r2
 8005982:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	6938      	ldr	r0, [r7, #16]
 800598a:	f002 f8e1 	bl	8007b50 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800598e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	441a      	add	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800599c:	e01f      	b.n	80059de <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	4413      	add	r3, r2
 80059aa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	68b9      	ldr	r1, [r7, #8]
 80059b0:	6938      	ldr	r0, [r7, #16]
 80059b2:	f002 f8cd 	bl	8007b50 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	4413      	add	r3, r2
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4619      	mov	r1, r3
 80059ce:	6938      	ldr	r0, [r7, #16]
 80059d0:	f002 f8be 	bl	8007b50 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80059d4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	60da      	str	r2, [r3, #12]
}
 80059de:	bf00      	nop
 80059e0:	3720      	adds	r7, #32
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80059e6:	b480      	push	{r7}
 80059e8:	b087      	sub	sp, #28
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d808      	bhi.n	8005a14 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	1ad2      	subs	r2, r2, r3
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	617b      	str	r3, [r7, #20]
 8005a12:	e004      	b.n	8005a1e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005a1e:	697b      	ldr	r3, [r7, #20]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	371c      	adds	r7, #28
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b08c      	sub	sp, #48	; 0x30
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005a38:	4b3e      	ldr	r3, [pc, #248]	; (8005b34 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005a3a:	623b      	str	r3, [r7, #32]
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005a46:	f7ff fed1 	bl	80057ec <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	4613      	mov	r3, r2
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	4413      	add	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	4a37      	ldr	r2, [pc, #220]	; (8005b34 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005a58:	4413      	add	r3, r2
 8005a5a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d92b      	bls.n	8005ad0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4293      	cmp	r3, r2
 8005a88:	bf28      	it	cs
 8005a8a:	4613      	movcs	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a94:	4413      	add	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	6939      	ldr	r1, [r7, #16]
 8005a9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a9e:	f002 f857 	bl	8007b50 <memcpy>
    NumBytesRead += NumBytesRem;
 8005aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	4413      	add	r3, r2
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005aba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	4413      	add	r3, r2
 8005ac0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d101      	bne.n	8005ad0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005acc:	2300      	movs	r3, #0
 8005ace:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4293      	cmp	r3, r2
 8005ade:	bf28      	it	cs
 8005ae0:	4613      	movcs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d019      	beq.n	8005b1e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af0:	4413      	add	r3, r2
 8005af2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	6939      	ldr	r1, [r7, #16]
 8005af8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005afa:	f002 f829 	bl	8007b50 <memcpy>
    NumBytesRead += NumBytesRem;
 8005afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	4413      	add	r3, r2
 8005b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b28:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3730      	adds	r7, #48	; 0x30
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	20012f20 	.word	0x20012f20

08005b38 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08c      	sub	sp, #48	; 0x30
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005b44:	4b3e      	ldr	r3, [pc, #248]	; (8005c40 <SEGGER_RTT_ReadNoLock+0x108>)
 8005b46:	623b      	str	r3, [r7, #32]
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <SEGGER_RTT_ReadNoLock+0x1e>
 8005b52:	f7ff fe4b 	bl	80057ec <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	4413      	add	r3, r2
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	3360      	adds	r3, #96	; 0x60
 8005b62:	4a37      	ldr	r2, [pc, #220]	; (8005c40 <SEGGER_RTT_ReadNoLock+0x108>)
 8005b64:	4413      	add	r3, r2
 8005b66:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005b7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d92b      	bls.n	8005bdc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4293      	cmp	r3, r2
 8005b94:	bf28      	it	cs
 8005b96:	4613      	movcs	r3, r2
 8005b98:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba0:	4413      	add	r3, r2
 8005ba2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	6939      	ldr	r1, [r7, #16]
 8005ba8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005baa:	f001 ffd1 	bl	8007b50 <memcpy>
    NumBytesRead += NumBytesRem;
 8005bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	4413      	add	r3, r2
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	4413      	add	r3, r2
 8005bcc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d101      	bne.n	8005bdc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4293      	cmp	r3, r2
 8005bea:	bf28      	it	cs
 8005bec:	4613      	movcs	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d019      	beq.n	8005c2a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfc:	4413      	add	r3, r2
 8005bfe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	6939      	ldr	r1, [r7, #16]
 8005c04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c06:	f001 ffa3 	bl	8007b50 <memcpy>
    NumBytesRead += NumBytesRem;
 8005c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	4413      	add	r3, r2
 8005c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	4413      	add	r3, r2
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	4413      	add	r3, r2
 8005c28:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c34:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3730      	adds	r7, #48	; 0x30
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	20012f20 	.word	0x20012f20

08005c44 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4613      	mov	r3, r2
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	4413      	add	r3, r2
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	3360      	adds	r3, #96	; 0x60
 8005c60:	4a1f      	ldr	r2, [pc, #124]	; (8005ce0 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005c62:	4413      	add	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d029      	beq.n	8005cc2 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d82e      	bhi.n	8005cd0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d013      	beq.n	8005ca2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005c7a:	e029      	b.n	8005cd0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005c7c:	6978      	ldr	r0, [r7, #20]
 8005c7e:	f7ff feb2 	bl	80059e6 <_GetAvailWriteSpace>
 8005c82:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d202      	bcs.n	8005c92 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005c90:	e021      	b.n	8005cd6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	69b9      	ldr	r1, [r7, #24]
 8005c9a:	6978      	ldr	r0, [r7, #20]
 8005c9c:	f7ff fe5b 	bl	8005956 <_WriteNoCheck>
    break;
 8005ca0:	e019      	b.n	8005cd6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005ca2:	6978      	ldr	r0, [r7, #20]
 8005ca4:	f7ff fe9f 	bl	80059e6 <_GetAvailWriteSpace>
 8005ca8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	bf28      	it	cs
 8005cb2:	4613      	movcs	r3, r2
 8005cb4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005cb6:	69fa      	ldr	r2, [r7, #28]
 8005cb8:	69b9      	ldr	r1, [r7, #24]
 8005cba:	6978      	ldr	r0, [r7, #20]
 8005cbc:	f7ff fe4b 	bl	8005956 <_WriteNoCheck>
    break;
 8005cc0:	e009      	b.n	8005cd6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	69b9      	ldr	r1, [r7, #24]
 8005cc6:	6978      	ldr	r0, [r7, #20]
 8005cc8:	f7ff fde8 	bl	800589c <_WriteBlocking>
 8005ccc:	61f8      	str	r0, [r7, #28]
    break;
 8005cce:	e002      	b.n	8005cd6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	61fb      	str	r3, [r7, #28]
    break;
 8005cd4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005cd6:	69fb      	ldr	r3, [r7, #28]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3720      	adds	r7, #32
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	20012f20 	.word	0x20012f20

08005ce4 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b088      	sub	sp, #32
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005cf0:	4b0e      	ldr	r3, [pc, #56]	; (8005d2c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005cf2:	61fb      	str	r3, [r7, #28]
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005cfe:	f7ff fd75 	bl	80057ec <_DoInit>
  SEGGER_RTT_LOCK();
 8005d02:	f3ef 8311 	mrs	r3, BASEPRI
 8005d06:	f04f 0120 	mov.w	r1, #32
 8005d0a:	f381 8811 	msr	BASEPRI, r1
 8005d0e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	68b9      	ldr	r1, [r7, #8]
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f7ff ff95 	bl	8005c44 <SEGGER_RTT_WriteDownBufferNoLock>
 8005d1a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005d22:	697b      	ldr	r3, [r7, #20]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3720      	adds	r7, #32
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	20012f20 	.word	0x20012f20

08005d30 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
 8005d3c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005d3e:	4b3d      	ldr	r3, [pc, #244]	; (8005e34 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005d40:	61bb      	str	r3, [r7, #24]
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005d4c:	f7ff fd4e 	bl	80057ec <_DoInit>
  SEGGER_RTT_LOCK();
 8005d50:	f3ef 8311 	mrs	r3, BASEPRI
 8005d54:	f04f 0120 	mov.w	r1, #32
 8005d58:	f381 8811 	msr	BASEPRI, r1
 8005d5c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005d5e:	4b35      	ldr	r3, [pc, #212]	; (8005e34 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005d60:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005d62:	2300      	movs	r3, #0
 8005d64:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005d66:	6939      	ldr	r1, [r7, #16]
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	005b      	lsls	r3, r3, #1
 8005d70:	4413      	add	r3, r2
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	440b      	add	r3, r1
 8005d76:	3304      	adds	r3, #4
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d008      	beq.n	8005d90 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	3301      	adds	r3, #1
 8005d82:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	69fa      	ldr	r2, [r7, #28]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	dbeb      	blt.n	8005d66 <SEGGER_RTT_AllocUpBuffer+0x36>
 8005d8e:	e000      	b.n	8005d92 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005d90:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	69fa      	ldr	r2, [r7, #28]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	da3f      	bge.n	8005e1c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005d9c:	6939      	ldr	r1, [r7, #16]
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	4613      	mov	r3, r2
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	4413      	add	r3, r2
 8005da8:	00db      	lsls	r3, r3, #3
 8005daa:	440b      	add	r3, r1
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005db0:	6939      	ldr	r1, [r7, #16]
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	1c5a      	adds	r2, r3, #1
 8005db6:	4613      	mov	r3, r2
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	4413      	add	r3, r2
 8005dbc:	00db      	lsls	r3, r3, #3
 8005dbe:	440b      	add	r3, r1
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005dc6:	6939      	ldr	r1, [r7, #16]
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	005b      	lsls	r3, r3, #1
 8005dce:	4413      	add	r3, r2
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	440b      	add	r3, r1
 8005dd4:	3320      	adds	r3, #32
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005dda:	6939      	ldr	r1, [r7, #16]
 8005ddc:	69fa      	ldr	r2, [r7, #28]
 8005dde:	4613      	mov	r3, r2
 8005de0:	005b      	lsls	r3, r3, #1
 8005de2:	4413      	add	r3, r2
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	440b      	add	r3, r1
 8005de8:	3328      	adds	r3, #40	; 0x28
 8005dea:	2200      	movs	r2, #0
 8005dec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005dee:	6939      	ldr	r1, [r7, #16]
 8005df0:	69fa      	ldr	r2, [r7, #28]
 8005df2:	4613      	mov	r3, r2
 8005df4:	005b      	lsls	r3, r3, #1
 8005df6:	4413      	add	r3, r2
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	440b      	add	r3, r1
 8005dfc:	3324      	adds	r3, #36	; 0x24
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005e02:	6939      	ldr	r1, [r7, #16]
 8005e04:	69fa      	ldr	r2, [r7, #28]
 8005e06:	4613      	mov	r3, r2
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	4413      	add	r3, r2
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	440b      	add	r3, r1
 8005e10:	332c      	adds	r3, #44	; 0x2c
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005e16:	f3bf 8f5f 	dmb	sy
 8005e1a:	e002      	b.n	8005e22 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e20:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005e28:	69fb      	ldr	r3, [r7, #28]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3720      	adds	r7, #32
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20012f20 	.word	0x20012f20

08005e38 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b088      	sub	sp, #32
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
 8005e44:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005e46:	4b33      	ldr	r3, [pc, #204]	; (8005f14 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005e48:	61bb      	str	r3, [r7, #24]
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005e54:	f7ff fcca 	bl	80057ec <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005e58:	4b2e      	ldr	r3, [pc, #184]	; (8005f14 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005e5a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	461a      	mov	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d24d      	bcs.n	8005f04 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005e68:	f3ef 8311 	mrs	r3, BASEPRI
 8005e6c:	f04f 0120 	mov.w	r1, #32
 8005e70:	f381 8811 	msr	BASEPRI, r1
 8005e74:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d031      	beq.n	8005ee0 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005e7c:	6979      	ldr	r1, [r7, #20]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	4613      	mov	r3, r2
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	4413      	add	r3, r2
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	440b      	add	r3, r1
 8005e8a:	3360      	adds	r3, #96	; 0x60
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005e90:	6979      	ldr	r1, [r7, #20]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	4613      	mov	r3, r2
 8005e96:	005b      	lsls	r3, r3, #1
 8005e98:	4413      	add	r3, r2
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	440b      	add	r3, r1
 8005e9e:	3364      	adds	r3, #100	; 0x64
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005ea4:	6979      	ldr	r1, [r7, #20]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	005b      	lsls	r3, r3, #1
 8005eac:	4413      	add	r3, r2
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	440b      	add	r3, r1
 8005eb2:	3368      	adds	r3, #104	; 0x68
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005eb8:	6979      	ldr	r1, [r7, #20]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	4413      	add	r3, r2
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	440b      	add	r3, r1
 8005ec6:	3370      	adds	r3, #112	; 0x70
 8005ec8:	2200      	movs	r2, #0
 8005eca:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005ecc:	6979      	ldr	r1, [r7, #20]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	005b      	lsls	r3, r3, #1
 8005ed4:	4413      	add	r3, r2
 8005ed6:	00db      	lsls	r3, r3, #3
 8005ed8:	440b      	add	r3, r1
 8005eda:	336c      	adds	r3, #108	; 0x6c
 8005edc:	2200      	movs	r2, #0
 8005ede:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005ee0:	6979      	ldr	r1, [r7, #20]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	4413      	add	r3, r2
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	440b      	add	r3, r1
 8005eee:	3374      	adds	r3, #116	; 0x74
 8005ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ef2:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005ef4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005efe:	2300      	movs	r3, #0
 8005f00:	61fb      	str	r3, [r7, #28]
 8005f02:	e002      	b.n	8005f0a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005f04:	f04f 33ff 	mov.w	r3, #4294967295
 8005f08:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005f0a:	69fb      	ldr	r3, [r7, #28]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3720      	adds	r7, #32
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	20012f20 	.word	0x20012f20

08005f18 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005f24:	2300      	movs	r3, #0
 8005f26:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005f28:	e002      	b.n	8005f30 <_EncodeStr+0x18>
    Len++;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	4413      	add	r3, r2
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1f6      	bne.n	8005f2a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d901      	bls.n	8005f48 <_EncodeStr+0x30>
    Len = Limit;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	2bfe      	cmp	r3, #254	; 0xfe
 8005f4c:	d806      	bhi.n	8005f5c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	60fa      	str	r2, [r7, #12]
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	b2d2      	uxtb	r2, r2
 8005f58:	701a      	strb	r2, [r3, #0]
 8005f5a:	e011      	b.n	8005f80 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	1c5a      	adds	r2, r3, #1
 8005f60:	60fa      	str	r2, [r7, #12]
 8005f62:	22ff      	movs	r2, #255	; 0xff
 8005f64:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	1c5a      	adds	r2, r3, #1
 8005f6a:	60fa      	str	r2, [r7, #12]
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	b2d2      	uxtb	r2, r2
 8005f70:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	0a19      	lsrs	r1, r3, #8
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	1c5a      	adds	r2, r3, #1
 8005f7a:	60fa      	str	r2, [r7, #12]
 8005f7c:	b2ca      	uxtb	r2, r1
 8005f7e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005f80:	2300      	movs	r3, #0
 8005f82:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005f84:	e00a      	b.n	8005f9c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	1c53      	adds	r3, r2, #1
 8005f8a:	60bb      	str	r3, [r7, #8]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	1c59      	adds	r1, r3, #1
 8005f90:	60f9      	str	r1, [r7, #12]
 8005f92:	7812      	ldrb	r2, [r2, #0]
 8005f94:	701a      	strb	r2, [r3, #0]
    n++;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d3f0      	bcc.n	8005f86 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	371c      	adds	r7, #28
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	3304      	adds	r3, #4
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
	...

08005fcc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005fd2:	4b35      	ldr	r3, [pc, #212]	; (80060a8 <_HandleIncomingPacket+0xdc>)
 8005fd4:	7e1b      	ldrb	r3, [r3, #24]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	1cfb      	adds	r3, r7, #3
 8005fda:	2201      	movs	r2, #1
 8005fdc:	4619      	mov	r1, r3
 8005fde:	f7ff fdab 	bl	8005b38 <SEGGER_RTT_ReadNoLock>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	dd59      	ble.n	80060a0 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005fec:	78fb      	ldrb	r3, [r7, #3]
 8005fee:	2b80      	cmp	r3, #128	; 0x80
 8005ff0:	d032      	beq.n	8006058 <_HandleIncomingPacket+0x8c>
 8005ff2:	2b80      	cmp	r3, #128	; 0x80
 8005ff4:	dc42      	bgt.n	800607c <_HandleIncomingPacket+0xb0>
 8005ff6:	2b07      	cmp	r3, #7
 8005ff8:	dc16      	bgt.n	8006028 <_HandleIncomingPacket+0x5c>
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	dd3e      	ble.n	800607c <_HandleIncomingPacket+0xb0>
 8005ffe:	3b01      	subs	r3, #1
 8006000:	2b06      	cmp	r3, #6
 8006002:	d83b      	bhi.n	800607c <_HandleIncomingPacket+0xb0>
 8006004:	a201      	add	r2, pc, #4	; (adr r2, 800600c <_HandleIncomingPacket+0x40>)
 8006006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600a:	bf00      	nop
 800600c:	0800602f 	.word	0x0800602f
 8006010:	08006035 	.word	0x08006035
 8006014:	0800603b 	.word	0x0800603b
 8006018:	08006041 	.word	0x08006041
 800601c:	08006047 	.word	0x08006047
 8006020:	0800604d 	.word	0x0800604d
 8006024:	08006053 	.word	0x08006053
 8006028:	2b7f      	cmp	r3, #127	; 0x7f
 800602a:	d034      	beq.n	8006096 <_HandleIncomingPacket+0xca>
 800602c:	e026      	b.n	800607c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800602e:	f000 ff43 	bl	8006eb8 <SEGGER_SYSVIEW_Start>
      break;
 8006032:	e035      	b.n	80060a0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006034:	f000 fffc 	bl	8007030 <SEGGER_SYSVIEW_Stop>
      break;
 8006038:	e032      	b.n	80060a0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800603a:	f001 f9d5 	bl	80073e8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800603e:	e02f      	b.n	80060a0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006040:	f001 f99a 	bl	8007378 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006044:	e02c      	b.n	80060a0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006046:	f001 f819 	bl	800707c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800604a:	e029      	b.n	80060a0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800604c:	f001 fc68 	bl	8007920 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006050:	e026      	b.n	80060a0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006052:	f001 fc47 	bl	80078e4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006056:	e023      	b.n	80060a0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006058:	4b13      	ldr	r3, [pc, #76]	; (80060a8 <_HandleIncomingPacket+0xdc>)
 800605a:	7e1b      	ldrb	r3, [r3, #24]
 800605c:	4618      	mov	r0, r3
 800605e:	1cfb      	adds	r3, r7, #3
 8006060:	2201      	movs	r2, #1
 8006062:	4619      	mov	r1, r3
 8006064:	f7ff fd68 	bl	8005b38 <SEGGER_RTT_ReadNoLock>
 8006068:	4603      	mov	r3, r0
 800606a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	dd13      	ble.n	800609a <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006072:	78fb      	ldrb	r3, [r7, #3]
 8006074:	4618      	mov	r0, r3
 8006076:	f001 fbb5 	bl	80077e4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800607a:	e00e      	b.n	800609a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800607c:	78fb      	ldrb	r3, [r7, #3]
 800607e:	b25b      	sxtb	r3, r3
 8006080:	2b00      	cmp	r3, #0
 8006082:	da0c      	bge.n	800609e <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006084:	4b08      	ldr	r3, [pc, #32]	; (80060a8 <_HandleIncomingPacket+0xdc>)
 8006086:	7e1b      	ldrb	r3, [r3, #24]
 8006088:	4618      	mov	r0, r3
 800608a:	1cfb      	adds	r3, r7, #3
 800608c:	2201      	movs	r2, #1
 800608e:	4619      	mov	r1, r3
 8006090:	f7ff fd52 	bl	8005b38 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006094:	e003      	b.n	800609e <_HandleIncomingPacket+0xd2>
      break;
 8006096:	bf00      	nop
 8006098:	e002      	b.n	80060a0 <_HandleIncomingPacket+0xd4>
      break;
 800609a:	bf00      	nop
 800609c:	e000      	b.n	80060a0 <_HandleIncomingPacket+0xd4>
      break;
 800609e:	bf00      	nop
    }
  }
}
 80060a0:	bf00      	nop
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	200143e0 	.word	0x200143e0

080060ac <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08c      	sub	sp, #48	; 0x30
 80060b0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80060b2:	2301      	movs	r3, #1
 80060b4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80060b6:	1d3b      	adds	r3, r7, #4
 80060b8:	3301      	adds	r3, #1
 80060ba:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060c0:	4b32      	ldr	r3, [pc, #200]	; (800618c <_TrySendOverflowPacket+0xe0>)
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80060c6:	e00b      	b.n	80060e0 <_TrySendOverflowPacket+0x34>
 80060c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ce:	1c59      	adds	r1, r3, #1
 80060d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80060d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060d6:	b2d2      	uxtb	r2, r2
 80060d8:	701a      	strb	r2, [r3, #0]
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	09db      	lsrs	r3, r3, #7
 80060de:	62bb      	str	r3, [r7, #40]	; 0x28
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	2b7f      	cmp	r3, #127	; 0x7f
 80060e4:	d8f0      	bhi.n	80060c8 <_TrySendOverflowPacket+0x1c>
 80060e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060ee:	b2d2      	uxtb	r2, r2
 80060f0:	701a      	strb	r2, [r3, #0]
 80060f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80060f6:	4b26      	ldr	r3, [pc, #152]	; (8006190 <_TrySendOverflowPacket+0xe4>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80060fc:	4b23      	ldr	r3, [pc, #140]	; (800618c <_TrySendOverflowPacket+0xe0>)
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	627b      	str	r3, [r7, #36]	; 0x24
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	623b      	str	r3, [r7, #32]
 800610e:	e00b      	b.n	8006128 <_TrySendOverflowPacket+0x7c>
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	b2da      	uxtb	r2, r3
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	1c59      	adds	r1, r3, #1
 8006118:	6279      	str	r1, [r7, #36]	; 0x24
 800611a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	701a      	strb	r2, [r3, #0]
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	09db      	lsrs	r3, r3, #7
 8006126:	623b      	str	r3, [r7, #32]
 8006128:	6a3b      	ldr	r3, [r7, #32]
 800612a:	2b7f      	cmp	r3, #127	; 0x7f
 800612c:	d8f0      	bhi.n	8006110 <_TrySendOverflowPacket+0x64>
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	627a      	str	r2, [r7, #36]	; 0x24
 8006134:	6a3a      	ldr	r2, [r7, #32]
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	701a      	strb	r2, [r3, #0]
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800613e:	4b13      	ldr	r3, [pc, #76]	; (800618c <_TrySendOverflowPacket+0xe0>)
 8006140:	785b      	ldrb	r3, [r3, #1]
 8006142:	4618      	mov	r0, r3
 8006144:	1d3b      	adds	r3, r7, #4
 8006146:	69fa      	ldr	r2, [r7, #28]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	461a      	mov	r2, r3
 800614c:	1d3b      	adds	r3, r7, #4
 800614e:	4619      	mov	r1, r3
 8006150:	f7fa f83e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006154:	4603      	mov	r3, r0
 8006156:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8006158:	f7ff fabe 	bl	80056d8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d009      	beq.n	8006176 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006162:	4a0a      	ldr	r2, [pc, #40]	; (800618c <_TrySendOverflowPacket+0xe0>)
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006168:	4b08      	ldr	r3, [pc, #32]	; (800618c <_TrySendOverflowPacket+0xe0>)
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	3b01      	subs	r3, #1
 800616e:	b2da      	uxtb	r2, r3
 8006170:	4b06      	ldr	r3, [pc, #24]	; (800618c <_TrySendOverflowPacket+0xe0>)
 8006172:	701a      	strb	r2, [r3, #0]
 8006174:	e004      	b.n	8006180 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006176:	4b05      	ldr	r3, [pc, #20]	; (800618c <_TrySendOverflowPacket+0xe0>)
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	3301      	adds	r3, #1
 800617c:	4a03      	ldr	r2, [pc, #12]	; (800618c <_TrySendOverflowPacket+0xe0>)
 800617e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006180:	693b      	ldr	r3, [r7, #16]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3730      	adds	r7, #48	; 0x30
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	200143e0 	.word	0x200143e0
 8006190:	e0001004 	.word	0xe0001004

08006194 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006194:	b580      	push	{r7, lr}
 8006196:	b08a      	sub	sp, #40	; 0x28
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80061a0:	4b6d      	ldr	r3, [pc, #436]	; (8006358 <_SendPacket+0x1c4>)
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d010      	beq.n	80061ca <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80061a8:	4b6b      	ldr	r3, [pc, #428]	; (8006358 <_SendPacket+0x1c4>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 80a5 	beq.w	80062fc <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80061b2:	4b69      	ldr	r3, [pc, #420]	; (8006358 <_SendPacket+0x1c4>)
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d109      	bne.n	80061ce <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80061ba:	f7ff ff77 	bl	80060ac <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80061be:	4b66      	ldr	r3, [pc, #408]	; (8006358 <_SendPacket+0x1c4>)
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	f040 809c 	bne.w	8006300 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80061c8:	e001      	b.n	80061ce <_SendPacket+0x3a>
    goto Send;
 80061ca:	bf00      	nop
 80061cc:	e000      	b.n	80061d0 <_SendPacket+0x3c>
Send:
 80061ce:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b1f      	cmp	r3, #31
 80061d4:	d809      	bhi.n	80061ea <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80061d6:	4b60      	ldr	r3, [pc, #384]	; (8006358 <_SendPacket+0x1c4>)
 80061d8:	69da      	ldr	r2, [r3, #28]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	fa22 f303 	lsr.w	r3, r2, r3
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f040 808d 	bne.w	8006304 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b17      	cmp	r3, #23
 80061ee:	d807      	bhi.n	8006200 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	60fb      	str	r3, [r7, #12]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	701a      	strb	r2, [r3, #0]
 80061fe:	e03d      	b.n	800627c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	2b7f      	cmp	r3, #127	; 0x7f
 800620c:	d912      	bls.n	8006234 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	09da      	lsrs	r2, r3, #7
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	3b01      	subs	r3, #1
 8006216:	60fb      	str	r3, [r7, #12]
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	b2db      	uxtb	r3, r3
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	3a01      	subs	r2, #1
 8006226:	60fa      	str	r2, [r7, #12]
 8006228:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800622c:	b2da      	uxtb	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	701a      	strb	r2, [r3, #0]
 8006232:	e006      	b.n	8006242 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	3b01      	subs	r3, #1
 8006238:	60fb      	str	r3, [r7, #12]
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	b2da      	uxtb	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b7f      	cmp	r3, #127	; 0x7f
 8006246:	d912      	bls.n	800626e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	09da      	lsrs	r2, r3, #7
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	3b01      	subs	r3, #1
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	b2db      	uxtb	r3, r3
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	3a01      	subs	r2, #1
 8006260:	60fa      	str	r2, [r7, #12]
 8006262:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006266:	b2da      	uxtb	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	701a      	strb	r2, [r3, #0]
 800626c:	e006      	b.n	800627c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	3b01      	subs	r3, #1
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	b2da      	uxtb	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800627c:	4b37      	ldr	r3, [pc, #220]	; (800635c <_SendPacket+0x1c8>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006282:	4b35      	ldr	r3, [pc, #212]	; (8006358 <_SendPacket+0x1c4>)
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	627b      	str	r3, [r7, #36]	; 0x24
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	623b      	str	r3, [r7, #32]
 8006294:	e00b      	b.n	80062ae <_SendPacket+0x11a>
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	b2da      	uxtb	r2, r3
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	1c59      	adds	r1, r3, #1
 800629e:	6279      	str	r1, [r7, #36]	; 0x24
 80062a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062a4:	b2d2      	uxtb	r2, r2
 80062a6:	701a      	strb	r2, [r3, #0]
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	09db      	lsrs	r3, r3, #7
 80062ac:	623b      	str	r3, [r7, #32]
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	2b7f      	cmp	r3, #127	; 0x7f
 80062b2:	d8f0      	bhi.n	8006296 <_SendPacket+0x102>
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	1c5a      	adds	r2, r3, #1
 80062b8:	627a      	str	r2, [r7, #36]	; 0x24
 80062ba:	6a3a      	ldr	r2, [r7, #32]
 80062bc:	b2d2      	uxtb	r2, r2
 80062be:	701a      	strb	r2, [r3, #0]
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80062c4:	4b24      	ldr	r3, [pc, #144]	; (8006358 <_SendPacket+0x1c4>)
 80062c6:	785b      	ldrb	r3, [r3, #1]
 80062c8:	4618      	mov	r0, r3
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	461a      	mov	r2, r3
 80062d2:	68f9      	ldr	r1, [r7, #12]
 80062d4:	f7f9 ff7c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80062d8:	4603      	mov	r3, r0
 80062da:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80062dc:	f7ff f9fc 	bl	80056d8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80062e6:	4a1c      	ldr	r2, [pc, #112]	; (8006358 <_SendPacket+0x1c4>)
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	60d3      	str	r3, [r2, #12]
 80062ec:	e00b      	b.n	8006306 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80062ee:	4b1a      	ldr	r3, [pc, #104]	; (8006358 <_SendPacket+0x1c4>)
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	3301      	adds	r3, #1
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	4b18      	ldr	r3, [pc, #96]	; (8006358 <_SendPacket+0x1c4>)
 80062f8:	701a      	strb	r2, [r3, #0]
 80062fa:	e004      	b.n	8006306 <_SendPacket+0x172>
    goto SendDone;
 80062fc:	bf00      	nop
 80062fe:	e002      	b.n	8006306 <_SendPacket+0x172>
      goto SendDone;
 8006300:	bf00      	nop
 8006302:	e000      	b.n	8006306 <_SendPacket+0x172>
      goto SendDone;
 8006304:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006306:	4b14      	ldr	r3, [pc, #80]	; (8006358 <_SendPacket+0x1c4>)
 8006308:	7e1b      	ldrb	r3, [r3, #24]
 800630a:	4619      	mov	r1, r3
 800630c:	4a14      	ldr	r2, [pc, #80]	; (8006360 <_SendPacket+0x1cc>)
 800630e:	460b      	mov	r3, r1
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	440b      	add	r3, r1
 8006314:	00db      	lsls	r3, r3, #3
 8006316:	4413      	add	r3, r2
 8006318:	336c      	adds	r3, #108	; 0x6c
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	4b0e      	ldr	r3, [pc, #56]	; (8006358 <_SendPacket+0x1c4>)
 800631e:	7e1b      	ldrb	r3, [r3, #24]
 8006320:	4618      	mov	r0, r3
 8006322:	490f      	ldr	r1, [pc, #60]	; (8006360 <_SendPacket+0x1cc>)
 8006324:	4603      	mov	r3, r0
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	4403      	add	r3, r0
 800632a:	00db      	lsls	r3, r3, #3
 800632c:	440b      	add	r3, r1
 800632e:	3370      	adds	r3, #112	; 0x70
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	429a      	cmp	r2, r3
 8006334:	d00b      	beq.n	800634e <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006336:	4b08      	ldr	r3, [pc, #32]	; (8006358 <_SendPacket+0x1c4>)
 8006338:	789b      	ldrb	r3, [r3, #2]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d107      	bne.n	800634e <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800633e:	4b06      	ldr	r3, [pc, #24]	; (8006358 <_SendPacket+0x1c4>)
 8006340:	2201      	movs	r2, #1
 8006342:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006344:	f7ff fe42 	bl	8005fcc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006348:	4b03      	ldr	r3, [pc, #12]	; (8006358 <_SendPacket+0x1c4>)
 800634a:	2200      	movs	r2, #0
 800634c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800634e:	bf00      	nop
 8006350:	3728      	adds	r7, #40	; 0x28
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	200143e0 	.word	0x200143e0
 800635c:	e0001004 	.word	0xe0001004
 8006360:	20012f20 	.word	0x20012f20

08006364 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8006364:	b580      	push	{r7, lr}
 8006366:	b08a      	sub	sp, #40	; 0x28
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	460b      	mov	r3, r1
 800636e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	3301      	adds	r3, #1
 800637a:	2b80      	cmp	r3, #128	; 0x80
 800637c:	d80a      	bhi.n	8006394 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	1c59      	adds	r1, r3, #1
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6051      	str	r1, [r2, #4]
 8006388:	78fa      	ldrb	r2, [r7, #3]
 800638a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	2b80      	cmp	r3, #128	; 0x80
 800639a:	d15a      	bne.n	8006452 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	691a      	ldr	r2, [r3, #16]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	b2d2      	uxtb	r2, r2
 80063a6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	623b      	str	r3, [r7, #32]
 80063bc:	e00b      	b.n	80063d6 <_StoreChar+0x72>
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	1c59      	adds	r1, r3, #1
 80063c6:	6279      	str	r1, [r7, #36]	; 0x24
 80063c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	701a      	strb	r2, [r3, #0]
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	09db      	lsrs	r3, r3, #7
 80063d4:	623b      	str	r3, [r7, #32]
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	2b7f      	cmp	r3, #127	; 0x7f
 80063da:	d8f0      	bhi.n	80063be <_StoreChar+0x5a>
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	1c5a      	adds	r2, r3, #1
 80063e0:	627a      	str	r2, [r7, #36]	; 0x24
 80063e2:	6a3a      	ldr	r2, [r7, #32]
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	701a      	strb	r2, [r3, #0]
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	61fb      	str	r3, [r7, #28]
 80063f0:	2300      	movs	r3, #0
 80063f2:	61bb      	str	r3, [r7, #24]
 80063f4:	e00b      	b.n	800640e <_StoreChar+0xaa>
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	1c59      	adds	r1, r3, #1
 80063fe:	61f9      	str	r1, [r7, #28]
 8006400:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006404:	b2d2      	uxtb	r2, r2
 8006406:	701a      	strb	r2, [r3, #0]
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	09db      	lsrs	r3, r3, #7
 800640c:	61bb      	str	r3, [r7, #24]
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	2b7f      	cmp	r3, #127	; 0x7f
 8006412:	d8f0      	bhi.n	80063f6 <_StoreChar+0x92>
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	1c5a      	adds	r2, r3, #1
 8006418:	61fa      	str	r2, [r7, #28]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	b2d2      	uxtb	r2, r2
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	221a      	movs	r2, #26
 800642a:	6939      	ldr	r1, [r7, #16]
 800642c:	4618      	mov	r0, r3
 800642e:	f7ff feb1 	bl	8006194 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4618      	mov	r0, r3
 8006438:	f7ff fdbb 	bl	8005fb2 <_PreparePacket>
 800643c:	4602      	mov	r2, r0
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	611a      	str	r2, [r3, #16]
  }
}
 8006452:	bf00      	nop
 8006454:	3728      	adds	r7, #40	; 0x28
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
	...

0800645c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800645c:	b580      	push	{r7, lr}
 800645e:	b08a      	sub	sp, #40	; 0x28
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
 8006468:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800646e:	2301      	movs	r3, #1
 8006470:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8006472:	2301      	movs	r3, #1
 8006474:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006476:	e007      	b.n	8006488 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8006478:	6a3a      	ldr	r2, [r7, #32]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006480:	623b      	str	r3, [r7, #32]
    Width++;
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	3301      	adds	r3, #1
 8006486:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006488:	6a3a      	ldr	r2, [r7, #32]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	429a      	cmp	r2, r3
 800648e:	d2f3      	bcs.n	8006478 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	429a      	cmp	r2, r3
 8006496:	d901      	bls.n	800649c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800649c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d11f      	bne.n	80064e6 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80064a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d01c      	beq.n	80064e6 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80064ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d005      	beq.n	80064c2 <_PrintUnsigned+0x66>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d102      	bne.n	80064c2 <_PrintUnsigned+0x66>
        c = '0';
 80064bc:	2330      	movs	r3, #48	; 0x30
 80064be:	76fb      	strb	r3, [r7, #27]
 80064c0:	e001      	b.n	80064c6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80064c2:	2320      	movs	r3, #32
 80064c4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80064c6:	e007      	b.n	80064d8 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	3b01      	subs	r3, #1
 80064cc:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80064ce:	7efb      	ldrb	r3, [r7, #27]
 80064d0:	4619      	mov	r1, r3
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f7ff ff46 	bl	8006364 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80064d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <_PrintUnsigned+0x8a>
 80064de:	69fa      	ldr	r2, [r7, #28]
 80064e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d3f0      	bcc.n	80064c8 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d903      	bls.n	80064f4 <_PrintUnsigned+0x98>
      NumDigits--;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	3b01      	subs	r3, #1
 80064f0:	603b      	str	r3, [r7, #0]
 80064f2:	e009      	b.n	8006508 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064fc:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	429a      	cmp	r2, r3
 8006504:	d200      	bcs.n	8006508 <_PrintUnsigned+0xac>
        break;
 8006506:	e005      	b.n	8006514 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	fb02 f303 	mul.w	r3, r2, r3
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006512:	e7e8      	b.n	80064e6 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006518:	fbb2 f3f3 	udiv	r3, r2, r3
 800651c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006522:	fb02 f303 	mul.w	r3, r2, r3
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800652c:	4a15      	ldr	r2, [pc, #84]	; (8006584 <_PrintUnsigned+0x128>)
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	4413      	add	r3, r2
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	4619      	mov	r1, r3
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f7ff ff14 	bl	8006364 <_StoreChar>
    Digit /= Base;
 800653c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	fbb2 f3f3 	udiv	r3, r2, r3
 8006544:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8006546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1e3      	bne.n	8006514 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800654c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	2b00      	cmp	r3, #0
 8006554:	d011      	beq.n	800657a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8006556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00e      	beq.n	800657a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800655c:	e006      	b.n	800656c <_PrintUnsigned+0x110>
        FieldWidth--;
 800655e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006560:	3b01      	subs	r3, #1
 8006562:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8006564:	2120      	movs	r1, #32
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f7ff fefc 	bl	8006364 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800656c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <_PrintUnsigned+0x11e>
 8006572:	69fa      	ldr	r2, [r7, #28]
 8006574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006576:	429a      	cmp	r2, r3
 8006578:	d3f1      	bcc.n	800655e <_PrintUnsigned+0x102>
      }
    }
  }
}
 800657a:	bf00      	nop
 800657c:	3728      	adds	r7, #40	; 0x28
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	08007d04 	.word	0x08007d04

08006588 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006588:	b580      	push	{r7, lr}
 800658a:	b088      	sub	sp, #32
 800658c:	af02      	add	r7, sp, #8
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
 8006594:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	bfb8      	it	lt
 800659c:	425b      	neglt	r3, r3
 800659e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80065a0:	2301      	movs	r3, #1
 80065a2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80065a4:	e007      	b.n	80065b6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80065ae:	613b      	str	r3, [r7, #16]
    Width++;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	3301      	adds	r3, #1
 80065b4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	daf3      	bge.n	80065a6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d901      	bls.n	80065ca <_PrintInt+0x42>
    Width = NumDigits;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00a      	beq.n	80065e6 <_PrintInt+0x5e>
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	db04      	blt.n	80065e0 <_PrintInt+0x58>
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d002      	beq.n	80065e6 <_PrintInt+0x5e>
    FieldWidth--;
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	3b01      	subs	r3, #1
 80065e4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	f003 0302 	and.w	r3, r3, #2
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <_PrintInt+0x6e>
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d016      	beq.n	8006624 <_PrintInt+0x9c>
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d111      	bne.n	8006624 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00e      	beq.n	8006624 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006606:	e006      	b.n	8006616 <_PrintInt+0x8e>
        FieldWidth--;
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	3b01      	subs	r3, #1
 800660c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800660e:	2120      	movs	r1, #32
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f7ff fea7 	bl	8006364 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <_PrintInt+0x9c>
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	6a3b      	ldr	r3, [r7, #32]
 8006620:	429a      	cmp	r2, r3
 8006622:	d3f1      	bcc.n	8006608 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	da07      	bge.n	800663a <_PrintInt+0xb2>
    v = -v;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	425b      	negs	r3, r3
 800662e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8006630:	212d      	movs	r1, #45	; 0x2d
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f7ff fe96 	bl	8006364 <_StoreChar>
 8006638:	e008      	b.n	800664c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d003      	beq.n	800664c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006644:	212b      	movs	r1, #43	; 0x2b
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f7ff fe8c 	bl	8006364 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	f003 0302 	and.w	r3, r3, #2
 8006652:	2b00      	cmp	r3, #0
 8006654:	d019      	beq.n	800668a <_PrintInt+0x102>
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	d114      	bne.n	800668a <_PrintInt+0x102>
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d111      	bne.n	800668a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00e      	beq.n	800668a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800666c:	e006      	b.n	800667c <_PrintInt+0xf4>
        FieldWidth--;
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	3b01      	subs	r3, #1
 8006672:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006674:	2130      	movs	r1, #48	; 0x30
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f7ff fe74 	bl	8006364 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <_PrintInt+0x102>
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	429a      	cmp	r2, r3
 8006688:	d3f1      	bcc.n	800666e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800668a:	68b9      	ldr	r1, [r7, #8]
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	9301      	str	r3, [sp, #4]
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f7ff fedf 	bl	800645c <_PrintUnsigned>
}
 800669e:	bf00      	nop
 80066a0:	3718      	adds	r7, #24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b098      	sub	sp, #96	; 0x60
 80066ac:	af02      	add	r7, sp, #8
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80066b4:	f3ef 8311 	mrs	r3, BASEPRI
 80066b8:	f04f 0120 	mov.w	r1, #32
 80066bc:	f381 8811 	msr	BASEPRI, r1
 80066c0:	633b      	str	r3, [r7, #48]	; 0x30
 80066c2:	48b7      	ldr	r0, [pc, #732]	; (80069a0 <_VPrintTarget+0x2f8>)
 80066c4:	f7ff fc75 	bl	8005fb2 <_PreparePacket>
 80066c8:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80066ca:	4bb5      	ldr	r3, [pc, #724]	; (80069a0 <_VPrintTarget+0x2f8>)
 80066cc:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80066ce:	2300      	movs	r3, #0
 80066d0:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80066d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d4:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	3301      	adds	r3, #1
 80066da:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3301      	adds	r3, #1
 80066ec:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80066ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 8183 	beq.w	80069fe <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80066f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066fc:	2b25      	cmp	r3, #37	; 0x25
 80066fe:	f040 8170 	bne.w	80069e2 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006702:	2300      	movs	r3, #0
 8006704:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8006706:	2301      	movs	r3, #1
 8006708:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8006712:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006716:	3b23      	subs	r3, #35	; 0x23
 8006718:	2b0d      	cmp	r3, #13
 800671a:	d83f      	bhi.n	800679c <_VPrintTarget+0xf4>
 800671c:	a201      	add	r2, pc, #4	; (adr r2, 8006724 <_VPrintTarget+0x7c>)
 800671e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006722:	bf00      	nop
 8006724:	0800678d 	.word	0x0800678d
 8006728:	0800679d 	.word	0x0800679d
 800672c:	0800679d 	.word	0x0800679d
 8006730:	0800679d 	.word	0x0800679d
 8006734:	0800679d 	.word	0x0800679d
 8006738:	0800679d 	.word	0x0800679d
 800673c:	0800679d 	.word	0x0800679d
 8006740:	0800679d 	.word	0x0800679d
 8006744:	0800677d 	.word	0x0800677d
 8006748:	0800679d 	.word	0x0800679d
 800674c:	0800675d 	.word	0x0800675d
 8006750:	0800679d 	.word	0x0800679d
 8006754:	0800679d 	.word	0x0800679d
 8006758:	0800676d 	.word	0x0800676d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800675c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800675e:	f043 0301 	orr.w	r3, r3, #1
 8006762:	64bb      	str	r3, [r7, #72]	; 0x48
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	3301      	adds	r3, #1
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	e01a      	b.n	80067a2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800676c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800676e:	f043 0302 	orr.w	r3, r3, #2
 8006772:	64bb      	str	r3, [r7, #72]	; 0x48
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	3301      	adds	r3, #1
 8006778:	60fb      	str	r3, [r7, #12]
 800677a:	e012      	b.n	80067a2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800677c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800677e:	f043 0304 	orr.w	r3, r3, #4
 8006782:	64bb      	str	r3, [r7, #72]	; 0x48
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3301      	adds	r3, #1
 8006788:	60fb      	str	r3, [r7, #12]
 800678a:	e00a      	b.n	80067a2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800678c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800678e:	f043 0308 	orr.w	r3, r3, #8
 8006792:	64bb      	str	r3, [r7, #72]	; 0x48
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	3301      	adds	r3, #1
 8006798:	60fb      	str	r3, [r7, #12]
 800679a:	e002      	b.n	80067a2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800679c:	2300      	movs	r3, #0
 800679e:	653b      	str	r3, [r7, #80]	; 0x50
 80067a0:	bf00      	nop
        }
      } while (v);
 80067a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1b0      	bne.n	800670a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80067a8:	2300      	movs	r3, #0
 80067aa:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80067b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067b8:	2b2f      	cmp	r3, #47	; 0x2f
 80067ba:	d912      	bls.n	80067e2 <_VPrintTarget+0x13a>
 80067bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067c0:	2b39      	cmp	r3, #57	; 0x39
 80067c2:	d80e      	bhi.n	80067e2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3301      	adds	r3, #1
 80067c8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80067ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067cc:	4613      	mov	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	005b      	lsls	r3, r3, #1
 80067d4:	461a      	mov	r2, r3
 80067d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067da:	4413      	add	r3, r2
 80067dc:	3b30      	subs	r3, #48	; 0x30
 80067de:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80067e0:	e7e4      	b.n	80067ac <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80067e2:	2300      	movs	r3, #0
 80067e4:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80067ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067f2:	2b2e      	cmp	r3, #46	; 0x2e
 80067f4:	d11d      	bne.n	8006832 <_VPrintTarget+0x18a>
        sFormat++;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	3301      	adds	r3, #1
 80067fa:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006804:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006808:	2b2f      	cmp	r3, #47	; 0x2f
 800680a:	d912      	bls.n	8006832 <_VPrintTarget+0x18a>
 800680c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006810:	2b39      	cmp	r3, #57	; 0x39
 8006812:	d80e      	bhi.n	8006832 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	3301      	adds	r3, #1
 8006818:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800681a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800681c:	4613      	mov	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	005b      	lsls	r3, r3, #1
 8006824:	461a      	mov	r2, r3
 8006826:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800682a:	4413      	add	r3, r2
 800682c:	3b30      	subs	r3, #48	; 0x30
 800682e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8006830:	e7e4      	b.n	80067fc <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800683a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800683e:	2b6c      	cmp	r3, #108	; 0x6c
 8006840:	d003      	beq.n	800684a <_VPrintTarget+0x1a2>
 8006842:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006846:	2b68      	cmp	r3, #104	; 0x68
 8006848:	d107      	bne.n	800685a <_VPrintTarget+0x1b2>
          c = *sFormat;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	3301      	adds	r3, #1
 8006856:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006858:	e7ef      	b.n	800683a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800685a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800685e:	2b25      	cmp	r3, #37	; 0x25
 8006860:	f000 80b3 	beq.w	80069ca <_VPrintTarget+0x322>
 8006864:	2b25      	cmp	r3, #37	; 0x25
 8006866:	f2c0 80b7 	blt.w	80069d8 <_VPrintTarget+0x330>
 800686a:	2b78      	cmp	r3, #120	; 0x78
 800686c:	f300 80b4 	bgt.w	80069d8 <_VPrintTarget+0x330>
 8006870:	2b58      	cmp	r3, #88	; 0x58
 8006872:	f2c0 80b1 	blt.w	80069d8 <_VPrintTarget+0x330>
 8006876:	3b58      	subs	r3, #88	; 0x58
 8006878:	2b20      	cmp	r3, #32
 800687a:	f200 80ad 	bhi.w	80069d8 <_VPrintTarget+0x330>
 800687e:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <_VPrintTarget+0x1dc>)
 8006880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006884:	0800697b 	.word	0x0800697b
 8006888:	080069d9 	.word	0x080069d9
 800688c:	080069d9 	.word	0x080069d9
 8006890:	080069d9 	.word	0x080069d9
 8006894:	080069d9 	.word	0x080069d9
 8006898:	080069d9 	.word	0x080069d9
 800689c:	080069d9 	.word	0x080069d9
 80068a0:	080069d9 	.word	0x080069d9
 80068a4:	080069d9 	.word	0x080069d9
 80068a8:	080069d9 	.word	0x080069d9
 80068ac:	080069d9 	.word	0x080069d9
 80068b0:	08006909 	.word	0x08006909
 80068b4:	0800692f 	.word	0x0800692f
 80068b8:	080069d9 	.word	0x080069d9
 80068bc:	080069d9 	.word	0x080069d9
 80068c0:	080069d9 	.word	0x080069d9
 80068c4:	080069d9 	.word	0x080069d9
 80068c8:	080069d9 	.word	0x080069d9
 80068cc:	080069d9 	.word	0x080069d9
 80068d0:	080069d9 	.word	0x080069d9
 80068d4:	080069d9 	.word	0x080069d9
 80068d8:	080069d9 	.word	0x080069d9
 80068dc:	080069d9 	.word	0x080069d9
 80068e0:	080069d9 	.word	0x080069d9
 80068e4:	080069a5 	.word	0x080069a5
 80068e8:	080069d9 	.word	0x080069d9
 80068ec:	080069d9 	.word	0x080069d9
 80068f0:	080069d9 	.word	0x080069d9
 80068f4:	080069d9 	.word	0x080069d9
 80068f8:	08006955 	.word	0x08006955
 80068fc:	080069d9 	.word	0x080069d9
 8006900:	080069d9 	.word	0x080069d9
 8006904:	0800697b 	.word	0x0800697b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	1d19      	adds	r1, r3, #4
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	6011      	str	r1, [r2, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8006916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006918:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 800691c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006920:	f107 0314 	add.w	r3, r7, #20
 8006924:	4611      	mov	r1, r2
 8006926:	4618      	mov	r0, r3
 8006928:	f7ff fd1c 	bl	8006364 <_StoreChar>
        break;
 800692c:	e055      	b.n	80069da <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	1d19      	adds	r1, r3, #4
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6011      	str	r1, [r2, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800693c:	f107 0014 	add.w	r0, r7, #20
 8006940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006942:	9301      	str	r3, [sp, #4]
 8006944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800694a:	220a      	movs	r2, #10
 800694c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800694e:	f7ff fe1b 	bl	8006588 <_PrintInt>
        break;
 8006952:	e042      	b.n	80069da <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	1d19      	adds	r1, r3, #4
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	6011      	str	r1, [r2, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006962:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006964:	f107 0014 	add.w	r0, r7, #20
 8006968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800696a:	9301      	str	r3, [sp, #4]
 800696c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006972:	220a      	movs	r2, #10
 8006974:	f7ff fd72 	bl	800645c <_PrintUnsigned>
        break;
 8006978:	e02f      	b.n	80069da <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	1d19      	adds	r1, r3, #4
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	6011      	str	r1, [r2, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006988:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800698a:	f107 0014 	add.w	r0, r7, #20
 800698e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006990:	9301      	str	r3, [sp, #4]
 8006992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006998:	2210      	movs	r2, #16
 800699a:	f7ff fd5f 	bl	800645c <_PrintUnsigned>
        break;
 800699e:	e01c      	b.n	80069da <_VPrintTarget+0x332>
 80069a0:	20014410 	.word	0x20014410
      case 'p':
        v = va_arg(*pParamList, int);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	1d19      	adds	r1, r3, #4
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	6011      	str	r1, [r2, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80069b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80069b4:	f107 0014 	add.w	r0, r7, #20
 80069b8:	2300      	movs	r3, #0
 80069ba:	9301      	str	r3, [sp, #4]
 80069bc:	2308      	movs	r3, #8
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	2308      	movs	r3, #8
 80069c2:	2210      	movs	r2, #16
 80069c4:	f7ff fd4a 	bl	800645c <_PrintUnsigned>
        break;
 80069c8:	e007      	b.n	80069da <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80069ca:	f107 0314 	add.w	r3, r7, #20
 80069ce:	2125      	movs	r1, #37	; 0x25
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7ff fcc7 	bl	8006364 <_StoreChar>
        break;
 80069d6:	e000      	b.n	80069da <_VPrintTarget+0x332>
      default:
        break;
 80069d8:	bf00      	nop
      }
      sFormat++;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	3301      	adds	r3, #1
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	e007      	b.n	80069f2 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80069e2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80069e6:	f107 0314 	add.w	r3, r7, #20
 80069ea:	4611      	mov	r1, r2
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7ff fcb9 	bl	8006364 <_StoreChar>
    }
  } while (*sFormat);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f47f ae72 	bne.w	80066e0 <_VPrintTarget+0x38>
 80069fc:	e000      	b.n	8006a00 <_VPrintTarget+0x358>
      break;
 80069fe:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d041      	beq.n	8006a8a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8006a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	643b      	str	r3, [r7, #64]	; 0x40
 8006a12:	6a3b      	ldr	r3, [r7, #32]
 8006a14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a16:	e00b      	b.n	8006a30 <_VPrintTarget+0x388>
 8006a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a1e:	1c59      	adds	r1, r3, #1
 8006a20:	6439      	str	r1, [r7, #64]	; 0x40
 8006a22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a26:	b2d2      	uxtb	r2, r2
 8006a28:	701a      	strb	r2, [r3, #0]
 8006a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a2c:	09db      	lsrs	r3, r3, #7
 8006a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a32:	2b7f      	cmp	r3, #127	; 0x7f
 8006a34:	d8f0      	bhi.n	8006a18 <_VPrintTarget+0x370>
 8006a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a38:	1c5a      	adds	r2, r3, #1
 8006a3a:	643a      	str	r2, [r7, #64]	; 0x40
 8006a3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	701a      	strb	r2, [r3, #0]
 8006a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a44:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a4e:	e00b      	b.n	8006a68 <_VPrintTarget+0x3c0>
 8006a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a56:	1c59      	adds	r1, r3, #1
 8006a58:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a5e:	b2d2      	uxtb	r2, r2
 8006a60:	701a      	strb	r2, [r3, #0]
 8006a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a64:	09db      	lsrs	r3, r3, #7
 8006a66:	637b      	str	r3, [r7, #52]	; 0x34
 8006a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a6c:	d8f0      	bhi.n	8006a50 <_VPrintTarget+0x3a8>
 8006a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	63ba      	str	r2, [r7, #56]	; 0x38
 8006a74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a76:	b2d2      	uxtb	r2, r2
 8006a78:	701a      	strb	r2, [r3, #0]
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	69b9      	ldr	r1, [r7, #24]
 8006a82:	221a      	movs	r2, #26
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7ff fb85 	bl	8006194 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006a90:	bf00      	nop
 8006a92:	3758      	adds	r7, #88	; 0x58
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af02      	add	r7, sp, #8
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
 8006aa4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006aac:	4917      	ldr	r1, [pc, #92]	; (8006b0c <SEGGER_SYSVIEW_Init+0x74>)
 8006aae:	4818      	ldr	r0, [pc, #96]	; (8006b10 <SEGGER_SYSVIEW_Init+0x78>)
 8006ab0:	f7ff f93e 	bl	8005d30 <SEGGER_RTT_AllocUpBuffer>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	4b16      	ldr	r3, [pc, #88]	; (8006b14 <SEGGER_SYSVIEW_Init+0x7c>)
 8006aba:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006abc:	4b15      	ldr	r3, [pc, #84]	; (8006b14 <SEGGER_SYSVIEW_Init+0x7c>)
 8006abe:	785a      	ldrb	r2, [r3, #1]
 8006ac0:	4b14      	ldr	r3, [pc, #80]	; (8006b14 <SEGGER_SYSVIEW_Init+0x7c>)
 8006ac2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006ac4:	4b13      	ldr	r3, [pc, #76]	; (8006b14 <SEGGER_SYSVIEW_Init+0x7c>)
 8006ac6:	7e1b      	ldrb	r3, [r3, #24]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	2300      	movs	r3, #0
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	2308      	movs	r3, #8
 8006ad0:	4a11      	ldr	r2, [pc, #68]	; (8006b18 <SEGGER_SYSVIEW_Init+0x80>)
 8006ad2:	490f      	ldr	r1, [pc, #60]	; (8006b10 <SEGGER_SYSVIEW_Init+0x78>)
 8006ad4:	f7ff f9b0 	bl	8005e38 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006ad8:	4b0e      	ldr	r3, [pc, #56]	; (8006b14 <SEGGER_SYSVIEW_Init+0x7c>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006ade:	4b0f      	ldr	r3, [pc, #60]	; (8006b1c <SEGGER_SYSVIEW_Init+0x84>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a0c      	ldr	r2, [pc, #48]	; (8006b14 <SEGGER_SYSVIEW_Init+0x7c>)
 8006ae4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006ae6:	4a0b      	ldr	r2, [pc, #44]	; (8006b14 <SEGGER_SYSVIEW_Init+0x7c>)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006aec:	4a09      	ldr	r2, [pc, #36]	; (8006b14 <SEGGER_SYSVIEW_Init+0x7c>)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006af2:	4a08      	ldr	r2, [pc, #32]	; (8006b14 <SEGGER_SYSVIEW_Init+0x7c>)
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006af8:	4a06      	ldr	r2, [pc, #24]	; (8006b14 <SEGGER_SYSVIEW_Init+0x7c>)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006afe:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006b04:	bf00      	nop
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	200133d8 	.word	0x200133d8
 8006b10:	08007ccc 	.word	0x08007ccc
 8006b14:	200143e0 	.word	0x200143e0
 8006b18:	200143d8 	.word	0x200143d8
 8006b1c:	e0001004 	.word	0xe0001004

08006b20 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006b28:	4a04      	ldr	r2, [pc, #16]	; (8006b3c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6113      	str	r3, [r2, #16]
}
 8006b2e:	bf00      	nop
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	200143e0 	.word	0x200143e0

08006b40 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b48:	f3ef 8311 	mrs	r3, BASEPRI
 8006b4c:	f04f 0120 	mov.w	r1, #32
 8006b50:	f381 8811 	msr	BASEPRI, r1
 8006b54:	60fb      	str	r3, [r7, #12]
 8006b56:	4808      	ldr	r0, [pc, #32]	; (8006b78 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006b58:	f7ff fa2b 	bl	8005fb2 <_PreparePacket>
 8006b5c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	68b9      	ldr	r1, [r7, #8]
 8006b62:	68b8      	ldr	r0, [r7, #8]
 8006b64:	f7ff fb16 	bl	8006194 <_SendPacket>
  RECORD_END();
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f383 8811 	msr	BASEPRI, r3
}
 8006b6e:	bf00      	nop
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20014410 	.word	0x20014410

08006b7c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b088      	sub	sp, #32
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b86:	f3ef 8311 	mrs	r3, BASEPRI
 8006b8a:	f04f 0120 	mov.w	r1, #32
 8006b8e:	f381 8811 	msr	BASEPRI, r1
 8006b92:	617b      	str	r3, [r7, #20]
 8006b94:	4816      	ldr	r0, [pc, #88]	; (8006bf0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006b96:	f7ff fa0c 	bl	8005fb2 <_PreparePacket>
 8006b9a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	61fb      	str	r3, [r7, #28]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	61bb      	str	r3, [r7, #24]
 8006ba8:	e00b      	b.n	8006bc2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	b2da      	uxtb	r2, r3
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	1c59      	adds	r1, r3, #1
 8006bb2:	61f9      	str	r1, [r7, #28]
 8006bb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bb8:	b2d2      	uxtb	r2, r2
 8006bba:	701a      	strb	r2, [r3, #0]
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	09db      	lsrs	r3, r3, #7
 8006bc0:	61bb      	str	r3, [r7, #24]
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	2b7f      	cmp	r3, #127	; 0x7f
 8006bc6:	d8f0      	bhi.n	8006baa <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	61fa      	str	r2, [r7, #28]
 8006bce:	69ba      	ldr	r2, [r7, #24]
 8006bd0:	b2d2      	uxtb	r2, r2
 8006bd2:	701a      	strb	r2, [r3, #0]
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	68f9      	ldr	r1, [r7, #12]
 8006bdc:	6938      	ldr	r0, [r7, #16]
 8006bde:	f7ff fad9 	bl	8006194 <_SendPacket>
  RECORD_END();
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f383 8811 	msr	BASEPRI, r3
}
 8006be8:	bf00      	nop
 8006bea:	3720      	adds	r7, #32
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	20014410 	.word	0x20014410

08006bf4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b08c      	sub	sp, #48	; 0x30
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c00:	f3ef 8311 	mrs	r3, BASEPRI
 8006c04:	f04f 0120 	mov.w	r1, #32
 8006c08:	f381 8811 	msr	BASEPRI, r1
 8006c0c:	61fb      	str	r3, [r7, #28]
 8006c0e:	4825      	ldr	r0, [pc, #148]	; (8006ca4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006c10:	f7ff f9cf 	bl	8005fb2 <_PreparePacket>
 8006c14:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c22:	e00b      	b.n	8006c3c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2a:	1c59      	adds	r1, r3, #1
 8006c2c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006c2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c32:	b2d2      	uxtb	r2, r2
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c38:	09db      	lsrs	r3, r3, #7
 8006c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c40:	d8f0      	bhi.n	8006c24 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c4a:	b2d2      	uxtb	r2, r2
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c50:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	627b      	str	r3, [r7, #36]	; 0x24
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	623b      	str	r3, [r7, #32]
 8006c5a:	e00b      	b.n	8006c74 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	1c59      	adds	r1, r3, #1
 8006c64:	6279      	str	r1, [r7, #36]	; 0x24
 8006c66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c6a:	b2d2      	uxtb	r2, r2
 8006c6c:	701a      	strb	r2, [r3, #0]
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	09db      	lsrs	r3, r3, #7
 8006c72:	623b      	str	r3, [r7, #32]
 8006c74:	6a3b      	ldr	r3, [r7, #32]
 8006c76:	2b7f      	cmp	r3, #127	; 0x7f
 8006c78:	d8f0      	bhi.n	8006c5c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	1c5a      	adds	r2, r3, #1
 8006c7e:	627a      	str	r2, [r7, #36]	; 0x24
 8006c80:	6a3a      	ldr	r2, [r7, #32]
 8006c82:	b2d2      	uxtb	r2, r2
 8006c84:	701a      	strb	r2, [r3, #0]
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	6979      	ldr	r1, [r7, #20]
 8006c8e:	69b8      	ldr	r0, [r7, #24]
 8006c90:	f7ff fa80 	bl	8006194 <_SendPacket>
  RECORD_END();
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	f383 8811 	msr	BASEPRI, r3
}
 8006c9a:	bf00      	nop
 8006c9c:	3730      	adds	r7, #48	; 0x30
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20014410 	.word	0x20014410

08006ca8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b08e      	sub	sp, #56	; 0x38
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
 8006cb4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006cb6:	f3ef 8311 	mrs	r3, BASEPRI
 8006cba:	f04f 0120 	mov.w	r1, #32
 8006cbe:	f381 8811 	msr	BASEPRI, r1
 8006cc2:	61fb      	str	r3, [r7, #28]
 8006cc4:	4832      	ldr	r0, [pc, #200]	; (8006d90 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006cc6:	f7ff f974 	bl	8005fb2 <_PreparePacket>
 8006cca:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	633b      	str	r3, [r7, #48]	; 0x30
 8006cd8:	e00b      	b.n	8006cf2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce0:	1c59      	adds	r1, r3, #1
 8006ce2:	6379      	str	r1, [r7, #52]	; 0x34
 8006ce4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ce8:	b2d2      	uxtb	r2, r2
 8006cea:	701a      	strb	r2, [r3, #0]
 8006cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cee:	09db      	lsrs	r3, r3, #7
 8006cf0:	633b      	str	r3, [r7, #48]	; 0x30
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	2b7f      	cmp	r3, #127	; 0x7f
 8006cf6:	d8f0      	bhi.n	8006cda <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfa:	1c5a      	adds	r2, r3, #1
 8006cfc:	637a      	str	r2, [r7, #52]	; 0x34
 8006cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d00:	b2d2      	uxtb	r2, r2
 8006d02:	701a      	strb	r2, [r3, #0]
 8006d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d06:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d10:	e00b      	b.n	8006d2a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d18:	1c59      	adds	r1, r3, #1
 8006d1a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006d1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d20:	b2d2      	uxtb	r2, r2
 8006d22:	701a      	strb	r2, [r3, #0]
 8006d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d26:	09db      	lsrs	r3, r3, #7
 8006d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2c:	2b7f      	cmp	r3, #127	; 0x7f
 8006d2e:	d8f0      	bhi.n	8006d12 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d38:	b2d2      	uxtb	r2, r2
 8006d3a:	701a      	strb	r2, [r3, #0]
 8006d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	627b      	str	r3, [r7, #36]	; 0x24
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	623b      	str	r3, [r7, #32]
 8006d48:	e00b      	b.n	8006d62 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	b2da      	uxtb	r2, r3
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d50:	1c59      	adds	r1, r3, #1
 8006d52:	6279      	str	r1, [r7, #36]	; 0x24
 8006d54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d58:	b2d2      	uxtb	r2, r2
 8006d5a:	701a      	strb	r2, [r3, #0]
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	09db      	lsrs	r3, r3, #7
 8006d60:	623b      	str	r3, [r7, #32]
 8006d62:	6a3b      	ldr	r3, [r7, #32]
 8006d64:	2b7f      	cmp	r3, #127	; 0x7f
 8006d66:	d8f0      	bhi.n	8006d4a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6a:	1c5a      	adds	r2, r3, #1
 8006d6c:	627a      	str	r2, [r7, #36]	; 0x24
 8006d6e:	6a3a      	ldr	r2, [r7, #32]
 8006d70:	b2d2      	uxtb	r2, r2
 8006d72:	701a      	strb	r2, [r3, #0]
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	6979      	ldr	r1, [r7, #20]
 8006d7c:	69b8      	ldr	r0, [r7, #24]
 8006d7e:	f7ff fa09 	bl	8006194 <_SendPacket>
  RECORD_END();
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	f383 8811 	msr	BASEPRI, r3
}
 8006d88:	bf00      	nop
 8006d8a:	3738      	adds	r7, #56	; 0x38
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	20014410 	.word	0x20014410

08006d94 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b090      	sub	sp, #64	; 0x40
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
 8006da0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006da2:	f3ef 8311 	mrs	r3, BASEPRI
 8006da6:	f04f 0120 	mov.w	r1, #32
 8006daa:	f381 8811 	msr	BASEPRI, r1
 8006dae:	61fb      	str	r3, [r7, #28]
 8006db0:	4840      	ldr	r0, [pc, #256]	; (8006eb4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006db2:	f7ff f8fe 	bl	8005fb2 <_PreparePacket>
 8006db6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dc4:	e00b      	b.n	8006dde <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dcc:	1c59      	adds	r1, r3, #1
 8006dce:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006dd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dd4:	b2d2      	uxtb	r2, r2
 8006dd6:	701a      	strb	r2, [r3, #0]
 8006dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dda:	09db      	lsrs	r3, r3, #7
 8006ddc:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de0:	2b7f      	cmp	r3, #127	; 0x7f
 8006de2:	d8f0      	bhi.n	8006dc6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006de6:	1c5a      	adds	r2, r3, #1
 8006de8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006dea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dec:	b2d2      	uxtb	r2, r2
 8006dee:	701a      	strb	r2, [r3, #0]
 8006df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	637b      	str	r3, [r7, #52]	; 0x34
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	633b      	str	r3, [r7, #48]	; 0x30
 8006dfc:	e00b      	b.n	8006e16 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e04:	1c59      	adds	r1, r3, #1
 8006e06:	6379      	str	r1, [r7, #52]	; 0x34
 8006e08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e0c:	b2d2      	uxtb	r2, r2
 8006e0e:	701a      	strb	r2, [r3, #0]
 8006e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e12:	09db      	lsrs	r3, r3, #7
 8006e14:	633b      	str	r3, [r7, #48]	; 0x30
 8006e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e18:	2b7f      	cmp	r3, #127	; 0x7f
 8006e1a:	d8f0      	bhi.n	8006dfe <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e1e:	1c5a      	adds	r2, r3, #1
 8006e20:	637a      	str	r2, [r7, #52]	; 0x34
 8006e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e24:	b2d2      	uxtb	r2, r2
 8006e26:	701a      	strb	r2, [r3, #0]
 8006e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e2a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e34:	e00b      	b.n	8006e4e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3c:	1c59      	adds	r1, r3, #1
 8006e3e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006e40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e44:	b2d2      	uxtb	r2, r2
 8006e46:	701a      	strb	r2, [r3, #0]
 8006e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4a:	09db      	lsrs	r3, r3, #7
 8006e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e50:	2b7f      	cmp	r3, #127	; 0x7f
 8006e52:	d8f0      	bhi.n	8006e36 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e5c:	b2d2      	uxtb	r2, r2
 8006e5e:	701a      	strb	r2, [r3, #0]
 8006e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e62:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	627b      	str	r3, [r7, #36]	; 0x24
 8006e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e6a:	623b      	str	r3, [r7, #32]
 8006e6c:	e00b      	b.n	8006e86 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006e6e:	6a3b      	ldr	r3, [r7, #32]
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	1c59      	adds	r1, r3, #1
 8006e76:	6279      	str	r1, [r7, #36]	; 0x24
 8006e78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e7c:	b2d2      	uxtb	r2, r2
 8006e7e:	701a      	strb	r2, [r3, #0]
 8006e80:	6a3b      	ldr	r3, [r7, #32]
 8006e82:	09db      	lsrs	r3, r3, #7
 8006e84:	623b      	str	r3, [r7, #32]
 8006e86:	6a3b      	ldr	r3, [r7, #32]
 8006e88:	2b7f      	cmp	r3, #127	; 0x7f
 8006e8a:	d8f0      	bhi.n	8006e6e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	1c5a      	adds	r2, r3, #1
 8006e90:	627a      	str	r2, [r7, #36]	; 0x24
 8006e92:	6a3a      	ldr	r2, [r7, #32]
 8006e94:	b2d2      	uxtb	r2, r2
 8006e96:	701a      	strb	r2, [r3, #0]
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	6979      	ldr	r1, [r7, #20]
 8006ea0:	69b8      	ldr	r0, [r7, #24]
 8006ea2:	f7ff f977 	bl	8006194 <_SendPacket>
  RECORD_END();
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	f383 8811 	msr	BASEPRI, r3
}
 8006eac:	bf00      	nop
 8006eae:	3740      	adds	r7, #64	; 0x40
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	20014410 	.word	0x20014410

08006eb8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b08c      	sub	sp, #48	; 0x30
 8006ebc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006ebe:	4b59      	ldr	r3, [pc, #356]	; (8007024 <SEGGER_SYSVIEW_Start+0x16c>)
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006ec4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ec8:	f04f 0120 	mov.w	r1, #32
 8006ecc:	f381 8811 	msr	BASEPRI, r1
 8006ed0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006ed2:	4b54      	ldr	r3, [pc, #336]	; (8007024 <SEGGER_SYSVIEW_Start+0x16c>)
 8006ed4:	785b      	ldrb	r3, [r3, #1]
 8006ed6:	220a      	movs	r2, #10
 8006ed8:	4953      	ldr	r1, [pc, #332]	; (8007028 <SEGGER_SYSVIEW_Start+0x170>)
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7f9 f978 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006ee6:	f7fe fbf7 	bl	80056d8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006eea:	200a      	movs	r0, #10
 8006eec:	f7ff fe28 	bl	8006b40 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006ef0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ef4:	f04f 0120 	mov.w	r1, #32
 8006ef8:	f381 8811 	msr	BASEPRI, r1
 8006efc:	60bb      	str	r3, [r7, #8]
 8006efe:	484b      	ldr	r0, [pc, #300]	; (800702c <SEGGER_SYSVIEW_Start+0x174>)
 8006f00:	f7ff f857 	bl	8005fb2 <_PreparePacket>
 8006f04:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f0e:	4b45      	ldr	r3, [pc, #276]	; (8007024 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f14:	e00b      	b.n	8006f2e <SEGGER_SYSVIEW_Start+0x76>
 8006f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f18:	b2da      	uxtb	r2, r3
 8006f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1c:	1c59      	adds	r1, r3, #1
 8006f1e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006f20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f24:	b2d2      	uxtb	r2, r2
 8006f26:	701a      	strb	r2, [r3, #0]
 8006f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2a:	09db      	lsrs	r3, r3, #7
 8006f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f30:	2b7f      	cmp	r3, #127	; 0x7f
 8006f32:	d8f0      	bhi.n	8006f16 <SEGGER_SYSVIEW_Start+0x5e>
 8006f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f3c:	b2d2      	uxtb	r2, r2
 8006f3e:	701a      	strb	r2, [r3, #0]
 8006f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f42:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	627b      	str	r3, [r7, #36]	; 0x24
 8006f48:	4b36      	ldr	r3, [pc, #216]	; (8007024 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	623b      	str	r3, [r7, #32]
 8006f4e:	e00b      	b.n	8006f68 <SEGGER_SYSVIEW_Start+0xb0>
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	1c59      	adds	r1, r3, #1
 8006f58:	6279      	str	r1, [r7, #36]	; 0x24
 8006f5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f5e:	b2d2      	uxtb	r2, r2
 8006f60:	701a      	strb	r2, [r3, #0]
 8006f62:	6a3b      	ldr	r3, [r7, #32]
 8006f64:	09db      	lsrs	r3, r3, #7
 8006f66:	623b      	str	r3, [r7, #32]
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8006f6c:	d8f0      	bhi.n	8006f50 <SEGGER_SYSVIEW_Start+0x98>
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	1c5a      	adds	r2, r3, #1
 8006f72:	627a      	str	r2, [r7, #36]	; 0x24
 8006f74:	6a3a      	ldr	r2, [r7, #32]
 8006f76:	b2d2      	uxtb	r2, r2
 8006f78:	701a      	strb	r2, [r3, #0]
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	61fb      	str	r3, [r7, #28]
 8006f82:	4b28      	ldr	r3, [pc, #160]	; (8007024 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	61bb      	str	r3, [r7, #24]
 8006f88:	e00b      	b.n	8006fa2 <SEGGER_SYSVIEW_Start+0xea>
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	1c59      	adds	r1, r3, #1
 8006f92:	61f9      	str	r1, [r7, #28]
 8006f94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f98:	b2d2      	uxtb	r2, r2
 8006f9a:	701a      	strb	r2, [r3, #0]
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	09db      	lsrs	r3, r3, #7
 8006fa0:	61bb      	str	r3, [r7, #24]
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	2b7f      	cmp	r3, #127	; 0x7f
 8006fa6:	d8f0      	bhi.n	8006f8a <SEGGER_SYSVIEW_Start+0xd2>
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	61fa      	str	r2, [r7, #28]
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	b2d2      	uxtb	r2, r2
 8006fb2:	701a      	strb	r2, [r3, #0]
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	617b      	str	r3, [r7, #20]
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	613b      	str	r3, [r7, #16]
 8006fc0:	e00b      	b.n	8006fda <SEGGER_SYSVIEW_Start+0x122>
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	1c59      	adds	r1, r3, #1
 8006fca:	6179      	str	r1, [r7, #20]
 8006fcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fd0:	b2d2      	uxtb	r2, r2
 8006fd2:	701a      	strb	r2, [r3, #0]
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	09db      	lsrs	r3, r3, #7
 8006fd8:	613b      	str	r3, [r7, #16]
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	2b7f      	cmp	r3, #127	; 0x7f
 8006fde:	d8f0      	bhi.n	8006fc2 <SEGGER_SYSVIEW_Start+0x10a>
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	1c5a      	adds	r2, r3, #1
 8006fe4:	617a      	str	r2, [r7, #20]
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	b2d2      	uxtb	r2, r2
 8006fea:	701a      	strb	r2, [r3, #0]
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006ff0:	2218      	movs	r2, #24
 8006ff2:	6839      	ldr	r1, [r7, #0]
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff f8cd 	bl	8006194 <_SendPacket>
      RECORD_END();
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007000:	4b08      	ldr	r3, [pc, #32]	; (8007024 <SEGGER_SYSVIEW_Start+0x16c>)
 8007002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007004:	2b00      	cmp	r3, #0
 8007006:	d002      	beq.n	800700e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007008:	4b06      	ldr	r3, [pc, #24]	; (8007024 <SEGGER_SYSVIEW_Start+0x16c>)
 800700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800700e:	f000 f9eb 	bl	80073e8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007012:	f000 f9b1 	bl	8007378 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8007016:	f000 fc83 	bl	8007920 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800701a:	bf00      	nop
 800701c:	3730      	adds	r7, #48	; 0x30
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	200143e0 	.word	0x200143e0
 8007028:	08007cf8 	.word	0x08007cf8
 800702c:	20014410 	.word	0x20014410

08007030 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007036:	f3ef 8311 	mrs	r3, BASEPRI
 800703a:	f04f 0120 	mov.w	r1, #32
 800703e:	f381 8811 	msr	BASEPRI, r1
 8007042:	607b      	str	r3, [r7, #4]
 8007044:	480b      	ldr	r0, [pc, #44]	; (8007074 <SEGGER_SYSVIEW_Stop+0x44>)
 8007046:	f7fe ffb4 	bl	8005fb2 <_PreparePacket>
 800704a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800704c:	4b0a      	ldr	r3, [pc, #40]	; (8007078 <SEGGER_SYSVIEW_Stop+0x48>)
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d007      	beq.n	8007064 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8007054:	220b      	movs	r2, #11
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6838      	ldr	r0, [r7, #0]
 800705a:	f7ff f89b 	bl	8006194 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800705e:	4b06      	ldr	r3, [pc, #24]	; (8007078 <SEGGER_SYSVIEW_Stop+0x48>)
 8007060:	2200      	movs	r2, #0
 8007062:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f383 8811 	msr	BASEPRI, r3
}
 800706a:	bf00      	nop
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	20014410 	.word	0x20014410
 8007078:	200143e0 	.word	0x200143e0

0800707c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800707c:	b580      	push	{r7, lr}
 800707e:	b08c      	sub	sp, #48	; 0x30
 8007080:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007082:	f3ef 8311 	mrs	r3, BASEPRI
 8007086:	f04f 0120 	mov.w	r1, #32
 800708a:	f381 8811 	msr	BASEPRI, r1
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	4845      	ldr	r0, [pc, #276]	; (80071a8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007092:	f7fe ff8e 	bl	8005fb2 <_PreparePacket>
 8007096:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070a0:	4b42      	ldr	r3, [pc, #264]	; (80071ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80070a6:	e00b      	b.n	80070c0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80070a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ae:	1c59      	adds	r1, r3, #1
 80070b0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80070b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070b6:	b2d2      	uxtb	r2, r2
 80070b8:	701a      	strb	r2, [r3, #0]
 80070ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070bc:	09db      	lsrs	r3, r3, #7
 80070be:	62bb      	str	r3, [r7, #40]	; 0x28
 80070c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c2:	2b7f      	cmp	r3, #127	; 0x7f
 80070c4:	d8f0      	bhi.n	80070a8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80070c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070ce:	b2d2      	uxtb	r2, r2
 80070d0:	701a      	strb	r2, [r3, #0]
 80070d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	627b      	str	r3, [r7, #36]	; 0x24
 80070da:	4b34      	ldr	r3, [pc, #208]	; (80071ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	623b      	str	r3, [r7, #32]
 80070e0:	e00b      	b.n	80070fa <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e8:	1c59      	adds	r1, r3, #1
 80070ea:	6279      	str	r1, [r7, #36]	; 0x24
 80070ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070f0:	b2d2      	uxtb	r2, r2
 80070f2:	701a      	strb	r2, [r3, #0]
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	09db      	lsrs	r3, r3, #7
 80070f8:	623b      	str	r3, [r7, #32]
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	2b7f      	cmp	r3, #127	; 0x7f
 80070fe:	d8f0      	bhi.n	80070e2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	1c5a      	adds	r2, r3, #1
 8007104:	627a      	str	r2, [r7, #36]	; 0x24
 8007106:	6a3a      	ldr	r2, [r7, #32]
 8007108:	b2d2      	uxtb	r2, r2
 800710a:	701a      	strb	r2, [r3, #0]
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	61fb      	str	r3, [r7, #28]
 8007114:	4b25      	ldr	r3, [pc, #148]	; (80071ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	61bb      	str	r3, [r7, #24]
 800711a:	e00b      	b.n	8007134 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	b2da      	uxtb	r2, r3
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	1c59      	adds	r1, r3, #1
 8007124:	61f9      	str	r1, [r7, #28]
 8007126:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800712a:	b2d2      	uxtb	r2, r2
 800712c:	701a      	strb	r2, [r3, #0]
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	09db      	lsrs	r3, r3, #7
 8007132:	61bb      	str	r3, [r7, #24]
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	2b7f      	cmp	r3, #127	; 0x7f
 8007138:	d8f0      	bhi.n	800711c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	1c5a      	adds	r2, r3, #1
 800713e:	61fa      	str	r2, [r7, #28]
 8007140:	69ba      	ldr	r2, [r7, #24]
 8007142:	b2d2      	uxtb	r2, r2
 8007144:	701a      	strb	r2, [r3, #0]
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	617b      	str	r3, [r7, #20]
 800714e:	2300      	movs	r3, #0
 8007150:	613b      	str	r3, [r7, #16]
 8007152:	e00b      	b.n	800716c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	b2da      	uxtb	r2, r3
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	1c59      	adds	r1, r3, #1
 800715c:	6179      	str	r1, [r7, #20]
 800715e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007162:	b2d2      	uxtb	r2, r2
 8007164:	701a      	strb	r2, [r3, #0]
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	09db      	lsrs	r3, r3, #7
 800716a:	613b      	str	r3, [r7, #16]
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	2b7f      	cmp	r3, #127	; 0x7f
 8007170:	d8f0      	bhi.n	8007154 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	1c5a      	adds	r2, r3, #1
 8007176:	617a      	str	r2, [r7, #20]
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	b2d2      	uxtb	r2, r2
 800717c:	701a      	strb	r2, [r3, #0]
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007182:	2218      	movs	r2, #24
 8007184:	6879      	ldr	r1, [r7, #4]
 8007186:	68b8      	ldr	r0, [r7, #8]
 8007188:	f7ff f804 	bl	8006194 <_SendPacket>
  RECORD_END();
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007192:	4b06      	ldr	r3, [pc, #24]	; (80071ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800719a:	4b04      	ldr	r3, [pc, #16]	; (80071ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800719c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719e:	4798      	blx	r3
  }
}
 80071a0:	bf00      	nop
 80071a2:	3730      	adds	r7, #48	; 0x30
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	20014410 	.word	0x20014410
 80071ac:	200143e0 	.word	0x200143e0

080071b0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b092      	sub	sp, #72	; 0x48
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80071b8:	f3ef 8311 	mrs	r3, BASEPRI
 80071bc:	f04f 0120 	mov.w	r1, #32
 80071c0:	f381 8811 	msr	BASEPRI, r1
 80071c4:	617b      	str	r3, [r7, #20]
 80071c6:	486a      	ldr	r0, [pc, #424]	; (8007370 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80071c8:	f7fe fef3 	bl	8005fb2 <_PreparePacket>
 80071cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	647b      	str	r3, [r7, #68]	; 0x44
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	4b66      	ldr	r3, [pc, #408]	; (8007374 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	643b      	str	r3, [r7, #64]	; 0x40
 80071e2:	e00b      	b.n	80071fc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80071e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ea:	1c59      	adds	r1, r3, #1
 80071ec:	6479      	str	r1, [r7, #68]	; 0x44
 80071ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071f2:	b2d2      	uxtb	r2, r2
 80071f4:	701a      	strb	r2, [r3, #0]
 80071f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071f8:	09db      	lsrs	r3, r3, #7
 80071fa:	643b      	str	r3, [r7, #64]	; 0x40
 80071fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071fe:	2b7f      	cmp	r3, #127	; 0x7f
 8007200:	d8f0      	bhi.n	80071e4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007204:	1c5a      	adds	r2, r3, #1
 8007206:	647a      	str	r2, [r7, #68]	; 0x44
 8007208:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800720a:	b2d2      	uxtb	r2, r2
 800720c:	701a      	strb	r2, [r3, #0]
 800720e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007210:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	63bb      	str	r3, [r7, #56]	; 0x38
 800721c:	e00b      	b.n	8007236 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800721e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007220:	b2da      	uxtb	r2, r3
 8007222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007224:	1c59      	adds	r1, r3, #1
 8007226:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007228:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800722c:	b2d2      	uxtb	r2, r2
 800722e:	701a      	strb	r2, [r3, #0]
 8007230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007232:	09db      	lsrs	r3, r3, #7
 8007234:	63bb      	str	r3, [r7, #56]	; 0x38
 8007236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007238:	2b7f      	cmp	r3, #127	; 0x7f
 800723a:	d8f0      	bhi.n	800721e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800723c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800723e:	1c5a      	adds	r2, r3, #1
 8007240:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007242:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007244:	b2d2      	uxtb	r2, r2
 8007246:	701a      	strb	r2, [r3, #0]
 8007248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800724a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	2220      	movs	r2, #32
 8007252:	4619      	mov	r1, r3
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f7fe fe5f 	bl	8005f18 <_EncodeStr>
 800725a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800725c:	2209      	movs	r2, #9
 800725e:	68f9      	ldr	r1, [r7, #12]
 8007260:	6938      	ldr	r0, [r7, #16]
 8007262:	f7fe ff97 	bl	8006194 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	637b      	str	r3, [r7, #52]	; 0x34
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	4b40      	ldr	r3, [pc, #256]	; (8007374 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	633b      	str	r3, [r7, #48]	; 0x30
 800727a:	e00b      	b.n	8007294 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800727c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727e:	b2da      	uxtb	r2, r3
 8007280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007282:	1c59      	adds	r1, r3, #1
 8007284:	6379      	str	r1, [r7, #52]	; 0x34
 8007286:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800728a:	b2d2      	uxtb	r2, r2
 800728c:	701a      	strb	r2, [r3, #0]
 800728e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007290:	09db      	lsrs	r3, r3, #7
 8007292:	633b      	str	r3, [r7, #48]	; 0x30
 8007294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007296:	2b7f      	cmp	r3, #127	; 0x7f
 8007298:	d8f0      	bhi.n	800727c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800729a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800729c:	1c5a      	adds	r2, r3, #1
 800729e:	637a      	str	r2, [r7, #52]	; 0x34
 80072a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072a2:	b2d2      	uxtb	r2, r2
 80072a4:	701a      	strb	r2, [r3, #0]
 80072a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80072b4:	e00b      	b.n	80072ce <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80072b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072bc:	1c59      	adds	r1, r3, #1
 80072be:	62f9      	str	r1, [r7, #44]	; 0x2c
 80072c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072c4:	b2d2      	uxtb	r2, r2
 80072c6:	701a      	strb	r2, [r3, #0]
 80072c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ca:	09db      	lsrs	r3, r3, #7
 80072cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80072ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d0:	2b7f      	cmp	r3, #127	; 0x7f
 80072d2:	d8f0      	bhi.n	80072b6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80072d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d6:	1c5a      	adds	r2, r3, #1
 80072d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072dc:	b2d2      	uxtb	r2, r2
 80072de:	701a      	strb	r2, [r3, #0]
 80072e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	627b      	str	r3, [r7, #36]	; 0x24
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	623b      	str	r3, [r7, #32]
 80072ee:	e00b      	b.n	8007308 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	b2da      	uxtb	r2, r3
 80072f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f6:	1c59      	adds	r1, r3, #1
 80072f8:	6279      	str	r1, [r7, #36]	; 0x24
 80072fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072fe:	b2d2      	uxtb	r2, r2
 8007300:	701a      	strb	r2, [r3, #0]
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	09db      	lsrs	r3, r3, #7
 8007306:	623b      	str	r3, [r7, #32]
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	2b7f      	cmp	r3, #127	; 0x7f
 800730c:	d8f0      	bhi.n	80072f0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	1c5a      	adds	r2, r3, #1
 8007312:	627a      	str	r2, [r7, #36]	; 0x24
 8007314:	6a3a      	ldr	r2, [r7, #32]
 8007316:	b2d2      	uxtb	r2, r2
 8007318:	701a      	strb	r2, [r3, #0]
 800731a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	61fb      	str	r3, [r7, #28]
 8007322:	2300      	movs	r3, #0
 8007324:	61bb      	str	r3, [r7, #24]
 8007326:	e00b      	b.n	8007340 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	b2da      	uxtb	r2, r3
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	1c59      	adds	r1, r3, #1
 8007330:	61f9      	str	r1, [r7, #28]
 8007332:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007336:	b2d2      	uxtb	r2, r2
 8007338:	701a      	strb	r2, [r3, #0]
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	09db      	lsrs	r3, r3, #7
 800733e:	61bb      	str	r3, [r7, #24]
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	2b7f      	cmp	r3, #127	; 0x7f
 8007344:	d8f0      	bhi.n	8007328 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	1c5a      	adds	r2, r3, #1
 800734a:	61fa      	str	r2, [r7, #28]
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	b2d2      	uxtb	r2, r2
 8007350:	701a      	strb	r2, [r3, #0]
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007356:	2215      	movs	r2, #21
 8007358:	68f9      	ldr	r1, [r7, #12]
 800735a:	6938      	ldr	r0, [r7, #16]
 800735c:	f7fe ff1a 	bl	8006194 <_SendPacket>
  RECORD_END();
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	f383 8811 	msr	BASEPRI, r3
}
 8007366:	bf00      	nop
 8007368:	3748      	adds	r7, #72	; 0x48
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	20014410 	.word	0x20014410
 8007374:	200143e0 	.word	0x200143e0

08007378 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007378:	b580      	push	{r7, lr}
 800737a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800737c:	4b07      	ldr	r3, [pc, #28]	; (800739c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800737e:	6a1b      	ldr	r3, [r3, #32]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d008      	beq.n	8007396 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007384:	4b05      	ldr	r3, [pc, #20]	; (800739c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007386:	6a1b      	ldr	r3, [r3, #32]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800738e:	4b03      	ldr	r3, [pc, #12]	; (800739c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	4798      	blx	r3
  }
}
 8007396:	bf00      	nop
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	200143e0 	.word	0x200143e0

080073a0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80073a8:	f3ef 8311 	mrs	r3, BASEPRI
 80073ac:	f04f 0120 	mov.w	r1, #32
 80073b0:	f381 8811 	msr	BASEPRI, r1
 80073b4:	617b      	str	r3, [r7, #20]
 80073b6:	480b      	ldr	r0, [pc, #44]	; (80073e4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80073b8:	f7fe fdfb 	bl	8005fb2 <_PreparePacket>
 80073bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80073be:	2280      	movs	r2, #128	; 0x80
 80073c0:	6879      	ldr	r1, [r7, #4]
 80073c2:	6938      	ldr	r0, [r7, #16]
 80073c4:	f7fe fda8 	bl	8005f18 <_EncodeStr>
 80073c8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80073ca:	220e      	movs	r2, #14
 80073cc:	68f9      	ldr	r1, [r7, #12]
 80073ce:	6938      	ldr	r0, [r7, #16]
 80073d0:	f7fe fee0 	bl	8006194 <_SendPacket>
  RECORD_END();
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f383 8811 	msr	BASEPRI, r3
}
 80073da:	bf00      	nop
 80073dc:	3718      	adds	r7, #24
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	20014410 	.word	0x20014410

080073e8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80073e8:	b590      	push	{r4, r7, lr}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80073ee:	4b15      	ldr	r3, [pc, #84]	; (8007444 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d01a      	beq.n	800742c <SEGGER_SYSVIEW_RecordSystime+0x44>
 80073f6:	4b13      	ldr	r3, [pc, #76]	; (8007444 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d015      	beq.n	800742c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007400:	4b10      	ldr	r3, [pc, #64]	; (8007444 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007402:	6a1b      	ldr	r3, [r3, #32]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4798      	blx	r3
 8007408:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800740c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800740e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007412:	f04f 0200 	mov.w	r2, #0
 8007416:	f04f 0300 	mov.w	r3, #0
 800741a:	000a      	movs	r2, r1
 800741c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800741e:	4613      	mov	r3, r2
 8007420:	461a      	mov	r2, r3
 8007422:	4621      	mov	r1, r4
 8007424:	200d      	movs	r0, #13
 8007426:	f7ff fbe5 	bl	8006bf4 <SEGGER_SYSVIEW_RecordU32x2>
 800742a:	e006      	b.n	800743a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800742c:	4b06      	ldr	r3, [pc, #24]	; (8007448 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4619      	mov	r1, r3
 8007432:	200c      	movs	r0, #12
 8007434:	f7ff fba2 	bl	8006b7c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007438:	bf00      	nop
 800743a:	bf00      	nop
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	bd90      	pop	{r4, r7, pc}
 8007442:	bf00      	nop
 8007444:	200143e0 	.word	0x200143e0
 8007448:	e0001004 	.word	0xe0001004

0800744c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007452:	f3ef 8311 	mrs	r3, BASEPRI
 8007456:	f04f 0120 	mov.w	r1, #32
 800745a:	f381 8811 	msr	BASEPRI, r1
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	4819      	ldr	r0, [pc, #100]	; (80074c8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007462:	f7fe fda6 	bl	8005fb2 <_PreparePacket>
 8007466:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800746c:	4b17      	ldr	r3, [pc, #92]	; (80074cc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007474:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	617b      	str	r3, [r7, #20]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	613b      	str	r3, [r7, #16]
 800747e:	e00b      	b.n	8007498 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	b2da      	uxtb	r2, r3
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	1c59      	adds	r1, r3, #1
 8007488:	6179      	str	r1, [r7, #20]
 800748a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800748e:	b2d2      	uxtb	r2, r2
 8007490:	701a      	strb	r2, [r3, #0]
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	09db      	lsrs	r3, r3, #7
 8007496:	613b      	str	r3, [r7, #16]
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	2b7f      	cmp	r3, #127	; 0x7f
 800749c:	d8f0      	bhi.n	8007480 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	1c5a      	adds	r2, r3, #1
 80074a2:	617a      	str	r2, [r7, #20]
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	b2d2      	uxtb	r2, r2
 80074a8:	701a      	strb	r2, [r3, #0]
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80074ae:	2202      	movs	r2, #2
 80074b0:	6879      	ldr	r1, [r7, #4]
 80074b2:	68b8      	ldr	r0, [r7, #8]
 80074b4:	f7fe fe6e 	bl	8006194 <_SendPacket>
  RECORD_END();
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f383 8811 	msr	BASEPRI, r3
}
 80074be:	bf00      	nop
 80074c0:	3718      	adds	r7, #24
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	20014410 	.word	0x20014410
 80074cc:	e000ed04 	.word	0xe000ed04

080074d0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80074d6:	f3ef 8311 	mrs	r3, BASEPRI
 80074da:	f04f 0120 	mov.w	r1, #32
 80074de:	f381 8811 	msr	BASEPRI, r1
 80074e2:	607b      	str	r3, [r7, #4]
 80074e4:	4807      	ldr	r0, [pc, #28]	; (8007504 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80074e6:	f7fe fd64 	bl	8005fb2 <_PreparePacket>
 80074ea:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80074ec:	2203      	movs	r2, #3
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6838      	ldr	r0, [r7, #0]
 80074f2:	f7fe fe4f 	bl	8006194 <_SendPacket>
  RECORD_END();
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f383 8811 	msr	BASEPRI, r3
}
 80074fc:	bf00      	nop
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	20014410 	.word	0x20014410

08007508 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800750e:	f3ef 8311 	mrs	r3, BASEPRI
 8007512:	f04f 0120 	mov.w	r1, #32
 8007516:	f381 8811 	msr	BASEPRI, r1
 800751a:	607b      	str	r3, [r7, #4]
 800751c:	4807      	ldr	r0, [pc, #28]	; (800753c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800751e:	f7fe fd48 	bl	8005fb2 <_PreparePacket>
 8007522:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007524:	2212      	movs	r2, #18
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	6838      	ldr	r0, [r7, #0]
 800752a:	f7fe fe33 	bl	8006194 <_SendPacket>
  RECORD_END();
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f383 8811 	msr	BASEPRI, r3
}
 8007534:	bf00      	nop
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	20014410 	.word	0x20014410

08007540 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007546:	f3ef 8311 	mrs	r3, BASEPRI
 800754a:	f04f 0120 	mov.w	r1, #32
 800754e:	f381 8811 	msr	BASEPRI, r1
 8007552:	607b      	str	r3, [r7, #4]
 8007554:	4807      	ldr	r0, [pc, #28]	; (8007574 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007556:	f7fe fd2c 	bl	8005fb2 <_PreparePacket>
 800755a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800755c:	2211      	movs	r2, #17
 800755e:	6839      	ldr	r1, [r7, #0]
 8007560:	6838      	ldr	r0, [r7, #0]
 8007562:	f7fe fe17 	bl	8006194 <_SendPacket>
  RECORD_END();
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f383 8811 	msr	BASEPRI, r3
}
 800756c:	bf00      	nop
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	20014410 	.word	0x20014410

08007578 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007578:	b580      	push	{r7, lr}
 800757a:	b088      	sub	sp, #32
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007580:	f3ef 8311 	mrs	r3, BASEPRI
 8007584:	f04f 0120 	mov.w	r1, #32
 8007588:	f381 8811 	msr	BASEPRI, r1
 800758c:	617b      	str	r3, [r7, #20]
 800758e:	4819      	ldr	r0, [pc, #100]	; (80075f4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007590:	f7fe fd0f 	bl	8005fb2 <_PreparePacket>
 8007594:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800759a:	4b17      	ldr	r3, [pc, #92]	; (80075f8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	61fb      	str	r3, [r7, #28]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	61bb      	str	r3, [r7, #24]
 80075ac:	e00b      	b.n	80075c6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	1c59      	adds	r1, r3, #1
 80075b6:	61f9      	str	r1, [r7, #28]
 80075b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075bc:	b2d2      	uxtb	r2, r2
 80075be:	701a      	strb	r2, [r3, #0]
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	09db      	lsrs	r3, r3, #7
 80075c4:	61bb      	str	r3, [r7, #24]
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	2b7f      	cmp	r3, #127	; 0x7f
 80075ca:	d8f0      	bhi.n	80075ae <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	1c5a      	adds	r2, r3, #1
 80075d0:	61fa      	str	r2, [r7, #28]
 80075d2:	69ba      	ldr	r2, [r7, #24]
 80075d4:	b2d2      	uxtb	r2, r2
 80075d6:	701a      	strb	r2, [r3, #0]
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80075dc:	2208      	movs	r2, #8
 80075de:	68f9      	ldr	r1, [r7, #12]
 80075e0:	6938      	ldr	r0, [r7, #16]
 80075e2:	f7fe fdd7 	bl	8006194 <_SendPacket>
  RECORD_END();
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f383 8811 	msr	BASEPRI, r3
}
 80075ec:	bf00      	nop
 80075ee:	3720      	adds	r7, #32
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	20014410 	.word	0x20014410
 80075f8:	200143e0 	.word	0x200143e0

080075fc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b088      	sub	sp, #32
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007604:	f3ef 8311 	mrs	r3, BASEPRI
 8007608:	f04f 0120 	mov.w	r1, #32
 800760c:	f381 8811 	msr	BASEPRI, r1
 8007610:	617b      	str	r3, [r7, #20]
 8007612:	4819      	ldr	r0, [pc, #100]	; (8007678 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007614:	f7fe fccd 	bl	8005fb2 <_PreparePacket>
 8007618:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800761e:	4b17      	ldr	r3, [pc, #92]	; (800767c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	61fb      	str	r3, [r7, #28]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	61bb      	str	r3, [r7, #24]
 8007630:	e00b      	b.n	800764a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	b2da      	uxtb	r2, r3
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	1c59      	adds	r1, r3, #1
 800763a:	61f9      	str	r1, [r7, #28]
 800763c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007640:	b2d2      	uxtb	r2, r2
 8007642:	701a      	strb	r2, [r3, #0]
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	09db      	lsrs	r3, r3, #7
 8007648:	61bb      	str	r3, [r7, #24]
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	2b7f      	cmp	r3, #127	; 0x7f
 800764e:	d8f0      	bhi.n	8007632 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	1c5a      	adds	r2, r3, #1
 8007654:	61fa      	str	r2, [r7, #28]
 8007656:	69ba      	ldr	r2, [r7, #24]
 8007658:	b2d2      	uxtb	r2, r2
 800765a:	701a      	strb	r2, [r3, #0]
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007660:	2204      	movs	r2, #4
 8007662:	68f9      	ldr	r1, [r7, #12]
 8007664:	6938      	ldr	r0, [r7, #16]
 8007666:	f7fe fd95 	bl	8006194 <_SendPacket>
  RECORD_END();
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f383 8811 	msr	BASEPRI, r3
}
 8007670:	bf00      	nop
 8007672:	3720      	adds	r7, #32
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	20014410 	.word	0x20014410
 800767c:	200143e0 	.word	0x200143e0

08007680 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007680:	b580      	push	{r7, lr}
 8007682:	b088      	sub	sp, #32
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007688:	f3ef 8311 	mrs	r3, BASEPRI
 800768c:	f04f 0120 	mov.w	r1, #32
 8007690:	f381 8811 	msr	BASEPRI, r1
 8007694:	617b      	str	r3, [r7, #20]
 8007696:	4819      	ldr	r0, [pc, #100]	; (80076fc <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007698:	f7fe fc8b 	bl	8005fb2 <_PreparePacket>
 800769c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80076a2:	4b17      	ldr	r3, [pc, #92]	; (8007700 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	61fb      	str	r3, [r7, #28]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	61bb      	str	r3, [r7, #24]
 80076b4:	e00b      	b.n	80076ce <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	1c59      	adds	r1, r3, #1
 80076be:	61f9      	str	r1, [r7, #28]
 80076c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076c4:	b2d2      	uxtb	r2, r2
 80076c6:	701a      	strb	r2, [r3, #0]
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	09db      	lsrs	r3, r3, #7
 80076cc:	61bb      	str	r3, [r7, #24]
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	2b7f      	cmp	r3, #127	; 0x7f
 80076d2:	d8f0      	bhi.n	80076b6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	61fa      	str	r2, [r7, #28]
 80076da:	69ba      	ldr	r2, [r7, #24]
 80076dc:	b2d2      	uxtb	r2, r2
 80076de:	701a      	strb	r2, [r3, #0]
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80076e4:	2206      	movs	r2, #6
 80076e6:	68f9      	ldr	r1, [r7, #12]
 80076e8:	6938      	ldr	r0, [r7, #16]
 80076ea:	f7fe fd53 	bl	8006194 <_SendPacket>
  RECORD_END();
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	f383 8811 	msr	BASEPRI, r3
}
 80076f4:	bf00      	nop
 80076f6:	3720      	adds	r7, #32
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	20014410 	.word	0x20014410
 8007700:	200143e0 	.word	0x200143e0

08007704 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007704:	b580      	push	{r7, lr}
 8007706:	b08a      	sub	sp, #40	; 0x28
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800770e:	f3ef 8311 	mrs	r3, BASEPRI
 8007712:	f04f 0120 	mov.w	r1, #32
 8007716:	f381 8811 	msr	BASEPRI, r1
 800771a:	617b      	str	r3, [r7, #20]
 800771c:	4827      	ldr	r0, [pc, #156]	; (80077bc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800771e:	f7fe fc48 	bl	8005fb2 <_PreparePacket>
 8007722:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007728:	4b25      	ldr	r3, [pc, #148]	; (80077c0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	627b      	str	r3, [r7, #36]	; 0x24
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	623b      	str	r3, [r7, #32]
 800773a:	e00b      	b.n	8007754 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800773c:	6a3b      	ldr	r3, [r7, #32]
 800773e:	b2da      	uxtb	r2, r3
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	1c59      	adds	r1, r3, #1
 8007744:	6279      	str	r1, [r7, #36]	; 0x24
 8007746:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800774a:	b2d2      	uxtb	r2, r2
 800774c:	701a      	strb	r2, [r3, #0]
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	09db      	lsrs	r3, r3, #7
 8007752:	623b      	str	r3, [r7, #32]
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	2b7f      	cmp	r3, #127	; 0x7f
 8007758:	d8f0      	bhi.n	800773c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	627a      	str	r2, [r7, #36]	; 0x24
 8007760:	6a3a      	ldr	r2, [r7, #32]
 8007762:	b2d2      	uxtb	r2, r2
 8007764:	701a      	strb	r2, [r3, #0]
 8007766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007768:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	61fb      	str	r3, [r7, #28]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	61bb      	str	r3, [r7, #24]
 8007772:	e00b      	b.n	800778c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	b2da      	uxtb	r2, r3
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	1c59      	adds	r1, r3, #1
 800777c:	61f9      	str	r1, [r7, #28]
 800777e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007782:	b2d2      	uxtb	r2, r2
 8007784:	701a      	strb	r2, [r3, #0]
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	09db      	lsrs	r3, r3, #7
 800778a:	61bb      	str	r3, [r7, #24]
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	2b7f      	cmp	r3, #127	; 0x7f
 8007790:	d8f0      	bhi.n	8007774 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	1c5a      	adds	r2, r3, #1
 8007796:	61fa      	str	r2, [r7, #28]
 8007798:	69ba      	ldr	r2, [r7, #24]
 800779a:	b2d2      	uxtb	r2, r2
 800779c:	701a      	strb	r2, [r3, #0]
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80077a2:	2207      	movs	r2, #7
 80077a4:	68f9      	ldr	r1, [r7, #12]
 80077a6:	6938      	ldr	r0, [r7, #16]
 80077a8:	f7fe fcf4 	bl	8006194 <_SendPacket>
  RECORD_END();
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f383 8811 	msr	BASEPRI, r3
}
 80077b2:	bf00      	nop
 80077b4:	3728      	adds	r7, #40	; 0x28
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	20014410 	.word	0x20014410
 80077c0:	200143e0 	.word	0x200143e0

080077c4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80077cc:	4b04      	ldr	r3, [pc, #16]	; (80077e0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	1ad3      	subs	r3, r2, r3
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr
 80077e0:	200143e0 	.word	0x200143e0

080077e4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b08c      	sub	sp, #48	; 0x30
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	4603      	mov	r3, r0
 80077ec:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80077ee:	4b3b      	ldr	r3, [pc, #236]	; (80078dc <SEGGER_SYSVIEW_SendModule+0xf8>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d06d      	beq.n	80078d2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80077f6:	4b39      	ldr	r3, [pc, #228]	; (80078dc <SEGGER_SYSVIEW_SendModule+0xf8>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80077fc:	2300      	movs	r3, #0
 80077fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007800:	e008      	b.n	8007814 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780a:	2b00      	cmp	r3, #0
 800780c:	d007      	beq.n	800781e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800780e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007810:	3301      	adds	r3, #1
 8007812:	62bb      	str	r3, [r7, #40]	; 0x28
 8007814:	79fb      	ldrb	r3, [r7, #7]
 8007816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007818:	429a      	cmp	r2, r3
 800781a:	d3f2      	bcc.n	8007802 <SEGGER_SYSVIEW_SendModule+0x1e>
 800781c:	e000      	b.n	8007820 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800781e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007822:	2b00      	cmp	r3, #0
 8007824:	d055      	beq.n	80078d2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007826:	f3ef 8311 	mrs	r3, BASEPRI
 800782a:	f04f 0120 	mov.w	r1, #32
 800782e:	f381 8811 	msr	BASEPRI, r1
 8007832:	617b      	str	r3, [r7, #20]
 8007834:	482a      	ldr	r0, [pc, #168]	; (80078e0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007836:	f7fe fbbc 	bl	8005fb2 <_PreparePacket>
 800783a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	627b      	str	r3, [r7, #36]	; 0x24
 8007844:	79fb      	ldrb	r3, [r7, #7]
 8007846:	623b      	str	r3, [r7, #32]
 8007848:	e00b      	b.n	8007862 <SEGGER_SYSVIEW_SendModule+0x7e>
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	b2da      	uxtb	r2, r3
 800784e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007850:	1c59      	adds	r1, r3, #1
 8007852:	6279      	str	r1, [r7, #36]	; 0x24
 8007854:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007858:	b2d2      	uxtb	r2, r2
 800785a:	701a      	strb	r2, [r3, #0]
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	09db      	lsrs	r3, r3, #7
 8007860:	623b      	str	r3, [r7, #32]
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	2b7f      	cmp	r3, #127	; 0x7f
 8007866:	d8f0      	bhi.n	800784a <SEGGER_SYSVIEW_SendModule+0x66>
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	1c5a      	adds	r2, r3, #1
 800786c:	627a      	str	r2, [r7, #36]	; 0x24
 800786e:	6a3a      	ldr	r2, [r7, #32]
 8007870:	b2d2      	uxtb	r2, r2
 8007872:	701a      	strb	r2, [r3, #0]
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	61fb      	str	r3, [r7, #28]
 800787c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	61bb      	str	r3, [r7, #24]
 8007882:	e00b      	b.n	800789c <SEGGER_SYSVIEW_SendModule+0xb8>
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	b2da      	uxtb	r2, r3
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	1c59      	adds	r1, r3, #1
 800788c:	61f9      	str	r1, [r7, #28]
 800788e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007892:	b2d2      	uxtb	r2, r2
 8007894:	701a      	strb	r2, [r3, #0]
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	09db      	lsrs	r3, r3, #7
 800789a:	61bb      	str	r3, [r7, #24]
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	2b7f      	cmp	r3, #127	; 0x7f
 80078a0:	d8f0      	bhi.n	8007884 <SEGGER_SYSVIEW_SendModule+0xa0>
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	1c5a      	adds	r2, r3, #1
 80078a6:	61fa      	str	r2, [r7, #28]
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	b2d2      	uxtb	r2, r2
 80078ac:	701a      	strb	r2, [r3, #0]
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80078b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2280      	movs	r2, #128	; 0x80
 80078b8:	4619      	mov	r1, r3
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f7fe fb2c 	bl	8005f18 <_EncodeStr>
 80078c0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80078c2:	2216      	movs	r2, #22
 80078c4:	68f9      	ldr	r1, [r7, #12]
 80078c6:	6938      	ldr	r0, [r7, #16]
 80078c8:	f7fe fc64 	bl	8006194 <_SendPacket>
      RECORD_END();
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80078d2:	bf00      	nop
 80078d4:	3730      	adds	r7, #48	; 0x30
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	20014408 	.word	0x20014408
 80078e0:	20014410 	.word	0x20014410

080078e4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80078ea:	4b0c      	ldr	r3, [pc, #48]	; (800791c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00f      	beq.n	8007912 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80078f2:	4b0a      	ldr	r3, [pc, #40]	; (800791c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1f2      	bne.n	80078f8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007912:	bf00      	nop
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	20014408 	.word	0x20014408

08007920 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007926:	f3ef 8311 	mrs	r3, BASEPRI
 800792a:	f04f 0120 	mov.w	r1, #32
 800792e:	f381 8811 	msr	BASEPRI, r1
 8007932:	60fb      	str	r3, [r7, #12]
 8007934:	4817      	ldr	r0, [pc, #92]	; (8007994 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007936:	f7fe fb3c 	bl	8005fb2 <_PreparePacket>
 800793a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	617b      	str	r3, [r7, #20]
 8007944:	4b14      	ldr	r3, [pc, #80]	; (8007998 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	613b      	str	r3, [r7, #16]
 800794a:	e00b      	b.n	8007964 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	b2da      	uxtb	r2, r3
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	1c59      	adds	r1, r3, #1
 8007954:	6179      	str	r1, [r7, #20]
 8007956:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800795a:	b2d2      	uxtb	r2, r2
 800795c:	701a      	strb	r2, [r3, #0]
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	09db      	lsrs	r3, r3, #7
 8007962:	613b      	str	r3, [r7, #16]
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	2b7f      	cmp	r3, #127	; 0x7f
 8007968:	d8f0      	bhi.n	800794c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	1c5a      	adds	r2, r3, #1
 800796e:	617a      	str	r2, [r7, #20]
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	b2d2      	uxtb	r2, r2
 8007974:	701a      	strb	r2, [r3, #0]
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800797a:	221b      	movs	r2, #27
 800797c:	6879      	ldr	r1, [r7, #4]
 800797e:	68b8      	ldr	r0, [r7, #8]
 8007980:	f7fe fc08 	bl	8006194 <_SendPacket>
  RECORD_END();
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f383 8811 	msr	BASEPRI, r3
}
 800798a:	bf00      	nop
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	20014410 	.word	0x20014410
 8007998:	2001440c 	.word	0x2001440c

0800799c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 800799c:	b40f      	push	{r0, r1, r2, r3}
 800799e:	b580      	push	{r7, lr}
 80079a0:	b082      	sub	sp, #8
 80079a2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80079a4:	f107 0314 	add.w	r3, r7, #20
 80079a8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80079aa:	1d3b      	adds	r3, r7, #4
 80079ac:	461a      	mov	r2, r3
 80079ae:	2100      	movs	r1, #0
 80079b0:	6938      	ldr	r0, [r7, #16]
 80079b2:	f7fe fe79 	bl	80066a8 <_VPrintTarget>
  va_end(ParamList);
}
 80079b6:	bf00      	nop
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079c0:	b004      	add	sp, #16
 80079c2:	4770      	bx	lr

080079c4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b08a      	sub	sp, #40	; 0x28
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80079cc:	f3ef 8311 	mrs	r3, BASEPRI
 80079d0:	f04f 0120 	mov.w	r1, #32
 80079d4:	f381 8811 	msr	BASEPRI, r1
 80079d8:	617b      	str	r3, [r7, #20]
 80079da:	4827      	ldr	r0, [pc, #156]	; (8007a78 <SEGGER_SYSVIEW_Warn+0xb4>)
 80079dc:	f7fe fae9 	bl	8005fb2 <_PreparePacket>
 80079e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80079e2:	2280      	movs	r2, #128	; 0x80
 80079e4:	6879      	ldr	r1, [r7, #4]
 80079e6:	6938      	ldr	r0, [r7, #16]
 80079e8:	f7fe fa96 	bl	8005f18 <_EncodeStr>
 80079ec:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	627b      	str	r3, [r7, #36]	; 0x24
 80079f2:	2301      	movs	r3, #1
 80079f4:	623b      	str	r3, [r7, #32]
 80079f6:	e00b      	b.n	8007a10 <SEGGER_SYSVIEW_Warn+0x4c>
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fe:	1c59      	adds	r1, r3, #1
 8007a00:	6279      	str	r1, [r7, #36]	; 0x24
 8007a02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a06:	b2d2      	uxtb	r2, r2
 8007a08:	701a      	strb	r2, [r3, #0]
 8007a0a:	6a3b      	ldr	r3, [r7, #32]
 8007a0c:	09db      	lsrs	r3, r3, #7
 8007a0e:	623b      	str	r3, [r7, #32]
 8007a10:	6a3b      	ldr	r3, [r7, #32]
 8007a12:	2b7f      	cmp	r3, #127	; 0x7f
 8007a14:	d8f0      	bhi.n	80079f8 <SEGGER_SYSVIEW_Warn+0x34>
 8007a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a18:	1c5a      	adds	r2, r3, #1
 8007a1a:	627a      	str	r2, [r7, #36]	; 0x24
 8007a1c:	6a3a      	ldr	r2, [r7, #32]
 8007a1e:	b2d2      	uxtb	r2, r2
 8007a20:	701a      	strb	r2, [r3, #0]
 8007a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	61fb      	str	r3, [r7, #28]
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	61bb      	str	r3, [r7, #24]
 8007a2e:	e00b      	b.n	8007a48 <SEGGER_SYSVIEW_Warn+0x84>
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	b2da      	uxtb	r2, r3
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	1c59      	adds	r1, r3, #1
 8007a38:	61f9      	str	r1, [r7, #28]
 8007a3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a3e:	b2d2      	uxtb	r2, r2
 8007a40:	701a      	strb	r2, [r3, #0]
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	09db      	lsrs	r3, r3, #7
 8007a46:	61bb      	str	r3, [r7, #24]
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	2b7f      	cmp	r3, #127	; 0x7f
 8007a4c:	d8f0      	bhi.n	8007a30 <SEGGER_SYSVIEW_Warn+0x6c>
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	1c5a      	adds	r2, r3, #1
 8007a52:	61fa      	str	r2, [r7, #28]
 8007a54:	69ba      	ldr	r2, [r7, #24]
 8007a56:	b2d2      	uxtb	r2, r2
 8007a58:	701a      	strb	r2, [r3, #0]
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007a5e:	221a      	movs	r2, #26
 8007a60:	68f9      	ldr	r1, [r7, #12]
 8007a62:	6938      	ldr	r0, [r7, #16]
 8007a64:	f7fe fb96 	bl	8006194 <_SendPacket>
  RECORD_END();
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	f383 8811 	msr	BASEPRI, r3
}
 8007a6e:	bf00      	nop
 8007a70:	3728      	adds	r7, #40	; 0x28
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	20014410 	.word	0x20014410

08007a7c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007a80:	4b13      	ldr	r3, [pc, #76]	; (8007ad0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a82:	7e1b      	ldrb	r3, [r3, #24]
 8007a84:	4619      	mov	r1, r3
 8007a86:	4a13      	ldr	r2, [pc, #76]	; (8007ad4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007a88:	460b      	mov	r3, r1
 8007a8a:	005b      	lsls	r3, r3, #1
 8007a8c:	440b      	add	r3, r1
 8007a8e:	00db      	lsls	r3, r3, #3
 8007a90:	4413      	add	r3, r2
 8007a92:	336c      	adds	r3, #108	; 0x6c
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	4b0e      	ldr	r3, [pc, #56]	; (8007ad0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a98:	7e1b      	ldrb	r3, [r3, #24]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	490d      	ldr	r1, [pc, #52]	; (8007ad4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	005b      	lsls	r3, r3, #1
 8007aa2:	4403      	add	r3, r0
 8007aa4:	00db      	lsls	r3, r3, #3
 8007aa6:	440b      	add	r3, r1
 8007aa8:	3370      	adds	r3, #112	; 0x70
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d00b      	beq.n	8007ac8 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007ab0:	4b07      	ldr	r3, [pc, #28]	; (8007ad0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007ab2:	789b      	ldrb	r3, [r3, #2]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d107      	bne.n	8007ac8 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007ab8:	4b05      	ldr	r3, [pc, #20]	; (8007ad0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007aba:	2201      	movs	r2, #1
 8007abc:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007abe:	f7fe fa85 	bl	8005fcc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007ac2:	4b03      	ldr	r3, [pc, #12]	; (8007ad0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007ac8:	4b01      	ldr	r3, [pc, #4]	; (8007ad0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007aca:	781b      	ldrb	r3, [r3, #0]
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	200143e0 	.word	0x200143e0
 8007ad4:	20012f20 	.word	0x20012f20

08007ad8 <memcmp>:
 8007ad8:	b510      	push	{r4, lr}
 8007ada:	3901      	subs	r1, #1
 8007adc:	4402      	add	r2, r0
 8007ade:	4290      	cmp	r0, r2
 8007ae0:	d101      	bne.n	8007ae6 <memcmp+0xe>
 8007ae2:	2000      	movs	r0, #0
 8007ae4:	e005      	b.n	8007af2 <memcmp+0x1a>
 8007ae6:	7803      	ldrb	r3, [r0, #0]
 8007ae8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007aec:	42a3      	cmp	r3, r4
 8007aee:	d001      	beq.n	8007af4 <memcmp+0x1c>
 8007af0:	1b18      	subs	r0, r3, r4
 8007af2:	bd10      	pop	{r4, pc}
 8007af4:	3001      	adds	r0, #1
 8007af6:	e7f2      	b.n	8007ade <memcmp+0x6>

08007af8 <memset>:
 8007af8:	4402      	add	r2, r0
 8007afa:	4603      	mov	r3, r0
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d100      	bne.n	8007b02 <memset+0xa>
 8007b00:	4770      	bx	lr
 8007b02:	f803 1b01 	strb.w	r1, [r3], #1
 8007b06:	e7f9      	b.n	8007afc <memset+0x4>

08007b08 <__libc_init_array>:
 8007b08:	b570      	push	{r4, r5, r6, lr}
 8007b0a:	4d0d      	ldr	r5, [pc, #52]	; (8007b40 <__libc_init_array+0x38>)
 8007b0c:	4c0d      	ldr	r4, [pc, #52]	; (8007b44 <__libc_init_array+0x3c>)
 8007b0e:	1b64      	subs	r4, r4, r5
 8007b10:	10a4      	asrs	r4, r4, #2
 8007b12:	2600      	movs	r6, #0
 8007b14:	42a6      	cmp	r6, r4
 8007b16:	d109      	bne.n	8007b2c <__libc_init_array+0x24>
 8007b18:	4d0b      	ldr	r5, [pc, #44]	; (8007b48 <__libc_init_array+0x40>)
 8007b1a:	4c0c      	ldr	r4, [pc, #48]	; (8007b4c <__libc_init_array+0x44>)
 8007b1c:	f000 f826 	bl	8007b6c <_init>
 8007b20:	1b64      	subs	r4, r4, r5
 8007b22:	10a4      	asrs	r4, r4, #2
 8007b24:	2600      	movs	r6, #0
 8007b26:	42a6      	cmp	r6, r4
 8007b28:	d105      	bne.n	8007b36 <__libc_init_array+0x2e>
 8007b2a:	bd70      	pop	{r4, r5, r6, pc}
 8007b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b30:	4798      	blx	r3
 8007b32:	3601      	adds	r6, #1
 8007b34:	e7ee      	b.n	8007b14 <__libc_init_array+0xc>
 8007b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b3a:	4798      	blx	r3
 8007b3c:	3601      	adds	r6, #1
 8007b3e:	e7f2      	b.n	8007b26 <__libc_init_array+0x1e>
 8007b40:	08007d1c 	.word	0x08007d1c
 8007b44:	08007d1c 	.word	0x08007d1c
 8007b48:	08007d1c 	.word	0x08007d1c
 8007b4c:	08007d20 	.word	0x08007d20

08007b50 <memcpy>:
 8007b50:	440a      	add	r2, r1
 8007b52:	4291      	cmp	r1, r2
 8007b54:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b58:	d100      	bne.n	8007b5c <memcpy+0xc>
 8007b5a:	4770      	bx	lr
 8007b5c:	b510      	push	{r4, lr}
 8007b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b66:	4291      	cmp	r1, r2
 8007b68:	d1f9      	bne.n	8007b5e <memcpy+0xe>
 8007b6a:	bd10      	pop	{r4, pc}

08007b6c <_init>:
 8007b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6e:	bf00      	nop
 8007b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b72:	bc08      	pop	{r3}
 8007b74:	469e      	mov	lr, r3
 8007b76:	4770      	bx	lr

08007b78 <_fini>:
 8007b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7a:	bf00      	nop
 8007b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b7e:	bc08      	pop	{r3}
 8007b80:	469e      	mov	lr, r3
 8007b82:	4770      	bx	lr
