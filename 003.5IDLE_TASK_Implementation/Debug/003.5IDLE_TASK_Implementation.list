
003.5IDLE_TASK_Implementation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08007bd4  08007bd4  00017bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d64  08007d64  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08007d64  08007d64  00017d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d6c  08007d6c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d6c  08007d6c  00017d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d70  08007d70  00017d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          000144d8  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200144f4  200144f4  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017b38  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003725  00000000  00000000  00037bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001618  00000000  00000000  0003b2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000111c  00000000  00000000  0003c908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002421a  00000000  00000000  0003da24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019980  00000000  00000000  00061c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000da9f4  00000000  00000000  0007b5be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005ccc  00000000  00000000  00155fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000d7  00000000  00000000  0015bc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007bbc 	.word	0x08007bbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08007bbc 	.word	0x08007bbc

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f20 	.word	0x20012f20

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b970 	b.w	800055c <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9e08      	ldr	r6, [sp, #32]
 800029a:	460d      	mov	r5, r1
 800029c:	4604      	mov	r4, r0
 800029e:	460f      	mov	r7, r1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d14a      	bne.n	800033a <__udivmoddi4+0xa6>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4694      	mov	ip, r2
 80002a8:	d965      	bls.n	8000376 <__udivmoddi4+0xe2>
 80002aa:	fab2 f382 	clz	r3, r2
 80002ae:	b143      	cbz	r3, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002b4:	f1c3 0220 	rsb	r2, r3, #32
 80002b8:	409f      	lsls	r7, r3
 80002ba:	fa20 f202 	lsr.w	r2, r0, r2
 80002be:	4317      	orrs	r7, r2
 80002c0:	409c      	lsls	r4, r3
 80002c2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002c6:	fa1f f58c 	uxth.w	r5, ip
 80002ca:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ce:	0c22      	lsrs	r2, r4, #16
 80002d0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002d4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002d8:	fb01 f005 	mul.w	r0, r1, r5
 80002dc:	4290      	cmp	r0, r2
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x62>
 80002e0:	eb1c 0202 	adds.w	r2, ip, r2
 80002e4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002e8:	f080 811c 	bcs.w	8000524 <__udivmoddi4+0x290>
 80002ec:	4290      	cmp	r0, r2
 80002ee:	f240 8119 	bls.w	8000524 <__udivmoddi4+0x290>
 80002f2:	3902      	subs	r1, #2
 80002f4:	4462      	add	r2, ip
 80002f6:	1a12      	subs	r2, r2, r0
 80002f8:	b2a4      	uxth	r4, r4
 80002fa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002fe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000302:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000306:	fb00 f505 	mul.w	r5, r0, r5
 800030a:	42a5      	cmp	r5, r4
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x90>
 800030e:	eb1c 0404 	adds.w	r4, ip, r4
 8000312:	f100 32ff 	add.w	r2, r0, #4294967295
 8000316:	f080 8107 	bcs.w	8000528 <__udivmoddi4+0x294>
 800031a:	42a5      	cmp	r5, r4
 800031c:	f240 8104 	bls.w	8000528 <__udivmoddi4+0x294>
 8000320:	4464      	add	r4, ip
 8000322:	3802      	subs	r0, #2
 8000324:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000328:	1b64      	subs	r4, r4, r5
 800032a:	2100      	movs	r1, #0
 800032c:	b11e      	cbz	r6, 8000336 <__udivmoddi4+0xa2>
 800032e:	40dc      	lsrs	r4, r3
 8000330:	2300      	movs	r3, #0
 8000332:	e9c6 4300 	strd	r4, r3, [r6]
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0xbc>
 800033e:	2e00      	cmp	r6, #0
 8000340:	f000 80ed 	beq.w	800051e <__udivmoddi4+0x28a>
 8000344:	2100      	movs	r1, #0
 8000346:	e9c6 0500 	strd	r0, r5, [r6]
 800034a:	4608      	mov	r0, r1
 800034c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000350:	fab3 f183 	clz	r1, r3
 8000354:	2900      	cmp	r1, #0
 8000356:	d149      	bne.n	80003ec <__udivmoddi4+0x158>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d302      	bcc.n	8000362 <__udivmoddi4+0xce>
 800035c:	4282      	cmp	r2, r0
 800035e:	f200 80f8 	bhi.w	8000552 <__udivmoddi4+0x2be>
 8000362:	1a84      	subs	r4, r0, r2
 8000364:	eb65 0203 	sbc.w	r2, r5, r3
 8000368:	2001      	movs	r0, #1
 800036a:	4617      	mov	r7, r2
 800036c:	2e00      	cmp	r6, #0
 800036e:	d0e2      	beq.n	8000336 <__udivmoddi4+0xa2>
 8000370:	e9c6 4700 	strd	r4, r7, [r6]
 8000374:	e7df      	b.n	8000336 <__udivmoddi4+0xa2>
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xe6>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f382 	clz	r3, r2
 800037e:	2b00      	cmp	r3, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x210>
 8000384:	1a8a      	subs	r2, r1, r2
 8000386:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	2101      	movs	r1, #1
 8000390:	fbb2 f5f7 	udiv	r5, r2, r7
 8000394:	fb07 2015 	mls	r0, r7, r5, r2
 8000398:	0c22      	lsrs	r2, r4, #16
 800039a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800039e:	fb0e f005 	mul.w	r0, lr, r5
 80003a2:	4290      	cmp	r0, r2
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x124>
 80003a6:	eb1c 0202 	adds.w	r2, ip, r2
 80003aa:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x122>
 80003b0:	4290      	cmp	r0, r2
 80003b2:	f200 80cb 	bhi.w	800054c <__udivmoddi4+0x2b8>
 80003b6:	4645      	mov	r5, r8
 80003b8:	1a12      	subs	r2, r2, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb2 f0f7 	udiv	r0, r2, r7
 80003c0:	fb07 2210 	mls	r2, r7, r0, r2
 80003c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003c8:	fb0e fe00 	mul.w	lr, lr, r0
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x14e>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003d8:	d202      	bcs.n	80003e0 <__udivmoddi4+0x14c>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f200 80bb 	bhi.w	8000556 <__udivmoddi4+0x2c2>
 80003e0:	4610      	mov	r0, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ea:	e79f      	b.n	800032c <__udivmoddi4+0x98>
 80003ec:	f1c1 0720 	rsb	r7, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003fa:	fa05 f401 	lsl.w	r4, r5, r1
 80003fe:	fa20 f307 	lsr.w	r3, r0, r7
 8000402:	40fd      	lsrs	r5, r7
 8000404:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fbb5 f8f9 	udiv	r8, r5, r9
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	fb09 5518 	mls	r5, r9, r8, r5
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800041c:	fb08 f50e 	mul.w	r5, r8, lr
 8000420:	42a5      	cmp	r5, r4
 8000422:	fa02 f201 	lsl.w	r2, r2, r1
 8000426:	fa00 f001 	lsl.w	r0, r0, r1
 800042a:	d90b      	bls.n	8000444 <__udivmoddi4+0x1b0>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f108 3aff 	add.w	sl, r8, #4294967295
 8000434:	f080 8088 	bcs.w	8000548 <__udivmoddi4+0x2b4>
 8000438:	42a5      	cmp	r5, r4
 800043a:	f240 8085 	bls.w	8000548 <__udivmoddi4+0x2b4>
 800043e:	f1a8 0802 	sub.w	r8, r8, #2
 8000442:	4464      	add	r4, ip
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	b29d      	uxth	r5, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000454:	fb03 fe0e 	mul.w	lr, r3, lr
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1da>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f103 35ff 	add.w	r5, r3, #4294967295
 8000464:	d26c      	bcs.n	8000540 <__udivmoddi4+0x2ac>
 8000466:	45a6      	cmp	lr, r4
 8000468:	d96a      	bls.n	8000540 <__udivmoddi4+0x2ac>
 800046a:	3b02      	subs	r3, #2
 800046c:	4464      	add	r4, ip
 800046e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000472:	fba3 9502 	umull	r9, r5, r3, r2
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	42ac      	cmp	r4, r5
 800047c:	46c8      	mov	r8, r9
 800047e:	46ae      	mov	lr, r5
 8000480:	d356      	bcc.n	8000530 <__udivmoddi4+0x29c>
 8000482:	d053      	beq.n	800052c <__udivmoddi4+0x298>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x208>
 8000486:	ebb0 0208 	subs.w	r2, r0, r8
 800048a:	eb64 040e 	sbc.w	r4, r4, lr
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40ca      	lsrs	r2, r1
 8000494:	40cc      	lsrs	r4, r1
 8000496:	4317      	orrs	r7, r2
 8000498:	e9c6 7400 	strd	r7, r4, [r6]
 800049c:	4618      	mov	r0, r3
 800049e:	2100      	movs	r1, #0
 80004a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a4:	f1c3 0120 	rsb	r1, r3, #32
 80004a8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ac:	fa20 f201 	lsr.w	r2, r0, r1
 80004b0:	fa25 f101 	lsr.w	r1, r5, r1
 80004b4:	409d      	lsls	r5, r3
 80004b6:	432a      	orrs	r2, r5
 80004b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004bc:	fa1f fe8c 	uxth.w	lr, ip
 80004c0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004c4:	fb07 1510 	mls	r5, r7, r0, r1
 80004c8:	0c11      	lsrs	r1, r2, #16
 80004ca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ce:	fb00 f50e 	mul.w	r5, r0, lr
 80004d2:	428d      	cmp	r5, r1
 80004d4:	fa04 f403 	lsl.w	r4, r4, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x258>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e2:	d22f      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 80004e4:	428d      	cmp	r5, r1
 80004e6:	d92d      	bls.n	8000544 <__udivmoddi4+0x2b0>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4461      	add	r1, ip
 80004ec:	1b49      	subs	r1, r1, r5
 80004ee:	b292      	uxth	r2, r2
 80004f0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004f4:	fb07 1115 	mls	r1, r7, r5, r1
 80004f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fc:	fb05 f10e 	mul.w	r1, r5, lr
 8000500:	4291      	cmp	r1, r2
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x282>
 8000504:	eb1c 0202 	adds.w	r2, ip, r2
 8000508:	f105 38ff 	add.w	r8, r5, #4294967295
 800050c:	d216      	bcs.n	800053c <__udivmoddi4+0x2a8>
 800050e:	4291      	cmp	r1, r2
 8000510:	d914      	bls.n	800053c <__udivmoddi4+0x2a8>
 8000512:	3d02      	subs	r5, #2
 8000514:	4462      	add	r2, ip
 8000516:	1a52      	subs	r2, r2, r1
 8000518:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800051c:	e738      	b.n	8000390 <__udivmoddi4+0xfc>
 800051e:	4631      	mov	r1, r6
 8000520:	4630      	mov	r0, r6
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xa2>
 8000524:	4639      	mov	r1, r7
 8000526:	e6e6      	b.n	80002f6 <__udivmoddi4+0x62>
 8000528:	4610      	mov	r0, r2
 800052a:	e6fb      	b.n	8000324 <__udivmoddi4+0x90>
 800052c:	4548      	cmp	r0, r9
 800052e:	d2a9      	bcs.n	8000484 <__udivmoddi4+0x1f0>
 8000530:	ebb9 0802 	subs.w	r8, r9, r2
 8000534:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000538:	3b01      	subs	r3, #1
 800053a:	e7a3      	b.n	8000484 <__udivmoddi4+0x1f0>
 800053c:	4645      	mov	r5, r8
 800053e:	e7ea      	b.n	8000516 <__udivmoddi4+0x282>
 8000540:	462b      	mov	r3, r5
 8000542:	e794      	b.n	800046e <__udivmoddi4+0x1da>
 8000544:	4640      	mov	r0, r8
 8000546:	e7d1      	b.n	80004ec <__udivmoddi4+0x258>
 8000548:	46d0      	mov	r8, sl
 800054a:	e77b      	b.n	8000444 <__udivmoddi4+0x1b0>
 800054c:	3d02      	subs	r5, #2
 800054e:	4462      	add	r2, ip
 8000550:	e732      	b.n	80003b8 <__udivmoddi4+0x124>
 8000552:	4608      	mov	r0, r1
 8000554:	e70a      	b.n	800036c <__udivmoddi4+0xd8>
 8000556:	4464      	add	r4, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e742      	b.n	80003e2 <__udivmoddi4+0x14e>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	; 0x28
 8000564:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fc1f 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f86f 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f901 	bl	8000774 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000572:	f000 f8d5 	bl	8000720 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 8000576:	482d      	ldr	r0, [pc, #180]	; (800062c <main+0xcc>)
 8000578:	f005 f87a 	bl	8005670 <SEGGER_UART_init>

//  Cyclic count enable
  DWT_CTRL |=(1<<0);
 800057c:	4b2c      	ldr	r3, [pc, #176]	; (8000630 <main+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a2b      	ldr	r2, [pc, #172]	; (8000630 <main+0xd0>)
 8000582:	f043 0301 	orr.w	r3, r3, #1
 8000586:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000588:	f004 fe9c 	bl	80052c4 <SEGGER_SYSVIEW_Conf>

//  task creation
  status = xTaskCreate(led_green_handler,
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	2302      	movs	r3, #2
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2300      	movs	r3, #0
 8000598:	22c8      	movs	r2, #200	; 0xc8
 800059a:	4926      	ldr	r1, [pc, #152]	; (8000634 <main+0xd4>)
 800059c:	4826      	ldr	r0, [pc, #152]	; (8000638 <main+0xd8>)
 800059e:	f002 ff55 	bl	800344c <xTaskCreate>
 80005a2:	61f8      	str	r0, [r7, #28]
              NULL,
              2,
              &task1_handle
                            );

  configASSERT(status == pdPASS);
 80005a4:	69fb      	ldr	r3, [r7, #28]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d00a      	beq.n	80005c0 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ae:	f383 8811 	msr	BASEPRI, r3
 80005b2:	f3bf 8f6f 	isb	sy
 80005b6:	f3bf 8f4f 	dsb	sy
 80005ba:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005bc:	bf00      	nop
 80005be:	e7fe      	b.n	80005be <main+0x5e>

  status = xTaskCreate(led_red_handler,
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2302      	movs	r3, #2
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	22c8      	movs	r2, #200	; 0xc8
 80005ce:	491b      	ldr	r1, [pc, #108]	; (800063c <main+0xdc>)
 80005d0:	481b      	ldr	r0, [pc, #108]	; (8000640 <main+0xe0>)
 80005d2:	f002 ff3b 	bl	800344c <xTaskCreate>
 80005d6:	61f8      	str	r0, [r7, #28]
                NULL,
                2,
                &task2_handle
                              );

    configASSERT(status == pdPASS);
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d00a      	beq.n	80005f4 <main+0x94>
        __asm volatile
 80005de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e2:	f383 8811 	msr	BASEPRI, r3
 80005e6:	f3bf 8f6f 	isb	sy
 80005ea:	f3bf 8f4f 	dsb	sy
 80005ee:	617b      	str	r3, [r7, #20]
    }
 80005f0:	bf00      	nop
 80005f2:	e7fe      	b.n	80005f2 <main+0x92>

  status = xTaskCreate(led_orange_handler,
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	2302      	movs	r3, #2
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2300      	movs	r3, #0
 80005fe:	22c8      	movs	r2, #200	; 0xc8
 8000600:	4910      	ldr	r1, [pc, #64]	; (8000644 <main+0xe4>)
 8000602:	4811      	ldr	r0, [pc, #68]	; (8000648 <main+0xe8>)
 8000604:	f002 ff22 	bl	800344c <xTaskCreate>
 8000608:	61f8      	str	r0, [r7, #28]
                NULL,
                2,
                &task3_handle
                              );

    configASSERT(status == pdPASS);
 800060a:	69fb      	ldr	r3, [r7, #28]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d00a      	beq.n	8000626 <main+0xc6>
        __asm volatile
 8000610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000614:	f383 8811 	msr	BASEPRI, r3
 8000618:	f3bf 8f6f 	isb	sy
 800061c:	f3bf 8f4f 	dsb	sy
 8000620:	613b      	str	r3, [r7, #16]
    }
 8000622:	bf00      	nop
 8000624:	e7fe      	b.n	8000624 <main+0xc4>

//    Start the scheduler

    vTaskStartScheduler();
 8000626:	f003 f8f7 	bl	8003818 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062a:	e7fe      	b.n	800062a <main+0xca>
 800062c:	0007a120 	.word	0x0007a120
 8000630:	e0001000 	.word	0xe0001000
 8000634:	08007bd4 	.word	0x08007bd4
 8000638:	08000a31 	.word	0x08000a31
 800063c:	08007be4 	.word	0x08007be4
 8000640:	08000aa1 	.word	0x08000aa1
 8000644:	08007bf4 	.word	0x08007bf4
 8000648:	08000a69 	.word	0x08000a69

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2230      	movs	r2, #48	; 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f007 fa74 	bl	8007b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	4b28      	ldr	r3, [pc, #160]	; (8000718 <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	4a27      	ldr	r2, [pc, #156]	; (8000718 <SystemClock_Config+0xcc>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	; 0x40
 8000680:	4b25      	ldr	r3, [pc, #148]	; (8000718 <SystemClock_Config+0xcc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b22      	ldr	r3, [pc, #136]	; (800071c <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a21      	ldr	r2, [pc, #132]	; (800071c <SystemClock_Config+0xd0>)
 8000696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <SystemClock_Config+0xd0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2310      	movs	r3, #16
 80006b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006bc:	2308      	movs	r3, #8
 80006be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006c0:	2332      	movs	r3, #50	; 0x32
 80006c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c4:	2304      	movs	r3, #4
 80006c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c8:	2307      	movs	r3, #7
 80006ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fe7d 	bl	80013d0 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006dc:	f000 fa16 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2302      	movs	r3, #2
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 f8de 	bl	80018c0 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070a:	f000 f9ff 	bl	8000b0c <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	; 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000726:	4a12      	ldr	r2, [pc, #72]	; (8000770 <MX_USART2_UART_Init+0x50>)
 8000728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000758:	f001 fda6 	bl	80022a8 <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000762:	f000 f9d3 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000038 	.word	0x20000038
 8000770:	40004400 	.word	0x40004400

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08c      	sub	sp, #48	; 0x30
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
 800078e:	4ba2      	ldr	r3, [pc, #648]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4aa1      	ldr	r2, [pc, #644]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 8000794:	f043 0310 	orr.w	r3, r3, #16
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b9f      	ldr	r3, [pc, #636]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0310 	and.w	r3, r3, #16
 80007a2:	61bb      	str	r3, [r7, #24]
 80007a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	4b9b      	ldr	r3, [pc, #620]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a9a      	ldr	r2, [pc, #616]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b98      	ldr	r3, [pc, #608]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b94      	ldr	r3, [pc, #592]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a93      	ldr	r2, [pc, #588]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b91      	ldr	r3, [pc, #580]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b8d      	ldr	r3, [pc, #564]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a8c      	ldr	r2, [pc, #560]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b8a      	ldr	r3, [pc, #552]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b86      	ldr	r3, [pc, #536]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a85      	ldr	r2, [pc, #532]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b83      	ldr	r3, [pc, #524]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b7f      	ldr	r3, [pc, #508]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a7e      	ldr	r2, [pc, #504]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 8000820:	f043 0308 	orr.w	r3, r3, #8
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b7c      	ldr	r3, [pc, #496]	; (8000a18 <MX_GPIO_Init+0x2a4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0308 	and.w	r3, r3, #8
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2108      	movs	r1, #8
 8000836:	4879      	ldr	r0, [pc, #484]	; (8000a1c <MX_GPIO_Init+0x2a8>)
 8000838:	f000 fd76 	bl	8001328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2101      	movs	r1, #1
 8000840:	4877      	ldr	r0, [pc, #476]	; (8000a20 <MX_GPIO_Init+0x2ac>)
 8000842:	f000 fd71 	bl	8001328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000846:	2200      	movs	r2, #0
 8000848:	f24f 0110 	movw	r1, #61456	; 0xf010
 800084c:	4875      	ldr	r0, [pc, #468]	; (8000a24 <MX_GPIO_Init+0x2b0>)
 800084e:	f000 fd6b 	bl	8001328 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000852:	2308      	movs	r3, #8
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	486c      	ldr	r0, [pc, #432]	; (8000a1c <MX_GPIO_Init+0x2a8>)
 800086a:	f000 fbc1 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800086e:	2301      	movs	r3, #1
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	4866      	ldr	r0, [pc, #408]	; (8000a20 <MX_GPIO_Init+0x2ac>)
 8000886:	f000 fbb3 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800088a:	2308      	movs	r3, #8
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089a:	2305      	movs	r3, #5
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	485e      	ldr	r0, [pc, #376]	; (8000a20 <MX_GPIO_Init+0x2ac>)
 80008a6:	f000 fba3 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	485a      	ldr	r0, [pc, #360]	; (8000a28 <MX_GPIO_Init+0x2b4>)
 80008c0:	f000 fb96 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008c4:	2310      	movs	r3, #16
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d4:	2306      	movs	r3, #6
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4852      	ldr	r0, [pc, #328]	; (8000a28 <MX_GPIO_Init+0x2b4>)
 80008e0:	f000 fb86 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008e4:	23e0      	movs	r3, #224	; 0xe0
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008f4:	2305      	movs	r3, #5
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	484a      	ldr	r0, [pc, #296]	; (8000a28 <MX_GPIO_Init+0x2b4>)
 8000900:	f000 fb76 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000904:	2304      	movs	r3, #4
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4845      	ldr	r0, [pc, #276]	; (8000a2c <MX_GPIO_Init+0x2b8>)
 8000918:	f000 fb6a 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800091c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800092e:	2305      	movs	r3, #5
 8000930:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	483c      	ldr	r0, [pc, #240]	; (8000a2c <MX_GPIO_Init+0x2b8>)
 800093a:	f000 fb59 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800093e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000942:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4833      	ldr	r0, [pc, #204]	; (8000a24 <MX_GPIO_Init+0x2b0>)
 8000958:	f000 fb4a 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800095c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800096e:	2306      	movs	r3, #6
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4829      	ldr	r0, [pc, #164]	; (8000a20 <MX_GPIO_Init+0x2ac>)
 800097a:	f000 fb39 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800097e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4825      	ldr	r0, [pc, #148]	; (8000a28 <MX_GPIO_Init+0x2b4>)
 8000994:	f000 fb2c 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000998:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009aa:	230a      	movs	r3, #10
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	481c      	ldr	r0, [pc, #112]	; (8000a28 <MX_GPIO_Init+0x2b4>)
 80009b6:	f000 fb1b 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ba:	2320      	movs	r3, #32
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4815      	ldr	r0, [pc, #84]	; (8000a24 <MX_GPIO_Init+0x2b0>)
 80009ce:	f000 fb0f 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009d2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d8:	2312      	movs	r3, #18
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e4:	2304      	movs	r3, #4
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	480f      	ldr	r0, [pc, #60]	; (8000a2c <MX_GPIO_Init+0x2b8>)
 80009f0:	f000 fafe 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009f4:	2302      	movs	r3, #2
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_GPIO_Init+0x2a8>)
 8000a0a:	f000 faf1 	bl	8000ff0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a0e:	bf00      	nop
 8000a10:	3730      	adds	r7, #48	; 0x30
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40020800 	.word	0x40020800
 8000a24:	40020c00 	.word	0x40020c00
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	40020400 	.word	0x40020400

08000a30 <led_green_handler>:

/* USER CODE BEGIN 4 */


static void led_green_handler(void* parameters)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time=xTaskGetTickCount();
 8000a38:	f002 fffe 	bl	8003a38 <xTaskGetTickCount>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green led");
 8000a40:	4807      	ldr	r0, [pc, #28]	; (8000a60 <led_green_handler+0x30>)
 8000a42:	f006 ffd3 	bl	80079ec <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a4a:	4806      	ldr	r0, [pc, #24]	; (8000a64 <led_green_handler+0x34>)
 8000a4c:	f000 fc85 	bl	800135a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(1000));
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f002 fe5b 	bl	8003714 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green led");
 8000a5e:	e7ef      	b.n	8000a40 <led_green_handler+0x10>
 8000a60:	08007c04 	.word	0x08007c04
 8000a64:	40020c00 	.word	0x40020c00

08000a68 <led_orange_handler>:
	}
}


static void led_orange_handler(void* parameters)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time=xTaskGetTickCount();
 8000a70:	f002 ffe2 	bl	8003a38 <xTaskGetTickCount>
 8000a74:	4603      	mov	r3, r0
 8000a76:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange led");
 8000a78:	4807      	ldr	r0, [pc, #28]	; (8000a98 <led_orange_handler+0x30>)
 8000a7a:	f006 ffb7 	bl	80079ec <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a82:	4806      	ldr	r0, [pc, #24]	; (8000a9c <led_orange_handler+0x34>)
 8000a84:	f000 fc69 	bl	800135a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(800));
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 fe3f 	bl	8003714 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange led");
 8000a96:	e7ef      	b.n	8000a78 <led_orange_handler+0x10>
 8000a98:	08007c18 	.word	0x08007c18
 8000a9c:	40020c00 	.word	0x40020c00

08000aa0 <led_red_handler>:
	}

}

static void led_red_handler(void* parameters)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time=xTaskGetTickCount();
 8000aa8:	f002 ffc6 	bl	8003a38 <xTaskGetTickCount>
 8000aac:	4603      	mov	r3, r0
 8000aae:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red led");
 8000ab0:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <led_red_handler+0x30>)
 8000ab2:	f006 ff9b 	bl	80079ec <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000ab6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aba:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <led_red_handler+0x34>)
 8000abc:	f000 fc4d 	bl	800135a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(400));
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f002 fe23 	bl	8003714 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red led");
 8000ace:	e7ef      	b.n	8000ab0 <led_red_handler+0x10>
 8000ad0:	08007c2c 	.word	0x08007c2c
 8000ad4:	40020c00 	.word	0x40020c00

08000ad8 <vApplicationIdleHook>:
	}

}

void vApplicationIdleHook( void )
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON , PWR_SLEEPENTRY_WFI);
 8000adc:	2101      	movs	r1, #1
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f000 fc56 	bl	8001390 <HAL_PWR_EnterSLEEPMode>
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d101      	bne.n	8000afe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000afa:	f000 f977 	bl	8000dec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40001000 	.word	0x40001000

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <Error_Handler+0x8>
	...

08000b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b56:	f003 ffff 	bl	8004b58 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800

08000b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a19      	ldr	r2, [pc, #100]	; (8000bec <HAL_UART_MspInit+0x84>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d12b      	bne.n	8000be2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <HAL_UART_MspInit+0x88>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <HAL_UART_MspInit+0x88>)
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b98:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <HAL_UART_MspInit+0x88>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <HAL_UART_MspInit+0x88>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <HAL_UART_MspInit+0x88>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_UART_MspInit+0x88>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bc2:	230c      	movs	r3, #12
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bd2:	2307      	movs	r3, #7
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <HAL_UART_MspInit+0x8c>)
 8000bde:	f000 fa07 	bl	8000ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	; 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40004400 	.word	0x40004400
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08e      	sub	sp, #56	; 0x38
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	4b33      	ldr	r3, [pc, #204]	; (8000cdc <HAL_InitTick+0xe4>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	4a32      	ldr	r2, [pc, #200]	; (8000cdc <HAL_InitTick+0xe4>)
 8000c12:	f043 0310 	orr.w	r3, r3, #16
 8000c16:	6413      	str	r3, [r2, #64]	; 0x40
 8000c18:	4b30      	ldr	r3, [pc, #192]	; (8000cdc <HAL_InitTick+0xe4>)
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1c:	f003 0310 	and.w	r3, r3, #16
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c24:	f107 0210 	add.w	r2, r7, #16
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 f866 	bl	8001d00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c34:	6a3b      	ldr	r3, [r7, #32]
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d103      	bne.n	8000c46 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c3e:	f001 f837 	bl	8001cb0 <HAL_RCC_GetPCLK1Freq>
 8000c42:	6378      	str	r0, [r7, #52]	; 0x34
 8000c44:	e004      	b.n	8000c50 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c46:	f001 f833 	bl	8001cb0 <HAL_RCC_GetPCLK1Freq>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c52:	4a23      	ldr	r2, [pc, #140]	; (8000ce0 <HAL_InitTick+0xe8>)
 8000c54:	fba2 2303 	umull	r2, r3, r2, r3
 8000c58:	0c9b      	lsrs	r3, r3, #18
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <HAL_InitTick+0xec>)
 8000c60:	4a21      	ldr	r2, [pc, #132]	; (8000ce8 <HAL_InitTick+0xf0>)
 8000c62:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c64:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <HAL_InitTick+0xec>)
 8000c66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c6a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c6c:	4a1d      	ldr	r2, [pc, #116]	; (8000ce4 <HAL_InitTick+0xec>)
 8000c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c70:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <HAL_InitTick+0xec>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c78:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <HAL_InitTick+0xec>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <HAL_InitTick+0xec>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c84:	4817      	ldr	r0, [pc, #92]	; (8000ce4 <HAL_InitTick+0xec>)
 8000c86:	f001 f86d 	bl	8001d64 <HAL_TIM_Base_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d11b      	bne.n	8000cd0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c98:	4812      	ldr	r0, [pc, #72]	; (8000ce4 <HAL_InitTick+0xec>)
 8000c9a:	f001 f8bd 	bl	8001e18 <HAL_TIM_Base_Start_IT>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ca4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d111      	bne.n	8000cd0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cac:	2036      	movs	r0, #54	; 0x36
 8000cae:	f000 f991 	bl	8000fd4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b0f      	cmp	r3, #15
 8000cb6:	d808      	bhi.n	8000cca <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	2036      	movs	r0, #54	; 0x36
 8000cbe:	f000 f96d 	bl	8000f9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <HAL_InitTick+0xf4>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	e002      	b.n	8000cd0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cd0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3738      	adds	r7, #56	; 0x38
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	431bde83 	.word	0x431bde83
 8000ce4:	20000080 	.word	0x20000080
 8000ce8:	40001000 	.word	0x40001000
 8000cec:	20000004 	.word	0x20000004

08000cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <NMI_Handler+0x4>

08000cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <HardFault_Handler+0x4>

08000cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <MemManage_Handler+0x4>

08000d02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <BusFault_Handler+0x4>

08000d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <UsageFault_Handler+0x4>

08000d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <TIM6_DAC_IRQHandler+0x10>)
 8000d22:	f001 f8e9 	bl	8001ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000080 	.word	0x20000080

08000d30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <SystemInit+0x20>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3a:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <SystemInit+0x20>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d58:	f7ff ffea 	bl	8000d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d5c:	480c      	ldr	r0, [pc, #48]	; (8000d90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d5e:	490d      	ldr	r1, [pc, #52]	; (8000d94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d60:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d74:	4c0a      	ldr	r4, [pc, #40]	; (8000da0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d82:	f006 fee9 	bl	8007b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d86:	f7ff fbeb 	bl	8000560 <main>
  bx  lr    
 8000d8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000d98:	08007d74 	.word	0x08007d74
  ldr r2, =_sbss
 8000d9c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000da0:	200144f4 	.word	0x200144f4

08000da4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <HAL_Init+0x40>)
 8000db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <HAL_Init+0x40>)
 8000dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <HAL_Init+0x40>)
 8000dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	f000 f8d8 	bl	8000f86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f7ff ff0e 	bl	8000bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ddc:	f7ff fe9c 	bl	8000b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023c00 	.word	0x40023c00

08000dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_IncTick+0x20>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_IncTick+0x24>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <HAL_IncTick+0x24>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	200000c8 	.word	0x200000c8

08000e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return uwTick;
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <HAL_GetTick+0x14>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	200000c8 	.word	0x200000c8

08000e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5e:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	60d3      	str	r3, [r2, #12]
}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <__NVIC_GetPriorityGrouping+0x18>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	f003 0307 	and.w	r3, r3, #7
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	db0b      	blt.n	8000eba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	f003 021f 	and.w	r2, r3, #31
 8000ea8:	4907      	ldr	r1, [pc, #28]	; (8000ec8 <__NVIC_EnableIRQ+0x38>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	095b      	lsrs	r3, r3, #5
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000e100 	.word	0xe000e100

08000ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	db0a      	blt.n	8000ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	490c      	ldr	r1, [pc, #48]	; (8000f18 <__NVIC_SetPriority+0x4c>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	0112      	lsls	r2, r2, #4
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	440b      	add	r3, r1
 8000ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef4:	e00a      	b.n	8000f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4908      	ldr	r1, [pc, #32]	; (8000f1c <__NVIC_SetPriority+0x50>)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	f003 030f 	and.w	r3, r3, #15
 8000f02:	3b04      	subs	r3, #4
 8000f04:	0112      	lsls	r2, r2, #4
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	440b      	add	r3, r1
 8000f0a:	761a      	strb	r2, [r3, #24]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000e100 	.word	0xe000e100
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	; 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f1c3 0307 	rsb	r3, r3, #7
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	bf28      	it	cs
 8000f3e:	2304      	movcs	r3, #4
 8000f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3304      	adds	r3, #4
 8000f46:	2b06      	cmp	r3, #6
 8000f48:	d902      	bls.n	8000f50 <NVIC_EncodePriority+0x30>
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3b03      	subs	r3, #3
 8000f4e:	e000      	b.n	8000f52 <NVIC_EncodePriority+0x32>
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	f04f 32ff 	mov.w	r2, #4294967295
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	401a      	ands	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	43d9      	mvns	r1, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	4313      	orrs	r3, r2
         );
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3724      	adds	r7, #36	; 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ff4c 	bl	8000e2c <__NVIC_SetPriorityGrouping>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fae:	f7ff ff61 	bl	8000e74 <__NVIC_GetPriorityGrouping>
 8000fb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	68b9      	ldr	r1, [r7, #8]
 8000fb8:	6978      	ldr	r0, [r7, #20]
 8000fba:	f7ff ffb1 	bl	8000f20 <NVIC_EncodePriority>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff80 	bl	8000ecc <__NVIC_SetPriority>
}
 8000fcc:	bf00      	nop
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff54 	bl	8000e90 <__NVIC_EnableIRQ>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
 800100a:	e16b      	b.n	80012e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800100c:	2201      	movs	r2, #1
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	429a      	cmp	r2, r3
 8001026:	f040 815a 	bne.w	80012de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	2b01      	cmp	r3, #1
 8001034:	d005      	beq.n	8001042 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800103e:	2b02      	cmp	r3, #2
 8001040:	d130      	bne.n	80010a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	2203      	movs	r2, #3
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	68da      	ldr	r2, [r3, #12]
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001078:	2201      	movs	r2, #1
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	091b      	lsrs	r3, r3, #4
 800108e:	f003 0201 	and.w	r2, r3, #1
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	d017      	beq.n	80010e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d123      	bne.n	8001134 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	08da      	lsrs	r2, r3, #3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3208      	adds	r2, #8
 80010f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	f003 0307 	and.w	r3, r3, #7
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	220f      	movs	r2, #15
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	691a      	ldr	r2, [r3, #16]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	08da      	lsrs	r2, r3, #3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3208      	adds	r2, #8
 800112e:	69b9      	ldr	r1, [r7, #24]
 8001130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0203 	and.w	r2, r3, #3
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 80b4 	beq.w	80012de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b60      	ldr	r3, [pc, #384]	; (80012fc <HAL_GPIO_Init+0x30c>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	4a5f      	ldr	r2, [pc, #380]	; (80012fc <HAL_GPIO_Init+0x30c>)
 8001180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001184:	6453      	str	r3, [r2, #68]	; 0x44
 8001186:	4b5d      	ldr	r3, [pc, #372]	; (80012fc <HAL_GPIO_Init+0x30c>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001192:	4a5b      	ldr	r2, [pc, #364]	; (8001300 <HAL_GPIO_Init+0x310>)
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	3302      	adds	r3, #2
 800119a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	220f      	movs	r2, #15
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a52      	ldr	r2, [pc, #328]	; (8001304 <HAL_GPIO_Init+0x314>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d02b      	beq.n	8001216 <HAL_GPIO_Init+0x226>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a51      	ldr	r2, [pc, #324]	; (8001308 <HAL_GPIO_Init+0x318>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d025      	beq.n	8001212 <HAL_GPIO_Init+0x222>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a50      	ldr	r2, [pc, #320]	; (800130c <HAL_GPIO_Init+0x31c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d01f      	beq.n	800120e <HAL_GPIO_Init+0x21e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4f      	ldr	r2, [pc, #316]	; (8001310 <HAL_GPIO_Init+0x320>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d019      	beq.n	800120a <HAL_GPIO_Init+0x21a>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4e      	ldr	r2, [pc, #312]	; (8001314 <HAL_GPIO_Init+0x324>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d013      	beq.n	8001206 <HAL_GPIO_Init+0x216>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a4d      	ldr	r2, [pc, #308]	; (8001318 <HAL_GPIO_Init+0x328>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d00d      	beq.n	8001202 <HAL_GPIO_Init+0x212>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4c      	ldr	r2, [pc, #304]	; (800131c <HAL_GPIO_Init+0x32c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d007      	beq.n	80011fe <HAL_GPIO_Init+0x20e>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a4b      	ldr	r2, [pc, #300]	; (8001320 <HAL_GPIO_Init+0x330>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d101      	bne.n	80011fa <HAL_GPIO_Init+0x20a>
 80011f6:	2307      	movs	r3, #7
 80011f8:	e00e      	b.n	8001218 <HAL_GPIO_Init+0x228>
 80011fa:	2308      	movs	r3, #8
 80011fc:	e00c      	b.n	8001218 <HAL_GPIO_Init+0x228>
 80011fe:	2306      	movs	r3, #6
 8001200:	e00a      	b.n	8001218 <HAL_GPIO_Init+0x228>
 8001202:	2305      	movs	r3, #5
 8001204:	e008      	b.n	8001218 <HAL_GPIO_Init+0x228>
 8001206:	2304      	movs	r3, #4
 8001208:	e006      	b.n	8001218 <HAL_GPIO_Init+0x228>
 800120a:	2303      	movs	r3, #3
 800120c:	e004      	b.n	8001218 <HAL_GPIO_Init+0x228>
 800120e:	2302      	movs	r3, #2
 8001210:	e002      	b.n	8001218 <HAL_GPIO_Init+0x228>
 8001212:	2301      	movs	r3, #1
 8001214:	e000      	b.n	8001218 <HAL_GPIO_Init+0x228>
 8001216:	2300      	movs	r3, #0
 8001218:	69fa      	ldr	r2, [r7, #28]
 800121a:	f002 0203 	and.w	r2, r2, #3
 800121e:	0092      	lsls	r2, r2, #2
 8001220:	4093      	lsls	r3, r2
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001228:	4935      	ldr	r1, [pc, #212]	; (8001300 <HAL_GPIO_Init+0x310>)
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	089b      	lsrs	r3, r3, #2
 800122e:	3302      	adds	r3, #2
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001236:	4b3b      	ldr	r3, [pc, #236]	; (8001324 <HAL_GPIO_Init+0x334>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800125a:	4a32      	ldr	r2, [pc, #200]	; (8001324 <HAL_GPIO_Init+0x334>)
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001260:	4b30      	ldr	r3, [pc, #192]	; (8001324 <HAL_GPIO_Init+0x334>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001284:	4a27      	ldr	r2, [pc, #156]	; (8001324 <HAL_GPIO_Init+0x334>)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800128a:	4b26      	ldr	r3, [pc, #152]	; (8001324 <HAL_GPIO_Init+0x334>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ae:	4a1d      	ldr	r2, [pc, #116]	; (8001324 <HAL_GPIO_Init+0x334>)
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <HAL_GPIO_Init+0x334>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012d8:	4a12      	ldr	r2, [pc, #72]	; (8001324 <HAL_GPIO_Init+0x334>)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3301      	adds	r3, #1
 80012e2:	61fb      	str	r3, [r7, #28]
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	2b0f      	cmp	r3, #15
 80012e8:	f67f ae90 	bls.w	800100c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	3724      	adds	r7, #36	; 0x24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800
 8001300:	40013800 	.word	0x40013800
 8001304:	40020000 	.word	0x40020000
 8001308:	40020400 	.word	0x40020400
 800130c:	40020800 	.word	0x40020800
 8001310:	40020c00 	.word	0x40020c00
 8001314:	40021000 	.word	0x40021000
 8001318:	40021400 	.word	0x40021400
 800131c:	40021800 	.word	0x40021800
 8001320:	40021c00 	.word	0x40021c00
 8001324:	40013c00 	.word	0x40013c00

08001328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]
 8001334:	4613      	mov	r3, r2
 8001336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001338:	787b      	ldrb	r3, [r7, #1]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800133e:	887a      	ldrh	r2, [r7, #2]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001344:	e003      	b.n	800134e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001346:	887b      	ldrh	r3, [r7, #2]
 8001348:	041a      	lsls	r2, r3, #16
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	619a      	str	r2, [r3, #24]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800135a:	b480      	push	{r7}
 800135c:	b085      	sub	sp, #20
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	460b      	mov	r3, r1
 8001364:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800136c:	887a      	ldrh	r2, [r7, #2]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4013      	ands	r3, r2
 8001372:	041a      	lsls	r2, r3, #16
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	43d9      	mvns	r1, r3
 8001378:	887b      	ldrh	r3, [r7, #2]
 800137a:	400b      	ands	r3, r1
 800137c:	431a      	orrs	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	619a      	str	r2, [r3, #24]
}
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR : Enter SLEEP mode with WFE instruction and
  *                                                   no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_PWR_EnterSLEEPMode+0x3c>)
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <HAL_PWR_EnterSLEEPMode+0x3c>)
 80013a2:	f023 0304 	bic.w	r3, r3, #4
 80013a6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d101      	bne.n	80013b2 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80013ae:	bf30      	wfi
    }

    /* Request Wait For Event */
    __WFE();
  }
}
 80013b0:	e005      	b.n	80013be <HAL_PWR_EnterSLEEPMode+0x2e>
    if(SLEEPEntry != PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR)
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	2b03      	cmp	r3, #3
 80013b6:	d001      	beq.n	80013bc <HAL_PWR_EnterSLEEPMode+0x2c>
      __SEV();
 80013b8:	bf40      	sev
      __WFE();
 80013ba:	bf20      	wfe
    __WFE();
 80013bc:	bf20      	wfe
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e267      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d075      	beq.n	80014da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ee:	4b88      	ldr	r3, [pc, #544]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 030c 	and.w	r3, r3, #12
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	d00c      	beq.n	8001414 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013fa:	4b85      	ldr	r3, [pc, #532]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001402:	2b08      	cmp	r3, #8
 8001404:	d112      	bne.n	800142c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001406:	4b82      	ldr	r3, [pc, #520]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800140e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001412:	d10b      	bne.n	800142c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001414:	4b7e      	ldr	r3, [pc, #504]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d05b      	beq.n	80014d8 <HAL_RCC_OscConfig+0x108>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d157      	bne.n	80014d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e242      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001434:	d106      	bne.n	8001444 <HAL_RCC_OscConfig+0x74>
 8001436:	4b76      	ldr	r3, [pc, #472]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a75      	ldr	r2, [pc, #468]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800143c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e01d      	b.n	8001480 <HAL_RCC_OscConfig+0xb0>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800144c:	d10c      	bne.n	8001468 <HAL_RCC_OscConfig+0x98>
 800144e:	4b70      	ldr	r3, [pc, #448]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a6f      	ldr	r2, [pc, #444]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4b6d      	ldr	r3, [pc, #436]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a6c      	ldr	r2, [pc, #432]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e00b      	b.n	8001480 <HAL_RCC_OscConfig+0xb0>
 8001468:	4b69      	ldr	r3, [pc, #420]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a68      	ldr	r2, [pc, #416]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800146e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b66      	ldr	r3, [pc, #408]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a65      	ldr	r2, [pc, #404]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800147a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d013      	beq.n	80014b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fcc4 	bl	8000e14 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff fcc0 	bl	8000e14 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	; 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e207      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a2:	4b5b      	ldr	r3, [pc, #364]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0xc0>
 80014ae:	e014      	b.n	80014da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fcb0 	bl	8000e14 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b8:	f7ff fcac 	bl	8000e14 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	; 0x64
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e1f3      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ca:	4b51      	ldr	r3, [pc, #324]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0xe8>
 80014d6:	e000      	b.n	80014da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d063      	beq.n	80015ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014e6:	4b4a      	ldr	r3, [pc, #296]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00b      	beq.n	800150a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014f2:	4b47      	ldr	r3, [pc, #284]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d11c      	bne.n	8001538 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014fe:	4b44      	ldr	r3, [pc, #272]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d116      	bne.n	8001538 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150a:	4b41      	ldr	r3, [pc, #260]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d005      	beq.n	8001522 <HAL_RCC_OscConfig+0x152>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d001      	beq.n	8001522 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e1c7      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001522:	4b3b      	ldr	r3, [pc, #236]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4937      	ldr	r1, [pc, #220]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001536:	e03a      	b.n	80015ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d020      	beq.n	8001582 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001540:	4b34      	ldr	r3, [pc, #208]	; (8001614 <HAL_RCC_OscConfig+0x244>)
 8001542:	2201      	movs	r2, #1
 8001544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001546:	f7ff fc65 	bl	8000e14 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800154e:	f7ff fc61 	bl	8000e14 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e1a8      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001560:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156c:	4b28      	ldr	r3, [pc, #160]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4925      	ldr	r1, [pc, #148]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800157c:	4313      	orrs	r3, r2
 800157e:	600b      	str	r3, [r1, #0]
 8001580:	e015      	b.n	80015ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001582:	4b24      	ldr	r3, [pc, #144]	; (8001614 <HAL_RCC_OscConfig+0x244>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff fc44 	bl	8000e14 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001590:	f7ff fc40 	bl	8000e14 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e187      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a2:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d036      	beq.n	8001628 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d016      	beq.n	80015f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_RCC_OscConfig+0x248>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c8:	f7ff fc24 	bl	8000e14 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d0:	f7ff fc20 	bl	8000e14 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e167      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80015e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0x200>
 80015ee:	e01b      	b.n	8001628 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_RCC_OscConfig+0x248>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f6:	f7ff fc0d 	bl	8000e14 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015fc:	e00e      	b.n	800161c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015fe:	f7ff fc09 	bl	8000e14 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d907      	bls.n	800161c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e150      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
 8001610:	40023800 	.word	0x40023800
 8001614:	42470000 	.word	0x42470000
 8001618:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800161c:	4b88      	ldr	r3, [pc, #544]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 800161e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1ea      	bne.n	80015fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 8097 	beq.w	8001764 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800163a:	4b81      	ldr	r3, [pc, #516]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10f      	bne.n	8001666 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	4b7d      	ldr	r3, [pc, #500]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a7c      	ldr	r2, [pc, #496]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
 8001656:	4b7a      	ldr	r3, [pc, #488]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001662:	2301      	movs	r3, #1
 8001664:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001666:	4b77      	ldr	r3, [pc, #476]	; (8001844 <HAL_RCC_OscConfig+0x474>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166e:	2b00      	cmp	r3, #0
 8001670:	d118      	bne.n	80016a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001672:	4b74      	ldr	r3, [pc, #464]	; (8001844 <HAL_RCC_OscConfig+0x474>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a73      	ldr	r2, [pc, #460]	; (8001844 <HAL_RCC_OscConfig+0x474>)
 8001678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800167e:	f7ff fbc9 	bl	8000e14 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001686:	f7ff fbc5 	bl	8000e14 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e10c      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001698:	4b6a      	ldr	r3, [pc, #424]	; (8001844 <HAL_RCC_OscConfig+0x474>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d106      	bne.n	80016ba <HAL_RCC_OscConfig+0x2ea>
 80016ac:	4b64      	ldr	r3, [pc, #400]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b0:	4a63      	ldr	r2, [pc, #396]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6713      	str	r3, [r2, #112]	; 0x70
 80016b8:	e01c      	b.n	80016f4 <HAL_RCC_OscConfig+0x324>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b05      	cmp	r3, #5
 80016c0:	d10c      	bne.n	80016dc <HAL_RCC_OscConfig+0x30c>
 80016c2:	4b5f      	ldr	r3, [pc, #380]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c6:	4a5e      	ldr	r2, [pc, #376]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6713      	str	r3, [r2, #112]	; 0x70
 80016ce:	4b5c      	ldr	r3, [pc, #368]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d2:	4a5b      	ldr	r2, [pc, #364]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6713      	str	r3, [r2, #112]	; 0x70
 80016da:	e00b      	b.n	80016f4 <HAL_RCC_OscConfig+0x324>
 80016dc:	4b58      	ldr	r3, [pc, #352]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e0:	4a57      	ldr	r2, [pc, #348]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016e2:	f023 0301 	bic.w	r3, r3, #1
 80016e6:	6713      	str	r3, [r2, #112]	; 0x70
 80016e8:	4b55      	ldr	r3, [pc, #340]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ec:	4a54      	ldr	r2, [pc, #336]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016ee:	f023 0304 	bic.w	r3, r3, #4
 80016f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d015      	beq.n	8001728 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fc:	f7ff fb8a 	bl	8000e14 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001702:	e00a      	b.n	800171a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001704:	f7ff fb86 	bl	8000e14 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001712:	4293      	cmp	r3, r2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e0cb      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171a:	4b49      	ldr	r3, [pc, #292]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0ee      	beq.n	8001704 <HAL_RCC_OscConfig+0x334>
 8001726:	e014      	b.n	8001752 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001728:	f7ff fb74 	bl	8000e14 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172e:	e00a      	b.n	8001746 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001730:	f7ff fb70 	bl	8000e14 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	; 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e0b5      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001746:	4b3e      	ldr	r3, [pc, #248]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 8001748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1ee      	bne.n	8001730 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001752:	7dfb      	ldrb	r3, [r7, #23]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d105      	bne.n	8001764 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001758:	4b39      	ldr	r3, [pc, #228]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	4a38      	ldr	r2, [pc, #224]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 800175e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001762:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 80a1 	beq.w	80018b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800176e:	4b34      	ldr	r3, [pc, #208]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 030c 	and.w	r3, r3, #12
 8001776:	2b08      	cmp	r3, #8
 8001778:	d05c      	beq.n	8001834 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d141      	bne.n	8001806 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001782:	4b31      	ldr	r3, [pc, #196]	; (8001848 <HAL_RCC_OscConfig+0x478>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fb44 	bl	8000e14 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001790:	f7ff fb40 	bl	8000e14 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e087      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a2:	4b27      	ldr	r3, [pc, #156]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69da      	ldr	r2, [r3, #28]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	019b      	lsls	r3, r3, #6
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	085b      	lsrs	r3, r3, #1
 80017c6:	3b01      	subs	r3, #1
 80017c8:	041b      	lsls	r3, r3, #16
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	061b      	lsls	r3, r3, #24
 80017d2:	491b      	ldr	r1, [pc, #108]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <HAL_RCC_OscConfig+0x478>)
 80017da:	2201      	movs	r2, #1
 80017dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017de:	f7ff fb19 	bl	8000e14 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e6:	f7ff fb15 	bl	8000e14 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e05c      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x416>
 8001804:	e054      	b.n	80018b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <HAL_RCC_OscConfig+0x478>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fb02 	bl	8000e14 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001814:	f7ff fafe 	bl	8000e14 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e045      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x444>
 8001832:	e03d      	b.n	80018b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d107      	bne.n	800184c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e038      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
 8001840:	40023800 	.word	0x40023800
 8001844:	40007000 	.word	0x40007000
 8001848:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <HAL_RCC_OscConfig+0x4ec>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d028      	beq.n	80018ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d121      	bne.n	80018ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001872:	429a      	cmp	r2, r3
 8001874:	d11a      	bne.n	80018ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800187c:	4013      	ands	r3, r2
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001882:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001884:	4293      	cmp	r3, r2
 8001886:	d111      	bne.n	80018ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001892:	085b      	lsrs	r3, r3, #1
 8001894:	3b01      	subs	r3, #1
 8001896:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001898:	429a      	cmp	r2, r3
 800189a:	d107      	bne.n	80018ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800

080018c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0cc      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018d4:	4b68      	ldr	r3, [pc, #416]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d90c      	bls.n	80018fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b65      	ldr	r3, [pc, #404]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b63      	ldr	r3, [pc, #396]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0b8      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d020      	beq.n	800194a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001914:	4b59      	ldr	r3, [pc, #356]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	4a58      	ldr	r2, [pc, #352]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800191e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800192c:	4b53      	ldr	r3, [pc, #332]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	4a52      	ldr	r2, [pc, #328]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001938:	4b50      	ldr	r3, [pc, #320]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	494d      	ldr	r1, [pc, #308]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d044      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d107      	bne.n	800196e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	4b47      	ldr	r3, [pc, #284]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d119      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e07f      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d003      	beq.n	800197e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800197a:	2b03      	cmp	r3, #3
 800197c:	d107      	bne.n	800198e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197e:	4b3f      	ldr	r3, [pc, #252]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d109      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e06f      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198e:	4b3b      	ldr	r3, [pc, #236]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e067      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800199e:	4b37      	ldr	r3, [pc, #220]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f023 0203 	bic.w	r2, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	4934      	ldr	r1, [pc, #208]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019b0:	f7ff fa30 	bl	8000e14 <HAL_GetTick>
 80019b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b6:	e00a      	b.n	80019ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b8:	f7ff fa2c 	bl	8000e14 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e04f      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ce:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 020c 	and.w	r2, r3, #12
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	429a      	cmp	r2, r3
 80019de:	d1eb      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019e0:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d20c      	bcs.n	8001a08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ee:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f6:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e032      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d008      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	4916      	ldr	r1, [pc, #88]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d009      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	490e      	ldr	r1, [pc, #56]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a46:	f000 f821 	bl	8001a8c <HAL_RCC_GetSysClockFreq>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	490a      	ldr	r1, [pc, #40]	; (8001a80 <HAL_RCC_ClockConfig+0x1c0>)
 8001a58:	5ccb      	ldrb	r3, [r1, r3]
 8001a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5e:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff f8c6 	bl	8000bf8 <HAL_InitTick>

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023c00 	.word	0x40023c00
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	08007d24 	.word	0x08007d24
 8001a84:	20000000 	.word	0x20000000
 8001a88:	20000004 	.word	0x20000004

08001a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a90:	b094      	sub	sp, #80	; 0x50
 8001a92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	647b      	str	r3, [r7, #68]	; 0x44
 8001a98:	2300      	movs	r3, #0
 8001a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aa4:	4b79      	ldr	r3, [pc, #484]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d00d      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x40>
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	f200 80e1 	bhi.w	8001c78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d003      	beq.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001abe:	e0db      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ac0:	4b73      	ldr	r3, [pc, #460]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ac2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ac4:	e0db      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ac6:	4b73      	ldr	r3, [pc, #460]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ac8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aca:	e0d8      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001acc:	4b6f      	ldr	r3, [pc, #444]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ad4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ad6:	4b6d      	ldr	r3, [pc, #436]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d063      	beq.n	8001baa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ae2:	4b6a      	ldr	r3, [pc, #424]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	099b      	lsrs	r3, r3, #6
 8001ae8:	2200      	movs	r2, #0
 8001aea:	63bb      	str	r3, [r7, #56]	; 0x38
 8001aec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001af4:	633b      	str	r3, [r7, #48]	; 0x30
 8001af6:	2300      	movs	r3, #0
 8001af8:	637b      	str	r3, [r7, #52]	; 0x34
 8001afa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001afe:	4622      	mov	r2, r4
 8001b00:	462b      	mov	r3, r5
 8001b02:	f04f 0000 	mov.w	r0, #0
 8001b06:	f04f 0100 	mov.w	r1, #0
 8001b0a:	0159      	lsls	r1, r3, #5
 8001b0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b10:	0150      	lsls	r0, r2, #5
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4621      	mov	r1, r4
 8001b18:	1a51      	subs	r1, r2, r1
 8001b1a:	6139      	str	r1, [r7, #16]
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b30:	4659      	mov	r1, fp
 8001b32:	018b      	lsls	r3, r1, #6
 8001b34:	4651      	mov	r1, sl
 8001b36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b3a:	4651      	mov	r1, sl
 8001b3c:	018a      	lsls	r2, r1, #6
 8001b3e:	4651      	mov	r1, sl
 8001b40:	ebb2 0801 	subs.w	r8, r2, r1
 8001b44:	4659      	mov	r1, fp
 8001b46:	eb63 0901 	sbc.w	r9, r3, r1
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b5e:	4690      	mov	r8, r2
 8001b60:	4699      	mov	r9, r3
 8001b62:	4623      	mov	r3, r4
 8001b64:	eb18 0303 	adds.w	r3, r8, r3
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	462b      	mov	r3, r5
 8001b6c:	eb49 0303 	adc.w	r3, r9, r3
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b7e:	4629      	mov	r1, r5
 8001b80:	024b      	lsls	r3, r1, #9
 8001b82:	4621      	mov	r1, r4
 8001b84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b88:	4621      	mov	r1, r4
 8001b8a:	024a      	lsls	r2, r1, #9
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b92:	2200      	movs	r2, #0
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b9c:	f7fe fb62 	bl	8000264 <__aeabi_uldivmod>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ba8:	e058      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001baa:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	099b      	lsrs	r3, r3, #6
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bba:	623b      	str	r3, [r7, #32]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bc4:	4642      	mov	r2, r8
 8001bc6:	464b      	mov	r3, r9
 8001bc8:	f04f 0000 	mov.w	r0, #0
 8001bcc:	f04f 0100 	mov.w	r1, #0
 8001bd0:	0159      	lsls	r1, r3, #5
 8001bd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bd6:	0150      	lsls	r0, r2, #5
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4641      	mov	r1, r8
 8001bde:	ebb2 0a01 	subs.w	sl, r2, r1
 8001be2:	4649      	mov	r1, r9
 8001be4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bf4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bf8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bfc:	ebb2 040a 	subs.w	r4, r2, sl
 8001c00:	eb63 050b 	sbc.w	r5, r3, fp
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	00eb      	lsls	r3, r5, #3
 8001c0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c12:	00e2      	lsls	r2, r4, #3
 8001c14:	4614      	mov	r4, r2
 8001c16:	461d      	mov	r5, r3
 8001c18:	4643      	mov	r3, r8
 8001c1a:	18e3      	adds	r3, r4, r3
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	464b      	mov	r3, r9
 8001c20:	eb45 0303 	adc.w	r3, r5, r3
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c32:	4629      	mov	r1, r5
 8001c34:	028b      	lsls	r3, r1, #10
 8001c36:	4621      	mov	r1, r4
 8001c38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	028a      	lsls	r2, r1, #10
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c46:	2200      	movs	r2, #0
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	61fa      	str	r2, [r7, #28]
 8001c4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c50:	f7fe fb08 	bl	8000264 <__aeabi_uldivmod>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4613      	mov	r3, r2
 8001c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	0c1b      	lsrs	r3, r3, #16
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	3301      	adds	r3, #1
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c76:	e002      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3750      	adds	r7, #80	; 0x50
 8001c84:	46bd      	mov	sp, r7
 8001c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	00f42400 	.word	0x00f42400
 8001c94:	007a1200 	.word	0x007a1200

08001c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <HAL_RCC_GetHCLKFreq+0x14>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000000 	.word	0x20000000

08001cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cb4:	f7ff fff0 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	0a9b      	lsrs	r3, r3, #10
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	4903      	ldr	r1, [pc, #12]	; (8001cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc6:	5ccb      	ldrb	r3, [r1, r3]
 8001cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	08007d34 	.word	0x08007d34

08001cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cdc:	f7ff ffdc 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	0b5b      	lsrs	r3, r3, #13
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	4903      	ldr	r1, [pc, #12]	; (8001cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cee:	5ccb      	ldrb	r3, [r1, r3]
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	08007d34 	.word	0x08007d34

08001d00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_RCC_GetClockConfig+0x5c>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 0203 	and.w	r2, r3, #3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <HAL_RCC_GetClockConfig+0x5c>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <HAL_RCC_GetClockConfig+0x5c>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_RCC_GetClockConfig+0x5c>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	08db      	lsrs	r3, r3, #3
 8001d3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <HAL_RCC_GetClockConfig+0x60>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0207 	and.w	r2, r3, #7
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	601a      	str	r2, [r3, #0]
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40023c00 	.word	0x40023c00

08001d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e041      	b.n	8001dfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d106      	bne.n	8001d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f839 	bl	8001e02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3304      	adds	r3, #4
 8001da0:	4619      	mov	r1, r3
 8001da2:	4610      	mov	r0, r2
 8001da4:	f000 f9c0 	bl	8002128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d001      	beq.n	8001e30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e04e      	b.n	8001ece <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a23      	ldr	r2, [pc, #140]	; (8001edc <HAL_TIM_Base_Start_IT+0xc4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d022      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e5a:	d01d      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a1f      	ldr	r2, [pc, #124]	; (8001ee0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d018      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a1e      	ldr	r2, [pc, #120]	; (8001ee4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d013      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a1c      	ldr	r2, [pc, #112]	; (8001ee8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00e      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1b      	ldr	r2, [pc, #108]	; (8001eec <HAL_TIM_Base_Start_IT+0xd4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d009      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a19      	ldr	r2, [pc, #100]	; (8001ef0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d004      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a18      	ldr	r2, [pc, #96]	; (8001ef4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d111      	bne.n	8001ebc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d010      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0201 	orr.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eba:	e007      	b.n	8001ecc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40010000 	.word	0x40010000
 8001ee0:	40000400 	.word	0x40000400
 8001ee4:	40000800 	.word	0x40000800
 8001ee8:	40000c00 	.word	0x40000c00
 8001eec:	40010400 	.word	0x40010400
 8001ef0:	40014000 	.word	0x40014000
 8001ef4:	40001800 	.word	0x40001800

08001ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d020      	beq.n	8001f5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01b      	beq.n	8001f5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0202 	mvn.w	r2, #2
 8001f2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f8d2 	bl	80020ec <HAL_TIM_IC_CaptureCallback>
 8001f48:	e005      	b.n	8001f56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f8c4 	bl	80020d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f8d5 	bl	8002100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d020      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d01b      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0204 	mvn.w	r2, #4
 8001f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f8ac 	bl	80020ec <HAL_TIM_IC_CaptureCallback>
 8001f94:	e005      	b.n	8001fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f89e 	bl	80020d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f8af 	bl	8002100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d020      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d01b      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0208 	mvn.w	r2, #8
 8001fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2204      	movs	r2, #4
 8001fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f886 	bl	80020ec <HAL_TIM_IC_CaptureCallback>
 8001fe0:	e005      	b.n	8001fee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f878 	bl	80020d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f889 	bl	8002100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d020      	beq.n	8002040 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	2b00      	cmp	r3, #0
 8002006:	d01b      	beq.n	8002040 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0210 	mvn.w	r2, #16
 8002010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2208      	movs	r2, #8
 8002016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f860 	bl	80020ec <HAL_TIM_IC_CaptureCallback>
 800202c:	e005      	b.n	800203a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f852 	bl	80020d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f863 	bl	8002100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00c      	beq.n	8002064 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f06f 0201 	mvn.w	r2, #1
 800205c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7fe fd42 	bl	8000ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00c      	beq.n	8002088 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002074:	2b00      	cmp	r3, #0
 8002076:	d007      	beq.n	8002088 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f906 	bl	8002294 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00c      	beq.n	80020ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002098:	2b00      	cmp	r3, #0
 800209a:	d007      	beq.n	80020ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f834 	bl	8002114 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f003 0320 	and.w	r3, r3, #32
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00c      	beq.n	80020d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f003 0320 	and.w	r3, r3, #32
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d007      	beq.n	80020d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0220 	mvn.w	r2, #32
 80020c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f8d8 	bl	8002280 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020d0:	bf00      	nop
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a46      	ldr	r2, [pc, #280]	; (8002254 <TIM_Base_SetConfig+0x12c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d013      	beq.n	8002168 <TIM_Base_SetConfig+0x40>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002146:	d00f      	beq.n	8002168 <TIM_Base_SetConfig+0x40>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a43      	ldr	r2, [pc, #268]	; (8002258 <TIM_Base_SetConfig+0x130>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d00b      	beq.n	8002168 <TIM_Base_SetConfig+0x40>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a42      	ldr	r2, [pc, #264]	; (800225c <TIM_Base_SetConfig+0x134>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d007      	beq.n	8002168 <TIM_Base_SetConfig+0x40>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a41      	ldr	r2, [pc, #260]	; (8002260 <TIM_Base_SetConfig+0x138>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d003      	beq.n	8002168 <TIM_Base_SetConfig+0x40>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a40      	ldr	r2, [pc, #256]	; (8002264 <TIM_Base_SetConfig+0x13c>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d108      	bne.n	800217a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800216e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4313      	orrs	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a35      	ldr	r2, [pc, #212]	; (8002254 <TIM_Base_SetConfig+0x12c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d02b      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002188:	d027      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a32      	ldr	r2, [pc, #200]	; (8002258 <TIM_Base_SetConfig+0x130>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d023      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a31      	ldr	r2, [pc, #196]	; (800225c <TIM_Base_SetConfig+0x134>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d01f      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a30      	ldr	r2, [pc, #192]	; (8002260 <TIM_Base_SetConfig+0x138>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d01b      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a2f      	ldr	r2, [pc, #188]	; (8002264 <TIM_Base_SetConfig+0x13c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d017      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a2e      	ldr	r2, [pc, #184]	; (8002268 <TIM_Base_SetConfig+0x140>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d013      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a2d      	ldr	r2, [pc, #180]	; (800226c <TIM_Base_SetConfig+0x144>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00f      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a2c      	ldr	r2, [pc, #176]	; (8002270 <TIM_Base_SetConfig+0x148>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d00b      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a2b      	ldr	r2, [pc, #172]	; (8002274 <TIM_Base_SetConfig+0x14c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d007      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a2a      	ldr	r2, [pc, #168]	; (8002278 <TIM_Base_SetConfig+0x150>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d003      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a29      	ldr	r2, [pc, #164]	; (800227c <TIM_Base_SetConfig+0x154>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d108      	bne.n	80021ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a10      	ldr	r2, [pc, #64]	; (8002254 <TIM_Base_SetConfig+0x12c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d003      	beq.n	8002220 <TIM_Base_SetConfig+0xf8>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a12      	ldr	r2, [pc, #72]	; (8002264 <TIM_Base_SetConfig+0x13c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d103      	bne.n	8002228 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	691a      	ldr	r2, [r3, #16]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b01      	cmp	r3, #1
 8002238:	d105      	bne.n	8002246 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f023 0201 	bic.w	r2, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	611a      	str	r2, [r3, #16]
  }
}
 8002246:	bf00      	nop
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40010000 	.word	0x40010000
 8002258:	40000400 	.word	0x40000400
 800225c:	40000800 	.word	0x40000800
 8002260:	40000c00 	.word	0x40000c00
 8002264:	40010400 	.word	0x40010400
 8002268:	40014000 	.word	0x40014000
 800226c:	40014400 	.word	0x40014400
 8002270:	40014800 	.word	0x40014800
 8002274:	40001800 	.word	0x40001800
 8002278:	40001c00 	.word	0x40001c00
 800227c:	40002000 	.word	0x40002000

08002280 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e042      	b.n	8002340 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d106      	bne.n	80022d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7fe fc4a 	bl	8000b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2224      	movs	r2, #36	; 0x24
 80022d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f82b 	bl	8002348 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002300:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695a      	ldr	r2, [r3, #20]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002310:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002320:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800234c:	b0c0      	sub	sp, #256	; 0x100
 800234e:	af00      	add	r7, sp, #0
 8002350:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002364:	68d9      	ldr	r1, [r3, #12]
 8002366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	ea40 0301 	orr.w	r3, r0, r1
 8002370:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	431a      	orrs	r2, r3
 8002380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	431a      	orrs	r2, r3
 8002388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80023a0:	f021 010c 	bic.w	r1, r1, #12
 80023a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80023ae:	430b      	orrs	r3, r1
 80023b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80023be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c2:	6999      	ldr	r1, [r3, #24]
 80023c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	ea40 0301 	orr.w	r3, r0, r1
 80023ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4b8f      	ldr	r3, [pc, #572]	; (8002614 <UART_SetConfig+0x2cc>)
 80023d8:	429a      	cmp	r2, r3
 80023da:	d005      	beq.n	80023e8 <UART_SetConfig+0xa0>
 80023dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4b8d      	ldr	r3, [pc, #564]	; (8002618 <UART_SetConfig+0x2d0>)
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d104      	bne.n	80023f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023e8:	f7ff fc76 	bl	8001cd8 <HAL_RCC_GetPCLK2Freq>
 80023ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80023f0:	e003      	b.n	80023fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023f2:	f7ff fc5d 	bl	8001cb0 <HAL_RCC_GetPCLK1Freq>
 80023f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002404:	f040 810c 	bne.w	8002620 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800240c:	2200      	movs	r2, #0
 800240e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002412:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002416:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800241a:	4622      	mov	r2, r4
 800241c:	462b      	mov	r3, r5
 800241e:	1891      	adds	r1, r2, r2
 8002420:	65b9      	str	r1, [r7, #88]	; 0x58
 8002422:	415b      	adcs	r3, r3
 8002424:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002426:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800242a:	4621      	mov	r1, r4
 800242c:	eb12 0801 	adds.w	r8, r2, r1
 8002430:	4629      	mov	r1, r5
 8002432:	eb43 0901 	adc.w	r9, r3, r1
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002442:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002446:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800244a:	4690      	mov	r8, r2
 800244c:	4699      	mov	r9, r3
 800244e:	4623      	mov	r3, r4
 8002450:	eb18 0303 	adds.w	r3, r8, r3
 8002454:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002458:	462b      	mov	r3, r5
 800245a:	eb49 0303 	adc.w	r3, r9, r3
 800245e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800246e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002472:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002476:	460b      	mov	r3, r1
 8002478:	18db      	adds	r3, r3, r3
 800247a:	653b      	str	r3, [r7, #80]	; 0x50
 800247c:	4613      	mov	r3, r2
 800247e:	eb42 0303 	adc.w	r3, r2, r3
 8002482:	657b      	str	r3, [r7, #84]	; 0x54
 8002484:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002488:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800248c:	f7fd feea 	bl	8000264 <__aeabi_uldivmod>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4b61      	ldr	r3, [pc, #388]	; (800261c <UART_SetConfig+0x2d4>)
 8002496:	fba3 2302 	umull	r2, r3, r3, r2
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	011c      	lsls	r4, r3, #4
 800249e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024a2:	2200      	movs	r2, #0
 80024a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80024ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80024b0:	4642      	mov	r2, r8
 80024b2:	464b      	mov	r3, r9
 80024b4:	1891      	adds	r1, r2, r2
 80024b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80024b8:	415b      	adcs	r3, r3
 80024ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024c0:	4641      	mov	r1, r8
 80024c2:	eb12 0a01 	adds.w	sl, r2, r1
 80024c6:	4649      	mov	r1, r9
 80024c8:	eb43 0b01 	adc.w	fp, r3, r1
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024e0:	4692      	mov	sl, r2
 80024e2:	469b      	mov	fp, r3
 80024e4:	4643      	mov	r3, r8
 80024e6:	eb1a 0303 	adds.w	r3, sl, r3
 80024ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80024ee:	464b      	mov	r3, r9
 80024f0:	eb4b 0303 	adc.w	r3, fp, r3
 80024f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80024f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002504:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002508:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800250c:	460b      	mov	r3, r1
 800250e:	18db      	adds	r3, r3, r3
 8002510:	643b      	str	r3, [r7, #64]	; 0x40
 8002512:	4613      	mov	r3, r2
 8002514:	eb42 0303 	adc.w	r3, r2, r3
 8002518:	647b      	str	r3, [r7, #68]	; 0x44
 800251a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800251e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002522:	f7fd fe9f 	bl	8000264 <__aeabi_uldivmod>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4611      	mov	r1, r2
 800252c:	4b3b      	ldr	r3, [pc, #236]	; (800261c <UART_SetConfig+0x2d4>)
 800252e:	fba3 2301 	umull	r2, r3, r3, r1
 8002532:	095b      	lsrs	r3, r3, #5
 8002534:	2264      	movs	r2, #100	; 0x64
 8002536:	fb02 f303 	mul.w	r3, r2, r3
 800253a:	1acb      	subs	r3, r1, r3
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002542:	4b36      	ldr	r3, [pc, #216]	; (800261c <UART_SetConfig+0x2d4>)
 8002544:	fba3 2302 	umull	r2, r3, r3, r2
 8002548:	095b      	lsrs	r3, r3, #5
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002550:	441c      	add	r4, r3
 8002552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002556:	2200      	movs	r2, #0
 8002558:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800255c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002560:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002564:	4642      	mov	r2, r8
 8002566:	464b      	mov	r3, r9
 8002568:	1891      	adds	r1, r2, r2
 800256a:	63b9      	str	r1, [r7, #56]	; 0x38
 800256c:	415b      	adcs	r3, r3
 800256e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002570:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002574:	4641      	mov	r1, r8
 8002576:	1851      	adds	r1, r2, r1
 8002578:	6339      	str	r1, [r7, #48]	; 0x30
 800257a:	4649      	mov	r1, r9
 800257c:	414b      	adcs	r3, r1
 800257e:	637b      	str	r3, [r7, #52]	; 0x34
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800258c:	4659      	mov	r1, fp
 800258e:	00cb      	lsls	r3, r1, #3
 8002590:	4651      	mov	r1, sl
 8002592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002596:	4651      	mov	r1, sl
 8002598:	00ca      	lsls	r2, r1, #3
 800259a:	4610      	mov	r0, r2
 800259c:	4619      	mov	r1, r3
 800259e:	4603      	mov	r3, r0
 80025a0:	4642      	mov	r2, r8
 80025a2:	189b      	adds	r3, r3, r2
 80025a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025a8:	464b      	mov	r3, r9
 80025aa:	460a      	mov	r2, r1
 80025ac:	eb42 0303 	adc.w	r3, r2, r3
 80025b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80025c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80025c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80025c8:	460b      	mov	r3, r1
 80025ca:	18db      	adds	r3, r3, r3
 80025cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ce:	4613      	mov	r3, r2
 80025d0:	eb42 0303 	adc.w	r3, r2, r3
 80025d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80025de:	f7fd fe41 	bl	8000264 <__aeabi_uldivmod>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4b0d      	ldr	r3, [pc, #52]	; (800261c <UART_SetConfig+0x2d4>)
 80025e8:	fba3 1302 	umull	r1, r3, r3, r2
 80025ec:	095b      	lsrs	r3, r3, #5
 80025ee:	2164      	movs	r1, #100	; 0x64
 80025f0:	fb01 f303 	mul.w	r3, r1, r3
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	3332      	adds	r3, #50	; 0x32
 80025fa:	4a08      	ldr	r2, [pc, #32]	; (800261c <UART_SetConfig+0x2d4>)
 80025fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002600:	095b      	lsrs	r3, r3, #5
 8002602:	f003 0207 	and.w	r2, r3, #7
 8002606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4422      	add	r2, r4
 800260e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002610:	e106      	b.n	8002820 <UART_SetConfig+0x4d8>
 8002612:	bf00      	nop
 8002614:	40011000 	.word	0x40011000
 8002618:	40011400 	.word	0x40011400
 800261c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002624:	2200      	movs	r2, #0
 8002626:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800262a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800262e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002632:	4642      	mov	r2, r8
 8002634:	464b      	mov	r3, r9
 8002636:	1891      	adds	r1, r2, r2
 8002638:	6239      	str	r1, [r7, #32]
 800263a:	415b      	adcs	r3, r3
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
 800263e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002642:	4641      	mov	r1, r8
 8002644:	1854      	adds	r4, r2, r1
 8002646:	4649      	mov	r1, r9
 8002648:	eb43 0501 	adc.w	r5, r3, r1
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	00eb      	lsls	r3, r5, #3
 8002656:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800265a:	00e2      	lsls	r2, r4, #3
 800265c:	4614      	mov	r4, r2
 800265e:	461d      	mov	r5, r3
 8002660:	4643      	mov	r3, r8
 8002662:	18e3      	adds	r3, r4, r3
 8002664:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002668:	464b      	mov	r3, r9
 800266a:	eb45 0303 	adc.w	r3, r5, r3
 800266e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800267e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800268e:	4629      	mov	r1, r5
 8002690:	008b      	lsls	r3, r1, #2
 8002692:	4621      	mov	r1, r4
 8002694:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002698:	4621      	mov	r1, r4
 800269a:	008a      	lsls	r2, r1, #2
 800269c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80026a0:	f7fd fde0 	bl	8000264 <__aeabi_uldivmod>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4b60      	ldr	r3, [pc, #384]	; (800282c <UART_SetConfig+0x4e4>)
 80026aa:	fba3 2302 	umull	r2, r3, r3, r2
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	011c      	lsls	r4, r3, #4
 80026b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026b6:	2200      	movs	r2, #0
 80026b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80026c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80026c4:	4642      	mov	r2, r8
 80026c6:	464b      	mov	r3, r9
 80026c8:	1891      	adds	r1, r2, r2
 80026ca:	61b9      	str	r1, [r7, #24]
 80026cc:	415b      	adcs	r3, r3
 80026ce:	61fb      	str	r3, [r7, #28]
 80026d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026d4:	4641      	mov	r1, r8
 80026d6:	1851      	adds	r1, r2, r1
 80026d8:	6139      	str	r1, [r7, #16]
 80026da:	4649      	mov	r1, r9
 80026dc:	414b      	adcs	r3, r1
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026ec:	4659      	mov	r1, fp
 80026ee:	00cb      	lsls	r3, r1, #3
 80026f0:	4651      	mov	r1, sl
 80026f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026f6:	4651      	mov	r1, sl
 80026f8:	00ca      	lsls	r2, r1, #3
 80026fa:	4610      	mov	r0, r2
 80026fc:	4619      	mov	r1, r3
 80026fe:	4603      	mov	r3, r0
 8002700:	4642      	mov	r2, r8
 8002702:	189b      	adds	r3, r3, r2
 8002704:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002708:	464b      	mov	r3, r9
 800270a:	460a      	mov	r2, r1
 800270c:	eb42 0303 	adc.w	r3, r2, r3
 8002710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	67bb      	str	r3, [r7, #120]	; 0x78
 800271e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800272c:	4649      	mov	r1, r9
 800272e:	008b      	lsls	r3, r1, #2
 8002730:	4641      	mov	r1, r8
 8002732:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002736:	4641      	mov	r1, r8
 8002738:	008a      	lsls	r2, r1, #2
 800273a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800273e:	f7fd fd91 	bl	8000264 <__aeabi_uldivmod>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4611      	mov	r1, r2
 8002748:	4b38      	ldr	r3, [pc, #224]	; (800282c <UART_SetConfig+0x4e4>)
 800274a:	fba3 2301 	umull	r2, r3, r3, r1
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	2264      	movs	r2, #100	; 0x64
 8002752:	fb02 f303 	mul.w	r3, r2, r3
 8002756:	1acb      	subs	r3, r1, r3
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	3332      	adds	r3, #50	; 0x32
 800275c:	4a33      	ldr	r2, [pc, #204]	; (800282c <UART_SetConfig+0x4e4>)
 800275e:	fba2 2303 	umull	r2, r3, r2, r3
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002768:	441c      	add	r4, r3
 800276a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800276e:	2200      	movs	r2, #0
 8002770:	673b      	str	r3, [r7, #112]	; 0x70
 8002772:	677a      	str	r2, [r7, #116]	; 0x74
 8002774:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002778:	4642      	mov	r2, r8
 800277a:	464b      	mov	r3, r9
 800277c:	1891      	adds	r1, r2, r2
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	415b      	adcs	r3, r3
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002788:	4641      	mov	r1, r8
 800278a:	1851      	adds	r1, r2, r1
 800278c:	6039      	str	r1, [r7, #0]
 800278e:	4649      	mov	r1, r9
 8002790:	414b      	adcs	r3, r1
 8002792:	607b      	str	r3, [r7, #4]
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027a0:	4659      	mov	r1, fp
 80027a2:	00cb      	lsls	r3, r1, #3
 80027a4:	4651      	mov	r1, sl
 80027a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027aa:	4651      	mov	r1, sl
 80027ac:	00ca      	lsls	r2, r1, #3
 80027ae:	4610      	mov	r0, r2
 80027b0:	4619      	mov	r1, r3
 80027b2:	4603      	mov	r3, r0
 80027b4:	4642      	mov	r2, r8
 80027b6:	189b      	adds	r3, r3, r2
 80027b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80027ba:	464b      	mov	r3, r9
 80027bc:	460a      	mov	r2, r1
 80027be:	eb42 0303 	adc.w	r3, r2, r3
 80027c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	663b      	str	r3, [r7, #96]	; 0x60
 80027ce:	667a      	str	r2, [r7, #100]	; 0x64
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80027dc:	4649      	mov	r1, r9
 80027de:	008b      	lsls	r3, r1, #2
 80027e0:	4641      	mov	r1, r8
 80027e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027e6:	4641      	mov	r1, r8
 80027e8:	008a      	lsls	r2, r1, #2
 80027ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80027ee:	f7fd fd39 	bl	8000264 <__aeabi_uldivmod>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4b0d      	ldr	r3, [pc, #52]	; (800282c <UART_SetConfig+0x4e4>)
 80027f8:	fba3 1302 	umull	r1, r3, r3, r2
 80027fc:	095b      	lsrs	r3, r3, #5
 80027fe:	2164      	movs	r1, #100	; 0x64
 8002800:	fb01 f303 	mul.w	r3, r1, r3
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	3332      	adds	r3, #50	; 0x32
 800280a:	4a08      	ldr	r2, [pc, #32]	; (800282c <UART_SetConfig+0x4e4>)
 800280c:	fba2 2303 	umull	r2, r3, r2, r3
 8002810:	095b      	lsrs	r3, r3, #5
 8002812:	f003 020f 	and.w	r2, r3, #15
 8002816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4422      	add	r2, r4
 800281e:	609a      	str	r2, [r3, #8]
}
 8002820:	bf00      	nop
 8002822:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002826:	46bd      	mov	sp, r7
 8002828:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800282c:	51eb851f 	.word	0x51eb851f

08002830 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f103 0208 	add.w	r2, r3, #8
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f04f 32ff 	mov.w	r2, #4294967295
 8002848:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f103 0208 	add.w	r2, r3, #8
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f103 0208 	add.w	r2, r3, #8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800288a:	b480      	push	{r7}
 800288c:	b085      	sub	sp, #20
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	601a      	str	r2, [r3, #0]
}
 80028c6:	bf00      	nop
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80028d2:	b480      	push	{r7}
 80028d4:	b085      	sub	sp, #20
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e8:	d103      	bne.n	80028f2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	e00c      	b.n	800290c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3308      	adds	r3, #8
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	e002      	b.n	8002900 <vListInsert+0x2e>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	429a      	cmp	r2, r3
 800290a:	d2f6      	bcs.n	80028fa <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	601a      	str	r2, [r3, #0]
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6892      	ldr	r2, [r2, #8]
 800295a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6852      	ldr	r2, [r2, #4]
 8002964:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	429a      	cmp	r2, r3
 800296e:	d103      	bne.n	8002978 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	1e5a      	subs	r2, r3, #1
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10a      	bne.n	80029c2 <xQueueGenericReset+0x2a>
        __asm volatile
 80029ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b0:	f383 8811 	msr	BASEPRI, r3
 80029b4:	f3bf 8f6f 	isb	sy
 80029b8:	f3bf 8f4f 	dsb	sy
 80029bc:	60bb      	str	r3, [r7, #8]
    }
 80029be:	bf00      	nop
 80029c0:	e7fe      	b.n	80029c0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80029c2:	f002 f947 	bl	8004c54 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ce:	68f9      	ldr	r1, [r7, #12]
 80029d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	441a      	add	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f2:	3b01      	subs	r3, #1
 80029f4:	68f9      	ldr	r1, [r7, #12]
 80029f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	441a      	add	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	22ff      	movs	r2, #255	; 0xff
 8002a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	22ff      	movs	r2, #255	; 0xff
 8002a0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d114      	bne.n	8002a42 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01a      	beq.n	8002a56 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	3310      	adds	r3, #16
 8002a24:	4618      	mov	r0, r3
 8002a26:	f001 f9a1 	bl	8003d6c <xTaskRemoveFromEventList>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d012      	beq.n	8002a56 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <xQueueGenericReset+0xcc>)
 8002a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	e009      	b.n	8002a56 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	3310      	adds	r3, #16
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fef2 	bl	8002830 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	3324      	adds	r3, #36	; 0x24
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff feed 	bl	8002830 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002a56:	f002 f92d 	bl	8004cb4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002a5a:	2301      	movs	r3, #1
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	e000ed04 	.word	0xe000ed04

08002a68 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08c      	sub	sp, #48	; 0x30
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	4613      	mov	r3, r2
 8002a74:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10a      	bne.n	8002a92 <xQueueGenericCreate+0x2a>
        __asm volatile
 8002a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a80:	f383 8811 	msr	BASEPRI, r3
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	61bb      	str	r3, [r7, #24]
    }
 8002a8e:	bf00      	nop
 8002a90:	e7fe      	b.n	8002a90 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	fb02 f303 	mul.w	r3, r2, r3
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d006      	beq.n	8002ab0 <xQueueGenericCreate+0x48>
 8002aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d101      	bne.n	8002ab4 <xQueueGenericCreate+0x4c>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <xQueueGenericCreate+0x4e>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10a      	bne.n	8002ad0 <xQueueGenericCreate+0x68>
        __asm volatile
 8002aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002abe:	f383 8811 	msr	BASEPRI, r3
 8002ac2:	f3bf 8f6f 	isb	sy
 8002ac6:	f3bf 8f4f 	dsb	sy
 8002aca:	617b      	str	r3, [r7, #20]
    }
 8002acc:	bf00      	nop
 8002ace:	e7fe      	b.n	8002ace <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002ad6:	d90a      	bls.n	8002aee <xQueueGenericCreate+0x86>
        __asm volatile
 8002ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002adc:	f383 8811 	msr	BASEPRI, r3
 8002ae0:	f3bf 8f6f 	isb	sy
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	613b      	str	r3, [r7, #16]
    }
 8002aea:	bf00      	nop
 8002aec:	e7fe      	b.n	8002aec <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	3350      	adds	r3, #80	; 0x50
 8002af2:	4618      	mov	r0, r3
 8002af4:	f002 f9da 	bl	8004eac <pvPortMalloc>
 8002af8:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00d      	beq.n	8002b1c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	3350      	adds	r3, #80	; 0x50
 8002b08:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b0a:	79fa      	ldrb	r2, [r7, #7]
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	4613      	mov	r3, r2
 8002b12:	69fa      	ldr	r2, [r7, #28]
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f805 	bl	8002b26 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
    }
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3728      	adds	r7, #40	; 0x28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b084      	sub	sp, #16
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d103      	bne.n	8002b42 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	e002      	b.n	8002b48 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b54:	2101      	movs	r1, #1
 8002b56:	69b8      	ldr	r0, [r7, #24]
 8002b58:	f7ff ff1e 	bl	8002998 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	78fa      	ldrb	r2, [r7, #3]
 8002b60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	68f9      	ldr	r1, [r7, #12]
 8002b6a:	2073      	movs	r0, #115	; 0x73
 8002b6c:	f004 f8c4 	bl	8006cf8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002b70:	bf00      	nop
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b090      	sub	sp, #64	; 0x40
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b86:	2300      	movs	r3, #0
 8002b88:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10a      	bne.n	8002baa <xQueueGenericSend+0x32>
        __asm volatile
 8002b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002ba6:	bf00      	nop
 8002ba8:	e7fe      	b.n	8002ba8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d103      	bne.n	8002bb8 <xQueueGenericSend+0x40>
 8002bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <xQueueGenericSend+0x44>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <xQueueGenericSend+0x46>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10a      	bne.n	8002bd8 <xQueueGenericSend+0x60>
        __asm volatile
 8002bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc6:	f383 8811 	msr	BASEPRI, r3
 8002bca:	f3bf 8f6f 	isb	sy
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002bd4:	bf00      	nop
 8002bd6:	e7fe      	b.n	8002bd6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d103      	bne.n	8002be6 <xQueueGenericSend+0x6e>
 8002bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <xQueueGenericSend+0x72>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <xQueueGenericSend+0x74>
 8002bea:	2300      	movs	r3, #0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10a      	bne.n	8002c06 <xQueueGenericSend+0x8e>
        __asm volatile
 8002bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	623b      	str	r3, [r7, #32]
    }
 8002c02:	bf00      	nop
 8002c04:	e7fe      	b.n	8002c04 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c06:	f001 fa53 	bl	80040b0 <xTaskGetSchedulerState>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d102      	bne.n	8002c16 <xQueueGenericSend+0x9e>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <xQueueGenericSend+0xa2>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <xQueueGenericSend+0xa4>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10a      	bne.n	8002c36 <xQueueGenericSend+0xbe>
        __asm volatile
 8002c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c24:	f383 8811 	msr	BASEPRI, r3
 8002c28:	f3bf 8f6f 	isb	sy
 8002c2c:	f3bf 8f4f 	dsb	sy
 8002c30:	61fb      	str	r3, [r7, #28]
    }
 8002c32:	bf00      	nop
 8002c34:	e7fe      	b.n	8002c34 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002c36:	f002 f80d 	bl	8004c54 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d302      	bcc.n	8002c4c <xQueueGenericSend+0xd4>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d136      	bne.n	8002cba <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f004 fde0 	bl	8007814 <SEGGER_SYSVIEW_ShrinkId>
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4601      	mov	r1, r0
 8002c60:	205a      	movs	r0, #90	; 0x5a
 8002c62:	f004 f8bf 	bl	8006de4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c6c:	f000 fa78 	bl	8003160 <prvCopyDataToQueue>
 8002c70:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d010      	beq.n	8002c9c <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7c:	3324      	adds	r3, #36	; 0x24
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f001 f874 	bl	8003d6c <xTaskRemoveFromEventList>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d013      	beq.n	8002cb2 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002c8a:	4b4d      	ldr	r3, [pc, #308]	; (8002dc0 <xQueueGenericSend+0x248>)
 8002c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	f3bf 8f4f 	dsb	sy
 8002c96:	f3bf 8f6f 	isb	sy
 8002c9a:	e00a      	b.n	8002cb2 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d007      	beq.n	8002cb2 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002ca2:	4b47      	ldr	r3, [pc, #284]	; (8002dc0 <xQueueGenericSend+0x248>)
 8002ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	f3bf 8f4f 	dsb	sy
 8002cae:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002cb2:	f001 ffff 	bl	8004cb4 <vPortExitCritical>
                return pdPASS;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e07d      	b.n	8002db6 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d110      	bne.n	8002ce2 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002cc0:	f001 fff8 	bl	8004cb4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f004 fda4 	bl	8007814 <SEGGER_SYSVIEW_ShrinkId>
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4601      	mov	r1, r0
 8002cd8:	205a      	movs	r0, #90	; 0x5a
 8002cda:	f004 f883 	bl	8006de4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	e069      	b.n	8002db6 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d106      	bne.n	8002cf6 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002ce8:	f107 0314 	add.w	r3, r7, #20
 8002cec:	4618      	mov	r0, r3
 8002cee:	f001 f8a3 	bl	8003e38 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002cf6:	f001 ffdd 	bl	8004cb4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002cfa:	f000 fdef 	bl	80038dc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002cfe:	f001 ffa9 	bl	8004c54 <vPortEnterCritical>
 8002d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d08:	b25b      	sxtb	r3, r3
 8002d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0e:	d103      	bne.n	8002d18 <xQueueGenericSend+0x1a0>
 8002d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d1e:	b25b      	sxtb	r3, r3
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d24:	d103      	bne.n	8002d2e <xQueueGenericSend+0x1b6>
 8002d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d2e:	f001 ffc1 	bl	8004cb4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d32:	1d3a      	adds	r2, r7, #4
 8002d34:	f107 0314 	add.w	r3, r7, #20
 8002d38:	4611      	mov	r1, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f001 f892 	bl	8003e64 <xTaskCheckForTimeOut>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d124      	bne.n	8002d90 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d48:	f000 fb02 	bl	8003350 <prvIsQueueFull>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d018      	beq.n	8002d84 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d54:	3310      	adds	r3, #16
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	4611      	mov	r1, r2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 ffb4 	bl	8003cc8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002d60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d62:	f000 fa8d 	bl	8003280 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002d66:	f000 fdc7 	bl	80038f8 <xTaskResumeAll>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f47f af62 	bne.w	8002c36 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002d72:	4b13      	ldr	r3, [pc, #76]	; (8002dc0 <xQueueGenericSend+0x248>)
 8002d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	e758      	b.n	8002c36 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d86:	f000 fa7b 	bl	8003280 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002d8a:	f000 fdb5 	bl	80038f8 <xTaskResumeAll>
 8002d8e:	e752      	b.n	8002c36 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d92:	f000 fa75 	bl	8003280 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002d96:	f000 fdaf 	bl	80038f8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f004 fd39 	bl	8007814 <SEGGER_SYSVIEW_ShrinkId>
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	460b      	mov	r3, r1
 8002dac:	4601      	mov	r1, r0
 8002dae:	205a      	movs	r0, #90	; 0x5a
 8002db0:	f004 f818 	bl	8006de4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002db4:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3738      	adds	r7, #56	; 0x38
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	e000ed04 	.word	0xe000ed04

08002dc4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b090      	sub	sp, #64	; 0x40
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10a      	bne.n	8002df2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de0:	f383 8811 	msr	BASEPRI, r3
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002dee:	bf00      	nop
 8002df0:	e7fe      	b.n	8002df0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d103      	bne.n	8002e00 <xQueueGenericSendFromISR+0x3c>
 8002df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <xQueueGenericSendFromISR+0x40>
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <xQueueGenericSendFromISR+0x42>
 8002e04:	2300      	movs	r3, #0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10a      	bne.n	8002e20 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0e:	f383 8811 	msr	BASEPRI, r3
 8002e12:	f3bf 8f6f 	isb	sy
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002e1c:	bf00      	nop
 8002e1e:	e7fe      	b.n	8002e1e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d103      	bne.n	8002e2e <xQueueGenericSendFromISR+0x6a>
 8002e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <xQueueGenericSendFromISR+0x6e>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <xQueueGenericSendFromISR+0x70>
 8002e32:	2300      	movs	r3, #0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10a      	bne.n	8002e4e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3c:	f383 8811 	msr	BASEPRI, r3
 8002e40:	f3bf 8f6f 	isb	sy
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	623b      	str	r3, [r7, #32]
    }
 8002e4a:	bf00      	nop
 8002e4c:	e7fe      	b.n	8002e4c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e4e:	f001 ffed 	bl	8004e2c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002e52:	f3ef 8211 	mrs	r2, BASEPRI
 8002e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5a:	f383 8811 	msr	BASEPRI, r3
 8002e5e:	f3bf 8f6f 	isb	sy
 8002e62:	f3bf 8f4f 	dsb	sy
 8002e66:	61fa      	str	r2, [r7, #28]
 8002e68:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002e6a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e6c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d302      	bcc.n	8002e80 <xQueueGenericSendFromISR+0xbc>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d148      	bne.n	8002f12 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e92:	4618      	mov	r0, r3
 8002e94:	f004 fcbe 	bl	8007814 <SEGGER_SYSVIEW_ShrinkId>
 8002e98:	4601      	mov	r1, r0
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2060      	movs	r0, #96	; 0x60
 8002ea0:	f003 fed0 	bl	8006c44 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	68b9      	ldr	r1, [r7, #8]
 8002ea8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002eaa:	f000 f959 	bl	8003160 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002eae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb6:	d112      	bne.n	8002ede <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d025      	beq.n	8002f0c <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec2:	3324      	adds	r3, #36	; 0x24
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f000 ff51 	bl	8003d6c <xTaskRemoveFromEventList>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d01d      	beq.n	8002f0c <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d01a      	beq.n	8002f0c <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	e016      	b.n	8002f0c <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002ede:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ee4:	d10a      	bne.n	8002efc <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eea:	f383 8811 	msr	BASEPRI, r3
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	617b      	str	r3, [r7, #20]
    }
 8002ef8:	bf00      	nop
 8002efa:	e7fe      	b.n	8002efa <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002efc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f00:	3301      	adds	r3, #1
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	b25a      	sxtb	r2, r3
 8002f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002f10:	e00b      	b.n	8002f2a <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f14:	4618      	mov	r0, r3
 8002f16:	f004 fc7d 	bl	8007814 <SEGGER_SYSVIEW_ShrinkId>
 8002f1a:	4601      	mov	r1, r0
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2060      	movs	r0, #96	; 0x60
 8002f22:	f003 fe8f 	bl	8006c44 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002f34:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3740      	adds	r7, #64	; 0x40
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b08f      	sub	sp, #60	; 0x3c
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10a      	bne.n	8002f70 <xQueueReceive+0x30>
        __asm volatile
 8002f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5e:	f383 8811 	msr	BASEPRI, r3
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	f3bf 8f4f 	dsb	sy
 8002f6a:	623b      	str	r3, [r7, #32]
    }
 8002f6c:	bf00      	nop
 8002f6e:	e7fe      	b.n	8002f6e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d103      	bne.n	8002f7e <xQueueReceive+0x3e>
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <xQueueReceive+0x42>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <xQueueReceive+0x44>
 8002f82:	2300      	movs	r3, #0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <xQueueReceive+0x5e>
        __asm volatile
 8002f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	61fb      	str	r3, [r7, #28]
    }
 8002f9a:	bf00      	nop
 8002f9c:	e7fe      	b.n	8002f9c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f9e:	f001 f887 	bl	80040b0 <xTaskGetSchedulerState>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d102      	bne.n	8002fae <xQueueReceive+0x6e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <xQueueReceive+0x72>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <xQueueReceive+0x74>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10a      	bne.n	8002fce <xQueueReceive+0x8e>
        __asm volatile
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	61bb      	str	r3, [r7, #24]
    }
 8002fca:	bf00      	nop
 8002fcc:	e7fe      	b.n	8002fcc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002fce:	f001 fe41 	bl	8004c54 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d02f      	beq.n	800303e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fe2:	f000 f927 	bl	8003234 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f004 fc13 	bl	8007814 <SEGGER_SYSVIEW_ShrinkId>
 8002fee:	4604      	mov	r4, r0
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	f004 fc0f 	bl	8007814 <SEGGER_SYSVIEW_ShrinkId>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	9100      	str	r1, [sp, #0]
 8002ffe:	4621      	mov	r1, r4
 8003000:	205c      	movs	r0, #92	; 0x5c
 8003002:	f003 feef 	bl	8006de4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	1e5a      	subs	r2, r3, #1
 800300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800300e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00f      	beq.n	8003036 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003018:	3310      	adds	r3, #16
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fea6 	bl	8003d6c <xTaskRemoveFromEventList>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d007      	beq.n	8003036 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003026:	4b4d      	ldr	r3, [pc, #308]	; (800315c <xQueueReceive+0x21c>)
 8003028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	f3bf 8f4f 	dsb	sy
 8003032:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003036:	f001 fe3d 	bl	8004cb4 <vPortExitCritical>
                return pdPASS;
 800303a:	2301      	movs	r3, #1
 800303c:	e08a      	b.n	8003154 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d113      	bne.n	800306c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003044:	f001 fe36 	bl	8004cb4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304a:	4618      	mov	r0, r3
 800304c:	f004 fbe2 	bl	8007814 <SEGGER_SYSVIEW_ShrinkId>
 8003050:	4604      	mov	r4, r0
 8003052:	2000      	movs	r0, #0
 8003054:	f004 fbde 	bl	8007814 <SEGGER_SYSVIEW_ShrinkId>
 8003058:	4602      	mov	r2, r0
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2101      	movs	r1, #1
 800305e:	9100      	str	r1, [sp, #0]
 8003060:	4621      	mov	r1, r4
 8003062:	205c      	movs	r0, #92	; 0x5c
 8003064:	f003 febe 	bl	8006de4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003068:	2300      	movs	r3, #0
 800306a:	e073      	b.n	8003154 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 800306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003072:	f107 0310 	add.w	r3, r7, #16
 8003076:	4618      	mov	r0, r3
 8003078:	f000 fede 	bl	8003e38 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800307c:	2301      	movs	r3, #1
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003080:	f001 fe18 	bl	8004cb4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003084:	f000 fc2a 	bl	80038dc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003088:	f001 fde4 	bl	8004c54 <vPortEnterCritical>
 800308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003092:	b25b      	sxtb	r3, r3
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003098:	d103      	bne.n	80030a2 <xQueueReceive+0x162>
 800309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030a8:	b25b      	sxtb	r3, r3
 80030aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ae:	d103      	bne.n	80030b8 <xQueueReceive+0x178>
 80030b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030b8:	f001 fdfc 	bl	8004cb4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030bc:	1d3a      	adds	r2, r7, #4
 80030be:	f107 0310 	add.w	r3, r7, #16
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 fecd 	bl	8003e64 <xTaskCheckForTimeOut>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d124      	bne.n	800311a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030d2:	f000 f927 	bl	8003324 <prvIsQueueEmpty>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d018      	beq.n	800310e <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030de:	3324      	adds	r3, #36	; 0x24
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	4611      	mov	r1, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 fdef 	bl	8003cc8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80030ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ec:	f000 f8c8 	bl	8003280 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80030f0:	f000 fc02 	bl	80038f8 <xTaskResumeAll>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f47f af69 	bne.w	8002fce <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80030fc:	4b17      	ldr	r3, [pc, #92]	; (800315c <xQueueReceive+0x21c>)
 80030fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	e75f      	b.n	8002fce <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800310e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003110:	f000 f8b6 	bl	8003280 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003114:	f000 fbf0 	bl	80038f8 <xTaskResumeAll>
 8003118:	e759      	b.n	8002fce <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800311a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800311c:	f000 f8b0 	bl	8003280 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003120:	f000 fbea 	bl	80038f8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003126:	f000 f8fd 	bl	8003324 <prvIsQueueEmpty>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	f43f af4e 	beq.w	8002fce <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003134:	4618      	mov	r0, r3
 8003136:	f004 fb6d 	bl	8007814 <SEGGER_SYSVIEW_ShrinkId>
 800313a:	4604      	mov	r4, r0
 800313c:	2000      	movs	r0, #0
 800313e:	f004 fb69 	bl	8007814 <SEGGER_SYSVIEW_ShrinkId>
 8003142:	4602      	mov	r2, r0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2101      	movs	r1, #1
 8003148:	9100      	str	r1, [sp, #0]
 800314a:	4621      	mov	r1, r4
 800314c:	205c      	movs	r0, #92	; 0x5c
 800314e:	f003 fe49 	bl	8006de4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8003152:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003154:	4618      	mov	r0, r3
 8003156:	3734      	adds	r7, #52	; 0x34
 8003158:	46bd      	mov	sp, r7
 800315a:	bd90      	pop	{r4, r7, pc}
 800315c:	e000ed04 	.word	0xe000ed04

08003160 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10d      	bne.n	800319a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d14d      	bne.n	8003222 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	4618      	mov	r0, r3
 800318c:	f000 ffae 	bl	80040ec <xTaskPriorityDisinherit>
 8003190:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	e043      	b.n	8003222 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d119      	bne.n	80031d4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6858      	ldr	r0, [r3, #4]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	461a      	mov	r2, r3
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	f004 fcf8 	bl	8007ba0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	441a      	add	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d32b      	bcc.n	8003222 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	e026      	b.n	8003222 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	68d8      	ldr	r0, [r3, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	461a      	mov	r2, r3
 80031de:	68b9      	ldr	r1, [r7, #8]
 80031e0:	f004 fcde 	bl	8007ba0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	425b      	negs	r3, r3
 80031ee:	441a      	add	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d207      	bcs.n	8003210 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	425b      	negs	r3, r3
 800320a:	441a      	add	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d105      	bne.n	8003222 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	3b01      	subs	r3, #1
 8003220:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800322a:	697b      	ldr	r3, [r7, #20]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d018      	beq.n	8003278 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	441a      	add	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	429a      	cmp	r2, r3
 800325e:	d303      	bcc.n	8003268 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68d9      	ldr	r1, [r3, #12]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	461a      	mov	r2, r3
 8003272:	6838      	ldr	r0, [r7, #0]
 8003274:	f004 fc94 	bl	8007ba0 <memcpy>
    }
}
 8003278:	bf00      	nop
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003288:	f001 fce4 	bl	8004c54 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003292:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003294:	e011      	b.n	80032ba <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	2b00      	cmp	r3, #0
 800329c:	d012      	beq.n	80032c4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3324      	adds	r3, #36	; 0x24
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fd62 	bl	8003d6c <xTaskRemoveFromEventList>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80032ae:	f000 fe3f 	bl	8003f30 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80032ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	dce9      	bgt.n	8003296 <prvUnlockQueue+0x16>
 80032c2:	e000      	b.n	80032c6 <prvUnlockQueue+0x46>
                        break;
 80032c4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	22ff      	movs	r2, #255	; 0xff
 80032ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80032ce:	f001 fcf1 	bl	8004cb4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80032d2:	f001 fcbf 	bl	8004c54 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032dc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80032de:	e011      	b.n	8003304 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d012      	beq.n	800330e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3310      	adds	r3, #16
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 fd3d 	bl	8003d6c <xTaskRemoveFromEventList>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80032f8:	f000 fe1a 	bl	8003f30 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80032fc:	7bbb      	ldrb	r3, [r7, #14]
 80032fe:	3b01      	subs	r3, #1
 8003300:	b2db      	uxtb	r3, r3
 8003302:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003304:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003308:	2b00      	cmp	r3, #0
 800330a:	dce9      	bgt.n	80032e0 <prvUnlockQueue+0x60>
 800330c:	e000      	b.n	8003310 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800330e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	22ff      	movs	r2, #255	; 0xff
 8003314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003318:	f001 fccc 	bl	8004cb4 <vPortExitCritical>
}
 800331c:	bf00      	nop
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800332c:	f001 fc92 	bl	8004c54 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003334:	2b00      	cmp	r3, #0
 8003336:	d102      	bne.n	800333e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003338:	2301      	movs	r3, #1
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	e001      	b.n	8003342 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003342:	f001 fcb7 	bl	8004cb4 <vPortExitCritical>

    return xReturn;
 8003346:	68fb      	ldr	r3, [r7, #12]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003358:	f001 fc7c 	bl	8004c54 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003364:	429a      	cmp	r2, r3
 8003366:	d102      	bne.n	800336e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003368:	2301      	movs	r3, #1
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	e001      	b.n	8003372 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003372:	f001 fc9f 	bl	8004cb4 <vPortExitCritical>

    return xReturn;
 8003376:	68fb      	ldr	r3, [r7, #12]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	e01e      	b.n	80033ce <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003390:	4a13      	ldr	r2, [pc, #76]	; (80033e0 <vQueueAddToRegistry+0x60>)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d115      	bne.n	80033c8 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800339c:	4910      	ldr	r1, [pc, #64]	; (80033e0 <vQueueAddToRegistry+0x60>)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80033a6:	4a0e      	ldr	r2, [pc, #56]	; (80033e0 <vQueueAddToRegistry+0x60>)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4413      	add	r3, r2
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f004 fa2d 	bl	8007814 <SEGGER_SYSVIEW_ShrinkId>
 80033ba:	4601      	mov	r1, r0
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	2071      	movs	r0, #113	; 0x71
 80033c2:	f003 fc3f 	bl	8006c44 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 80033c6:	e006      	b.n	80033d6 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	3301      	adds	r3, #1
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2b07      	cmp	r3, #7
 80033d2:	d9dd      	bls.n	8003390 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	200000cc 	.word	0x200000cc

080033e4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80033f4:	f001 fc2e 	bl	8004c54 <vPortEnterCritical>
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033fe:	b25b      	sxtb	r3, r3
 8003400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003404:	d103      	bne.n	800340e <vQueueWaitForMessageRestricted+0x2a>
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003414:	b25b      	sxtb	r3, r3
 8003416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341a:	d103      	bne.n	8003424 <vQueueWaitForMessageRestricted+0x40>
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003424:	f001 fc46 	bl	8004cb4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342c:	2b00      	cmp	r3, #0
 800342e:	d106      	bne.n	800343e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	3324      	adds	r3, #36	; 0x24
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	4618      	mov	r0, r3
 800343a:	f000 fc69 	bl	8003d10 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800343e:	6978      	ldr	r0, [r7, #20]
 8003440:	f7ff ff1e 	bl	8003280 <prvUnlockQueue>
    }
 8003444:	bf00      	nop
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800344c:	b580      	push	{r7, lr}
 800344e:	b08c      	sub	sp, #48	; 0x30
 8003450:	af04      	add	r7, sp, #16
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	4613      	mov	r3, r2
 800345a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800345c:	88fb      	ldrh	r3, [r7, #6]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4618      	mov	r0, r3
 8003462:	f001 fd23 	bl	8004eac <pvPortMalloc>
 8003466:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00e      	beq.n	800348c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800346e:	2058      	movs	r0, #88	; 0x58
 8003470:	f001 fd1c 	bl	8004eac <pvPortMalloc>
 8003474:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	631a      	str	r2, [r3, #48]	; 0x30
 8003482:	e005      	b.n	8003490 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003484:	6978      	ldr	r0, [r7, #20]
 8003486:	f001 fdf1 	bl	800506c <vPortFree>
 800348a:	e001      	b.n	8003490 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800348c:	2300      	movs	r3, #0
 800348e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d013      	beq.n	80034be <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003496:	88fa      	ldrh	r2, [r7, #6]
 8003498:	2300      	movs	r3, #0
 800349a:	9303      	str	r3, [sp, #12]
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	9302      	str	r3, [sp, #8]
 80034a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	68b9      	ldr	r1, [r7, #8]
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f80e 	bl	80034ce <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80034b2:	69f8      	ldr	r0, [r7, #28]
 80034b4:	f000 f8a2 	bl	80035fc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80034b8:	2301      	movs	r3, #1
 80034ba:	61bb      	str	r3, [r7, #24]
 80034bc:	e002      	b.n	80034c4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034be:	f04f 33ff 	mov.w	r3, #4294967295
 80034c2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80034c4:	69bb      	ldr	r3, [r7, #24]
    }
 80034c6:	4618      	mov	r0, r3
 80034c8:	3720      	adds	r7, #32
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b088      	sub	sp, #32
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	607a      	str	r2, [r7, #4]
 80034da:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80034dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	461a      	mov	r2, r3
 80034e6:	21a5      	movs	r1, #165	; 0xa5
 80034e8:	f004 fb2e 	bl	8007b48 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80034ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034f6:	3b01      	subs	r3, #1
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f023 0307 	bic.w	r3, r3, #7
 8003504:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00a      	beq.n	8003526 <prvInitialiseNewTask+0x58>
        __asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	617b      	str	r3, [r7, #20]
    }
 8003522:	bf00      	nop
 8003524:	e7fe      	b.n	8003524 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01f      	beq.n	800356c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800352c:	2300      	movs	r3, #0
 800352e:	61fb      	str	r3, [r7, #28]
 8003530:	e012      	b.n	8003558 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	4413      	add	r3, r2
 8003538:	7819      	ldrb	r1, [r3, #0]
 800353a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	4413      	add	r3, r2
 8003540:	3334      	adds	r3, #52	; 0x34
 8003542:	460a      	mov	r2, r1
 8003544:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	4413      	add	r3, r2
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d006      	beq.n	8003560 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	3301      	adds	r3, #1
 8003556:	61fb      	str	r3, [r7, #28]
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	2b09      	cmp	r3, #9
 800355c:	d9e9      	bls.n	8003532 <prvInitialiseNewTask+0x64>
 800355e:	e000      	b.n	8003562 <prvInitialiseNewTask+0x94>
            {
                break;
 8003560:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800356a:	e003      	b.n	8003574 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800356c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003576:	2b04      	cmp	r3, #4
 8003578:	d901      	bls.n	800357e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800357a:	2304      	movs	r3, #4
 800357c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003582:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003588:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	2200      	movs	r2, #0
 800358e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003592:	3304      	adds	r3, #4
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff f96b 	bl	8002870 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800359a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359c:	3318      	adds	r3, #24
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff f966 	bl	8002870 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80035a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035a8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ac:	f1c3 0205 	rsb	r2, r3, #5
 80035b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035b8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80035ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035bc:	3350      	adds	r3, #80	; 0x50
 80035be:	2204      	movs	r2, #4
 80035c0:	2100      	movs	r1, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f004 fac0 	bl	8007b48 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80035c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ca:	3354      	adds	r3, #84	; 0x54
 80035cc:	2201      	movs	r2, #1
 80035ce:	2100      	movs	r1, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	f004 fab9 	bl	8007b48 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	68f9      	ldr	r1, [r7, #12]
 80035da:	69b8      	ldr	r0, [r7, #24]
 80035dc:	f001 f990 	bl	8004900 <pxPortInitialiseStack>
 80035e0:	4602      	mov	r2, r0
 80035e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80035e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80035f2:	bf00      	nop
 80035f4:	3720      	adds	r7, #32
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80035fc:	b5b0      	push	{r4, r5, r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af02      	add	r7, sp, #8
 8003602:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003604:	f001 fb26 	bl	8004c54 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003608:	4b3b      	ldr	r3, [pc, #236]	; (80036f8 <prvAddNewTaskToReadyList+0xfc>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	3301      	adds	r3, #1
 800360e:	4a3a      	ldr	r2, [pc, #232]	; (80036f8 <prvAddNewTaskToReadyList+0xfc>)
 8003610:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003612:	4b3a      	ldr	r3, [pc, #232]	; (80036fc <prvAddNewTaskToReadyList+0x100>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d109      	bne.n	800362e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800361a:	4a38      	ldr	r2, [pc, #224]	; (80036fc <prvAddNewTaskToReadyList+0x100>)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003620:	4b35      	ldr	r3, [pc, #212]	; (80036f8 <prvAddNewTaskToReadyList+0xfc>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d110      	bne.n	800364a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003628:	f000 fca8 	bl	8003f7c <prvInitialiseTaskLists>
 800362c:	e00d      	b.n	800364a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800362e:	4b34      	ldr	r3, [pc, #208]	; (8003700 <prvAddNewTaskToReadyList+0x104>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d109      	bne.n	800364a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003636:	4b31      	ldr	r3, [pc, #196]	; (80036fc <prvAddNewTaskToReadyList+0x100>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003640:	429a      	cmp	r2, r3
 8003642:	d802      	bhi.n	800364a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003644:	4a2d      	ldr	r2, [pc, #180]	; (80036fc <prvAddNewTaskToReadyList+0x100>)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800364a:	4b2e      	ldr	r3, [pc, #184]	; (8003704 <prvAddNewTaskToReadyList+0x108>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3301      	adds	r3, #1
 8003650:	4a2c      	ldr	r2, [pc, #176]	; (8003704 <prvAddNewTaskToReadyList+0x108>)
 8003652:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003654:	4b2b      	ldr	r3, [pc, #172]	; (8003704 <prvAddNewTaskToReadyList+0x108>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d016      	beq.n	8003690 <prvAddNewTaskToReadyList+0x94>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4618      	mov	r0, r3
 8003666:	f003 ffaf 	bl	80075c8 <SEGGER_SYSVIEW_OnTaskCreate>
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	461d      	mov	r5, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	461c      	mov	r4, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	1ae3      	subs	r3, r4, r3
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	462b      	mov	r3, r5
 800368c:	f001 febc 	bl	8005408 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4618      	mov	r0, r3
 8003694:	f004 f81c 	bl	80076d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	2201      	movs	r2, #1
 800369e:	409a      	lsls	r2, r3
 80036a0:	4b19      	ldr	r3, [pc, #100]	; (8003708 <prvAddNewTaskToReadyList+0x10c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	4a18      	ldr	r2, [pc, #96]	; (8003708 <prvAddNewTaskToReadyList+0x10c>)
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4a15      	ldr	r2, [pc, #84]	; (800370c <prvAddNewTaskToReadyList+0x110>)
 80036b8:	441a      	add	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3304      	adds	r3, #4
 80036be:	4619      	mov	r1, r3
 80036c0:	4610      	mov	r0, r2
 80036c2:	f7ff f8e2 	bl	800288a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80036c6:	f001 faf5 	bl	8004cb4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80036ca:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <prvAddNewTaskToReadyList+0x104>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00e      	beq.n	80036f0 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80036d2:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <prvAddNewTaskToReadyList+0x100>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	429a      	cmp	r2, r3
 80036de:	d207      	bcs.n	80036f0 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80036e0:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <prvAddNewTaskToReadyList+0x114>)
 80036e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80036f0:	bf00      	nop
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bdb0      	pop	{r4, r5, r7, pc}
 80036f8:	200001e4 	.word	0x200001e4
 80036fc:	2000010c 	.word	0x2000010c
 8003700:	200001f0 	.word	0x200001f0
 8003704:	20000200 	.word	0x20000200
 8003708:	200001ec 	.word	0x200001ec
 800370c:	20000110 	.word	0x20000110
 8003710:	e000ed04 	.word	0xe000ed04

08003714 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8003714:	b580      	push	{r7, lr}
 8003716:	b08a      	sub	sp, #40	; 0x28
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800371e:	2300      	movs	r3, #0
 8003720:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10a      	bne.n	800373e <xTaskDelayUntil+0x2a>
        __asm volatile
 8003728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	617b      	str	r3, [r7, #20]
    }
 800373a:	bf00      	nop
 800373c:	e7fe      	b.n	800373c <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10a      	bne.n	800375a <xTaskDelayUntil+0x46>
        __asm volatile
 8003744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003748:	f383 8811 	msr	BASEPRI, r3
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	613b      	str	r3, [r7, #16]
    }
 8003756:	bf00      	nop
 8003758:	e7fe      	b.n	8003758 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 800375a:	4b2c      	ldr	r3, [pc, #176]	; (800380c <xTaskDelayUntil+0xf8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <xTaskDelayUntil+0x64>
        __asm volatile
 8003762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003766:	f383 8811 	msr	BASEPRI, r3
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	f3bf 8f4f 	dsb	sy
 8003772:	60fb      	str	r3, [r7, #12]
    }
 8003774:	bf00      	nop
 8003776:	e7fe      	b.n	8003776 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8003778:	f000 f8b0 	bl	80038dc <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 800377c:	4b24      	ldr	r3, [pc, #144]	; (8003810 <xTaskDelayUntil+0xfc>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	4413      	add	r3, r2
 800378a:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6a3a      	ldr	r2, [r7, #32]
 8003792:	429a      	cmp	r2, r3
 8003794:	d20b      	bcs.n	80037ae <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69fa      	ldr	r2, [r7, #28]
 800379c:	429a      	cmp	r2, r3
 800379e:	d211      	bcs.n	80037c4 <xTaskDelayUntil+0xb0>
 80037a0:	69fa      	ldr	r2, [r7, #28]
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d90d      	bls.n	80037c4 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80037a8:	2301      	movs	r3, #1
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
 80037ac:	e00a      	b.n	80037c4 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69fa      	ldr	r2, [r7, #28]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d303      	bcc.n	80037c0 <xTaskDelayUntil+0xac>
 80037b8:	69fa      	ldr	r2, [r7, #28]
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d901      	bls.n	80037c4 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80037c0:	2301      	movs	r3, #1
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69fa      	ldr	r2, [r7, #28]
 80037c8:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d009      	beq.n	80037e4 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 80037d0:	2024      	movs	r0, #36	; 0x24
 80037d2:	f003 f9dd 	bl	8006b90 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80037d6:	69fa      	ldr	r2, [r7, #28]
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fd04 	bl	80041ec <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80037e4:	f000 f888 	bl	80038f8 <xTaskResumeAll>
 80037e8:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d107      	bne.n	8003800 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 80037f0:	4b08      	ldr	r3, [pc, #32]	; (8003814 <xTaskDelayUntil+0x100>)
 80037f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003802:	4618      	mov	r0, r3
 8003804:	3728      	adds	r7, #40	; 0x28
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	2000020c 	.word	0x2000020c
 8003810:	200001e8 	.word	0x200001e8
 8003814:	e000ed04 	.word	0xe000ed04

08003818 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800381e:	4b27      	ldr	r3, [pc, #156]	; (80038bc <vTaskStartScheduler+0xa4>)
 8003820:	9301      	str	r3, [sp, #4]
 8003822:	2300      	movs	r3, #0
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	2300      	movs	r3, #0
 8003828:	2282      	movs	r2, #130	; 0x82
 800382a:	4925      	ldr	r1, [pc, #148]	; (80038c0 <vTaskStartScheduler+0xa8>)
 800382c:	4825      	ldr	r0, [pc, #148]	; (80038c4 <vTaskStartScheduler+0xac>)
 800382e:	f7ff fe0d 	bl	800344c <xTaskCreate>
 8003832:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d102      	bne.n	8003840 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800383a:	f000 fd4f 	bl	80042dc <xTimerCreateTimerTask>
 800383e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d124      	bne.n	8003890 <vTaskStartScheduler+0x78>
        __asm volatile
 8003846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384a:	f383 8811 	msr	BASEPRI, r3
 800384e:	f3bf 8f6f 	isb	sy
 8003852:	f3bf 8f4f 	dsb	sy
 8003856:	60bb      	str	r3, [r7, #8]
    }
 8003858:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800385a:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <vTaskStartScheduler+0xb0>)
 800385c:	f04f 32ff 	mov.w	r2, #4294967295
 8003860:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003862:	4b1a      	ldr	r3, [pc, #104]	; (80038cc <vTaskStartScheduler+0xb4>)
 8003864:	2201      	movs	r2, #1
 8003866:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003868:	4b19      	ldr	r3, [pc, #100]	; (80038d0 <vTaskStartScheduler+0xb8>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800386e:	4b19      	ldr	r3, [pc, #100]	; (80038d4 <vTaskStartScheduler+0xbc>)
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	4b12      	ldr	r3, [pc, #72]	; (80038bc <vTaskStartScheduler+0xa4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d102      	bne.n	8003880 <vTaskStartScheduler+0x68>
 800387a:	f003 fe89 	bl	8007590 <SEGGER_SYSVIEW_OnIdle>
 800387e:	e004      	b.n	800388a <vTaskStartScheduler+0x72>
 8003880:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <vTaskStartScheduler+0xbc>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f003 fee1 	bl	800764c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800388a:	f001 f8c3 	bl	8004a14 <xPortStartScheduler>
 800388e:	e00e      	b.n	80038ae <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003896:	d10a      	bne.n	80038ae <vTaskStartScheduler+0x96>
        __asm volatile
 8003898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389c:	f383 8811 	msr	BASEPRI, r3
 80038a0:	f3bf 8f6f 	isb	sy
 80038a4:	f3bf 8f4f 	dsb	sy
 80038a8:	607b      	str	r3, [r7, #4]
    }
 80038aa:	bf00      	nop
 80038ac:	e7fe      	b.n	80038ac <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80038ae:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <vTaskStartScheduler+0xc0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
}
 80038b2:	bf00      	nop
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20000208 	.word	0x20000208
 80038c0:	08007c40 	.word	0x08007c40
 80038c4:	08003f49 	.word	0x08003f49
 80038c8:	20000204 	.word	0x20000204
 80038cc:	200001f0 	.word	0x200001f0
 80038d0:	200001e8 	.word	0x200001e8
 80038d4:	2000010c 	.word	0x2000010c
 80038d8:	2000000c 	.word	0x2000000c

080038dc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80038e0:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <vTaskSuspendAll+0x18>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3301      	adds	r3, #1
 80038e6:	4a03      	ldr	r2, [pc, #12]	; (80038f4 <vTaskSuspendAll+0x18>)
 80038e8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80038ea:	bf00      	nop
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	2000020c 	.word	0x2000020c

080038f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003902:	2300      	movs	r3, #0
 8003904:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003906:	4b43      	ldr	r3, [pc, #268]	; (8003a14 <xTaskResumeAll+0x11c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10a      	bne.n	8003924 <xTaskResumeAll+0x2c>
        __asm volatile
 800390e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003912:	f383 8811 	msr	BASEPRI, r3
 8003916:	f3bf 8f6f 	isb	sy
 800391a:	f3bf 8f4f 	dsb	sy
 800391e:	603b      	str	r3, [r7, #0]
    }
 8003920:	bf00      	nop
 8003922:	e7fe      	b.n	8003922 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003924:	f001 f996 	bl	8004c54 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003928:	4b3a      	ldr	r3, [pc, #232]	; (8003a14 <xTaskResumeAll+0x11c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3b01      	subs	r3, #1
 800392e:	4a39      	ldr	r2, [pc, #228]	; (8003a14 <xTaskResumeAll+0x11c>)
 8003930:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003932:	4b38      	ldr	r3, [pc, #224]	; (8003a14 <xTaskResumeAll+0x11c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d165      	bne.n	8003a06 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800393a:	4b37      	ldr	r3, [pc, #220]	; (8003a18 <xTaskResumeAll+0x120>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d061      	beq.n	8003a06 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003942:	e032      	b.n	80039aa <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003944:	4b35      	ldr	r3, [pc, #212]	; (8003a1c <xTaskResumeAll+0x124>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	3318      	adds	r3, #24
 8003950:	4618      	mov	r0, r3
 8003952:	f7fe fff7 	bl	8002944 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	3304      	adds	r3, #4
 800395a:	4618      	mov	r0, r3
 800395c:	f7fe fff2 	bl	8002944 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4618      	mov	r0, r3
 8003964:	f003 feb4 	bl	80076d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	2201      	movs	r2, #1
 800396e:	409a      	lsls	r2, r3
 8003970:	4b2b      	ldr	r3, [pc, #172]	; (8003a20 <xTaskResumeAll+0x128>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4313      	orrs	r3, r2
 8003976:	4a2a      	ldr	r2, [pc, #168]	; (8003a20 <xTaskResumeAll+0x128>)
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4a27      	ldr	r2, [pc, #156]	; (8003a24 <xTaskResumeAll+0x12c>)
 8003988:	441a      	add	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	3304      	adds	r3, #4
 800398e:	4619      	mov	r1, r3
 8003990:	4610      	mov	r0, r2
 8003992:	f7fe ff7a 	bl	800288a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399a:	4b23      	ldr	r3, [pc, #140]	; (8003a28 <xTaskResumeAll+0x130>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d302      	bcc.n	80039aa <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80039a4:	4b21      	ldr	r3, [pc, #132]	; (8003a2c <xTaskResumeAll+0x134>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039aa:	4b1c      	ldr	r3, [pc, #112]	; (8003a1c <xTaskResumeAll+0x124>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1c8      	bne.n	8003944 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80039b8:	f000 fb5e 	bl	8004078 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80039bc:	4b1c      	ldr	r3, [pc, #112]	; (8003a30 <xTaskResumeAll+0x138>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d010      	beq.n	80039ea <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80039c8:	f000 f858 	bl	8003a7c <xTaskIncrementTick>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80039d2:	4b16      	ldr	r3, [pc, #88]	; (8003a2c <xTaskResumeAll+0x134>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3b01      	subs	r3, #1
 80039dc:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1f1      	bne.n	80039c8 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80039e4:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <xTaskResumeAll+0x138>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80039ea:	4b10      	ldr	r3, [pc, #64]	; (8003a2c <xTaskResumeAll+0x134>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d009      	beq.n	8003a06 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80039f2:	2301      	movs	r3, #1
 80039f4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80039f6:	4b0f      	ldr	r3, [pc, #60]	; (8003a34 <xTaskResumeAll+0x13c>)
 80039f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003a06:	f001 f955 	bl	8004cb4 <vPortExitCritical>

    return xAlreadyYielded;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	2000020c 	.word	0x2000020c
 8003a18:	200001e4 	.word	0x200001e4
 8003a1c:	200001a4 	.word	0x200001a4
 8003a20:	200001ec 	.word	0x200001ec
 8003a24:	20000110 	.word	0x20000110
 8003a28:	2000010c 	.word	0x2000010c
 8003a2c:	200001f8 	.word	0x200001f8
 8003a30:	200001f4 	.word	0x200001f4
 8003a34:	e000ed04 	.word	0xe000ed04

08003a38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003a3e:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <xTaskGetTickCount+0x1c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003a44:	687b      	ldr	r3, [r7, #4]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	200001e8 	.word	0x200001e8

08003a58 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a5e:	f001 f9e5 	bl	8004e2c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003a62:	2300      	movs	r3, #0
 8003a64:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003a66:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <xTaskGetTickCountFromISR+0x20>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003a6c:	683b      	ldr	r3, [r7, #0]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	200001e8 	.word	0x200001e8

08003a7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a86:	4b50      	ldr	r3, [pc, #320]	; (8003bc8 <xTaskIncrementTick+0x14c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f040 8092 	bne.w	8003bb4 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a90:	4b4e      	ldr	r3, [pc, #312]	; (8003bcc <xTaskIncrementTick+0x150>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3301      	adds	r3, #1
 8003a96:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003a98:	4a4c      	ldr	r2, [pc, #304]	; (8003bcc <xTaskIncrementTick+0x150>)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d120      	bne.n	8003ae6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003aa4:	4b4a      	ldr	r3, [pc, #296]	; (8003bd0 <xTaskIncrementTick+0x154>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <xTaskIncrementTick+0x48>
        __asm volatile
 8003aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab2:	f383 8811 	msr	BASEPRI, r3
 8003ab6:	f3bf 8f6f 	isb	sy
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	603b      	str	r3, [r7, #0]
    }
 8003ac0:	bf00      	nop
 8003ac2:	e7fe      	b.n	8003ac2 <xTaskIncrementTick+0x46>
 8003ac4:	4b42      	ldr	r3, [pc, #264]	; (8003bd0 <xTaskIncrementTick+0x154>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	4b42      	ldr	r3, [pc, #264]	; (8003bd4 <xTaskIncrementTick+0x158>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a40      	ldr	r2, [pc, #256]	; (8003bd0 <xTaskIncrementTick+0x154>)
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	4a40      	ldr	r2, [pc, #256]	; (8003bd4 <xTaskIncrementTick+0x158>)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	4b3f      	ldr	r3, [pc, #252]	; (8003bd8 <xTaskIncrementTick+0x15c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3301      	adds	r3, #1
 8003ade:	4a3e      	ldr	r2, [pc, #248]	; (8003bd8 <xTaskIncrementTick+0x15c>)
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	f000 fac9 	bl	8004078 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003ae6:	4b3d      	ldr	r3, [pc, #244]	; (8003bdc <xTaskIncrementTick+0x160>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d34c      	bcc.n	8003b8a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003af0:	4b37      	ldr	r3, [pc, #220]	; (8003bd0 <xTaskIncrementTick+0x154>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d104      	bne.n	8003b04 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003afa:	4b38      	ldr	r3, [pc, #224]	; (8003bdc <xTaskIncrementTick+0x160>)
 8003afc:	f04f 32ff 	mov.w	r2, #4294967295
 8003b00:	601a      	str	r2, [r3, #0]
                    break;
 8003b02:	e042      	b.n	8003b8a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b04:	4b32      	ldr	r3, [pc, #200]	; (8003bd0 <xTaskIncrementTick+0x154>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d203      	bcs.n	8003b24 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003b1c:	4a2f      	ldr	r2, [pc, #188]	; (8003bdc <xTaskIncrementTick+0x160>)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b22:	e032      	b.n	8003b8a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	3304      	adds	r3, #4
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fe ff0b 	bl	8002944 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d004      	beq.n	8003b40 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	3318      	adds	r3, #24
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe ff02 	bl	8002944 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f003 fdc4 	bl	80076d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	4b23      	ldr	r3, [pc, #140]	; (8003be0 <xTaskIncrementTick+0x164>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	4a22      	ldr	r2, [pc, #136]	; (8003be0 <xTaskIncrementTick+0x164>)
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4a1f      	ldr	r2, [pc, #124]	; (8003be4 <xTaskIncrementTick+0x168>)
 8003b68:	441a      	add	r2, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4610      	mov	r0, r2
 8003b72:	f7fe fe8a 	bl	800288a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7a:	4b1b      	ldr	r3, [pc, #108]	; (8003be8 <xTaskIncrementTick+0x16c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d3b5      	bcc.n	8003af0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003b84:	2301      	movs	r3, #1
 8003b86:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b88:	e7b2      	b.n	8003af0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b8a:	4b17      	ldr	r3, [pc, #92]	; (8003be8 <xTaskIncrementTick+0x16c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b90:	4914      	ldr	r1, [pc, #80]	; (8003be4 <xTaskIncrementTick+0x168>)
 8003b92:	4613      	mov	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d901      	bls.n	8003ba6 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003ba6:	4b11      	ldr	r3, [pc, #68]	; (8003bec <xTaskIncrementTick+0x170>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d007      	beq.n	8003bbe <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	e004      	b.n	8003bbe <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003bb4:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <xTaskIncrementTick+0x174>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	4a0d      	ldr	r2, [pc, #52]	; (8003bf0 <xTaskIncrementTick+0x174>)
 8003bbc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003bbe:	697b      	ldr	r3, [r7, #20]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	2000020c 	.word	0x2000020c
 8003bcc:	200001e8 	.word	0x200001e8
 8003bd0:	2000019c 	.word	0x2000019c
 8003bd4:	200001a0 	.word	0x200001a0
 8003bd8:	200001fc 	.word	0x200001fc
 8003bdc:	20000204 	.word	0x20000204
 8003be0:	200001ec 	.word	0x200001ec
 8003be4:	20000110 	.word	0x20000110
 8003be8:	2000010c 	.word	0x2000010c
 8003bec:	200001f8 	.word	0x200001f8
 8003bf0:	200001f4 	.word	0x200001f4

08003bf4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bfa:	4b2d      	ldr	r3, [pc, #180]	; (8003cb0 <vTaskSwitchContext+0xbc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003c02:	4b2c      	ldr	r3, [pc, #176]	; (8003cb4 <vTaskSwitchContext+0xc0>)
 8003c04:	2201      	movs	r2, #1
 8003c06:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003c08:	e04d      	b.n	8003ca6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003c0a:	4b2a      	ldr	r3, [pc, #168]	; (8003cb4 <vTaskSwitchContext+0xc0>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c10:	4b29      	ldr	r3, [pc, #164]	; (8003cb8 <vTaskSwitchContext+0xc4>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	fab3 f383 	clz	r3, r3
 8003c1c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003c1e:	7afb      	ldrb	r3, [r7, #11]
 8003c20:	f1c3 031f 	rsb	r3, r3, #31
 8003c24:	617b      	str	r3, [r7, #20]
 8003c26:	4925      	ldr	r1, [pc, #148]	; (8003cbc <vTaskSwitchContext+0xc8>)
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3e:	f383 8811 	msr	BASEPRI, r3
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	607b      	str	r3, [r7, #4]
    }
 8003c4c:	bf00      	nop
 8003c4e:	e7fe      	b.n	8003c4e <vTaskSwitchContext+0x5a>
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4a18      	ldr	r2, [pc, #96]	; (8003cbc <vTaskSwitchContext+0xc8>)
 8003c5c:	4413      	add	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	605a      	str	r2, [r3, #4]
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	3308      	adds	r3, #8
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d104      	bne.n	8003c80 <vTaskSwitchContext+0x8c>
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	605a      	str	r2, [r3, #4]
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	4a0e      	ldr	r2, [pc, #56]	; (8003cc0 <vTaskSwitchContext+0xcc>)
 8003c88:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003c8a:	4b0d      	ldr	r3, [pc, #52]	; (8003cc0 <vTaskSwitchContext+0xcc>)
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	4b0d      	ldr	r3, [pc, #52]	; (8003cc4 <vTaskSwitchContext+0xd0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d102      	bne.n	8003c9c <vTaskSwitchContext+0xa8>
 8003c96:	f003 fc7b 	bl	8007590 <SEGGER_SYSVIEW_OnIdle>
}
 8003c9a:	e004      	b.n	8003ca6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003c9c:	4b08      	ldr	r3, [pc, #32]	; (8003cc0 <vTaskSwitchContext+0xcc>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f003 fcd3 	bl	800764c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003ca6:	bf00      	nop
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	2000020c 	.word	0x2000020c
 8003cb4:	200001f8 	.word	0x200001f8
 8003cb8:	200001ec 	.word	0x200001ec
 8003cbc:	20000110 	.word	0x20000110
 8003cc0:	2000010c 	.word	0x2000010c
 8003cc4:	20000208 	.word	0x20000208

08003cc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10a      	bne.n	8003cee <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cdc:	f383 8811 	msr	BASEPRI, r3
 8003ce0:	f3bf 8f6f 	isb	sy
 8003ce4:	f3bf 8f4f 	dsb	sy
 8003ce8:	60fb      	str	r3, [r7, #12]
    }
 8003cea:	bf00      	nop
 8003cec:	e7fe      	b.n	8003cec <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cee:	4b07      	ldr	r3, [pc, #28]	; (8003d0c <vTaskPlaceOnEventList+0x44>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3318      	adds	r3, #24
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fe fdeb 	bl	80028d2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	6838      	ldr	r0, [r7, #0]
 8003d00:	f000 fa74 	bl	80041ec <prvAddCurrentTaskToDelayedList>
}
 8003d04:	bf00      	nop
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	2000010c 	.word	0x2000010c

08003d10 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10a      	bne.n	8003d38 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d26:	f383 8811 	msr	BASEPRI, r3
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	617b      	str	r3, [r7, #20]
    }
 8003d34:	bf00      	nop
 8003d36:	e7fe      	b.n	8003d36 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d38:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <vTaskPlaceOnEventListRestricted+0x58>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3318      	adds	r3, #24
 8003d3e:	4619      	mov	r1, r3
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f7fe fda2 	bl	800288a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d50:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003d52:	2024      	movs	r0, #36	; 0x24
 8003d54:	f002 ff1c 	bl	8006b90 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	68b8      	ldr	r0, [r7, #8]
 8003d5c:	f000 fa46 	bl	80041ec <prvAddCurrentTaskToDelayedList>
    }
 8003d60:	bf00      	nop
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	2000010c 	.word	0x2000010c

08003d6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10a      	bne.n	8003d98 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	60fb      	str	r3, [r7, #12]
    }
 8003d94:	bf00      	nop
 8003d96:	e7fe      	b.n	8003d96 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	3318      	adds	r3, #24
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fe fdd1 	bl	8002944 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003da2:	4b1f      	ldr	r3, [pc, #124]	; (8003e20 <xTaskRemoveFromEventList+0xb4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d120      	bne.n	8003dec <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	3304      	adds	r3, #4
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe fdc8 	bl	8002944 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f003 fc8a 	bl	80076d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	4b17      	ldr	r3, [pc, #92]	; (8003e24 <xTaskRemoveFromEventList+0xb8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	4a16      	ldr	r2, [pc, #88]	; (8003e24 <xTaskRemoveFromEventList+0xb8>)
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4a13      	ldr	r2, [pc, #76]	; (8003e28 <xTaskRemoveFromEventList+0xbc>)
 8003ddc:	441a      	add	r2, r3
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	3304      	adds	r3, #4
 8003de2:	4619      	mov	r1, r3
 8003de4:	4610      	mov	r0, r2
 8003de6:	f7fe fd50 	bl	800288a <vListInsertEnd>
 8003dea:	e005      	b.n	8003df8 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	3318      	adds	r3, #24
 8003df0:	4619      	mov	r1, r3
 8003df2:	480e      	ldr	r0, [pc, #56]	; (8003e2c <xTaskRemoveFromEventList+0xc0>)
 8003df4:	f7fe fd49 	bl	800288a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfc:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <xTaskRemoveFromEventList+0xc4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d905      	bls.n	8003e12 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003e06:	2301      	movs	r3, #1
 8003e08:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003e0a:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <xTaskRemoveFromEventList+0xc8>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	e001      	b.n	8003e16 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003e16:	697b      	ldr	r3, [r7, #20]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	2000020c 	.word	0x2000020c
 8003e24:	200001ec 	.word	0x200001ec
 8003e28:	20000110 	.word	0x20000110
 8003e2c:	200001a4 	.word	0x200001a4
 8003e30:	2000010c 	.word	0x2000010c
 8003e34:	200001f8 	.word	0x200001f8

08003e38 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e40:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <vTaskInternalSetTimeOutState+0x24>)
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003e48:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <vTaskInternalSetTimeOutState+0x28>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	605a      	str	r2, [r3, #4]
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	200001fc 	.word	0x200001fc
 8003e60:	200001e8 	.word	0x200001e8

08003e64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10a      	bne.n	8003e8a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	613b      	str	r3, [r7, #16]
    }
 8003e86:	bf00      	nop
 8003e88:	e7fe      	b.n	8003e88 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10a      	bne.n	8003ea6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	60fb      	str	r3, [r7, #12]
    }
 8003ea2:	bf00      	nop
 8003ea4:	e7fe      	b.n	8003ea4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003ea6:	f000 fed5 	bl	8004c54 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003eaa:	4b1f      	ldr	r3, [pc, #124]	; (8003f28 <xTaskCheckForTimeOut+0xc4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec2:	d102      	bne.n	8003eca <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61fb      	str	r3, [r7, #28]
 8003ec8:	e026      	b.n	8003f18 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	4b17      	ldr	r3, [pc, #92]	; (8003f2c <xTaskCheckForTimeOut+0xc8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d00a      	beq.n	8003eec <xTaskCheckForTimeOut+0x88>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d305      	bcc.n	8003eec <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	e015      	b.n	8003f18 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d20b      	bcs.n	8003f0e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	1ad2      	subs	r2, r2, r3
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff ff98 	bl	8003e38 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	61fb      	str	r3, [r7, #28]
 8003f0c:	e004      	b.n	8003f18 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003f14:	2301      	movs	r3, #1
 8003f16:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003f18:	f000 fecc 	bl	8004cb4 <vPortExitCritical>

    return xReturn;
 8003f1c:	69fb      	ldr	r3, [r7, #28]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3720      	adds	r7, #32
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	200001e8 	.word	0x200001e8
 8003f2c:	200001fc 	.word	0x200001fc

08003f30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003f34:	4b03      	ldr	r3, [pc, #12]	; (8003f44 <vTaskMissedYield+0x14>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	601a      	str	r2, [r3, #0]
}
 8003f3a:	bf00      	nop
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	200001f8 	.word	0x200001f8

08003f48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003f50:	f000 f854 	bl	8003ffc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f54:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <prvIdleTask+0x2c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d907      	bls.n	8003f6c <prvIdleTask+0x24>
                {
                    taskYIELD();
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <prvIdleTask+0x30>)
 8003f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	f3bf 8f6f 	isb	sy
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 8003f6c:	f7fc fdb4 	bl	8000ad8 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8003f70:	e7ee      	b.n	8003f50 <prvIdleTask+0x8>
 8003f72:	bf00      	nop
 8003f74:	20000110 	.word	0x20000110
 8003f78:	e000ed04 	.word	0xe000ed04

08003f7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f82:	2300      	movs	r3, #0
 8003f84:	607b      	str	r3, [r7, #4]
 8003f86:	e00c      	b.n	8003fa2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4a12      	ldr	r2, [pc, #72]	; (8003fdc <prvInitialiseTaskLists+0x60>)
 8003f94:	4413      	add	r3, r2
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fe fc4a 	bl	8002830 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	607b      	str	r3, [r7, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d9ef      	bls.n	8003f88 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003fa8:	480d      	ldr	r0, [pc, #52]	; (8003fe0 <prvInitialiseTaskLists+0x64>)
 8003faa:	f7fe fc41 	bl	8002830 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003fae:	480d      	ldr	r0, [pc, #52]	; (8003fe4 <prvInitialiseTaskLists+0x68>)
 8003fb0:	f7fe fc3e 	bl	8002830 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003fb4:	480c      	ldr	r0, [pc, #48]	; (8003fe8 <prvInitialiseTaskLists+0x6c>)
 8003fb6:	f7fe fc3b 	bl	8002830 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003fba:	480c      	ldr	r0, [pc, #48]	; (8003fec <prvInitialiseTaskLists+0x70>)
 8003fbc:	f7fe fc38 	bl	8002830 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003fc0:	480b      	ldr	r0, [pc, #44]	; (8003ff0 <prvInitialiseTaskLists+0x74>)
 8003fc2:	f7fe fc35 	bl	8002830 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <prvInitialiseTaskLists+0x78>)
 8003fc8:	4a05      	ldr	r2, [pc, #20]	; (8003fe0 <prvInitialiseTaskLists+0x64>)
 8003fca:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fcc:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <prvInitialiseTaskLists+0x7c>)
 8003fce:	4a05      	ldr	r2, [pc, #20]	; (8003fe4 <prvInitialiseTaskLists+0x68>)
 8003fd0:	601a      	str	r2, [r3, #0]
}
 8003fd2:	bf00      	nop
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20000110 	.word	0x20000110
 8003fe0:	20000174 	.word	0x20000174
 8003fe4:	20000188 	.word	0x20000188
 8003fe8:	200001a4 	.word	0x200001a4
 8003fec:	200001b8 	.word	0x200001b8
 8003ff0:	200001d0 	.word	0x200001d0
 8003ff4:	2000019c 	.word	0x2000019c
 8003ff8:	200001a0 	.word	0x200001a0

08003ffc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004002:	e019      	b.n	8004038 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004004:	f000 fe26 	bl	8004c54 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004008:	4b10      	ldr	r3, [pc, #64]	; (800404c <prvCheckTasksWaitingTermination+0x50>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3304      	adds	r3, #4
 8004014:	4618      	mov	r0, r3
 8004016:	f7fe fc95 	bl	8002944 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800401a:	4b0d      	ldr	r3, [pc, #52]	; (8004050 <prvCheckTasksWaitingTermination+0x54>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3b01      	subs	r3, #1
 8004020:	4a0b      	ldr	r2, [pc, #44]	; (8004050 <prvCheckTasksWaitingTermination+0x54>)
 8004022:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004024:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <prvCheckTasksWaitingTermination+0x58>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3b01      	subs	r3, #1
 800402a:	4a0a      	ldr	r2, [pc, #40]	; (8004054 <prvCheckTasksWaitingTermination+0x58>)
 800402c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800402e:	f000 fe41 	bl	8004cb4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f810 	bl	8004058 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004038:	4b06      	ldr	r3, [pc, #24]	; (8004054 <prvCheckTasksWaitingTermination+0x58>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1e1      	bne.n	8004004 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004040:	bf00      	nop
 8004042:	bf00      	nop
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	200001b8 	.word	0x200001b8
 8004050:	200001e4 	.word	0x200001e4
 8004054:	200001cc 	.word	0x200001cc

08004058 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004064:	4618      	mov	r0, r3
 8004066:	f001 f801 	bl	800506c <vPortFree>
                vPortFree( pxTCB );
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fffe 	bl	800506c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004070:	bf00      	nop
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800407c:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <prvResetNextTaskUnblockTime+0x30>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d104      	bne.n	8004090 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004086:	4b09      	ldr	r3, [pc, #36]	; (80040ac <prvResetNextTaskUnblockTime+0x34>)
 8004088:	f04f 32ff 	mov.w	r2, #4294967295
 800408c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800408e:	e005      	b.n	800409c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004090:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <prvResetNextTaskUnblockTime+0x30>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a04      	ldr	r2, [pc, #16]	; (80040ac <prvResetNextTaskUnblockTime+0x34>)
 800409a:	6013      	str	r3, [r2, #0]
}
 800409c:	bf00      	nop
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	2000019c 	.word	0x2000019c
 80040ac:	20000204 	.word	0x20000204

080040b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80040b6:	4b0b      	ldr	r3, [pc, #44]	; (80040e4 <xTaskGetSchedulerState+0x34>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d102      	bne.n	80040c4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80040be:	2301      	movs	r3, #1
 80040c0:	607b      	str	r3, [r7, #4]
 80040c2:	e008      	b.n	80040d6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040c4:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <xTaskGetSchedulerState+0x38>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d102      	bne.n	80040d2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80040cc:	2302      	movs	r3, #2
 80040ce:	607b      	str	r3, [r7, #4]
 80040d0:	e001      	b.n	80040d6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80040d2:	2300      	movs	r3, #0
 80040d4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80040d6:	687b      	ldr	r3, [r7, #4]
    }
 80040d8:	4618      	mov	r0, r3
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	200001f0 	.word	0x200001f0
 80040e8:	2000020c 	.word	0x2000020c

080040ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d068      	beq.n	80041d4 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004102:	4b37      	ldr	r3, [pc, #220]	; (80041e0 <xTaskPriorityDisinherit+0xf4>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	429a      	cmp	r2, r3
 800410a:	d00a      	beq.n	8004122 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800410c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004110:	f383 8811 	msr	BASEPRI, r3
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	60fb      	str	r3, [r7, #12]
    }
 800411e:	bf00      	nop
 8004120:	e7fe      	b.n	8004120 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10a      	bne.n	8004140 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800412a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412e:	f383 8811 	msr	BASEPRI, r3
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	60bb      	str	r3, [r7, #8]
    }
 800413c:	bf00      	nop
 800413e:	e7fe      	b.n	800413e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004144:	1e5a      	subs	r2, r3, #1
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004152:	429a      	cmp	r2, r3
 8004154:	d03e      	beq.n	80041d4 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415a:	2b00      	cmp	r3, #0
 800415c:	d13a      	bne.n	80041d4 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	3304      	adds	r3, #4
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe fbee 	bl	8002944 <uxListRemove>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10a      	bne.n	8004184 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004172:	2201      	movs	r2, #1
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	43da      	mvns	r2, r3
 800417a:	4b1a      	ldr	r3, [pc, #104]	; (80041e4 <xTaskPriorityDisinherit+0xf8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4013      	ands	r3, r2
 8004180:	4a18      	ldr	r2, [pc, #96]	; (80041e4 <xTaskPriorityDisinherit+0xf8>)
 8004182:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4619      	mov	r1, r3
 8004188:	204a      	movs	r0, #74	; 0x4a
 800418a:	f002 fd1f 	bl	8006bcc <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419a:	f1c3 0205 	rsb	r2, r3, #5
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	2201      	movs	r2, #1
 80041a8:	409a      	lsls	r2, r3
 80041aa:	4b0e      	ldr	r3, [pc, #56]	; (80041e4 <xTaskPriorityDisinherit+0xf8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	4a0c      	ldr	r2, [pc, #48]	; (80041e4 <xTaskPriorityDisinherit+0xf8>)
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b8:	4613      	mov	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4413      	add	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4a09      	ldr	r2, [pc, #36]	; (80041e8 <xTaskPriorityDisinherit+0xfc>)
 80041c2:	441a      	add	r2, r3
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	3304      	adds	r3, #4
 80041c8:	4619      	mov	r1, r3
 80041ca:	4610      	mov	r0, r2
 80041cc:	f7fe fb5d 	bl	800288a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80041d0:	2301      	movs	r3, #1
 80041d2:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80041d4:	697b      	ldr	r3, [r7, #20]
    }
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	2000010c 	.word	0x2000010c
 80041e4:	200001ec 	.word	0x200001ec
 80041e8:	20000110 	.word	0x20000110

080041ec <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80041f6:	4b32      	ldr	r3, [pc, #200]	; (80042c0 <prvAddCurrentTaskToDelayedList+0xd4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041fc:	4b31      	ldr	r3, [pc, #196]	; (80042c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3304      	adds	r3, #4
 8004202:	4618      	mov	r0, r3
 8004204:	f7fe fb9e 	bl	8002944 <uxListRemove>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10b      	bne.n	8004226 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800420e:	4b2d      	ldr	r3, [pc, #180]	; (80042c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	2201      	movs	r2, #1
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	43da      	mvns	r2, r3
 800421c:	4b2a      	ldr	r3, [pc, #168]	; (80042c8 <prvAddCurrentTaskToDelayedList+0xdc>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4013      	ands	r3, r2
 8004222:	4a29      	ldr	r2, [pc, #164]	; (80042c8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004224:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422c:	d110      	bne.n	8004250 <prvAddCurrentTaskToDelayedList+0x64>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00d      	beq.n	8004250 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8004234:	4b23      	ldr	r3, [pc, #140]	; (80042c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	211b      	movs	r1, #27
 800423a:	4618      	mov	r0, r3
 800423c:	f003 fa8a 	bl	8007754 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004240:	4b20      	ldr	r3, [pc, #128]	; (80042c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3304      	adds	r3, #4
 8004246:	4619      	mov	r1, r3
 8004248:	4820      	ldr	r0, [pc, #128]	; (80042cc <prvAddCurrentTaskToDelayedList+0xe0>)
 800424a:	f7fe fb1e 	bl	800288a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800424e:	e032      	b.n	80042b6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4413      	add	r3, r2
 8004256:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004258:	4b1a      	ldr	r3, [pc, #104]	; (80042c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	429a      	cmp	r2, r3
 8004266:	d20f      	bcs.n	8004288 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004268:	4b16      	ldr	r3, [pc, #88]	; (80042c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2104      	movs	r1, #4
 800426e:	4618      	mov	r0, r3
 8004270:	f003 fa70 	bl	8007754 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004274:	4b16      	ldr	r3, [pc, #88]	; (80042d0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	4b12      	ldr	r3, [pc, #72]	; (80042c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3304      	adds	r3, #4
 800427e:	4619      	mov	r1, r3
 8004280:	4610      	mov	r0, r2
 8004282:	f7fe fb26 	bl	80028d2 <vListInsert>
}
 8004286:	e016      	b.n	80042b6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8004288:	4b0e      	ldr	r3, [pc, #56]	; (80042c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2104      	movs	r1, #4
 800428e:	4618      	mov	r0, r3
 8004290:	f003 fa60 	bl	8007754 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004294:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3304      	adds	r3, #4
 800429e:	4619      	mov	r1, r3
 80042a0:	4610      	mov	r0, r2
 80042a2:	f7fe fb16 	bl	80028d2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80042a6:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xec>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d202      	bcs.n	80042b6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80042b0:	4a09      	ldr	r2, [pc, #36]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xec>)
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	6013      	str	r3, [r2, #0]
}
 80042b6:	bf00      	nop
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	200001e8 	.word	0x200001e8
 80042c4:	2000010c 	.word	0x2000010c
 80042c8:	200001ec 	.word	0x200001ec
 80042cc:	200001d0 	.word	0x200001d0
 80042d0:	200001a0 	.word	0x200001a0
 80042d4:	2000019c 	.word	0x2000019c
 80042d8:	20000204 	.word	0x20000204

080042dc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80042e6:	f000 fad5 	bl	8004894 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80042ea:	4b11      	ldr	r3, [pc, #68]	; (8004330 <xTimerCreateTimerTask+0x54>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00b      	beq.n	800430a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80042f2:	4b10      	ldr	r3, [pc, #64]	; (8004334 <xTimerCreateTimerTask+0x58>)
 80042f4:	9301      	str	r3, [sp, #4]
 80042f6:	2302      	movs	r3, #2
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	2300      	movs	r3, #0
 80042fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004300:	490d      	ldr	r1, [pc, #52]	; (8004338 <xTimerCreateTimerTask+0x5c>)
 8004302:	480e      	ldr	r0, [pc, #56]	; (800433c <xTimerCreateTimerTask+0x60>)
 8004304:	f7ff f8a2 	bl	800344c <xTaskCreate>
 8004308:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10a      	bne.n	8004326 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	603b      	str	r3, [r7, #0]
    }
 8004322:	bf00      	nop
 8004324:	e7fe      	b.n	8004324 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004326:	687b      	ldr	r3, [r7, #4]
    }
 8004328:	4618      	mov	r0, r3
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	20000240 	.word	0x20000240
 8004334:	20000244 	.word	0x20000244
 8004338:	08007c48 	.word	0x08007c48
 800433c:	08004475 	.word	0x08004475

08004340 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004340:	b580      	push	{r7, lr}
 8004342:	b08a      	sub	sp, #40	; 0x28
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800434e:	2300      	movs	r3, #0
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10a      	bne.n	800436e <xTimerGenericCommand+0x2e>
        __asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	623b      	str	r3, [r7, #32]
    }
 800436a:	bf00      	nop
 800436c:	e7fe      	b.n	800436c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800436e:	4b1a      	ldr	r3, [pc, #104]	; (80043d8 <xTimerGenericCommand+0x98>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d02a      	beq.n	80043cc <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b05      	cmp	r3, #5
 8004386:	dc18      	bgt.n	80043ba <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004388:	f7ff fe92 	bl	80040b0 <xTaskGetSchedulerState>
 800438c:	4603      	mov	r3, r0
 800438e:	2b02      	cmp	r3, #2
 8004390:	d109      	bne.n	80043a6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004392:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <xTimerGenericCommand+0x98>)
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	f107 0114 	add.w	r1, r7, #20
 800439a:	2300      	movs	r3, #0
 800439c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800439e:	f7fe fbeb 	bl	8002b78 <xQueueGenericSend>
 80043a2:	6278      	str	r0, [r7, #36]	; 0x24
 80043a4:	e012      	b.n	80043cc <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80043a6:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <xTimerGenericCommand+0x98>)
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	f107 0114 	add.w	r1, r7, #20
 80043ae:	2300      	movs	r3, #0
 80043b0:	2200      	movs	r2, #0
 80043b2:	f7fe fbe1 	bl	8002b78 <xQueueGenericSend>
 80043b6:	6278      	str	r0, [r7, #36]	; 0x24
 80043b8:	e008      	b.n	80043cc <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80043ba:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <xTimerGenericCommand+0x98>)
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	f107 0114 	add.w	r1, r7, #20
 80043c2:	2300      	movs	r3, #0
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	f7fe fcfd 	bl	8002dc4 <xQueueGenericSendFromISR>
 80043ca:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80043ce:	4618      	mov	r0, r3
 80043d0:	3728      	adds	r7, #40	; 0x28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20000240 	.word	0x20000240

080043dc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af02      	add	r7, sp, #8
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043e6:	4b22      	ldr	r3, [pc, #136]	; (8004470 <prvProcessExpiredTimer+0x94>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	3304      	adds	r3, #4
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fe faa5 	bl	8002944 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	d022      	beq.n	800444e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	699a      	ldr	r2, [r3, #24]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	18d1      	adds	r1, r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	6978      	ldr	r0, [r7, #20]
 8004416:	f000 f8d1 	bl	80045bc <prvInsertTimerInActiveList>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d01f      	beq.n	8004460 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004420:	2300      	movs	r3, #0
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	2300      	movs	r3, #0
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	2100      	movs	r1, #0
 800442a:	6978      	ldr	r0, [r7, #20]
 800442c:	f7ff ff88 	bl	8004340 <xTimerGenericCommand>
 8004430:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d113      	bne.n	8004460 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	60fb      	str	r3, [r7, #12]
    }
 800444a:	bf00      	nop
 800444c:	e7fe      	b.n	800444c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004454:	f023 0301 	bic.w	r3, r3, #1
 8004458:	b2da      	uxtb	r2, r3
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	6978      	ldr	r0, [r7, #20]
 8004466:	4798      	blx	r3
    }
 8004468:	bf00      	nop
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	20000238 	.word	0x20000238

08004474 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800447c:	f107 0308 	add.w	r3, r7, #8
 8004480:	4618      	mov	r0, r3
 8004482:	f000 f857 	bl	8004534 <prvGetNextExpireTime>
 8004486:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4619      	mov	r1, r3
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 f803 	bl	8004498 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004492:	f000 f8d5 	bl	8004640 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004496:	e7f1      	b.n	800447c <prvTimerTask+0x8>

08004498 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80044a2:	f7ff fa1b 	bl	80038dc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044a6:	f107 0308 	add.w	r3, r7, #8
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 f866 	bl	800457c <prvSampleTimeNow>
 80044b0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d130      	bne.n	800451a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10a      	bne.n	80044d4 <prvProcessTimerOrBlockTask+0x3c>
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d806      	bhi.n	80044d4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80044c6:	f7ff fa17 	bl	80038f8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80044ca:	68f9      	ldr	r1, [r7, #12]
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff ff85 	bl	80043dc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80044d2:	e024      	b.n	800451e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d008      	beq.n	80044ec <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80044da:	4b13      	ldr	r3, [pc, #76]	; (8004528 <prvProcessTimerOrBlockTask+0x90>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <prvProcessTimerOrBlockTask+0x50>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <prvProcessTimerOrBlockTask+0x52>
 80044e8:	2300      	movs	r3, #0
 80044ea:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80044ec:	4b0f      	ldr	r3, [pc, #60]	; (800452c <prvProcessTimerOrBlockTask+0x94>)
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	4619      	mov	r1, r3
 80044fa:	f7fe ff73 	bl	80033e4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80044fe:	f7ff f9fb 	bl	80038f8 <xTaskResumeAll>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10a      	bne.n	800451e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004508:	4b09      	ldr	r3, [pc, #36]	; (8004530 <prvProcessTimerOrBlockTask+0x98>)
 800450a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	f3bf 8f6f 	isb	sy
    }
 8004518:	e001      	b.n	800451e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800451a:	f7ff f9ed 	bl	80038f8 <xTaskResumeAll>
    }
 800451e:	bf00      	nop
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	2000023c 	.word	0x2000023c
 800452c:	20000240 	.word	0x20000240
 8004530:	e000ed04 	.word	0xe000ed04

08004534 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800453c:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <prvGetNextExpireTime+0x44>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <prvGetNextExpireTime+0x16>
 8004546:	2201      	movs	r2, #1
 8004548:	e000      	b.n	800454c <prvGetNextExpireTime+0x18>
 800454a:	2200      	movs	r2, #0
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d105      	bne.n	8004564 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004558:	4b07      	ldr	r3, [pc, #28]	; (8004578 <prvGetNextExpireTime+0x44>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	e001      	b.n	8004568 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004568:	68fb      	ldr	r3, [r7, #12]
    }
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	20000238 	.word	0x20000238

0800457c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004584:	f7ff fa58 	bl	8003a38 <xTaskGetTickCount>
 8004588:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800458a:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <prvSampleTimeNow+0x3c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	429a      	cmp	r2, r3
 8004592:	d205      	bcs.n	80045a0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004594:	f000 f91a 	bl	80047cc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	e002      	b.n	80045a6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80045a6:	4a04      	ldr	r2, [pc, #16]	; (80045b8 <prvSampleTimeNow+0x3c>)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80045ac:	68fb      	ldr	r3, [r7, #12]
    }
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	20000248 	.word	0x20000248

080045bc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d812      	bhi.n	8004608 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	1ad2      	subs	r2, r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d302      	bcc.n	80045f6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80045f0:	2301      	movs	r3, #1
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	e01b      	b.n	800462e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80045f6:	4b10      	ldr	r3, [pc, #64]	; (8004638 <prvInsertTimerInActiveList+0x7c>)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3304      	adds	r3, #4
 80045fe:	4619      	mov	r1, r3
 8004600:	4610      	mov	r0, r2
 8004602:	f7fe f966 	bl	80028d2 <vListInsert>
 8004606:	e012      	b.n	800462e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d206      	bcs.n	800461e <prvInsertTimerInActiveList+0x62>
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d302      	bcc.n	800461e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004618:	2301      	movs	r3, #1
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	e007      	b.n	800462e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800461e:	4b07      	ldr	r3, [pc, #28]	; (800463c <prvInsertTimerInActiveList+0x80>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3304      	adds	r3, #4
 8004626:	4619      	mov	r1, r3
 8004628:	4610      	mov	r0, r2
 800462a:	f7fe f952 	bl	80028d2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800462e:	697b      	ldr	r3, [r7, #20]
    }
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	2000023c 	.word	0x2000023c
 800463c:	20000238 	.word	0x20000238

08004640 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004640:	b580      	push	{r7, lr}
 8004642:	b08c      	sub	sp, #48	; 0x30
 8004644:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004646:	e0ae      	b.n	80047a6 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	f2c0 80ab 	blt.w	80047a6 <prvProcessReceivedCommands+0x166>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d004      	beq.n	8004666 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	3304      	adds	r3, #4
 8004660:	4618      	mov	r0, r3
 8004662:	f7fe f96f 	bl	8002944 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004666:	1d3b      	adds	r3, r7, #4
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff ff87 	bl	800457c <prvSampleTimeNow>
 800466e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b09      	cmp	r3, #9
 8004674:	f200 8096 	bhi.w	80047a4 <prvProcessReceivedCommands+0x164>
 8004678:	a201      	add	r2, pc, #4	; (adr r2, 8004680 <prvProcessReceivedCommands+0x40>)
 800467a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467e:	bf00      	nop
 8004680:	080046a9 	.word	0x080046a9
 8004684:	080046a9 	.word	0x080046a9
 8004688:	080046a9 	.word	0x080046a9
 800468c:	0800471d 	.word	0x0800471d
 8004690:	08004731 	.word	0x08004731
 8004694:	0800477b 	.word	0x0800477b
 8004698:	080046a9 	.word	0x080046a9
 800469c:	080046a9 	.word	0x080046a9
 80046a0:	0800471d 	.word	0x0800471d
 80046a4:	08004731 	.word	0x08004731
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046ae:	f043 0301 	orr.w	r3, r3, #1
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	18d1      	adds	r1, r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a3a      	ldr	r2, [r7, #32]
 80046c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046c8:	f7ff ff78 	bl	80045bc <prvInsertTimerInActiveList>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d069      	beq.n	80047a6 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046d8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d05e      	beq.n	80047a6 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	441a      	add	r2, r3
 80046f0:	2300      	movs	r3, #0
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	2300      	movs	r3, #0
 80046f6:	2100      	movs	r1, #0
 80046f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046fa:	f7ff fe21 	bl	8004340 <xTimerGenericCommand>
 80046fe:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d14f      	bne.n	80047a6 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	61bb      	str	r3, [r7, #24]
    }
 8004718:	bf00      	nop
 800471a:	e7fe      	b.n	800471a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004722:	f023 0301 	bic.w	r3, r3, #1
 8004726:	b2da      	uxtb	r2, r3
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800472e:	e03a      	b.n	80047a6 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	b2da      	uxtb	r2, r3
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10a      	bne.n	8004766 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	617b      	str	r3, [r7, #20]
    }
 8004762:	bf00      	nop
 8004764:	e7fe      	b.n	8004764 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	18d1      	adds	r1, r2, r3
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	6a3a      	ldr	r2, [r7, #32]
 8004772:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004774:	f7ff ff22 	bl	80045bc <prvInsertTimerInActiveList>
                        break;
 8004778:	e015      	b.n	80047a6 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d103      	bne.n	8004790 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004788:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800478a:	f000 fc6f 	bl	800506c <vPortFree>
 800478e:	e00a      	b.n	80047a6 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004796:	f023 0301 	bic.w	r3, r3, #1
 800479a:	b2da      	uxtb	r2, r3
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80047a2:	e000      	b.n	80047a6 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
 80047a4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047a6:	4b08      	ldr	r3, [pc, #32]	; (80047c8 <prvProcessReceivedCommands+0x188>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f107 0108 	add.w	r1, r7, #8
 80047ae:	2200      	movs	r2, #0
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fe fbc5 	bl	8002f40 <xQueueReceive>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f47f af45 	bne.w	8004648 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80047be:	bf00      	nop
 80047c0:	bf00      	nop
 80047c2:	3728      	adds	r7, #40	; 0x28
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	20000240 	.word	0x20000240

080047cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b088      	sub	sp, #32
 80047d0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047d2:	e048      	b.n	8004866 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047d4:	4b2d      	ldr	r3, [pc, #180]	; (800488c <prvSwitchTimerLists+0xc0>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047de:	4b2b      	ldr	r3, [pc, #172]	; (800488c <prvSwitchTimerLists+0xc0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	3304      	adds	r3, #4
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7fe f8a9 	bl	8002944 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d02e      	beq.n	8004866 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	4413      	add	r3, r2
 8004810:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	429a      	cmp	r2, r3
 8004818:	d90e      	bls.n	8004838 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004826:	4b19      	ldr	r3, [pc, #100]	; (800488c <prvSwitchTimerLists+0xc0>)
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3304      	adds	r3, #4
 800482e:	4619      	mov	r1, r3
 8004830:	4610      	mov	r0, r2
 8004832:	f7fe f84e 	bl	80028d2 <vListInsert>
 8004836:	e016      	b.n	8004866 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004838:	2300      	movs	r3, #0
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	2300      	movs	r3, #0
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	2100      	movs	r1, #0
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f7ff fd7c 	bl	8004340 <xTimerGenericCommand>
 8004848:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10a      	bne.n	8004866 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	603b      	str	r3, [r7, #0]
    }
 8004862:	bf00      	nop
 8004864:	e7fe      	b.n	8004864 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004866:	4b09      	ldr	r3, [pc, #36]	; (800488c <prvSwitchTimerLists+0xc0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1b1      	bne.n	80047d4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004870:	4b06      	ldr	r3, [pc, #24]	; (800488c <prvSwitchTimerLists+0xc0>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004876:	4b06      	ldr	r3, [pc, #24]	; (8004890 <prvSwitchTimerLists+0xc4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a04      	ldr	r2, [pc, #16]	; (800488c <prvSwitchTimerLists+0xc0>)
 800487c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800487e:	4a04      	ldr	r2, [pc, #16]	; (8004890 <prvSwitchTimerLists+0xc4>)
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	6013      	str	r3, [r2, #0]
    }
 8004884:	bf00      	nop
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	20000238 	.word	0x20000238
 8004890:	2000023c 	.word	0x2000023c

08004894 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004898:	f000 f9dc 	bl	8004c54 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800489c:	4b12      	ldr	r3, [pc, #72]	; (80048e8 <prvCheckForValidListAndQueue+0x54>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d11d      	bne.n	80048e0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80048a4:	4811      	ldr	r0, [pc, #68]	; (80048ec <prvCheckForValidListAndQueue+0x58>)
 80048a6:	f7fd ffc3 	bl	8002830 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80048aa:	4811      	ldr	r0, [pc, #68]	; (80048f0 <prvCheckForValidListAndQueue+0x5c>)
 80048ac:	f7fd ffc0 	bl	8002830 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80048b0:	4b10      	ldr	r3, [pc, #64]	; (80048f4 <prvCheckForValidListAndQueue+0x60>)
 80048b2:	4a0e      	ldr	r2, [pc, #56]	; (80048ec <prvCheckForValidListAndQueue+0x58>)
 80048b4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80048b6:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <prvCheckForValidListAndQueue+0x64>)
 80048b8:	4a0d      	ldr	r2, [pc, #52]	; (80048f0 <prvCheckForValidListAndQueue+0x5c>)
 80048ba:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80048bc:	2200      	movs	r2, #0
 80048be:	210c      	movs	r1, #12
 80048c0:	200a      	movs	r0, #10
 80048c2:	f7fe f8d1 	bl	8002a68 <xQueueGenericCreate>
 80048c6:	4603      	mov	r3, r0
 80048c8:	4a07      	ldr	r2, [pc, #28]	; (80048e8 <prvCheckForValidListAndQueue+0x54>)
 80048ca:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80048cc:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <prvCheckForValidListAndQueue+0x54>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d005      	beq.n	80048e0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80048d4:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <prvCheckForValidListAndQueue+0x54>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4908      	ldr	r1, [pc, #32]	; (80048fc <prvCheckForValidListAndQueue+0x68>)
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fe fd50 	bl	8003380 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80048e0:	f000 f9e8 	bl	8004cb4 <vPortExitCritical>
    }
 80048e4:	bf00      	nop
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	20000240 	.word	0x20000240
 80048ec:	20000210 	.word	0x20000210
 80048f0:	20000224 	.word	0x20000224
 80048f4:	20000238 	.word	0x20000238
 80048f8:	2000023c 	.word	0x2000023c
 80048fc:	08007c50 	.word	0x08007c50

08004900 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	3b04      	subs	r3, #4
 8004910:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004918:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	3b04      	subs	r3, #4
 800491e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f023 0201 	bic.w	r2, r3, #1
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3b04      	subs	r3, #4
 800492e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004930:	4a0c      	ldr	r2, [pc, #48]	; (8004964 <pxPortInitialiseStack+0x64>)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	3b14      	subs	r3, #20
 800493a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	3b04      	subs	r3, #4
 8004946:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f06f 0202 	mvn.w	r2, #2
 800494e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3b20      	subs	r3, #32
 8004954:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004956:	68fb      	ldr	r3, [r7, #12]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	08004969 	.word	0x08004969

08004968 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800496e:	2300      	movs	r3, #0
 8004970:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004972:	4b12      	ldr	r3, [pc, #72]	; (80049bc <prvTaskExitError+0x54>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497a:	d00a      	beq.n	8004992 <prvTaskExitError+0x2a>
        __asm volatile
 800497c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004980:	f383 8811 	msr	BASEPRI, r3
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	60fb      	str	r3, [r7, #12]
    }
 800498e:	bf00      	nop
 8004990:	e7fe      	b.n	8004990 <prvTaskExitError+0x28>
        __asm volatile
 8004992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004996:	f383 8811 	msr	BASEPRI, r3
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	60bb      	str	r3, [r7, #8]
    }
 80049a4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80049a6:	bf00      	nop
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0fc      	beq.n	80049a8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80049ae:	bf00      	nop
 80049b0:	bf00      	nop
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	20000010 	.word	0x20000010

080049c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80049c0:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <pxCurrentTCBConst2>)
 80049c2:	6819      	ldr	r1, [r3, #0]
 80049c4:	6808      	ldr	r0, [r1, #0]
 80049c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ca:	f380 8809 	msr	PSP, r0
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f04f 0000 	mov.w	r0, #0
 80049d6:	f380 8811 	msr	BASEPRI, r0
 80049da:	4770      	bx	lr
 80049dc:	f3af 8000 	nop.w

080049e0 <pxCurrentTCBConst2>:
 80049e0:	2000010c 	.word	0x2000010c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80049e4:	bf00      	nop
 80049e6:	bf00      	nop

080049e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80049e8:	4808      	ldr	r0, [pc, #32]	; (8004a0c <prvPortStartFirstTask+0x24>)
 80049ea:	6800      	ldr	r0, [r0, #0]
 80049ec:	6800      	ldr	r0, [r0, #0]
 80049ee:	f380 8808 	msr	MSP, r0
 80049f2:	f04f 0000 	mov.w	r0, #0
 80049f6:	f380 8814 	msr	CONTROL, r0
 80049fa:	b662      	cpsie	i
 80049fc:	b661      	cpsie	f
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	df00      	svc	0
 8004a08:	bf00      	nop
 8004a0a:	0000      	.short	0x0000
 8004a0c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004a10:	bf00      	nop
 8004a12:	bf00      	nop

08004a14 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a1a:	4b46      	ldr	r3, [pc, #280]	; (8004b34 <xPortStartScheduler+0x120>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a46      	ldr	r2, [pc, #280]	; (8004b38 <xPortStartScheduler+0x124>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d10a      	bne.n	8004a3a <xPortStartScheduler+0x26>
        __asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	613b      	str	r3, [r7, #16]
    }
 8004a36:	bf00      	nop
 8004a38:	e7fe      	b.n	8004a38 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a3a:	4b3e      	ldr	r3, [pc, #248]	; (8004b34 <xPortStartScheduler+0x120>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a3f      	ldr	r2, [pc, #252]	; (8004b3c <xPortStartScheduler+0x128>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d10a      	bne.n	8004a5a <xPortStartScheduler+0x46>
        __asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	60fb      	str	r3, [r7, #12]
    }
 8004a56:	bf00      	nop
 8004a58:	e7fe      	b.n	8004a58 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a5a:	4b39      	ldr	r3, [pc, #228]	; (8004b40 <xPortStartScheduler+0x12c>)
 8004a5c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	22ff      	movs	r2, #255	; 0xff
 8004a6a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	4b31      	ldr	r3, [pc, #196]	; (8004b44 <xPortStartScheduler+0x130>)
 8004a80:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a82:	4b31      	ldr	r3, [pc, #196]	; (8004b48 <xPortStartScheduler+0x134>)
 8004a84:	2207      	movs	r2, #7
 8004a86:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a88:	e009      	b.n	8004a9e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004a8a:	4b2f      	ldr	r3, [pc, #188]	; (8004b48 <xPortStartScheduler+0x134>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	4a2d      	ldr	r2, [pc, #180]	; (8004b48 <xPortStartScheduler+0x134>)
 8004a92:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a94:	78fb      	ldrb	r3, [r7, #3]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a9e:	78fb      	ldrb	r3, [r7, #3]
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa6:	2b80      	cmp	r3, #128	; 0x80
 8004aa8:	d0ef      	beq.n	8004a8a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004aaa:	4b27      	ldr	r3, [pc, #156]	; (8004b48 <xPortStartScheduler+0x134>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f1c3 0307 	rsb	r3, r3, #7
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d00a      	beq.n	8004acc <xPortStartScheduler+0xb8>
        __asm volatile
 8004ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	60bb      	str	r3, [r7, #8]
    }
 8004ac8:	bf00      	nop
 8004aca:	e7fe      	b.n	8004aca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004acc:	4b1e      	ldr	r3, [pc, #120]	; (8004b48 <xPortStartScheduler+0x134>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	4a1d      	ldr	r2, [pc, #116]	; (8004b48 <xPortStartScheduler+0x134>)
 8004ad4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ad6:	4b1c      	ldr	r3, [pc, #112]	; (8004b48 <xPortStartScheduler+0x134>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ade:	4a1a      	ldr	r2, [pc, #104]	; (8004b48 <xPortStartScheduler+0x134>)
 8004ae0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004aea:	4b18      	ldr	r3, [pc, #96]	; (8004b4c <xPortStartScheduler+0x138>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a17      	ldr	r2, [pc, #92]	; (8004b4c <xPortStartScheduler+0x138>)
 8004af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004af4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004af6:	4b15      	ldr	r3, [pc, #84]	; (8004b4c <xPortStartScheduler+0x138>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a14      	ldr	r2, [pc, #80]	; (8004b4c <xPortStartScheduler+0x138>)
 8004afc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b00:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004b02:	f000 f963 	bl	8004dcc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004b06:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <xPortStartScheduler+0x13c>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004b0c:	f000 f982 	bl	8004e14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b10:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <xPortStartScheduler+0x140>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a0f      	ldr	r2, [pc, #60]	; (8004b54 <xPortStartScheduler+0x140>)
 8004b16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b1a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004b1c:	f7ff ff64 	bl	80049e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004b20:	f7ff f868 	bl	8003bf4 <vTaskSwitchContext>
    prvTaskExitError();
 8004b24:	f7ff ff20 	bl	8004968 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	e000ed00 	.word	0xe000ed00
 8004b38:	410fc271 	.word	0x410fc271
 8004b3c:	410fc270 	.word	0x410fc270
 8004b40:	e000e400 	.word	0xe000e400
 8004b44:	2000024c 	.word	0x2000024c
 8004b48:	20000250 	.word	0x20000250
 8004b4c:	e000ed20 	.word	0xe000ed20
 8004b50:	20000010 	.word	0x20000010
 8004b54:	e000ef34 	.word	0xe000ef34

08004b58 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b5e:	4b37      	ldr	r3, [pc, #220]	; (8004c3c <vInitPrioGroupValue+0xe4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a37      	ldr	r2, [pc, #220]	; (8004c40 <vInitPrioGroupValue+0xe8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d10a      	bne.n	8004b7e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	613b      	str	r3, [r7, #16]
    }
 8004b7a:	bf00      	nop
 8004b7c:	e7fe      	b.n	8004b7c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b7e:	4b2f      	ldr	r3, [pc, #188]	; (8004c3c <vInitPrioGroupValue+0xe4>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a30      	ldr	r2, [pc, #192]	; (8004c44 <vInitPrioGroupValue+0xec>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d10a      	bne.n	8004b9e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	60fb      	str	r3, [r7, #12]
    }
 8004b9a:	bf00      	nop
 8004b9c:	e7fe      	b.n	8004b9c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b9e:	4b2a      	ldr	r3, [pc, #168]	; (8004c48 <vInitPrioGroupValue+0xf0>)
 8004ba0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	22ff      	movs	r2, #255	; 0xff
 8004bae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	4b22      	ldr	r3, [pc, #136]	; (8004c4c <vInitPrioGroupValue+0xf4>)
 8004bc4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004bc6:	4b22      	ldr	r3, [pc, #136]	; (8004c50 <vInitPrioGroupValue+0xf8>)
 8004bc8:	2207      	movs	r2, #7
 8004bca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bcc:	e009      	b.n	8004be2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004bce:	4b20      	ldr	r3, [pc, #128]	; (8004c50 <vInitPrioGroupValue+0xf8>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	4a1e      	ldr	r2, [pc, #120]	; (8004c50 <vInitPrioGroupValue+0xf8>)
 8004bd6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004be2:	78fb      	ldrb	r3, [r7, #3]
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bea:	2b80      	cmp	r3, #128	; 0x80
 8004bec:	d0ef      	beq.n	8004bce <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004bee:	4b18      	ldr	r3, [pc, #96]	; (8004c50 <vInitPrioGroupValue+0xf8>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f1c3 0307 	rsb	r3, r3, #7
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d00a      	beq.n	8004c10 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	60bb      	str	r3, [r7, #8]
    }
 8004c0c:	bf00      	nop
 8004c0e:	e7fe      	b.n	8004c0e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c10:	4b0f      	ldr	r3, [pc, #60]	; (8004c50 <vInitPrioGroupValue+0xf8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	021b      	lsls	r3, r3, #8
 8004c16:	4a0e      	ldr	r2, [pc, #56]	; (8004c50 <vInitPrioGroupValue+0xf8>)
 8004c18:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c1a:	4b0d      	ldr	r3, [pc, #52]	; (8004c50 <vInitPrioGroupValue+0xf8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c22:	4a0b      	ldr	r2, [pc, #44]	; (8004c50 <vInitPrioGroupValue+0xf8>)
 8004c24:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004c2e:	bf00      	nop
 8004c30:	371c      	adds	r7, #28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	e000ed00 	.word	0xe000ed00
 8004c40:	410fc271 	.word	0x410fc271
 8004c44:	410fc270 	.word	0x410fc270
 8004c48:	e000e400 	.word	0xe000e400
 8004c4c:	2000024c 	.word	0x2000024c
 8004c50:	20000250 	.word	0x20000250

08004c54 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
        __asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	607b      	str	r3, [r7, #4]
    }
 8004c6c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004c6e:	4b0f      	ldr	r3, [pc, #60]	; (8004cac <vPortEnterCritical+0x58>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3301      	adds	r3, #1
 8004c74:	4a0d      	ldr	r2, [pc, #52]	; (8004cac <vPortEnterCritical+0x58>)
 8004c76:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004c78:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <vPortEnterCritical+0x58>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d10f      	bne.n	8004ca0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <vPortEnterCritical+0x5c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <vPortEnterCritical+0x4c>
        __asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	603b      	str	r3, [r7, #0]
    }
 8004c9c:	bf00      	nop
 8004c9e:	e7fe      	b.n	8004c9e <vPortEnterCritical+0x4a>
    }
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	20000010 	.word	0x20000010
 8004cb0:	e000ed04 	.word	0xe000ed04

08004cb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004cba:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <vPortExitCritical+0x50>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10a      	bne.n	8004cd8 <vPortExitCritical+0x24>
        __asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	607b      	str	r3, [r7, #4]
    }
 8004cd4:	bf00      	nop
 8004cd6:	e7fe      	b.n	8004cd6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <vPortExitCritical+0x50>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	4a09      	ldr	r2, [pc, #36]	; (8004d04 <vPortExitCritical+0x50>)
 8004ce0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004ce2:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <vPortExitCritical+0x50>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d105      	bne.n	8004cf6 <vPortExitCritical+0x42>
 8004cea:	2300      	movs	r3, #0
 8004cec:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	f383 8811 	msr	BASEPRI, r3
    }
 8004cf4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	20000010 	.word	0x20000010
	...

08004d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004d10:	f3ef 8009 	mrs	r0, PSP
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	4b15      	ldr	r3, [pc, #84]	; (8004d70 <pxCurrentTCBConst>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	f01e 0f10 	tst.w	lr, #16
 8004d20:	bf08      	it	eq
 8004d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2a:	6010      	str	r0, [r2, #0]
 8004d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d34:	f380 8811 	msr	BASEPRI, r0
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f7fe ff58 	bl	8003bf4 <vTaskSwitchContext>
 8004d44:	f04f 0000 	mov.w	r0, #0
 8004d48:	f380 8811 	msr	BASEPRI, r0
 8004d4c:	bc09      	pop	{r0, r3}
 8004d4e:	6819      	ldr	r1, [r3, #0]
 8004d50:	6808      	ldr	r0, [r1, #0]
 8004d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d56:	f01e 0f10 	tst.w	lr, #16
 8004d5a:	bf08      	it	eq
 8004d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d60:	f380 8809 	msr	PSP, r0
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	f3af 8000 	nop.w

08004d70 <pxCurrentTCBConst>:
 8004d70:	2000010c 	.word	0x2000010c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop

08004d78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
        __asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	607b      	str	r3, [r7, #4]
    }
 8004d90:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004d92:	f002 fb83 	bl	800749c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004d96:	f7fe fe71 	bl	8003a7c <xTaskIncrementTick>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d006      	beq.n	8004dae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004da0:	f002 fbda 	bl	8007558 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004da4:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <SysTick_Handler+0x50>)
 8004da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	e001      	b.n	8004db2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004dae:	f002 fbb7 	bl	8007520 <SEGGER_SYSVIEW_RecordExitISR>
 8004db2:	2300      	movs	r3, #0
 8004db4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	f383 8811 	msr	BASEPRI, r3
    }
 8004dbc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004dbe:	bf00      	nop
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	e000ed04 	.word	0xe000ed04

08004dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <vPortSetupTimerInterrupt+0x34>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004dd6:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <vPortSetupTimerInterrupt+0x38>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ddc:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <vPortSetupTimerInterrupt+0x3c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a0a      	ldr	r2, [pc, #40]	; (8004e0c <vPortSetupTimerInterrupt+0x40>)
 8004de2:	fba2 2303 	umull	r2, r3, r2, r3
 8004de6:	099b      	lsrs	r3, r3, #6
 8004de8:	4a09      	ldr	r2, [pc, #36]	; (8004e10 <vPortSetupTimerInterrupt+0x44>)
 8004dea:	3b01      	subs	r3, #1
 8004dec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004dee:	4b04      	ldr	r3, [pc, #16]	; (8004e00 <vPortSetupTimerInterrupt+0x34>)
 8004df0:	2207      	movs	r2, #7
 8004df2:	601a      	str	r2, [r3, #0]
}
 8004df4:	bf00      	nop
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	e000e010 	.word	0xe000e010
 8004e04:	e000e018 	.word	0xe000e018
 8004e08:	20000000 	.word	0x20000000
 8004e0c:	10624dd3 	.word	0x10624dd3
 8004e10:	e000e014 	.word	0xe000e014

08004e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004e14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e24 <vPortEnableVFP+0x10>
 8004e18:	6801      	ldr	r1, [r0, #0]
 8004e1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e1e:	6001      	str	r1, [r0, #0]
 8004e20:	4770      	bx	lr
 8004e22:	0000      	.short	0x0000
 8004e24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004e28:	bf00      	nop
 8004e2a:	bf00      	nop

08004e2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004e32:	f3ef 8305 	mrs	r3, IPSR
 8004e36:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b0f      	cmp	r3, #15
 8004e3c:	d914      	bls.n	8004e68 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e3e:	4a17      	ldr	r2, [pc, #92]	; (8004e9c <vPortValidateInterruptPriority+0x70>)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4413      	add	r3, r2
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e48:	4b15      	ldr	r3, [pc, #84]	; (8004ea0 <vPortValidateInterruptPriority+0x74>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	7afa      	ldrb	r2, [r7, #11]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d20a      	bcs.n	8004e68 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	607b      	str	r3, [r7, #4]
    }
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e68:	4b0e      	ldr	r3, [pc, #56]	; (8004ea4 <vPortValidateInterruptPriority+0x78>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e70:	4b0d      	ldr	r3, [pc, #52]	; (8004ea8 <vPortValidateInterruptPriority+0x7c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d90a      	bls.n	8004e8e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7c:	f383 8811 	msr	BASEPRI, r3
 8004e80:	f3bf 8f6f 	isb	sy
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	603b      	str	r3, [r7, #0]
    }
 8004e8a:	bf00      	nop
 8004e8c:	e7fe      	b.n	8004e8c <vPortValidateInterruptPriority+0x60>
    }
 8004e8e:	bf00      	nop
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	e000e3f0 	.word	0xe000e3f0
 8004ea0:	2000024c 	.word	0x2000024c
 8004ea4:	e000ed0c 	.word	0xe000ed0c
 8004ea8:	20000250 	.word	0x20000250

08004eac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08a      	sub	sp, #40	; 0x28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004eb8:	f7fe fd10 	bl	80038dc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004ebc:	4b65      	ldr	r3, [pc, #404]	; (8005054 <pvPortMalloc+0x1a8>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004ec4:	f000 f934 	bl	8005130 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ec8:	4b63      	ldr	r3, [pc, #396]	; (8005058 <pvPortMalloc+0x1ac>)
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f040 80a7 	bne.w	8005024 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d02d      	beq.n	8004f38 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004edc:	2208      	movs	r2, #8
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d227      	bcs.n	8004f38 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004ee8:	2208      	movs	r2, #8
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4413      	add	r3, r2
 8004eee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d021      	beq.n	8004f3e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f023 0307 	bic.w	r3, r3, #7
 8004f00:	3308      	adds	r3, #8
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d214      	bcs.n	8004f32 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f023 0307 	bic.w	r3, r3, #7
 8004f0e:	3308      	adds	r3, #8
 8004f10:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d010      	beq.n	8004f3e <pvPortMalloc+0x92>
        __asm volatile
 8004f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f20:	f383 8811 	msr	BASEPRI, r3
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	617b      	str	r3, [r7, #20]
    }
 8004f2e:	bf00      	nop
 8004f30:	e7fe      	b.n	8004f30 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004f32:	2300      	movs	r3, #0
 8004f34:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f36:	e002      	b.n	8004f3e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	607b      	str	r3, [r7, #4]
 8004f3c:	e000      	b.n	8004f40 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f3e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d06e      	beq.n	8005024 <pvPortMalloc+0x178>
 8004f46:	4b45      	ldr	r3, [pc, #276]	; (800505c <pvPortMalloc+0x1b0>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d869      	bhi.n	8005024 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004f50:	4b43      	ldr	r3, [pc, #268]	; (8005060 <pvPortMalloc+0x1b4>)
 8004f52:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004f54:	4b42      	ldr	r3, [pc, #264]	; (8005060 <pvPortMalloc+0x1b4>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f5a:	e004      	b.n	8004f66 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d903      	bls.n	8004f78 <pvPortMalloc+0xcc>
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1f1      	bne.n	8004f5c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004f78:	4b36      	ldr	r3, [pc, #216]	; (8005054 <pvPortMalloc+0x1a8>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d050      	beq.n	8005024 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2208      	movs	r2, #8
 8004f88:	4413      	add	r3, r2
 8004f8a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	1ad2      	subs	r2, r2, r3
 8004f9c:	2308      	movs	r3, #8
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d91f      	bls.n	8004fe4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4413      	add	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	f003 0307 	and.w	r3, r3, #7
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <pvPortMalloc+0x120>
        __asm volatile
 8004fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	613b      	str	r3, [r7, #16]
    }
 8004fc8:	bf00      	nop
 8004fca:	e7fe      	b.n	8004fca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	1ad2      	subs	r2, r2, r3
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004fde:	69b8      	ldr	r0, [r7, #24]
 8004fe0:	f000 f908 	bl	80051f4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004fe4:	4b1d      	ldr	r3, [pc, #116]	; (800505c <pvPortMalloc+0x1b0>)
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	4a1b      	ldr	r2, [pc, #108]	; (800505c <pvPortMalloc+0x1b0>)
 8004ff0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ff2:	4b1a      	ldr	r3, [pc, #104]	; (800505c <pvPortMalloc+0x1b0>)
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	4b1b      	ldr	r3, [pc, #108]	; (8005064 <pvPortMalloc+0x1b8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d203      	bcs.n	8005006 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ffe:	4b17      	ldr	r3, [pc, #92]	; (800505c <pvPortMalloc+0x1b0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a18      	ldr	r2, [pc, #96]	; (8005064 <pvPortMalloc+0x1b8>)
 8005004:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	4b13      	ldr	r3, [pc, #76]	; (8005058 <pvPortMalloc+0x1ac>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	431a      	orrs	r2, r3
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800501a:	4b13      	ldr	r3, [pc, #76]	; (8005068 <pvPortMalloc+0x1bc>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3301      	adds	r3, #1
 8005020:	4a11      	ldr	r2, [pc, #68]	; (8005068 <pvPortMalloc+0x1bc>)
 8005022:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005024:	f7fe fc68 	bl	80038f8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <pvPortMalloc+0x19c>
        __asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	60fb      	str	r3, [r7, #12]
    }
 8005044:	bf00      	nop
 8005046:	e7fe      	b.n	8005046 <pvPortMalloc+0x19a>
    return pvReturn;
 8005048:	69fb      	ldr	r3, [r7, #28]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3728      	adds	r7, #40	; 0x28
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20012e5c 	.word	0x20012e5c
 8005058:	20012e70 	.word	0x20012e70
 800505c:	20012e60 	.word	0x20012e60
 8005060:	20012e54 	.word	0x20012e54
 8005064:	20012e64 	.word	0x20012e64
 8005068:	20012e68 	.word	0x20012e68

0800506c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d04d      	beq.n	800511a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800507e:	2308      	movs	r3, #8
 8005080:	425b      	negs	r3, r3
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4413      	add	r3, r2
 8005086:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	4b24      	ldr	r3, [pc, #144]	; (8005124 <vPortFree+0xb8>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4013      	ands	r3, r2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10a      	bne.n	80050b0 <vPortFree+0x44>
        __asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	60fb      	str	r3, [r7, #12]
    }
 80050ac:	bf00      	nop
 80050ae:	e7fe      	b.n	80050ae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00a      	beq.n	80050ce <vPortFree+0x62>
        __asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	60bb      	str	r3, [r7, #8]
    }
 80050ca:	bf00      	nop
 80050cc:	e7fe      	b.n	80050cc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	4b14      	ldr	r3, [pc, #80]	; (8005124 <vPortFree+0xb8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4013      	ands	r3, r2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01e      	beq.n	800511a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d11a      	bne.n	800511a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	4b0e      	ldr	r3, [pc, #56]	; (8005124 <vPortFree+0xb8>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	43db      	mvns	r3, r3
 80050ee:	401a      	ands	r2, r3
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80050f4:	f7fe fbf2 	bl	80038dc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <vPortFree+0xbc>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4413      	add	r3, r2
 8005102:	4a09      	ldr	r2, [pc, #36]	; (8005128 <vPortFree+0xbc>)
 8005104:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005106:	6938      	ldr	r0, [r7, #16]
 8005108:	f000 f874 	bl	80051f4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800510c:	4b07      	ldr	r3, [pc, #28]	; (800512c <vPortFree+0xc0>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3301      	adds	r3, #1
 8005112:	4a06      	ldr	r2, [pc, #24]	; (800512c <vPortFree+0xc0>)
 8005114:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005116:	f7fe fbef 	bl	80038f8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800511a:	bf00      	nop
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20012e70 	.word	0x20012e70
 8005128:	20012e60 	.word	0x20012e60
 800512c:	20012e6c 	.word	0x20012e6c

08005130 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005136:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800513a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800513c:	4b27      	ldr	r3, [pc, #156]	; (80051dc <prvHeapInit+0xac>)
 800513e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00c      	beq.n	8005164 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3307      	adds	r3, #7
 800514e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0307 	bic.w	r3, r3, #7
 8005156:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	4a1f      	ldr	r2, [pc, #124]	; (80051dc <prvHeapInit+0xac>)
 8005160:	4413      	add	r3, r2
 8005162:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005168:	4a1d      	ldr	r2, [pc, #116]	; (80051e0 <prvHeapInit+0xb0>)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800516e:	4b1c      	ldr	r3, [pc, #112]	; (80051e0 <prvHeapInit+0xb0>)
 8005170:	2200      	movs	r2, #0
 8005172:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	4413      	add	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800517c:	2208      	movs	r2, #8
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	1a9b      	subs	r3, r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0307 	bic.w	r3, r3, #7
 800518a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4a15      	ldr	r2, [pc, #84]	; (80051e4 <prvHeapInit+0xb4>)
 8005190:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005192:	4b14      	ldr	r3, [pc, #80]	; (80051e4 <prvHeapInit+0xb4>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2200      	movs	r2, #0
 8005198:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800519a:	4b12      	ldr	r3, [pc, #72]	; (80051e4 <prvHeapInit+0xb4>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	1ad2      	subs	r2, r2, r3
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051b0:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <prvHeapInit+0xb4>)
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	4a0a      	ldr	r2, [pc, #40]	; (80051e8 <prvHeapInit+0xb8>)
 80051be:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	4a09      	ldr	r2, [pc, #36]	; (80051ec <prvHeapInit+0xbc>)
 80051c6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051c8:	4b09      	ldr	r3, [pc, #36]	; (80051f0 <prvHeapInit+0xc0>)
 80051ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80051ce:	601a      	str	r2, [r3, #0]
}
 80051d0:	bf00      	nop
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	20000254 	.word	0x20000254
 80051e0:	20012e54 	.word	0x20012e54
 80051e4:	20012e5c 	.word	0x20012e5c
 80051e8:	20012e64 	.word	0x20012e64
 80051ec:	20012e60 	.word	0x20012e60
 80051f0:	20012e70 	.word	0x20012e70

080051f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051fc:	4b28      	ldr	r3, [pc, #160]	; (80052a0 <prvInsertBlockIntoFreeList+0xac>)
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	e002      	b.n	8005208 <prvInsertBlockIntoFreeList+0x14>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	429a      	cmp	r2, r3
 8005210:	d8f7      	bhi.n	8005202 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	4413      	add	r3, r2
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	429a      	cmp	r2, r3
 8005222:	d108      	bne.n	8005236 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	441a      	add	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	441a      	add	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d118      	bne.n	800527c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	4b15      	ldr	r3, [pc, #84]	; (80052a4 <prvInsertBlockIntoFreeList+0xb0>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	429a      	cmp	r2, r3
 8005254:	d00d      	beq.n	8005272 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	441a      	add	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	e008      	b.n	8005284 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005272:	4b0c      	ldr	r3, [pc, #48]	; (80052a4 <prvInsertBlockIntoFreeList+0xb0>)
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	e003      	b.n	8005284 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	429a      	cmp	r2, r3
 800528a:	d002      	beq.n	8005292 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005292:	bf00      	nop
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	20012e54 	.word	0x20012e54
 80052a4:	20012e5c 	.word	0x20012e5c

080052a8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80052ac:	4803      	ldr	r0, [pc, #12]	; (80052bc <_cbSendSystemDesc+0x14>)
 80052ae:	f002 f89f 	bl	80073f0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80052b2:	4803      	ldr	r0, [pc, #12]	; (80052c0 <_cbSendSystemDesc+0x18>)
 80052b4:	f002 f89c 	bl	80073f0 <SEGGER_SYSVIEW_SendSysDesc>
}
 80052b8:	bf00      	nop
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	08007c58 	.word	0x08007c58
 80052c0:	08007c9c 	.word	0x08007c9c

080052c4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80052c8:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80052ca:	6818      	ldr	r0, [r3, #0]
 80052cc:	4b05      	ldr	r3, [pc, #20]	; (80052e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80052ce:	6819      	ldr	r1, [r3, #0]
 80052d0:	4b05      	ldr	r3, [pc, #20]	; (80052e8 <SEGGER_SYSVIEW_Conf+0x24>)
 80052d2:	4a06      	ldr	r2, [pc, #24]	; (80052ec <SEGGER_SYSVIEW_Conf+0x28>)
 80052d4:	f001 fc08 	bl	8006ae8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80052d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80052dc:	f001 fc48 	bl	8006b70 <SEGGER_SYSVIEW_SetRAMBase>
}
 80052e0:	bf00      	nop
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	20000000 	.word	0x20000000
 80052e8:	080052a9 	.word	0x080052a9
 80052ec:	08007d3c 	.word	0x08007d3c

080052f0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80052f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80052f6:	2300      	movs	r3, #0
 80052f8:	607b      	str	r3, [r7, #4]
 80052fa:	e033      	b.n	8005364 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80052fc:	491e      	ldr	r1, [pc, #120]	; (8005378 <_cbSendTaskList+0x88>)
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	4613      	mov	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	6818      	ldr	r0, [r3, #0]
 800530c:	491a      	ldr	r1, [pc, #104]	; (8005378 <_cbSendTaskList+0x88>)
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	4613      	mov	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	3304      	adds	r3, #4
 800531c:	6819      	ldr	r1, [r3, #0]
 800531e:	4c16      	ldr	r4, [pc, #88]	; (8005378 <_cbSendTaskList+0x88>)
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4423      	add	r3, r4
 800532c:	3308      	adds	r3, #8
 800532e:	681c      	ldr	r4, [r3, #0]
 8005330:	4d11      	ldr	r5, [pc, #68]	; (8005378 <_cbSendTaskList+0x88>)
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	442b      	add	r3, r5
 800533e:	330c      	adds	r3, #12
 8005340:	681d      	ldr	r5, [r3, #0]
 8005342:	4e0d      	ldr	r6, [pc, #52]	; (8005378 <_cbSendTaskList+0x88>)
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	4613      	mov	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4433      	add	r3, r6
 8005350:	3310      	adds	r3, #16
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	462b      	mov	r3, r5
 8005358:	4622      	mov	r2, r4
 800535a:	f000 f8bd 	bl	80054d8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	3301      	adds	r3, #1
 8005362:	607b      	str	r3, [r7, #4]
 8005364:	4b05      	ldr	r3, [pc, #20]	; (800537c <_cbSendTaskList+0x8c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	429a      	cmp	r2, r3
 800536c:	d3c6      	bcc.n	80052fc <_cbSendTaskList+0xc>
  }
}
 800536e:	bf00      	nop
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005378:	20012e74 	.word	0x20012e74
 800537c:	20012f14 	.word	0x20012f14

08005380 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005384:	b082      	sub	sp, #8
 8005386:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005388:	f7fe fb66 	bl	8003a58 <xTaskGetTickCountFromISR>
 800538c:	4603      	mov	r3, r0
 800538e:	2200      	movs	r2, #0
 8005390:	469a      	mov	sl, r3
 8005392:	4693      	mov	fp, r2
 8005394:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005398:	e9d7 0100 	ldrd	r0, r1, [r7]
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	f04f 0a00 	mov.w	sl, #0
 80053a4:	f04f 0b00 	mov.w	fp, #0
 80053a8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80053ac:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80053b0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80053b4:	4652      	mov	r2, sl
 80053b6:	465b      	mov	r3, fp
 80053b8:	1a14      	subs	r4, r2, r0
 80053ba:	eb63 0501 	sbc.w	r5, r3, r1
 80053be:	f04f 0200 	mov.w	r2, #0
 80053c2:	f04f 0300 	mov.w	r3, #0
 80053c6:	00ab      	lsls	r3, r5, #2
 80053c8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80053cc:	00a2      	lsls	r2, r4, #2
 80053ce:	4614      	mov	r4, r2
 80053d0:	461d      	mov	r5, r3
 80053d2:	eb14 0800 	adds.w	r8, r4, r0
 80053d6:	eb45 0901 	adc.w	r9, r5, r1
 80053da:	f04f 0200 	mov.w	r2, #0
 80053de:	f04f 0300 	mov.w	r3, #0
 80053e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053ee:	4690      	mov	r8, r2
 80053f0:	4699      	mov	r9, r3
 80053f2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80053f6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80053fa:	4610      	mov	r0, r2
 80053fc:	4619      	mov	r1, r3
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005408 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af02      	add	r7, sp, #8
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005416:	2205      	movs	r2, #5
 8005418:	492b      	ldr	r1, [pc, #172]	; (80054c8 <SYSVIEW_AddTask+0xc0>)
 800541a:	68b8      	ldr	r0, [r7, #8]
 800541c:	f002 fb84 	bl	8007b28 <memcmp>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d04b      	beq.n	80054be <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005426:	4b29      	ldr	r3, [pc, #164]	; (80054cc <SYSVIEW_AddTask+0xc4>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b07      	cmp	r3, #7
 800542c:	d903      	bls.n	8005436 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800542e:	4828      	ldr	r0, [pc, #160]	; (80054d0 <SYSVIEW_AddTask+0xc8>)
 8005430:	f002 faf0 	bl	8007a14 <SEGGER_SYSVIEW_Warn>
    return;
 8005434:	e044      	b.n	80054c0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005436:	4b25      	ldr	r3, [pc, #148]	; (80054cc <SYSVIEW_AddTask+0xc4>)
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	4926      	ldr	r1, [pc, #152]	; (80054d4 <SYSVIEW_AddTask+0xcc>)
 800543c:	4613      	mov	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	440b      	add	r3, r1
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800544a:	4b20      	ldr	r3, [pc, #128]	; (80054cc <SYSVIEW_AddTask+0xc4>)
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	4921      	ldr	r1, [pc, #132]	; (80054d4 <SYSVIEW_AddTask+0xcc>)
 8005450:	4613      	mov	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	440b      	add	r3, r1
 800545a:	3304      	adds	r3, #4
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005460:	4b1a      	ldr	r3, [pc, #104]	; (80054cc <SYSVIEW_AddTask+0xc4>)
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	491b      	ldr	r1, [pc, #108]	; (80054d4 <SYSVIEW_AddTask+0xcc>)
 8005466:	4613      	mov	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	440b      	add	r3, r1
 8005470:	3308      	adds	r3, #8
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005476:	4b15      	ldr	r3, [pc, #84]	; (80054cc <SYSVIEW_AddTask+0xc4>)
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	4916      	ldr	r1, [pc, #88]	; (80054d4 <SYSVIEW_AddTask+0xcc>)
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	330c      	adds	r3, #12
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800548c:	4b0f      	ldr	r3, [pc, #60]	; (80054cc <SYSVIEW_AddTask+0xc4>)
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	4910      	ldr	r1, [pc, #64]	; (80054d4 <SYSVIEW_AddTask+0xcc>)
 8005492:	4613      	mov	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	440b      	add	r3, r1
 800549c:	3310      	adds	r3, #16
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80054a2:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <SYSVIEW_AddTask+0xc4>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3301      	adds	r3, #1
 80054a8:	4a08      	ldr	r2, [pc, #32]	; (80054cc <SYSVIEW_AddTask+0xc4>)
 80054aa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	68b9      	ldr	r1, [r7, #8]
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 f80e 	bl	80054d8 <SYSVIEW_SendTaskInfo>
 80054bc:	e000      	b.n	80054c0 <SYSVIEW_AddTask+0xb8>
    return;
 80054be:	bf00      	nop

}
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	08007cac 	.word	0x08007cac
 80054cc:	20012f14 	.word	0x20012f14
 80054d0:	08007cb4 	.word	0x08007cb4
 80054d4:	20012e74 	.word	0x20012e74

080054d8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80054d8:	b580      	push	{r7, lr}
 80054da:	b08a      	sub	sp, #40	; 0x28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
 80054e4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80054e6:	f107 0314 	add.w	r3, r7, #20
 80054ea:	2214      	movs	r2, #20
 80054ec:	2100      	movs	r1, #0
 80054ee:	4618      	mov	r0, r3
 80054f0:	f002 fb2a 	bl	8007b48 <memset>
  TaskInfo.TaskID     = TaskID;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005506:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005508:	f107 0314 	add.w	r3, r7, #20
 800550c:	4618      	mov	r0, r3
 800550e:	f001 fe77 	bl	8007200 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005512:	bf00      	nop
 8005514:	3728      	adds	r7, #40	; 0x28
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <__NVIC_EnableIRQ>:
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	4603      	mov	r3, r0
 8005524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800552a:	2b00      	cmp	r3, #0
 800552c:	db0b      	blt.n	8005546 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800552e:	79fb      	ldrb	r3, [r7, #7]
 8005530:	f003 021f 	and.w	r2, r3, #31
 8005534:	4907      	ldr	r1, [pc, #28]	; (8005554 <__NVIC_EnableIRQ+0x38>)
 8005536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800553a:	095b      	lsrs	r3, r3, #5
 800553c:	2001      	movs	r0, #1
 800553e:	fa00 f202 	lsl.w	r2, r0, r2
 8005542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	e000e100 	.word	0xe000e100

08005558 <__NVIC_SetPriority>:
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	4603      	mov	r3, r0
 8005560:	6039      	str	r1, [r7, #0]
 8005562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005568:	2b00      	cmp	r3, #0
 800556a:	db0a      	blt.n	8005582 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	b2da      	uxtb	r2, r3
 8005570:	490c      	ldr	r1, [pc, #48]	; (80055a4 <__NVIC_SetPriority+0x4c>)
 8005572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005576:	0112      	lsls	r2, r2, #4
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	440b      	add	r3, r1
 800557c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005580:	e00a      	b.n	8005598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	b2da      	uxtb	r2, r3
 8005586:	4908      	ldr	r1, [pc, #32]	; (80055a8 <__NVIC_SetPriority+0x50>)
 8005588:	79fb      	ldrb	r3, [r7, #7]
 800558a:	f003 030f 	and.w	r3, r3, #15
 800558e:	3b04      	subs	r3, #4
 8005590:	0112      	lsls	r2, r2, #4
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	440b      	add	r3, r1
 8005596:	761a      	strb	r2, [r3, #24]
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	e000e100 	.word	0xe000e100
 80055a8:	e000ed00 	.word	0xe000ed00

080055ac <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80055b2:	f002 fa8b 	bl	8007acc <SEGGER_SYSVIEW_IsStarted>
 80055b6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80055be:	f001 fca3 	bl	8006f08 <SEGGER_SYSVIEW_Start>
  }
}
 80055c2:	bf00      	nop
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
	...

080055cc <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	4603      	mov	r3, r0
 80055d4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80055d6:	4b0c      	ldr	r3, [pc, #48]	; (8005608 <_cbOnUARTRx+0x3c>)
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d806      	bhi.n	80055ec <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80055de:	4b0a      	ldr	r3, [pc, #40]	; (8005608 <_cbOnUARTRx+0x3c>)
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	3301      	adds	r3, #1
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	4b08      	ldr	r3, [pc, #32]	; (8005608 <_cbOnUARTRx+0x3c>)
 80055e8:	701a      	strb	r2, [r3, #0]
    goto Done;
 80055ea:	e009      	b.n	8005600 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80055ec:	f7ff ffde 	bl	80055ac <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80055f0:	4b05      	ldr	r3, [pc, #20]	; (8005608 <_cbOnUARTRx+0x3c>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	4618      	mov	r0, r3
 80055f6:	1dfb      	adds	r3, r7, #7
 80055f8:	2201      	movs	r2, #1
 80055fa:	4619      	mov	r1, r3
 80055fc:	f000 fb9a 	bl	8005d34 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005600:	bf00      	nop
}
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	20000014 	.word	0x20000014

0800560c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005614:	4b14      	ldr	r3, [pc, #80]	; (8005668 <_cbOnUARTTx+0x5c>)
 8005616:	785b      	ldrb	r3, [r3, #1]
 8005618:	2b03      	cmp	r3, #3
 800561a:	d80f      	bhi.n	800563c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800561c:	4b12      	ldr	r3, [pc, #72]	; (8005668 <_cbOnUARTTx+0x5c>)
 800561e:	785b      	ldrb	r3, [r3, #1]
 8005620:	461a      	mov	r2, r3
 8005622:	4b12      	ldr	r3, [pc, #72]	; (800566c <_cbOnUARTTx+0x60>)
 8005624:	5c9a      	ldrb	r2, [r3, r2]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800562a:	4b0f      	ldr	r3, [pc, #60]	; (8005668 <_cbOnUARTTx+0x5c>)
 800562c:	785b      	ldrb	r3, [r3, #1]
 800562e:	3301      	adds	r3, #1
 8005630:	b2da      	uxtb	r2, r3
 8005632:	4b0d      	ldr	r3, [pc, #52]	; (8005668 <_cbOnUARTTx+0x5c>)
 8005634:	705a      	strb	r2, [r3, #1]
    r = 1;
 8005636:	2301      	movs	r3, #1
 8005638:	60fb      	str	r3, [r7, #12]
    goto Done;
 800563a:	e00f      	b.n	800565c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800563c:	4b0a      	ldr	r3, [pc, #40]	; (8005668 <_cbOnUARTTx+0x5c>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	6879      	ldr	r1, [r7, #4]
 8005644:	4618      	mov	r0, r3
 8005646:	f000 fa19 	bl	8005a7c <SEGGER_RTT_ReadUpBufferNoLock>
 800564a:	4603      	mov	r3, r0
 800564c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	da02      	bge.n	800565a <_cbOnUARTTx+0x4e>
    r = 0;
 8005654:	2300      	movs	r3, #0
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	e000      	b.n	800565c <_cbOnUARTTx+0x50>
  }
Done:
 800565a:	bf00      	nop
  return r;
 800565c:	68fb      	ldr	r3, [r7, #12]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	20000014 	.word	0x20000014
 800566c:	08007d44 	.word	0x08007d44

08005670 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005678:	4a04      	ldr	r2, [pc, #16]	; (800568c <SEGGER_UART_init+0x1c>)
 800567a:	4905      	ldr	r1, [pc, #20]	; (8005690 <SEGGER_UART_init+0x20>)
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f863 	bl	8005748 <HIF_UART_Init>
}
 8005682:	bf00      	nop
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	080055cd 	.word	0x080055cd
 8005690:	0800560d 	.word	0x0800560d

08005694 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800569a:	4b1e      	ldr	r3, [pc, #120]	; (8005714 <USART2_IRQHandler+0x80>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f003 0320 	and.w	r3, r3, #32
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d011      	beq.n	80056ce <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80056aa:	4b1b      	ldr	r3, [pc, #108]	; (8005718 <USART2_IRQHandler+0x84>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f003 030b 	and.w	r3, r3, #11
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d108      	bne.n	80056ce <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80056bc:	4b17      	ldr	r3, [pc, #92]	; (800571c <USART2_IRQHandler+0x88>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d004      	beq.n	80056ce <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80056c4:	4b15      	ldr	r3, [pc, #84]	; (800571c <USART2_IRQHandler+0x88>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	79fa      	ldrb	r2, [r7, #7]
 80056ca:	4610      	mov	r0, r2
 80056cc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d01a      	beq.n	800570e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80056d8:	4b11      	ldr	r3, [pc, #68]	; (8005720 <USART2_IRQHandler+0x8c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d015      	beq.n	800570c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80056e0:	4b0f      	ldr	r3, [pc, #60]	; (8005720 <USART2_IRQHandler+0x8c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	1dfa      	adds	r2, r7, #7
 80056e6:	4610      	mov	r0, r2
 80056e8:	4798      	blx	r3
 80056ea:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d106      	bne.n	8005700 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80056f2:	4b0c      	ldr	r3, [pc, #48]	; (8005724 <USART2_IRQHandler+0x90>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a0b      	ldr	r2, [pc, #44]	; (8005724 <USART2_IRQHandler+0x90>)
 80056f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	e006      	b.n	800570e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005700:	4b04      	ldr	r3, [pc, #16]	; (8005714 <USART2_IRQHandler+0x80>)
 8005702:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005704:	79fa      	ldrb	r2, [r7, #7]
 8005706:	4b04      	ldr	r3, [pc, #16]	; (8005718 <USART2_IRQHandler+0x84>)
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	e000      	b.n	800570e <USART2_IRQHandler+0x7a>
      return;
 800570c:	bf00      	nop
    }
  }
}
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	40004400 	.word	0x40004400
 8005718:	40004404 	.word	0x40004404
 800571c:	20012f18 	.word	0x20012f18
 8005720:	20012f1c 	.word	0x20012f1c
 8005724:	4000440c 	.word	0x4000440c

08005728 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800572c:	4b05      	ldr	r3, [pc, #20]	; (8005744 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a04      	ldr	r2, [pc, #16]	; (8005744 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005736:	6013      	str	r3, [r2, #0]
}
 8005738:	bf00      	nop
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	4000440c 	.word	0x4000440c

08005748 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005754:	4b2e      	ldr	r3, [pc, #184]	; (8005810 <HIF_UART_Init+0xc8>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a2d      	ldr	r2, [pc, #180]	; (8005810 <HIF_UART_Init+0xc8>)
 800575a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800575e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005760:	4b2c      	ldr	r3, [pc, #176]	; (8005814 <HIF_UART_Init+0xcc>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a2b      	ldr	r2, [pc, #172]	; (8005814 <HIF_UART_Init+0xcc>)
 8005766:	f043 0301 	orr.w	r3, r3, #1
 800576a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800576c:	4b2a      	ldr	r3, [pc, #168]	; (8005818 <HIF_UART_Init+0xd0>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005778:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8005780:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005782:	4a25      	ldr	r2, [pc, #148]	; (8005818 <HIF_UART_Init+0xd0>)
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005788:	4b24      	ldr	r3, [pc, #144]	; (800581c <HIF_UART_Init+0xd4>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005794:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800579c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800579e:	4a1f      	ldr	r2, [pc, #124]	; (800581c <HIF_UART_Init+0xd4>)
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80057a4:	4b1e      	ldr	r3, [pc, #120]	; (8005820 <HIF_UART_Init+0xd8>)
 80057a6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80057aa:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80057ac:	4b1d      	ldr	r3, [pc, #116]	; (8005824 <HIF_UART_Init+0xdc>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80057b2:	4b1d      	ldr	r3, [pc, #116]	; (8005828 <HIF_UART_Init+0xe0>)
 80057b4:	2280      	movs	r2, #128	; 0x80
 80057b6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80057be:	4a1b      	ldr	r2, [pc, #108]	; (800582c <HIF_UART_Init+0xe4>)
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c6:	3301      	adds	r3, #1
 80057c8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	085b      	lsrs	r3, r3, #1
 80057ce:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d6:	d302      	bcc.n	80057de <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80057d8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80057dc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d004      	beq.n	80057ee <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	4a11      	ldr	r2, [pc, #68]	; (8005830 <HIF_UART_Init+0xe8>)
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80057ee:	4a11      	ldr	r2, [pc, #68]	; (8005834 <HIF_UART_Init+0xec>)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80057f4:	4a10      	ldr	r2, [pc, #64]	; (8005838 <HIF_UART_Init+0xf0>)
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80057fa:	2106      	movs	r1, #6
 80057fc:	2026      	movs	r0, #38	; 0x26
 80057fe:	f7ff feab 	bl	8005558 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005802:	2026      	movs	r0, #38	; 0x26
 8005804:	f7ff fe8a 	bl	800551c <__NVIC_EnableIRQ>
}
 8005808:	bf00      	nop
 800580a:	3718      	adds	r7, #24
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	40023840 	.word	0x40023840
 8005814:	40023830 	.word	0x40023830
 8005818:	40020020 	.word	0x40020020
 800581c:	40020000 	.word	0x40020000
 8005820:	4000440c 	.word	0x4000440c
 8005824:	40004410 	.word	0x40004410
 8005828:	40004414 	.word	0x40004414
 800582c:	0501bd00 	.word	0x0501bd00
 8005830:	40004408 	.word	0x40004408
 8005834:	20012f18 	.word	0x20012f18
 8005838:	20012f1c 	.word	0x20012f1c

0800583c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005842:	4b24      	ldr	r3, [pc, #144]	; (80058d4 <_DoInit+0x98>)
 8005844:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2203      	movs	r2, #3
 800584a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2203      	movs	r2, #3
 8005850:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a20      	ldr	r2, [pc, #128]	; (80058d8 <_DoInit+0x9c>)
 8005856:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a20      	ldr	r2, [pc, #128]	; (80058dc <_DoInit+0xa0>)
 800585c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005864:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a17      	ldr	r2, [pc, #92]	; (80058d8 <_DoInit+0x9c>)
 800587c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a17      	ldr	r2, [pc, #92]	; (80058e0 <_DoInit+0xa4>)
 8005882:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2210      	movs	r2, #16
 8005888:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3307      	adds	r3, #7
 80058a0:	4a10      	ldr	r2, [pc, #64]	; (80058e4 <_DoInit+0xa8>)
 80058a2:	6810      	ldr	r0, [r2, #0]
 80058a4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80058a6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a0e      	ldr	r2, [pc, #56]	; (80058e8 <_DoInit+0xac>)
 80058ae:	6810      	ldr	r0, [r2, #0]
 80058b0:	6018      	str	r0, [r3, #0]
 80058b2:	8891      	ldrh	r1, [r2, #4]
 80058b4:	7992      	ldrb	r2, [r2, #6]
 80058b6:	8099      	strh	r1, [r3, #4]
 80058b8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80058ba:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2220      	movs	r2, #32
 80058c2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80058c4:	f3bf 8f5f 	dmb	sy
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	20012f20 	.word	0x20012f20
 80058d8:	08007d04 	.word	0x08007d04
 80058dc:	20012fc8 	.word	0x20012fc8
 80058e0:	200133c8 	.word	0x200133c8
 80058e4:	08007d10 	.word	0x08007d10
 80058e8:	08007d14 	.word	0x08007d14

080058ec <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b08a      	sub	sp, #40	; 0x28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80058f8:	2300      	movs	r3, #0
 80058fa:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	429a      	cmp	r2, r3
 800590e:	d905      	bls.n	800591c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	3b01      	subs	r3, #1
 8005918:	627b      	str	r3, [r7, #36]	; 0x24
 800591a:	e007      	b.n	800592c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	69b9      	ldr	r1, [r7, #24]
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	1acb      	subs	r3, r1, r3
 8005926:	4413      	add	r3, r2
 8005928:	3b01      	subs	r3, #1
 800592a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005936:	4293      	cmp	r3, r2
 8005938:	bf28      	it	cs
 800593a:	4613      	movcs	r3, r2
 800593c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800593e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4293      	cmp	r3, r2
 8005944:	bf28      	it	cs
 8005946:	4613      	movcs	r3, r2
 8005948:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	4413      	add	r3, r2
 8005952:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005956:	68b9      	ldr	r1, [r7, #8]
 8005958:	6978      	ldr	r0, [r7, #20]
 800595a:	f002 f921 	bl	8007ba0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800595e:	6a3a      	ldr	r2, [r7, #32]
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	4413      	add	r3, r2
 8005964:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	4413      	add	r3, r2
 800596c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005976:	69fa      	ldr	r2, [r7, #28]
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	4413      	add	r3, r2
 800597c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	69fa      	ldr	r2, [r7, #28]
 8005984:	429a      	cmp	r2, r3
 8005986:	d101      	bne.n	800598c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005988:	2300      	movs	r3, #0
 800598a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800598c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1b2      	bne.n	8005902 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800599c:	6a3b      	ldr	r3, [r7, #32]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3728      	adds	r7, #40	; 0x28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b088      	sub	sp, #32
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	60b9      	str	r1, [r7, #8]
 80059b0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d911      	bls.n	80059ee <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	4413      	add	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	68b9      	ldr	r1, [r7, #8]
 80059d8:	6938      	ldr	r0, [r7, #16]
 80059da:	f002 f8e1 	bl	8007ba0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80059de:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80059e2:	69fa      	ldr	r2, [r7, #28]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	441a      	add	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80059ec:	e01f      	b.n	8005a2e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	4413      	add	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	68b9      	ldr	r1, [r7, #8]
 8005a00:	6938      	ldr	r0, [r7, #16]
 8005a02:	f002 f8cd 	bl	8007ba0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	4413      	add	r3, r2
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	6938      	ldr	r0, [r7, #16]
 8005a20:	f002 f8be 	bl	8007ba0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a24:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	60da      	str	r2, [r3, #12]
}
 8005a2e:	bf00      	nop
 8005a30:	3720      	adds	r7, #32
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005a36:	b480      	push	{r7}
 8005a38:	b087      	sub	sp, #28
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d808      	bhi.n	8005a64 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	1ad2      	subs	r2, r2, r3
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	617b      	str	r3, [r7, #20]
 8005a62:	e004      	b.n	8005a6e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005a6e:	697b      	ldr	r3, [r7, #20]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	371c      	adds	r7, #28
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08c      	sub	sp, #48	; 0x30
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005a88:	4b3e      	ldr	r3, [pc, #248]	; (8005b84 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005a8a:	623b      	str	r3, [r7, #32]
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005a96:	f7ff fed1 	bl	800583c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	4413      	add	r3, r2
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	4a37      	ldr	r2, [pc, #220]	; (8005b84 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005aa8:	4413      	add	r3, r2
 8005aaa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005abc:	2300      	movs	r3, #0
 8005abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d92b      	bls.n	8005b20 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	bf28      	it	cs
 8005ada:	4613      	movcs	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae4:	4413      	add	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	6939      	ldr	r1, [r7, #16]
 8005aec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005aee:	f002 f857 	bl	8007ba0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	4413      	add	r3, r2
 8005af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	4413      	add	r3, r2
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	4413      	add	r3, r2
 8005b10:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d101      	bne.n	8005b20 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	bf28      	it	cs
 8005b30:	4613      	movcs	r3, r2
 8005b32:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d019      	beq.n	8005b6e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b40:	4413      	add	r3, r2
 8005b42:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	6939      	ldr	r1, [r7, #16]
 8005b48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b4a:	f002 f829 	bl	8007ba0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	4413      	add	r3, r2
 8005b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b78:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3730      	adds	r7, #48	; 0x30
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	20012f20 	.word	0x20012f20

08005b88 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b08c      	sub	sp, #48	; 0x30
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005b94:	4b3e      	ldr	r3, [pc, #248]	; (8005c90 <SEGGER_RTT_ReadNoLock+0x108>)
 8005b96:	623b      	str	r3, [r7, #32]
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <SEGGER_RTT_ReadNoLock+0x1e>
 8005ba2:	f7ff fe4b 	bl	800583c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	4413      	add	r3, r2
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	3360      	adds	r3, #96	; 0x60
 8005bb2:	4a37      	ldr	r2, [pc, #220]	; (8005c90 <SEGGER_RTT_ReadNoLock+0x108>)
 8005bb4:	4413      	add	r3, r2
 8005bb6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d92b      	bls.n	8005c2c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4293      	cmp	r3, r2
 8005be4:	bf28      	it	cs
 8005be6:	4613      	movcs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf0:	4413      	add	r3, r2
 8005bf2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	6939      	ldr	r1, [r7, #16]
 8005bf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bfa:	f001 ffd1 	bl	8007ba0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	4413      	add	r3, r2
 8005c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005c16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d101      	bne.n	8005c2c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	bf28      	it	cs
 8005c3c:	4613      	movcs	r3, r2
 8005c3e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d019      	beq.n	8005c7a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4c:	4413      	add	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	6939      	ldr	r1, [r7, #16]
 8005c54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c56:	f001 ffa3 	bl	8007ba0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	4413      	add	r3, r2
 8005c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	4413      	add	r3, r2
 8005c68:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	4413      	add	r3, r2
 8005c78:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c84:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3730      	adds	r7, #48	; 0x30
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	20012f20 	.word	0x20012f20

08005c94 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b088      	sub	sp, #32
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	4413      	add	r3, r2
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	3360      	adds	r3, #96	; 0x60
 8005cb0:	4a1f      	ldr	r2, [pc, #124]	; (8005d30 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005cb2:	4413      	add	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d029      	beq.n	8005d12 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d82e      	bhi.n	8005d20 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d002      	beq.n	8005ccc <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d013      	beq.n	8005cf2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005cca:	e029      	b.n	8005d20 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005ccc:	6978      	ldr	r0, [r7, #20]
 8005cce:	f7ff feb2 	bl	8005a36 <_GetAvailWriteSpace>
 8005cd2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d202      	bcs.n	8005ce2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005ce0:	e021      	b.n	8005d26 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	69b9      	ldr	r1, [r7, #24]
 8005cea:	6978      	ldr	r0, [r7, #20]
 8005cec:	f7ff fe5b 	bl	80059a6 <_WriteNoCheck>
    break;
 8005cf0:	e019      	b.n	8005d26 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005cf2:	6978      	ldr	r0, [r7, #20]
 8005cf4:	f7ff fe9f 	bl	8005a36 <_GetAvailWriteSpace>
 8005cf8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	bf28      	it	cs
 8005d02:	4613      	movcs	r3, r2
 8005d04:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005d06:	69fa      	ldr	r2, [r7, #28]
 8005d08:	69b9      	ldr	r1, [r7, #24]
 8005d0a:	6978      	ldr	r0, [r7, #20]
 8005d0c:	f7ff fe4b 	bl	80059a6 <_WriteNoCheck>
    break;
 8005d10:	e009      	b.n	8005d26 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	69b9      	ldr	r1, [r7, #24]
 8005d16:	6978      	ldr	r0, [r7, #20]
 8005d18:	f7ff fde8 	bl	80058ec <_WriteBlocking>
 8005d1c:	61f8      	str	r0, [r7, #28]
    break;
 8005d1e:	e002      	b.n	8005d26 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005d20:	2300      	movs	r3, #0
 8005d22:	61fb      	str	r3, [r7, #28]
    break;
 8005d24:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005d26:	69fb      	ldr	r3, [r7, #28]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3720      	adds	r7, #32
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	20012f20 	.word	0x20012f20

08005d34 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b088      	sub	sp, #32
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005d40:	4b0e      	ldr	r3, [pc, #56]	; (8005d7c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005d42:	61fb      	str	r3, [r7, #28]
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005d4e:	f7ff fd75 	bl	800583c <_DoInit>
  SEGGER_RTT_LOCK();
 8005d52:	f3ef 8311 	mrs	r3, BASEPRI
 8005d56:	f04f 0120 	mov.w	r1, #32
 8005d5a:	f381 8811 	msr	BASEPRI, r1
 8005d5e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	68b9      	ldr	r1, [r7, #8]
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f7ff ff95 	bl	8005c94 <SEGGER_RTT_WriteDownBufferNoLock>
 8005d6a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005d72:	697b      	ldr	r3, [r7, #20]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3720      	adds	r7, #32
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	20012f20 	.word	0x20012f20

08005d80 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b088      	sub	sp, #32
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
 8005d8c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005d8e:	4b3d      	ldr	r3, [pc, #244]	; (8005e84 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005d90:	61bb      	str	r3, [r7, #24]
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005d9c:	f7ff fd4e 	bl	800583c <_DoInit>
  SEGGER_RTT_LOCK();
 8005da0:	f3ef 8311 	mrs	r3, BASEPRI
 8005da4:	f04f 0120 	mov.w	r1, #32
 8005da8:	f381 8811 	msr	BASEPRI, r1
 8005dac:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005dae:	4b35      	ldr	r3, [pc, #212]	; (8005e84 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005db0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005db2:	2300      	movs	r3, #0
 8005db4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005db6:	6939      	ldr	r1, [r7, #16]
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	4413      	add	r3, r2
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	440b      	add	r3, r1
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d008      	beq.n	8005de0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	69fa      	ldr	r2, [r7, #28]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	dbeb      	blt.n	8005db6 <SEGGER_RTT_AllocUpBuffer+0x36>
 8005dde:	e000      	b.n	8005de2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005de0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	69fa      	ldr	r2, [r7, #28]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	da3f      	bge.n	8005e6c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005dec:	6939      	ldr	r1, [r7, #16]
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	4613      	mov	r3, r2
 8005df4:	005b      	lsls	r3, r3, #1
 8005df6:	4413      	add	r3, r2
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	440b      	add	r3, r1
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005e00:	6939      	ldr	r1, [r7, #16]
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	4613      	mov	r3, r2
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	4413      	add	r3, r2
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	440b      	add	r3, r1
 8005e10:	3304      	adds	r3, #4
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005e16:	6939      	ldr	r1, [r7, #16]
 8005e18:	69fa      	ldr	r2, [r7, #28]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	4413      	add	r3, r2
 8005e20:	00db      	lsls	r3, r3, #3
 8005e22:	440b      	add	r3, r1
 8005e24:	3320      	adds	r3, #32
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005e2a:	6939      	ldr	r1, [r7, #16]
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	4413      	add	r3, r2
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	440b      	add	r3, r1
 8005e38:	3328      	adds	r3, #40	; 0x28
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005e3e:	6939      	ldr	r1, [r7, #16]
 8005e40:	69fa      	ldr	r2, [r7, #28]
 8005e42:	4613      	mov	r3, r2
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	4413      	add	r3, r2
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	440b      	add	r3, r1
 8005e4c:	3324      	adds	r3, #36	; 0x24
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005e52:	6939      	ldr	r1, [r7, #16]
 8005e54:	69fa      	ldr	r2, [r7, #28]
 8005e56:	4613      	mov	r3, r2
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	4413      	add	r3, r2
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	440b      	add	r3, r1
 8005e60:	332c      	adds	r3, #44	; 0x2c
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005e66:	f3bf 8f5f 	dmb	sy
 8005e6a:	e002      	b.n	8005e72 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e70:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005e78:	69fb      	ldr	r3, [r7, #28]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3720      	adds	r7, #32
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	20012f20 	.word	0x20012f20

08005e88 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b088      	sub	sp, #32
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
 8005e94:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005e96:	4b33      	ldr	r3, [pc, #204]	; (8005f64 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005ea4:	f7ff fcca 	bl	800583c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005ea8:	4b2e      	ldr	r3, [pc, #184]	; (8005f64 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005eaa:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d24d      	bcs.n	8005f54 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005eb8:	f3ef 8311 	mrs	r3, BASEPRI
 8005ebc:	f04f 0120 	mov.w	r1, #32
 8005ec0:	f381 8811 	msr	BASEPRI, r1
 8005ec4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d031      	beq.n	8005f30 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005ecc:	6979      	ldr	r1, [r7, #20]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	005b      	lsls	r3, r3, #1
 8005ed4:	4413      	add	r3, r2
 8005ed6:	00db      	lsls	r3, r3, #3
 8005ed8:	440b      	add	r3, r1
 8005eda:	3360      	adds	r3, #96	; 0x60
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005ee0:	6979      	ldr	r1, [r7, #20]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	4413      	add	r3, r2
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	440b      	add	r3, r1
 8005eee:	3364      	adds	r3, #100	; 0x64
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005ef4:	6979      	ldr	r1, [r7, #20]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	4413      	add	r3, r2
 8005efe:	00db      	lsls	r3, r3, #3
 8005f00:	440b      	add	r3, r1
 8005f02:	3368      	adds	r3, #104	; 0x68
 8005f04:	683a      	ldr	r2, [r7, #0]
 8005f06:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005f08:	6979      	ldr	r1, [r7, #20]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	4413      	add	r3, r2
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	440b      	add	r3, r1
 8005f16:	3370      	adds	r3, #112	; 0x70
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005f1c:	6979      	ldr	r1, [r7, #20]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	4613      	mov	r3, r2
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	4413      	add	r3, r2
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	440b      	add	r3, r1
 8005f2a:	336c      	adds	r3, #108	; 0x6c
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005f30:	6979      	ldr	r1, [r7, #20]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	4613      	mov	r3, r2
 8005f36:	005b      	lsls	r3, r3, #1
 8005f38:	4413      	add	r3, r2
 8005f3a:	00db      	lsls	r3, r3, #3
 8005f3c:	440b      	add	r3, r1
 8005f3e:	3374      	adds	r3, #116	; 0x74
 8005f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f42:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005f44:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	61fb      	str	r3, [r7, #28]
 8005f52:	e002      	b.n	8005f5a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005f54:	f04f 33ff 	mov.w	r3, #4294967295
 8005f58:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005f5a:	69fb      	ldr	r3, [r7, #28]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3720      	adds	r7, #32
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	20012f20 	.word	0x20012f20

08005f68 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005f74:	2300      	movs	r3, #0
 8005f76:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005f78:	e002      	b.n	8005f80 <_EncodeStr+0x18>
    Len++;
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	4413      	add	r3, r2
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1f6      	bne.n	8005f7a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d901      	bls.n	8005f98 <_EncodeStr+0x30>
    Len = Limit;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	2bfe      	cmp	r3, #254	; 0xfe
 8005f9c:	d806      	bhi.n	8005fac <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	60fa      	str	r2, [r7, #12]
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	b2d2      	uxtb	r2, r2
 8005fa8:	701a      	strb	r2, [r3, #0]
 8005faa:	e011      	b.n	8005fd0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	60fa      	str	r2, [r7, #12]
 8005fb2:	22ff      	movs	r2, #255	; 0xff
 8005fb4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	1c5a      	adds	r2, r3, #1
 8005fba:	60fa      	str	r2, [r7, #12]
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	0a19      	lsrs	r1, r3, #8
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	60fa      	str	r2, [r7, #12]
 8005fcc:	b2ca      	uxtb	r2, r1
 8005fce:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005fd4:	e00a      	b.n	8005fec <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	1c53      	adds	r3, r2, #1
 8005fda:	60bb      	str	r3, [r7, #8]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	1c59      	adds	r1, r3, #1
 8005fe0:	60f9      	str	r1, [r7, #12]
 8005fe2:	7812      	ldrb	r2, [r2, #0]
 8005fe4:	701a      	strb	r2, [r3, #0]
    n++;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d3f0      	bcc.n	8005fd6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	3304      	adds	r3, #4
}
 800600e:	4618      	mov	r0, r3
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
	...

0800601c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006022:	4b35      	ldr	r3, [pc, #212]	; (80060f8 <_HandleIncomingPacket+0xdc>)
 8006024:	7e1b      	ldrb	r3, [r3, #24]
 8006026:	4618      	mov	r0, r3
 8006028:	1cfb      	adds	r3, r7, #3
 800602a:	2201      	movs	r2, #1
 800602c:	4619      	mov	r1, r3
 800602e:	f7ff fdab 	bl	8005b88 <SEGGER_RTT_ReadNoLock>
 8006032:	4603      	mov	r3, r0
 8006034:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	dd59      	ble.n	80060f0 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 800603c:	78fb      	ldrb	r3, [r7, #3]
 800603e:	2b80      	cmp	r3, #128	; 0x80
 8006040:	d032      	beq.n	80060a8 <_HandleIncomingPacket+0x8c>
 8006042:	2b80      	cmp	r3, #128	; 0x80
 8006044:	dc42      	bgt.n	80060cc <_HandleIncomingPacket+0xb0>
 8006046:	2b07      	cmp	r3, #7
 8006048:	dc16      	bgt.n	8006078 <_HandleIncomingPacket+0x5c>
 800604a:	2b00      	cmp	r3, #0
 800604c:	dd3e      	ble.n	80060cc <_HandleIncomingPacket+0xb0>
 800604e:	3b01      	subs	r3, #1
 8006050:	2b06      	cmp	r3, #6
 8006052:	d83b      	bhi.n	80060cc <_HandleIncomingPacket+0xb0>
 8006054:	a201      	add	r2, pc, #4	; (adr r2, 800605c <_HandleIncomingPacket+0x40>)
 8006056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605a:	bf00      	nop
 800605c:	0800607f 	.word	0x0800607f
 8006060:	08006085 	.word	0x08006085
 8006064:	0800608b 	.word	0x0800608b
 8006068:	08006091 	.word	0x08006091
 800606c:	08006097 	.word	0x08006097
 8006070:	0800609d 	.word	0x0800609d
 8006074:	080060a3 	.word	0x080060a3
 8006078:	2b7f      	cmp	r3, #127	; 0x7f
 800607a:	d034      	beq.n	80060e6 <_HandleIncomingPacket+0xca>
 800607c:	e026      	b.n	80060cc <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800607e:	f000 ff43 	bl	8006f08 <SEGGER_SYSVIEW_Start>
      break;
 8006082:	e035      	b.n	80060f0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006084:	f000 fffc 	bl	8007080 <SEGGER_SYSVIEW_Stop>
      break;
 8006088:	e032      	b.n	80060f0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800608a:	f001 f9d5 	bl	8007438 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800608e:	e02f      	b.n	80060f0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006090:	f001 f99a 	bl	80073c8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006094:	e02c      	b.n	80060f0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006096:	f001 f819 	bl	80070cc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800609a:	e029      	b.n	80060f0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800609c:	f001 fc68 	bl	8007970 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80060a0:	e026      	b.n	80060f0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80060a2:	f001 fc47 	bl	8007934 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80060a6:	e023      	b.n	80060f0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80060a8:	4b13      	ldr	r3, [pc, #76]	; (80060f8 <_HandleIncomingPacket+0xdc>)
 80060aa:	7e1b      	ldrb	r3, [r3, #24]
 80060ac:	4618      	mov	r0, r3
 80060ae:	1cfb      	adds	r3, r7, #3
 80060b0:	2201      	movs	r2, #1
 80060b2:	4619      	mov	r1, r3
 80060b4:	f7ff fd68 	bl	8005b88 <SEGGER_RTT_ReadNoLock>
 80060b8:	4603      	mov	r3, r0
 80060ba:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	dd13      	ble.n	80060ea <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80060c2:	78fb      	ldrb	r3, [r7, #3]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f001 fbb5 	bl	8007834 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80060ca:	e00e      	b.n	80060ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80060cc:	78fb      	ldrb	r3, [r7, #3]
 80060ce:	b25b      	sxtb	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	da0c      	bge.n	80060ee <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80060d4:	4b08      	ldr	r3, [pc, #32]	; (80060f8 <_HandleIncomingPacket+0xdc>)
 80060d6:	7e1b      	ldrb	r3, [r3, #24]
 80060d8:	4618      	mov	r0, r3
 80060da:	1cfb      	adds	r3, r7, #3
 80060dc:	2201      	movs	r2, #1
 80060de:	4619      	mov	r1, r3
 80060e0:	f7ff fd52 	bl	8005b88 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80060e4:	e003      	b.n	80060ee <_HandleIncomingPacket+0xd2>
      break;
 80060e6:	bf00      	nop
 80060e8:	e002      	b.n	80060f0 <_HandleIncomingPacket+0xd4>
      break;
 80060ea:	bf00      	nop
 80060ec:	e000      	b.n	80060f0 <_HandleIncomingPacket+0xd4>
      break;
 80060ee:	bf00      	nop
    }
  }
}
 80060f0:	bf00      	nop
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	200143e0 	.word	0x200143e0

080060fc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b08c      	sub	sp, #48	; 0x30
 8006100:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006102:	2301      	movs	r3, #1
 8006104:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006106:	1d3b      	adds	r3, r7, #4
 8006108:	3301      	adds	r3, #1
 800610a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006110:	4b32      	ldr	r3, [pc, #200]	; (80061dc <_TrySendOverflowPacket+0xe0>)
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	62bb      	str	r3, [r7, #40]	; 0x28
 8006116:	e00b      	b.n	8006130 <_TrySendOverflowPacket+0x34>
 8006118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611a:	b2da      	uxtb	r2, r3
 800611c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611e:	1c59      	adds	r1, r3, #1
 8006120:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006122:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006126:	b2d2      	uxtb	r2, r2
 8006128:	701a      	strb	r2, [r3, #0]
 800612a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612c:	09db      	lsrs	r3, r3, #7
 800612e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	2b7f      	cmp	r3, #127	; 0x7f
 8006134:	d8f0      	bhi.n	8006118 <_TrySendOverflowPacket+0x1c>
 8006136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006138:	1c5a      	adds	r2, r3, #1
 800613a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800613c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	701a      	strb	r2, [r3, #0]
 8006142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006144:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006146:	4b26      	ldr	r3, [pc, #152]	; (80061e0 <_TrySendOverflowPacket+0xe4>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800614c:	4b23      	ldr	r3, [pc, #140]	; (80061dc <_TrySendOverflowPacket+0xe0>)
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	623b      	str	r3, [r7, #32]
 800615e:	e00b      	b.n	8006178 <_TrySendOverflowPacket+0x7c>
 8006160:	6a3b      	ldr	r3, [r7, #32]
 8006162:	b2da      	uxtb	r2, r3
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	1c59      	adds	r1, r3, #1
 8006168:	6279      	str	r1, [r7, #36]	; 0x24
 800616a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800616e:	b2d2      	uxtb	r2, r2
 8006170:	701a      	strb	r2, [r3, #0]
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	09db      	lsrs	r3, r3, #7
 8006176:	623b      	str	r3, [r7, #32]
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	2b7f      	cmp	r3, #127	; 0x7f
 800617c:	d8f0      	bhi.n	8006160 <_TrySendOverflowPacket+0x64>
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	627a      	str	r2, [r7, #36]	; 0x24
 8006184:	6a3a      	ldr	r2, [r7, #32]
 8006186:	b2d2      	uxtb	r2, r2
 8006188:	701a      	strb	r2, [r3, #0]
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800618e:	4b13      	ldr	r3, [pc, #76]	; (80061dc <_TrySendOverflowPacket+0xe0>)
 8006190:	785b      	ldrb	r3, [r3, #1]
 8006192:	4618      	mov	r0, r3
 8006194:	1d3b      	adds	r3, r7, #4
 8006196:	69fa      	ldr	r2, [r7, #28]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	461a      	mov	r2, r3
 800619c:	1d3b      	adds	r3, r7, #4
 800619e:	4619      	mov	r1, r3
 80061a0:	f7fa f816 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80061a4:	4603      	mov	r3, r0
 80061a6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80061a8:	f7ff fabe 	bl	8005728 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d009      	beq.n	80061c6 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80061b2:	4a0a      	ldr	r2, [pc, #40]	; (80061dc <_TrySendOverflowPacket+0xe0>)
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80061b8:	4b08      	ldr	r3, [pc, #32]	; (80061dc <_TrySendOverflowPacket+0xe0>)
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	3b01      	subs	r3, #1
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	4b06      	ldr	r3, [pc, #24]	; (80061dc <_TrySendOverflowPacket+0xe0>)
 80061c2:	701a      	strb	r2, [r3, #0]
 80061c4:	e004      	b.n	80061d0 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80061c6:	4b05      	ldr	r3, [pc, #20]	; (80061dc <_TrySendOverflowPacket+0xe0>)
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	3301      	adds	r3, #1
 80061cc:	4a03      	ldr	r2, [pc, #12]	; (80061dc <_TrySendOverflowPacket+0xe0>)
 80061ce:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80061d0:	693b      	ldr	r3, [r7, #16]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3730      	adds	r7, #48	; 0x30
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	200143e0 	.word	0x200143e0
 80061e0:	e0001004 	.word	0xe0001004

080061e4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b08a      	sub	sp, #40	; 0x28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80061f0:	4b6d      	ldr	r3, [pc, #436]	; (80063a8 <_SendPacket+0x1c4>)
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d010      	beq.n	800621a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80061f8:	4b6b      	ldr	r3, [pc, #428]	; (80063a8 <_SendPacket+0x1c4>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 80a5 	beq.w	800634c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006202:	4b69      	ldr	r3, [pc, #420]	; (80063a8 <_SendPacket+0x1c4>)
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	2b02      	cmp	r3, #2
 8006208:	d109      	bne.n	800621e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800620a:	f7ff ff77 	bl	80060fc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800620e:	4b66      	ldr	r3, [pc, #408]	; (80063a8 <_SendPacket+0x1c4>)
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	2b01      	cmp	r3, #1
 8006214:	f040 809c 	bne.w	8006350 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8006218:	e001      	b.n	800621e <_SendPacket+0x3a>
    goto Send;
 800621a:	bf00      	nop
 800621c:	e000      	b.n	8006220 <_SendPacket+0x3c>
Send:
 800621e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b1f      	cmp	r3, #31
 8006224:	d809      	bhi.n	800623a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8006226:	4b60      	ldr	r3, [pc, #384]	; (80063a8 <_SendPacket+0x1c4>)
 8006228:	69da      	ldr	r2, [r3, #28]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	fa22 f303 	lsr.w	r3, r2, r3
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	2b00      	cmp	r3, #0
 8006236:	f040 808d 	bne.w	8006354 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b17      	cmp	r3, #23
 800623e:	d807      	bhi.n	8006250 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	3b01      	subs	r3, #1
 8006244:	60fb      	str	r3, [r7, #12]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	b2da      	uxtb	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	e03d      	b.n	80062cc <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	2b7f      	cmp	r3, #127	; 0x7f
 800625c:	d912      	bls.n	8006284 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	09da      	lsrs	r2, r3, #7
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	3b01      	subs	r3, #1
 8006266:	60fb      	str	r3, [r7, #12]
 8006268:	b2d2      	uxtb	r2, r2
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	b2db      	uxtb	r3, r3
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	3a01      	subs	r2, #1
 8006276:	60fa      	str	r2, [r7, #12]
 8006278:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800627c:	b2da      	uxtb	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	701a      	strb	r2, [r3, #0]
 8006282:	e006      	b.n	8006292 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	3b01      	subs	r3, #1
 8006288:	60fb      	str	r3, [r7, #12]
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	b2da      	uxtb	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b7f      	cmp	r3, #127	; 0x7f
 8006296:	d912      	bls.n	80062be <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	09da      	lsrs	r2, r3, #7
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	3b01      	subs	r3, #1
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	b2d2      	uxtb	r2, r2
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	3a01      	subs	r2, #1
 80062b0:	60fa      	str	r2, [r7, #12]
 80062b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	701a      	strb	r2, [r3, #0]
 80062bc:	e006      	b.n	80062cc <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	3b01      	subs	r3, #1
 80062c2:	60fb      	str	r3, [r7, #12]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80062cc:	4b37      	ldr	r3, [pc, #220]	; (80063ac <_SendPacket+0x1c8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80062d2:	4b35      	ldr	r3, [pc, #212]	; (80063a8 <_SendPacket+0x1c4>)
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	627b      	str	r3, [r7, #36]	; 0x24
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	623b      	str	r3, [r7, #32]
 80062e4:	e00b      	b.n	80062fe <_SendPacket+0x11a>
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	1c59      	adds	r1, r3, #1
 80062ee:	6279      	str	r1, [r7, #36]	; 0x24
 80062f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062f4:	b2d2      	uxtb	r2, r2
 80062f6:	701a      	strb	r2, [r3, #0]
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	09db      	lsrs	r3, r3, #7
 80062fc:	623b      	str	r3, [r7, #32]
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	2b7f      	cmp	r3, #127	; 0x7f
 8006302:	d8f0      	bhi.n	80062e6 <_SendPacket+0x102>
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	1c5a      	adds	r2, r3, #1
 8006308:	627a      	str	r2, [r7, #36]	; 0x24
 800630a:	6a3a      	ldr	r2, [r7, #32]
 800630c:	b2d2      	uxtb	r2, r2
 800630e:	701a      	strb	r2, [r3, #0]
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8006314:	4b24      	ldr	r3, [pc, #144]	; (80063a8 <_SendPacket+0x1c4>)
 8006316:	785b      	ldrb	r3, [r3, #1]
 8006318:	4618      	mov	r0, r3
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	461a      	mov	r2, r3
 8006322:	68f9      	ldr	r1, [r7, #12]
 8006324:	f7f9 ff54 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006328:	4603      	mov	r3, r0
 800632a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800632c:	f7ff f9fc 	bl	8005728 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006336:	4a1c      	ldr	r2, [pc, #112]	; (80063a8 <_SendPacket+0x1c4>)
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	60d3      	str	r3, [r2, #12]
 800633c:	e00b      	b.n	8006356 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800633e:	4b1a      	ldr	r3, [pc, #104]	; (80063a8 <_SendPacket+0x1c4>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	3301      	adds	r3, #1
 8006344:	b2da      	uxtb	r2, r3
 8006346:	4b18      	ldr	r3, [pc, #96]	; (80063a8 <_SendPacket+0x1c4>)
 8006348:	701a      	strb	r2, [r3, #0]
 800634a:	e004      	b.n	8006356 <_SendPacket+0x172>
    goto SendDone;
 800634c:	bf00      	nop
 800634e:	e002      	b.n	8006356 <_SendPacket+0x172>
      goto SendDone;
 8006350:	bf00      	nop
 8006352:	e000      	b.n	8006356 <_SendPacket+0x172>
      goto SendDone;
 8006354:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006356:	4b14      	ldr	r3, [pc, #80]	; (80063a8 <_SendPacket+0x1c4>)
 8006358:	7e1b      	ldrb	r3, [r3, #24]
 800635a:	4619      	mov	r1, r3
 800635c:	4a14      	ldr	r2, [pc, #80]	; (80063b0 <_SendPacket+0x1cc>)
 800635e:	460b      	mov	r3, r1
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	440b      	add	r3, r1
 8006364:	00db      	lsls	r3, r3, #3
 8006366:	4413      	add	r3, r2
 8006368:	336c      	adds	r3, #108	; 0x6c
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	4b0e      	ldr	r3, [pc, #56]	; (80063a8 <_SendPacket+0x1c4>)
 800636e:	7e1b      	ldrb	r3, [r3, #24]
 8006370:	4618      	mov	r0, r3
 8006372:	490f      	ldr	r1, [pc, #60]	; (80063b0 <_SendPacket+0x1cc>)
 8006374:	4603      	mov	r3, r0
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	4403      	add	r3, r0
 800637a:	00db      	lsls	r3, r3, #3
 800637c:	440b      	add	r3, r1
 800637e:	3370      	adds	r3, #112	; 0x70
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d00b      	beq.n	800639e <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006386:	4b08      	ldr	r3, [pc, #32]	; (80063a8 <_SendPacket+0x1c4>)
 8006388:	789b      	ldrb	r3, [r3, #2]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d107      	bne.n	800639e <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800638e:	4b06      	ldr	r3, [pc, #24]	; (80063a8 <_SendPacket+0x1c4>)
 8006390:	2201      	movs	r2, #1
 8006392:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006394:	f7ff fe42 	bl	800601c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006398:	4b03      	ldr	r3, [pc, #12]	; (80063a8 <_SendPacket+0x1c4>)
 800639a:	2200      	movs	r2, #0
 800639c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800639e:	bf00      	nop
 80063a0:	3728      	adds	r7, #40	; 0x28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	200143e0 	.word	0x200143e0
 80063ac:	e0001004 	.word	0xe0001004
 80063b0:	20012f20 	.word	0x20012f20

080063b4 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b08a      	sub	sp, #40	; 0x28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	460b      	mov	r3, r1
 80063be:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	3301      	adds	r3, #1
 80063ca:	2b80      	cmp	r3, #128	; 0x80
 80063cc:	d80a      	bhi.n	80063e4 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	1c59      	adds	r1, r3, #1
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	6051      	str	r1, [r2, #4]
 80063d8:	78fa      	ldrb	r2, [r7, #3]
 80063da:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	1c5a      	adds	r2, r3, #1
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	2b80      	cmp	r3, #128	; 0x80
 80063ea:	d15a      	bne.n	80064a2 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691a      	ldr	r2, [r3, #16]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	b2d2      	uxtb	r2, r2
 80063f6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	627b      	str	r3, [r7, #36]	; 0x24
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	623b      	str	r3, [r7, #32]
 800640c:	e00b      	b.n	8006426 <_StoreChar+0x72>
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	b2da      	uxtb	r2, r3
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	1c59      	adds	r1, r3, #1
 8006416:	6279      	str	r1, [r7, #36]	; 0x24
 8006418:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800641c:	b2d2      	uxtb	r2, r2
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	09db      	lsrs	r3, r3, #7
 8006424:	623b      	str	r3, [r7, #32]
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	2b7f      	cmp	r3, #127	; 0x7f
 800642a:	d8f0      	bhi.n	800640e <_StoreChar+0x5a>
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	627a      	str	r2, [r7, #36]	; 0x24
 8006432:	6a3a      	ldr	r2, [r7, #32]
 8006434:	b2d2      	uxtb	r2, r2
 8006436:	701a      	strb	r2, [r3, #0]
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	61fb      	str	r3, [r7, #28]
 8006440:	2300      	movs	r3, #0
 8006442:	61bb      	str	r3, [r7, #24]
 8006444:	e00b      	b.n	800645e <_StoreChar+0xaa>
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	b2da      	uxtb	r2, r3
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	1c59      	adds	r1, r3, #1
 800644e:	61f9      	str	r1, [r7, #28]
 8006450:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006454:	b2d2      	uxtb	r2, r2
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	09db      	lsrs	r3, r3, #7
 800645c:	61bb      	str	r3, [r7, #24]
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	2b7f      	cmp	r3, #127	; 0x7f
 8006462:	d8f0      	bhi.n	8006446 <_StoreChar+0x92>
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	61fa      	str	r2, [r7, #28]
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	701a      	strb	r2, [r3, #0]
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	221a      	movs	r2, #26
 800647a:	6939      	ldr	r1, [r7, #16]
 800647c:	4618      	mov	r0, r3
 800647e:	f7ff feb1 	bl	80061e4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4618      	mov	r0, r3
 8006488:	f7ff fdbb 	bl	8006002 <_PreparePacket>
 800648c:	4602      	mov	r2, r0
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	611a      	str	r2, [r3, #16]
  }
}
 80064a2:	bf00      	nop
 80064a4:	3728      	adds	r7, #40	; 0x28
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
	...

080064ac <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b08a      	sub	sp, #40	; 0x28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
 80064b8:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80064be:	2301      	movs	r3, #1
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80064c2:	2301      	movs	r3, #1
 80064c4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80064c6:	e007      	b.n	80064d8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80064c8:	6a3a      	ldr	r2, [r7, #32]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d0:	623b      	str	r3, [r7, #32]
    Width++;
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	3301      	adds	r3, #1
 80064d6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80064d8:	6a3a      	ldr	r2, [r7, #32]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d2f3      	bcs.n	80064c8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80064e0:	683a      	ldr	r2, [r7, #0]
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d901      	bls.n	80064ec <_PrintUnsigned+0x40>
    Width = NumDigits;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80064ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d11f      	bne.n	8006536 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80064f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d01c      	beq.n	8006536 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80064fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d005      	beq.n	8006512 <_PrintUnsigned+0x66>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d102      	bne.n	8006512 <_PrintUnsigned+0x66>
        c = '0';
 800650c:	2330      	movs	r3, #48	; 0x30
 800650e:	76fb      	strb	r3, [r7, #27]
 8006510:	e001      	b.n	8006516 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8006512:	2320      	movs	r3, #32
 8006514:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006516:	e007      	b.n	8006528 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8006518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651a:	3b01      	subs	r3, #1
 800651c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800651e:	7efb      	ldrb	r3, [r7, #27]
 8006520:	4619      	mov	r1, r3
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f7ff ff46 	bl	80063b4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <_PrintUnsigned+0x8a>
 800652e:	69fa      	ldr	r2, [r7, #28]
 8006530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006532:	429a      	cmp	r2, r3
 8006534:	d3f0      	bcc.n	8006518 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d903      	bls.n	8006544 <_PrintUnsigned+0x98>
      NumDigits--;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	3b01      	subs	r3, #1
 8006540:	603b      	str	r3, [r7, #0]
 8006542:	e009      	b.n	8006558 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006548:	fbb2 f3f3 	udiv	r3, r2, r3
 800654c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	429a      	cmp	r2, r3
 8006554:	d200      	bcs.n	8006558 <_PrintUnsigned+0xac>
        break;
 8006556:	e005      	b.n	8006564 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	fb02 f303 	mul.w	r3, r2, r3
 8006560:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006562:	e7e8      	b.n	8006536 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006568:	fbb2 f3f3 	udiv	r3, r2, r3
 800656c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006572:	fb02 f303 	mul.w	r3, r2, r3
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800657c:	4a15      	ldr	r2, [pc, #84]	; (80065d4 <_PrintUnsigned+0x128>)
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	4413      	add	r3, r2
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	4619      	mov	r1, r3
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f7ff ff14 	bl	80063b4 <_StoreChar>
    Digit /= Base;
 800658c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	fbb2 f3f3 	udiv	r3, r2, r3
 8006594:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1e3      	bne.n	8006564 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800659c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d011      	beq.n	80065ca <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80065a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00e      	beq.n	80065ca <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80065ac:	e006      	b.n	80065bc <_PrintUnsigned+0x110>
        FieldWidth--;
 80065ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b0:	3b01      	subs	r3, #1
 80065b2:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80065b4:	2120      	movs	r1, #32
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f7ff fefc 	bl	80063b4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80065bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <_PrintUnsigned+0x11e>
 80065c2:	69fa      	ldr	r2, [r7, #28]
 80065c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d3f1      	bcc.n	80065ae <_PrintUnsigned+0x102>
      }
    }
  }
}
 80065ca:	bf00      	nop
 80065cc:	3728      	adds	r7, #40	; 0x28
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	08007d54 	.word	0x08007d54

080065d8 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80065d8:	b580      	push	{r7, lr}
 80065da:	b088      	sub	sp, #32
 80065dc:	af02      	add	r7, sp, #8
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	bfb8      	it	lt
 80065ec:	425b      	neglt	r3, r3
 80065ee:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80065f0:	2301      	movs	r3, #1
 80065f2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80065f4:	e007      	b.n	8006606 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80065fe:	613b      	str	r3, [r7, #16]
    Width++;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	3301      	adds	r3, #1
 8006604:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	429a      	cmp	r2, r3
 800660c:	daf3      	bge.n	80065f6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	429a      	cmp	r2, r3
 8006614:	d901      	bls.n	800661a <_PrintInt+0x42>
    Width = NumDigits;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00a      	beq.n	8006636 <_PrintInt+0x5e>
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	db04      	blt.n	8006630 <_PrintInt+0x58>
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <_PrintInt+0x5e>
    FieldWidth--;
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	3b01      	subs	r3, #1
 8006634:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <_PrintInt+0x6e>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d016      	beq.n	8006674 <_PrintInt+0x9c>
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	2b00      	cmp	r3, #0
 800664e:	d111      	bne.n	8006674 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00e      	beq.n	8006674 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006656:	e006      	b.n	8006666 <_PrintInt+0x8e>
        FieldWidth--;
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	3b01      	subs	r3, #1
 800665c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800665e:	2120      	movs	r1, #32
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f7ff fea7 	bl	80063b4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <_PrintInt+0x9c>
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	429a      	cmp	r2, r3
 8006672:	d3f1      	bcc.n	8006658 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	da07      	bge.n	800668a <_PrintInt+0xb2>
    v = -v;
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	425b      	negs	r3, r3
 800667e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8006680:	212d      	movs	r1, #45	; 0x2d
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f7ff fe96 	bl	80063b4 <_StoreChar>
 8006688:	e008      	b.n	800669c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	f003 0304 	and.w	r3, r3, #4
 8006690:	2b00      	cmp	r3, #0
 8006692:	d003      	beq.n	800669c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006694:	212b      	movs	r1, #43	; 0x2b
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f7ff fe8c 	bl	80063b4 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d019      	beq.n	80066da <_PrintInt+0x102>
 80066a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d114      	bne.n	80066da <_PrintInt+0x102>
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d111      	bne.n	80066da <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00e      	beq.n	80066da <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80066bc:	e006      	b.n	80066cc <_PrintInt+0xf4>
        FieldWidth--;
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	3b01      	subs	r3, #1
 80066c2:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80066c4:	2130      	movs	r1, #48	; 0x30
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f7ff fe74 	bl	80063b4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <_PrintInt+0x102>
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d3f1      	bcc.n	80066be <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80066da:	68b9      	ldr	r1, [r7, #8]
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	9301      	str	r3, [sp, #4]
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f7ff fedf 	bl	80064ac <_PrintUnsigned>
}
 80066ee:	bf00      	nop
 80066f0:	3718      	adds	r7, #24
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
	...

080066f8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b098      	sub	sp, #96	; 0x60
 80066fc:	af02      	add	r7, sp, #8
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006704:	f3ef 8311 	mrs	r3, BASEPRI
 8006708:	f04f 0120 	mov.w	r1, #32
 800670c:	f381 8811 	msr	BASEPRI, r1
 8006710:	633b      	str	r3, [r7, #48]	; 0x30
 8006712:	48b7      	ldr	r0, [pc, #732]	; (80069f0 <_VPrintTarget+0x2f8>)
 8006714:	f7ff fc75 	bl	8006002 <_PreparePacket>
 8006718:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800671a:	4bb5      	ldr	r3, [pc, #724]	; (80069f0 <_VPrintTarget+0x2f8>)
 800671c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800671e:	2300      	movs	r3, #0
 8006720:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006724:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	3301      	adds	r3, #1
 800672a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	3301      	adds	r3, #1
 800673c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800673e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 8183 	beq.w	8006a4e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8006748:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800674c:	2b25      	cmp	r3, #37	; 0x25
 800674e:	f040 8170 	bne.w	8006a32 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006752:	2300      	movs	r3, #0
 8006754:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8006756:	2301      	movs	r3, #1
 8006758:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8006762:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006766:	3b23      	subs	r3, #35	; 0x23
 8006768:	2b0d      	cmp	r3, #13
 800676a:	d83f      	bhi.n	80067ec <_VPrintTarget+0xf4>
 800676c:	a201      	add	r2, pc, #4	; (adr r2, 8006774 <_VPrintTarget+0x7c>)
 800676e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006772:	bf00      	nop
 8006774:	080067dd 	.word	0x080067dd
 8006778:	080067ed 	.word	0x080067ed
 800677c:	080067ed 	.word	0x080067ed
 8006780:	080067ed 	.word	0x080067ed
 8006784:	080067ed 	.word	0x080067ed
 8006788:	080067ed 	.word	0x080067ed
 800678c:	080067ed 	.word	0x080067ed
 8006790:	080067ed 	.word	0x080067ed
 8006794:	080067cd 	.word	0x080067cd
 8006798:	080067ed 	.word	0x080067ed
 800679c:	080067ad 	.word	0x080067ad
 80067a0:	080067ed 	.word	0x080067ed
 80067a4:	080067ed 	.word	0x080067ed
 80067a8:	080067bd 	.word	0x080067bd
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80067ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ae:	f043 0301 	orr.w	r3, r3, #1
 80067b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	3301      	adds	r3, #1
 80067b8:	60fb      	str	r3, [r7, #12]
 80067ba:	e01a      	b.n	80067f2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80067bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067be:	f043 0302 	orr.w	r3, r3, #2
 80067c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3301      	adds	r3, #1
 80067c8:	60fb      	str	r3, [r7, #12]
 80067ca:	e012      	b.n	80067f2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80067cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ce:	f043 0304 	orr.w	r3, r3, #4
 80067d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	3301      	adds	r3, #1
 80067d8:	60fb      	str	r3, [r7, #12]
 80067da:	e00a      	b.n	80067f2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80067dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067de:	f043 0308 	orr.w	r3, r3, #8
 80067e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	3301      	adds	r3, #1
 80067e8:	60fb      	str	r3, [r7, #12]
 80067ea:	e002      	b.n	80067f2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80067ec:	2300      	movs	r3, #0
 80067ee:	653b      	str	r3, [r7, #80]	; 0x50
 80067f0:	bf00      	nop
        }
      } while (v);
 80067f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1b0      	bne.n	800675a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80067f8:	2300      	movs	r3, #0
 80067fa:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8006804:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006808:	2b2f      	cmp	r3, #47	; 0x2f
 800680a:	d912      	bls.n	8006832 <_VPrintTarget+0x13a>
 800680c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006810:	2b39      	cmp	r3, #57	; 0x39
 8006812:	d80e      	bhi.n	8006832 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	3301      	adds	r3, #1
 8006818:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800681a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800681c:	4613      	mov	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	005b      	lsls	r3, r3, #1
 8006824:	461a      	mov	r2, r3
 8006826:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800682a:	4413      	add	r3, r2
 800682c:	3b30      	subs	r3, #48	; 0x30
 800682e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8006830:	e7e4      	b.n	80067fc <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006832:	2300      	movs	r3, #0
 8006834:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800683e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006842:	2b2e      	cmp	r3, #46	; 0x2e
 8006844:	d11d      	bne.n	8006882 <_VPrintTarget+0x18a>
        sFormat++;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3301      	adds	r3, #1
 800684a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006854:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006858:	2b2f      	cmp	r3, #47	; 0x2f
 800685a:	d912      	bls.n	8006882 <_VPrintTarget+0x18a>
 800685c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006860:	2b39      	cmp	r3, #57	; 0x39
 8006862:	d80e      	bhi.n	8006882 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	3301      	adds	r3, #1
 8006868:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800686a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800686c:	4613      	mov	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	005b      	lsls	r3, r3, #1
 8006874:	461a      	mov	r2, r3
 8006876:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800687a:	4413      	add	r3, r2
 800687c:	3b30      	subs	r3, #48	; 0x30
 800687e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8006880:	e7e4      	b.n	800684c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800688a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800688e:	2b6c      	cmp	r3, #108	; 0x6c
 8006890:	d003      	beq.n	800689a <_VPrintTarget+0x1a2>
 8006892:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006896:	2b68      	cmp	r3, #104	; 0x68
 8006898:	d107      	bne.n	80068aa <_VPrintTarget+0x1b2>
          c = *sFormat;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	3301      	adds	r3, #1
 80068a6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80068a8:	e7ef      	b.n	800688a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80068aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068ae:	2b25      	cmp	r3, #37	; 0x25
 80068b0:	f000 80b3 	beq.w	8006a1a <_VPrintTarget+0x322>
 80068b4:	2b25      	cmp	r3, #37	; 0x25
 80068b6:	f2c0 80b7 	blt.w	8006a28 <_VPrintTarget+0x330>
 80068ba:	2b78      	cmp	r3, #120	; 0x78
 80068bc:	f300 80b4 	bgt.w	8006a28 <_VPrintTarget+0x330>
 80068c0:	2b58      	cmp	r3, #88	; 0x58
 80068c2:	f2c0 80b1 	blt.w	8006a28 <_VPrintTarget+0x330>
 80068c6:	3b58      	subs	r3, #88	; 0x58
 80068c8:	2b20      	cmp	r3, #32
 80068ca:	f200 80ad 	bhi.w	8006a28 <_VPrintTarget+0x330>
 80068ce:	a201      	add	r2, pc, #4	; (adr r2, 80068d4 <_VPrintTarget+0x1dc>)
 80068d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d4:	080069cb 	.word	0x080069cb
 80068d8:	08006a29 	.word	0x08006a29
 80068dc:	08006a29 	.word	0x08006a29
 80068e0:	08006a29 	.word	0x08006a29
 80068e4:	08006a29 	.word	0x08006a29
 80068e8:	08006a29 	.word	0x08006a29
 80068ec:	08006a29 	.word	0x08006a29
 80068f0:	08006a29 	.word	0x08006a29
 80068f4:	08006a29 	.word	0x08006a29
 80068f8:	08006a29 	.word	0x08006a29
 80068fc:	08006a29 	.word	0x08006a29
 8006900:	08006959 	.word	0x08006959
 8006904:	0800697f 	.word	0x0800697f
 8006908:	08006a29 	.word	0x08006a29
 800690c:	08006a29 	.word	0x08006a29
 8006910:	08006a29 	.word	0x08006a29
 8006914:	08006a29 	.word	0x08006a29
 8006918:	08006a29 	.word	0x08006a29
 800691c:	08006a29 	.word	0x08006a29
 8006920:	08006a29 	.word	0x08006a29
 8006924:	08006a29 	.word	0x08006a29
 8006928:	08006a29 	.word	0x08006a29
 800692c:	08006a29 	.word	0x08006a29
 8006930:	08006a29 	.word	0x08006a29
 8006934:	080069f5 	.word	0x080069f5
 8006938:	08006a29 	.word	0x08006a29
 800693c:	08006a29 	.word	0x08006a29
 8006940:	08006a29 	.word	0x08006a29
 8006944:	08006a29 	.word	0x08006a29
 8006948:	080069a5 	.word	0x080069a5
 800694c:	08006a29 	.word	0x08006a29
 8006950:	08006a29 	.word	0x08006a29
 8006954:	080069cb 	.word	0x080069cb
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	1d19      	adds	r1, r3, #4
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	6011      	str	r1, [r2, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8006966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006968:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 800696c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006970:	f107 0314 	add.w	r3, r7, #20
 8006974:	4611      	mov	r1, r2
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff fd1c 	bl	80063b4 <_StoreChar>
        break;
 800697c:	e055      	b.n	8006a2a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	1d19      	adds	r1, r3, #4
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	6011      	str	r1, [r2, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800698c:	f107 0014 	add.w	r0, r7, #20
 8006990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006992:	9301      	str	r3, [sp, #4]
 8006994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800699a:	220a      	movs	r2, #10
 800699c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800699e:	f7ff fe1b 	bl	80065d8 <_PrintInt>
        break;
 80069a2:	e042      	b.n	8006a2a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	1d19      	adds	r1, r3, #4
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	6011      	str	r1, [r2, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80069b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80069b4:	f107 0014 	add.w	r0, r7, #20
 80069b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069ba:	9301      	str	r3, [sp, #4]
 80069bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c2:	220a      	movs	r2, #10
 80069c4:	f7ff fd72 	bl	80064ac <_PrintUnsigned>
        break;
 80069c8:	e02f      	b.n	8006a2a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	1d19      	adds	r1, r3, #4
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	6011      	str	r1, [r2, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80069d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80069da:	f107 0014 	add.w	r0, r7, #20
 80069de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069e0:	9301      	str	r3, [sp, #4]
 80069e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069e8:	2210      	movs	r2, #16
 80069ea:	f7ff fd5f 	bl	80064ac <_PrintUnsigned>
        break;
 80069ee:	e01c      	b.n	8006a2a <_VPrintTarget+0x332>
 80069f0:	20014410 	.word	0x20014410
      case 'p':
        v = va_arg(*pParamList, int);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	1d19      	adds	r1, r3, #4
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	6011      	str	r1, [r2, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006a02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a04:	f107 0014 	add.w	r0, r7, #20
 8006a08:	2300      	movs	r3, #0
 8006a0a:	9301      	str	r3, [sp, #4]
 8006a0c:	2308      	movs	r3, #8
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	2308      	movs	r3, #8
 8006a12:	2210      	movs	r2, #16
 8006a14:	f7ff fd4a 	bl	80064ac <_PrintUnsigned>
        break;
 8006a18:	e007      	b.n	8006a2a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006a1a:	f107 0314 	add.w	r3, r7, #20
 8006a1e:	2125      	movs	r1, #37	; 0x25
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7ff fcc7 	bl	80063b4 <_StoreChar>
        break;
 8006a26:	e000      	b.n	8006a2a <_VPrintTarget+0x332>
      default:
        break;
 8006a28:	bf00      	nop
      }
      sFormat++;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	60fb      	str	r3, [r7, #12]
 8006a30:	e007      	b.n	8006a42 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8006a32:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006a36:	f107 0314 	add.w	r3, r7, #20
 8006a3a:	4611      	mov	r1, r2
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7ff fcb9 	bl	80063b4 <_StoreChar>
    }
  } while (*sFormat);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f47f ae72 	bne.w	8006730 <_VPrintTarget+0x38>
 8006a4c:	e000      	b.n	8006a50 <_VPrintTarget+0x358>
      break;
 8006a4e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d041      	beq.n	8006ada <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8006a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	b2d2      	uxtb	r2, r2
 8006a5c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	643b      	str	r3, [r7, #64]	; 0x40
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a66:	e00b      	b.n	8006a80 <_VPrintTarget+0x388>
 8006a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a6a:	b2da      	uxtb	r2, r3
 8006a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a6e:	1c59      	adds	r1, r3, #1
 8006a70:	6439      	str	r1, [r7, #64]	; 0x40
 8006a72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a76:	b2d2      	uxtb	r2, r2
 8006a78:	701a      	strb	r2, [r3, #0]
 8006a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a7c:	09db      	lsrs	r3, r3, #7
 8006a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a82:	2b7f      	cmp	r3, #127	; 0x7f
 8006a84:	d8f0      	bhi.n	8006a68 <_VPrintTarget+0x370>
 8006a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	643a      	str	r2, [r7, #64]	; 0x40
 8006a8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a8e:	b2d2      	uxtb	r2, r2
 8006a90:	701a      	strb	r2, [r3, #0]
 8006a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a94:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a9e:	e00b      	b.n	8006ab8 <_VPrintTarget+0x3c0>
 8006aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa6:	1c59      	adds	r1, r3, #1
 8006aa8:	63b9      	str	r1, [r7, #56]	; 0x38
 8006aaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	701a      	strb	r2, [r3, #0]
 8006ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab4:	09db      	lsrs	r3, r3, #7
 8006ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aba:	2b7f      	cmp	r3, #127	; 0x7f
 8006abc:	d8f0      	bhi.n	8006aa0 <_VPrintTarget+0x3a8>
 8006abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	63ba      	str	r2, [r7, #56]	; 0x38
 8006ac4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ac6:	b2d2      	uxtb	r2, r2
 8006ac8:	701a      	strb	r2, [r3, #0]
 8006aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006acc:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	69b9      	ldr	r1, [r7, #24]
 8006ad2:	221a      	movs	r2, #26
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7ff fb85 	bl	80061e4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006adc:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006ae0:	bf00      	nop
 8006ae2:	3758      	adds	r7, #88	; 0x58
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af02      	add	r7, sp, #8
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
 8006af4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006af6:	2300      	movs	r3, #0
 8006af8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006afc:	4917      	ldr	r1, [pc, #92]	; (8006b5c <SEGGER_SYSVIEW_Init+0x74>)
 8006afe:	4818      	ldr	r0, [pc, #96]	; (8006b60 <SEGGER_SYSVIEW_Init+0x78>)
 8006b00:	f7ff f93e 	bl	8005d80 <SEGGER_RTT_AllocUpBuffer>
 8006b04:	4603      	mov	r3, r0
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	4b16      	ldr	r3, [pc, #88]	; (8006b64 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b0a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006b0c:	4b15      	ldr	r3, [pc, #84]	; (8006b64 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b0e:	785a      	ldrb	r2, [r3, #1]
 8006b10:	4b14      	ldr	r3, [pc, #80]	; (8006b64 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b12:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006b14:	4b13      	ldr	r3, [pc, #76]	; (8006b64 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b16:	7e1b      	ldrb	r3, [r3, #24]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	2308      	movs	r3, #8
 8006b20:	4a11      	ldr	r2, [pc, #68]	; (8006b68 <SEGGER_SYSVIEW_Init+0x80>)
 8006b22:	490f      	ldr	r1, [pc, #60]	; (8006b60 <SEGGER_SYSVIEW_Init+0x78>)
 8006b24:	f7ff f9b0 	bl	8005e88 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006b28:	4b0e      	ldr	r3, [pc, #56]	; (8006b64 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006b2e:	4b0f      	ldr	r3, [pc, #60]	; (8006b6c <SEGGER_SYSVIEW_Init+0x84>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a0c      	ldr	r2, [pc, #48]	; (8006b64 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b34:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006b36:	4a0b      	ldr	r2, [pc, #44]	; (8006b64 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006b3c:	4a09      	ldr	r2, [pc, #36]	; (8006b64 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006b42:	4a08      	ldr	r2, [pc, #32]	; (8006b64 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006b48:	4a06      	ldr	r2, [pc, #24]	; (8006b64 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006b4e:	4b05      	ldr	r3, [pc, #20]	; (8006b64 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006b54:	bf00      	nop
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	200133d8 	.word	0x200133d8
 8006b60:	08007d1c 	.word	0x08007d1c
 8006b64:	200143e0 	.word	0x200143e0
 8006b68:	200143d8 	.word	0x200143d8
 8006b6c:	e0001004 	.word	0xe0001004

08006b70 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006b78:	4a04      	ldr	r2, [pc, #16]	; (8006b8c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6113      	str	r3, [r2, #16]
}
 8006b7e:	bf00      	nop
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	200143e0 	.word	0x200143e0

08006b90 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b98:	f3ef 8311 	mrs	r3, BASEPRI
 8006b9c:	f04f 0120 	mov.w	r1, #32
 8006ba0:	f381 8811 	msr	BASEPRI, r1
 8006ba4:	60fb      	str	r3, [r7, #12]
 8006ba6:	4808      	ldr	r0, [pc, #32]	; (8006bc8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006ba8:	f7ff fa2b 	bl	8006002 <_PreparePacket>
 8006bac:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	68b9      	ldr	r1, [r7, #8]
 8006bb2:	68b8      	ldr	r0, [r7, #8]
 8006bb4:	f7ff fb16 	bl	80061e4 <_SendPacket>
  RECORD_END();
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f383 8811 	msr	BASEPRI, r3
}
 8006bbe:	bf00      	nop
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20014410 	.word	0x20014410

08006bcc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b088      	sub	sp, #32
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006bd6:	f3ef 8311 	mrs	r3, BASEPRI
 8006bda:	f04f 0120 	mov.w	r1, #32
 8006bde:	f381 8811 	msr	BASEPRI, r1
 8006be2:	617b      	str	r3, [r7, #20]
 8006be4:	4816      	ldr	r0, [pc, #88]	; (8006c40 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006be6:	f7ff fa0c 	bl	8006002 <_PreparePacket>
 8006bea:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	61fb      	str	r3, [r7, #28]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	61bb      	str	r3, [r7, #24]
 8006bf8:	e00b      	b.n	8006c12 <SEGGER_SYSVIEW_RecordU32+0x46>
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	1c59      	adds	r1, r3, #1
 8006c02:	61f9      	str	r1, [r7, #28]
 8006c04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c08:	b2d2      	uxtb	r2, r2
 8006c0a:	701a      	strb	r2, [r3, #0]
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	09db      	lsrs	r3, r3, #7
 8006c10:	61bb      	str	r3, [r7, #24]
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	2b7f      	cmp	r3, #127	; 0x7f
 8006c16:	d8f0      	bhi.n	8006bfa <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	61fa      	str	r2, [r7, #28]
 8006c1e:	69ba      	ldr	r2, [r7, #24]
 8006c20:	b2d2      	uxtb	r2, r2
 8006c22:	701a      	strb	r2, [r3, #0]
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	68f9      	ldr	r1, [r7, #12]
 8006c2c:	6938      	ldr	r0, [r7, #16]
 8006c2e:	f7ff fad9 	bl	80061e4 <_SendPacket>
  RECORD_END();
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f383 8811 	msr	BASEPRI, r3
}
 8006c38:	bf00      	nop
 8006c3a:	3720      	adds	r7, #32
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	20014410 	.word	0x20014410

08006c44 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b08c      	sub	sp, #48	; 0x30
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c50:	f3ef 8311 	mrs	r3, BASEPRI
 8006c54:	f04f 0120 	mov.w	r1, #32
 8006c58:	f381 8811 	msr	BASEPRI, r1
 8006c5c:	61fb      	str	r3, [r7, #28]
 8006c5e:	4825      	ldr	r0, [pc, #148]	; (8006cf4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006c60:	f7ff f9cf 	bl	8006002 <_PreparePacket>
 8006c64:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c72:	e00b      	b.n	8006c8c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7a:	1c59      	adds	r1, r3, #1
 8006c7c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006c7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c82:	b2d2      	uxtb	r2, r2
 8006c84:	701a      	strb	r2, [r3, #0]
 8006c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c88:	09db      	lsrs	r3, r3, #7
 8006c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c90:	d8f0      	bhi.n	8006c74 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	701a      	strb	r2, [r3, #0]
 8006c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	623b      	str	r3, [r7, #32]
 8006caa:	e00b      	b.n	8006cc4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	1c59      	adds	r1, r3, #1
 8006cb4:	6279      	str	r1, [r7, #36]	; 0x24
 8006cb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cba:	b2d2      	uxtb	r2, r2
 8006cbc:	701a      	strb	r2, [r3, #0]
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	09db      	lsrs	r3, r3, #7
 8006cc2:	623b      	str	r3, [r7, #32]
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	2b7f      	cmp	r3, #127	; 0x7f
 8006cc8:	d8f0      	bhi.n	8006cac <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	1c5a      	adds	r2, r3, #1
 8006cce:	627a      	str	r2, [r7, #36]	; 0x24
 8006cd0:	6a3a      	ldr	r2, [r7, #32]
 8006cd2:	b2d2      	uxtb	r2, r2
 8006cd4:	701a      	strb	r2, [r3, #0]
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	6979      	ldr	r1, [r7, #20]
 8006cde:	69b8      	ldr	r0, [r7, #24]
 8006ce0:	f7ff fa80 	bl	80061e4 <_SendPacket>
  RECORD_END();
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	f383 8811 	msr	BASEPRI, r3
}
 8006cea:	bf00      	nop
 8006cec:	3730      	adds	r7, #48	; 0x30
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	20014410 	.word	0x20014410

08006cf8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b08e      	sub	sp, #56	; 0x38
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
 8006d04:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d06:	f3ef 8311 	mrs	r3, BASEPRI
 8006d0a:	f04f 0120 	mov.w	r1, #32
 8006d0e:	f381 8811 	msr	BASEPRI, r1
 8006d12:	61fb      	str	r3, [r7, #28]
 8006d14:	4832      	ldr	r0, [pc, #200]	; (8006de0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006d16:	f7ff f974 	bl	8006002 <_PreparePacket>
 8006d1a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	637b      	str	r3, [r7, #52]	; 0x34
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	633b      	str	r3, [r7, #48]	; 0x30
 8006d28:	e00b      	b.n	8006d42 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d30:	1c59      	adds	r1, r3, #1
 8006d32:	6379      	str	r1, [r7, #52]	; 0x34
 8006d34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d38:	b2d2      	uxtb	r2, r2
 8006d3a:	701a      	strb	r2, [r3, #0]
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3e:	09db      	lsrs	r3, r3, #7
 8006d40:	633b      	str	r3, [r7, #48]	; 0x30
 8006d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d44:	2b7f      	cmp	r3, #127	; 0x7f
 8006d46:	d8f0      	bhi.n	8006d2a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4a:	1c5a      	adds	r2, r3, #1
 8006d4c:	637a      	str	r2, [r7, #52]	; 0x34
 8006d4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d50:	b2d2      	uxtb	r2, r2
 8006d52:	701a      	strb	r2, [r3, #0]
 8006d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d56:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d60:	e00b      	b.n	8006d7a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d68:	1c59      	adds	r1, r3, #1
 8006d6a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006d6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d70:	b2d2      	uxtb	r2, r2
 8006d72:	701a      	strb	r2, [r3, #0]
 8006d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d76:	09db      	lsrs	r3, r3, #7
 8006d78:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7c:	2b7f      	cmp	r3, #127	; 0x7f
 8006d7e:	d8f0      	bhi.n	8006d62 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d88:	b2d2      	uxtb	r2, r2
 8006d8a:	701a      	strb	r2, [r3, #0]
 8006d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	623b      	str	r3, [r7, #32]
 8006d98:	e00b      	b.n	8006db2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006d9a:	6a3b      	ldr	r3, [r7, #32]
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	1c59      	adds	r1, r3, #1
 8006da2:	6279      	str	r1, [r7, #36]	; 0x24
 8006da4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006da8:	b2d2      	uxtb	r2, r2
 8006daa:	701a      	strb	r2, [r3, #0]
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	09db      	lsrs	r3, r3, #7
 8006db0:	623b      	str	r3, [r7, #32]
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	2b7f      	cmp	r3, #127	; 0x7f
 8006db6:	d8f0      	bhi.n	8006d9a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	1c5a      	adds	r2, r3, #1
 8006dbc:	627a      	str	r2, [r7, #36]	; 0x24
 8006dbe:	6a3a      	ldr	r2, [r7, #32]
 8006dc0:	b2d2      	uxtb	r2, r2
 8006dc2:	701a      	strb	r2, [r3, #0]
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	6979      	ldr	r1, [r7, #20]
 8006dcc:	69b8      	ldr	r0, [r7, #24]
 8006dce:	f7ff fa09 	bl	80061e4 <_SendPacket>
  RECORD_END();
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	f383 8811 	msr	BASEPRI, r3
}
 8006dd8:	bf00      	nop
 8006dda:	3738      	adds	r7, #56	; 0x38
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	20014410 	.word	0x20014410

08006de4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b090      	sub	sp, #64	; 0x40
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006df2:	f3ef 8311 	mrs	r3, BASEPRI
 8006df6:	f04f 0120 	mov.w	r1, #32
 8006dfa:	f381 8811 	msr	BASEPRI, r1
 8006dfe:	61fb      	str	r3, [r7, #28]
 8006e00:	4840      	ldr	r0, [pc, #256]	; (8006f04 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006e02:	f7ff f8fe 	bl	8006002 <_PreparePacket>
 8006e06:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e14:	e00b      	b.n	8006e2e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e18:	b2da      	uxtb	r2, r3
 8006e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e1c:	1c59      	adds	r1, r3, #1
 8006e1e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006e20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e24:	b2d2      	uxtb	r2, r2
 8006e26:	701a      	strb	r2, [r3, #0]
 8006e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2a:	09db      	lsrs	r3, r3, #7
 8006e2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e30:	2b7f      	cmp	r3, #127	; 0x7f
 8006e32:	d8f0      	bhi.n	8006e16 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e36:	1c5a      	adds	r2, r3, #1
 8006e38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006e3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e3c:	b2d2      	uxtb	r2, r2
 8006e3e:	701a      	strb	r2, [r3, #0]
 8006e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e42:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	637b      	str	r3, [r7, #52]	; 0x34
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	633b      	str	r3, [r7, #48]	; 0x30
 8006e4c:	e00b      	b.n	8006e66 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e54:	1c59      	adds	r1, r3, #1
 8006e56:	6379      	str	r1, [r7, #52]	; 0x34
 8006e58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e5c:	b2d2      	uxtb	r2, r2
 8006e5e:	701a      	strb	r2, [r3, #0]
 8006e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e62:	09db      	lsrs	r3, r3, #7
 8006e64:	633b      	str	r3, [r7, #48]	; 0x30
 8006e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e68:	2b7f      	cmp	r3, #127	; 0x7f
 8006e6a:	d8f0      	bhi.n	8006e4e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6e:	1c5a      	adds	r2, r3, #1
 8006e70:	637a      	str	r2, [r7, #52]	; 0x34
 8006e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e74:	b2d2      	uxtb	r2, r2
 8006e76:	701a      	strb	r2, [r3, #0]
 8006e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e84:	e00b      	b.n	8006e9e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8c:	1c59      	adds	r1, r3, #1
 8006e8e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006e90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e94:	b2d2      	uxtb	r2, r2
 8006e96:	701a      	strb	r2, [r3, #0]
 8006e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9a:	09db      	lsrs	r3, r3, #7
 8006e9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ea2:	d8f0      	bhi.n	8006e86 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea6:	1c5a      	adds	r2, r3, #1
 8006ea8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eac:	b2d2      	uxtb	r2, r2
 8006eae:	701a      	strb	r2, [r3, #0]
 8006eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8006eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eba:	623b      	str	r3, [r7, #32]
 8006ebc:	e00b      	b.n	8006ed6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec4:	1c59      	adds	r1, r3, #1
 8006ec6:	6279      	str	r1, [r7, #36]	; 0x24
 8006ec8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	09db      	lsrs	r3, r3, #7
 8006ed4:	623b      	str	r3, [r7, #32]
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8006eda:	d8f0      	bhi.n	8006ebe <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	627a      	str	r2, [r7, #36]	; 0x24
 8006ee2:	6a3a      	ldr	r2, [r7, #32]
 8006ee4:	b2d2      	uxtb	r2, r2
 8006ee6:	701a      	strb	r2, [r3, #0]
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eea:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	6979      	ldr	r1, [r7, #20]
 8006ef0:	69b8      	ldr	r0, [r7, #24]
 8006ef2:	f7ff f977 	bl	80061e4 <_SendPacket>
  RECORD_END();
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	f383 8811 	msr	BASEPRI, r3
}
 8006efc:	bf00      	nop
 8006efe:	3740      	adds	r7, #64	; 0x40
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	20014410 	.word	0x20014410

08006f08 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08c      	sub	sp, #48	; 0x30
 8006f0c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006f0e:	4b59      	ldr	r3, [pc, #356]	; (8007074 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f10:	2201      	movs	r2, #1
 8006f12:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006f14:	f3ef 8311 	mrs	r3, BASEPRI
 8006f18:	f04f 0120 	mov.w	r1, #32
 8006f1c:	f381 8811 	msr	BASEPRI, r1
 8006f20:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006f22:	4b54      	ldr	r3, [pc, #336]	; (8007074 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f24:	785b      	ldrb	r3, [r3, #1]
 8006f26:	220a      	movs	r2, #10
 8006f28:	4953      	ldr	r1, [pc, #332]	; (8007078 <SEGGER_SYSVIEW_Start+0x170>)
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7f9 f950 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006f36:	f7fe fbf7 	bl	8005728 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006f3a:	200a      	movs	r0, #10
 8006f3c:	f7ff fe28 	bl	8006b90 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006f40:	f3ef 8311 	mrs	r3, BASEPRI
 8006f44:	f04f 0120 	mov.w	r1, #32
 8006f48:	f381 8811 	msr	BASEPRI, r1
 8006f4c:	60bb      	str	r3, [r7, #8]
 8006f4e:	484b      	ldr	r0, [pc, #300]	; (800707c <SEGGER_SYSVIEW_Start+0x174>)
 8006f50:	f7ff f857 	bl	8006002 <_PreparePacket>
 8006f54:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f5e:	4b45      	ldr	r3, [pc, #276]	; (8007074 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f64:	e00b      	b.n	8006f7e <SEGGER_SYSVIEW_Start+0x76>
 8006f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6c:	1c59      	adds	r1, r3, #1
 8006f6e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006f70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f74:	b2d2      	uxtb	r2, r2
 8006f76:	701a      	strb	r2, [r3, #0]
 8006f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7a:	09db      	lsrs	r3, r3, #7
 8006f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f80:	2b7f      	cmp	r3, #127	; 0x7f
 8006f82:	d8f0      	bhi.n	8006f66 <SEGGER_SYSVIEW_Start+0x5e>
 8006f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f86:	1c5a      	adds	r2, r3, #1
 8006f88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f8c:	b2d2      	uxtb	r2, r2
 8006f8e:	701a      	strb	r2, [r3, #0]
 8006f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f92:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	627b      	str	r3, [r7, #36]	; 0x24
 8006f98:	4b36      	ldr	r3, [pc, #216]	; (8007074 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	623b      	str	r3, [r7, #32]
 8006f9e:	e00b      	b.n	8006fb8 <SEGGER_SYSVIEW_Start+0xb0>
 8006fa0:	6a3b      	ldr	r3, [r7, #32]
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	1c59      	adds	r1, r3, #1
 8006fa8:	6279      	str	r1, [r7, #36]	; 0x24
 8006faa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fae:	b2d2      	uxtb	r2, r2
 8006fb0:	701a      	strb	r2, [r3, #0]
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	09db      	lsrs	r3, r3, #7
 8006fb6:	623b      	str	r3, [r7, #32]
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	2b7f      	cmp	r3, #127	; 0x7f
 8006fbc:	d8f0      	bhi.n	8006fa0 <SEGGER_SYSVIEW_Start+0x98>
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc0:	1c5a      	adds	r2, r3, #1
 8006fc2:	627a      	str	r2, [r7, #36]	; 0x24
 8006fc4:	6a3a      	ldr	r2, [r7, #32]
 8006fc6:	b2d2      	uxtb	r2, r2
 8006fc8:	701a      	strb	r2, [r3, #0]
 8006fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fcc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	61fb      	str	r3, [r7, #28]
 8006fd2:	4b28      	ldr	r3, [pc, #160]	; (8007074 <SEGGER_SYSVIEW_Start+0x16c>)
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	61bb      	str	r3, [r7, #24]
 8006fd8:	e00b      	b.n	8006ff2 <SEGGER_SYSVIEW_Start+0xea>
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	1c59      	adds	r1, r3, #1
 8006fe2:	61f9      	str	r1, [r7, #28]
 8006fe4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fe8:	b2d2      	uxtb	r2, r2
 8006fea:	701a      	strb	r2, [r3, #0]
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	09db      	lsrs	r3, r3, #7
 8006ff0:	61bb      	str	r3, [r7, #24]
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	2b7f      	cmp	r3, #127	; 0x7f
 8006ff6:	d8f0      	bhi.n	8006fda <SEGGER_SYSVIEW_Start+0xd2>
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	1c5a      	adds	r2, r3, #1
 8006ffc:	61fa      	str	r2, [r7, #28]
 8006ffe:	69ba      	ldr	r2, [r7, #24]
 8007000:	b2d2      	uxtb	r2, r2
 8007002:	701a      	strb	r2, [r3, #0]
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	2300      	movs	r3, #0
 800700e:	613b      	str	r3, [r7, #16]
 8007010:	e00b      	b.n	800702a <SEGGER_SYSVIEW_Start+0x122>
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	b2da      	uxtb	r2, r3
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	1c59      	adds	r1, r3, #1
 800701a:	6179      	str	r1, [r7, #20]
 800701c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007020:	b2d2      	uxtb	r2, r2
 8007022:	701a      	strb	r2, [r3, #0]
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	09db      	lsrs	r3, r3, #7
 8007028:	613b      	str	r3, [r7, #16]
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	2b7f      	cmp	r3, #127	; 0x7f
 800702e:	d8f0      	bhi.n	8007012 <SEGGER_SYSVIEW_Start+0x10a>
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	1c5a      	adds	r2, r3, #1
 8007034:	617a      	str	r2, [r7, #20]
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	b2d2      	uxtb	r2, r2
 800703a:	701a      	strb	r2, [r3, #0]
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007040:	2218      	movs	r2, #24
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7ff f8cd 	bl	80061e4 <_SendPacket>
      RECORD_END();
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007050:	4b08      	ldr	r3, [pc, #32]	; (8007074 <SEGGER_SYSVIEW_Start+0x16c>)
 8007052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007058:	4b06      	ldr	r3, [pc, #24]	; (8007074 <SEGGER_SYSVIEW_Start+0x16c>)
 800705a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800705e:	f000 f9eb 	bl	8007438 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007062:	f000 f9b1 	bl	80073c8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8007066:	f000 fc83 	bl	8007970 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800706a:	bf00      	nop
 800706c:	3730      	adds	r7, #48	; 0x30
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	200143e0 	.word	0x200143e0
 8007078:	08007d48 	.word	0x08007d48
 800707c:	20014410 	.word	0x20014410

08007080 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007086:	f3ef 8311 	mrs	r3, BASEPRI
 800708a:	f04f 0120 	mov.w	r1, #32
 800708e:	f381 8811 	msr	BASEPRI, r1
 8007092:	607b      	str	r3, [r7, #4]
 8007094:	480b      	ldr	r0, [pc, #44]	; (80070c4 <SEGGER_SYSVIEW_Stop+0x44>)
 8007096:	f7fe ffb4 	bl	8006002 <_PreparePacket>
 800709a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800709c:	4b0a      	ldr	r3, [pc, #40]	; (80070c8 <SEGGER_SYSVIEW_Stop+0x48>)
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d007      	beq.n	80070b4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80070a4:	220b      	movs	r2, #11
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	6838      	ldr	r0, [r7, #0]
 80070aa:	f7ff f89b 	bl	80061e4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80070ae:	4b06      	ldr	r3, [pc, #24]	; (80070c8 <SEGGER_SYSVIEW_Stop+0x48>)
 80070b0:	2200      	movs	r2, #0
 80070b2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f383 8811 	msr	BASEPRI, r3
}
 80070ba:	bf00      	nop
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	20014410 	.word	0x20014410
 80070c8:	200143e0 	.word	0x200143e0

080070cc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b08c      	sub	sp, #48	; 0x30
 80070d0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80070d2:	f3ef 8311 	mrs	r3, BASEPRI
 80070d6:	f04f 0120 	mov.w	r1, #32
 80070da:	f381 8811 	msr	BASEPRI, r1
 80070de:	60fb      	str	r3, [r7, #12]
 80070e0:	4845      	ldr	r0, [pc, #276]	; (80071f8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80070e2:	f7fe ff8e 	bl	8006002 <_PreparePacket>
 80070e6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070f0:	4b42      	ldr	r3, [pc, #264]	; (80071fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80070f6:	e00b      	b.n	8007110 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80070f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fa:	b2da      	uxtb	r2, r3
 80070fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fe:	1c59      	adds	r1, r3, #1
 8007100:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007102:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007106:	b2d2      	uxtb	r2, r2
 8007108:	701a      	strb	r2, [r3, #0]
 800710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710c:	09db      	lsrs	r3, r3, #7
 800710e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007112:	2b7f      	cmp	r3, #127	; 0x7f
 8007114:	d8f0      	bhi.n	80070f8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800711c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800711e:	b2d2      	uxtb	r2, r2
 8007120:	701a      	strb	r2, [r3, #0]
 8007122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007124:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	627b      	str	r3, [r7, #36]	; 0x24
 800712a:	4b34      	ldr	r3, [pc, #208]	; (80071fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	623b      	str	r3, [r7, #32]
 8007130:	e00b      	b.n	800714a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007132:	6a3b      	ldr	r3, [r7, #32]
 8007134:	b2da      	uxtb	r2, r3
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	1c59      	adds	r1, r3, #1
 800713a:	6279      	str	r1, [r7, #36]	; 0x24
 800713c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007140:	b2d2      	uxtb	r2, r2
 8007142:	701a      	strb	r2, [r3, #0]
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	09db      	lsrs	r3, r3, #7
 8007148:	623b      	str	r3, [r7, #32]
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	2b7f      	cmp	r3, #127	; 0x7f
 800714e:	d8f0      	bhi.n	8007132 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007152:	1c5a      	adds	r2, r3, #1
 8007154:	627a      	str	r2, [r7, #36]	; 0x24
 8007156:	6a3a      	ldr	r2, [r7, #32]
 8007158:	b2d2      	uxtb	r2, r2
 800715a:	701a      	strb	r2, [r3, #0]
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	61fb      	str	r3, [r7, #28]
 8007164:	4b25      	ldr	r3, [pc, #148]	; (80071fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	61bb      	str	r3, [r7, #24]
 800716a:	e00b      	b.n	8007184 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	b2da      	uxtb	r2, r3
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	1c59      	adds	r1, r3, #1
 8007174:	61f9      	str	r1, [r7, #28]
 8007176:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800717a:	b2d2      	uxtb	r2, r2
 800717c:	701a      	strb	r2, [r3, #0]
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	09db      	lsrs	r3, r3, #7
 8007182:	61bb      	str	r3, [r7, #24]
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	2b7f      	cmp	r3, #127	; 0x7f
 8007188:	d8f0      	bhi.n	800716c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	1c5a      	adds	r2, r3, #1
 800718e:	61fa      	str	r2, [r7, #28]
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	b2d2      	uxtb	r2, r2
 8007194:	701a      	strb	r2, [r3, #0]
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	617b      	str	r3, [r7, #20]
 800719e:	2300      	movs	r3, #0
 80071a0:	613b      	str	r3, [r7, #16]
 80071a2:	e00b      	b.n	80071bc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	1c59      	adds	r1, r3, #1
 80071ac:	6179      	str	r1, [r7, #20]
 80071ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071b2:	b2d2      	uxtb	r2, r2
 80071b4:	701a      	strb	r2, [r3, #0]
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	09db      	lsrs	r3, r3, #7
 80071ba:	613b      	str	r3, [r7, #16]
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	2b7f      	cmp	r3, #127	; 0x7f
 80071c0:	d8f0      	bhi.n	80071a4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	1c5a      	adds	r2, r3, #1
 80071c6:	617a      	str	r2, [r7, #20]
 80071c8:	693a      	ldr	r2, [r7, #16]
 80071ca:	b2d2      	uxtb	r2, r2
 80071cc:	701a      	strb	r2, [r3, #0]
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80071d2:	2218      	movs	r2, #24
 80071d4:	6879      	ldr	r1, [r7, #4]
 80071d6:	68b8      	ldr	r0, [r7, #8]
 80071d8:	f7ff f804 	bl	80061e4 <_SendPacket>
  RECORD_END();
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80071e2:	4b06      	ldr	r3, [pc, #24]	; (80071fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80071e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d002      	beq.n	80071f0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80071ea:	4b04      	ldr	r3, [pc, #16]	; (80071fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	4798      	blx	r3
  }
}
 80071f0:	bf00      	nop
 80071f2:	3730      	adds	r7, #48	; 0x30
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	20014410 	.word	0x20014410
 80071fc:	200143e0 	.word	0x200143e0

08007200 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007200:	b580      	push	{r7, lr}
 8007202:	b092      	sub	sp, #72	; 0x48
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007208:	f3ef 8311 	mrs	r3, BASEPRI
 800720c:	f04f 0120 	mov.w	r1, #32
 8007210:	f381 8811 	msr	BASEPRI, r1
 8007214:	617b      	str	r3, [r7, #20]
 8007216:	486a      	ldr	r0, [pc, #424]	; (80073c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007218:	f7fe fef3 	bl	8006002 <_PreparePacket>
 800721c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	647b      	str	r3, [r7, #68]	; 0x44
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	4b66      	ldr	r3, [pc, #408]	; (80073c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	643b      	str	r3, [r7, #64]	; 0x40
 8007232:	e00b      	b.n	800724c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007236:	b2da      	uxtb	r2, r3
 8007238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800723a:	1c59      	adds	r1, r3, #1
 800723c:	6479      	str	r1, [r7, #68]	; 0x44
 800723e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007242:	b2d2      	uxtb	r2, r2
 8007244:	701a      	strb	r2, [r3, #0]
 8007246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007248:	09db      	lsrs	r3, r3, #7
 800724a:	643b      	str	r3, [r7, #64]	; 0x40
 800724c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800724e:	2b7f      	cmp	r3, #127	; 0x7f
 8007250:	d8f0      	bhi.n	8007234 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007254:	1c5a      	adds	r2, r3, #1
 8007256:	647a      	str	r2, [r7, #68]	; 0x44
 8007258:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800725a:	b2d2      	uxtb	r2, r2
 800725c:	701a      	strb	r2, [r3, #0]
 800725e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007260:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	63bb      	str	r3, [r7, #56]	; 0x38
 800726c:	e00b      	b.n	8007286 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800726e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007270:	b2da      	uxtb	r2, r3
 8007272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007274:	1c59      	adds	r1, r3, #1
 8007276:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007278:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800727c:	b2d2      	uxtb	r2, r2
 800727e:	701a      	strb	r2, [r3, #0]
 8007280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007282:	09db      	lsrs	r3, r3, #7
 8007284:	63bb      	str	r3, [r7, #56]	; 0x38
 8007286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007288:	2b7f      	cmp	r3, #127	; 0x7f
 800728a:	d8f0      	bhi.n	800726e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800728c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800728e:	1c5a      	adds	r2, r3, #1
 8007290:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007292:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007294:	b2d2      	uxtb	r2, r2
 8007296:	701a      	strb	r2, [r3, #0]
 8007298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800729a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	2220      	movs	r2, #32
 80072a2:	4619      	mov	r1, r3
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f7fe fe5f 	bl	8005f68 <_EncodeStr>
 80072aa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80072ac:	2209      	movs	r2, #9
 80072ae:	68f9      	ldr	r1, [r7, #12]
 80072b0:	6938      	ldr	r0, [r7, #16]
 80072b2:	f7fe ff97 	bl	80061e4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	637b      	str	r3, [r7, #52]	; 0x34
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	4b40      	ldr	r3, [pc, #256]	; (80073c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	633b      	str	r3, [r7, #48]	; 0x30
 80072ca:	e00b      	b.n	80072e4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80072cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d2:	1c59      	adds	r1, r3, #1
 80072d4:	6379      	str	r1, [r7, #52]	; 0x34
 80072d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072da:	b2d2      	uxtb	r2, r2
 80072dc:	701a      	strb	r2, [r3, #0]
 80072de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e0:	09db      	lsrs	r3, r3, #7
 80072e2:	633b      	str	r3, [r7, #48]	; 0x30
 80072e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e6:	2b7f      	cmp	r3, #127	; 0x7f
 80072e8:	d8f0      	bhi.n	80072cc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80072ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ec:	1c5a      	adds	r2, r3, #1
 80072ee:	637a      	str	r2, [r7, #52]	; 0x34
 80072f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072f2:	b2d2      	uxtb	r2, r2
 80072f4:	701a      	strb	r2, [r3, #0]
 80072f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	62bb      	str	r3, [r7, #40]	; 0x28
 8007304:	e00b      	b.n	800731e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007308:	b2da      	uxtb	r2, r3
 800730a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730c:	1c59      	adds	r1, r3, #1
 800730e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007310:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007314:	b2d2      	uxtb	r2, r2
 8007316:	701a      	strb	r2, [r3, #0]
 8007318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731a:	09db      	lsrs	r3, r3, #7
 800731c:	62bb      	str	r3, [r7, #40]	; 0x28
 800731e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007320:	2b7f      	cmp	r3, #127	; 0x7f
 8007322:	d8f0      	bhi.n	8007306 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007326:	1c5a      	adds	r2, r3, #1
 8007328:	62fa      	str	r2, [r7, #44]	; 0x2c
 800732a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800732c:	b2d2      	uxtb	r2, r2
 800732e:	701a      	strb	r2, [r3, #0]
 8007330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007332:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	627b      	str	r3, [r7, #36]	; 0x24
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	623b      	str	r3, [r7, #32]
 800733e:	e00b      	b.n	8007358 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	b2da      	uxtb	r2, r3
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	1c59      	adds	r1, r3, #1
 8007348:	6279      	str	r1, [r7, #36]	; 0x24
 800734a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800734e:	b2d2      	uxtb	r2, r2
 8007350:	701a      	strb	r2, [r3, #0]
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	09db      	lsrs	r3, r3, #7
 8007356:	623b      	str	r3, [r7, #32]
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	2b7f      	cmp	r3, #127	; 0x7f
 800735c:	d8f0      	bhi.n	8007340 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800735e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	627a      	str	r2, [r7, #36]	; 0x24
 8007364:	6a3a      	ldr	r2, [r7, #32]
 8007366:	b2d2      	uxtb	r2, r2
 8007368:	701a      	strb	r2, [r3, #0]
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	61fb      	str	r3, [r7, #28]
 8007372:	2300      	movs	r3, #0
 8007374:	61bb      	str	r3, [r7, #24]
 8007376:	e00b      	b.n	8007390 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	b2da      	uxtb	r2, r3
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	1c59      	adds	r1, r3, #1
 8007380:	61f9      	str	r1, [r7, #28]
 8007382:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007386:	b2d2      	uxtb	r2, r2
 8007388:	701a      	strb	r2, [r3, #0]
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	09db      	lsrs	r3, r3, #7
 800738e:	61bb      	str	r3, [r7, #24]
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	2b7f      	cmp	r3, #127	; 0x7f
 8007394:	d8f0      	bhi.n	8007378 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	1c5a      	adds	r2, r3, #1
 800739a:	61fa      	str	r2, [r7, #28]
 800739c:	69ba      	ldr	r2, [r7, #24]
 800739e:	b2d2      	uxtb	r2, r2
 80073a0:	701a      	strb	r2, [r3, #0]
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80073a6:	2215      	movs	r2, #21
 80073a8:	68f9      	ldr	r1, [r7, #12]
 80073aa:	6938      	ldr	r0, [r7, #16]
 80073ac:	f7fe ff1a 	bl	80061e4 <_SendPacket>
  RECORD_END();
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f383 8811 	msr	BASEPRI, r3
}
 80073b6:	bf00      	nop
 80073b8:	3748      	adds	r7, #72	; 0x48
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	20014410 	.word	0x20014410
 80073c4:	200143e0 	.word	0x200143e0

080073c8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80073c8:	b580      	push	{r7, lr}
 80073ca:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80073cc:	4b07      	ldr	r3, [pc, #28]	; (80073ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d008      	beq.n	80073e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80073d4:	4b05      	ldr	r3, [pc, #20]	; (80073ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80073d6:	6a1b      	ldr	r3, [r3, #32]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d003      	beq.n	80073e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80073de:	4b03      	ldr	r3, [pc, #12]	; (80073ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	4798      	blx	r3
  }
}
 80073e6:	bf00      	nop
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	200143e0 	.word	0x200143e0

080073f0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80073f8:	f3ef 8311 	mrs	r3, BASEPRI
 80073fc:	f04f 0120 	mov.w	r1, #32
 8007400:	f381 8811 	msr	BASEPRI, r1
 8007404:	617b      	str	r3, [r7, #20]
 8007406:	480b      	ldr	r0, [pc, #44]	; (8007434 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007408:	f7fe fdfb 	bl	8006002 <_PreparePacket>
 800740c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800740e:	2280      	movs	r2, #128	; 0x80
 8007410:	6879      	ldr	r1, [r7, #4]
 8007412:	6938      	ldr	r0, [r7, #16]
 8007414:	f7fe fda8 	bl	8005f68 <_EncodeStr>
 8007418:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800741a:	220e      	movs	r2, #14
 800741c:	68f9      	ldr	r1, [r7, #12]
 800741e:	6938      	ldr	r0, [r7, #16]
 8007420:	f7fe fee0 	bl	80061e4 <_SendPacket>
  RECORD_END();
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f383 8811 	msr	BASEPRI, r3
}
 800742a:	bf00      	nop
 800742c:	3718      	adds	r7, #24
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	20014410 	.word	0x20014410

08007438 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007438:	b590      	push	{r4, r7, lr}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800743e:	4b15      	ldr	r3, [pc, #84]	; (8007494 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d01a      	beq.n	800747c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007446:	4b13      	ldr	r3, [pc, #76]	; (8007494 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d015      	beq.n	800747c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007450:	4b10      	ldr	r3, [pc, #64]	; (8007494 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007452:	6a1b      	ldr	r3, [r3, #32]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4798      	blx	r3
 8007458:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800745c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800745e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007462:	f04f 0200 	mov.w	r2, #0
 8007466:	f04f 0300 	mov.w	r3, #0
 800746a:	000a      	movs	r2, r1
 800746c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800746e:	4613      	mov	r3, r2
 8007470:	461a      	mov	r2, r3
 8007472:	4621      	mov	r1, r4
 8007474:	200d      	movs	r0, #13
 8007476:	f7ff fbe5 	bl	8006c44 <SEGGER_SYSVIEW_RecordU32x2>
 800747a:	e006      	b.n	800748a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800747c:	4b06      	ldr	r3, [pc, #24]	; (8007498 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4619      	mov	r1, r3
 8007482:	200c      	movs	r0, #12
 8007484:	f7ff fba2 	bl	8006bcc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007488:	bf00      	nop
 800748a:	bf00      	nop
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	bd90      	pop	{r4, r7, pc}
 8007492:	bf00      	nop
 8007494:	200143e0 	.word	0x200143e0
 8007498:	e0001004 	.word	0xe0001004

0800749c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80074a2:	f3ef 8311 	mrs	r3, BASEPRI
 80074a6:	f04f 0120 	mov.w	r1, #32
 80074aa:	f381 8811 	msr	BASEPRI, r1
 80074ae:	60fb      	str	r3, [r7, #12]
 80074b0:	4819      	ldr	r0, [pc, #100]	; (8007518 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80074b2:	f7fe fda6 	bl	8006002 <_PreparePacket>
 80074b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80074bc:	4b17      	ldr	r3, [pc, #92]	; (800751c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	617b      	str	r3, [r7, #20]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	613b      	str	r3, [r7, #16]
 80074ce:	e00b      	b.n	80074e8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	b2da      	uxtb	r2, r3
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	1c59      	adds	r1, r3, #1
 80074d8:	6179      	str	r1, [r7, #20]
 80074da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074de:	b2d2      	uxtb	r2, r2
 80074e0:	701a      	strb	r2, [r3, #0]
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	09db      	lsrs	r3, r3, #7
 80074e6:	613b      	str	r3, [r7, #16]
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	2b7f      	cmp	r3, #127	; 0x7f
 80074ec:	d8f0      	bhi.n	80074d0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	1c5a      	adds	r2, r3, #1
 80074f2:	617a      	str	r2, [r7, #20]
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	b2d2      	uxtb	r2, r2
 80074f8:	701a      	strb	r2, [r3, #0]
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80074fe:	2202      	movs	r2, #2
 8007500:	6879      	ldr	r1, [r7, #4]
 8007502:	68b8      	ldr	r0, [r7, #8]
 8007504:	f7fe fe6e 	bl	80061e4 <_SendPacket>
  RECORD_END();
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f383 8811 	msr	BASEPRI, r3
}
 800750e:	bf00      	nop
 8007510:	3718      	adds	r7, #24
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	20014410 	.word	0x20014410
 800751c:	e000ed04 	.word	0xe000ed04

08007520 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007526:	f3ef 8311 	mrs	r3, BASEPRI
 800752a:	f04f 0120 	mov.w	r1, #32
 800752e:	f381 8811 	msr	BASEPRI, r1
 8007532:	607b      	str	r3, [r7, #4]
 8007534:	4807      	ldr	r0, [pc, #28]	; (8007554 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007536:	f7fe fd64 	bl	8006002 <_PreparePacket>
 800753a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800753c:	2203      	movs	r2, #3
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6838      	ldr	r0, [r7, #0]
 8007542:	f7fe fe4f 	bl	80061e4 <_SendPacket>
  RECORD_END();
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f383 8811 	msr	BASEPRI, r3
}
 800754c:	bf00      	nop
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	20014410 	.word	0x20014410

08007558 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800755e:	f3ef 8311 	mrs	r3, BASEPRI
 8007562:	f04f 0120 	mov.w	r1, #32
 8007566:	f381 8811 	msr	BASEPRI, r1
 800756a:	607b      	str	r3, [r7, #4]
 800756c:	4807      	ldr	r0, [pc, #28]	; (800758c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800756e:	f7fe fd48 	bl	8006002 <_PreparePacket>
 8007572:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007574:	2212      	movs	r2, #18
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6838      	ldr	r0, [r7, #0]
 800757a:	f7fe fe33 	bl	80061e4 <_SendPacket>
  RECORD_END();
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f383 8811 	msr	BASEPRI, r3
}
 8007584:	bf00      	nop
 8007586:	3708      	adds	r7, #8
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	20014410 	.word	0x20014410

08007590 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007596:	f3ef 8311 	mrs	r3, BASEPRI
 800759a:	f04f 0120 	mov.w	r1, #32
 800759e:	f381 8811 	msr	BASEPRI, r1
 80075a2:	607b      	str	r3, [r7, #4]
 80075a4:	4807      	ldr	r0, [pc, #28]	; (80075c4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80075a6:	f7fe fd2c 	bl	8006002 <_PreparePacket>
 80075aa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80075ac:	2211      	movs	r2, #17
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6838      	ldr	r0, [r7, #0]
 80075b2:	f7fe fe17 	bl	80061e4 <_SendPacket>
  RECORD_END();
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f383 8811 	msr	BASEPRI, r3
}
 80075bc:	bf00      	nop
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	20014410 	.word	0x20014410

080075c8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b088      	sub	sp, #32
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80075d0:	f3ef 8311 	mrs	r3, BASEPRI
 80075d4:	f04f 0120 	mov.w	r1, #32
 80075d8:	f381 8811 	msr	BASEPRI, r1
 80075dc:	617b      	str	r3, [r7, #20]
 80075de:	4819      	ldr	r0, [pc, #100]	; (8007644 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80075e0:	f7fe fd0f 	bl	8006002 <_PreparePacket>
 80075e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80075ea:	4b17      	ldr	r3, [pc, #92]	; (8007648 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	61fb      	str	r3, [r7, #28]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	61bb      	str	r3, [r7, #24]
 80075fc:	e00b      	b.n	8007616 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	b2da      	uxtb	r2, r3
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	1c59      	adds	r1, r3, #1
 8007606:	61f9      	str	r1, [r7, #28]
 8007608:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800760c:	b2d2      	uxtb	r2, r2
 800760e:	701a      	strb	r2, [r3, #0]
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	09db      	lsrs	r3, r3, #7
 8007614:	61bb      	str	r3, [r7, #24]
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	2b7f      	cmp	r3, #127	; 0x7f
 800761a:	d8f0      	bhi.n	80075fe <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	1c5a      	adds	r2, r3, #1
 8007620:	61fa      	str	r2, [r7, #28]
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	b2d2      	uxtb	r2, r2
 8007626:	701a      	strb	r2, [r3, #0]
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800762c:	2208      	movs	r2, #8
 800762e:	68f9      	ldr	r1, [r7, #12]
 8007630:	6938      	ldr	r0, [r7, #16]
 8007632:	f7fe fdd7 	bl	80061e4 <_SendPacket>
  RECORD_END();
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f383 8811 	msr	BASEPRI, r3
}
 800763c:	bf00      	nop
 800763e:	3720      	adds	r7, #32
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	20014410 	.word	0x20014410
 8007648:	200143e0 	.word	0x200143e0

0800764c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800764c:	b580      	push	{r7, lr}
 800764e:	b088      	sub	sp, #32
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007654:	f3ef 8311 	mrs	r3, BASEPRI
 8007658:	f04f 0120 	mov.w	r1, #32
 800765c:	f381 8811 	msr	BASEPRI, r1
 8007660:	617b      	str	r3, [r7, #20]
 8007662:	4819      	ldr	r0, [pc, #100]	; (80076c8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007664:	f7fe fccd 	bl	8006002 <_PreparePacket>
 8007668:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800766e:	4b17      	ldr	r3, [pc, #92]	; (80076cc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	61fb      	str	r3, [r7, #28]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	61bb      	str	r3, [r7, #24]
 8007680:	e00b      	b.n	800769a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	b2da      	uxtb	r2, r3
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	1c59      	adds	r1, r3, #1
 800768a:	61f9      	str	r1, [r7, #28]
 800768c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007690:	b2d2      	uxtb	r2, r2
 8007692:	701a      	strb	r2, [r3, #0]
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	09db      	lsrs	r3, r3, #7
 8007698:	61bb      	str	r3, [r7, #24]
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	2b7f      	cmp	r3, #127	; 0x7f
 800769e:	d8f0      	bhi.n	8007682 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	1c5a      	adds	r2, r3, #1
 80076a4:	61fa      	str	r2, [r7, #28]
 80076a6:	69ba      	ldr	r2, [r7, #24]
 80076a8:	b2d2      	uxtb	r2, r2
 80076aa:	701a      	strb	r2, [r3, #0]
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80076b0:	2204      	movs	r2, #4
 80076b2:	68f9      	ldr	r1, [r7, #12]
 80076b4:	6938      	ldr	r0, [r7, #16]
 80076b6:	f7fe fd95 	bl	80061e4 <_SendPacket>
  RECORD_END();
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f383 8811 	msr	BASEPRI, r3
}
 80076c0:	bf00      	nop
 80076c2:	3720      	adds	r7, #32
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	20014410 	.word	0x20014410
 80076cc:	200143e0 	.word	0x200143e0

080076d0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b088      	sub	sp, #32
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80076d8:	f3ef 8311 	mrs	r3, BASEPRI
 80076dc:	f04f 0120 	mov.w	r1, #32
 80076e0:	f381 8811 	msr	BASEPRI, r1
 80076e4:	617b      	str	r3, [r7, #20]
 80076e6:	4819      	ldr	r0, [pc, #100]	; (800774c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80076e8:	f7fe fc8b 	bl	8006002 <_PreparePacket>
 80076ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80076f2:	4b17      	ldr	r3, [pc, #92]	; (8007750 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	61fb      	str	r3, [r7, #28]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	61bb      	str	r3, [r7, #24]
 8007704:	e00b      	b.n	800771e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	b2da      	uxtb	r2, r3
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	1c59      	adds	r1, r3, #1
 800770e:	61f9      	str	r1, [r7, #28]
 8007710:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007714:	b2d2      	uxtb	r2, r2
 8007716:	701a      	strb	r2, [r3, #0]
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	09db      	lsrs	r3, r3, #7
 800771c:	61bb      	str	r3, [r7, #24]
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	2b7f      	cmp	r3, #127	; 0x7f
 8007722:	d8f0      	bhi.n	8007706 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	1c5a      	adds	r2, r3, #1
 8007728:	61fa      	str	r2, [r7, #28]
 800772a:	69ba      	ldr	r2, [r7, #24]
 800772c:	b2d2      	uxtb	r2, r2
 800772e:	701a      	strb	r2, [r3, #0]
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007734:	2206      	movs	r2, #6
 8007736:	68f9      	ldr	r1, [r7, #12]
 8007738:	6938      	ldr	r0, [r7, #16]
 800773a:	f7fe fd53 	bl	80061e4 <_SendPacket>
  RECORD_END();
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	f383 8811 	msr	BASEPRI, r3
}
 8007744:	bf00      	nop
 8007746:	3720      	adds	r7, #32
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	20014410 	.word	0x20014410
 8007750:	200143e0 	.word	0x200143e0

08007754 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007754:	b580      	push	{r7, lr}
 8007756:	b08a      	sub	sp, #40	; 0x28
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800775e:	f3ef 8311 	mrs	r3, BASEPRI
 8007762:	f04f 0120 	mov.w	r1, #32
 8007766:	f381 8811 	msr	BASEPRI, r1
 800776a:	617b      	str	r3, [r7, #20]
 800776c:	4827      	ldr	r0, [pc, #156]	; (800780c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800776e:	f7fe fc48 	bl	8006002 <_PreparePacket>
 8007772:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007778:	4b25      	ldr	r3, [pc, #148]	; (8007810 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	627b      	str	r3, [r7, #36]	; 0x24
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	623b      	str	r3, [r7, #32]
 800778a:	e00b      	b.n	80077a4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800778c:	6a3b      	ldr	r3, [r7, #32]
 800778e:	b2da      	uxtb	r2, r3
 8007790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007792:	1c59      	adds	r1, r3, #1
 8007794:	6279      	str	r1, [r7, #36]	; 0x24
 8007796:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800779a:	b2d2      	uxtb	r2, r2
 800779c:	701a      	strb	r2, [r3, #0]
 800779e:	6a3b      	ldr	r3, [r7, #32]
 80077a0:	09db      	lsrs	r3, r3, #7
 80077a2:	623b      	str	r3, [r7, #32]
 80077a4:	6a3b      	ldr	r3, [r7, #32]
 80077a6:	2b7f      	cmp	r3, #127	; 0x7f
 80077a8:	d8f0      	bhi.n	800778c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	1c5a      	adds	r2, r3, #1
 80077ae:	627a      	str	r2, [r7, #36]	; 0x24
 80077b0:	6a3a      	ldr	r2, [r7, #32]
 80077b2:	b2d2      	uxtb	r2, r2
 80077b4:	701a      	strb	r2, [r3, #0]
 80077b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	61fb      	str	r3, [r7, #28]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	61bb      	str	r3, [r7, #24]
 80077c2:	e00b      	b.n	80077dc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	1c59      	adds	r1, r3, #1
 80077cc:	61f9      	str	r1, [r7, #28]
 80077ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077d2:	b2d2      	uxtb	r2, r2
 80077d4:	701a      	strb	r2, [r3, #0]
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	09db      	lsrs	r3, r3, #7
 80077da:	61bb      	str	r3, [r7, #24]
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	2b7f      	cmp	r3, #127	; 0x7f
 80077e0:	d8f0      	bhi.n	80077c4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	1c5a      	adds	r2, r3, #1
 80077e6:	61fa      	str	r2, [r7, #28]
 80077e8:	69ba      	ldr	r2, [r7, #24]
 80077ea:	b2d2      	uxtb	r2, r2
 80077ec:	701a      	strb	r2, [r3, #0]
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80077f2:	2207      	movs	r2, #7
 80077f4:	68f9      	ldr	r1, [r7, #12]
 80077f6:	6938      	ldr	r0, [r7, #16]
 80077f8:	f7fe fcf4 	bl	80061e4 <_SendPacket>
  RECORD_END();
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f383 8811 	msr	BASEPRI, r3
}
 8007802:	bf00      	nop
 8007804:	3728      	adds	r7, #40	; 0x28
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20014410 	.word	0x20014410
 8007810:	200143e0 	.word	0x200143e0

08007814 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800781c:	4b04      	ldr	r3, [pc, #16]	; (8007830 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	1ad3      	subs	r3, r2, r3
}
 8007824:	4618      	mov	r0, r3
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	200143e0 	.word	0x200143e0

08007834 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007834:	b580      	push	{r7, lr}
 8007836:	b08c      	sub	sp, #48	; 0x30
 8007838:	af00      	add	r7, sp, #0
 800783a:	4603      	mov	r3, r0
 800783c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800783e:	4b3b      	ldr	r3, [pc, #236]	; (800792c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d06d      	beq.n	8007922 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007846:	4b39      	ldr	r3, [pc, #228]	; (800792c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800784c:	2300      	movs	r3, #0
 800784e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007850:	e008      	b.n	8007864 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785a:	2b00      	cmp	r3, #0
 800785c:	d007      	beq.n	800786e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800785e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007860:	3301      	adds	r3, #1
 8007862:	62bb      	str	r3, [r7, #40]	; 0x28
 8007864:	79fb      	ldrb	r3, [r7, #7]
 8007866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007868:	429a      	cmp	r2, r3
 800786a:	d3f2      	bcc.n	8007852 <SEGGER_SYSVIEW_SendModule+0x1e>
 800786c:	e000      	b.n	8007870 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800786e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007872:	2b00      	cmp	r3, #0
 8007874:	d055      	beq.n	8007922 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007876:	f3ef 8311 	mrs	r3, BASEPRI
 800787a:	f04f 0120 	mov.w	r1, #32
 800787e:	f381 8811 	msr	BASEPRI, r1
 8007882:	617b      	str	r3, [r7, #20]
 8007884:	482a      	ldr	r0, [pc, #168]	; (8007930 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007886:	f7fe fbbc 	bl	8006002 <_PreparePacket>
 800788a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	627b      	str	r3, [r7, #36]	; 0x24
 8007894:	79fb      	ldrb	r3, [r7, #7]
 8007896:	623b      	str	r3, [r7, #32]
 8007898:	e00b      	b.n	80078b2 <SEGGER_SYSVIEW_SendModule+0x7e>
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	b2da      	uxtb	r2, r3
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	1c59      	adds	r1, r3, #1
 80078a2:	6279      	str	r1, [r7, #36]	; 0x24
 80078a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078a8:	b2d2      	uxtb	r2, r2
 80078aa:	701a      	strb	r2, [r3, #0]
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	09db      	lsrs	r3, r3, #7
 80078b0:	623b      	str	r3, [r7, #32]
 80078b2:	6a3b      	ldr	r3, [r7, #32]
 80078b4:	2b7f      	cmp	r3, #127	; 0x7f
 80078b6:	d8f0      	bhi.n	800789a <SEGGER_SYSVIEW_SendModule+0x66>
 80078b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ba:	1c5a      	adds	r2, r3, #1
 80078bc:	627a      	str	r2, [r7, #36]	; 0x24
 80078be:	6a3a      	ldr	r2, [r7, #32]
 80078c0:	b2d2      	uxtb	r2, r2
 80078c2:	701a      	strb	r2, [r3, #0]
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	61fb      	str	r3, [r7, #28]
 80078cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	61bb      	str	r3, [r7, #24]
 80078d2:	e00b      	b.n	80078ec <SEGGER_SYSVIEW_SendModule+0xb8>
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	1c59      	adds	r1, r3, #1
 80078dc:	61f9      	str	r1, [r7, #28]
 80078de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078e2:	b2d2      	uxtb	r2, r2
 80078e4:	701a      	strb	r2, [r3, #0]
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	09db      	lsrs	r3, r3, #7
 80078ea:	61bb      	str	r3, [r7, #24]
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	2b7f      	cmp	r3, #127	; 0x7f
 80078f0:	d8f0      	bhi.n	80078d4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	1c5a      	adds	r2, r3, #1
 80078f6:	61fa      	str	r2, [r7, #28]
 80078f8:	69ba      	ldr	r2, [r7, #24]
 80078fa:	b2d2      	uxtb	r2, r2
 80078fc:	701a      	strb	r2, [r3, #0]
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2280      	movs	r2, #128	; 0x80
 8007908:	4619      	mov	r1, r3
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f7fe fb2c 	bl	8005f68 <_EncodeStr>
 8007910:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007912:	2216      	movs	r2, #22
 8007914:	68f9      	ldr	r1, [r7, #12]
 8007916:	6938      	ldr	r0, [r7, #16]
 8007918:	f7fe fc64 	bl	80061e4 <_SendPacket>
      RECORD_END();
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007922:	bf00      	nop
 8007924:	3730      	adds	r7, #48	; 0x30
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	20014408 	.word	0x20014408
 8007930:	20014410 	.word	0x20014410

08007934 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800793a:	4b0c      	ldr	r3, [pc, #48]	; (800796c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00f      	beq.n	8007962 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007942:	4b0a      	ldr	r3, [pc, #40]	; (800796c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d002      	beq.n	8007956 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1f2      	bne.n	8007948 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007962:	bf00      	nop
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	20014408 	.word	0x20014408

08007970 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007976:	f3ef 8311 	mrs	r3, BASEPRI
 800797a:	f04f 0120 	mov.w	r1, #32
 800797e:	f381 8811 	msr	BASEPRI, r1
 8007982:	60fb      	str	r3, [r7, #12]
 8007984:	4817      	ldr	r0, [pc, #92]	; (80079e4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007986:	f7fe fb3c 	bl	8006002 <_PreparePacket>
 800798a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	617b      	str	r3, [r7, #20]
 8007994:	4b14      	ldr	r3, [pc, #80]	; (80079e8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	613b      	str	r3, [r7, #16]
 800799a:	e00b      	b.n	80079b4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	1c59      	adds	r1, r3, #1
 80079a4:	6179      	str	r1, [r7, #20]
 80079a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079aa:	b2d2      	uxtb	r2, r2
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	09db      	lsrs	r3, r3, #7
 80079b2:	613b      	str	r3, [r7, #16]
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	2b7f      	cmp	r3, #127	; 0x7f
 80079b8:	d8f0      	bhi.n	800799c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	1c5a      	adds	r2, r3, #1
 80079be:	617a      	str	r2, [r7, #20]
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	b2d2      	uxtb	r2, r2
 80079c4:	701a      	strb	r2, [r3, #0]
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80079ca:	221b      	movs	r2, #27
 80079cc:	6879      	ldr	r1, [r7, #4]
 80079ce:	68b8      	ldr	r0, [r7, #8]
 80079d0:	f7fe fc08 	bl	80061e4 <_SendPacket>
  RECORD_END();
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f383 8811 	msr	BASEPRI, r3
}
 80079da:	bf00      	nop
 80079dc:	3718      	adds	r7, #24
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	20014410 	.word	0x20014410
 80079e8:	2001440c 	.word	0x2001440c

080079ec <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80079ec:	b40f      	push	{r0, r1, r2, r3}
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80079f4:	f107 0314 	add.w	r3, r7, #20
 80079f8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80079fa:	1d3b      	adds	r3, r7, #4
 80079fc:	461a      	mov	r2, r3
 80079fe:	2100      	movs	r1, #0
 8007a00:	6938      	ldr	r0, [r7, #16]
 8007a02:	f7fe fe79 	bl	80066f8 <_VPrintTarget>
  va_end(ParamList);
}
 8007a06:	bf00      	nop
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a10:	b004      	add	sp, #16
 8007a12:	4770      	bx	lr

08007a14 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b08a      	sub	sp, #40	; 0x28
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007a1c:	f3ef 8311 	mrs	r3, BASEPRI
 8007a20:	f04f 0120 	mov.w	r1, #32
 8007a24:	f381 8811 	msr	BASEPRI, r1
 8007a28:	617b      	str	r3, [r7, #20]
 8007a2a:	4827      	ldr	r0, [pc, #156]	; (8007ac8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007a2c:	f7fe fae9 	bl	8006002 <_PreparePacket>
 8007a30:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007a32:	2280      	movs	r2, #128	; 0x80
 8007a34:	6879      	ldr	r1, [r7, #4]
 8007a36:	6938      	ldr	r0, [r7, #16]
 8007a38:	f7fe fa96 	bl	8005f68 <_EncodeStr>
 8007a3c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	627b      	str	r3, [r7, #36]	; 0x24
 8007a42:	2301      	movs	r3, #1
 8007a44:	623b      	str	r3, [r7, #32]
 8007a46:	e00b      	b.n	8007a60 <SEGGER_SYSVIEW_Warn+0x4c>
 8007a48:	6a3b      	ldr	r3, [r7, #32]
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4e:	1c59      	adds	r1, r3, #1
 8007a50:	6279      	str	r1, [r7, #36]	; 0x24
 8007a52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a56:	b2d2      	uxtb	r2, r2
 8007a58:	701a      	strb	r2, [r3, #0]
 8007a5a:	6a3b      	ldr	r3, [r7, #32]
 8007a5c:	09db      	lsrs	r3, r3, #7
 8007a5e:	623b      	str	r3, [r7, #32]
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	2b7f      	cmp	r3, #127	; 0x7f
 8007a64:	d8f0      	bhi.n	8007a48 <SEGGER_SYSVIEW_Warn+0x34>
 8007a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a68:	1c5a      	adds	r2, r3, #1
 8007a6a:	627a      	str	r2, [r7, #36]	; 0x24
 8007a6c:	6a3a      	ldr	r2, [r7, #32]
 8007a6e:	b2d2      	uxtb	r2, r2
 8007a70:	701a      	strb	r2, [r3, #0]
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	61fb      	str	r3, [r7, #28]
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	61bb      	str	r3, [r7, #24]
 8007a7e:	e00b      	b.n	8007a98 <SEGGER_SYSVIEW_Warn+0x84>
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	b2da      	uxtb	r2, r3
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	1c59      	adds	r1, r3, #1
 8007a88:	61f9      	str	r1, [r7, #28]
 8007a8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a8e:	b2d2      	uxtb	r2, r2
 8007a90:	701a      	strb	r2, [r3, #0]
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	09db      	lsrs	r3, r3, #7
 8007a96:	61bb      	str	r3, [r7, #24]
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8007a9c:	d8f0      	bhi.n	8007a80 <SEGGER_SYSVIEW_Warn+0x6c>
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	1c5a      	adds	r2, r3, #1
 8007aa2:	61fa      	str	r2, [r7, #28]
 8007aa4:	69ba      	ldr	r2, [r7, #24]
 8007aa6:	b2d2      	uxtb	r2, r2
 8007aa8:	701a      	strb	r2, [r3, #0]
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007aae:	221a      	movs	r2, #26
 8007ab0:	68f9      	ldr	r1, [r7, #12]
 8007ab2:	6938      	ldr	r0, [r7, #16]
 8007ab4:	f7fe fb96 	bl	80061e4 <_SendPacket>
  RECORD_END();
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f383 8811 	msr	BASEPRI, r3
}
 8007abe:	bf00      	nop
 8007ac0:	3728      	adds	r7, #40	; 0x28
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	20014410 	.word	0x20014410

08007acc <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007acc:	b580      	push	{r7, lr}
 8007ace:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007ad0:	4b13      	ldr	r3, [pc, #76]	; (8007b20 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007ad2:	7e1b      	ldrb	r3, [r3, #24]
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	4a13      	ldr	r2, [pc, #76]	; (8007b24 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007ad8:	460b      	mov	r3, r1
 8007ada:	005b      	lsls	r3, r3, #1
 8007adc:	440b      	add	r3, r1
 8007ade:	00db      	lsls	r3, r3, #3
 8007ae0:	4413      	add	r3, r2
 8007ae2:	336c      	adds	r3, #108	; 0x6c
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	4b0e      	ldr	r3, [pc, #56]	; (8007b20 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007ae8:	7e1b      	ldrb	r3, [r3, #24]
 8007aea:	4618      	mov	r0, r3
 8007aec:	490d      	ldr	r1, [pc, #52]	; (8007b24 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007aee:	4603      	mov	r3, r0
 8007af0:	005b      	lsls	r3, r3, #1
 8007af2:	4403      	add	r3, r0
 8007af4:	00db      	lsls	r3, r3, #3
 8007af6:	440b      	add	r3, r1
 8007af8:	3370      	adds	r3, #112	; 0x70
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d00b      	beq.n	8007b18 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007b00:	4b07      	ldr	r3, [pc, #28]	; (8007b20 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007b02:	789b      	ldrb	r3, [r3, #2]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d107      	bne.n	8007b18 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007b08:	4b05      	ldr	r3, [pc, #20]	; (8007b20 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007b0e:	f7fe fa85 	bl	800601c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007b12:	4b03      	ldr	r3, [pc, #12]	; (8007b20 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007b18:	4b01      	ldr	r3, [pc, #4]	; (8007b20 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	200143e0 	.word	0x200143e0
 8007b24:	20012f20 	.word	0x20012f20

08007b28 <memcmp>:
 8007b28:	b510      	push	{r4, lr}
 8007b2a:	3901      	subs	r1, #1
 8007b2c:	4402      	add	r2, r0
 8007b2e:	4290      	cmp	r0, r2
 8007b30:	d101      	bne.n	8007b36 <memcmp+0xe>
 8007b32:	2000      	movs	r0, #0
 8007b34:	e005      	b.n	8007b42 <memcmp+0x1a>
 8007b36:	7803      	ldrb	r3, [r0, #0]
 8007b38:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007b3c:	42a3      	cmp	r3, r4
 8007b3e:	d001      	beq.n	8007b44 <memcmp+0x1c>
 8007b40:	1b18      	subs	r0, r3, r4
 8007b42:	bd10      	pop	{r4, pc}
 8007b44:	3001      	adds	r0, #1
 8007b46:	e7f2      	b.n	8007b2e <memcmp+0x6>

08007b48 <memset>:
 8007b48:	4402      	add	r2, r0
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d100      	bne.n	8007b52 <memset+0xa>
 8007b50:	4770      	bx	lr
 8007b52:	f803 1b01 	strb.w	r1, [r3], #1
 8007b56:	e7f9      	b.n	8007b4c <memset+0x4>

08007b58 <__libc_init_array>:
 8007b58:	b570      	push	{r4, r5, r6, lr}
 8007b5a:	4d0d      	ldr	r5, [pc, #52]	; (8007b90 <__libc_init_array+0x38>)
 8007b5c:	4c0d      	ldr	r4, [pc, #52]	; (8007b94 <__libc_init_array+0x3c>)
 8007b5e:	1b64      	subs	r4, r4, r5
 8007b60:	10a4      	asrs	r4, r4, #2
 8007b62:	2600      	movs	r6, #0
 8007b64:	42a6      	cmp	r6, r4
 8007b66:	d109      	bne.n	8007b7c <__libc_init_array+0x24>
 8007b68:	4d0b      	ldr	r5, [pc, #44]	; (8007b98 <__libc_init_array+0x40>)
 8007b6a:	4c0c      	ldr	r4, [pc, #48]	; (8007b9c <__libc_init_array+0x44>)
 8007b6c:	f000 f826 	bl	8007bbc <_init>
 8007b70:	1b64      	subs	r4, r4, r5
 8007b72:	10a4      	asrs	r4, r4, #2
 8007b74:	2600      	movs	r6, #0
 8007b76:	42a6      	cmp	r6, r4
 8007b78:	d105      	bne.n	8007b86 <__libc_init_array+0x2e>
 8007b7a:	bd70      	pop	{r4, r5, r6, pc}
 8007b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b80:	4798      	blx	r3
 8007b82:	3601      	adds	r6, #1
 8007b84:	e7ee      	b.n	8007b64 <__libc_init_array+0xc>
 8007b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b8a:	4798      	blx	r3
 8007b8c:	3601      	adds	r6, #1
 8007b8e:	e7f2      	b.n	8007b76 <__libc_init_array+0x1e>
 8007b90:	08007d6c 	.word	0x08007d6c
 8007b94:	08007d6c 	.word	0x08007d6c
 8007b98:	08007d6c 	.word	0x08007d6c
 8007b9c:	08007d70 	.word	0x08007d70

08007ba0 <memcpy>:
 8007ba0:	440a      	add	r2, r1
 8007ba2:	4291      	cmp	r1, r2
 8007ba4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ba8:	d100      	bne.n	8007bac <memcpy+0xc>
 8007baa:	4770      	bx	lr
 8007bac:	b510      	push	{r4, lr}
 8007bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bb6:	4291      	cmp	r1, r2
 8007bb8:	d1f9      	bne.n	8007bae <memcpy+0xe>
 8007bba:	bd10      	pop	{r4, pc}

08007bbc <_init>:
 8007bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bbe:	bf00      	nop
 8007bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bc2:	bc08      	pop	{r3}
 8007bc4:	469e      	mov	lr, r3
 8007bc6:	4770      	bx	lr

08007bc8 <_fini>:
 8007bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bca:	bf00      	nop
 8007bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bce:	bc08      	pop	{r3}
 8007bd0:	469e      	mov	lr, r3
 8007bd2:	4770      	bx	lr
